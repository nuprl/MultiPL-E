language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers = {}\n  for\
    \ number in string.gmatch(numbers, \"%S+\") do\n    local value = ALL_NUMBERS[number]\n\
    \    if value == nil then\n      error(string.format(\"Unrecognized number '%s'\"\
    , number))\n    end\n    table.insert(numbers, value)\n  end\n  table.sort(numbers)\n\
    \  local result = \"\"\n  for i, number in ipairs(numbers) do\n    if i > 1 then\n\
    \      result = result .. \" \"\n    end\n    result = result .. NUMBERS[number]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl98z657.lua:6:\
    \ bad argument #1 to 'gmatch' (string expected, got table)\nstack traceback:\n\
    \t/tmp/tmpwl98z657.lua:6: in local 'candidate'\n\t/tmp/tmpwl98z657.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for number in numbers:gmatch(\"%S+\") do\n        local word_number\
    \ = number_to_int[number]\n        if word_number then\n            sorted_numbers[#sorted_numbers\
    \ + 1] = word_number\n        end\n    end\n    table.sort(sorted_numbers)\n \
    \   for i, v in ipairs(sorted_numbers) do\n        sorted_numbers[i] = int_to_number[v]\n\
    \    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdg2wz5l.lua:7:\
    \ attempt to index a nil value (global 'number_to_int')\nstack traceback:\n\t\
    /tmp/tmpsdg2wz5l.lua:7: in local 'candidate'\n\t/tmp/tmpsdg2wz5l.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_arr = {}\n\
    \  for number in numbers:gmatch(\"%a+\") do\n    table.insert(numbers_arr, number)\n\
    \  end\n  table.sort(numbers_arr)\n  return table.concat(numbers_arr, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqxox11w.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpfqxox11w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    if not numbers then return\
    \ nil end\n    local num = \"\"\n    local ord = {\n        [0] = \"zero\",\n\
    \        [1] = \"one\",\n        [2] = \"two\",\n        [3] = \"three\",\n  \
    \      [4] = \"four\",\n        [5] = \"five\",\n        [6] = \"six\",\n    \
    \    [7] = \"seven\",\n        [8] = \"eight\",\n        [9] = \"nine\"\n    }\n\
    \    local tmp = {}\n    local t = split(numbers, \" \")\n    local n = #t\n \
    \   if n > 0 then\n        for i = 1, n do\n            if tonumber(t[i]) then\n\
    \                tmp[i] = tonumber(t[i])\n            else\n                for\
    \ k, v in pairs(ord) do\n                    if v == t[i] then\n             \
    \           tmp[i] = k\n                        break\n                    end\n\
    \                end\n            end\n        end\n        table.sort(tmp)\n\
    \        for i = 1, n do\n            if num ~= \"\" then num = num .. \" \" end\n\
    \            num = num .. tostring(tmp[i])\n        end\n    end\n    return num\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp792uqp5l.lua:20:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp792uqp5l.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp792uqp5l.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_str = \"\"\n \
    \ local num_list = {}\n  for num in numbers:gmatch(\"%S+\") do\n    local n =\
    \ tonumber(num)\n    if n then\n      table.insert(num_list, n)\n    end\n  end\n\
    \  table.sort(num_list)\n  for _, n in ipairs(num_list) do\n    num_str = num_str\
    \ .. n .. \" \"\n  end\n  return num_str:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3kb8eed.lua:24:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmph3kb8eed.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local function number_from_numeral(numeral)\n    return numeral_to_number[numeral]\n\
    \  end\n  local numbers_table = table_from_string(numbers)\n  local numbers_as_numbers\
    \ = table_map(numbers_table, number_from_numeral)\n  local sorted_numbers = table_sort(numbers_as_numbers)\n\
    \  local sorted_numbers_as_strings = table_map(sorted_numbers, tostring)\n  local\
    \ sorted_numbers_as_string = table_join(sorted_numbers_as_strings, \" \")\n  return\
    \ sorted_numbers_as_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpstnx62.lua:20:\
    \ attempt to call a nil value (global 'table_from_string')\nstack traceback:\n\
    \t/tmp/tmprpstnx62.lua:20: in local 'candidate'\n\t/tmp/tmprpstnx62.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    if type(numbers) ~= 'string'\
    \ then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqlxg047s.lua:19: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral = 0\n  local\
    \ number = ''\n  local sorted = {}\n  -- Split the numbers string up into an array\n\
    \  for numeral in string.gmatch(numbers, \"%S+\") do\n    table.insert(sorted,\
    \ numeral)\n  end\n  -- Sort the array\n  table.sort(sorted)\n  -- Join the array\
    \ into a string again\n  for _, number in ipairs(sorted) do\n    if numeral ~=\
    \ 0 then\n      numeral = numeral .. ' ' .. number\n    else\n      numeral =\
    \ number\n    end\n  end\n  return numeral\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1eqgrvo.lua:28:\
    \ expected: \"\"\nactual: 0\nstack traceback:\n\t/tmp/tmpa1eqgrvo.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numbers = numbers:lower()\n\
    \tlocal numbers = numbers:gsub(\"one\", \"1\")\n\tlocal numbers = numbers:gsub(\"\
    two\", \"2\")\n\tlocal numbers = numbers:gsub(\"three\", \"3\")\n\tlocal numbers\
    \ = numbers:gsub(\"four\", \"4\")\n\tlocal numbers = numbers:gsub(\"five\", \"\
    5\")\n\tlocal numbers = numbers:gsub(\"six\", \"6\")\n\tlocal numbers = numbers:gsub(\"\
    seven\", \"7\")\n\tlocal numbers = numbers:gsub(\"eight\", \"8\")\n\tlocal numbers\
    \ = numbers:gsub(\"nine\", \"9\")\n\tlocal numbers = numbers:gsub(\"zero\", \"\
    0\")\n\tlocal numbers = numbers:gsub(\"%s+\", \" \")\n\tlocal numbers = numbers:gsub(\"\
    \ \", \"\")\n\tlocal numbers = numbers:gsub(\"(%d+)\", \"%1 \")\n\tnumbers = numbers:gsub(\"\
    [ ]+\", \" \")\n\tnumbers = numbers:gsub(\"^[ ]+\", \"\")\n\tnumbers = numbers:gsub(\"\
    [ ]+$\", \"\")\n\tnumbers = numbers:gsub(\"[ ]+\", \", \")\n\tnumbers = numbers:gsub(\"\
    0, \",\"\")\n\treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqt49fu8.lua:31:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmprqt49fu8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- body\n  return\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysqnznua.lua:12:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpysqnznua.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal result = ''\n\tlocal\
    \ function compare(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend\n\tfor _,\
    \ v in ipairs(tokenize(numbers)) do\n\t\tlocal num = to_digit(v)\n\t\tif num then\n\
    \t\t\tresult = result .. num\n\t\tend\n\tend\n\treturn table.concat(mw.text.gsplit(result,\
    \ ''), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr5l4wso.lua:9:\
    \ attempt to call a nil value (global 'tokenize')\nstack traceback:\n\t/tmp/tmpzr5l4wso.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzr5l4wso.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers = string.split(numbers)\n\
    \    local pos = {}\n    local result = {}\n    for i, number in ipairs(numbers)\
    \ do\n        if number == 'zero' then\n            pos[i] = 0\n        elseif\
    \ number == 'one' then\n            pos[i] = 1\n        elseif number == 'two'\
    \ then\n            pos[i] = 2\n        elseif number == 'three' then\n      \
    \      pos[i] = 3\n        elseif number == 'four' then\n            pos[i] =\
    \ 4\n        elseif number == 'five' then\n            pos[i] = 5\n        elseif\
    \ number == 'six' then\n            pos[i] = 6\n        elseif number == 'seven'\
    \ then\n            pos[i] = 7\n        elseif number == 'eight' then\n      \
    \      pos[i] = 8\n        elseif number == 'nine' then\n            pos[i] =\
    \ 9\n        end\n    end\n    table.sort(pos)\n    for i, p in ipairs(pos) do\n\
    \        if p == 0 then\n            result[i] = 'zero'\n        elseif p == 1\
    \ then\n            result[i] = 'one'\n        elseif p == 2 then\n          \
    \  result[i] = 'two'\n        elseif p == 3 then\n            result[i] = 'three'\n\
    \        elseif p == 4 then\n            result[i] = 'four'\n        elseif p\
    \ == 5 then\n            result[i] = 'five'\n        elseif p == 6 then\n    \
    \        result[i] = 'six'\n        elseif p == 7 then\n            result[i]\
    \ = 'seven'\n        elseif p == 8 then\n            result[i] = 'eight'\n   \
    \     elseif p == 9 then\n            result[i] = 'nine'\n        end\n    end\n\
    \    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9iv1pshq.lua:5:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp9iv1pshq.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp9iv1pshq.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {zero = 0,\
    \ one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight =\
    \ 8, nine = 9}\n    local array = {}\n    for number in numbers:gmatch(\"%w+\"\
    ) do\n        table.insert(array, nums[number])\n    end\n    table.sort(array)\n\
    \    for i, num in ipairs(array) do\n        for word, _num in pairs(nums) do\n\
    \            if num == _num then\n                array[i] = word\n          \
    \  end\n        end\n    end\n    return table.concat(array, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- Seperate numbers\n  local\
    \ nums = {}\n  for num in numbers:gmatch(\"%w+\") do\n    table.insert(nums, num)\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplmqj0nlh.lua:21: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- Your code here. \n  --\
    \ The 'numbers' input can be accessed using the variable 'numbers'\n  -- The string\
    \ should be returned using the return keyword\n  return -- A string.\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakw6vtwv.lua:14:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpakw6vtwv.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_split = {}\n\
    \  local number_map = {\n    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n\
    \    ['three'] = 3,\n    ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n\
    \    ['seven'] = 7,\n    ['eight'] = 8,\n    ['nine'] = 9\n  }\n  for number in\
    \ numbers:gmatch('%S+') do\n    table.insert(numbers_split, number_map[number])\n\
    \  end\n  table.sort(numbers_split)\n  for key, value in pairs(numbers_split)\
    \ do\n    numbers_split[key] = num_to_numeral[value]\n  end\n  return table.concat(numbers_split,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzyns80d5.lua:23:\
    \ attempt to index a nil value (global 'num_to_numeral')\nstack traceback:\n\t\
    /tmp/tmpzyns80d5.lua:23: in local 'candidate'\n\t/tmp/tmpzyns80d5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  if not numbers then return\
    \ nil end\n  local word_map = {\n    ['zero'] = 0,\n    ['one'] = 1,\n    ['two']\
    \ = 2,\n    ['three'] = 3,\n    ['four'] = 4,\n    ['five'] = 5,\n    ['six']\
    \ = 6,\n    ['seven'] = 7,\n    ['eight'] = 8,\n    ['nine'] = 9\n  }\n  local\
    \ sorted_numbers = {}\n  local numbers_list = string.split(numbers, ' ')\n  for\
    \ i = 1, #numbers_list do\n    local number = word_map[numbers_list[i]]\n    table.insert(sorted_numbers,\
    \ number)\n  end\n  table.sort(sorted_numbers)\n  for i = 1, #sorted_numbers do\n\
    \    for word, num in pairs(word_map) do\n      if num == sorted_numbers[i] then\n\
    \        sorted_numbers[i] = word\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph66e7gox.lua:19:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmph66e7gox.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmph66e7gox.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- convert the input string\
    \ to a table of words\n    local n_table = explode(\" \", numbers)\n    -- convert\
    \ the words to numbers\n    local i = 1\n    while n_table[i] do\n        n_table[i]\
    \ = word_to_number(n_table[i])\n        i = i + 1\n    end\n    -- sort from smallest\
    \ to largest\n    table.sort(n_table)\n    -- convert numbers back to words\n\
    \    i = 1\n    while n_table[i] do\n        n_table[i] = number_to_word(n_table[i])\n\
    \        i = i + 1\n    end\n    -- return the table as a string of words\n  \
    \  return table.concat(n_table, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2x12aj3g.lua:6:\
    \ attempt to call a nil value (global 'explode')\nstack traceback:\n\t/tmp/tmp2x12aj3g.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp2x12aj3g.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted = {}\n  local\
    \ split = numbers:split(' ')\n  local numbers = {\n    ['zero'] = 0,\n    ['one']\
    \ = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] = 4,\n    ['five']\
    \ = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] = 8,\n    ['nine']\
    \ = 9\n  }\n  for _, n in ipairs(split) do\n    sorted[#sorted + 1] = numbers[n]\n\
    \  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    sorted[i] = number_to_name(sorted[i])\n\
    \  end\n  return table.concat(sorted, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1lkw2vv9.lua:6:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp1lkw2vv9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp1lkw2vv9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local function text2number(numeral)\n\
    \        local numbers = {\n            zero = 0,\n            one = 1,\n    \
    \        two = 2,\n            three = 3,\n            four = 4,\n           \
    \ five = 5,\n            six = 6,\n            seven = 7,\n            eight =\
    \ 8,\n            nine = 9,\n        }\n        return numbers[numeral]\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2izyr0vd.lua:31: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  local sorted_output = \"\"\n  -- validate input\n  if type(numbers) ~= \"string\"\
    \ then\n    return nil, \"error: invalid input.\"\n  end\n  -- store numberal\
    \ words in a table\n  local number_words = {}\n  for word in string.gmatch(numbers,\
    \ \"%S+\") do\n    table.insert(number_words, word)\n  end\n  -- validate number\
    \ words\n  for k, v in pairs(number_words) do\n    if numberals[v] == nil then\n\
    \      return nil, \"error: invalid input.\"\n    end\n  end\n  -- sort numbers\
    \ based on value\n  table.sort(number_words, function(a, b) return numberals[a]\
    \ < numberals[b] end)\n  -- convert table to string\n  for k, v in pairs(number_words)\
    \ do\n    if k ~= #number_words then\n      sorted_output = sorted_output .. v\
    \ .. \" \"\n    else\n      sorted_output = sorted_output .. v\n    end\n  end\n\
    \  return sorted_output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vxaf06q.lua:18:\
    \ attempt to index a nil value (global 'numberals')\nstack traceback:\n\t/tmp/tmp7vxaf06q.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp7vxaf06q.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local list = {}\n    local\
    \ count = 1\n    for num in numbers:gmatch(\"%S+\") do\n        list[count] =\
    \ num\n        count = count + 1\n    end\n    table.sort(list)\n    return table.concat(list,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lvvamch.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp2lvvamch.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local number_list = numbers:split('\
    \ ')\n  local number_value = {}\n  for i = 1, #number_list do\n    number_value[number_list[i]]\
    \ = i\n  end\n  table.sort(number_list, function(a, b) return number_value[a]\
    \ < number_value[b] end)\n  return table.concat(number_list, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph02_0mbv.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmph02_0mbv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmph02_0mbv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- Your code here\n  \
    \  local count = {}\n    for w in string.gmatch(numbers,\"%w+\") do\n        w\
    \ = w:lower()\n        if count[w] then\n            count[w] = count[w] + 1\n\
    \        else\n            count[w] = 1\n        end\n    end\n    local sorted\
    \ = {}\n    for k, v in pairs(count) do\n        table.insert(sorted, {word =\
    \ k, count = v})\n    end\n    table.sort(sorted, function(a, b) return a.count\
    \ < b.count end)\n    local res = \"\"\n    for _, v in ipairs(sorted) do\n  \
    \      if not res then\n            res = v.word\n        else\n            res\
    \ = res .. \" \" .. v.word\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xt5snld.lua:35:\
    \ expected: \"three\"\nactual: \" three\"\nstack traceback:\n\t/tmp/tmp_xt5snld.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local final = \"\"\n \
    \   local nums = {}\n    for n in numbers:gmatch(\"%S+\") do\n        local num\
    \ = tostring(tonumber(n))\n        if num and num ~= \"0\" then\n            nums[#nums\
    \ + 1] = num\n        end\n    end\n    table.sort(nums)\n    for i = 1, #nums\
    \ do\n        final = final .. nums[i] .. \" \"\n    end\n    return final:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl9o2knr.lua:24:\
    \ expected: \"three\"\nactual: \"nil\"\nstack traceback:\n\t/tmp/tmpzl9o2knr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numbers_string = \"\
    \"\n\tlocal numbers_table = {}\n\tfor w in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(numbers_table,\
    \ number_values[w])\n\tend\n\ttable.sort(numbers_table)\n\tfor _, num in ipairs(numbers_table)\
    \ do\n\t\tnumbers_string = numbers_string .. num\n\tend\n\treturn numbers_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps52onb5e.lua:8:\
    \ attempt to index a nil value (global 'number_values')\nstack traceback:\n\t\
    /tmp/tmps52onb5e.lua:8: in local 'candidate'\n\t/tmp/tmps52onb5e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tassert(type(numbers) ==\
    \ 'string', \"numbers must be a string\")\n\tlocal nums = {}\n\tfor num in numbers:gmatch(\"\
    [^%s]+\") do\n\t\ttable.insert(nums, tonumber(numerals[num]))\n\tend\n\ttable.sort(nums)\n\
    \tlocal output = {}\n\tfor _, v in ipairs(nums) do\n\t\tfor k, _ in pairs(numerals)\
    \ do\n\t\t\tif v == numerals[k] then\n\t\t\t\ttable.insert(output, k)\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn table.concat(output, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj87ine7u.lua:8:\
    \ attempt to index a nil value (global 'numerals')\nstack traceback:\n\t/tmp/tmpj87ine7u.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpj87ine7u.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_list = string.split(numbers,\
    \ ' ')\n\tlocal num_set = {}\n\tfor i, num in ipairs(num_list) do\n\t\tnum_set[i]\
    \ = num\n\tend\n\ttable.sort(num_set)\n\treturn table.concat(num_set, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexej84xm.lua:5:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpexej84xm.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpexej84xm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        local numeral = number:lower()\n\
    \        if numeral_map[numeral] then\n            table.insert(numbers_table,\
    \ numeral_map[numeral])\n        end\n    end\n    table.sort(numbers_table)\n\
    \    local sorted_numbers = {}\n    for i, number in ipairs(numbers_table) do\n\
    \        table.insert(sorted_numbers, number)\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs1qy9pv.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmprs1qy9pv.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    [\"zero\"] = 0,\n    [\"one\"] = 1,\n    [\"two\"] = 2,\n    [\"three\"]\
    \ = 3,\n    [\"four\"] = 4,\n    [\"five\"] = 5,\n    [\"six\"] = 6,\n    [\"\
    seven\"] = 7,\n    [\"eight\"] = 8,\n    [\"nine\"] = 9\n  }\n  local numeral_list\
    \ = numbers:split(' ')\n  local int_list = {}\n  for _, numeral in ipairs(numeral_list)\
    \ do\n    table.insert(int_list, numeral_map[numeral])\n  end\n  table.sort(int_list)\n\
    \  local sorted_list = {}\n  for _, integer in ipairs(int_list) do\n    for numeral,\
    \ _ in pairs(numeral_map) do\n      if numeral_map[numeral] == integer then\n\
    \        table.insert(sorted_list, numeral)\n      end\n    end\n  end\n  return\
    \ table.concat(sorted_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_q9vce6u.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_q9vce6u.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp_q9vce6u.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local res = {}\n  for i, num\
    \ in ipairs(nums) do\n    for k, v in pairs(numeral_map) do\n      if v == num\
    \ then\n        table.insert(res, k)\n      end\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%w+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local res = {}\n  for i, num\
    \ in ipairs(nums) do\n    local numeral = \"\"\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == num then\n        numeral = k\n        break\n      end\n\
    \    end\n    table.insert(res, numeral)\n  end\n  return table.concat(res, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal sorted = {}\n\tlocal\
    \ numToNumeral = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\
    \t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\
    \tnine = 9\n\t}\n\tfor number in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(sorted,\
    \ numToNumeral[number])\n\tend\n\ttable.sort(sorted)\n\tfor i, number in ipairs(sorted)\
    \ do\n\t\tfor numeral, num in pairs(numToNumeral) do\n\t\t\tif num == number then\n\
    \t\t\t\tsorted[i] = numeral\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n   numbers = string_split(numbers,\
    \ ' ')\n   local sorter = function(a, b)\n      local order = {'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n      return\
    \ order[a] < order[b]\n   end\n   table.sort(numbers, sorter)\n   return table.concat(numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3elsxmmo.lua:5:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmp3elsxmmo.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3elsxmmo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal digits = {}\n\tfor\
    \ digit in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(digits, digit)\n\tend\n\
    \ttable.sort(digits)\n\treturn table.concat(digits, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6ycxww3.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpi6ycxww3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tnumbers = numbers:gsub(\"\
    eight\", \"8\")\n\tnumbers = numbers:gsub(\"five\", \"5\")\n\tnumbers = numbers:gsub(\"\
    four\", \"4\")\n\tnumbers = numbers:gsub(\"nine\", \"9\")\n\tnumbers = numbers:gsub(\"\
    one\", \"1\")\n\tnumbers = numbers:gsub(\"seven\", \"7\")\n\tnumbers = numbers:gsub(\"\
    six\", \"6\")\n\tnumbers = numbers:gsub(\"three\", \"3\")\n\tnumbers = numbers:gsub(\"\
    two\", \"2\")\n\tnumbers = numbers:gsub(\"zero\", \"0\")\n\treturn numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6s4e1cj.lua:22:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpp6s4e1cj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t\n\t-- Initialize a table\
    \ to store the numbers, and an array to store the number words\n\tlocal nums =\
    \ {}\n\tlocal words = {}\n\t\n\t-- Break the numbers string into an array of words\n\
    \tfor word in numbers:gmatch(\"%w+\") do\n\t\t-- Convert each word to a number,\
    \ and store it\n\t\tnums[#nums + 1] = tonumber(num_words[word])\n\t\twords[#words\
    \ + 1] = word\n\tend\n\t\n\t-- Sort the numbers\n\ttable.sort(nums)\n\t\n\t--\
    \ Construct the sorted string\n\tlocal sorted = \"\"\n\t\n\t-- For each number\
    \ in the sorted list, find it in the word array, and append it to the sorted string\n\
    \tfor i, num in ipairs(nums) do\n\t\tfor j, word in ipairs(words) do\n\t\t\tif\
    \ num == tonumber(num_words[word]) then\n\t\t\t\t-- The number was found, remove\
    \ it from the array and append it to the sorted string\n\t\t\t\tsorted = sorted\
    \ .. word .. \" \"\n\t\t\t\ttable.remove(words, j)\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\t-- Return the sorted string\n\treturn sorted\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeo8bvhox.lua:13:\
    \ attempt to index a nil value (global 'num_words')\nstack traceback:\n\t/tmp/tmpeo8bvhox.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpeo8bvhox.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_ordering =\
    \ {\n    zero  = 0,\n    one   = 1,\n    two   = 2,\n    three = 3,\n    four\
    \  = 4,\n    five  = 5,\n    six   = 6,\n    seven = 7,\n    eight = 8,\n    nine\
    \  = 9\n  }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpup_vo3j2.lua:28: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_values =\
    \ {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n\
    \        four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n\
    \        eight = 8,\n        nine = 9\n    }\n    local sorted_numeral_numbers\
    \ = {}\n    local non_space_delimited_numbers = numbers:gsub(\"%s+\", \"\")\n\
    \    for numeral in non_space_delimited_numbers:gmatch(\"%w+\") do\n        table.insert(sorted_numeral_numbers,\
    \ numeral_values[numeral])\n    end\n    table.sort(sorted_numeral_numbers)\n\
    \    return table.concat(sorted_numeral_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafa9hm9e.lua:30:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpafa9hm9e.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local s = numbers:gsub('ten',\
    \ '9'):gsub('nine', '8'):gsub('eight', '7'):gsub('seven', '6'):gsub('six', '5'):gsub('five',\
    \ '4'):gsub('four', '3'):gsub('three', '2'):gsub('two', '1'):gsub('one', '0'):gsub('zero',\
    \ '0')\n    return s:gsub('[0-9]+', function(x) return string.char(x + 48) end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplguz51ui.lua:13:\
    \ expected: \"three\"\nactual: \"2\"\nstack traceback:\n\t/tmp/tmplguz51ui.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    if type(numbers) ~= 'string'\
    \ then\n        error('Input should be a string', 3)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7g1qrmi0.lua:19: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local _, _, ret = string.find(numbers,\
    \ \"^(.+)$\")\n    if ret == nil then\n        return ret\n    end\n    local\
    \ numTable = {}\n    local retTable = {}\n    for num in string.gmatch(ret, \"\
    %S+\") do\n        if num ~= nil then\n            table.insert(numTable, num)\n\
    \        end\n    end\n    for i = 0, 9 do\n        for k, v in pairs(numTable)\
    \ do\n            if toNum(v) == i then\n                table.insert(retTable,\
    \ v)\n            end\n        end\n    end\n    local ret = \"\"\n    for k,\
    \ v in pairs(retTable) do\n        ret = ret .. v .. \" \"\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfqwdwb0.lua:33:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkfqwdwb0.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal list = {}\n\tnumbers:gsub(\"\
    (%a+)\", function(w) table.insert(list, w) end)\n\ttable.sort(list, function(a,\
    \ b) return tonumber(a) < tonumber(b) end)\n\treturn table.concat(list, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kif3pae.lua:7:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2kif3pae.lua:7:\
    \ in function </tmp/tmp2kif3pae.lua:7>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp2kif3pae.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2kif3pae.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    return table.concat(sort_table(numbers:split('\
    \ ')), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpin74uchv.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpin74uchv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpin74uchv.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numbers_tbl = {}\n\
    \tfor i in string.gmatch(numbers, '%S+') do\n\t\tnumbers_tbl[#numbers_tbl + 1]\
    \ = i\n\tend\n\ttable.sort(numbers_tbl)\n\treturn table.concat(numbers_tbl, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4omh6yrd.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp4omh6yrd.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_set = {}\n  for\
    \ word in numbers:gmatch(\"%w+\") do\n    local num = tonumber(word)\n    if num\
    \ then\n      table.insert(num_set, num)\n    end\n  end\n  table.sort(num_set)\n\
    \  return table.concat(num_set, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf91z3bvg.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpf91z3bvg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = numbers:split(\" \")\n  local output = {}\n  for _, numeral\
    \ in ipairs(numeral_list) do\n    table.insert(output, numeral_map[numeral])\n\
    \  end\n  table.sort(output)\n  local numeral_output = {}\n  for _, number in\
    \ ipairs(output) do\n    for numeral, number_number in pairs(numeral_map) do\n\
    \      if number == number_number then\n        table.insert(numeral_output, numeral)\n\
    \      end\n    end\n  end\n  return table.concat(numeral_output, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83fjcvku.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp83fjcvku.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp83fjcvku.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\treturn table.concat(numbers:match('(%S+)'):csort(),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5qmeeg5.lua:5:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpt5qmeeg5.lua:5: in\
    \ local 'candidate'\n\t/tmp/tmpt5qmeeg5.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal result = \"\"\n\t\
    local nums = {}\n\tfor i = 1, #numbers do\n\t\tnums[i] = number_to_int(numbers:sub(i,\
    \ i + 5))\n\tend\n\ttable.sort(nums)\n\tfor i = 1, #nums do\n\t\tresult = result\
    \ .. int_to_number(nums[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixb946ue.lua:8:\
    \ attempt to call a nil value (global 'number_to_int')\nstack traceback:\n\t/tmp/tmpixb946ue.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpixb946ue.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal sort = {}\n\tlocal\
    \ numbers = string.split(numbers, ' ')\n\tfor _, v in pairs(numbers) do\n\t\t\
    table.insert(sort, tonumber(string.sub(v, 5)))\n\tend\n\ttable.sort(sort)\n\t\
    numbers = {}\n\tfor _, v in pairs(sort) do\n\t\ttable.insert(numbers, ('number-%d'):format(v))\n\
    \tend\n\treturn table.concat(numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgur2h22r.lua:6:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpgur2h22r.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpgur2h22r.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tnumbers = numbers:gsub('[^%w\
    \ ]', '')\n\t\n\tlocal numbers_table = {}\n\t\n\tfor number in numbers:gmatch('%S+')\
    \ do\n\t\tnumber = number:lower()\n\t\tnumbers_table[#numbers_table + 1] = tonumber(number_keys[number])\n\
    \tend\n\t\n\ttable.sort(numbers_table)\n\t\n\tlocal sorted_numbers = {}\n\t\n\t\
    for _, number in ipairs(numbers_table) do\n\t\tsorted_numbers[#sorted_numbers\
    \ + 1] = numbers_keys[number]\n\tend\n\t\n\treturn table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2lgmg79.lua:11:\
    \ attempt to index a nil value (global 'number_keys')\nstack traceback:\n\t/tmp/tmpk2lgmg79.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk2lgmg79.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven\
    \ = 7, eight = 8, nine = 9}\n\tlocal number_to_numeral = {[0] = 'zero', [1] =\
    \ 'one', [2] = 'two', [3] = 'three', [4] = 'four', [5] = 'five', [6] = 'six',\
    \ [7] = 'seven', [8] = 'eight', [9] = 'nine'}\n\tlocal numeral_list = {}\n\t\n\
    \tfor numeral in numbers:gmatch('%a+') do\n\t\ttable.insert(numeral_list, numeral_to_number[numeral])\n\
    \tend\n\t\n\ttable.sort(numeral_list)\n\t\n\treturn table.concat(numeral_list,\
    \ ' ', function(num) return number_to_numeral[num] end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0q8623z.lua:15:\
    \ bad argument #3 to 'concat' (number expected, got function)\nstack traceback:\n\
    \t/tmp/tmpp0q8623z.lua:15: in local 'candidate'\n\t/tmp/tmpp0q8623z.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal translated_numbers\
    \ = {}\n\tfor number in string.gmatch(numbers, \"%a+\") do\n\t\ttable.insert(translated_numbers,\
    \ sort_numbers_to_digits[number])\n\tend\n\ttable.sort(translated_numbers)\n\t\
    \n\tlocal sorted_numbers = {}\n\tfor _,number in ipairs(translated_numbers) do\n\
    \t\ttable.insert(sorted_numbers, sort_digits_to_numbers[number])\n\tend\n\treturn\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9e6stu_g.lua:7:\
    \ attempt to index a nil value (global 'sort_numbers_to_digits')\nstack traceback:\n\
    \t/tmp/tmp9e6stu_g.lua:7: in local 'candidate'\n\t/tmp/tmp9e6stu_g.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_list = {}\n\
    \    for w in numbers:gmatch(\"%S+\") do\n        local num_val = w:gsub(\"%a+\"\
    , numberals)\n        num_list[#num_list + 1] = num_val\n    end\n    local b\
    \ = {}\n    for i = 0, #num_list - 1 do\n        b[i] = num_list[i + 1]\n    end\n\
    \    table.sort(b)\n    local sorted_numbers = \"\"\n    for i = 0, #b - 1 do\n\
    \        sorted_numbers = sorted_numbers .. b[i] .. \" \"\n    end\n    return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdl_nzm9p.lua:7:\
    \ bad argument #2 to 'gsub' (string/function/table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpdl_nzm9p.lua:7: in local 'candidate'\n\t/tmp/tmpdl_nzm9p.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_table =\
    \ {}\n    local sorted_numbers = {}\n    local numeral_map = {\n        ['zero']\
    \ = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n \
    \       ['four'] = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven']\
    \ = 7,\n        ['eight'] = 8,\n        ['nine'] = 9\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkpv_i88r.lua:30: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \t['zero'] = 0,\n\t\t['one'] = 1,\n\t\t['two'] = 2,\n\t\t['three'] = 3,\n\t\t\
    ['four'] = 4,\n\t\t['five'] = 5,\n\t\t['six'] = 6,\n\t\t['seven'] = 7,\n\t\t['eight']\
    \ = 8,\n\t\t['nine'] = 9\n\t}\n\tlocal numeral_map_inverse = {\n\t\t[0] = 'zero',\n\
    \t\t[1] = 'one',\n\t\t[2] = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t\
    [5] = 'five',\n\t\t[6] = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t\
    [9] = 'nine'\n\t}\n\tlocal numbers_table = {}\n\tlocal numbers_table_sorted =\
    \ {}\n\tlocal numbers_table_sorted_numeral = {}\n\t\n\tfor numeral in string.gmatch(numbers,\
    \ \"%S+\") do\n\t\ttable.insert(numbers_table, numeral_map[numeral])\n\tend\n\t\
    \n\ttable.sort(numbers_table)\n\t\n\tfor _, number in ipairs(numbers_table) do\n\
    \t\ttable.insert(numbers_table_sorted, number)\n\t\ttable.insert(numbers_table_sorted_numeral,\
    \ numeral_map_inverse[number])\n\tend\n\t\n\treturn table.concat(numbers_table_sorted_numeral,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_list = {}\n\
    \  for number in numbers:gmatch(\"%S+\") do\n    numbers_list[#numbers_list +\
    \ 1] = number\n  end\n  table.sort(numbers_list)\n  return table.concat(numbers_list,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhpy1rsd.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpvhpy1rsd.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal number_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numbers_table = {}\n\t\n\t-- Split the input into an array\n\tfor number in\
    \ numbers:gmatch(\"%S+\") do\n\t\tnumbers_table[#numbers_table + 1] = number\n\
    \tend\n\t\n\t-- Sort array in ascending order\n\ttable.sort(numbers_table, function(a,\
    \ b)\n\t\tif number_map[a] > number_map[b] then\n\t\t\treturn false\n\t\telse\n\
    \t\t\treturn true\n\t\tend\n\tend)\n\t\n\treturn table.concat(numbers_table, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    --[[\n    return table.concat(\n\
    \        table.sort(\n            utils.split(numbers, ' '),\n            function(a,\
    \ b)\n                local an = tonumber(a)\n                local bn = tonumber(b)\n\
    \                return an < bn\n            end\n        ),\n        ' '\n  \
    \  )\n    --]]\n    -- Filter out non-numbers\n    local filtered = {}\n    for\
    \ _, number in ipairs(utils.split(numbers, ' ')) do\n        local digit = tonumber(number)\n\
    \        if digit then\n            table.insert(filtered, digit)\n        end\n\
    \    end\n    -- Sort\n    table.sort(filtered)\n    -- Convert to strings\n \
    \   for i, v in ipairs(filtered) do\n        filtered[i] = tostring(v)\n    end\n\
    \    -- Return single string\n    return table.concat(filtered, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9fbzs81.lua:20:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmph9fbzs81.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmph9fbzs81.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_l = { numbers:match((numbers:gsub(\"\
    %a+\", \"(%a+)\"))) }\n    local n = #numbers_l\n    local num_sort_order = {\n\
    \        [0] = \"zero\",\n        [1] = \"one\",\n        [2] = \"two\",\n   \
    \     [3] = \"three\",\n        [4] = \"four\",\n        [5] = \"five\",\n   \
    \     [6] = \"six\",\n        [7] = \"seven\",\n        [8] = \"eight\",\n   \
    \     [9] = \"nine\"\n    }\n    -- Bubble sort:\n    for i = 1, n do\n      \
    \  for j = 1, n - i do\n            local a, b = num_sort_order[numbers_l[j]],\
    \ num_sort_order[numbers_l[j + 1]]\n            if a > b then\n              \
    \  numbers_l[j], numbers_l[j + 1] = b, a\n            end\n        end\n    end\n\
    \    return table.concat(numbers_l, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaf8hllsc.lua:5:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpaf8hllsc.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpaf8hllsc.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    numbers = normalize_numbers(numbers)\n\
    \    for i = 1, #numbers do\n        local smallest = numbers[i]\n        local\
    \ smallest_index = i\n        for j = i + 1, #numbers do\n            if numbers[j]\
    \ < smallest then\n                smallest = numbers[j]\n                smallest_index\
    \ = j\n            end\n        end\n        numbers[i], numbers[smallest_index]\
    \ = numbers[smallest_index], numbers[i]\n    end\n    return tostring(table.concat(numbers,\
    \ \" \"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9tr6fuun.lua:5:\
    \ attempt to call a nil value (global 'normalize_numbers')\nstack traceback:\n\
    \t/tmp/tmp9tr6fuun.lua:5: in local 'candidate'\n\t/tmp/tmp9tr6fuun.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted = {}\n  for\
    \ num in numbers:gmatch(\"%a+\") do\n    table.insert(sorted, num)\n  end\n  table.sort(sorted,\
    \ function(a, b)\n    local num_a = numberals[a]\n    local num_b = numberals[b]\n\
    \    return num_a < num_b\n  end)\n  return table.concat(sorted, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpennqu3de.lua:10:\
    \ attempt to index a nil value (global 'numberals')\nstack traceback:\n\t/tmp/tmpennqu3de.lua:10:\
    \ in function </tmp/tmpennqu3de.lua:9>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpennqu3de.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpennqu3de.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_tbl = {}\n  for\
    \ number in numbers:gmatch(\"%S+\") do\n    table.insert(num_tbl, number)\n  end\n\
    \  table.sort(num_tbl)\n  return table.concat(num_tbl, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5uxgxnj.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpt5uxgxnj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local result = {}\n  \
    \  local valid_numbers = {}\n    -- Valid numbers are mapped to their numeric\
    \ values.\n    for value, word in pairs(number_map) do\n        valid_numbers[word]\
    \ = value\n    end\n    -- Split the string into an array of numbers\n    for\
    \ numeral in numbers:gmatch(\"[^%s]+\") do\n        -- Only accept valid numbers\n\
    \        if valid_numbers[numeral] then\n            result[#result + 1] = valid_numbers[numeral]\n\
    \        end\n    end\n    -- Sort the numbers from smallest to largest\n    table.sort(result)\n\
    \    -- Join the sorted numbers into a space-delimited string\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyce54x7.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmppyce54x7.lua:8: in local 'candidate'\n\t/tmp/tmppyce54x7.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- Declare a table to\
    \ store the number words\n    local order = {\n        ['zero'] = 0,\n       \
    \ ['one'] = 1,\n        ['two'] = 2,\n        ['three'] = 3,\n        ['four']\
    \ = 4,\n        ['five'] = 5,\n        ['six'] = 6,\n        ['seven'] = 7,\n\
    \        ['eight'] = 8,\n        ['nine'] = 9\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxstehvh9.lua:29: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- YOUR CODE HERE\n\tlocal\
    \ num = {zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven\
    \ = 7, eight = 8, nine = 9}\n\tlocal r = {}\n\tfor i in string.gmatch(numbers,\
    \ \"%S+\") do\n\t\tr[#r+1] = i\n\tend\n\ttable.sort(r, function(a, b)\n\t\treturn\
    \ num[a] < num[b]\n\tend)\n\treturn table.concat(r, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_found =\
    \ {}\n    for _, number in pairs(string_split(numbers, \" \")) do\n        if\
    \ numbers_found[number] then\n            numbers_found[number] = numbers_found[number]\
    \ + 1\n        else\n            numbers_found[number] = 1\n        end\n    end\n\
    \    local sorted_numbers = {}\n    for number in pairs(numbers_found) do\n  \
    \      table.insert(sorted_numbers, number)\n    end\n    table.sort(sorted_numbers)\n\
    \    local result = {}\n    for _, number in pairs(sorted_numbers) do\n      \
    \  for i = 1, numbers_found[number] do\n            table.insert(result, number)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9js99yrh.lua:6:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmp9js99yrh.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp9js99yrh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- sort the input into buckets\n\
    \tlocal buckets = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\tlocal number\
    \ = NUMERALS[numeral]\n\t\tif number == nil then\n\t\t\terror((\"Invalid numeral\
    \ %q\"):format(numeral))\n\t\tend\n\t\tbuckets[number] = (buckets[number] or 0)\
    \ + 1\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_domwf3p.lua:25: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    --remove any punctuation\n\
    \    numbers = string.gsub(numbers, '%p', '')\n    --replace words with numerals\n\
    \    numbers = string.gsub(numbers, 'zero', '0')\n    numbers = string.gsub(numbers,\
    \ 'one', '1')\n    numbers = string.gsub(numbers, 'two', '2')\n    numbers = string.gsub(numbers,\
    \ 'three', '3')\n    numbers = string.gsub(numbers, 'four', '4')\n    numbers\
    \ = string.gsub(numbers, 'five', '5')\n    numbers = string.gsub(numbers, 'six',\
    \ '6')\n    numbers = string.gsub(numbers, 'seven', '7')\n    numbers = string.gsub(numbers,\
    \ 'eight', '8')\n    numbers = string.gsub(numbers, 'nine', '9')\n    --split\
    \ the numbers by spaces, then sort, then convert back to a string and return\n\
    \    local sorted = {}\n    for i in string.gmatch(numbers, '%S+') do\n      \
    \  table.insert(sorted, i)\n    end\n    table.sort(sorted)\n    return table.concat(sorted,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9h9diym.lua:31:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpt9h9diym.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- TODO: Implement sort_numbers\n\
    \t-- hint: Use table.sort and string.sub\n\t-- hint: table.sort(t, comp) can take\
    \ an optional sorting function `comp`\n\t-- hint: Look at the Lua manual for the\
    \ syntax of string.sub\n\t-- hint: Use assert to test for invalid input. assert(b,\
    \ err) will throw an error if b is not true\n\t-- hint: `numbers` is a string,\
    \ you may have to convert it to a table first\n\t\n\t-- example: 'three nine zero\
    \ four eight six seven five one two' -> 'zero one two three four five six seven\
    \ eight nine'\n\treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ycby4it.lua:22:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmp2ycby4it.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822156
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal split_numbers = {}\n\
    \tlocal split_by_space = utils.split(numbers, \" \")\n\tlocal numeral_to_int =\
    \ {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal int_to_numeral = {\n\t\t[0] = \"zero\",\n\t\t[1] = \"one\",\n\t\t[2]\
    \ = \"two\",\n\t\t[3] = \"three\",\n\t\t[4] = \"four\",\n\t\t[5] = \"five\",\n\
    \t\t[6] = \"six\",\n\t\t[7] = \"seven\",\n\t\t[8] = \"eight\",\n\t\t[9] = \"nine\"\
    \n\t}\n\tfor i = 1, #split_by_space do\n\t\tsplit_numbers[i] = numeral_to_int[split_by_space[i]]\n\
    \tend\n\ttable.sort(split_numbers)\n\tfor i = 1, #split_numbers do\n\t\tsplit_numbers[i]\
    \ = int_to_numeral[split_numbers[i]]\n\tend\n\treturn table.concat(split_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphir83zah.lua:6:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmphir83zah.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphir83zah.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- YOUR CODE HERE\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67rvydk7.lua:17: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- Put your solution here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizzc2mwp.lua:11:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpizzc2mwp.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ i,v in pairs(numbers:split(\" \")) do\n        if nums[v] then\n           \
    \ nums[v] = nums[v] + 1\n        else\n            nums[v] = 1\n        end\n\
    \    end\n    local sorted = {}\n    for i=0,9 do\n        if nums[tostring(i)]\
    \ then\n            for j=1,nums[tostring(i)] do\n                table.insert(sorted,\
    \ tostring(i))\n            end\n        end\n    end\n    return table.concat(sorted,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzva1aduf.lua:6:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpzva1aduf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpzva1aduf.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = { zero\
    \ = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight\
    \ = 8, nine = 9 }\n    local number_keys = {}\n    for _, number in ipairs(string.split(numbers,\
    \ ' ')) do\n        table.insert(number_keys, number_map[number])\n    end\n \
    \   table.sort(number_keys)\n    local result = {}\n    for _, key in ipairs(number_keys)\
    \ do\n        for number, value in pairs(number_map) do\n            if value\
    \ == key then\n                table.insert(result, number)\n                break\n\
    \            end\n        end\n    end\n    return table.concat(result, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43tmy7z8.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp43tmy7z8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp43tmy7z8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n   local num2num = {\n   \
    \   zero=0, one=1, two=2, three=3, four=4, five=5, six=6, seven=7, eight=8, nine=9\n\
    \   }\n   local r = {}\n   for w in numbers:gmatch(\"[^%s]+\") do\n      r[#r+1]\
    \ = num2num[w]\n   end\n   table.sort(r)\n   local out = {}\n   for i=1,#r do\n\
    \      out[i] = numbers:match(r[i])\n   end\n   return table.concat(out, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphblo6bna.lua:24:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphblo6bna.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local convert_to_numerals\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numerals = {}\n  for numeral in numbers:gmatch(\"%w+\") do\n    local\
    \ n = convert_to_numerals[numeral]\n    if n then\n      table.insert(numerals,\
    \ n)\n    end\n  end\n  table.sort(numerals)\n  return table.concat(numerals,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemuctsmk.lua:32:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpemuctsmk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local out = {}\n    for\
    \ i in numbers:gmatch(\"%S+\") do\n        table.insert(out, i)\n    end\n   \
    \ table.sort(out)\n    return table.concat(out, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqrgx_c3.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpnqrgx_c3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_list = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        local number_int = numeral_int_map[number]\n\
    \        assert(number_int, \"Unknown number \" .. number)\n        table.insert(numbers_list,\
    \ number_int)\n    end\n    table.sort(numbers_list)\n    local numbers_sorted\
    \ = {}\n    for _, number_int in ipairs(numbers_list) do\n        table.insert(numbers_sorted,\
    \ int_numeral_map[number_int])\n    end\n    return table.concat(numbers_sorted,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_zhibcw.lua:7:\
    \ attempt to index a nil value (global 'numeral_int_map')\nstack traceback:\n\t\
    /tmp/tmpw_zhibcw.lua:7: in local 'candidate'\n\t/tmp/tmpw_zhibcw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal t = {}\n\tfor number\
    \ in numbers:gmatch(\"%S+\") do\n\t\tif number_words[number] ~= nil then\n\t\t\
    \ttable.insert(t, number_words[number])\n\t\tend\n\tend\n\tif #t > 0 then\n\t\t\
    table.sort(t)\n\t\tlocal s = \"\"\n\t\tfor _, number in ipairs(t) do\n\t\t\tif\
    \ s == \"\" then\n\t\t\t\ts = number\n\t\t\telse\n\t\t\t\ts = s .. \" \" .. number\n\
    \t\t\tend\n\t\tend\n\t\treturn s\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgq3dipq4.lua:7:\
    \ attempt to index a nil value (global 'number_words')\nstack traceback:\n\t/tmp/tmpgq3dipq4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgq3dipq4.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal function convert_number(number)\n\
    \t\tnumber = number:lower()\n\t\tif number == \"zero\" then\n\t\t\treturn 0\n\t\
    \telseif number == \"one\" then\n\t\t\treturn 1\n\t\telseif number == \"two\"\
    \ then\n\t\t\treturn 2\n\t\telseif number == \"three\" then\n\t\t\treturn 3\n\t\
    \telseif number == \"four\" then\n\t\t\treturn 4\n\t\telseif number == \"five\"\
    \ then\n\t\t\treturn 5\n\t\telseif number == \"six\" then\n\t\t\treturn 6\n\t\t\
    elseif number == \"seven\" then\n\t\t\treturn 7\n\t\telseif number == \"eight\"\
    \ then\n\t\t\treturn 8\n\t\telseif number == \"nine\" then\n\t\t\treturn 9\n\t\
    \telse\n\t\t\treturn -1\n\t\tend\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppa7jvtgg.lua:42: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local function word_to_num(word)\n\
    \    if (word == 'zero') then return 0 end\n    if (word == 'one') then return\
    \ 1 end\n    if (word == 'two') then return 2 end\n    if (word == 'three') then\
    \ return 3 end\n    if (word == 'four') then return 4 end\n    if (word == 'five')\
    \ then return 5 end\n    if (word == 'six') then return 6 end\n    if (word ==\
    \ 'seven') then return 7 end\n    if (word == 'eight') then return 8 end\n   \
    \ if (word == 'nine') then return 9 end\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpthvsyw40.lua:28: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal function get_number(string)\n\
    \t\tlocal str = string:gsub(\" \", \"\")\n\t\tlocal s = {}\n\t\tfor v in str:gmatch(\"\
    .\") do\n\t\t\ts[#s+1] = v\n\t\tend\n\t\tlocal number = 0\n\t\tlocal base = 10\n\
    \t\tfor i = 1, #s do\n\t\t\tlocal n = _G.tonumber(s[i])\n\t\t\tif not n then\n\
    \t\t\t\tn = 0\n\t\t\tend\n\t\t\tnumber = number + (n * base^(#s-i))\n\t\tend\n\
    \t\treturn number\n\tend\n\tlocal function get_string(number)\n\t\tlocal base\
    \ = 10\n\t\tlocal s = {}\n\t\tlocal n = number\n\t\twhile n > 0 do\n\t\t\tlocal\
    \ r = n % base\n\t\t\tn = math.floor(n / base)\n\t\t\ts[#s+1] = r\n\t\tend\n\t\
    \tlocal str = \"\"\n\t\tfor i = #s, 1, -1 do\n\t\t\tstr = str .. _G.tostring(s[i])\n\
    \t\tend\n\t\treturn str\n\tend\n\tlocal function sort_str(str)\n\t\tlocal s =\
    \ {}\n\t\tfor v in str:gmatch(\".\") do\n\t\t\ts[#s+1] = v\n\t\tend\n\t\ttable.sort(s)\n\
    \t\tlocal sorted = \"\"\n\t\tfor i = 1, #s do\n\t\t\tsorted = sorted .. s[i]\n\
    \t\tend\n\t\treturn sorted\n\tend\n\tlocal t = {}\n\tfor str in numbers:gmatch(\"\
    [^%s]+\") do\n\t\tt[#t+1] = str\n\tend\n\tlocal numbers = {}\n\tfor i = 1, #t\
    \ do\n\t\tnumbers[#numbers+1] = get_number(t[i])\n\tend\n\ttable.sort(numbers)\n\
    \tlocal sorted = \"\"\n\tfor i = 1, #numbers do\n\t\tsorted = sorted .. get_string(numbers[i])\
    \ .. \" \"\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppywzwuku.lua:73: ''end'' expected (to close ''for'' at line
    59) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_order =\
    \ {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n\
    \        four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n\
    \        eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n  \
    \  local token, token_space\n    for token, token_space in numbers:gmatch(\"(%S+)(%s*)\"\
    ) do\n        if numeral_order[token] == nil then\n            error(token ..\
    \ \" is not a valid numeral\")\n        end\n        table.insert(numeral_list,\
    \ { numeral = token, space = token_space })\n    end\n    table.sort(numeral_list,\
    \ function(a, b) return numeral_order[a.numeral] < numeral_order[b.numeral] end)\n\
    \    local sorted_numbers = \"\"\n    for i, numeral in ipairs(numeral_list) do\n\
    \        sorted_numbers = sorted_numbers .. numeral.numeral .. numeral.space\n\
    \    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywa3d3n9.lua:39:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"zero four five seven\
    \ eightnine \"\nstack traceback:\n\t/tmp/tmpywa3d3n9.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local ary = {}\n  for number\
    \ in numbers:gmatch(\"%S+\") do\n    local numeral = string.lower(number)\n  \
    \  -- \"zero\" -> 0, \"three\" -> 3\n    ary[#ary + 1] = tonumber(string.sub(numeral,\
    \ 1, 1)) * 9 + tonumber(string.sub(numeral, 2, 2))\n  end\n  -- Sort the array\n\
    \  table.sort(ary)\n  -- Now format it back\n  local out = {}\n  for i, number\
    \ in ipairs(ary) do\n    local numeral\n    local ones = number % 9\n    local\
    \ tens = math.floor(number / 9)\n    if tens == 0 then\n      numeral = \"zero\"\
    \n    elseif tens == 1 then\n      numeral = \"one\"\n    elseif tens == 2 then\n\
    \      numeral = \"two\"\n    elseif tens == 3 then\n      numeral = \"three\"\
    \n    elseif tens == 4 then\n      numeral = \"four\"\n    elseif tens == 5 then\n\
    \      numeral = \"five\"\n    elseif tens == 6 then\n      numeral = \"six\"\n\
    \    elseif tens == 7 then\n      numeral = \"seven\"\n    elseif tens == 8 then\n\
    \      numeral = \"eight\"\n    elseif tens == 9 then\n      numeral = \"nine\"\
    \n    end\n    if ones == 0 then\n      numeral = numeral .. \"zero\"\n    elseif\
    \ ones == 1 then\n      numeral = numeral .. \"one\"\n    elseif ones == 2 then\n\
    \      numeral = numeral .. \"two\"\n    elseif ones == 3 then\n      numeral\
    \ = numeral .. \"three\"\n    elseif ones == 4 then\n      numeral = numeral ..\
    \ \"four\"\n    elseif ones == 5 then\n      numeral = numeral .. \"five\"\n \
    \   elseif ones == 6 then\n      numeral = numeral .. \"six\"\n    elseif ones\
    \ == 7 then\n      numeral = numeral .. \"seven\"\n    elseif ones == 8 then\n\
    \      numeral = numeral .. \"eight\"\n    elseif ones == 9 then\n      numeral\
    \ = numeral .. \"nine\"\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd83m_nm0.lua:72: ''end'' expected (to close ''if'' at line
    40) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_number =\
    \ {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n\
    \        four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n\
    \        eight = 8,\n        nine = 9\n    }\n    local numeral_number_reverse\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local sorted_numbers =\
    \ {}\n    local words = numbers:split(' ')\n    for i, word in ipairs(words) do\n\
    \        local word_lower = word:lower()\n        sorted_numbers[i] = numeral_number[word_lower]\n\
    \    end\n    table.sort(sorted_numbers)\n    for i, v in ipairs(sorted_numbers)\
    \ do\n        sorted_numbers[i] = ''\n        for numeral, number in pairs(numeral_number_reverse)\
    \ do\n            if number == v then\n                sorted_numbers[i] = numeral\n\
    \            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkiaayp0w.lua:30:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkiaayp0w.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpkiaayp0w.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- Convert string to array\
    \ of numberals\n  local numberals = {}\n  for word in numbers:gmatch(\"%w+\")\
    \ do\n    table.insert(numberals, tonumber(word))\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqv3_s3k6.lua:21: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for i, num\
    \ in pairs(numbers:split(' ')) do\n        table.insert(nums, number_map[num])\n\
    \    end\n    table.sort(nums)\n    local ret = {}\n    for i, num in pairs(nums)\
    \ do\n        for numeral, val in pairs(number_map) do\n            if val ==\
    \ num then\n                table.insert(ret, numeral)\n            end\n    \
    \    end\n    end\n    return table.concat(ret, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrk8el_.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplzrk8el_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmplzrk8el_.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local valid = {zero = 0,\
    \ one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight =\
    \ 8, nine = 9}\n  local num_table = {}\n  local words = numbers:split(' ')\n \
    \ for _, num in ipairs(words) do\n    if valid[num] ~= nil then\n      table.insert(num_table,\
    \ valid[num])\n    end\n  end\n  table.sort(num_table)\n  local result = ''\n\
    \  for _, num in ipairs(num_table) do\n    for k, v in pairs(valid) do\n     \
    \ if v == num then\n        result = result .. k .. ' '\n      end\n    end\n\
    \  end\n  return result:trim()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphznu6d8z.lua:7:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphznu6d8z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphznu6d8z.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_table =\
    \ {}\n    local number_strings = {}\n    local result = \"\"\n    local sorted_table\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppihw47el.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numbers_list = numbers:split(\" \")\n  table.sort(numbers_list, function(num1,\
    \ num2)\n    return numeral_map[num1] < numeral_map[num2]\n  end)\n  return table.concat(numbers_list,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2c85195a.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp2c85195a.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2c85195a.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- empty string case\n\t\
    if not numbers or numbers == \"\" then\n\t\treturn \"\"\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph1tb8426.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tnumbers = numbers:lower()\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj8dp5neg.lua:17: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local list = numbers:split('\
    \ ')\n  local sort_fn = function(a, b)\n    return numberals[a] < numberals[b]\n\
    \  end\n  table.sort(list, sort_fn)\n  return table.concat(list, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wi3_lta.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp5wi3_lta.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp5wi3_lta.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_list = {}\n  for\
    \ num in numbers:gmatch(\"%S+\") do\n    if num == \"zero\" then\n      table.insert(num_list,\
    \ 0)\n    elseif num == \"one\" then\n      table.insert(num_list, 1)\n    elseif\
    \ num == \"two\" then\n      table.insert(num_list, 2)\n    elseif num == \"three\"\
    \ then\n      table.insert(num_list, 3)\n    elseif num == \"four\" then\n   \
    \   table.insert(num_list, 4)\n    elseif num == \"five\" then\n      table.insert(num_list,\
    \ 5)\n    elseif num == \"six\" then\n      table.insert(num_list, 6)\n    elseif\
    \ num == \"seven\" then\n      table.insert(num_list, 7)\n    elseif num == \"\
    eight\" then\n      table.insert(num_list, 8)\n    elseif num == \"nine\" then\n\
    \      table.insert(num_list, 9)\n    end\n  end\n  table.sort(num_list)\n  local\
    \ num_string = \"\"\n  for i = 1, #num_list do\n    if num_list[i] == 0 then\n\
    \      num_string = num_string .. \"zero \"\n    elseif num_list[i] == 1 then\n\
    \      num_string = num_string .. \"one \"\n    elseif num_list[i] == 2 then\n\
    \      num_string = num_string .. \"two \"\n    elseif num_list[i] == 3 then\n\
    \      num_string = num_string .. \"three \"\n    elseif num_list[i] == 4 then\n\
    \      num_string = num_string .. \"four \"\n    elseif num_list[i] == 5 then\n\
    \      num_string = num_string .. \"five \"\n    elseif num_list[i] == 6 then\n\
    \      num_string = num_string .. \"six \"\n    elseif num_list[i] == 7 then\n\
    \      num_string = num_string .. \"seven \"\n    elseif num_list[i] == 8 then\n\
    \      num_string = num_string .. \"eight \"\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7x4oq_om.lua:62: ''end'' expected (to close ''if'' at line
    32) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_words = {}\n \
    \ for num in numbers:gmatch(\"%S+\") do\n    if num_words[num] then\n      num_words[num]\
    \ = num_words[num] + 1\n    else\n      num_words[num] = 1\n    end\n  end\n \
    \ -- sort by first digit\n  local sorted_list = {}\n  for num, count in pairs(num_words)\
    \ do\n    table.insert(sorted_list, string.format(\"%s %s\", count, num))\n  end\n\
    \  table.sort(sorted_list)\n  return table.concat(sorted_list, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1vbzx_f.lua:26:\
    \ expected: \"three\"\nactual: \"1 three\"\nstack traceback:\n\t/tmp/tmpc1vbzx_f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    return table.concat(\n\
    \        table.sort(\n            { (\" \"):split(numbers) },\n            function(a,\
    \ b)\n                return to_number(a) < to_number(b)\n            end\n  \
    \      ),\n        \" \"\n    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0tticde.lua:7:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpc0tticde.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc0tticde.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_table = {}\n\
    \  local numbers_list = string_split(numbers, ' ')\n  for _, numeral in ipairs(numbers_list)\
    \ do\n    table.insert(numbers_table, number_to_numeral[numeral])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = ''\n  for _, number in ipairs(numbers_table) do\n  \
    \  sorted_numbers = sorted_numbers .. ' ' .. numeral_to_number[number]\n  end\n\
    \  return string_trim(sorted_numbers)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8wpo08l.lua:6:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmpe8wpo08l.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpe8wpo08l.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_table =\
    \ {}\n    local _, number\n    for _, number in pairs(numbers:explode(' ')) do\n\
    \        number = tonumber(number)\n        if number then\n            table.insert(numbers_table,\
    \ number)\n        end\n    end\n    table.sort(numbers_table)\n    local ordered_numbers\
    \ = table.concat(numbers_table, ' ')\n    return ordered_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwu2eger.lua:7:\
    \ attempt to call a nil value (method 'explode')\nstack traceback:\n\t/tmp/tmpuwu2eger.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuwu2eger.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal first_word = split(numbers,\
    \ \"%s+\")\n\tlocal first_number = number_to_number(first_word[1])\n\tlocal first_index\
    \ = 1\n\tfor i,v in ipairs(first_word) do\n\t\tlocal number = number_to_number(v)\n\
    \t\tif number < first_number then\n\t\t\tfirst_number = number\n\t\t\tfirst_index\
    \ = i\n\t\tend\n\tend\n\ttable.remove(first_word, first_index)\n\ttable.insert(first_word,\
    \ 1, number_to_word(first_number))\n\t\n\tlocal result = first_word[1]\n\tfor\
    \ i,v in ipairs(first_word) do\n\t\tif i > 1 then\n\t\t\tresult = result .. \"\
    \ \" .. v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ukml2lu.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp_ukml2lu.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp_ukml2lu.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  return table.concat(sequence(numbers):sort(function(a,\
    \ b) return a < b end):map(tostring):totable(), \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hsmgtxn.lua:5:\
    \ attempt to call a nil value (global 'sequence')\nstack traceback:\n\t/tmp/tmp5hsmgtxn.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp5hsmgtxn.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  --TODO: sort the input string\
    \ of numbers with correct grammar\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq5t23zk.lua:15:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpyq5t23zk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local t = {}\n    for\
    \ i in pairs(strings) do\n        t[i] = 0\n    end\n    for n in string.gmatch(numbers,\
    \ \"([^%s]+)\") do\n        t[tonumber(strings[n])] = t[tonumber(strings[n])]\
    \ + 1\n    end\n    local res = \"\"\n    for i = 0, 9 do\n        if t[i] ~=\
    \ 0 then\n            for j = 1, t[i] do\n                res = res .. i\n   \
    \         end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6c71lbrz.lua:6:\
    \ bad argument #1 to 'for iterator' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp6c71lbrz.lua:6: in local 'candidate'\n\t/tmp/tmp6c71lbrz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal result = ''\n\tlocal\
    \ map = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour\
    \ = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine\
    \ = 9\n\t}\n\tlocal output = {}\n\tfor word in numbers:gmatch('%S+') do\n\t\t\
    table.insert(output, map[word])\n\tend\n\ttable.sort(output)\n\tfor _, number\
    \ in ipairs(output) do\n\t\tif #result > 0 then\n\t\t\tresult = result .. ' '\n\
    \t\tend\n\t\tresult = result .. tostring(number)\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqyxduas.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmppqyxduas.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  -- make a map, then sort\
    \ them\n  local number_to_numeral = {\n    zero = 0,\n    one = 1,\n    two =\
    \ 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n    seven =\
    \ 7,\n    eight = 8,\n    nine = 9,\n  }\n  local numeral_to_number = {}\n  for\
    \ numeral, number in pairs(number_to_numeral) do\n    numeral_to_number[number]\
    \ = numeral\n  end\n  local sorted_numbers = {}\n  for numeral in numbers:gmatch(\"\
    %S+\") do\n    local number = number_to_numeral[numeral]\n    if number then\n\
    \      table.insert(sorted_numbers, number)\n    end\n  end\n  table.sort(sorted_numbers)\n\
    \  -- convert back to numerals\n  local sorted_numerals = {}\n  for _, number\
    \ in ipairs(sorted_numbers) do\n    table.insert(sorted_numerals, numeral_to_number[number])\n\
    \  end\n  return table.concat(sorted_numerals, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    numbers = numbers:gsub(\"\
    zero\", \"0\")\n    numbers = numbers:gsub(\"one\", \"1\")\n    numbers = numbers:gsub(\"\
    two\", \"2\")\n    numbers = numbers:gsub(\"three\", \"3\")\n    numbers = numbers:gsub(\"\
    four\", \"4\")\n    numbers = numbers:gsub(\"five\", \"5\")\n    numbers = numbers:gsub(\"\
    six\", \"6\")\n    numbers = numbers:gsub(\"seven\", \"7\")\n    numbers = numbers:gsub(\"\
    eight\", \"8\")\n    numbers = numbers:gsub(\"nine\", \"9\")\n    local tab =\
    \ {}\n    for num in numbers:gmatch(\"%S+\") do\n        tab[#tab + 1] = tonumber(num)\n\
    \    end\n    table.sort(tab)\n    for i, num in ipairs(tab) do\n        tab[i]\
    \ = tostring(num)\n    end\n    numbers = table.concat(tab, \" \")\n    numbers\
    \ = numbers:gsub(\"0\", \"zero\")\n    numbers = numbers:gsub(\"1\", \"one\")\n\
    \    numbers = numbers:gsub(\"2\", \"two\")\n    numbers = numbers:gsub(\"3\"\
    , \"three\")\n    numbers = numbers:gsub(\"4\", \"four\")\n    numbers = numbers:gsub(\"\
    5\", \"five\")\n    numbers = numbers:gsub(\"6\", \"six\")\n    numbers = numbers:gsub(\"\
    7\", \"seven\")\n    numbers = numbers:gsub(\"8\", \"eight\")\n    numbers = numbers:gsub(\"\
    9\", \"nine\")\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  numbers = string.gsub(numbers,\
    \ \" \", \"\")\n  local numeral_to_number = {\n    zero = 0,\n    one = 1,\n \
    \   two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six = 6,\n   \
    \ seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local sorted_numbers = {}\n\
    \  for i = 1, string.len(numbers) do\n    local character = string.sub(numbers,\
    \ i, i)\n    local number = numeral_to_number[character]\n    table.insert(sorted_numbers,\
    \ number)\n  end\n  table.sort(sorted_numbers)\n  local sorted_numbers_string\
    \ = \"\"\n  for _,number in ipairs(sorted_numbers) do\n    for numeral,number_numeral\
    \ in pairs(numeral_to_number) do\n      if number == number_numeral then\n   \
    \     sorted_numbers_string = sorted_numbers_string .. numeral\n      end\n  \
    \  end\n  end\n  return sorted_numbers_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy06walqp.lua:40:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpy06walqp.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_table =\
    \ {}\n    local sorted_numeral_table = {}\n    local sorted_numeral_string = \"\
    \"\n    local counter = 0\n    local max_counter = 0\n    local prev_counter =\
    \ 0\n    local max_number = 0\n    local min_number = 0\n    local min_number_position\
    \ = 0\n    local numeral_map = {\n        [\"zero\"] = 0,\n        [\"one\"] =\
    \ 1,\n        [\"two\"] = 2,\n        [\"three\"] = 3,\n        [\"four\"] = 4,\n\
    \        [\"five\"] = 5,\n        [\"six\"] = 6,\n        [\"seven\"] = 7,\n \
    \       [\"eight\"] = 8,\n        [\"nine\"] = 9\n    }\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpimvv_atr.lua:37: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local dict = {\n     \
    \   zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n      \
    \  four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n      \
    \  eight = 8,\n        nine = 9\n    }\n    local strings = {}\n    for word in\
    \ numbers:gmatch(\"%w+\") do\n        table.insert(strings, word)\n    end\n \
    \   table.sort(strings, function(a, b)\n        return dict[a] < dict[b]\n   \
    \ end)\n    return table.concat(strings, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local list = {}\n    for\
    \ _, number in ipairs(split(numbers)) do\n        table.insert(list, number)\n\
    \    end\n    table.sort(list)\n    return table.concat(list, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpecc5y8vl.lua:6:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpecc5y8vl.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpecc5y8vl.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- body\n\tlocal numeral_to_number\
    \ = {\n\t\t['zero'] = 0,\n\t\t['one'] = 1,\n\t\t['two'] = 2,\n\t\t['three'] =\
    \ 3,\n\t\t['four'] = 4,\n\t\t['five'] = 5,\n\t\t['six'] = 6,\n\t\t['seven'] =\
    \ 7,\n\t\t['eight'] = 8,\n\t\t['nine'] = 9\n\t}\n\tlocal number_to_numeral = {\n\
    \t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2] = 'two',\n\t\t[3] = 'three',\n\t\t\
    [4] = 'four',\n\t\t[5] = 'five',\n\t\t[6] = 'six',\n\t\t[7] = 'seven',\n\t\t[8]\
    \ = 'eight',\n\t\t[9] = 'nine'\n\t}\n\tlocal numbers_array = {}\n\tfor number\
    \ in numbers:gmatch('%w+') do\n\t\tnumbers_array[#numbers_array + 1] = numeral_to_number[number]\n\
    \tend\n\ttable.sort(numbers_array)\n\tlocal sorted_numbers = table.concat(numbers_array,\
    \ ' ')\n\tfor i = 0, 9 do\n\t\tsorted_numbers = sorted_numbers:gsub(tostring(i),\
    \ number_to_numeral[i])\n\tend\n\treturn sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numberals = {}\n \
    \ local result = {}\n  for numeral in numbers:gmatch(\"%w+\") do\n    table.insert(numberals,\
    \ numeral)\n  end\n  table.sort(numberals)\n  for i,v in ipairs(numberals) do\n\
    \    table.insert(result, v)\n  end\n  return table.concat(result, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd42oym2u.lua:22:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpd42oym2u.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  numbers = string.split(numbers,\
    \ ' ')\n  table.sort(numbers, function(a, b)\n    return numerical(a) < numerical(b)\n\
    \  end)\n  return table.concat(numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjabu47am.lua:5:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpjabu47am.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpjabu47am.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- remove all duplicate\
    \ words from the string\n\tlocal unique = {}\n\tfor _, number in ipairs(numbers:split('\
    \ ')) do\n\t\tunique[number] = true\n\tend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp44j0k2m9.lua:21: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal words = {}\n\tlocal\
    \ sorted = {}\n\tlocal index = 1\n\tlocal number\n\t\n\tfor w in numbers:gmatch(\"\
    [^%s]+\") do\n\t\twords[#words + 1] = w\n\tend\n\t\n\trepeat\n\t\tnumber = words[index]\n\
    \t\tlocal found = false\n\t\t\n\t\tfor _, word in ipairs(number_words) do\n\t\t\
    \tif word == number then\n\t\t\t\tsorted[#sorted + 1] = word\n\t\t\t\ttable.remove(words,\
    \ index)\n\t\t\t\tindex = 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\t\n\t\tif not found then\n\t\t\tindex = index + 1\n\t\tend\n\tuntil\
    \ #words == 0\n\t\n\treturn table.concat(sorted, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\tnums[#nums+1] = num\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1cx37x.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp4v1cx37x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local nums = {}\n  for num\
    \ in numbers:gmatch(\"[^%s]+\") do\n    nums[#nums+1] = num\n  end\n  table.sort(nums,\
    \ function(a, b)\n    local to_num = { zero = 0, one = 1, two = 2, three = 3,\
    \ four = 4, five = 5, six = 6, seven = 7, eight = 8, nine = 9}\n    return to_num[a]\
    \ < to_num[b]\n  end)\n  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_table = numbers:split()\n\
    \tlocal result = {}\n\tfor i, v in ipairs(num_table) do\n\t\tif valid_choices[v]\
    \ ~= nil then\n\t\t\tresult[#result + 1] = valid_choices[v]\n\t\tend\n\tend\n\t\
    table.sort(result)\n\tlocal str = \"\"\n\tfor i, v in ipairs(result) do\n\t\t\
    str = str .. v .. \" \"\n\tend\n\treturn str:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9w141971.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp9w141971.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp9w141971.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local words = split(numbers)\n\
    \  table.sort(words, function(a, b) return number(a) < number(b) end)\n  return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8gd1mi6p.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp8gd1mi6p.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp8gd1mi6p.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal number_table = {}\n\
    \t\n\tfor _, number in ipairs(string.split(numbers, \" \")) do\n\t\ttable.insert(number_table,\
    \ tonumber(swap_numbers[number]))\n\tend\n\t\n\ttable.sort(number_table)\n\t\n\
    \tlocal sorted_numbers = \"\"\n\t\n\tfor _, sorted_number in ipairs(number_table)\
    \ do\n\t\tsorted_numbers = sorted_numbers .. \" \" .. numbers_swap[sorted_number]\n\
    \tend\n\t\n\treturn sorted_numbers:gsub(\"^%s*(.-)%s*$\", \"%1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcklr9b1.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpzcklr9b1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzcklr9b1.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  return string.match(numbers,\
    \ '([^ ]+) ([^ ]+) ([^ ]+)')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvg16ayw.lua:11:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcvg16ayw.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal str = numbers:gsub(\"\
    (%w+)\", function(numeral)\n\t\tlocal spell_out = st.numbers_spelled_out\n\t\t\
    return tostring(spell_out[numeral])\n\tend)\n\tlocal split = str:split(\" \")\n\
    \ttable.sort(split)\n\tlocal result = \"\"\n\tfor _, s in ipairs(split) do\n\t\
    \tif result == \"\" then\n\t\t\tresult = s\n\t\telse\n\t\t\tresult = result ..\
    \ \" \" .. s\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjzht3ave.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpjzht3ave.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjzht3ave.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local parsed = {}\n  for\
    \ number in numbers:gmatch(\"%S+\") do\n    assert(numbers_to_words[number], \"\
    Invalid number: \" .. number)\n    table.insert(parsed, number)\n  end\n  table.sort(parsed,\
    \ sort_numbers_lt)\n  return table.concat(parsed, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx06boyd6.lua:7:\
    \ attempt to index a nil value (global 'numbers_to_words')\nstack traceback:\n\
    \t/tmp/tmpx06boyd6.lua:7: in local 'candidate'\n\t/tmp/tmpx06boyd6.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal parts = {}\n\tfor\
    \ part in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(parts, num2int[part])\n\
    \tend\n\ttable.sort(parts)\n\tfor i, part in ipairs(parts) do\n\t\tparts[i] =\
    \ int2num[part]\n\tend\n\treturn table.concat(parts, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppf51z7md.lua:7:\
    \ attempt to index a nil value (global 'num2int')\nstack traceback:\n\t/tmp/tmppf51z7md.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppf51z7md.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local split = split(numbers,\
    \ \" \")\n    local sorted = {}\n    for i, x in ipairs(split) do\n        local\
    \ num = x:match(\"(%d+)\")\n        if num then\n            sorted[#sorted +\
    \ 1] = num\n        end\n    end\n    table.sort(sorted)\n    local out = \"\"\
    \n    for i, x in ipairs(sorted) do\n        out = out .. \" \" .. x\n    end\n\
    \    return out:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8wy_oyu2.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp8wy_oyu2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp8wy_oyu2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_num =\
    \ {zero = 0, one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven =\
    \ 7, eight = 8, nine = 9}\n    local nums = {}\n    for numeral in numbers:gmatch(\"\
    %S+\") do\n        table.insert(nums, numeral_to_num[numeral])\n    end\n    table.sort(nums)\n\
    \    local sorted_numbers = {}\n    for i = 1, #nums do\n        local num = nums[i]\n\
    \        local numeral\n        for numeral_, num_ in pairs(numeral_to_num) do\n\
    \            if num_ == num then\n                numeral = numeral_\n       \
    \         break\n            end\n        end\n        table.insert(sorted_numbers,\
    \ numeral)\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- declare the variables\n\
    \tlocal tmp = 0\n\tlocal numbers_table = {}\n\tlocal result = {}\n\t\n\t-- convert\
    \ the numbers string to a number table\n\tfor word in string.gmatch(numbers, \"\
    %a+\") do\n\t\ttable.insert(numbers_table, number_str_to_num[word])\n\tend\n\t\
    \n\t-- sort the numbers table\n\tfor i = 1, #numbers_table do\n\t\tfor j = 1,\
    \ #numbers_table do\n\t\t\tif numbers_table[i] < numbers_table[j] then\n\t\t\t\
    \ttmp = numbers_table[i]\n\t\t\t\tnumbers_table[i] = numbers_table[j]\n\t\t\t\t\
    numbers_table[j] = tmp\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- convert the numbers\
    \ table to a result string\n\tfor i = 1, #numbers_table do\n\t\ttable.insert(result,\
    \ number_num_to_str[numbers_table[i]])\n\tend\n\t\n\t-- return the result string\n\
    \treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw6wx8rwd.lua:12:\
    \ attempt to index a nil value (global 'number_str_to_num')\nstack traceback:\n\
    \t/tmp/tmpw6wx8rwd.lua:12: in local 'candidate'\n\t/tmp/tmpw6wx8rwd.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral2number =\
    \ {\n        ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n     \
    \   ['three'] = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six']\
    \ = 6,\n        ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n\
    \    }\n    local numbers = numbers:split(' ')\n    table.sort(numbers, function(a,\
    \ b)\n        return numeral2number[a] < numeral2number[b]\n    end)\n    return\
    \ table.concat(numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfxrh9ycg.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfxrh9ycg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpfxrh9ycg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = string_split(numbers, ' ')\n  local int_list = {}\n  for\
    \ _, numeral in ipairs(numeral_list) do\n    table.insert(int_list, numeral_map[numeral])\n\
    \  end\n  table.sort(int_list)\n  local sorted_numeral_list = {}\n  for _, i in\
    \ ipairs(int_list) do\n    for numeral, j in pairs(numeral_map) do\n      if i\
    \ == j then\n        table.insert(sorted_numeral_list, numeral)\n      end\n \
    \   end\n  end\n  return string_join(sorted_numeral_list, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9rfjopk.lua:17:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmpz9rfjopk.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpz9rfjopk.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal words = {}\n\tfor\
    \ word in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(words, word)\n\tend\n\t\
    table.sort(words, function(a, b)\n\t\tif a == \"zero\" then\n\t\t\treturn true\n\
    \t\telseif b == \"zero\" then\n\t\t\treturn false\n\t\telse\n\t\t\treturn a <\
    \ b\n\t\tend\n\tend)\n\treturn table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8poe_tpl.lua:26:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp8poe_tpl.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tlocal\
    \ words = string.split(numbers, ' ')\n\t\n\tfor _,n in ipairs(words) do\n\t\t\
    table.insert(nums, assert(number_map[n], 'Invalid number string'))\n\tend\n\t\n\
    \ttable.sort(nums)\n\t\n\treturn table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpho1o319n.lua:6:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpho1o319n.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpho1o319n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numbers_table = {}\n\
    \tfor word in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(numbers_table, word)\n\
    \tend\n\ttable.sort(numbers_table, compare_numbers)\n\treturn table.concat(numbers_table,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1to3ead.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpm1to3ead.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local words = {}\n  for\
    \ w in numbers:gmatch(\"%a+\") do\n    table.insert(words,w)\n  end\n  table.sort(words,\
    \ function(a,b) return valid_numbers[a] < valid_numbers[b] end)\n  return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnx2ygl1g.lua:9:\
    \ attempt to index a nil value (global 'valid_numbers')\nstack traceback:\n\t\
    /tmp/tmpnx2ygl1g.lua:9: in function </tmp/tmpnx2ygl1g.lua:9>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpnx2ygl1g.lua:9: in local 'candidate'\n\t/tmp/tmpnx2ygl1g.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  assert(type(numbers) ==\
    \ 'string', 'sort_numbers requires a string of numbers')\n  local numeral_order\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numeral_list = {}\n  for numeral in numbers:gmatch('%S+') do\n  \
    \  assert(numeral_order[numeral], \"unrecognized numeral \" .. numeral)\n    table.insert(numeral_list,\
    \ numeral)\n  end\n  table.sort(numeral_list, function(a, b)\n    return numeral_order[a]\
    \ < numeral_order[b]\n  end)\n  return table.concat(numeral_list, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    numbers = split(numbers)\n\
    \    local num_to_int = {\n        zero  = 0,\n        one   = 1,\n        two\
    \   = 2,\n        three = 3,\n        four  = 4,\n        five  = 5,\n       \
    \ six   = 6,\n        seven = 7,\n        eight = 8,\n        nine  = 9,\n   \
    \ }\n    local function number_sort(a, b)\n        return num_to_int[a] < num_to_int[b]\n\
    \    end\n    table.sort(numbers, number_sort)\n    return table.concat(numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof9ko0ft.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpof9ko0ft.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpof9ko0ft.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral = {\n    ['zero']\
    \ = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n    ['four'] =\
    \ 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n    ['eight'] =\
    \ 8,\n    ['nine'] = 9\n  }\n  local num_table = {}\n  local sorted_numbers =\
    \ {}\n  local new_string = ''\n  for number in string.gmatch(numbers, '%w+') do\n\
    \    table.insert(num_table, numeral[number])\n  end\n  table.sort(num_table)\n\
    \  for i, v in ipairs(num_table) do\n    for word, num in pairs(numeral) do\n\
    \      if v == num then\n        table.insert(sorted_numbers, word)\n      end\n\
    \    end\n  end\n  for i, v in ipairs(sorted_numbers) do\n    if i == #sorted_numbers\
    \ then\n      new_string = new_string .. v\n    else\n      new_string = new_string\
    \ .. v .. ' '\n    end\n  end\n  return new_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal order = {\n\t\t[0]\
    \ = \"zero\",\n\t\t[1] = \"one\",\n\t\t[2] = \"two\",\n\t\t[3] = \"three\",\n\t\
    \t[4] = \"four\",\n\t\t[5] = \"five\",\n\t\t[6] = \"six\",\n\t\t[7] = \"seven\"\
    ,\n\t\t[8] = \"eight\",\n\t\t[9] = \"nine\"\n\t}\n\tlocal sorted = {}\n\tfor numeral\
    \ in string.gmatch(numbers, \"[^%s]+\") do\n\t\ttable.insert(sorted, tonumber(order[numeral]))\n\
    \tend\n\ttable.sort(sorted)\n\tfor i, v in ipairs(sorted) do\n\t\tsorted[i] =\
    \ order[v]\n\tend\n\treturn table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtfg1dag.lua:32:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqtfg1dag.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal words = {}\n\tlocal\
    \ numbers = string_split(numbers, \" \")\n\tfor _, n in ipairs(numbers) do\n\t\
    \tlocal num = tonumber(n)\n\t\tif not num then\n\t\t\tnum = alpha_to_number(n)\n\
    \t\tend\n\t\tif num then\n\t\t\ttable.insert(words, num)\n\t\tend\n\tend\n\ttable.sort(words)\n\
    \tlocal sorted = {}\n\tfor _, num in ipairs(words) do\n\t\ttable.insert(sorted,\
    \ number_to_alpha(num))\n\tend\n\treturn table.concat(sorted, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9_gikls.lua:6:\
    \ attempt to call a nil value (global 'string_split')\nstack traceback:\n\t/tmp/tmpr9_gikls.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr9_gikls.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted_numbers =\
    \ {}\n    for numeral in numbers:gmatch(\"[^%s]+\") do\n        sorted_numbers[#sorted_numbers\
    \ + 1] = numeral\n    end\n    table.sort(sorted_numbers)\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1918y0c.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpr1918y0c.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\t-- if numbers are not a\
    \ string or the string is empty, return the empty string\n\tif type(numbers) ~=\
    \ 'string' or #numbers == 0 then\n\t\treturn ''\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl_vfnlg_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- parse numbers\n   \
    \ local numeral_numbers = {}\n    for number in string.gmatch(numbers, \"%S+\"\
    ) do\n        local index = 0\n        for k,v in pairs(numeral_dict) do\n   \
    \         if v == number then\n                index = k\n                break\n\
    \            end\n        end\n        table.insert(numeral_numbers, index)\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwqxvcyyx.lua:28: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal number_to_index =\
    \ {\n\t\tzero  = 0,\n\t\tone   = 1,\n\t\ttwo   = 2,\n\t\tthree = 3,\n\t\tfour\
    \  = 4,\n\t\tfive  = 5,\n\t\tsix   = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\t\
    nine  = 9,\n\t}\n\t-- convert each number string to a table of indices\n\tlocal\
    \ number_array = {}\n\tfor number in numbers:gmatch(\"%w+\") do\n\t\tnumber_array[#number_array\
    \ + 1] = number_to_index[number]\n\tend\n\t-- sort table\n\ttable.sort(number_array)\n\
    \t-- convert back to string\n\tlocal index_to_number = {\n\t\t[0] = \"zero\",\n\
    \t\t[1] = \"one\",\n\t\t[2] = \"two\",\n\t\t[3] = \"three\",\n\t\t[4] = \"four\"\
    ,\n\t\t[5] = \"five\",\n\t\t[6] = \"six\",\n\t\t[7] = \"seven\",\n\t\t[8] = \"\
    eight\",\n\t\t[9] = \"nine\",\n\t}\n\tlocal sorted_numbers = {}\n\tfor i = 1,\
    \ #number_array do\n\t\tsorted_numbers[i] = index_to_number[number_array[i]]\n\
    \tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tif not numbers then return\
    \ end\n\tlocal h = {}\n\tlocal words = util.split(numbers, \" \")\n\tfor i, word\
    \ in ipairs(words) do\n\t\ttable.insert(h, numbers_to_digits[word])\n\tend\n\t\
    table.sort(h)\n\treturn digits_to_numbers[h[1]] .. \" \" .. digits_to_numbers[h[2]]\
    \ .. \" \" .. digits_to_numbers[h[3]]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi5t_lbm.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpyi5t_lbm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyi5t_lbm.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_list = {}\n\
    \    local number_map = {\n        [\"zero\"] = 0,\n        [\"one\"] = 1,\n \
    \       [\"two\"] = 2,\n        [\"three\"] = 3,\n        [\"four\"] = 4,\n  \
    \      [\"five\"] = 5,\n        [\"six\"] = 6,\n        [\"seven\"] = 7,\n   \
    \     [\"eight\"] = 8,\n        [\"nine\"] = 9\n    }\n    for _, number in ipairs(numbers:split(\"\
    \ \")) do\n        if number_map[number] ~= nil then\n            table.insert(numbers_list,\
    \ number_map[number])\n        end\n    end\n    table.sort(numbers_list)\n  \
    \  local sorted_numbers = \"\"\n    for _, number in ipairs(numbers_list) do\n\
    \        sorted_numbers = sorted_numbers .. tostring(number) .. \" \"\n    end\n\
    \    return sorted_numbers:trim()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko5k7p2r.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpko5k7p2r.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpko5k7p2r.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- Pick up all numbers\n\
    \    local number_array = {}\n    for i, number in ipairs(split(numbers, ' '))\
    \ do\n        number_array[i] = tonumber(numeral_map[number])\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4mjrxgpi.lua:21: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_list = {}\n\t\
    local str_list = {}\n\tlocal sorted_list = {}\n\t-- translate the string of numbers\
    \ into a list of numbers\n\tfor numeral in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(num_list,\
    \ NUMBERS[numeral])\n\tend\n\t-- sort the list\n\ttable.sort(num_list)\n\t-- translate\
    \ the sorted list of numbers into a list of strings\n\tfor _, number in ipairs(num_list)\
    \ do\n\t\ttable.insert(str_list, NUMBERS_INV[number])\n\tend\n\t-- concatenate\
    \ the list of strings into a single string with spaces between them\n\treturn\
    \ table.concat(str_list, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnry_so5u.lua:10:\
    \ attempt to index a nil value (global 'NUMBERS')\nstack traceback:\n\t/tmp/tmpnry_so5u.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnry_so5u.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local result = {}\n  \
    \  local number_map = {\n        zero = 0,\n        one = 1,\n        two = 2,\n\
    \        three = 3,\n        four = 4,\n        five = 5,\n        six = 6,\n\
    \        seven = 7,\n        eight = 8,\n        nine = 9\n    }\n    -- iterate\
    \ over the space-delimited string, convert the numberals to numbers,\n    -- and\
    \ place them in a table.\n    for number in numbers:gmatch(\"%S+\") do\n     \
    \   table.insert(result, number_map[number])\n    end\n    -- sort the table and\
    \ convert the numbers back to numberals\n    table.sort(result)\n    for k,v in\
    \ ipairs(result) do\n        for number, numeral in pairs(number_map) do\n   \
    \         if numeral == v then\n                result[k] = number\n         \
    \       break\n            end\n        end\n    end\n    -- return the result\
    \ as a space-delimited string\n    return table.concat(result, \" \")\nend\nprint(sort_numbers(\"\
    zero four seven three nine six three five one\"))\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: 'zero one three three four five six seven nine

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tif type(numbers) ~= 'string'\
    \ then return end\n\tif numbers == \"\" then return end\n\tlocal numberals = {['zero']\
    \ = 0, ['one'] = 1, ['two'] = 2, ['three'] = 3, ['four'] = 4, ['five'] = 5, ['six']\
    \ = 6, ['seven'] = 7, ['eight'] = 8, ['nine'] = 9}\n\tlocal nums = {}\n\tfor numeral\
    \ in numbers:gmatch(\"%w+\") do\n\t\tlocal num = numberals[numeral]\n\t\tif num\
    \ then\n\t\t\ttable.insert(nums, num)\n\t\tend\n\tend\n\ttable.sort(nums)\n\t\
    local sorted = \"\"\n\tfor i, num in ipairs(nums) do\n\t\tif i > 1 then\n\t\t\t\
    sorted = sorted .. \" \"\n\t\tend\n\t\tsorted = sorted .. numberals[num]\n\tend\n\
    \treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjqeu6iz.lua:29:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfjqeu6iz.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal sort_tbl = {}\n\t\
    local numbers_tbl = split(numbers)\n\t\n\tfor i, word in ipairs(numbers_tbl) do\n\
    \t\tlocal num = tonumber(reverse_table[word])\n\t\t\n\t\ttable.insert(sort_tbl,\
    \ num)\n\tend\n\t\n\ttable.sort(sort_tbl)\n\t\n\tlocal new_numbers = ''\n\t\n\t\
    for i, number in ipairs(sort_tbl) do\n\t\tnew_numbers = new_numbers .. string_table[number]\
    \ .. ' '\n\tend\n\t\n\treturn new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmw4r43ca.lua:6:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpmw4r43ca.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmw4r43ca.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_map = {\n    [\"\
    zero\"] = 0,\n    [\"one\"] = 1,\n    [\"two\"] = 2,\n    [\"three\"] = 3,\n \
    \   [\"four\"] = 4,\n    [\"five\"] = 5,\n    [\"six\"] = 6,\n    [\"seven\"]\
    \ = 7,\n    [\"eight\"] = 8,\n    [\"nine\"] = 9\n  }\n  local numbers_table =\
    \ {}\n  for number in numbers:gmatch(\"%a+\") do\n    if num_map[number] ~= nil\
    \ then\n      table.insert(numbers_table, num_map[number])\n    end\n  end\n \
    \ table.sort(numbers_table)\n  local sorted_numbers = \"\"\n  for i, number in\
    \ ipairs(numbers_table) do\n    if i == 1 then\n      sorted_numbers = number\n\
    \    else\n      sorted_numbers = sorted_numbers .. \" \" .. number\n    end\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic2djz99.lua:39:\
    \ expected: \"three\"\nactual: 3\nstack traceback:\n\t/tmp/tmpic2djz99.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num = {}\n    local\
    \ sorted = {}\n    local i = 1\n    local j = 1\n    local k = 1\n    numbers\
    \ = numbers:lower()\n    numbers = numbers:gsub('zero', '0')\n    numbers = numbers:gsub('one',\
    \ '1')\n    numbers = numbers:gsub('two', '2')\n    numbers = numbers:gsub('three',\
    \ '3')\n    numbers = numbers:gsub('four', '4')\n    numbers = numbers:gsub('five',\
    \ '5')\n    numbers = numbers:gsub('six', '6')\n    numbers = numbers:gsub('seven',\
    \ '7')\n    numbers = numbers:gsub('eight', '8')\n    numbers = numbers:gsub('nine',\
    \ '9')\n    while j <= #numbers do\n        local delimiter = numbers:find(' ',\
    \ j)\n        if delimiter ~= nil then\n            num[i] = numbers:sub(j, delimiter\
    \ - 1)\n            j = delimiter + 1\n        else\n            num[i] = numbers:sub(j)\n\
    \            j = #numbers + 1\n        end\n        i = i + 1\n    end\n    for\
    \ i = 1, #num do\n        local x = tonumber(num[i])\n        if x then\n    \
    \        table.insert(sorted, x)\n        end\n    end\n    table.sort(sorted)\n\
    \    for i = 1, #sorted do\n        sorted[i] = tostring(sorted[i])\n    end\n\
    \    numbers = ''\n    for i = 1, #sorted do\n        sorted[i] = sorted[i]:gsub('0',\
    \ 'zero')\n        sorted[i] = sorted[i]:gsub('1', 'one')\n        sorted[i] =\
    \ sorted[i]:gsub('2', 'two')\n        sorted[i] = sorted[i]:gsub('3', 'three')\n\
    \        sorted[i] = sorted[i]:gsub('4', 'four')\n        sorted[i] = sorted[i]:gsub('5',\
    \ 'five')\n        sorted[i] = sorted[i]:gsub('6', 'six')\n        sorted[i] =\
    \ sorted\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptlqnrmii.lua:63: ''end'' expected (to close ''for'' at line
    43) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_table = {};\n\
    \tfor numeral in numbers:gmatch(\"%S+\") do\n\t\tif numeral_table[numeral] ==\
    \ nil then\n\t\t\tnumeral_table[numeral] = 1;\n\t\telse\n\t\t\tnumeral_table[numeral]\
    \ = numeral_table[numeral] + 1;\n\t\tend\n\tend\n\tlocal sorted_numbers = {};\n\
    \tfor numeral, amount in pairs(numeral_table) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral);\n\tend\n\ttable.sort(sorted_numbers);\n\treturn table.concat(sorted_numbers,\
    \ \" \");\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdx6dgau.lua:26:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpkdx6dgau.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local myNumbers = {}\n \
    \ for number in numbers:gmatch(\"%S+\") do\n    local numeral = number_to_numeral[number]\n\
    \    if numeral then\n      table.insert(myNumbers, numeral)\n    end\n  end\n\
    \  table.sort(myNumbers)\n  local result = \"\"\n  for i, numeral in ipairs(myNumbers)\
    \ do\n    if result ~= \"\" then\n      result = result .. \" \"\n    end\n  \
    \  result = result .. numeral_to_number[numeral]\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jy7rirm.lua:7:\
    \ attempt to index a nil value (global 'number_to_numeral')\nstack traceback:\n\
    \t/tmp/tmp3jy7rirm.lua:7: in local 'candidate'\n\t/tmp/tmp3jy7rirm.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local digits = {}\n  numbers:gsub(\"\
    %w+\", function(w) table.insert(digits, tonumber(CONV[w])) end)\n  table.sort(digits)\n\
    \  local result = \"\"\n  for _, v in ipairs(digits) do\n    local s = string.gsub(tostring(v),\
    \ \"0\", \"zero\")\n    s = string.gsub(s, \"1\", \"one\")\n    s = string.gsub(s,\
    \ \"2\", \"two\")\n    s = string.gsub(s, \"3\", \"three\")\n    s = string.gsub(s,\
    \ \"4\", \"four\")\n    s = string.gsub(s, \"5\", \"five\")\n    s = string.gsub(s,\
    \ \"6\", \"six\")\n    s = string.gsub(s, \"7\", \"seven\")\n    s = string.gsub(s,\
    \ \"8\", \"eight\")\n    s = string.gsub(s, \"9\", \"nine\")\n    result = result\
    \ .. s .. \" \"\n  end\n  return result:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp90ntvsq4.lua:6:\
    \ attempt to index a nil value (global 'CONV')\nstack traceback:\n\t/tmp/tmp90ntvsq4.lua:6:\
    \ in function </tmp/tmp90ntvsq4.lua:6>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmp90ntvsq4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp90ntvsq4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_table = {}\n\t\
    for num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(num_table, num)\n\tend\n\
    \ttable.sort(num_table)\n\tlocal num_string = \"\"\n\tfor i, num in ipairs(num_table)\
    \ do\n\t\tnum_string = num_string .. num .. \" \"\n\tend\n\tnum_string = num_string:sub(1,\
    \ -2)\n\treturn num_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r28gl1o.lua:23:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp7r28gl1o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  return table.concat(number_from_word(numbers):sort(),\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmmi2djt4.lua:5:\
    \ attempt to call a nil value (global 'number_from_word')\nstack traceback:\n\t\
    /tmp/tmpmmi2djt4.lua:5: in local 'candidate'\n\t/tmp/tmpmmi2djt4.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal tbl = {}\n\tlocal\
    \ sorted = {}\n\t\n\t-- Regex to match a single valid numberal\n\tlocal pattern\
    \ = '(zero|one|two|three|four|five|six|seven|eight|nine)'\n\t\n\t-- Add the numberal\
    \ value to the table\n\tfor i in numbers:gmatch(pattern) do\n\t\ttable.insert(tbl,\
    \ i)\n\tend\n\t\n\t-- Sort the table\n\ttable.sort(tbl)\n\t\n\t-- Convert the\
    \ table back to a string and return it\n\tfor k, v in pairs(tbl) do\n\t\tsorted\
    \ = sorted .. v .. ' '\n\tend\n\t\n\treturn sorted:gsub('%s+$', '')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy852olcw.lua:24:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpy852olcw.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpy852olcw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal sorted = {}\n\tfor\
    \ number in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(sorted, number)\n\tend\n\
    \ttable.sort(sorted)\n\tlocal result = table.concat(sorted, \" \")\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdychx1p.lua:19:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpxdychx1p.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local t,l = {},0\n   \
    \ for w in numbers:gmatch(\"%S+\") do\n        w = w:lower()\n        if w:match(\"\
    ^[onetwothreefourfivesixseveneightnine]\") then\n            l = l + 1\n     \
    \       t[l] = w\n        end\n    end\n    table.sort(t)\n    return table.concat(t,\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29bkh620.lua:22:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp29bkh620.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- convert the string\
    \ to numbers\n    local nums = {}\n    for num in numbers:gmatch(\"%a+\") do\n\
    \        local n = num2number[num]\n        if n then\n            table.insert(nums,\
    \ n)\n        end\n    end\n    -- sort\n    table.sort(nums)\n    -- convert\
    \ numbers to strings\n    local str = {}\n    for _, n in ipairs(nums) do\n  \
    \      table.insert(str, number2num[n])\n    end\n    return table.concat(str,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelg0w8p2.lua:8:\
    \ attempt to index a nil value (global 'num2number')\nstack traceback:\n\t/tmp/tmpelg0w8p2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpelg0w8p2.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local split_numbers =\
    \ string.split(numbers, ' ')\n    local numeral_map = {\n        zero = 0,\n \
    \       one = 1,\n        two = 2,\n        three = 3,\n        four = 4,\n  \
    \      five = 5,\n        six = 6,\n        seven = 7,\n        eight = 8,\n \
    \       nine = 9\n    }\n    local sorted_numbers = {}\n    for _, numeral in\
    \ ipairs(split_numbers) do\n        table.insert(sorted_numbers, numeral_map[numeral])\n\
    \    end\n    table.sort(sorted_numbers)\n    local sorted_numeral_list = {}\n\
    \    for _, number in ipairs(sorted_numbers) do\n        for numeral, number_value\
    \ in pairs(numeral_map) do\n            if number == number_value then\n     \
    \           table.insert(sorted_numeral_list, numeral)\n            end\n    \
    \    end\n    end\n    return table.concat(sorted_numeral_list, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlisdy_3.lua:5:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmptlisdy_3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmptlisdy_3.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_list = split(numbers,\
    \ ' ')\n\tlocal sorted_numbers = {}\n\t\n\t-- Convert to numbers\n\tfor i = 1,\
    \ #numeral_list do\n\t\tlocal numeral = numeral_list[i]\n\t\tlocal number = string_to_number(numeral)\n\
    \t\ttable.insert(sorted_numbers, number)\n\tend\n\t\n\t-- Sort\n\ttable.sort(sorted_numbers)\n\
    \t\n\t-- Convert back to words\n\tfor i = 1, #sorted_numbers do\n\t\tlocal number\
    \ = sorted_numbers[i]\n\t\tlocal numeral = number_to_string(number)\n\t\tsorted_numbers[i]\
    \ = numeral\n\tend\n\t\n\treturn table.concat(sorted_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_crh2smv.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp_crh2smv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp_crh2smv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num = {\n    zero\
    \ = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five =\
    \ 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local\
    \ n = numbers:gsub('%a+', function(w) return num[w] end)\n  local n = n:gsub('%s+',\
    \ '')\n  local n = n:gsub('[0-9]', function(w) return num_to_string[w] end)\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt88m517u.lua:19:\
    \ attempt to index a nil value (global 'num_to_string')\nstack traceback:\n\t\
    /tmp/tmpt88m517u.lua:19: in function </tmp/tmpt88m517u.lua:19>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpt88m517u.lua:19: in local 'candidate'\n\t/tmp/tmpt88m517u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal words = Util.split(numbers,\
    \ ' ')\n\ttable.sort(words, function(a, b)\n\t\tlocal num_a = tonumber(word_to_numeral[a])\n\
    \t\tlocal num_b = tonumber(word_to_numeral[b])\n\t\tif num_a ~= nil and num_b\
    \ ~= nil then\n\t\t\treturn num_a < num_b\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\tend)\n\treturn table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9gj6445.lua:5:\
    \ attempt to index a nil value (global 'Util')\nstack traceback:\n\t/tmp/tmpf9gj6445.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpf9gj6445.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted = {}\n  local\
    \ unsorted = numbers:split(\" \")\n  local lookup = {\n    zero = 0,\n    one\
    \ = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five = 5,\n    six =\
    \ 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  for i,v in ipairs(unsorted)\
    \ do\n    if (lookup[v]) then\n      table.insert(sorted, lookup[v])\n    end\n\
    \  end\n  table.sort(sorted)\n  for i,v in ipairs(sorted) do\n    sorted[i] =\
    \ lookup[v]\n  end\n  return table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9hgtyf7.lua:6:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpn9hgtyf7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpn9hgtyf7.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_list = {}\n   \
    \ for number in string.gmatch(numbers, \"%a+\") do\n        if numeral_map[number]\
    \ == nil then\n            error(\"Invalid number: \" .. number)\n        end\n\
    \        table.insert(numbers_list, numeral_map[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = \"\"\n    for index, number in ipairs(numbers_list)\
    \ do\n        if index > 1 then\n            sorted_numbers = sorted_numbers ..\
    \ \" \"\n        end\n        for numeral, number_value in pairs(numeral_map)\
    \ do\n            if number_value == number then\n                sorted_numbers\
    \ = sorted_numbers .. numeral\n                break\n            end\n      \
    \  end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_sort = function(a,\
    \ b)\n        return numeral_map[a] < numeral_map[b]\n    end\n    local numeral_list\
    \ = {}\n    for w in numbers:gmatch(\"%w+\") do\n        numeral_list[#numeral_list\
    \ + 1] = w\n    end\n    table.sort(numeral_list, numeral_sort)\n    return table.concat(numeral_list,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_array = {}\n\
    \  for num in numbers:gmatch(\"%w+\") do\n    local numeral = numpad[num]\n  \
    \  table.insert(numbers_array, numeral)\n  end\n  table.sort(numbers_array)\n\
    \  local sorted_numbers = \"\"\n  for _, numeral in ipairs(numbers_array) do\n\
    \    local word = numpad_words[numeral]\n    sorted_numbers = sorted_numbers ..\
    \ word .. \" \"\n  end\n  return sorted_numbers:sub(1, #sorted_numbers - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2gckq8_.lua:7:\
    \ attempt to index a nil value (global 'numpad')\nstack traceback:\n\t/tmp/tmpe2gckq8_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe2gckq8_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_array = {}\n\
    \    local num_str = ''\n    local order = {'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine'}\n    local cur_pos = 1\n    local start,\
    \ finish, num\n    while (numbers) do\n        start, finish, num = numbers:find('(%w+)')\n\
    \        if (start) then\n            -- Add number to array to sort\n       \
    \     num_array[#num_array + 1] = num\n            numbers = numbers:sub(finish\
    \ + 1)\n        else\n            break\n        end\n    end\n    -- Sort numbers\
    \ in place\n    table.sort(num_array, function(a, b)\n        return order[a]\
    \ < order[b]\n    end)\n    -- Convert array to string\n    for i, num in ipairs(num_array)\
    \ do\n        num_str = num_str .. num .. ' '\n    end\n    return num_str:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpibjxog7p.lua:22:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpibjxog7p.lua:22:\
    \ in function </tmp/tmpibjxog7p.lua:21>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpibjxog7p.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpibjxog7p.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers = split(numbers)\n\
    \  local count = #numbers\n  local sorted = {}\n  local has_zero = false\n  local\
    \ x = 0\n  local is_sorted = false\n  local i\n  local j\n  local index\n  local\
    \ temp\n  for i = 1, count do\n    for j = 1, 10 do\n      if numbers[i] == DIGITS[j]\
    \ then\n        table.insert(sorted, j)\n        if numbers[i] == \"zero\" then\n\
    \          has_zero = true\n        end\n      end\n    end\n  end\n  while not\
    \ is_sorted do\n    is_sorted = true\n    for i = 1, count do\n      if sorted[i]\
    \ > sorted[i + 1] then\n        is_sorted = false\n        index = i\n       \
    \ temp = sorted[i]\n        sorted[i] = sorted[i + 1]\n        sorted[i + 1] =\
    \ temp\n      end\n    end\n  end\n  local answer = \"\"\n  for i = 1, count do\n\
    \    if has_zero then\n      if sorted[i] == 0 then\n        answer = answer ..\
    \ \"zero\"\n      else\n        answer = answer .. DIGITS[sorted[i]]\n      end\n\
    \    else\n      answer = answer .. DIGITS[sorted[i]]\n    end\n    if i < count\
    \ then\n      answer = answer .. \" \"\n    end\n  end\n  return answer\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bsjwxxc.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp_bsjwxxc.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp_bsjwxxc.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local function sort_func(a,\
    \ b)\n        return digit_to_num[a] < digit_to_num[b]\n    end\n    return table.concat(sorted(numbers:split('\
    \ '), sort_func), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjgjj4y3.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkjgjj4y3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkjgjj4y3.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  return table.concat(sort_by_ascending_order(split_string(numbers)),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p6rua53.lua:5:\
    \ attempt to call a nil value (global 'split_string')\nstack traceback:\n\t/tmp/tmp2p6rua53.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp2p6rua53.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local nums = {}\n  local\
    \ sorted = \"\"\n  for num in numbers:gmatch(\"%a+\") do\n    nums[#nums+1] =\
    \ {num=num, int=numberals[num]}\n  end\n  table.sort(nums, function(a,b) return\
    \ a.int < b.int end)\n  for i=1,#nums do\n    sorted = sorted .. nums[i].num ..\
    \ \" \"\n  end\n  return sorted:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7de7fvx4.lua:8:\
    \ attempt to index a nil value (global 'numberals')\nstack traceback:\n\t/tmp/tmp7de7fvx4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7de7fvx4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local result = ''\n  local\
    \ numbers = { string.match(numbers, '(%w+) (%w+) (%w+) (%w+) (%w+) (%w+) (%w+)\
    \ (%w+) (%w+) (%w+)') }\n  local sorted = {}\n  for i, num in ipairs(numbers)\
    \ do\n    sorted[i] = numeral_to_number(num)\n  end\n  table.sort(sorted)\n  for\
    \ i, num in ipairs(sorted) do\n    result = result .. ' ' .. number_to_numeral(num)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3q7l2e1.lua:22:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo3q7l2e1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal n = split(numbers)\n\
    \tlocal t = {}\n\tfor _,v in ipairs(n) do\n\t\ttable.insert(t, tonumber(WORDS[v]))\n\
    \tend\n\ttable.sort(t)\n\tn = {}\n\tfor _,v in ipairs(t) do\n\t\ttable.insert(n,\
    \ REVERSE_WORDS[v])\n\tend\n\treturn table.concat(n, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpainugsfd.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpainugsfd.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpainugsfd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal input = string.lower(numbers)\n\
    \tlocal output = ''\n\tlocal words = {}\n\t\n\t-- Collect words\n\tfor num in\
    \ string.gmatch(input, \"%S+\") do\n\t\ttable.insert(words, num)\n\tend\n\t\n\t\
    -- Sort words\n\ttable.sort(words)\n\t\n\t-- Convert words to numbers and concatenate\n\
    \tfor _, word in ipairs(words) do\n\t\tif word == 'zero' then\n\t\t\toutput =\
    \ output .. '0'\n\t\telseif word == 'one' then\n\t\t\toutput = output .. '1'\n\
    \t\telseif word == 'two' then\n\t\t\toutput = output .. '2'\n\t\telseif word ==\
    \ 'three' then\n\t\t\toutput = output .. '3'\n\t\telseif word == 'four' then\n\
    \t\t\toutput = output .. '4'\n\t\telseif word == 'five' then\n\t\t\toutput = output\
    \ .. '5'\n\t\telseif word == 'six' then\n\t\t\toutput = output .. '6'\n\t\telseif\
    \ word == 'seven' then\n\t\t\toutput = output .. '7'\n\t\telseif word == 'eight'\
    \ then\n\t\t\toutput = output .. '8'\n\t\telseif word == 'nine' then\n\t\t\toutput\
    \ = output .. '9'\n\t\tend\n\tend\n\t\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfq6vgo_.lua:49:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpsfq6vgo_.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_strings =\
    \ {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_strings,\
    \ numeral)\n  end\n  table.sort(numeral_strings, function(a, b)\n    return numerical_value(a)\
    \ < numerical_value(b)\n  end)\n  return table.concat(numeral_strings, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaero6ffi.lua:10:\
    \ attempt to call a nil value (global 'numerical_value')\nstack traceback:\n\t\
    /tmp/tmpaero6ffi.lua:10: in function </tmp/tmpaero6ffi.lua:9>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmpaero6ffi.lua:9: in local 'candidate'\n\t/tmp/tmpaero6ffi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral = {\n\t\t\
    zero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor _, n in ipairs(numbers:split(' ')) do\n\t\tif numeral[n] then\n\
    \t\t\ttable.insert(nums, numeral[n])\n\t\tend\n\tend\n\ttable.sort(nums)\n\treturn\
    \ table.concat(nums, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94802635.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp94802635.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp94802635.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local space_delimited_numbers\
    \ = space_delimited_string_to_table(numbers)\n  local sorted_numbers = sort_table(space_delimited_numbers)\n\
    \  return table_to_space_delimited_string(sorted_numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdupcpuz1.lua:5:\
    \ attempt to call a nil value (global 'space_delimited_string_to_table')\nstack\
    \ traceback:\n\t/tmp/tmpdupcpuz1.lua:5: in local 'candidate'\n\t/tmp/tmpdupcpuz1.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal tbl = {}\n\tlocal\
    \ function translate(num)\n\t\tlocal num = numbers:lower()\n\t\tlocal tbl = {\n\
    \t\t\t['zero'] = 0,\n\t\t\t['one'] = 1,\n\t\t\t['two'] = 2,\n\t\t\t['three'] =\
    \ 3,\n\t\t\t['four'] = 4,\n\t\t\t['five'] = 5,\n\t\t\t['six'] = 6,\n\t\t\t['seven']\
    \ = 7,\n\t\t\t['eight'] = 8,\n\t\t\t['nine'] = 9,\n\t\t}\n\t\treturn tbl[num]\n\
    \tend\n\tfor v in numbers:gmatch('%S+') do\n\t\ttable.insert(tbl, translate(v))\n\
    \tend\n\ttable.sort(tbl)\n\tlocal sorted = {}\n\tfor _,v in ipairs(tbl) do\n\t\
    \ttable.insert(sorted, v)\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd__njc7_.lua:36:\
    \ expected: \"\"\nactual: {}\nstack traceback:\n\t/tmp/tmpd__njc7_.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_list = {}\n\t\
    numbers:gsub(\"%S+\", function(c) table.insert(num_list, c) end)\n\ttable.sort(num_list)\n\
    \treturn table.concat(num_list, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zxvnweb.lua:16:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp2zxvnweb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local order = {zero = 0,\
    \ one = 1, two = 2, three = 3, four = 4, five = 5, six = 6, seven = 7, eight =\
    \ 8, nine = 9}\n  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n \
    \   nums[#nums + 1] = order[num]\n  end\n  table.sort(nums)\n  local ret = {}\n\
    \  for i,num in ipairs(nums) do\n    for k,v in pairs(order) do\n      if v ==\
    \ num then\n        ret[#ret + 1] = k\n        break\n      end\n    end\n  end\n\
    \  return table.concat(ret, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal err_msg = \"Input\
    \ must be a space-delimited string of numberals from 'zero' to 'nine'.\"\n\tassert(type(numbers)\
    \ == \"string\", err_msg)\n\tlocal num_map = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\
    \ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive = 5,\n\t\tsix = 6,\n\t\tseven\
    \ = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal num_table = {}\n\tfor num in\
    \ numbers:gmatch(\"%S+\") do\n\t\tassert(num_map[num], err_msg)\n\t\ttable.insert(num_table,\
    \ num_map[num])\n\tend\n\ttable.sort(num_table)\n\tlocal sorted_numbers = {}\n\
    \tfor i = 1, #num_table do\n\t\tlocal num = num_table[i]\n\t\tfor k, v in pairs(num_map)\
    \ do\n\t\t\tif v == num then\n\t\t\t\ttable.insert(sorted_numbers, k)\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal output = ''\n\tif\
    \ numbers:match('^%s*$') then\n\t\toutput = 'You have to input a string of numbers!'\n\
    \telse\n\t\tlocal number_list = {}\n\t\tfor number in numbers:gmatch('%S+') do\n\
    \t\t\tlocal number_int = number_to_int(number)\n\t\t\tif number_int then\n\t\t\
    \t\ttable.insert(number_list, number_int)\n\t\t\telse\n\t\t\t\toutput = 'Invalid\
    \ choice of numbers!'\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif #number_list\
    \ > 0 then\n\t\t\ttable.sort(number_list)\n\t\t\tfor i, number_int in ipairs(number_list)\
    \ do\n\t\t\t\toutput = output .. int_to_number(number_int) .. ' '\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9usk3il0.lua:32:\
    \ expected: \"\"\nactual: \"You have to input a string of numbers!\"\nstack traceback:\n\
    \t/tmp/tmp9usk3il0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted_numbers = {}\n\
    \  -- Splits input into a table where index is a number and value is a corresponding\
    \ string numeral.\n  for numeral in numbers:gmatch(\"%S+\") do\n    sorted_numbers[NUMBERS[numeral]]\
    \ = numeral\n  end\n  -- Joins table into a space-delimited string of numberals\
    \ sorted from smallest to largest.\n  return table.concat(sorted_numbers, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jtuvpaa.lua:8:\
    \ attempt to index a nil value (global 'NUMBERS')\nstack traceback:\n\t/tmp/tmp4jtuvpaa.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4jtuvpaa.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = utils.split(numbers,\
    \ \" \")\n\tfor i = 1, #nums do\n\t\tnums[i] = g_number_names[nums[i]]\n\tend\n\
    \ttable.sort(nums)\n\tfor i = 1, #nums do\n\t\tnums[i] = g_number_numbers[nums[i]]\n\
    \tend\n\treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8jp_miw_.lua:5:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp8jp_miw_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp8jp_miw_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal sorted_numbers = {}\n\
    \tfor number in string.gmatch(numbers, \"[^%s]+\") do\n\t\tlocal numeral = tonumber(number_map[number])\n\
    \t\tif numeral then\n\t\t\ttable.insert(sorted_numbers, numeral)\n\t\tend\n\t\
    end\n\ttable.sort(sorted_numbers)\n\tlocal sorted_numbers_words = {}\n\tfor _,\
    \ numeral in ipairs(sorted_numbers) do\n\t\tlocal number = number_map[tostring(numeral)]\n\
    \t\ttable.insert(sorted_numbers_words, number)\n\tend\n\treturn table.concat(sorted_numbers_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhk7q7v1.lua:7:\
    \ attempt to index a nil value (global 'number_map')\nstack traceback:\n\t/tmp/tmpwhk7q7v1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwhk7q7v1.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local sorted = {}\n  for\
    \ _,n in ipairs(numbers:split(\" \")) do\n    table.insert(sorted, n)\n  end\n\
    \  table.sort(sorted)\n  return table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_eyct4nw.lua:6:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_eyct4nw.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_eyct4nw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  numbers = string.gsub(numbers,\
    \ \"one\", \"1\")\n  numbers = string.gsub(numbers, \"two\", \"2\")\n  numbers\
    \ = string.gsub(numbers, \"three\", \"3\")\n  numbers = string.gsub(numbers, \"\
    four\", \"4\")\n  numbers = string.gsub(numbers, \"five\", \"5\")\n  numbers =\
    \ string.gsub(numbers, \"six\", \"6\")\n  numbers = string.gsub(numbers, \"seven\"\
    , \"7\")\n  numbers = string.gsub(numbers, \"eight\", \"8\")\n  numbers = string.gsub(numbers,\
    \ \"nine\", \"9\")\n  numbers = string.gsub(numbers, \"zero\", \"0\")\n  numbers\
    \ = string.gsub(numbers, \" \", \"\")\n  numbers = string.reverse(numbers)\n \
    \ print(numbers)\n  numbers = string.sort(numbers)\n  print(numbers)\n  numbers\
    \ = string.reverse(numbers)\n  numbers = string.gsub(numbers, \"1\", \"one\")\n\
    \  numbers = string.gsub(numbers, \"2\", \"two\")\n  numbers = string.gsub(numbers,\
    \ \"3\", \"three\")\n  numbers = string.gsub(numbers, \"4\", \"four\")\n  numbers\
    \ = string.gsub(numbers, \"5\", \"five\")\n  numbers = string.gsub(numbers, \"\
    6\", \"six\")\n  numbers = string.gsub(numbers, \"7\", \"seven\")\n  numbers =\
    \ string.gsub(numbers, \"8\", \"eight\")\n  numbers = string.gsub(numbers, \"\
    9\", \"nine\")\n  numbers = string.gsub(numbers, \"0\", \"zero\")\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "\nE\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpckh1sbix.lua:18:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpckh1sbix.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpckh1sbix.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_numbers = numbers:split('\
    \ ')\n    local num_table = {}\n    for i, number in ipairs(num_numbers) do\n\
    \        table.insert(num_table, number)\n    end\n    local num_sorted = table.sort(num_table)\n\
    \    for i, number in ipairs(num_sorted) do\n        num_sorted[i] = tostring(num_sorted[i])\n\
    \    end\n    local result = table.concat(num_sorted, ' ')\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoj62_h2q.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpoj62_h2q.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpoj62_h2q.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    --[[ TODO:\n        Split\
    \ the string into words, sort those words and return a\n        string with the\
    \ sorted numbers, delimited by spaces.\n        Hint: We can sort a list of numbers\
    \ with\n              table.sort(numbers, function(a, b) return a < b end)\n \
    \   ]]--\n    --print(numbers)\n    local numbers_split = {}\n    for v in string.gmatch(numbers,\
    \ \"%S+\") do\n        table.insert(numbers_split, v)\n    end\n    table.sort(numbers_split,\
    \ function(a, b) return a < b end)\n    --print(numbers_split)\n    numbers =\
    \ \"\"\n    for i, v in ipairs(numbers_split) do\n        if i ~= #numbers_split\
    \ then\n            numbers = numbers .. v .. \" \"\n        else\n          \
    \  numbers = numbers .. v\n        end\n    end\n    return numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_t96lbm.lua:34:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpv_t96lbm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    -- Replace this for solution\n\
    \    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2aw2v46.lua:15:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpo2aw2v46.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tnumbers = numbers:gsub('one',\
    \ '1')\n\tnumbers = numbers:gsub('two', '2')\n\tnumbers = numbers:gsub('three',\
    \ '3')\n\tnumbers = numbers:gsub('four', '4')\n\tnumbers = numbers:gsub('five',\
    \ '5')\n\tnumbers = numbers:gsub('six', '6')\n\tnumbers = numbers:gsub('seven',\
    \ '7')\n\tnumbers = numbers:gsub('eight', '8')\n\tnumbers = numbers:gsub('nine',\
    \ '9')\n\tnumbers = numbers:gsub('zero', '0')\n\tnumbers = numbers:gsub('\\n',\
    \ ' ')\n\tnumbers = numbers:gsub('  ', ' ')\n\tnumbers = numbers:gsub('  ', '\
    \ ')\n\tnumbers = numbers:gsub('  ', ' ')\n\tlocal number_table = numbers:split('\
    \ ')\n\ttable.sort(number_table)\n\treturn table.concat(number_table, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30m82qwq.lua:19:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp30m82qwq.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp30m82qwq.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_lookup =\
    \ {\n        zero  = 0,\n        one   = 1,\n        two   = 2,\n        three\
    \ = 3,\n        four  = 4,\n        five  = 5,\n        six   = 6,\n        seven\
    \ = 7,\n        eight = 8,\n        nine  = 9,\n    }\n    local words = {}\n\
    \    for word in numbers:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    table.sort(words, function(a, b)\n        return number_lookup[a]\
    \ < number_lookup[b]\n    end)\n    return table.concat(words, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tnumbers = string.gsub(numbers,\
    \ \"!\", \"\")\n\tnumbers = string.gsub(numbers, \":)\", \"\")\n\tnumbers = string.gsub(numbers,\
    \ \"eight\", \"8\")\n\tnumbers = string.gsub(numbers, \"five\", \"5\")\n\tnumbers\
    \ = string.gsub(numbers, \"four\", \"4\")\n\tnumbers = string.gsub(numbers, \"\
    nine\", \"9\")\n\tnumbers = string.gsub(numbers, \"one\", \"1\")\n\tnumbers =\
    \ string.gsub(numbers, \"seven\", \"7\")\n\tnumbers = string.gsub(numbers, \"\
    six\", \"6\")\n\tnumbers = string.gsub(numbers, \"three\", \"3\")\n\tnumbers =\
    \ string.gsub(numbers, \"two\", \"2\")\n\tnumbers = string.gsub(numbers, \"zero\"\
    , \"0\")\n\tnumbers = string.gsub(numbers, \" \", \"\")\n\ttable.sort(numbers)\n\
    \treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_okuvzwn.lua:18:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp_okuvzwn.lua:18: in local 'candidate'\n\t/tmp/tmp_okuvzwn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tassert(type(numbers) ==\
    \ 'string', 'Expected string, got ' .. type(numbers))\n\tlocal t = parse_string(numbers)\n\
    \ttable.sort(t)\n\treturn join_table(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbiy7gp28.lua:6:\
    \ attempt to call a nil value (global 'parse_string')\nstack traceback:\n\t/tmp/tmpbiy7gp28.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbiy7gp28.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local first\n    local\
    \ second\n    local third\n    local fourth\n    local fifth\n    local sixth\n\
    \    local seventh\n    local eighth\n    local ninth\n    local tenth\n    local\
    \ eleventh\n    local twelfth\n    local thirteenth\n    local fourteenth\n  \
    \  local fifteenth\n    local sixteenth\n    local seventeenth\n    local output\n\
    \    local temp\n    local temp2\n    -- Validate input string\n    if numbers\
    \ == 'zero one two three four five six seven eight nine' then\n        -- Input\
    \ is already sorted, do nothing\n        output = numbers\n    elseif numbers\
    \ == 'zero one two three four five six seven eight' then\n        -- Add 'nine'\
    \ to the end of the string\n        output = numbers .. ' nine'\n    elseif numbers\
    \ == 'zero one two three four five six seven' then\n        -- Add 'eight' and\
    \ 'nine' to the end of the string\n        output = numbers .. ' eight nine'\n\
    \    elseif numbers == 'zero one two three four five six' then\n        -- Add\
    \ 'seven', 'eight' and 'nine' to the end of the string\n        output = numbers\
    \ .. ' seven eight nine'\n    elseif numbers == 'zero one two three four five'\
    \ then\n        -- Add 'six', 'seven', 'eight' and 'nine' to the end of the string\n\
    \        output = numbers .. ' six seven eight nine'\n    elseif numbers == 'zero\
    \ one two three four' then\n        -- Add 'five', 'six', 'seven', 'eight' and\
    \ 'nine' to the end of the string\n        output = numbers .. ' five six seven\
    \ eight nine'\n    elseif numbers == 'zero one two three' then\n        -- Add\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine' to the end of the string\n\
    \        output = numbers .. ' four five six seven eight nine'\n    elseif numbers\
    \ == 'zero one two' then\n        -- Add 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine' to the end of the string\n        output = numbers .. ' three\
    \ four five six seven eight nine'\n    elseif numbers == 'zero one' then\n   \
    \     -- Add 'two', 'three', 'four', 'five', 'six', 'seven', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_t577os_.lua:63: ''end'' expected (to close ''if'' at line
    26) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_list = split(numbers,\
    \ \" \")\n  local numeral_list_sort = {}\n  local str_sort = \"\"\n  for i, v\
    \ in ipairs(numeral_list) do\n    numeral_list_sort[i] = num2int(v)\n  end\n \
    \ table.sort(numeral_list_sort)\n  for i, v in ipairs(numeral_list_sort) do\n\
    \    str_sort = str_sort .. \" \" .. int2num(v)\n  end\n  return str_sort\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53l879uy.lua:5:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp53l879uy.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp53l879uy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local digits = {\n    zero\
    \ = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five =\
    \ 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local\
    \ function sort_by_numeral(a, b)\n    return digits[a] < digits[b]\n  end\n  numbers\
    \ = numbers:split(\" \")\n  table.sort(numbers, sort_by_numeral)\n  return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpytfno569.lua:20:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpytfno569.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpytfno569.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_list = {}\n  for\
    \ num in numbers:gmatch(\"%S+\") do\n    table.insert(num_list, num)\n  end\n\
    \  table.sort(num_list)\n  return table.concat(num_list, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36nkpoae.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp36nkpoae.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
