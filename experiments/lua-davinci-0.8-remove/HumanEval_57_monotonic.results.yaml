language: lua
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local t = monotonic_type(l)\n  return t == 1 or\
    \ t == -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqyh7589.lua:3:\
    \ attempt to call a nil value (global 'monotonic_type')\nstack traceback:\n\t\
    /tmp/tmphqyh7589.lua:3: in local 'candidate'\n\t/tmp/tmphqyh7589.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal function rec(n)\n\t\tif n <= #l then\n\t\t\
    \tif l[n] > l[n+1] then\n\t\t\t\treturn rec(n+1)\n\t\t\telseif l[n] < l[n+1] then\n\
    \t\t\t\treturn rec(n+1)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn rec(1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00sai8f5.lua:5:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp00sai8f5.lua:5:\
    \ in function </tmp/tmp00sai8f5.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp00sai8f5.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpns_ctev0.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l > 1 then\n    local m = l[1] < l[2]\n   \
    \ for i = 2, #l - 1 do\n      if l[i] < l[i + 1] ~= m then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if (not table.is_sorted(l)) then\n        return\
    \ false\n    end\n    local n = #l\n    if (n > 1) then\n        local diff =\
    \ l[2] - l[1]\n        for i = 3, n do\n            if (diff ~= l[i] - l[i - 1])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16gxevzo.lua:3:\
    \ attempt to call a nil value (field 'is_sorted')\nstack traceback:\n\t/tmp/tmp16gxevzo.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp16gxevzo.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal increasing = function(l)\n\t\tlocal previous\
    \ = l[1]\n\t\tfor i = 2, #l do\n\t\t\tif l[i] < previous then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\t\tprevious = l[i]\n\t\tend\n\t\treturn true\n\tend\n\t\
    local decreasing = function(l)\n\t\tlocal previous = l[1]\n\t\tfor i = 2, #l do\n\
    \t\t\tif l[i] > previous then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tprevious\
    \ = l[i]\n\t\tend\n\t\treturn true\n\tend\n\treturn increasing(l) or decreasing(l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if not is_list(l) then return end\n    for i=2,#l\
    \ do\n        if l[i] < l[i-1] then return \"decreasing\" end\n        if l[i]\
    \ > l[i-1] then return \"increasing\" end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmyi0hmt.lua:3:\
    \ attempt to call a nil value (global 'is_list')\nstack traceback:\n\t/tmp/tmplmyi0hmt.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmplmyi0hmt.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local u, d = true, true\n  for i = 2, #l do\n \
    \   if l[i] > l[i-1] then\n      d = false\n    elseif l[i] < l[i-1] then\n  \
    \    u = false\n    end\n  end\n  return u or d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local increasing = true\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] > l[i-1] then\n            decreasing\
    \ = false\n        elseif l[i] < l[i-1] then\n            increasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc = l[1] <= l[2]\n    for i = 2, #l -\
    \ 1 do\n        if l[i] > l[i + 1] then\n            if inc then\n           \
    \     return false\n            end\n        elseif l[i] < l[i + 1] then\n   \
    \         if not inc then\n                return false\n            end\n   \
    \     end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 3 then return true end\n\tlocal direction\
    \ = l[2] > l[1]\n\tfor i = 3, #l do\n\t\tif direction ~= l[i] > l[i-1] then return\
    \ false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppaohp_zu.lua:6:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmppaohp_zu.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmppaohp_zu.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local ascending = true\n  local descending = true\n\
    \  for i = 2, #l do\n    if l[i] > l[i-1] then\n      descending = false\n   \
    \ elseif l[i] < l[i-1] then\n      ascending = false\n    end\n  end\n  return\
    \ ascending or descending\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 2 then return true end\n\tlocal d = l[2]\
    \ - l[1]\n\tfor i = 3, #l do\n\t\tif l[i] - l[i-1] ~= d then return false end\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoif53s5.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdoif53s5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal s = l[1]\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ == s then return nil end\n\t\tif l[i] ~= s + (l[i] - s)/abs(l[i] - s) then return\
    \ nil end\n\t\ts = l[i]\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4dkvx8h4.lua:6:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp4dkvx8h4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4dkvx8h4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 2 then return true end\n\tlocal dir = l[2]\
    \ - l[1]\n\tfor i = 3, #l do\n\t\tif (l[i] - l[i-1]) * dir < 0 then return false\
    \ end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc = 0\n    local dec = 0\n    for i =\
    \ 2, #l do\n        if l[i] > l[i-1] then\n            inc = inc + 1\n       \
    \ elseif l[i] < l[i-1] then\n            dec = dec + 1\n        end\n    end\n\
    \    return inc == 0 or dec == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local c = l[1]\n    local inc = false\n    local\
    \ dec = false\n    for i = 2, #l do\n        if l[i] > c then\n            inc\
    \ = true\n        elseif l[i] < c then\n            dec = true\n        end\n\
    \        if inc and dec then\n            return false\n        end\n        c\
    \ = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if not l then return end\n    local last = l[1]\n\
    \    local up = true\n    local down = true\n    for _, v in ipairs(l) do\n  \
    \      if up then\n            if last < v then\n                last = v\n  \
    \          else\n                up = false\n            end\n        end\n  \
    \      if down then\n            if last > v then\n                last = v\n\
    \            else\n                down = false\n            end\n        end\n\
    \    end\n    return up or down\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pp98b1b.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8pp98b1b.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l <= 1 then return true end\n  if l[1] < l[2]\
    \ then\n    for i = 2, #l - 1 do\n      if l[i] > l[i + 1] then return false end\n\
    \    end\n  else\n    for i = 2, #l - 1 do\n      if l[i] < l[i + 1] then return\
    \ false end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 3 then return true end\n    local dir\
    \ = l[2] - l[1] -- direction of growth (+1 or -1)\n    for i = 3, #l do\n    \
    \    if dir * (l[i] - l[i-1]) <= 0 then return false end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl2whzek.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnl2whzek.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if l[1] then\n    local direction = l[1] <= l[2]\
    \ and 1 or -1\n    for i = 2, #l - 1 do\n      if l[i] * direction < l[i + 1]\
    \ * direction then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmu58mgg.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvmu58mgg.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local last = l[1]\n  local increasing = l[2] >=\
    \ last\n  for i=2,#l do\n    local current = l[i]\n    if increasing then\n  \
    \    if current < last then return false end\n    else\n      if current > last\
    \ then return false end\n    end\n    last = current\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal dir, n\n\tfor i, e in ipairs(l) do\n\t\t\
    if not n then\n\t\t\tn = e\n\t\telseif e > n then\n\t\t\tif dir and dir ~= 1 then\
    \ return false end\n\t\t\tdir = 1\n\t\telseif e < n then\n\t\t\tif dir and dir\
    \ ~= -1 then return false end\n\t\t\tdir = -1\n\t\tend\n\t\tn = e\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif l == nil or #l < 2 then return true end\n\t\
    local d = l[2] - l[1]\n\tfor i = 3, #l do\n\t\tif (l[i] - l[i-1]) * d < 0 then\
    \ return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l == 0 then return true end\n    return all(zip(l,\
    \ l[2:])) do |a, b|\n        ((b < a) and (a - b == 1)) or ((b > a) and (b - a\
    \ == 1))\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyuk9c9sq.lua:4: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local list = {}\n  for k, v in pairs(l) do list[k]\
    \ = v end\n  table.sort(list)\n  local last_v = list[1]\n  local last_d = 0\n\
    \  for i = 2, #list do\n    local d = list[i] - last_v\n    if d == 0 then return\
    \ false end\n    if last_d ~= 0 and d / last_d < 0 then return false end\n   \
    \ last_v = list[i]\n    last_d = d\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hxfrfb_.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3hxfrfb_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local mode = l[1] <= l[2] and 1 or -1\n    for\
    \ i = 3, #l do\n        if l[i] * mode < l[i - 1] * mode then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local inc = l[2]\
    \ > l[1]\n  for i = 3, #l do\n    if inc and l[i] < l[i-1] then return false end\n\
    \    if not inc and l[i] > l[i-1] then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local dir = l[2]\
    \ > l[1]\n  for i = 3, #l do\n    if dir ~= (l[i] > l[i-1]) then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local d = 0\n    for i=2,#l do\n        local\
    \ di = l[i] - l[i-1]\n        if d==0 then\n            d = di\n        elseif\
    \ di*d<0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local not_inc = false\n    local not_dec = false\n\
    \    for i=2,#l do\n        if l[i]<l[i-1] then\n            not_inc = true\n\
    \        elseif l[i]>l[i-1] then\n            not_dec = true\n        end\n  \
    \      if not_inc and not_dec then\n            return false\n        end\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local increase = true\n  local decrease = true\n\
    \  for i = 2, #l do\n    if l[i-1] > l[i] then decrease = false end\n    if l[i-1]\
    \ < l[i] then increase = false end\n  end\n  return increase or decrease\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local i, dir\
    \ = 2, l[2] > l[1]\n  while i <= #l do\n    if dir ~= l[i] > l[i-1] then return\
    \ false end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3h1x7j4.lua:6:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmpc3h1x7j4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpc3h1x7j4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 3 then return true end\n  local inc = l[2]\
    \ > l[1]\n  for i = 3, #l do\n    if inc ~= (l[i] > l[i-1]) then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local i, n = 2, #l\n  local inc = l[2] >= l[1]\n\
    \  while i <= n do\n    if (inc and l[i] < l[i-1]) or (not inc and l[i] > l[i-1])\
    \ then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local t = {}\n  for i = 1, #l - 1 do\n    local\
    \ v1, v2 = l[i], l[i + 1]\n    if v1 < v2 then\n      t[i] = -1\n    elseif v1\
    \ > v2 then\n      t[i] = 1\n    else\n      t[i] = 0\n    end\n  end\n  return\
    \ t[1] and not table.foreach(t, function(i, v)\n    return t[1] ~= v\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqp5b1335.lua:14:\
    \ attempt to call a nil value (field 'foreach')\nstack traceback:\n\t/tmp/tmpqp5b1335.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqp5b1335.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 3 then return true end\n  local direction\
    \ = l[2] > l[1]\n  for i = 3, #l do\n    if l[i] ~= l[i-1] then\n      if l[i]\
    \ > l[i-1] ~= direction then return false end\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local last = l[1]\n  local d = nil\n  for i=2,#l\
    \ do\n    if last ~= l[i] then\n      if d == nil then\n        d = l[i] - last\n\
    \      elseif (d > 0 and l[i] - last < 0) or (d < 0 and l[i] - last > 0) then\n\
    \        return false\n      end\n    end\n    last = l[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal s = false\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ == l[i-1] then return false end\n\t\tif s == false then\n\t\t\tif l[i] > l[i-1]\
    \ then s = true else s = nil end\n\t\telseif s == true then\n\t\t\tif l[i] < l[i-1]\
    \ then return false end\n\t\telse\n\t\t\tif l[i] > l[i-1] then return false end\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhqx3fn9.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbhqx3fn9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal i, j = 1, #l\n\twhile i < j do\n\t\tif l[i]\
    \ > l[i+1] then\n\t\t\twhile i < j do\n\t\t\t\tif l[i] < l[i+1] then\n\t\t\t\t\
    \treturn false\n\t\t\t\tend\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif l[i] < l[i+1]\
    \ then\n\t\t\twhile i < j do\n\t\t\t\tif l[i] > l[i+1] then\n\t\t\t\t\treturn\
    \ false\n\t\t\t\tend\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk8joo8k.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnk8joo8k.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local m = l[1]\n  local d = 1\n  for i = 2, #l\
    \ do\n    if l[i] < m then\n      d = -1\n    elseif l[i] > m then\n      d =\
    \ 1\n    end\n    if l[i] ~= m then\n      m = l[i]\n    end\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1cun7_w.lua:21:\
    \ expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpo1cun7_w.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l > 1 then\n        if l[1] < l[2] then\n\
    \            for i = 2, #l-1 do\n                if l[i] > l[i+1] then\n     \
    \               return false\n                end\n            end\n        else\n\
    \            for i = 2, #l-1 do\n                if l[i] < l[i+1] then\n     \
    \               return false\n                end\n            end\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local d = l[2] - l[1]\n    for i = 3, #l do\n\
    \        if d * (l[i] - l[i-1]) <= 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpritqnzx8.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpritqnzx8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local isinc, isdec = true, true\n  for i = 2, #l\
    \ do\n    if l[i] < l[i-1] then isinc = false end\n    if l[i] > l[i-1] then isdec\
    \ = false end\n  end\n  return isinc or isdec\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local d = l[2] - l[1]\n    for i = 2, #l do\n\
    \        if d * (l[i+1] - l[i]) <= 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexfd1fff.lua:5:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpexfd1fff.lua:5: in local 'candidate'\n\t/tmp/tmpexfd1fff.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local direction\n    for i = 2, #l do\n     \
    \   if l[i-1] < l[i] then\n            if direction and direction == \"decreasing\"\
    \ then return false end\n            direction = \"increasing\"\n        elseif\
    \ l[i-1] > l[i] then\n            if direction and direction == \"increasing\"\
    \ then return false end\n            direction = \"decreasing\"\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local n = #l\n  if n == 0 then return true, true\
    \ end\n  local decreasing = l[1] > l[2]\n  for i = 2, n do\n    if decreasing\
    \ then\n      if l[i] > l[i-1] then return false, false end\n    else\n      if\
    \ l[i] < l[i-1] then return false, false end\n    end\n  end\n  return true, decreasing\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal d = {}\n\tfor i = 2, #l do\n\t\ttable.insert(d,\
    \ l[i] - l[i-1])\n\tend\n\treturn all(d, function(x) return x > 0 end) or all(d,\
    \ function(x) return x < 0 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxinebmf.lua:7:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmplxinebmf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplxinebmf.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local sl = sorted(l)\n  local function is_mono(l)\n\
    \    local previous = nil\n    for _, v in ipairs(l) do\n      if previous ~=\
    \ nil and previous == v then\n        return false\n      end\n      previous\
    \ = v\n    end\n    return true\n  end\n  return is_mono(l) or is_mono(sl)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgny5cs26.lua:3:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpgny5cs26.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpgny5cs26.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\t-- If decreasing, reverse list.\n\tlocal factor\
    \ = 1\n\tif l[1] > l[#l] then\n\t\tfactor = -1\n\t\tl = List.Reverse(l)\n\tend\n\
    \t-- Compare all pairs of values.\n\tfor i = 1, #l - 1 do\n\t\tif l[i] * factor\
    \ > l[i + 1] * factor then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzf8vfdt4.lua:7:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmpzf8vfdt4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzf8vfdt4.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    for i = 2, #l do\n        if not ((l[i] - l[i-1])\
    \ * (l[2] - l[1]) > 0) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eea_tx3.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8eea_tx3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local sign = l[2] - l[1]\n  for i = 3, #l do\n\
    \    if l[i] - l[i-1] ~= sign then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqomisi1.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnqomisi1.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local sml = l[1] < l[2]\n    for i = 2, #l-1\
    \ do\n        if sml ~= (l[i] < l[i+1]) then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc, dec = true, true\n    for i = 2, #l\
    \ do\n        if l[i] ~= l[i-1] then\n            inc = inc and l[i] > l[i-1]\n\
    \            dec = dec and l[i] < l[i-1]\n        end\n    end\n    return inc\
    \ or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 2 then return true end\n\tlocal inc = l[2]\
    \ > l[1]\n\tfor i = 3, #l do\n\t\tif l[i] - l[i-1] > 0 ~= inc then return false\
    \ end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local pre, dif = l[1], nil\n  for _, n in ipairs(l)\
    \ do\n    if pre ~= n then\n      if dif == nil then\n        dif = pre < n\n\
    \      elseif (dif and pre > n) or (not dif and pre < n) then\n        return\
    \ false\n      end\n    end\n    pre = n\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal increasing = true\n\tlocal decreasing = true\n\
    \tlocal last = l[1]\n\tfor i = 2, #l do\n\t\tlocal d = l[i] - last\n\t\tincreasing\
    \ = increasing and d >= 0\n\t\tdecreasing = decreasing and d <= 0\n\t\tlast =\
    \ l[i]\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local strict = true\n  if l[1] < l[2] then\n  \
    \  for i = 3, #l do\n      if l[i] < l[i-1] then\n        return false\n     \
    \ end\n    end\n  elseif l[1] > l[2] then\n    for i = 3, #l do\n      if l[i]\
    \ > l[i-1] then\n        return false\n      end\n    end\n  else\n    strict\
    \ = false\n    for i = 3, #l do\n      if l[i] ~= l[i-1] then\n        return\
    \ false\n      end\n    end\n  end\n  return strict\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqppvn243.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqppvn243.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l <= 1 then return true end\n  local a = l[1]\n\
    \  local b = l[2]\n  local cmp = (a > b) and ((a <= b) and nil or false) or (a\
    \ >= b) and true or nil\n  for i = 3, #l do\n    local a = b\n    local b = l[i]\n\
    \    if a == b then return true end\n    if (a > b) == cmp then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xjhqrco.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xjhqrco.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal direction = nil\n\tlocal prev = nil\n\tfor\
    \ _, v in ipairs(l) do\n\t\tif prev ~= nil then\n\t\t\tif v > prev then\n\t\t\t\
    \tif direction == false then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\tdirection\
    \ = true\n\t\t\telseif v < prev then\n\t\t\t\tif direction == true then\n\t\t\t\
    \t\treturn false\n\t\t\t\tend\n\t\t\t\tdirection = false\n\t\t\tend\n\t\tend\n\
    \t\tprev = v\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local dec = true\n  local inc = true\n  for i =\
    \ 2, #l do\n    if l[i] < l[i-1] then\n      dec = false\n    elseif l[i] > l[i-1]\
    \ then\n      inc = false\n    end\n  end\n  return dec or inc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 3 then return true end\n    local asc\
    \ = l[1] < l[2]\n    for i = 3, #l do\n        if asc and l[i] < l[i-1] then return\
    \ false end\n        if not asc and l[i] > l[i-1] then return false end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc, dec = true, true\n    for i = 2, #l\
    \ do\n        if l[i-1] < l[i] then\n            dec = false\n        elseif l[i-1]\
    \ > l[i] then\n            inc = false\n        end\n    end\n    return inc or\
    \ dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local s = l[1]\n    local inc = s < l[2]\n  \
    \  local result = true\n    for i = 2, #l do\n        if (inc and s > l[i]) or\
    \ (not inc and s < l[i]) then\n            result = false\n            break\n\
    \        end\n        s = l[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local sign = math.abs(l[2] - l[1]) / (l[2] - l[1])\n\
    \  for i = 3, #l do\n    if sign * (l[i] - l[i-1]) < 0 then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local decreasing = true\n    local increasing\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then decreasing = false\
    \ end\n        if l[i] > l[i-1] then increasing = false end\n    end\n    return\
    \ decreasing or increasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return false end\n  local s, e =\
    \ l[1], l[2]\n  if (s - e) > 0 then\n    for i = 2, #l do\n      if (l[i] - l[i-1])\
    \ >= 0 then return false end\n    end\n  else\n    for i = 2, #l do\n      if\
    \ (l[i] - l[i-1]) <= 0 then return false end\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmz_w1wb.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkmz_w1wb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local same = true\n    local diff = l[2] - l[1]\n\
    \    for i = 2, #l - 1 do\n        if diff * (l[i + 1] - l[i]) < 0 then\n    \
    \        return false\n        end\n        same = same and l[i] == l[i + 1]\n\
    \    end\n    return not same\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0q5osce.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp0q5osce.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l == 0 then return false end\n  local d = l[2]\
    \ - l[1]\n  for i = 2, #l do\n    if l[i] - l[i-1] ~= d then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgm00hky.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppgm00hky.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local mono = true\n  local d\n  for i = 2, #l do\n\
    \    if d == nil then\n      d = l[i] - l[i-1]\n    elseif d * (l[i] - l[i-1])\
    \ < 0 then\n      mono = false\n      break\n    end\n  end\n  return mono\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local n = #l\n  if n == 0 then return true end\n\
    \  local increasing = l[1] <= l[2]\n  for i = 2, n do\n    if increasing and l[i]\
    \ < l[i-1] or not increasing and l[i] > l[i-1] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local c = 0\n  local function inc(a, b)\n    return\
    \ a < b\n  end\n  local function dec(a, b)\n    return a > b\n  end\n  for i =\
    \ 2, #l do\n    if (c < 0 and inc(l[i - 1], l[i])) or (c > 0 and dec(l[i - 1],\
    \ l[i])) then\n      return false\n    end\n    if l[i - 1] < l[i] then\n    \
    \  c = 1\n    elseif l[i - 1] > l[i] then\n      c = -1\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 3 then return true end\n\tlocal increasing\
    \ = l[1] < l[2]\n\tfor i = 2, #l-1 do\n\t\tif increasing then\n\t\t\tif l[i] >\
    \ l[i+1] then return false end\n\t\telse\n\t\t\tif l[i] < l[i+1] then return false\
    \ end\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, #l do\n        if l[i] ~= l[i-1] then\n      \
    \      if inc ~= (l[i] > l[i-1]) then return false end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local min = l[1]\n  local inc = nil\n  for i,v\
    \ in ipairs(l) do\n    if inc == nil then\n      inc = v >= min\n    elseif inc\
    \ then\n      if v < min then return false end\n    else\n      if v > min then\
    \ return false end\n    end\n    min = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8b6mje9y.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8b6mje9y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal inc, dec = true, true\n\tfor i = 2, #l do\n\
    \t\tif l[i-1] > l[i] then\n\t\t\tinc = false\n\t\telseif l[i-1] < l[i] then\n\t\
    \t\tdec = false\n\t\tend\n\tend\n\treturn inc or dec\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local iter, v, prev_v = ipairs(l)\n  v, prev_v\
    \ = iter(l, iter(l))\n  if v == nil then return true end\n  if prev_v == nil then\
    \ return true end\n  local is_increasing = prev_v < v\n  prev_v = v\n  for v in\
    \ iter, l, iter do\n    if prev_v < v ~= is_increasing then return false end\n\
    \    prev_v = v\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26z363qj.lua:4:\
    \ bad argument #2 to 'iter' (number expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp26z363qj.lua:4: in local 'candidate'\n\t/tmp/tmp26z363qj.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local prev = l[1]\n    local direction = nil\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8z4ebfx.lua:19: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal inc, dec = true, true\n\tfor i = 2, #l do\n\
    \t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\telseif l[i] < l[i-1] then\n\t\
    \t\tinc = false\n\t\tend\n\tend\n\treturn inc or dec\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local d = l[2]\
    \ - l[1]\n  if d == 0 then return monotonic({unpack(l,2)}) end\n  for i = 2, #l\
    \ do\n    if d*(l[i] - l[i-1]) < 0 then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27qce9pf.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp27qce9pf.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp27qce9pf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal function eq(a, b) return a == b end\n\tlocal\
    \ function ne(a, b) return a ~= b end\n\tlocal function gt(a, b) return a > b\
    \ end\n\tlocal function lt(a, b) return a < b end\n\tlocal function gte(a, b)\
    \ return a >= b end\n\tlocal function lte(a, b) return a <= b end\n\tlocal op\
    \ = {[0] = eq, eq, gt, gte, lt, lte, ne}\n\tlocal n = #l\n\tif n < 2 then return\
    \ true end\n\tlocal s = math.abs(l[2] - l[1])\n\tlocal i = 2\n\twhile (i <= n)\
    \ and op[s+1](l[i], l[i-1]) do\n\t\ti = i + 1\n\tend\n\treturn i > n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9567fvv.lua:14:\
    \ attempt to call a nil value (field '?')\nstack traceback:\n\t/tmp/tmpj9567fvv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpj9567fvv.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local r = {l[1]}\n    local d = 0\n    for i\
    \ = 2, #l do\n        d = d + l[i] - l[i-1]\n        table.insert(r, l[i])\n \
    \   end\n    return d == 0 or d == (#l - 1) * (l[1] - l[#l])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvc3w6mx.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzvc3w6mx.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local d, flag = tonumber(l[2]) - tonumber(l[1]),\
    \ nil\n  for i = 2, #l do\n    if (tonumber(l[i]) - tonumber(l[i-1])) * d < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal direction = false\n\tlocal last = false\n\
    \tfor i, v in ipairs(l) do\n\t\tif not last then\n\t\t\tlast = v\n\t\telse\n\t\
    \t\tif direction == false then\n\t\t\t\tif v > last then\n\t\t\t\t\tdirection\
    \ = \"increasing\"\n\t\t\t\telseif v < last then\n\t\t\t\t\tdirection = \"decreasing\"\
    \n\t\t\t\tend\n\t\t\telseif (direction == \"increasing\" and v < last) or\n\t\t\
    \t\t(direction == \"decreasing\" and v > last) then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\t\tlast = v\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal c = l[1]\n\tlocal f = l[2] and l[2] > c or\
    \ l[2] < c\n\tlocal i = 2\n\twhile i <= #l do\n\t\ti = i + 1\n\t\tlocal n = l[i]\n\
    \t\tif (f and n <= c) or (not f and n >= c) then\n\t\t\treturn false\n\t\tend\n\
    \t\tc = n\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdeajht2e.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdeajht2e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdeajht2e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local w = l[1]\n    local increasing = true\n\
    \    for i=2,#l do\n        if l[i] < w then\n            increasing = false\n\
    \            break\n        end\n        w = l[i]\n    end\n    if increasing\
    \ then return increasing end\n    local decreasing = true\n    for i=2,#l do\n\
    \        if l[i] > w then\n            decreasing = false\n            break\n\
    \        end\n        w = l[i]\n    end\n    return decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal direction = 0\n\tlocal p = l[1]\n\tfor _,\
    \ q in ipairs(l) do\n\t\tif direction == 0 then\n\t\t\tif p < q then\n\t\t\t\t\
    direction = 1\n\t\t\telseif p > q then\n\t\t\t\tdirection = -1\n\t\t\tend\n\t\t\
    elseif direction == 1 then\n\t\t\tif q < p then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\telseif direction == -1 then\n\t\t\tif q > p then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\t\tp = q\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l <= 1 then return true end\n\tlocal increasing\
    \ = l[1] < l[2]\n\tfor i = 2, #l-1 do\n\t\tif l[i] == l[i+1] then return false\
    \ end\n\t\tif increasing then\n\t\t\tif l[i] > l[i+1] then return false end\n\t\
    \telse\n\t\t\tif l[i] < l[i+1] then return false end\n\t\tend\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2rnou2q.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt2rnou2q.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local incr = true\n  local decr = true\n  for i\
    \ = 2, #l do\n    if l[i] < l[i-1] then\n      incr = false\n    elseif l[i] >\
    \ l[i-1] then\n      decr = false\n    end\n  end\n  return incr or decr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l == 0 then return false end\n  local dir =\
    \ (l[2] - l[1]) > 0\n  for i = 2, #l do\n    if dir ~= (l[i+1] - l[i]) > 0 then\
    \ return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7yd27f2x.lua:6:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmp7yd27f2x.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7yd27f2x.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif type(l) ~= \"table\" then return false end\n\
    \tif #l < 3 then return true end\n\tlocal invert = l[1] > l[2] and true or false\n\
    \tfor i = 2, #l do\n\t\tif (l[i] - l[i-1]) * (invert and -1 or 1) < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    -- If only 1 element or less\n    if #l <= 1\
    \ then\n        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5p7z9ruo.lua:21: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local dir = nil\n    for i = 2, #l do\n     \
    \   if l[i] - l[i-1] ~= 0 then\n            if dir == nil then\n             \
    \   dir = l[i] - l[i-1]\n            elseif dir * (l[i] - l[i-1]) < 0 then\n \
    \               return false\n            end\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local rev = false\n    local prev = l[1]\n  \
    \  for i=2,#l do\n        if l[i] < prev then\n            if rev then return\
    \ false end\n            rev = true\n        elseif l[i] > prev then\n       \
    \     if not rev then return false end\n        end\n        prev = l[i]\n   \
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3aklqrq.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr3aklqrq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l == 0 then return true end\n  local t = l[1]\n\
    \  local incr = false\n  local decr = false\n  for i=2,#l do\n    if l[i] == t\
    \ then\n      -- do nothing\n    elseif l[i] > t then\n      if incr then\n  \
    \      -- do nothing\n      elseif decr then\n        return false\n      else\n\
    \        incr = true\n      end\n    elseif l[i] < t then\n      if decr then\n\
    \        -- do nothing\n      elseif incr then\n        return false\n      else\n\
    \        decr = true\n      end\n    end\n    t = l[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal acc = l[1] > l[2] and -1 or 1\n\tfor i =\
    \ 3, #l do\n\t\tif l[i-1] * acc < l[i] * acc then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbg688o8.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsbg688o8.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l <= 1 then return true end\n\tlocal delta\
    \ = (l[2] - l[1]) / math.abs(l[2] - l[1])\n\tfor i = 3, #l do\n\t\tif (l[i] -\
    \ l[i-1]) / math.abs(l[i] - l[i-1]) ~= delta then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk09w9s7u.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk09w9s7u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local order =\
    \ 0\n  for i = 2, #l do\n    local oi = order_of(l[i], l[i-1])\n    if oi == 0\
    \ then return false end\n    if order == 0 then order = oi end\n    if order *\
    \ oi < 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_duabef.lua:6:\
    \ attempt to call a nil value (global 'order_of')\nstack traceback:\n\t/tmp/tmpz_duabef.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpz_duabef.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local function f(a, b)\n    return a * b > 0\n\
    \  end\n  return foldl(f, false, zip(tail(l), l))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptscwn_5k.lua:6:\
    \ attempt to call a nil value (global 'tail')\nstack traceback:\n\t/tmp/tmptscwn_5k.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptscwn_5k.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local fst = l[1]\n    local direction = 0\n \
    \   for i, x in ipairs(l) do\n        if fst ~= x then\n            if i == 2\
    \ then\n                direction = (x - fst)\n            elseif (x - fst) *\
    \ direction < 0 then\n                return false\n            end\n        end\n\
    \        fst = x\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 3 then return true end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjsf1furh.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal inc, dec, i = true, true, 2\n\twhile inc\
    \ or dec do\n\t\tinc = l[i] > l[i-1]\n\t\tdec = l[i] < l[i-1]\n\t\ti = i + 1\n\
    \tend\n\treturn inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpcqp87_.lua:5:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwpcqp87_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpwpcqp87_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\n    local increasing\
    \ = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if increasing ~= (l[i] < l[i\
    \ + 1]) then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local increasing = 0\n    local decreasing =\
    \ 0\n    for i = 2, #l do\n        if l[i] > l[i-1] then\n            increasing\
    \ = increasing + 1\n        elseif l[i] < l[i-1] then\n            decreasing\
    \ = decreasing + 1\n        end\n    end\n    return increasing == #l - 1 or decreasing\
    \ == #l - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvxjadk_.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsvxjadk_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local d = l[2] - l[1]\n    for i = 3, #l do\n\
    \        if l[i] - l[i-1] ~= d then\n            return false\n        end\n \
    \   end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd35vm0b.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwd35vm0b.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc, dec = true, true\n    for i=2,#l do\n\
    \        inc = inc and l[i] >= l[i-1]\n        dec = dec and l[i] <= l[i-1]\n\
    \    end\n    return inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal t = (l[2] - l[1])/abs(l[2] - l[1])\n\tfor\
    \ i = 2, #l - 1 do\n\t\tif (l[i + 1] - l[i])/abs(l[i + 1] - l[i]) ~= t then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwatayabo.lua:3:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpwatayabo.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpwatayabo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local d = {}\n  local n = #l\n  for i = 1, n -\
    \ 1 do\n    d[i] = l[i + 1] - l[i]\n  end\n  local inc = false\n  local dec =\
    \ false\n  for i = 1, n - 2 do\n    if d[i] < 0 then\n      dec = true\n    elseif\
    \ d[i] > 0 then\n      inc = true\n    end\n  end\n  return (inc and not dec)\
    \ or (dec and not inc)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kjulxfv.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7kjulxfv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local c = #l\n  if c < 3 then return true end\n\
    \  local d = (l[2] > l[1]) and 1 or -1\n  for i = 3, c do\n    if (l[i] - l[i-1])\
    \ * d < 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local m = 0\n  for i = 2, #l do\n    local v =\
    \ (l[i] > l[i-1]) and 1 or (l[i] < l[i-1]) and -1 or 0\n    if v == 0 then return\
    \ false end\n    if m ~= 0 and v ~= m then return false end\n    m = v\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40qecpib.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp40qecpib.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal cur = l[1]\n\tlocal dir = cur < l[2] and\
    \ 1 or -1\n\tfor i = 2, #l do\n\t\tif (l[i] - cur) * dir < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\tcur = l[i]\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l <= 1 then return true end\n    local incr\
    \ = l[2] > l[1]\n    for i = 3, #l do\n        if (incr and l[i] < l[i-1]) or\
    \ (not incr and l[i] > l[i-1]) then\n            return false\n        end\n \
    \   end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local delta = l[2] - l[1]\n  for i = 2, #l do\n\
    \    if delta * (l[i] - l[i-1]) < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local inc, dec = true, true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal t=l[1]\n\tlocal i=2\n\twhile l[i] do\n\t\t\
    if l[i] < t then\n\t\t\twhile l[i] do\n\t\t\t\tif l[i] > t then\n\t\t\t\t\treturn\
    \ false\n\t\t\t\tend\n\t\t\t\tt=l[i]\n\t\t\t\ti=i+1\n\t\t\tend\n\t\t\treturn true\n\
    \t\telseif l[i] > t then\n\t\t\twhile l[i] do\n\t\t\t\tif l[i] < t then\n\t\t\t\
    \t\treturn false\n\t\t\t\tend\n\t\t\t\tt=l[i]\n\t\t\t\ti=i+1\n\t\t\tend\n\t\t\t\
    return true\n\t\tend\n\t\tt=l[i]\n\t\ti=i+1\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local direction = nil\n  for i=2,#l do\n    local\
    \ delta = l[i]-l[i-1]\n    if (delta == 0) then\n      direction = 0\n    elseif\
    \ (direction ~= 0) then\n      if (delta < 0) then\n        if (direction == 1)\
    \ then\n          return false\n        elseif (direction == nil) then\n     \
    \     direction = -1\n        end\n      else\n        if (direction == -1) then\n\
    \          return false\n        elseif (direction == nil) then\n          direction\
    \ = 1\n        end\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local is_increasing = true\n  local is_decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      is_increasing =\
    \ false\n    elseif l[i] > l[i-1] then\n      is_decreasing = false\n    end\n\
    \  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local min, max = l[1], l[1]\n  for i = 2, #l do\n\
    \    if l[i] < min then\n      min = l[i]\n    elseif l[i] > max then\n      max\
    \ = l[i]\n    else\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz38j5q6.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkz38j5q6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local up, down\n  for i = 2, #l do\n    if l[i]\
    \ > l[i-1] then\n      if down then return false end\n      up = true\n    elseif\
    \ l[i] < l[i-1] then\n      if up then return false end\n      down = true\n \
    \   end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l <= 1 then return true end\n  if l[1] > l[2]\
    \ then\n    for i = 2, #l do\n      if l[i-1] < l[i] then return false end\n \
    \   end\n  else\n    for i = 2, #l do\n      if l[i-1] > l[i] then return false\
    \ end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if l[1] ~= nil then\n        local inc = false\n\
    \        local dec = false\n        for i = 2, #l do\n            if l[i] > l[i-1]\
    \ then\n                dec = false\n                inc = true\n            elseif\
    \ l[i] < l[i-1] then\n                inc = false\n                dec = true\n\
    \            else\n                inc = false\n                dec = false\n\
    \            end\n        end\n        return inc or dec\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o7psvyx.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0o7psvyx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal up = l[1] <= l[2]\n\tfor i = 2, #l-1 do\n\
    \t\tif up and l[i] > l[i+1] then return false end\n\t\tif not up and l[i] < l[i+1]\
    \ then return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local k = 1\n  local m = -1\n  local len = #l\n\
    \  for i = 2, len do\n    k = (l[i] < l[i-1]) and -1 or (l[i] > l[i-1]) and 1\
    \ or k\n    if k ~= m and m ~= 0 then return false end\n    m = k\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3vu7wmv.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl3vu7wmv.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal inc = (l[1] <= l[2])\n\tfor i = 2, #l-1 do\n\
    \t\tif inc and not (l[i] <= l[i+1]) then return false end\n\t\tif not inc and\
    \ not (l[i] >= l[i+1]) then return false end\n\tend\n\treturn true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local direction = nil\n  for i = 2, #l do\n   \
    \ local d = l[i] - l[i-1]\n    if direction == nil then\n      direction = d\n\
    \    elseif (direction < 0 and d > 0) or (direction > 0 and d < 0) then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local t = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ <= t then return false end\n    t = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis0abw7_.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpis0abw7_.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if not l or #l < 2 then return true end\n   \
    \ local delta = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if l[i + 1] - l[i]\
    \ ~= delta then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cwjm7il.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0cwjm7il.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local c\n  for i,v in ipairs(l) do\n    if i ==\
    \ 1 then\n      c = v\n    else\n      if c < v then\n        c = v\n      else\n\
    \        return false\n      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubfdykz8.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpubfdykz8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local dcmp = function(a, b) return (a == b) and\
    \ 0 or ((a > b) and 1 or -1) end\n  local cmp = dcmp(l[1], l[2])\n  for i = 2,\
    \ #l - 1 do\n    if cmp ~= dcmp(l[i], l[i + 1]) then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2cbl2dt.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz2cbl2dt.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local last = l[1]\n    local increasing = last\
    \ <= l[2]\n    for i=2,#l do\n        if last == l[i] then return false end\n\
    \        if increasing and last > l[i] then return false end\n        if not increasing\
    \ and last < l[i] then return false end\n        last = l[i]\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536x3ie1.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp536x3ie1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local strict = false\n  local function mon_aux(list,comparator)\n\
    \    if #list < 2 then return true end\n    local head = list[1]\n    for i =\
    \ 2,#list do\n      if comparator(head,list[i]) == strict then\n        return\
    \ false\n      else\n        head = list[i]\n      end\n    end\n    return true\n\
    \  end\n  return mon_aux(l,lt) or mon_aux(l,gt)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgir31udx.lua:8:\
    \ attempt to call a nil value (local 'comparator')\nstack traceback:\n\t/tmp/tmpgir31udx.lua:8:\
    \ in local 'mon_aux'\n\t/tmp/tmpgir31udx.lua:16: in local 'candidate'\n\t/tmp/tmpgir31udx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal order = nil\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ > l[i-1] then\n\t\t\tif order == false then return false end\n\t\t\torder =\
    \ true\n\t\telseif l[i] < l[i-1] then\n\t\t\tif order == true then return false\
    \ end\n\t\t\torder = false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\n    local i =\
    \ 2\n    local prev = l[1]\n    local inc = prev < l[2]\n    while i <= #l do\n\
    \        if l[i] == prev then\n            return false\n        elseif inc ~=\
    \ (l[i] > prev) then\n            return false\n        end\n        prev = l[i]\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoagy8sdr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoagy8sdr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal a = l[1]\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ - a > 0 then\n\t\t\tif inc then return false end\n\t\t\tinc = true\n\t\telseif\
    \ l[i] - a < 0 then\n\t\t\tif dec then return false end\n\t\t\tdec = true\n\t\t\
    end\n\t\ta = l[i]\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunsjnsdk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpunsjnsdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local descending = l[1] > l[2]\n  for i = 2, #l\
    \ do\n    if descending and l[i] > l[i - 1] then\n      return false\n    elseif\
    \ not descending and l[i] < l[i - 1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    for i=2,#l do\n        if l[i] < l[i-1] then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyucxoew.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmyucxoew.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local increasing = (l[1] <= l[2])\n  for i = 2,\
    \ #l - 1 do\n    if (increasing and l[i] > l[i + 1]) or (not increasing and l[i]\
    \ < l[i + 1]) then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local v = l[1]\n  local d = v and v - l[2]\n  if\
    \ d == 0 then\n    return nil\n  end\n  for i = 2, #l do\n    v = l[i]\n    if\
    \ v == l[i-1] then\n      return nil\n    end\n    if v - l[i-1] ~= d then\n \
    \     return nil\n    end\n  end\n  return v and d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pdr92ox.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7pdr92ox.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local s = l[1]\n    local c = 0\n    for _, x\
    \ in ipairs(l) do\n        if s ~= x then\n            c = c + 1\n           \
    \ if c == 2 then return false end\n            s = x\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fj32h6l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6fj32h6l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l <= 1 then return true end\n\tlocal order\
    \ = l[2] > l[1]\n\tfor i = 3, #l do\n\t\tif order and l[i] < l[i-1] then return\
    \ false end\n\t\tif not order and l[i] > l[i-1] then return false end\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local increasing = true\n  local decreasing = true\n\
    \  for i = 2, #l do\n    if l[i] > l[i-1] then\n      decreasing = false\n   \
    \ elseif l[i] < l[i-1] then\n      increasing = false\n    end\n  end\n  return\
    \ increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  return (all(function(a,b) return a < b end, l)\
    \ or\n          all(function(a,b) return a > b end, l))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xzx_94f.lua:3:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmp4xzx_94f.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp4xzx_94f.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 2 then return true end\n\tlocal t = l[2]\
    \ - l[1] > 0\n\tfor i = 3, #l do\n\t\tif l[i] - l[i-1] > 0 ~= t then return false\
    \ end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l == 0 then return true end\n\tlocal t = l[1]\
    \ > l[2] and 1 or -1\n\tfor i = 2, #l - 1 do\n\t\tif l[i] * t < l[i + 1] * t then\
    \ return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local is_increasing = l[1] < l[2]\n  local old\
    \ = l[1]\n  for _,new in ipairs(l) do\n    if is_increasing then\n      if new\
    \ < old then return false end\n    else\n      if new > old then return false\
    \ end\n    end\n    old = new\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local less, gtr = true, true\n  for i = 2, #l do\n\
    \    less = less and l[i] < l[i-1]\n    gtr = gtr and l[i] > l[i-1]\n  end\n \
    \ return less or gtr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9lvxdha.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps9lvxdha.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local result = true\n  for i=2,#l do\n    if not(l[i-1]\
    \ < l[i] or l[i-1] > l[i]) then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4gj5br9.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp4gj5br9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l < 2 then return true end\n  local prev =\
    \ l[1]\n  local d = prev < l[2] and 1 or -1\n  for i = 2, #l do\n    if d * (l[i]\
    \ - prev) < 0 then return false end\n    prev = l[i]\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc = nil\n    for i = 2, #l do\n     \
    \   if not inc then\n            if l[i] < l[i-1] then\n                inc =\
    \ false\n            elseif l[i] > l[i-1] then\n                inc = true\n \
    \           end\n        elseif (inc and l[i] < l[i-1]) or (not inc and l[i] >\
    \ l[i-1]) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    -- Check if it's an empty list.\n    if #l ==\
    \ 0 then\n        return true\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppib_jtqv.lua:21: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l < 2 then return true end\n\tlocal d = l[2]\
    \ - l[1]\n\tfor i = 3, #l do\n\t\tif l[i] - l[i-1] ~= d then return false end\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoif53s5.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdoif53s5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal state = 0\n\tfor i=2,#l do\n\t\tif l[i] <\
    \ l[i-1] then\n\t\t\tif state == 1 then return false end\n\t\t\tstate = -1\n\t\
    \telseif l[i] > l[i-1] then\n\t\t\tif state == -1 then return false end\n\t\t\t\
    state = 1\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal function monotonic_aux(l, delta)\n\t\tif\
    \ #l == 1 then\n\t\t\treturn true\n\t\telseif #l == 2 then\n\t\t\treturn delta\
    \ ~= 0 and l[1] + delta == l[2]\n\t\telse\n\t\t\tlocal new_delta = (l[2] - l[1])\
    \ / abs(l[2] - l[1])\n\t\t\tif new_delta == delta then\n\t\t\t\treturn monotonic_aux(slice(l,\
    \ 2), new_delta)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn monotonic_aux(l, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8sxmm8c.lua:9:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpg8sxmm8c.lua:9:\
    \ in function </tmp/tmpg8sxmm8c.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpg8sxmm8c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local s = sign(l[2] - l[1])\n  for i = 3, #l do\n\
    \    if s * (l[i] - l[i-1]) < 0 then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoi4b4q8h.lua:3:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpoi4b4q8h.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpoi4b4q8h.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal s, c = 1, 0\n\tfor i = 2, #l do\n\t\tlocal\
    \ d = l[i] - l[i - 1]\n\t\tif d == 0 then return false end\n\t\tif c == 0 then\n\
    \t\t\tc = d\n\t\telseif c * d < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kxs5i0w.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8kxs5i0w.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local prev = l[1]\n    local prevEq = true\n\
    \    local increasing = nil\n    for i = 2, #l do\n        local cur = l[i]\n\
    \        if cur == prev then\n            prevEq = true\n        elseif not prevEq\
    \ then\n            return false\n        elseif cur > prev then\n           \
    \ if increasing == false then\n                return false\n            end\n\
    \            increasing = true\n        elseif cur < prev then\n            if\
    \ increasing == true then\n                return false\n            end\n   \
    \         increasing = false\n        end\n        prev = cur\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local n = #l\n  for i = 1, n-1 do\n    if l[i]\
    \ == l[i+1] then\n      return nil\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoexje5pd.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoexje5pd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local is_monotonic = true\n    local n = #l\n\
    \    if n >= 2 then\n        local start = l[1]\n        local direction = l[2]\
    \ > start and 1 or -1\n        for i = 2, n do\n            if l[i] * direction\
    \ < start * direction then\n                is_monotonic = false\n           \
    \     break\n            end\n        end\n    end\n    return is_monotonic\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f69glla.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7f69glla.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 3 then return true end\n    local v =\
    \ l[1]\n    local d = l[2] - v\n    for i = 3, #l do\n        if (l[i] - v) *\
    \ d < 0 then return false end\n        v = l[i]\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoz4nnidn.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoz4nnidn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local delta = l[2] - l[1]\n    for i = 2, #l\
    \ do\n        if delta * (l[i] - l[i-1]) < 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local d0 = l[2] - l[1]\n    for i = 3, #l do\n\
    \        local d = l[i] - l[i-1]\n        if d * d0 < 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc, dec = true, true\n    for i = 2, #l\
    \ do\n        inc = inc and l[i] >= l[i-1]\n        dec = dec and l[i] <= l[i-1]\n\
    \    end\n    return inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  return not l[2] or l[2] > l[1] == all(l, function(x,y)\
    \ return x >= y end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ygyzzy_.lua:3:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmp5ygyzzy_.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp5ygyzzy_.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if l[1] > l[2] then\n        return all(l, function(x,\
    \ y) return x >= y end)\n    else\n        return all(l, function(x, y) return\
    \ x <= y end)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5f59w6gm.lua:6:\
    \ attempt to call a nil value (global 'all')\nstack traceback:\n\t/tmp/tmp5f59w6gm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5f59w6gm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal d = l[2] - l[1]\n\tfor i = 3, #l do\n\t\t\
    if d * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k8aufu9.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4k8aufu9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if not (#l > 1) then return true end\n    local\
    \ inc = l[2] > l[1]\n    for i = 2, #l - 1 do\n        if (l[i + 1] > l[i]) ~=\
    \ inc then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l <= 1 then return true end\n    return (l[1]\
    \ <= l[2] and monotonic_increasing(l)) or\n           (l[1] >  l[2] and monotonic_decreasing(l))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9fxsigpl.lua:4:\
    \ attempt to call a nil value (global 'monotonic_increasing')\nstack traceback:\n\
    \t/tmp/tmp9fxsigpl.lua:4: in local 'candidate'\n\t/tmp/tmp9fxsigpl.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local n = #l\n  local increasing, decreasing =\
    \ false, false\n  for i = 1, n - 1 do\n    local diff = l[i + 1] - l[i]\n    if\
    \ diff > 0 then\n      increasing = true\n    elseif diff < 0 then\n      decreasing\
    \ = true\n    end\n    if increasing and decreasing then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local increasing = true\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] > l[i-1] then\n            decreasing\
    \ = false\n        elseif l[i] < l[i-1] then\n            increasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local isMono = true\n  local lastVal = l[1]\n \
    \ for i=2,#l do\n    if l[i] <= lastVal then\n      isMono = false\n      break\n\
    \    end\n    lastVal = l[i]\n  end\n  return isMono\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48ivtlk6.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp48ivtlk6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    for i = 2, #l do\n        if (l[i] - l[i-1])\
    \ * (l[2] - l[1]) < 0 then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal result = false\n\tlocal increasing = nil\n\
    \tlocal last = l[1]\n\tfor _, value in ipairs(l) do\n\t\tif not last then\n\t\t\
    \tlast = value\n\t\telse\n\t\t\tlocal current = value - last\n\t\t\tif increasing\
    \ == nil then\n\t\t\t\tincreasing = current > 0\n\t\t\t\tlast = value\n\t\t\t\
    elseif increasing then\n\t\t\t\tif current > 0 then\n\t\t\t\t\tlast = value\n\t\
    \t\t\telse\n\t\t\t\t\tresult = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\telse\n\
    \t\t\t\tif current < 0 then\n\t\t\t\t\tlast = value\n\t\t\t\telse\n\t\t\t\t\t\
    result = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozrhthmv.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpozrhthmv.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local decreasing = l[1] > l[2]\n  for i = 2, #l\
    \ - 1 do\n    if l[i] ~= l[i + 1] then\n      if l[i] < l[i + 1] and decreasing\
    \ then\n        return false\n      elseif l[i] > l[i + 1] and not decreasing\
    \ then\n        return false\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal current_direction\n\tlocal prev_value\n\t\
    for _,value in ipairs(l) do\n\t\tif prev_value then\n\t\t\tlocal delta = value\
    \ - prev_value\n\t\t\tlocal direction = (delta > 0) - (delta < 0)\n\t\t\tif current_direction\
    \ == nil then\n\t\t\t\tcurrent_direction = direction\n\t\t\telseif current_direction\
    \ ~= direction then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tprev_value\
    \ = value\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpw49d3n.lua:8:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpzpw49d3n.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzpw49d3n.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local dir = nil\n  for i=2,#l do\n    if l[i] ~=\
    \ l[i-1] then\n      if dir == nil then\n        dir = l[i] > l[i-1]\n      elseif\
    \ dir ~= (l[i] > l[i-1]) then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local inc, dec = true, true\n    for i = 2, #l\
    \ do\n        if l[i] < l[i-1] then inc = false end\n        if l[i] > l[i-1]\
    \ then dec = false end\n    end\n    return inc or dec\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif l[1] then\n\t\tlocal cmp = l[1] < l[2] and 1\
    \ or -1\n\t\tfor i = 2, #l - 1 do\n\t\t\tif l[i] * cmp < l[i + 1] * cmp then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpi2e6py.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptpi2e6py.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal increasing = l[1] < l[2]\n\tfor i = 2, #l\
    \ - 1 do\n\t\tif increasing then\n\t\t\tif l[i] > l[i + 1] then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\telse\n\t\t\tif l[i] < l[i + 1] then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local last = l[1]\n  local is_increasing = true\n\
    \  for i = 2, #l do\n    if l[i] < last then\n      is_increasing = false\n  \
    \    break\n    end\n    last = l[i]\n  end\n  if is_increasing then return true\
    \ end\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] > last then\n    \
    \  return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if #l == 0 then return true end\n  local delta\
    \ = l[2] - l[1]\n  for i = 3, #l do\n    if (l[i] - l[i-1]) * delta < 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local b = 0 -- 1 if non-decreasing, -1 if non-increasing\n\
    \    local k = 0\n    local inc = 0\n    for i = 2, #l do\n        if l[i] > l[i-1]\
    \ then\n            if inc == -1 then return false end\n            inc = 1\n\
    \        elseif l[i] < l[i-1] then\n            if inc == 1 then return false\
    \ end\n            inc = -1\n        end\n    end\n    return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal s, d = l[1], l[2] - l[1]\n\tfor i = 3, #l\
    \ do\n\t\tif l[i] - l[i - 1] ~= d then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxzdrmvp.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfxzdrmvp.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local increasing = true\n    local decreasing\
    \ = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n            increasing\
    \ = false\n        elseif l[i] > l[i-1] then\n            decreasing = false\n\
    \        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\n    local increasing\
    \ = l[1] < l[2]\n    for i = 2, #l do\n        if (increasing and l[i] < l[i-1])\
    \ or (not increasing and l[i] > l[i-1]) then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal seq = {}\n\tfor i = 1, #l do\n\t\tseq[i]\
    \ = l[i] >= l[i + 1] and \"-\" or \"+\"\n\tend\n\tlocal mon = {}\n\tfor i = 1,\
    \ #seq do\n\t\tmon[i] = mon[i - 1] == seq[i]\n\tend\n\treturn mon[#seq]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21e5szor.lua:5:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp21e5szor.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp21e5szor.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local direction = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy5jlj7hc.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local direction = 0\n    for i = 2, #l do\n \
    \       local inc = l[i] - l[i - 1]\n        if direction == 0 then\n        \
    \    direction = inc\n        elseif direction ~= 0 and inc * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local r = false\n    local d = 0\n    for i =\
    \ 2, #l do\n        if l[i] == l[i-1] then\n            return false\n       \
    \ elseif l[i] > l[i-1] then\n            if d == -1 then\n                return\
    \ false\n            else\n                d = 1\n            end\n        else\n\
    \            if d == 1 then\n                return false\n            else\n\
    \                d = -1\n            end\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pi9b48u.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9pi9b48u.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  if l[1]==l[2] then\n    for k=2,#l-1 do\n     \
    \ if l[k] ~= l[k+1] then\n        return false\n      end\n    end\n    return\
    \ true\n  elseif l[1]<l[2] then\n    for k=2,#l-1 do\n      if l[k] > l[k+1] then\n\
    \        return false\n      end\n    end\n    return true\n  else\n    for k=2,#l-1\
    \ do\n      if l[k] < l[k+1] then\n        return false\n      end\n    end\n\
    \    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local n = #l\n    if n < 2 then return true end\n\
    \    local inc = l[2] > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i-1])\
    \ then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal t = type(l)\n\tassert(t == \"table\", \"\
    Expected list, got \" .. t)\n\tif #l < 2 then return true end\n\tlocal inc = l[1]\
    \ < l[2]\n\tfor i = 2, #l do\n\t\tif inc and l[i - 1] > l[i] then return false\
    \ end\n\t\tif not inc and l[i - 1] < l[i] then return false end\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tif #l <= 1 then return true end\n\tif l[1] <= l[2]\
    \ then\n\t\tfor i = 2, #l-1 do\n\t\t\tif l[i] > l[i+1] then return false end\n\
    \t\tend\n\telse\n\t\tfor i = 2, #l-1 do\n\t\t\tif l[i] < l[i+1] then return false\
    \ end\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local order = true\n    local last = l[1]\n \
    \   for i = 2, #l do\n        if order and last < l[i] then\n            last\
    \ = l[i]\n        elseif order then\n            order = false\n            last\
    \ = l[i]\n        elseif not order and last > l[i] then\n            last = l[i]\n\
    \        else\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclqqzzi2.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpclqqzzi2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local inc = 0\n  local dec = 0\n  for i=2,#l do\n\
    \    if l[i]>l[i-1] then inc = inc + 1 end\n    if l[i]<l[i-1] then dec = dec\
    \ + 1 end\n  end\n  return inc==0 or dec==0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local len = #l\n  if len == 0 then return false\
    \ end\n  local cmp = l[1] < l[2] and 1 or -1\n  for i = 2, len - 1 do\n    if\
    \ cmp * (l[i] - l[i + 1]) <= 0 then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptv8ao22e.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptv8ao22e.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal inc, dec = true, true\n\tfor i = 2, #l do\n\
    \t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\telseif l[i] < l[i-1] then\n\t\
    \t\tinc = false\n\t\tend\n\tend\n\treturn inc or dec\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n  local delta = l[2] - l[1]\n  for i = 3, #l do\n\
    \    if not (sign(l[i] - l[i-1]) == sign(delta)) then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcawwzdx_.lua:5:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpcawwzdx_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpcawwzdx_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    if #l < 2 then return true end\n    return l[1]\
    \ < l[2] and (monotonic(sub(l, 2)) or true) or\n           l[1] > l[2] and (monotonic(sub(l,\
    \ 2)) or true)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusu9_9eg.lua:4:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpusu9_9eg.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpusu9_9eg.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822218
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n    local asc = true\n    local desc = true\n   \
    \ for i=2,#l do\n        if l[i] ~= l[i-1] then\n            asc = asc and l[i]\
    \ > l[i-1]\n            desc = desc and l[i] < l[i-1]\n        end\n    end\n\
    \    return asc or desc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822218
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    local function monotonic(l)\n\tlocal i, s = 1, 1\n\twhile i < #l do\n\t\tif l[i]\
    \ < l[i+1] then\n\t\t\tif s < 0 then return false end\n\t\t\ts = 1\n\t\telseif\
    \ l[i] > l[i+1] then\n\t\t\tif s > 0 then return false end\n\t\t\ts = -1\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt339t6q7.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt339t6q7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822218
