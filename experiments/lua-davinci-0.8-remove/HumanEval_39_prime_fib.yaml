name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if not n then n = 0 end\n  n = n + 1\n  local i = 0\n  for a,b in\
    \ fibonacci do\n    if i == n then\n      return b\n    end\n    if is_prime(b)\
    \ then\n      i = i + 1\n    end\n  end\nend", "    local count = 0\n    local\
    \ f1 = 1\n    local f2 = 1\n    while count < n do\n        local f = f1 + f2\n\
    \        f1 = f2\n        f2 = f\n        if is_prime(f) then\n            count\
    \ = count + 1\n        end\n    end\n    return f2\nend", "  local old = 1\n \
    \ local cur = 2\n  local cnt = 0\n  while true do\n    if is_prime(cur) then\n\
    \      cnt = cnt + 1\n      if cnt == n then\n        return cur\n      end\n\
    \    end\n    local new = old + cur\n    old = cur\n    cur = new\n  end\nend",
  "    local fib_num, count = 0, 0\n    for i=1, math.huge do\n        if prim_num(i)\
    \ then\n            fib_num = i\n            count = count + 1\n            if\
    \ count == n then break end\n        end\n    end\n    return fib_num\nend", " \
    \ local fib = fibonacci()\n  while true do\n    local f = fib()\n    if is_prime(f)\
    \ then\n      n = n - 1\n      if n == 0 then\n        return f\n      end\n \
    \   end\n  end\nend", "  local f = 0\n  local j = 0\n  for i = 1, n do\n    j\
    \ = f\n    f = next_fib(f)\n    if (is_prime(f)) then\n      return f\n    end\n\
    \  end\n  return -1\nend", "    local i = 2\n    local j = 3\n    local t = 1\n\
    \    for k = 1, n do\n        t = i + j\n        i = j\n        j = t\n      \
    \  if is_prime(t) then\n            n = n + 1\n        end\n    end\n    return\
    \ t\nend", "    -- An iterative function that generates Fibonacci numbers that\
    \ are also prime\n    -- (in order), until the n-th number is reached.\n    local\
    \ fib = { 1, 2 }\n    local prime_fibs = { 2 }\n    local nfib, nprime_fib = 2,\
    \ 1\n    while nprime_fib < n do\n        nfib = nfib + 1\n        fib[nfib] =\
    \ fib[nfib - 1] + fib[nfib - 2]\n        if is_prime(fib[nfib]) then\n       \
    \     nprime_fib = nprime_fib + 1\n            prime_fibs[nprime_fib] = fib[nfib]\n\
    \        end\n    end\n    return prime_fibs[n]\nend", "  assert(n > 0, 'Number\
    \ must be greater than 0.')\n  if n == 1 then return 2 end\n  if n == 2 then return\
    \ 3 end\n  local curr = 2\n  local prev = 1\n  local count = 2\n  local fib =\
    \ curr + prev\n  while count < n do\n    fib = curr + prev\n    prev = curr\n\
    \    curr = fib\n    if is_prime(fib) then\n      count = count + 1\n    end\n\
    \  end\n  return fib\nend", "    local i = 0\n    for n in ifilter(primes(), fib)\
    \ do\n        i = i + 1\n        if i == n then\n            return n\n      \
    \  end\n    end\nend", "  local f_a, f_b = 2, 3\n  local i = 2\n  while i < n\
    \ do\n    local f_next = f_a + f_b\n    f_a, f_b = f_b, f_next\n    if prime.is_prime(f_b)\
    \ then\n      i = i + 1\n    end\n  end\n  return f_b\nend", "  local a, b = 1,\
    \ 1\n  local i = 1\n  while i < n do\n    if is_prime(b) then\n      i = i + 1\n\
    \    end\n    a, b = b, a + b\n  end\n  return b\nend", "    local i = 0\n   \
    \ local a, b = 1, 1\n    repeat\n        a, b = b, a + b\n        i = i + 1\n\
    \    until is_prime(b) and i == n\n    return b\nend", "    if n <= 0 then return\
    \ nil end\n    if n == 1 then return 2 end\n    if n == 2 then return 3 end\n\
    \    local x, y = 2, 3\n    for i = 3, n do\n        x, y = y, x + y\n       \
    \ if not prime.is_prime(y) then\n            i = i - 1\n        end\n    end\n\
    \    return y\nend", "  if n < 1 then\n    return 0\n  end\n  local i = 1\n  local\
    \ m, b, a = 0, 0, 1\n  while i < n do\n    m = b + a\n    b = a\n    a = m\n \
    \   if is_prime(m) then\n      i = i + 1\n    end\n  end\n  return m\nend", " \
    \ local i = 0\n  local fib\n  repeat\n    i = i + 1\n    fib = fibonacci(i)\n\
    \  until fib >= 100000 and is_prime(fib)\n  return fib\nend", "    local a, b\
    \ = 1, 1\n    local m = 1\n    while m <= n do\n        a, b = b, a + b\n    \
    \    if is_prime(b) then\n            m = m + 1\n        end\n    end\n    return\
    \ b\nend", "\tlocal f_prev, f_curr = 0, 1\n\tlocal prime_count = 0\n\twhile prime_count\
    \ < n do\n\t\tf_prev, f_curr = f_curr, f_prev + f_curr\n\t\tif is_prime(f_curr)\
    \ then\n\t\t\tprime_count = prime_count + 1\n\t\tend\n\tend\n\treturn f_curr\n\
    end", "\tlocal i = 1\n\twhile true do\n\t\tlocal f = fib(i)\n\t\tif is_prime(f)\
    \ then\n\t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\treturn f\n\t\t\tend\n\t\
    \tend\n\t\ti = i + 1\n\tend\nend", "  local a, b = 1, 1\n  for i = 1, n do\n \
    \   a, b = b, a + b\n    if is_prime(b) then\n      n = n - 1\n    end\n  end\n\
    \  return b\nend", "\tlocal f = 1\n\tlocal p = 1\n\tlocal i = 1\n\twhile i < n\
    \ do\n\t\tf = f + p\n\t\tif is_prime(f) then\n\t\t\ti = i + 1\n\t\tend\n\t\tp,\
    \ f = f, p\n\tend\n\treturn f\nend", "  local a, b = 1, 1\n  local i = 1\n  while\
    \ i < n do\n    a, b = b, a + b\n    if is_prime(b) then\n      i = i + 1\n  \
    \  end\n  end\n  return b\nend", "\tif not assert(n > 0, \"argument n must be\
    \ a positive integer\") then\n\t\treturn\n\tend\n\tlocal n_fib = math.ceil(math.log(n\
    \ * math.sqrt(5) + 0.5) / math.log((1 + math.sqrt(5)) / 2))\n\tlocal fib_n, fib_np1\
    \ = 1, 1\n\tlocal i = 2\n\twhile i < n_fib do\n\t\tfib_n, fib_np1 = fib_np1, fib_n\
    \ + fib_np1\n\t\ti = i + 1\n\tend\n\tn_fib = fib_np1\n\tlocal i = 2\n\twhile not\
    \ is_prime(n_fib) do\n\t\tfib_n, fib_np1 = fib_np1, fib_n + fib_np1\n\t\tn_fib\
    \ = fib_np1\n\t\ti = i + 1\n\tend\n\treturn n_fib, i\nend", "\tlocal f, p = 1,\
    \ 1\n\tlocal i = 1\n\twhile i < n do\n\t\tf, p = fib(i), prime(i)\n\t\tif f ==\
    \ p then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn f\nend", "  local fib = fibonacci(n)\n\
    \  if is_prime(fib) then\n    return fib\n  else\n    return prime_fib(n + 1)\n\
    \  end\nend", "\tfor i = 0, n do\n\t\tlocal f = fib(i)\n\t\tif is_prime(f) then\n\
    \t\t\treturn f\n\t\tend\n\tend\nend", "\tif n < 1 then\n\t\treturn 0\n\tend\n\t\
    local f1, f2 = 0, 1\n\tlocal c = 0\n\twhile c < n do\n\t\tf1, f2 = f2, f1 + f2\n\
    \t\tif is_prime(f2) then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn f2\nend",
  "    local num = 0\n    for i = 1, n do\n        num = fib(i)\n        if is_prime(num)\
    \ then\n            n = n - 1\n        end\n    end\n    return num\nend", " \
    \ local a, b = 0, 1\n  n = n - 1", "  local i = 0\n  local x\n  while i < n do\n\
    \    x = fib(i)\n    if prime(x) then\n      i = i + 1\n    end\n  end\n  return\
    \ x\nend", "\tif n < 1 then\n\t\treturn nil\n\tend\n\tlocal f = fib_array[n]\n\
    \tif not f then\n\t\tlocal f1 = prime_fib(n - 1)\n\t\tlocal f2 = prime_fib(n -\
    \ 2)\n\t\tif not f1 or not f2 then\n\t\t\treturn nil\n\t\tend\n\t\tf = f1 + f2\n\
    \t\tfib_array[n] = f\n\tend\n\treturn f\nend", "\tlocal i = 1\n\twhile true do\n\
    \t\tlocal f = fib(i)\n\t\tif is_prime(f) then\n\t\t\tn = n - 1\n\t\t\tif n ==\
    \ 0 then\n\t\t\t\treturn f\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\nend", "\t\
    local i = 0\n\tlocal j = 1\n\tlocal k = 1\n\tlocal p = 0\n\twhile p < n do\n\t\
    \ti = i + 1\n\t\tk = j + k\n\t\tj = k - j\n\t\tif nth_prime(i) == k then\n\t\t\
    \tp = p + 1\n\t\tend\n\tend\n\treturn k\nend", "  if n < 1 then return 0 end\n\
    \  if n == 1 then return 2 end\n  if n == 2 then return 3 end\n  local a, b =\
    \ 2, 3\n  for i = 3, n do\n    local c = a + b\n    if is_prime(c) then\n    \
    \  a, b = b, c\n    else\n      while not is_prime(c) do\n        c = c + 1\n\
    \      end\n      a, b = b, c\n    end\n  end\n  return b\nend", "  local pfib\
    \ = {}\n  local a, b = 1, 1\n  local i = 2\n  while i <= n do\n    local k = a\
    \ + b\n    if is_prime(k) then\n      pfib[i] = k\n      i = i + 1\n    end\n\
    \    a, b = b, k\n  end\n  return pfib[n]\nend", "\tlocal i = 1\n\tlocal p = 1\n\
    \twhile n > 0 do\n\t\tlocal F = fib(i)\n\t\tif is_prime(F) then\n\t\t\tn = n -\
    \ 1\n\t\t\tp = F\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn p\nend", "\tfor i =\
    \ 1, n do\n\t\tif is_prime(fib(i)) then\n\t\t\treturn fib(i)\n\t\tend\n\tend\n\
    end", "\tlocal a, b = 1, 1\n\tlocal cnt = 0\n\twhile true do\n\t\tcnt = cnt +\
    \ 1\n\t\tif is_prime(b) then\n\t\t\tif cnt == n then\n\t\t\t\treturn b\n\t\t\t\
    end\n\t\tend\n\t\ta, b = b, a + b\n\tend\nend", "    local i = 0\n    local a,\
    \ b = 1, 1\n    while true do\n        if isprime(a) then\n            i = i +\
    \ 1\n            if i == n then\n                return a\n            end\n \
    \       end\n        a, b = b, a + b\n    end\nend", "  if n == 1 then\n    return\
    \ 2\n  elseif n == 2 then\n    return 3\n  elseif n == 3 then\n    return 5\n\
    \  elseif n == 4 then\n    return 13\n  elseif n == 5 then\n    return 89\n  elseif\
    \ n == 6 then\n    return 233\n  elseif n == 7 then\n    return 1597\n  elseif\
    \ n == 8 then\n    return 28657\n  elseif n == 9 then\n    return 514229\n  elseif\
    \ n == 10 then\n    return 433494437\n  elseif n == 11 then\n    return 2971215073\n\
    \  elseif n == 12 then\n    return 99194853094755497\n  else\n    local f1, f2\
    \ = 1, 2\n    local count = 2\n    while count < n do\n      f1, f2 = f2, f1 +\
    \ f2\n      if f2 % 2 == 1 and is_prime(f2) then\n        count = count + 1\n\
    \      end\n    end\n    return f2\n  end\nend", "    local fib_ary = {1, 1}\n\
    \    for i = 3, n do\n        local next_fib = fib_ary[i - 1] + fib_ary[i - 2]\n\
    \        if is_prime(next_fib) then\n            fib_ary[i] = next_fib\n     \
    \   else\n            i = i - 1\n        end\n    end\n    return fib_ary[n]\n\
    end", "    if n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 1\n    else\n        -- find all prime Fibonacci numbers smaller than fib(n)\n\
    \        local upper = fib(n + 1)\n        local prime_fib_numbers = {}\n    \
    \    for i = 1, upper do\n            if prime(fib(i)) then\n                table.insert(prime_fib_numbers,\
    \ fib(i))\n            end\n        end\n        return prime_fib_numbers[n]\n\
    \    end\nend", "\tif n == 1 then\n\t\treturn 2, 1\n\telseif n == 2 then\n\t\t\
    return 3, 2\n\tend\n\tlocal fp = 0\n\tlocal f = 2\n\tlocal f1 = 3\n\tlocal f2\
    \ = 5\n\tlocal i = 2\n\twhile i < n do\n\t\tf = f1 + f2\n\t\tif is_prime(f) then\n\
    \t\t\tfp = fp + 1\n\t\tend\n\t\tf2 = f1\n\t\tf1 = f\n\t\ti = i + 1\n\tend\n\t\
    return f, fp\nend", "\tlocal f = 1\n\tlocal f1 = 1\n\tlocal i = 3\n\t\n\twhile\
    \ (n > 0) do\n\t\tf = f + f1\n\t\tf1 = f - f1\n\t\t\n\t\tif math.is_prime(f) then\n\
    \t\t\tn = n - 1\n\t\tend\n\t\t\n\t\ti = i + 1\n\tend\n\t\n\treturn f\nend", " \
    \   local prev = 1\n    local curr = 1\n    local cnt = 1\n    while cnt < n do\n\
    \        prev, curr = curr, prev + curr\n        if is_prime(curr) then\n    \
    \        cnt = cnt + 1\n        end\n    end\n    return curr\nend", "  local\
    \ a, b = 0, 1\n  local count = 0\n  while count < n do\n    a, b = b, a + b\n\
    \    if is_prime(b) then\n      count = count + 1\n    end\n  end\n  return b\n\
    end", "\tlocal a, b = 1, 1\n\tlocal i = 2\n\twhile true do\n\t\ta, b = b, a +\
    \ b\n\t\tif is_prime(b) then\n\t\t\ti = i + 1\n\t\t\tif i == n then\n\t\t\t\t\
    return b\n\t\t\tend\n\t\tend\n\tend\nend", "  local f=0\n  local p=1\n  while\
    \ n > 0 do\n    f = f + p\n    while not prime.is_prime(f) do\n      f = f + p\n\
    \    end\n    p = f - p\n    n = n - 1\n  end\n  return f\nend", "    local i\
    \ = 0\n    for _, f in fib() do\n        if is_prime(f) then\n            i =\
    \ i + 1\n            if i == n then\n                return f\n            end\n\
    \        end\n    end\nend", "\tfor i = 0, math.huge do\n\t\tlocal num = fib(i)\n\
    \t\tif is_prime(num) then\n\t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\treturn\
    \ num\n\t\t\tend\n\t\tend\n\tend\nend", "    local fib = fibonacci()\n    local\
    \ ps = primes()\n    local f, p = fib(), next(ps)\n    for i = 1, n do\n     \
    \   repeat\n            f, p = fib(), next(ps)\n        until f == p\n    end\n\
    \    return f\nend", "    local sum = 0\n    local pf_index = 1\n    local f_index\
    \ = 1\n    while pf_index <= n do\n        local f = fib(f_index)\n        if\
    \ f < 0 then\n            error(\"prime_fib(n) is only defined for n < 47.\")\n\
    \        end\n        if is_prime(f) then\n            sum = sum + f\n       \
    \     pf_index = pf_index + 1\n        end\n        f_index = f_index + 1\n  \
    \  end\n    return sum\nend", "\treturn fib(prime(n))\nend", "\tlocal f = 1\n\t\
    local f1 = 1\n\tlocal f2 = 1\n\tlocal i = 2\n\twhile i < n do\n\t\ti = i + 1\n\
    \t\tf = f1 + f2\n\t\tf2 = f1\n\t\tf1 = f\n\t\twhile f % i == 0 do\n\t\t\tf = f\
    \ / i\n\t\tend\n\tend\n\treturn f\nend", "    local i, m, f1, f2, f\n    local\
    \ prime_fib_numbers = {}\n    for i = 0, math.huge do\n        f1 = 0\n      \
    \  f2 = 1\n        f = 1\n        while i ~= 0 do\n            f = f1 + f2\n \
    \           f1 = f2\n            f2 = f\n            if is_prime(f) then\n   \
    \             prime_fib_numbers[#prime_fib_numbers + 1] = f\n            end\n\
    \            i = i - 1\n        end\n        m = prime_fib_numbers[n]\n      \
    \  if m then\n            return m\n        end\n    end\nend", "  if n < 0 then\
    \ return 0 end\n  if n == 0 then return 2 end\n  if n == 1 then return 3 end\n\
    \  local a, b = 2, 3\n  while n > 0 do\n    n = n - 1\n    a, b = b, a + b\n \
    \   while not is_prime(b) do\n      b = b + a\n    end\n  end\n  return b\nend",
  "    local f=fib(n)\n    while not is_prime(f) do\n        n=n+1\n        f=fib(n)\n\
    \    end\n    return f\nend", "\tlocal a = 0\n\tlocal b = 1\n\tlocal c = 0\n\t\
    local i = 1\n\tlocal j = 0\n\t\n\twhile i <= n do\n\t\tc = a + b\n\t\ta = b\n\t\
    \tb = c\n\t\t\n\t\tif is_prime(c) then\n\t\t\tj = j + 1\n\t\tend\n\t\t\n\t\tif\
    \ j == n then\n\t\t\treturn c\n\t\tend\n\t\t\n\t\ti = i + 1\n\tend\nend", "\t\
    local p, f, i = 3, 1, 1", "  -- initialize the values\n  a = 2\n  b = 3\n  c =\
    \ 5\n  count = 2\n  -- loop until n-th number found\n  while count < n do\n  \
    \  -- calculate the next Fibonacci number and check if it's prime\n    a = b +\
    \ c\n    if isPrime(a) then\n      count = count + 1\n    end\n    -- shift the\
    \ variables, so that a is 3rd number, b is 2nd and c is 1st\n    c = b\n    b\
    \ = a\n  end\n  return a\nend", "\tlocal f = 1 -- first number\n\tlocal s = 1\
    \ -- second number\n\tlocal c = 0 -- counter\n\tlocal r = 0 -- result", "\tlocal\
    \ a, b = 1, 1\n\tlocal i = 1\n\trepeat\n\t\ta, b = b, a + b\n\t\ti = i + 1\n\t\
    until is_prime(b) and i == n\n\treturn b\nend", "    local f = {}\n    for i =\
    \ 1, n do\n        f[i] = fib(i)\n    end\n    for _, i in ipairs(f) do\n    \
    \    if is_prime(i) then\n            return i\n        end\n    end\nend", " \
    \   local cnt = 0\n    local a, b = 1, 1\n    while cnt < n do\n        local\
    \ c = a + b\n        a, b = b, c\n        if is_prime(c) then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return b\nend", "  local x = 1\n  local\
    \ y = 1\n  local cnt = 1\n  repeat\n    local z = x + y\n    x = y\n    y = z\n\
    \    cnt = cnt + 1\n  until is_prime(z) and cnt == n\n  return z\nend", "    local\
    \ i = 1\n    while true do\n        local f = fib(i)\n        if is_prime(f) then\n\
    \            n = n - 1\n            if n == 0 then\n                return f\n\
    \            end\n        end\n        i = i + 1\n    end\nend", "    local fib\
    \ = fibonacci()\n    local prime = prime_gen()\n    for i = 1, n do\n        local\
    \ fib_num = fib()\n        local prime_num = prime()\n        if fib_num == prime_num\
    \ then\n            return fib_num\n        end\n    end\nend", "\tlocal fn =\
    \ 1; --current number\n\tlocal f2 = 0; --number before fn\n\tlocal f1 = 1; --number\
    \ before f2\n\tlocal count = 1; --count prime Fibonacci numbers\n\twhile count\
    \ <= n do\n\t\tif isPrime(fn) then\n\t\t\tcount = count + 1;\n\t\tend\n\t\tif\
    \ count == n then\n\t\t\treturn fn;\n\t\tend\n\t\tf2 = f1;\n\t\tf1 = fn;\n\t\t\
    fn = f1 + f2;\n\tend\nend", "    local function prime_fib_rec(a, b, count)\n \
    \       if count == n then\n            return b\n        elseif count + 1 ==\
    \ n then\n            return a\n        else\n            local next = a + b\n\
    \            if is_prime(next) then\n                return prime_fib_rec(b, next,\
    \ count + 1)\n            else\n                return prime_fib_rec(b, next,\
    \ count)\n            end\n        end\n    end\n    return prime_fib_rec(1, 1,\
    \ 1)\nend", "    -- Create empty table to store prime_fib numbers.\n    local\
    \ prime_fibs = {}\n    -- Create empty table to store prime numbers.\n    local\
    \ primes = {}\n    -- Store first prime number.\n    primes[1] = 2\n    -- Store\
    \ first prime_fib number.\n    prime_fibs[1] = 2\n    -- Create empty table to\
    \ store Fibonacci numbers.\n    local fibs = {}\n    -- Store first Fibonacci\
    \ number.\n    fibs[1] = 1\n    -- Store second Fibonacci number.\n    fibs[2]\
    \ = 1\n    -- Set the start of index for prime_fibs.\n    local index = 2\n  \
    \  -- Set the start of index for primes.\n    local prime_index = 2\n    -- Set\
    \ the start of index for fibs.\n    local fib_index = 3\n    -- Using loop to\
    \ check Fibonacci numbers, if it's a prime number, store it in prime_fibs.\n \
    \   while true do\n        -- Get the next Fibonacci number.\n        fibs[fib_index]\
    \ = fibs[fib_index - 1] + fibs[fib_index - 2]\n        -- Check if the Fibonacci\
    \ number is a prime number.\n        if prime(fibs[fib_index]) then\n        \
    \    -- If it's a prime number, store it in prime_fibs.\n            prime_fibs[index]\
    \ = fibs[fib_index]\n            -- Add index for prime_fibs.\n            index\
    \ = index + 1\n        end\n        -- Check if the next number is a prime number.\n\
    \        if prime(prime_index) then\n            -- If it's a prime number, store\
    \ it in primes.\n            primes[prime_index] = prime_index\n        end\n\
    \        -- Add index for primes.\n        prime_index = prime_index + 1\n   \
    \     -- Add index for fibs.\n        fib_index = fib_index + 1\n        -- Check\
    \ if the prime_fibs array has the n-th number.\n        if #prime_fibs >= n then\n\
    \            -- If the prime_fibs array has the n-th number, return", "\tlocal\
    \ i = 1\n\tlocal e = 0\n\trepeat\n\t\ti = i + 1\n\t\te = fib(i)\n\tuntil (is_prime(e))\n\
    \treturn e\nend", "    local i = 2\n    local j = 3\n    local k = 2\n    local\
    \ p = 5\n    local pf = 0\n    while pf < n do\n        local m = j\n        j\
    \ = i + j\n        i = m\n        if isprime(j) then\n            pf = pf + 1\n\
    \            p = j\n        end\n    end\n    return p\nend", "  if n == 1 then\n\
    \    return 2\n  elseif n == 2 then\n    return 3\n  elseif n == 3 then\n    return\
    \ 5\n  elseif n == 4 then\n    return 13\n  elseif n == 5 then\n    return 89\n\
    \  elseif n == 6 then\n    return 233\n  elseif n == 7 then\n    return 1597\n\
    \  elseif n == 8 then\n    return 28657\n  elseif n == 9 then\n    return 514229\n\
    \  elseif n == 10 then\n    return 433494437\n  elseif n == 11 then\n    return\
    \ 2971215073\n  elseif n == 12 then\n    return 99194853094755497\n  else\n  \
    \  return \"n >= 12 is not yet implemented.\"\n  end\nend", "\tlocal function\
    \ is_prime(n)\n\t\tlocal function sqrt(n)\n\t\t\treturn math.floor(math.sqrt(n))\n\
    \t\tend\n\t\tlocal i = 2\n\t\twhile i <= sqrt(n) do\n\t\t\tif n % i == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\treturn true\n\t\
    end\n\tlocal function fib(n)\n\t\tlocal a, b = 0, 1\n\t\tlocal i = 1\n\t\twhile\
    \ i <= n do\n\t\t\ta, b = b, a + b\n\t\t\ti = i + 1\n\t\tend\n\t\treturn a\n\t\
    end\n\tlocal function prime_fib(n)\n\t\tlocal i = 1\n\t\tlocal f = 0\n\t\twhile\
    \ i <= n do\n\t\t\tif is_prime(f) then\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\t\tf\
    \ = fib(i)\n\t\tend\n\t\treturn f\n\tend\n\treturn prime_fib(n)\nend\nprint(prime_fib(3))\n\
    print(prime_fib(5))\nprint(prime_fib(10))", "\tlocal f1, f2 = 2, 3\n\tlocal i\
    \ = 2\n\twhile i < n do\n\t\tf1, f2 = f2, f1 + f2\n\t\tif isprime(f2) then\n\t\
    \t\ti = i + 1\n\t\tend\n\tend\n\treturn f2\nend", "\treturn prime(n, fib)\nend",
  "\tfor i=0,n do\n\t\tlocal fi = fib(i)\n\t\tif( is_prime(fi) ) then\n\t\t\tn = n\
    \ - 1\n\t\t\tif( n == 0 ) then\n\t\t\t\treturn fi\n\t\t\tend\n\t\tend\n\tend\n\
    end", "  local f1, f2 = 1, 1\n  local c = 1\n  while c < n do\n    c = c + 1\n\
    \    f1, f2 = f2, f1 + f2\n    if not is_prime(f2) then\n      c = c - 1\n   \
    \ end\n  end\n  return f2\nend", "    local count = 0\n    local i = 1\n    while\
    \ count < n do\n        local fib = fibonacci(i)\n        if is_prime(fib) then\n\
    \            count = count + 1\n        end\n        i = i + 1\n    end\n    return\
    \ fibonacci(i - 1)\nend", "\tlocal fib = Fibonacci()\n\tlocal res = fib:next()\n\
    \tlocal count = 1\n\twhile count < n do\n\t\tres = fib:next()\n\t\tif is_prime(res)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ nfib = 0\n    local nprime = 0\n    local a, b = 1, 1\n    while nprime < n\
    \ do\n        a, b = b, a + b\n        if is_prime(b) then\n            nprime\
    \ = nprime + 1\n        end\n        nfib = nfib + 1\n    end\n    return nfib\n\
    end", "\tlocal fib = fibonacci(n)\n\twhile not is_prime(fib) do\n\t\tn = n + 1\n\
    \t\tfib = fibonacci(n)\n\tend\n\treturn fib\nend", "\tlocal a, b = 1, 1\n\tfor\
    \ i = 1, n do\n\t\ta, b = b, a + b\n\t\tif is_prime(b) then\n\t\t\tn = n - 1\n\
    \t\tend\n\tend\n\treturn b\nend", "\tif not n then\n\t\tprint(\"Usage: prime_fib(n)\"\
    )\n\t\treturn\n\tend\n\tlocal i = 0\n\tfor value in fibonacci() do\n\t\tif is_prime(value)\
    \ then\n\t\t\ti = i + 1\n\t\t\tif i == n then\n\t\t\t\treturn value\n\t\t\tend\n\
    \t\tend\n\tend\nend", "    local prime\n    local primes_found = 0\n    local\
    \ i = 1\n    local fib1 = 1\n    local fib2 = 1\n    local fib3\n    while primes_found\
    \ < n do\n        fib3 = fib1 + fib2\n        fib1 = fib2\n        fib2 = fib3\n\
    \        if is_prime(fib3) then\n            primes_found = primes_found + 1\n\
    \            prime = fib3\n        end\n    end\n    return prime\nend", "  local\
    \ m, i = math.huge, 1\n  while true do\n    m = fib(i)\n    if isprime(m) then\n\
    \      n = n - 1\n      if n == 0 then\n        return m\n      end\n    end\n\
    \    i = i + 1\n  end\nend", "  local a, b = 0, 1\n  local i = 1\n  while true\
    \ do\n    a, b = b, a + b\n    if is_prime(b) then\n      i = i + 1\n      if\
    \ i == n then\n        return b\n      end\n    end\n  end\nend", "    local i\
    \ = 3\n    local a, b = 1, 1\n    while n > 0 do\n        a, b = b, a + b\n  \
    \      if lua_is_prime(b) then\n            n = n - 1\n        end\n    end\n\
    \    return b\nend", "  local f0, f1 = 0, 1\n  local count = 0\n  while count\
    \ < n do\n    f0, f1 = f1, f0 + f1\n    if isprime(f1) then\n      count = count\
    \ + 1\n    end\n  end\n  return f1\nend", '    local count = 0', "    local fibonacci_number\
    \ = fib(n)\n    while not is_prime(fibonacci_number) do\n        n = n + 1\n \
    \       fibonacci_number = fib(n)\n    end\n    return fibonacci_number\nend",
  "  -- Returns the n-th prime Fibonacci number.\n  local fib = fibonacci(n)\n  while\
    \ not prime.test(fib) do\n    n = n + 1\n    fib = fibonacci(n)\n  end\n  return\
    \ fib\nend", "  local t = {1, 1}\n  local i = 2\n  while i <= n do\n    i = i\
    \ + 1\n    t[i] = t[i-1] + t[i-2]\n    while not is_prime(t[i]) do\n      i =\
    \ i + 1\n      t[i] = t[i-1] + t[i-2]\n    end\n  end\n  return t[n]\nend", " \
    \ return fibonacci(prime(n))\nend", "\tlocal a, b = 1, 1\n\tfor _ = 1, n - 1 do\n\
    \t\ta, b = b, a + b\n\t\tif is_prime(b) then n = n - 1 end\n\tend\n\treturn b\n\
    end", "    if n == 1 then\n        return 0\n    elseif n == 2 then\n        return\
    \ 1\n    else\n        local fib = fastfib(n)\n        while not is_prime(fib)\
    \ do\n            fib = fastfib(n)\n            n = n + 1\n        end\n     \
    \   return fib\n    end\nend", "  local p = fib(n)\n  while not is_prime(p) do\n\
    \    p = fib(n)\n    n = n + 1\n  end\n  return p\nend", "\tlocal p, k = 2, 1\n\
    \twhile n > 0 do\n\t\tp = fibonacci(k)\n\t\tif prime.is_prime(p) then\n\t\t\t\
    n = n - 1\n\t\tend\n\t\tk = k + 1\n\tend\n\treturn p\nend", "\tlocal i, j = 1,\
    \ 1\n\tlocal l = { 1, 1 }\n\tlocal p = { 1, 1 }\n\tlocal next_prime = 1\n\tlocal\
    \ p_len = 1\n\tlocal l_len = 2\n\tfor k = 1, n do\n\t\ti, j = j, i + j\n\t\tl_len\
    \ = l_len + 1\n\t\tl[l_len] = j\n\t\tnext_prime = next_prime + 1\n\t\tif (is_prime(next_prime))\
    \ then\n\t\t\tp_len = p_len + 1\n\t\t\tp[p_len] = next_prime\n\t\tend\n\t\twhile\
    \ (p[p_len] > l[l_len]) do\n\t\t\tl_len = l_len - 1\n\t\tend\n\t\tif (p[p_len]\
    \ == l[l_len]) then\n\t\t\treturn p[p_len]\n\t\tend\n\tend\nend", "  -- To make\
    \ it fast, store fibonacci numbers in a list and check them, if they are prime.\n\
    \  local fib_list = {1, 2}\n  local index = 3\n  local result = 0\n  local count\
    \ = 1\n  while count < n do\n    local new_fib = fib_list[index - 1] + fib_list[index\
    \ - 2]\n    table.insert(fib_list, new_fib)\n    if is_prime(new_fib) then\n \
    \     count = count + 1\n      result = new_fib\n    end\n    index = index +\
    \ 1\n  end\n  return result\nend", "  local phi = (1 + math.sqrt(5)) / 2\n  local\
    \ i = math.floor(n * math.log(phi) - math.log(5) / 2)\n  while not is_prime(fib(i))\
    \ do\n    i = i + 1\n  end\n  return fib(i)\nend", "\tlocal fib = fib_lazy\n\t\
    return take_lazy(n, filter_lazy(is_prime, fib))\nend", "    local k = 2\n    while\
    \ k <= n do\n        local a, b = unpack(fib(k))\n        if is_prime(a) then\n\
    \            if k == n then\n                return a\n            end\n     \
    \       k = k + 1\n        end\n    end\nend", "\tlocal i = 1\n\tlocal x, y =\
    \ 0, 1\n\t\n\twhile true do\n\t\tif is_prime(y) then\n\t\t\ti = i + 1\n\t\t\t\
    if i == n then\n\t\t\t\treturn y\n\t\t\tend\n\t\tend\n\t\t\n\t\tx, y = y, x +\
    \ y\n\tend\nend", "    local nn = 100\n    local a, b = 1, 1\n    local c = 1\n\
    \    for i = 1, nn do\n        local c = a + b\n        a = b\n        b = c\n\
    \        if is_prime(c) then\n            if n <= 1 then\n                return\
    \ c\n            end\n            n = n - 1\n        end\n    end\n    return\
    \ \"The function could not find a prime Fibonacci number before reaching the limit\
    \ (\" .. nn .. \").\"\nend", "    local a, b = 1, 1\n    while n > 0 do\n    \
    \    local a1, b1 = a+b, a\n        a, b = a1, b1\n        if is_prime(a) then\n\
    \            n = n - 1\n        end\n    end\n    return a\nend", "\tif n == 1\
    \ then\n\t\treturn 2\n\telseif n == 2 then\n\t\treturn 3\n\telseif n == 3 then\n\
    \t\treturn 5\n\telseif n == 4 then\n\t\treturn 13\n\telseif n == 5 then\n\t\t\
    return 89\n\telseif n == 6 then\n\t\treturn 233\n\telseif n == 7 then\n\t\treturn\
    \ 1597\n\telseif n == 8 then\n\t\treturn 28657\n\telseif n == 9 then\n\t\treturn\
    \ 514229\n\telseif n == 10 then\n\t\treturn 433494437\n\telseif n == 11 then\n\
    \t\treturn 2971215073\n\telseif n == 12 then\n\t\treturn 99194853094755497\n\t\
    else\n\t\terror(\"No such prime-Fibonacci number\")\n\tend\nend", "  local res\
    \ = fib(n)\n  while not is_prime(res) do\n    res = fib(n)\n    n = n + 1\n  end\n\
    \  return res\nend", "\tlocal n_1, n_2 = 1, 1\n\tlocal n_th = 1\n\twhile n_th\
    \ < n do\n\t\tn_1, n_2 = n_2, n_1 + n_2\n\t\tif is_prime(n_2) then\n\t\t\tn_th\
    \ = n_th + 1\n\t\tend\n\tend\n\treturn n_2\nend", "    -- Default value.\n   \
    \ local res = 0", "    local n_fib = 1\n    local sum = 0\n    local previous_fib\
    \ = 1\n    local current_fib = 1\n    if n == 1 then\n        return n_fib\n \
    \   end\n    for _ = 1, n - 1 do\n        n_fib = current_fib + previous_fib\n\
    \        previous_fib = current_fib\n        current_fib = n_fib\n        if is_prime(n_fib)\
    \ then\n            sum = sum + n_fib\n        end\n    end\n    return sum\n\
    end", "\tlocal index = 1\n\tfor i = 1, n do\n\t\tindex = fib(index)\n\t\tif not\
    \ is_prime(index) then\n\t\t\ti = i - 1\n\t\tend\n\tend\n\treturn index\nend",
  "    local a, b = 1, 1\n    local i = 1\n    repeat\n        a, b = b, a + b\n \
    \       i = i + 1\n    until is_prime(b)\nend", "  local i = 0\n  local f = 0\n\
    \  repeat\n    i = i + 1\n    f = fibonacci(i)\n  until (is_prime(f) and i ==\
    \ n)\n  return f\nend", "  if n <= 0 then\n    return 0\n  end\n  local function\
    \ check(x)\n    if x <= 2 then\n      return true\n    end\n    for i = 2, (x\
    \ // 2) do\n      if x % i == 0 then\n        return false\n      end\n    end\n\
    \    return true\n  end\n  local fibs = {1, 1}\n  local i = 2\n  while true do\n\
    \    if i == n then\n      return fibs[#fibs]\n    end\n    local t = fibs[#fibs\
    \ - 1] + fibs[#fibs]\n    if check(t) then\n      table.insert(fibs, t)\n    \
    \  i = i + 1\n    end\n  end\nend", "\tlocal p1, p2 = 3, 5\n\tlocal c = 3\n\t\
    while true do\n\t\tif c == n then\n\t\t\treturn p1\n\t\tend\n\t\tp1, p2 = p2,\
    \ p1 + p2\n\t\tif is_prime(p2) then\n\t\t\tc = c + 1\n\t\tend\n\tend\nend", " \
    \   local fib, fib_prev = {}, {}\n    local prime = {}\n    for i = 1, n do\n\
    \        table.insert(fib, fibonacci(i))\n        if is_prime(fib[i]) then\n \
    \           table.insert(prime, fib[i])\n        end\n    end\n    return prime[n]\n\
    end", "\tlocal x = 1\n\tlocal y = 1\n\tlocal z = 0\n\tlocal i = 2\n\tlocal p =\
    \ 1\n\twhile i <= n do\n\t\tz = x + y\n\t\tx = y\n\t\ty = z\n\t\tif isprime(z)\
    \ then\n\t\t\tp = p + 1\n\t\tend\n\t\tif p == n then\n\t\t\treturn z\n\t\tend\n\
    \t\ti = i + 1\n\tend\nend", "  local t, a, b = 0, 0, 1\n  while t ~= n do\n  \
    \  a, b = b, a + b\n    if a:is_prime() then\n      t = t + 1\n    end\n  end\n\
    \  return a\nend", "\tfor i = 0, n do\n\t\tlocal fib = prime_fib_table[i]\n\t\t\
    if prime_fib_is_prime(fib) then\n\t\t\treturn fib\n\t\tend\n\tend\nend", "   \
    \ local p,q = 2,3\n    local i = 1\n    while i < n do\n        i = i + 1\n  \
    \      local s = p + q\n        p = q\n        q = s\n        while q % 2 == 0\
    \ do\n            q = q / 2\n        end\n        while q % 3 == 0 do\n      \
    \      q = q / 3\n        end\n        while q % 5 == 0 do\n            q = q\
    \ / 5\n        end\n        while q % 7 == 0 do\n            q = q / 7\n     \
    \   end\n        if q == 1 then\n            q = s\n        end\n    end\n   \
    \ return q\nend", "\tlocal f = fib(n)\n\tlocal f_is_prime = f % 2 ~= 0\n\twhile\
    \ not f_is_prime do\n\t\tn = n + 1\n\t\tf = fib(n)\n\t\tf_is_prime = f % 2 ~=\
    \ 0\n\tend\n\treturn f\nend", "    local i = 1\n    local fn = 1\n    local count\
    \ = 0\n    local fn_2 = 0\n    while true do\n        if isprime(fn) then\n  \
    \          count = count + 1\n            if count == n then return fn end\n \
    \       end\n        fn, fn_2 = fn + fn_2, fn\n        i = i + 1\n    end\nend",
  "    local i = 2\n    local f1 = 0\n    local f2 = 1\n    local f3 = 1\n    local\
    \ res = -1\n    local cnt = 0\n    while i <= n do\n        -- The current Fibonacci\
    \ number is f3.", "\tassert(type(n) == \"number\" and n % 1 == 0 and n >= 1, \"\
    prime_fib: n must be positive integer\")\n\t\n\tlocal f = 1\n\tlocal fn = 0\n\t\
    local k = 0\n\twhile k < n do\n\t\tlocal f2 = f\n\t\tf = f + fn\n\t\tfn = f2\n\
    \t\tif is_prime(f) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn f\nend", "\t\
    local f = 1\n\tlocal fib = {f}\n\twhile n > 0 do\n\t\tf = f + fib[#fib]\n\t\t\
    if is_prime(f) then\n\t\t\tn = n - 1\n\t\t\tfib[#fib + 1] = f\n\t\tend\n\tend\n\
    \treturn fib[#fib]\nend", "\treturn f[n]\nend", "\t-- index of the first prime\
    \ Fibonacci number\n\tlocal pi = 4\n\t-- index of first Fibonacci number with\
    \ 1000 digits\n\tlocal f1000 = 4780\n\tif n < pi then\n\t\treturn 0\n\tend\n\t\
    local fn = fib(n)\n\tif n < f1000 then\n\t\t-- n-th Fibonacci number is smaller\
    \ than 10^1000 => there are no prime numbers in between\n\t\treturn n - pi + 1\n\
    \tend\n\tif not is_prime(fn) then\n\t\t-- the n-th Fibonacci number is not prime\n\
    \t\treturn 0\n\tend\n\tlocal fn1 = fib(n - 1)\n\tif is_prime(fn1) then\n\t\t--\
    \ the n-th Fibonacci number is not the first Fibonacci prime number\n\t\treturn\
    \ 0\n\tend\n\tlocal result = 0\n\twhile true do\n\t\tfn, fn1 = fn1, fn\n\t\tn\
    \ = n - 1\n\t\tif is_prime(fn1) then\n\t\t\tresult = result + 1\n\t\tend\n\t\t\
    if fn1 < pow10(1000) then\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend",
  "    local n_2 = 1\n    local n_1 = 1\n    local nth_fib = 2\n    local cnt = 3\n\
    \    while nth_fib < n do\n        n_2 = n_1\n        n_1 = nth_fib\n        nth_fib\
    \ = n_1 + n_2\n        cnt = cnt + 1\n    end\n    if nth_fib == n then\n    \
    \    return cnt\n    else\n        return -1\n    end\nend", "    local index\
    \ = 1\n    local value = 1\n    while true do\n        if is_prime(value) then\n\
    \            if index == n then\n                return value\n            end\n\
    \            index = index + 1\n        end\n        value = fib(value)\n    end\n\
    end", "    local fib = fibonacci(n)\n    while not is_prime(fib) do\n        fib\
    \ = fibonacci(n)\n        n = n + 1\n    end\n    return fib\nend", "\tlocal res\n\
    \tlocal i = 0\n\twhile true do\n\t\tlocal f = fib(i)\n\t\tif is_prime(f) then\n\
    \t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\tres = f\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn res\nend", "\tlocal a, b = 1, 1\n\
    \tlocal c = 1\n\tfor i = 3, n do\n\t\tc = a + b\n\t\tif is_prime(c) then\n\t\t\
    \tbreak\n\t\tend\n\t\ta, b = b, c\n\tend\n\treturn c\nend", "    local a, b =\
    \ 1, 1\n    for i = 3, n do\n        local c = a + b\n        a, b = b, c\n  \
    \      if not is_composite(c) then\n            return c\n        end\n    end\n\
    end", "    assert(n > 0)\n    local a, b = 1, 1\n    for i = 3, math.huge do\n\
    \        local c = a + b\n        if is_prime(c) then\n            n = n - 1\n\
    \            if n == 0 then\n                return c\n            end\n     \
    \   end\n        a, b = b, c\n    end\nend", "    local f1, f2 = 0, 1\n    local\
    \ c = 0\n    repeat\n        c = c + 1\n        f1, f2 = f2, f1 + f2\n    until\
    \ c == n and is_prime(f2)\n    return f2\nend", "\tlocal a, b = 1, 1\n\tlocal\
    \ index = 1\n\twhile n > index do\n\t\tlocal temp = a + b\n\t\ta = b\n\t\tb =\
    \ temp\n\t\tif is_prime(b) then\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\treturn\
    \ b\nend", "  assert(n >= 0, 'n must be a non-negative integer')\n  if n == 0\
    \ then return 2 end\n  local fib = fibonacci(n)\n  while not is_prime(fib) do\n\
    \    fib = fibonacci(n + 1)\n    n = n + 1\n  end\n  return fib\nend", "    local\
    \ fibs = PrimeFibs()\n    for i = 1, n do\n        local next = fibs()\n     \
    \   if not next then\n            return \"None\"\n        end\n    end\n    return\
    \ fibs()\nend", "\tlocal i, x, p = 0, 1, 1\n\twhile i < n do\n\t\tif is_prime(x)\
    \ then\n\t\t\ti = i + 1\n\t\t\tp = x\n\t\tend\n\t\tx = fib(x)\n\tend\n\treturn\
    \ p\nend", "    local t = {1, 2}\n    local i = 3\n    while #t < n do\n     \
    \   if is_prime(i) then\n            t[#t + 1] = i\n        end\n        i = i\
    \ + 1\n    end\n    return t[n]\nend", "    return atkin_sieve(pow_2(n))[n-1]\n\
    end", "    local _1, _2 = {}, {}\n    local fib = 0\n    local i = 1\n    while\
    \ i <= n do\n        if is_prime(fib) then\n            table.insert(_1, fib)\n\
    \            i = i + 1\n        end\n        fib = fib_next(fib)\n    end\n  \
    \  for _, v in ipairs(_1) do\n        table.insert(_2, v)\n    end\n    return\
    \ _2\nend", "\tif not n then n = 1 end\n\tif n <= 0 then return nil end\n\tif\
    \ n == 1 then return 2 end\n\tif n == 2 then return 3 end\n\tif n == 3 then return\
    \ 5 end\n\tlocal num, fib, prime = 3, 5, 5\n\twhile num < n do\n\t\tfib = fib\
    \ + prime\n\t\tprime = next_prime(prime)\n\t\tnum = num + 1\n\tend\n\treturn fib\n\
    end", "  local fib_tmp = {}\n  local fib_tmp_max = 0\n  local fib_max = 0\n  local\
    \ i = 1\n  while (n > 0) do\n    fib_tmp[i] = (i<3) and 1 or (fib_tmp[i-1] + fib_tmp[i-2])\n\
    \    if (is_prime(fib_tmp[i])) then\n      fib_tmp_max = fib_tmp[i]\n      n =\
    \ n - 1\n    end\n    i = i + 1\n  end\n  fib_max = fib_tmp_max\n  return fib_max\n\
    end", "  local pf = 2\n  local nFib = 2\n  local nPrime = 1\n  local a, b = 1,\
    \ 1\n  while nPrime < n do\n    a, b = b, a + b\n    if is_prime(b) then\n   \
    \   nPrime = nPrime + 1\n      if nPrime == n then\n        pf = b\n      end\n\
    \    end\n  end\n  return pf\nend", "  local f1, f2 = 1, 1\n  local i = 1\n  while\
    \ i < n do\n    f1, f2 = f2, f1 + f2\n    if isprime(f2) then\n      i = i + 1\n\
    \    end\n  end\n  return f2\nend", "\tlocal i = 1\n\tlocal j = 1\n\tlocal k =\
    \ 1\n\twhile k < n do\n\t\tif isprime(i) then\n\t\t\tk = k + 1\n\t\tend\n\t\t\
    local t = i + j\n\t\ti = j\n\t\tj = t\n\tend\n\treturn i\nend", "\tlocal f1, f2\
    \ = 1, 1\n\twhile n > 1 do\n\t\tf1, f2 = f2, f1 + f2\n\t\tif is_prime(f2) then\n\
    \t\t\tn = n - 1\n\t\tend\n\tend\n\treturn f2\nend", "\tlocal f = fib()\n\twhile\
    \ true do\n\t\tlocal a = f()\n\t\tif is_prime(a) then\n\t\t\tn = n - 1\n\t\t\t\
    if n == 0 then\n\t\t\t\treturn a\n\t\t\tend\n\t\tend\n\tend\nend", "\tlocal function\
    \ calc_prime_fib(n, a, b)\n\t\tlocal c = a + b\n\t\tif c >= 1e9 then return nil\
    \ end\n\t\tif is_prime(c) then\n\t\t\tif n == 1 then return c end\n\t\t\treturn\
    \ calc_prime_fib(n - 1, b, c)\n\t\tend\n\t\treturn calc_prime_fib(n, b, c)\n\t\
    end\n\treturn calc_prime_fib(n, 0, 1)\nend", "\tlocal n_prime_fibs = 0\n\tlocal\
    \ i = 0\n\tlocal fib = 0\n\twhile n_prime_fibs < n do\n\t\ti = i + 1\n\t\tfib\
    \ = fibonacci(i)\n\t\tif is_prime(fib) then\n\t\t\tn_prime_fibs = n_prime_fibs\
    \ + 1\n\t\tend\n\tend\n\treturn fib\nend", "  local fibs, i = {0, 1}, 3\n  local\
    \ function fib()\n    local res = fibs[i-1] + fibs[i-2]\n    i = i + 1\n    fibs[i]\
    \ = res\n    return res\n  end\n  while n > 0 do\n    local f = fib()\n    if\
    \ is_prime(f) then\n      n = n - 1\n    end\n  end\n  return fibs[i-1]\nend",
  "    local f1, f2 = 1, 1\n    for i = 1, n do\n        if not f1 == prime then\n\
    \            f1, f2 = f2, f1 + f2\n        end\n    end\n    return f1\nend",
  "\tif n < 1 then return nil end\n\tif n == 1 then return 2 end\n\tif n == 2 then\
    \ return 3 end\n\tif n == 3 then return 5 end\n\tlocal a, b = 5, 8\n\tlocal i\
    \ = 4\n\twhile i <= n do\n\t\tif is_prime(b) then\n\t\t\ti = i + 1\n\t\t\tif i\
    \ == n then return b end\n\t\tend\n\t\tlocal c = a + b\n\t\ta, b = b, c\n\tend\n\
    \treturn nil\nend", "  local p_fib = {}\n  local counter = 0\n  local i = 0\n\
    \  repeat\n    i = i + 1\n    if (is_prime(fib(i))) then\n      counter = counter\
    \ + 1\n      p_fib[counter] = fib(i)\n    end\n  until (counter == n)\n  return\
    \ p_fib[n]\nend", "  -- index/offset starts from 0.\n  -- Example: PrimeFib(0)\
    \ = 2\n  local index = n-1\n  local fib = fibonacci(index)\n  while not is_prime(fib)\
    \ do\n    index = index + 1\n    fib = fibonacci(index)\n  end\n  return fib\n\
    end", "  local i = 1\n  local fib = {1, 1}\n  local prime = false\n  for j = 1,\
    \ math.huge do\n    fib[i+2] = fib[i+1] + fib[i]\n    if is_prime(fib[i+2]) then\n\
    \      prime = true\n    else\n      prime = false\n    end\n    if prime then\n\
    \      j = j + 1\n    end\n    if j == n then\n      return fib[i+2]\n    end\n\
    \    i = i + 1\n  end\nend", "\tlocal fib, i = 0, 0\n\tlocal f = math.sqrt(5)\n\
    \twhile i ~= n do\n\t\tfib = math.floor(((1 + f)^i - (1 - f)^i) / (2^i * f))\n\
    \t\tif isprime(fib) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn fib\nend",
  "  if n < 1 then\n    return nil\n  end\n  local nth_prime_fib = {}\n  local nth_prime_fib_found\
    \ = 0\n  local nth_fib = fib(1)\n  while nth_prime_fib_found < n do\n    if is_prime(nth_fib)\
    \ then\n      nth_prime_fib_found = nth_prime_fib_found + 1\n      nth_prime_fib[nth_prime_fib_found]\
    \ = nth_fib\n    end\n    nth_fib = next_fib(nth_fib)\n  end\n  return nth_prime_fib[n]\n\
    end", "    -- x, y are the n-th and (n+1)-th Fibonacci numbers respectively.\n\
    \    local x, y = 1, 1\n    for i = 3, n do\n        x, y = y, x + y\n       \
    \ if not is_prime(y) then y = x end\n    end\n    return y\nend", "    local count\
    \ = 1\n    local n1 = 0\n    local n2 = 1\n    while count <= n do\n        local\
    \ tmp = n1 + n2\n        n1 = n2\n        n2 = tmp\n        if is_prime(n2) then\n\
    \            count = count + 1\n        end\n    end\n    return n2\nend", "\t\
    local prev2, prev1 = 1, 1\n\tlocal curr = 1\n\tlocal i = 1\n\twhile i < n do\n\
    \t\tcurr = prev1 + prev2\n\t\tif not is_prime(curr) then\n\t\t\tcurr = 0\n\t\t\
    end\n\t\tprev2 = prev1\n\t\tprev1 = curr\n\t\ti = i + 1\n\tend\n\treturn curr\n\
    end", "    assert(n > 0, \"prime_fib: n is less than 1.\")\n    assert(n % 1 ==\
    \ 0, \"prime_fib: n is not an integer.\")\n    local i = 1\n    local f = 1\n\
    \    local f1 = 1\n    local f2 = 2\n    while i < n do\n        if is_prime(f2)\
    \ then\n            i = i + 1\n        end\n        f = f1 + f2\n        f1 =\
    \ f2\n        f2 = f\n    end\n    return f2\nend", "\tlocal f = {}\n\tf[1] =\
    \ 1\n\tf[2] = 1\n\tlocal i = 3\n\twhile true do\n\t\tf[i] = f[i-1] + f[i-2]\n\t\
    \tif primes.isprime(f[i]) then\n\t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\t\
    return f[i]\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\nend", "\tlocal x, fib =\
    \ 2, 1\n\tfor i = 1, n - 1 do\n\t\tfib = fibonacci(x)\n\t\twhile not is_prime(fib)\
    \ do\n\t\t\tx = x + 1\n\t\t\tfib = fibonacci(x)\n\t\tend\n\t\tx = x + 1\n\tend\n\
    \treturn fib\nend", "    local i = 0\n    local x = 0\n    while i < n do\n  \
    \      x = x + 1\n        if isprime(x) and is_fib(x) then\n            i = i\
    \ + 1\n        end\n    end\n    return x\nend", "  local prev, cur = 0, 1\n \
    \ for _=1,n do\n    prev, cur = cur, prev + cur\n    if primes[cur] then return\
    \ cur end\n  end\nend", "    if n < 1 then return end\n    if n == 1 then return\
    \ 2 end\n    local f0, f1 = 2, 3\n    for i = 1, n - 1 do\n        local f2 =\
    \ f0 + f1\n        f0, f1 = f1, f2\n        if not is_prime(f1) then i = i - 1\
    \ end\n    end\n    return f1\nend", "\tlocal p = 1\n\tfor i = 1, n do\n\t\tlocal\
    \ f = fib_memo(i)\n\t\tif is_prime(f) then\n\t\t\tp = f\n\t\tend\n\tend\n\treturn\
    \ p\nend", "    local prime_fib = 0\n    local counter = 0\n    local i = 1\n\
    \    while counter ~= n do\n        if is_prime(fib(i)) then\n            counter\
    \ = counter + 1\n            prime_fib = fib(i)\n        end\n        i = i +\
    \ 1\n    end\n    return prime_fib\nend", "    return prime_fibs[n]\nend", " \
    \ local a, b = 0, 1\n  local primes = 0\n  for i = 1, math.huge do\n    a, b =\
    \ b, a + b\n    if is_prime(b) then\n      primes = primes + 1\n      if primes\
    \ == n then\n        return b\n      end\n    end\n  end\nend", "  return fib(n\
    \ - 1)\nend", "\tlocal t = fib(n)\n\twhile not t.is_prime do\n\t\tt = fib(n)\n\
    \t\tn = n + 1\n\tend\n\treturn t\nend", "\tlocal p = 0\n\tlocal f = 0\n\tlocal\
    \ a = 0\n\tlocal b = 1\n\tfor i = 1, n do\n\t\tf = a + b\n\t\ta = b\n\t\tb = f\n\
    \t\tif is_prime(f) then\n\t\t\tp = f\n\t\tend\n\tend\n\treturn p\nend", "    if\
    \ n < 2 then return n end\n    local fibs = {0, 1}\n    local i = 2\n    while\
    \ true do\n        fibs[i + 1] = fibs[i] + fibs[i - 1]\n        if is_prime(fibs[i\
    \ + 1]) then\n            n = n - 1\n            if n == 0 then\n            \
    \    return fibs[i + 1]\n            end\n        end\n        i = i + 1\n   \
    \ end\nend", "    local i, f, p = 0, 1, 1\n    while i < n do\n        if is_prime(f)\
    \ then\n            i = i + 1\n            p = f\n        end\n        f = f +\
    \ p\n    end\n    return p\nend", "\tlocal function is_prime(number)\n\t\tfor\
    \ i = 2, number-1 do\n\t\t\tif number % i == 0 then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\t\treturn true\n\tend", "  local a, b = 0, 1\n  local i = 1\n\
    \  while true do\n    a, b = b, a + b\n    if is_prime(b) then\n      i = i +\
    \ 1\n      if i == n then\n        return b\n      end\n    end\n  end\nend",
  "\tlocal i = 1\n\tlocal fibn = 1\n\twhile n > 0 do\n\t\tfibn = fibonacci(i)\n\t\t\
    if is_prime(fibn) then\n\t\t\tn = n - 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ fibn\nend", "    local f = 1\n    local a = 1\n    local b = 1\n    local j\
    \ = 1\n    local k = 1\n    while n > 0 do\n        j = j + 1\n        a, b =\
    \ b, a + b\n        k = k + 1\n        if is_prime(b) then\n            f = b\n\
    \            n = n - 1\n        end\n    end\n    return f, j, k\nend", "    if\
    \ n <= 0 then\n        return nil\n    end\n    local t = {1, 2}\n    while true\
    \ do\n        t[#t + 1] = t[#t - 1] + t[#t]\n        if n <= #t and is_prime(t[#t])\
    \ then\n            return t[#t]\n        end\n    end\nend", "  local first,\
    \ second = 1, 1\n  local i = 2\n  while true do\n    first, second = second, first\
    \ + second\n    if is_prime(second) then\n      i = i + 1\n      if i == n then\n\
    \        return second\n      end\n    end\n  end\nend", "\tlocal m = 3\n\tlocal\
    \ a, b = 2, 3\n\tlocal c = 0\n\twhile n > 0 do\n\t\tc = a + b\n\t\ta = b\n\t\t\
    b = c\n\t\tm = m + 1\n\t\tif is_prime(c) then\n\t\t\tn = n - 1\n\t\tend\n\tend\n\
    \treturn c, m\nend", "    local cnt = 0\n    local x = 0\n    local y = 1\n  \
    \  while cnt < n do\n        x, y = y, x + y\n        if is_prime(x) then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return x\nend", "\tif n ==\
    \ 1 then\n\t\treturn 2\n\telseif n == 2 then\n\t\treturn 3\n\tend\n\tlocal i =\
    \ 3\n\tlocal fn = 0\n\twhile i <= n do\n\t\tfn = fn + fnprev\n\t\tfnprev = fn\
    \ - fnprev\n\t\tif is_prime(fn) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ fn\nend", "  local prime_fib_arr = {0, 2, 3, 5, 13, 89, 233, 1597, 28657, 514229,\
    \ 433494437, 2971215073, 99194853094755497}\n  return prime_fib_arr[n]\nend",
  "\tif n < 1 then\n\t\treturn nil\n\tend\n\tlocal a, b = 0, 1\n\twhile n > 0 do\n\
    \t\ta, b = b, a + b\n\t\tif is_prime(b) then\n\t\t\tn = n - 1\n\t\tend\n\tend\n\
    \treturn a\nend", "    local idx = 1\n    local fn1 = 1\n    local fn2 = 2\n \
    \   while idx < n do\n        idx = idx + 1\n        fn2 = fn1 + fn2\n       \
    \ fn1 = fn2 - fn1\n        if is_prime(fn2) then\n            idx = idx + 1\n\
    \        end\n    end\n    return fn2\nend", "    local i = 1\n    while true\
    \ do\n        local fib = fibonacci(i)\n        if is_prime(fib) then\n      \
    \      n = n - 1\n            if n == 0 then\n                return fib\n   \
    \         end\n        end\n        i = i + 1\n    end\nend", "\tassert(type(n)\
    \ == \"number\", \"n should be a number\")\n\tassert(n >= 1, \"n should be >=\
    \ 1\")\n\tif n == 1 then\n\t\treturn 2\n\tend\n\tlocal a, b = 1, 2\n\tlocal k\
    \ = 1\n\twhile k < n do\n\t\ta, b = b, a + b\n\t\tif is_prime(b) then\n\t\t\t\
    k = k + 1\n\t\tend\n\tend\n\treturn b\nend", "    local f1, f2 = 0, 1\n    local\
    \ p = 1", "\tlocal fib\n\tlocal i = 0\n\t--fib = fibonacci()\n\tfib = prime_fibonacci()\n\
    \twhile true do\n\t\tlocal f = fib()\n\t\ti = i + 1\n\t\tif i == n then\n\t\t\t\
    return f\n\t\tend\n\tend\nend", "\tlocal f = fib()\n\tlocal i = 0\n\tlocal v\n\
    \trepeat\n\t\tv = f()\n\t\ti = i + 1\n\tuntil i == n and isprime(v)\n\treturn\
    \ v\nend", "  --[[\n  Strategy\n    - create a list of Fibonacci numbers.\n  \
    \  - using is_prime() check whether every nth number is prime.\n    - if it is\
    \ prime, return this number\n  ]]\n  local fib = {0, 1}\n  local i = 2\n  while\
    \ i <= n do\n    fib[i] = fib[i-1] + fib[i-2]\n    i = i + 1\n  end\n  local prime_fibonacci\
    \ = fib[n]\n  -- We need to return Fibonacci number here,\n  -- because Fibonacci\
    \ numbers sequence is not strictly increasing.\n  return prime_fibonacci\nend",
  "\tlocal t = 1\n\tlocal p = 1\n\tlocal pp = 1\n\tlocal f = 1\n\tlocal fp = 1\n\t\
    \n\twhile t < n do\n\t\tpp = p\n\t\tp = f\n\t\tt = t + 1\n\t\tf = fp + pp\n\t\t\
    fp = p\n\tend\n\t\n\treturn p\nend", "  local i, k, t\n  local j = 1", "    if\
    \ n == 1 then\n        return 2\n    elseif n == 2 then\n        return 3\n  \
    \  elseif n == 3 then\n        return 5\n    elseif n == 4 then\n        return\
    \ 13\n    elseif n == 5 then\n        return 89\n    elseif n == 6 then\n    \
    \    return 233\n    elseif n == 7 then\n        return 1597\n    elseif n ==\
    \ 8 then\n        return 28657\n    elseif n == 9 then\n        return 514229\n\
    \    elseif n == 10 then\n        return 433494437\n    elseif n == 11 then\n\
    \        return 2971215073\n    elseif n == 12 then\n        return 99194853094755497\n\
    \    else\n        error(\"This number cannot be calculated.\")\n    end\nend",
  "  local i, a, b = 1, 1, 1\n  repeat\n    i = i + 1\n    a, b = b, a + b\n  until\
    \ is_prime(b) and i == n\n  return b\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
