name: HumanEval_64_vowels_count
language: lua
prompt: "-- Write a function vowels_count which takes a string representing\n-- a\
  \ word as input and returns the number of vowels in the string.\n-- Vowels in this\
  \ case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only when\
  \ it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
  \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
  \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
  \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
  \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  local has_y = false\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if string.find(\"aeiou\", c) then\n      count = count\
    \ + 1\n    elseif c == \"y\" then\n      has_y = true\n    end\n  end\n  if has_y\
    \ and count == 0 then\n    count = 1\n  end\n  return count\nend", "    local\
    \ s = s:lower()\n    local i = 0\n    local count = 0\n    for i = 0, #s do\n\
    \        if string.find(\"aeiouy\", s:sub(i, i)) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  -- TODO: your code here\n\
    end", "   local vowels = { a = true, e = true, i = true, o = true, u = true }\n\
    \   local count = 0\n   local last = nil\n   for char in s:gmatch\".\" do\n  \
    \    if char == 'y' and last == nil then\n         count = count + 1\n      elseif\
    \ vowels[char] then\n         count = count + 1\n      end\n      last = char\n\
    \   end\n   return count\nend", "    local count = 0\n    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    for i=1, #s do\n        local c = s:sub(i, i)\n   \
    \     for j=1, #vowels do\n            if c == vowels[j] then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    if s:sub(-1)\
    \ == 'y' then\n        count = count + 1\n    end\n    return count\nend", " \
    \ local count = 0\n  local vowels = 'aeiouy'\n  for i = 1, #s do\n    local c\
    \ = s:sub(i, i)\n    if vowels:find(c) ~= nil then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "    local c = 0\n    for a, i in s:gmatch('[aeiou]')\
    \ do\n        c = c + 1\n    end\n    return c\nend", "    local vowels = {\n\
    \        a = true,\n        e = true,\n        i = true,\n        o = true,\n\
    \        u = true,\n        y = true\n    }\n    local count = 0\n    local last_char\
    \ = ''\n    for _, char in ipairs({s:byte(1, -1)}) do\n        if vowels[string.char(char)]\
    \ then\n            count = count + 1\n        end\n        last_char = string.char(char)\n\
    \    end\n    if last_char == 'y' then\n        count = count - 1\n    end\n \
    \   return count\nend", "    local count = 0\n    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    for _, char in ipairs(s:split('')) do\n        if char == 'y'\
    \ and #s == _ then\n            count = count + 1\n        elseif char:find('[aeiou]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nassert(vowels_count('doggy') == 3)\nassert(vowels_count('santa') == 2)\n\
    assert(vowels_count('tomato') == 3)\nassert(vowels_count('bad') == 1)\nassert(vowels_count('apostrophe')\
    \ == 4)", "    s = s:lower()\n    local count = 0\n    for i = 1, #s do\n    \
    \    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u' then\n            count = count + 1\n      \
    \  end\n    end\n    if s:sub(#s, #s) == 'y' then\n        count = count + 1\n\
    \    end\n    return count\nend", "    -- TODO: implement the function\nend",
  "    -- s = assert(s, 'expected a string')\n    s = tostring(s)\n    -- print(#s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vc = 0\n    for i = 1,\
    \ #s do\n        local c = s:sub(i, i)\n        for j = 1, #vowels do\n      \
    \      if c == vowels[j] then\n                vc = vc + 1\n            end\n\
    \        end\n    end\n    return vc\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        local ch = s:sub(i, i)\n        if ch == 'a' or ch == 'e'\
    \ or ch == 'i' or ch == 'o' or ch == 'u' then\n            count = count + 1\n\
    \        elseif ch == 'y' and i == #s then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    return s:gsub(\"[^aeiouy]\"\
    ,\"\"):len()\nend", end, "    -- ...\nend", end, "  -- your code here\nend\nassert(vowels_count('abracadabra')\
    \ == 5)\nassert(vowels_count('aeiou') == 5)\nassert(vowels_count('why') == 1)\n\
    assert(vowels_count('bye') == 2)\nassert(vowels_count('tomato') == 3)\nassert(vowels_count('potato')\
    \ == 3)\nassert(vowels_count('syzygy') == 3)\nassert(vowels_count('rhythm') ==\
    \ 2)\nassert(vowels_count('chlorophyll') == 4)\nassert(vowels_count('columbus')\
    \ == 3)\nassert(vowels_count('dictionary') == 4)\nassert(vowels_count('autonomous')\
    \ == 4)\nassert(vowels_count('volcano') == 3)\nassert(vowels_count('library')\
    \ == 3)\nassert(vowels_count('nth') == 1)\nassert(vowels_count('carpet') == 2)\n\
    assert(vowels_count('rhyme') == 2)\nassert(vowels_count('almanac') == 3)\nassert(vowels_count('alphabet')\
    \ == 3)\nassert(vowels_count('abacus') == 2)\nassert(vowels_count('pneumonia')\
    \ == 4)\nassert(vowels_count('pharmacy') == 3)\nassert(vowels_count('rhyme') ==\
    \ 2)\nassert(vowels_count('cyclops') == 3)\nassert(vowels_count('rhythm') == 2)\n\
    assert(vowels_count('quartz') == 2)\nassert(vowels_count('quadcopter') == 3)\n\
    assert(vowels_count('abracadabra') == 5)\nassert(vowels_count('pneumonoultramicroscopicsilicovolcanoconiosis')\
    \ == 10)\nassert(vowels_count('psychology') == 4)", "  local count = 0\n  for\
    \ i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' or\n       c == 'y' or (c == 'y' and i == #s) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local cnt =\
    \ 0\n  for c in s:gmatch(\"[aeiou]\") do\n    cnt = cnt + 1\n  end\n  if c ==\
    \ \"y\" then\n    cnt = cnt + 1\n  end\n  return cnt\nend\nassert(vowels_count(\"\
    luarocks\") == 3)\nassert(vowels_count(\"luarocksy\") == 4)\nassert(vowels_count(\"\
    a\") == 1)\nassert(vowels_count(\"hy\") == 1)\nassert(vowels_count(\"y\") == 1)\n\
    assert(vowels_count(\"\") == 0)\nassert(vowels_count(\"ghfds\") == 0)\nassert(vowels_count(\"\
    abcd\") == 1)\nassert(vowels_count(\"yello\") == 2)\nassert(vowels_count(\"yellow\"\
    ) == 3)\nassert(vowels_count(\"yellot\") == 2)", "  if not type(s) == \"string\"\
    \ then return 0 end\n  local num_vowels = 0\n  local vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n  for i=1, #s do\n    local c = s:sub(i, i)\n    for k, v\
    \ in pairs(vowels) do\n      if c == v then\n        num_vowels = num_vowels +\
    \ 1\n      end\n    end\n  end\n  return num_vowels\nend\nassert(vowels_count(\"\
    hello\") == 2)\nassert(vowels_count(\"hooohoohoy\") == 6)\nassert(vowels_count(\"\
    frooob\") == 2)\nassert(vowels_count(\"a\") == 1)\nassert(vowels_count(\"\") ==\
    \ 0)\nassert(vowels_count(3) == 0)", "    local count = 0\n    local last_char\
    \ = string.sub(s, -1)\n    if last_char == 'y' then\n        count = count + 1\n\
    \    end\n    for i = 1, #s do\n        local c = string.sub(s, i, i)\n      \
    \  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  local len = #s\n  for i = 1, len do\n    local curr = s:sub(i,\
    \ i)\n    if (curr == 'a' or curr == 'e' or curr == 'i' or curr == 'o' or curr\
    \ == 'u') or (curr == 'y' and i == len) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nprint(vowels_count('hello'))\nprint(vowels_count('world'))",
  "    return select(2, s:gsub(\"[aeiouyAEIOUY]\", \"\"))\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local counter = 0\n    for i = 1, #s do\n \
    \       if s[i] == 'y' and i == #s then\n            counter = counter + 1\n \
    \       elseif table.contains(vowels, s[i]) then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend", "    local n = 0\n    for\
    \ c in s:gmatch '.' do\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' or\n            c == 'y' and s:find(c, #s) == #s then\n        \
    \    n = n + 1\n        end\n    end\n    return n\nend\nassert(vowels_count 'hello'\
    \ == 2)\nassert(vowels_count 'mother' == 2)\nassert(vowels_count 'elementary'\
    \ == 4)", "  local v = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and #s == 1)\
    \ then\n      v = v + 1\n    end\n  end\n  return v\nend", "   -- TODO\nend",
  "    local n = 0\n    for _, c in pairs(s:lower():gmatch('[aeiouy]')) do\n     \
    \   n = n + 1\n    end\n    return n\nend", "    local vowels = {\n        ['a']\
    \ = true,\n        ['e'] = true,\n        ['i'] = true,\n        ['o'] = true,\n\
    \        ['u'] = true,\n        ['y'] = true,\n    }\n    local n_vowels = 0\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if vowels[c] then\n\
    \            n_vowels = n_vowels + 1\n        end\n    end\n    return n_vowels\n\
    end", "  -- your code here\nend", "    local ct = 0\n    local last = #s\n   \
    \ if last == 0 then return 0 end\n    local lastchar = s:sub(last, last)\n   \
    \ if lastchar == 'y' then\n        ct = ct + 1\n    end\n    for i = 1, last -\
    \ 1 do\n        local char = s:sub(i, i)\n        if char == 'a' or char == 'e'\
    \ or char == 'i' or char == 'o' or char == 'u' then\n            ct = ct + 1\n\
    \        end\n    end\n    return ct\nend", "    s = s:lower()\n    local count\
    \ = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i) == 'e'\
    \ or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n   \
    \         count = count + 1\n        end\n    end\n    if s:sub(#s, #s) == 'y'\
    \ then\n        count = count + 1\n    end\n    return count\nend", "\tlocal VOWELS\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal i = 0\n\tlocal c = 0\n\twhile i < #s do\n\
    \t\tlocal char = s:sub(i, i)\n\t\tif table.contains(VOWELS, char) then\n\t\t\t\
    c = c + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn c\nend\nassert( vowels_count('strawberry')\
    \ == 4 )\nassert( vowels_count('onion') == 3 )\nassert( vowels_count('fat') ==\
    \ 1 )\nassert( vowels_count('fry') == 1 )\nassert( vowels_count('blueberry') ==\
    \ 4 )\nassert( vowels_count('rhythm') == 2 )\nassert( vowels_count('yes') == 2\
    \ )\nassert( vowels_count('triple') == 2 )\nassert( vowels_count('eel') == 2 )\n\
    assert( vowels_count('red') == 1 )\nassert( vowels_count('happy') == 2 )\nassert(\
    \ vowels_count('berry') == 2 )\nassert( vowels_count('y') == 1 )\nassert( vowels_count('my')\
    \ == 1 )\nassert( vowels_count('cake') == 2 )\nassert( vowels_count('maple') ==\
    \ 2 )\nassert( vowels_count('honey') == 2 )", "    return nil\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n\
    \    elseif c == 'y' and i == #s then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  -- TODO: implement\nend\nassert(vowels_count(\"rabbit\"\
    ) == 2)\nassert(vowels_count(\"love\") == 2)\nassert(vowels_count(\"apple\") ==\
    \ 2)\nassert(vowels_count(\"pikachu\") == 3)\nassert(vowels_count(\"rabbitrabbitrabbit\"\
    ) == 8)\nassert(vowels_count(\"worl\") == 1)\nassert(vowels_count(\"yolll\") ==\
    \ 4)\nprint(\"Exercise 7 passed!\")", "    local count = 0\n    for i = 1, s:len()\
    \ do\n        local l = s:sub(i, i)\n        if l == 'a' or l == 'e' or l == 'i'\
    \ or l == 'o' or l == 'u' or\n           (l == 'y' and i == s:len()) then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \   -- TODO: implement this function\nend", "    local vowels = {a = true, e =\
    \ true, i = true, o = true, u = true}\n    local count = 0\n    local last = string.sub(s,\
    \ -1)\n    for i=1, #s do\n        local char = string.sub(s, i, i)\n        if\
    \ vowels[char] then\n            count = count + 1\n        end\n    end\n   \
    \ if last == 'y' then\n        count = count + 1\n    end\n    return count\n\
    end", "  local vowels = {['a'] = 1, ['e'] = 1, ['i'] = 1, ['o'] = 1, ['u'] = 1,\
    \ ['y'] = 1}\n  local result = 0\n  local last = string.sub(s, -1)\n  for i =\
    \ 1, #s - 1 do\n    if vowels[string.sub(s, i, i)] then\n      result = result\
    \ + 1\n    end\n  end\n  if vowels[last] then\n    result = result + 1\n  end\n\
    \  return result\nend", "    local vowels = 'aeiouy'\n    local counter = 0\n\
    \    for i = 1, #s do\n        if vowels:find(s:sub(i, i), 1, true) then\n   \
    \         counter = counter + 1\n        end\n    end\n    return counter\nend",
  "\tlocal vowel = 0\n\tlocal array = {}\n\tlocal pattern = \"[aeiouAEIOU]\"\n\tarray\
    \ = split(s)\n\tfor i=1, #array do\n\t\tfor ch in gmatch(array[i], pattern) do\n\
    \t\t\tvowel = vowel + 1\n\t\tend\n\tend\n\treturn vowel\nend", "    -- This is\
    \ not the best way to do this, but it is a way.\n    -- Try to use a loop and\
    \ keep a counter.\n    -- You will also need to check that the input is a string.\n\
    \    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    for\
    \ i = 1, #s do\n        if vowels[s:sub(i, i)] then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  return s:gsub(\"[^aeiouy]\"\
    , \"\"):len()\nend", "    -- ..\nend\nassert(vowels_count(\"bravo\") == 2)\nassert(vowels_count(\"\
    oscar\") == 3)\nassert(vowels_count(\"yankee\") == 3)\nassert(vowels_count(\"\
    yankee1\") == 3)\nassert(vowels_count(\"yankee11\") == 4)\nassert(vowels_count(\"\
    yankee13\") == 5)", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        for _, vowel\
    \ in ipairs(vowels) do\n            if c == vowel then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    if s:sub(-1) == 'y'\
    \ then\n        count = count + 1\n    end\n    return count\nend", "   return\
    \ string.gsub(s, \"[aeiouy]\", \"\")\nend", "    local count = 0\n    for i =\
    \ 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            count = count + 1\n     \
    \   elseif c == 'y' and i == #s then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for char in s:gmatch('[aeiouy]')\
    \ do\n        count = count + 1\n    end\n    return count\nend", "   -- your\
    \ code here\nend", "  local vowels = 0\n  local vowels_except_y = { 'a', 'e',\
    \ 'i', 'o', 'u' }\n  for i = 1, #s do\n    if vowels_except_y[s:sub(i, i)] then\n\
    \      vowels = vowels + 1\n    elseif s:sub(i, i) == 'y' and i == #s then\n \
    \     vowels = vowels + 1\n    end\n  end\n  return vowels\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count = count\
    \ + 1\n        elseif c == 'y' and i == #s then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nassert(vowels_count('abc') == 1)\n\
    assert(vowels_count('abcdef') == 2)\nassert(vowels_count('abcdefgh') == 3)\nassert(vowels_count('abcdefghi')\
    \ == 4)\nassert(vowels_count('abcdefghij') == 5)\nassert(vowels_count('abcdefghijk')\
    \ == 5)\nassert(vowels_count('bcdefghijk') == 0)\nassert(vowels_count('aby') ==\
    \ 2)\nassert(vowels_count('abyd') == 2)\nassert(vowels_count('abyde') == 3)\n\
    assert(vowels_count('abydef') == 3)\nassert(vowels_count('abydefg') == 4)\nassert(vowels_count('abydefgh')\
    \ == 4)\nassert(vowels_count('abydefghi') == 5)\nassert(vowels_count('abydefghij')\
    \ == 5)\nassert(vowels_count('abydefghijk') == 5)\nassert(vowels_count('bcyd')\
    \ == 1)\nassert(vowels_count('bcyde') == 2)\nassert(vowels_count('bcydef') ==\
    \ 2)\nassert(vowels_count('bcydefg') == 3)\nassert(vowels_count('bcydefgh') ==\
    \ 3)\nassert(vowels_count('bcydefghi') == 4)\nassert(vowels_count('bcydefghij')\
    \ == 4)\nassert(vowels_count('bcydefghijk') == 4)\nassert(vowels_count('bcy')\
    \ == 1)\nassert(", "    if #s == 0 then\n        return 0\n    elseif #s == 1\
    \ then\n        if string.find(\"aeiouy\", s) then\n            return 1\n   \
    \     else\n            return 0\n        end\n    else\n        if string.find(\"\
    aeiouy\", s:sub(1, 1)) then\n            return 1 + vowels_count(s:sub(2))\n \
    \       else\n            return vowels_count(s:sub(2))\n        end\n    end\n\
    end", "  -- your code here\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\t\
    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == #s) then\n\t\
    \t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local cnt =\
    \ 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n           (c == 'y' and\
    \ i == #s) then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end", "  -- your code here\nend", "  return #s:gsub(\"[aeiouyAEIOUY]\", \"\")\n\
    end\nprint(\"\\nVowels count\")\nprint(vowels_count(\"Lua\"))\nprint(vowels_count(\"\
    Lua is Awesome\"))\nprint(vowels_count(\"Why Lua is awesome?\"))\nprint(vowels_count(\"\
    That's why!\"))\nprint(vowels_count(\"Haskell\"))\nprint(vowels_count(\"Haskell\
    \ is awesome\"))\nprint(vowels_count(\"Why Haskell is awesome?\"))\nprint(vowels_count(\"\
    That's why!\"))", "    local r = 0\n    for i = 1, string.len(s) do\n        if\
    \ 'aeiouyAEIOUY'\n            :find(string.sub(s, i, i), 1, true) then\n     \
    \       r = r + 1\n        end\n    end\n    return r\nend\nassert(vowels_count('aeiouy')\
    \ == 6)\nassert(vowels_count('aeiou') == 5)\nassert(vowels_count('aeiou') == 5)\n\
    assert(vowels_count('abcdefghijk') == 3)\nassert(vowels_count('edabit') == 3)\n\
    assert(vowels_count('developer') == 4)\nassert(vowels_count('EOI') == 2)\nassert(vowels_count('lifeisshort')\
    \ == 3)\nassert(vowels_count('love') == 2)\nassert(vowels_count('sky') == 1)\n\
    assert(vowels_count('stranger') == 3)\nassert(vowels_count('trybe') == 3)\nassert(vowels_count('why')\
    \ == 0)\nassert(vowels_count('Yellow') == 2)", "    local vowels = 'aeiouy'\n\
    \    local count = 0\n    for i=1,#s do\n        if vowels:find(s:sub(i,i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for c in s:gmatch('[aeiouy]') do\n    count = count + 1\n\
    \  end\n  if count == 0 and s:sub(-1, -1) == 'y' then\n    count = 1\n  end\n\
    \  return count\nend\nassert(vowels_count('hello') == 2)\nassert(vowels_count('happy')\
    \ == 2)\nassert(vowels_count('happi') == 2)\nassert(vowels_count('happyy') ==\
    \ 3)\nassert(vowels_count('e') == 1)\nassert(vowels_count('y') == 1)\nassert(vowels_count('xyz')\
    \ == 0)", "  --\nend", "    local total = 0\n    local vowel = {a = true, e =\
    \ true, i = true, o = true, u = true, y = true}\n    for i = 1, #s do\n      \
    \  if vowel[s:sub(i, i)] then\n            total = total + 1\n        end\n  \
    \  end\n    return total\nend\nassert(vowels_count(\"air\") == 2)\nassert(vowels_count(\"\
    berry\") == 3)\nassert(vowels_count(\"\") == 0)", end, "  -- Your code here\n\
    end", end, "    if string.len(s) == 0 then\n        return 0\n    elseif string.find(s,\
    \ \"a\") == 1 then\n        return 1 + vowels_count(string.sub(s, 2))\n    elseif\
    \ string.find(s, \"e\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"i\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"o\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"u\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"y\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    else\n        return vowels_count(string.sub(s, 2))\n    end\nend",
  "  local c = 0\n  for i = 1, #s do\n    if (s:sub(i, i) == 'a' or s:sub(i, i) ==\
    \ 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\n \
    \     (s:sub(i, i) == 'y' and i == #s)) then\n      c = c + 1\n    end\n  end\n\
    \  return c\nend\nassert(vowels_count('abracadabra') == 5)\nassert(vowels_count('ate')\
    \ == 2)\nassert(vowels_count('apple') == 2)\nassert(vowels_count('appley') ==\
    \ 3)\nassert(vowels_count('lemon') == 2)\nassert(vowels_count('plethora') == 3)\n\
    assert(vowels_count('room') == 2)\nassert(vowels_count('the') == 1)\nassert(vowels_count('typhoon')\
    \ == 3)\nassert(vowels_count('you') == 2)\nassert(vowels_count('your') == 2)\n\
    assert(vowels_count('youth') == 2)\nassert(vowels_count('youtube') == 2)\nassert(vowels_count('zoom')\
    \ == 1)", "  -- PLACE YOUR CODE HERE\n  local count = 0\n  for i = 1, string.len(s)\
    \ do\n    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or\
    \ s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == string.len(s))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "   local\
    \ count = 0\n   for _, c in s:gmatch '.' do\n      if c:match '[aeiou]y?' then\n\
    \         count = count + 1\n      end\n   end\n   return count\nend", "  local\
    \ vowels = {a = true, e = true, i = true, o = true, u = true}\n  local count =\
    \ 0\n  for i = 1, #s do\n    local letter = s:sub(i, i)\n    if vowels[letter]\
    \ then\n      count = count + 1\n    end\n  end\n  local last_letter = s:sub(-1)\n\
    \  if last_letter == 'y' then\n    count = count + 1\n  end\n  return count\n\
    end", "\tlocal n = 0", "  -- your code here\nend", "    local s = s:lower()\n\
    \    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ then\n            count = count + 1\n        end\n    end\n    if s:sub(#s,\
    \ #s) == 'y' then\n        count = count + 1\n    end\n    return count\nend",
  "    -- TODO: Write the function\nend", "    local vowels = {['a'] = true, ['e']\
    \ = true, ['i'] = true, ['o'] = true, ['u'] = true}\n    local count = 0\n   \
    \ for i = 1, string.len(s) do\n        if vowels[string.sub(s, i, i)] then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   if #s == 0 then\n        return 0\n    elseif s:find(\"[aeiouy]\") then\n\
    \        return 1 + vowels_count(s:sub(s:find(\"[aeiouy]\") + 1))\n    else\n\
    \        return 0\n    end\nend", "    local vowels = {a = true, e = true, i =\
    \ true, o = true, u = true}\n    local count = 0\n    local last = string.sub(s,\
    \ string.len(s))", "  return #s:gsub(\"[^aeiouy]\", \"\")\nend", "  local v =\
    \ 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or\n      (c == 'y' and i == #s) then\n\
    \      v = v + 1\n    end\n  end\n  return v\nend\nassert(vowels_count(\"hello\"\
    ) == 2)\nassert(vowels_count(\"world\") == 1)\nassert(vowels_count(\"motorcycles\"\
    ) == 4)\nassert(vowels_count(\"fly\") == 1)\nassert(vowels_count(\"dry\") == 1)\n\
    assert(vowels_count(\"play\") == 2)\nassert(vowels_count(\"stay\") == 2)", " \
    \ -- if s == \"\" then return 0 end\n  local n = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\"\
    \ or c == \"u\" or\n      (c == \"y\" and i == #s) then\n      n = n + 1\n   \
    \ end\n  end\n  return n\nend\nassert(vowels_count(\"\") == 0)\nassert(vowels_count(\"\
    ii\") == 2)\nassert(vowels_count(\"lid\") == 1)\nassert(vowels_count(\"not a word\"\
    ) == 1)\nassert(vowels_count(\"wonderful\") == 4)\nassert(vowels_count(\"empty\
    \ vowels\") == 2)\nassert(vowels_count(\"wry\") == 1)", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local count = 0\n    for _, v in ipairs(vowels) do\n\
    \        for w in s:gmatch(v) do\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nassert(vowels_count('amor') == 2)\nassert(vowels_count('trem')\
    \ == 1)\nassert(vowels_count('pudim') == 3)", "  local count = 0\n  for c in s:gmatch('.')\
    \ do\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n   \
    \   (c == 'y' and s:sub(s:len()) == 'y') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for c in s:gmatch(\".\") do\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       c\
    \ == 'y' and s:sub(#s) == 'y' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nprint(vowels_count(\"hello world\"))\nprint(vowels_count(\"\
    sammy\"))", "  local c = 0\n  for i = 1, #s do\n    local c1 = s:sub(i, i)\n \
    \   if c1 == 'a' or c1 == 'e' or c1 == 'i' or c1 == 'o' or c1 == 'u' or\n    \
    \   c1 == 'y' and i == #s then\n      c = c + 1\n    end\n  end\n  return c\n\
    end", "  -- TODO\nend", "   local result = 0\n   local i = 1\n   while i <= #s\
    \ do\n      local c = s:sub(i, i)\n      if c == 'a' or c == 'e' or c == 'i' or\
    \ c == 'o' or c == 'u' then\n         result = result + 1\n      elseif c == 'y'\
    \ and i == #s then\n         result = result + 1\n      end\n      i = i + 1\n\
    \   end\n   return result\nend", "    local c = 0\n    for i = 1, string.len(s)\
    \ do\n        if string.sub(s, i, i) == 'a' or string.sub(s, i, i) == 'e' or string.sub(s,\
    \ i, i) == 'i' or string.sub(s, i, i) == 'o' or string.sub(s, i, i) == 'u' or\
    \ string.sub(s, i, i) == 'y' then\n            c = c + 1\n        end\n    end\n\
    \    return c\nend", "    if string.len(s) == 0 then\n        return 0\n    elseif\
    \ string.find(\"aeiouy\", string.sub(s, string.len(s), string.len(s))) then\n\
    \        return 1 + vowels_count(string.sub(s, 1, string.len(s) - 1))\n    else\n\
    \        return vowels_count(string.sub(s, 1, string.len(s) - 1))\n    end\nend",
  "  --\nend", "end\nassert(vowels_count(\"word\") == 1)\nassert(vowels_count(\"attitude\"\
    ) == 4)\nassert(vowels_count(\"streamline\") == 4)\nassert(vowels_count(\"abracadabra\"\
    ) == 5)\nassert(vowels_count(\"yolo\") == 2)", "\tlocal n = 0\n\tfor i = 1, #s\
    \ do\n\t\tlocal c = s:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' or\n\t\t   (c == 'y' and i == #s) then\n\t\t\tn = n + 1\n\
    \t\tend\n\tend\n\treturn n\nend\nassert(vowels_count(\"hello\") == 2)\nassert(vowels_count(\"\
    toto\") == 2)\nassert(vowels_count(\"tetu\") == 2)\nassert(vowels_count(\"titi\"\
    ) == 2)\nassert(vowels_count(\"tyty\") == 2)\nassert(vowels_count(\"yoyo\") ==\
    \ 3)", "  local counter = 0\n  for i,v in ipairs(s) do\n    if v == 'a' or v ==\
    \ 'e' or v == 'i' or v == 'o' or v == 'u' or v == 'y' then\n      counter = counter\
    \ + 1\n    end\n  end\n  return counter\nend", "\tlocal count = 0\n\tfor char\
    \ in s:gmatch(\"%a\") do\n\t\tif char == \"a\" or char == \"e\" or char == \"\
    i\" or char == \"o\" or char == \"u\" or char == \"y\" then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "    local vowels = {\n        ['a']\
    \ = true,\n        ['e'] = true,\n        ['i'] = true,\n        ['o'] = true,\n\
    \        ['u'] = true,\n        ['y'] = true,\n    }\n    local count = 0\n  \
    \  for c in s:gmatch(\".\") do\n        if vowels[c] then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "\tlocal count = 0\n\
    \tlocal vowel = {a=1, e=1, i=1, o=1, u=1, y=1}\n\tlocal last_char = string.sub(s,\
    \ string.len(s))\n\tfor i = 1, string.len(s) do\n\t\tif vowel[string.sub(s, i,\
    \ i)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif vowel[last_char] then\n\
    \t\tcount = count + 1\n\tend\n\treturn count\nend", "  local count = 0\n  local\
    \ vowels = 'aeiouy'\n  for i = 1, #s do\n    local letter = s:sub(i, i)\n    if\
    \ vowels:find(letter) then\n      count = count + 1\n    end\n  end\n  if count\
    \ == 0 and s:sub(-1) == 'y' then\n    count = 1\n  end\n  return count\nend",
  "  s = s:lower()\n  local i = 0\n  while i < #s do\n    local ch = s:sub(i, i)\n\
    \    if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' or\n   \
    \   (ch == 'y' and i == #s - 1) then\n      return true\n    end\n    i = i +\
    \ 1\n  end\n  return false\nend", "    local count = 0\n    local end_with_y =\
    \ string.sub(s, -1) == 'y'\n    for i=1,#s do\n        local c = string.sub(s,\
    \ i, i)\n        if (c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u')\
    \ or\n           (c == 'y' and i == #s) or\n           (c == 'y' and end_with_y)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local result = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n  \
    \  for i = 1, #s do\n        local c = s:sub(i, i)\n        if (vowels[c] or (c\
    \ == 'y' and i == #s)) then\n            result = result + 1\n        end\n  \
    \  end\n    return result\nend\nassert(vowels_count('ab') == 1)\nassert(vowels_count('aeiouy')\
    \ == 6)\nassert(vowels_count('abcd') == 1)\nassert(vowels_count('xyz') == 0)\n\
    assert(vowels_count('hello') == 2)\nassert(vowels_count('hamburger') == 3)\nassert(vowels_count('yep')\
    \ == 1)", "    local vowels = 'aeiouy'\n    local count = 0\n    for ch in s:gmatch('.')\
    \ do\n        if vowels:find(ch) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    -- Write code here to return number\
    \ of vowels in s\nend", "\t-- your code here\n\tif s:sub(-1) == \"y\" then\n\t\
    \treturn #(s:gsub(\"[aeiou]\", \"\"))\n\telse\n\t\treturn #(s:gsub(\"[aeiouy]\"\
    , \"\"))\n\tend\nend", "  -- Your solution here\nend", "   local cnt = 0\n   for\
    \ i = 1, #s do\n      if string.find(\"aeiouy\", string.sub(s, i, i)) then\n \
    \        cnt = cnt + 1\n      end\n   end\n   return cnt\nend\nassert(vowels_count(\"\
    abracadabra\") == 5)\nassert(vowels_count(\"rozy\") == 2)\nassert(vowels_count(\"\
    abracadabry\") == 6)", "   -- TODO:\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local c = 0\n    for i = 1, #s do\n        local ch = s:sub(i,\
    \ i)\n        for _, v in ipairs(vowels) do\n            if ch == v then\n   \
    \             c = c + 1\n            end\n        end\n    end\n    if c > 0 and\
    \ s:sub(-1) == 'y' then\n        c = c + 1\n    end\n    return c\nend", "   \
    \ return s:gsub(\"[^aeiouy]\",\"\"):len()\nend", "  local function is_vowel(c)\n\
    \    if string.find(\"aeiouy\", c) then\n      return true\n    else\n      return\
    \ false\n    end\n  end\n  local count = 0\n  for i = 1, #s do\n    if is_vowel(s:sub(i,\
    \ i)) then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local c = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend", "    -- TODO: body goes here.\nend", "  local result\
    \ = 0\n  for i = 1, string.len(s) do\n    if (string.find(\"aeiouy\", string.sub(s,\
    \ i, i)) ~= nil) then\n      result = result + 1\n    end\n  end\n  return result\n\
    end", "  local i, count = 1, 0\n  while i <= #s do\n    local letter = s:sub(i,\
    \ i)\n    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o'\
    \ or letter == 'u' or letter == 'y' then\n      count = count + 1\n    end\n \
    \   i = i + 1\n  end\n  return count\nend", "  return\nend", "\tlocal n = 0\n\t\
    local t = {}\n\tfor w in s:gmatch('[aeiouy]') do\n\t\tif t[w] then\n\t\t\tn =\
    \ n + 1\n\t\t\tt[w] = nil\n\t\telse\n\t\t\tt[w] = true\n\t\tend\n\tend\n\tif s:sub(-1)\
    \ == 'y' then\n\t\tn = n + 1\n\tend\n\treturn n\nend", "  return s:gsub(\"[^aeiouy]\"\
    , \"\"):len()\nend", "    -- your code goes here\nend\nassert(vowels_count(\"\
    banana\") == 3)\nassert(vowels_count(\"radical\") == 3)\nassert(vowels_count(\"\
    hysterectomy\") == 5)\nassert(vowels_count(\"yttrium\") == 2)\nassert(vowels_count(\"\
    rhythm\") == 2)\nassert(vowels_count(\"polyphony\") == 4)\nassert(vowels_count(\"\
    hippopotamus\") == 5)\nassert(vowels_count(\"my\") == 1)\nassert(vowels_count(\"\
    by\") == 1)\nassert(vowels_count(\"syzygy\") == 3)", "  local vowels = {a = 1,\
    \ e = 1, i = 1, o = 1, u = 1, y = 1}\n  local n = 0\n  for i = 1, #s do\n    if\
    \ vowels[s:sub(i, i)] ~= nil then\n      n = n + 1\n    end\n  end\n  return n\n\
    end\nprint(vowels_count(\"snappysam\"))", "  local chars = {}\n  for c in s:gmatch(\"\
    %a\") do\n    table.insert(chars, c)\n  end\n  local n = 0\n  local is_vowel =\
    \ function(c)\n    return c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u'\n  end\n  local is_end_vowel = function(c)\n    return c == 'y'\n  end\n\
    \  for i = 1, #chars do\n    if is_vowel(chars[i]) then\n      n = n + 1\n   \
    \ elseif is_end_vowel(chars[i]) and i == #chars then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend\nprint(vowels_count(\"hello\"))\nprint(vowels_count(\"\
    hybrid\"))\nprint(vowels_count(\"xyz\"))\nprint(vowels_count(\"aioue\"))\nprint(vowels_count(\"\
    \"))\nprint(vowels_count(\"rhythm\"))\nprint(vowels_count(\"why\"))\nprint(vowels_count(\"\
    y\"))\nprint(vowels_count(\"Rovaniemi\"))\nprint(vowels_count(\"aeiouy\"))\nprint(vowels_count(\"\
    aeiouyaeiouy\"))\nprint(vowels_count(\"aeiouyaeiouyaeiouy\"))", "  local vowels\
    \ = {a = true, e = true, i = true, o = true, u = true}\n  local count = 0\n  for\
    \ c in s:gmatch('.') do\n    if vowels[c] and (c ~= 'y' or c == s:sub(-1)) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    return s:gsub(\"\
    [^aeiouy]\",\"\"):len()\nend\nassert(vowels_count(\"hello\") == 2)\nassert(vowels_count(\"\
    yellow\") == 2)\nassert(vowels_count(\"science\") == 2)\nassert(vowels_count(\"\
    programming\") == 4)", "  local total = 0\n  for _, v in utf8.codes(s) do\n  \
    \  if v == 97 or v == 101 or v == 105 or v == 111 or v == 117 then\n      total\
    \ = total + 1\n    end\n  end\n  return total\nend", "  -- your code here\nend",
  "    count = 0\n    vowels = \"aeiouy\"\n    for i = 1, #s do\n        if string.find(vowels,\
    \ string.sub(s, i, i)) ~= nil then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  -- Implement me\nend", "\t-- body\nend",
  "    local count = 0\n    local last = string.sub(s, -1)\n    for i = 1, string.len(s)\
    \ do\n        local c = string.sub(s, i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            count = count + 1\n     \
    \   end\n    end\n    if last == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend", "end\ntest_vowels_count()", "    -- TODO\nend", end,
  "    local counter = 0\n    local str = string.lower(s)\n    for i=1,#str do\n \
    \       if str:sub(i,i) == 'a' or str:sub(i,i) == 'e' or str:sub(i,i) == 'i' or\
    \ str:sub(i,i) == 'o' or str:sub(i,i) == 'u' or str:sub(i,i) == 'y' then\n   \
    \         counter = counter + 1\n        end\n    end\n    return counter\nend",
  "  local count = 0\n  local y_vowel = false\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c == 'y' then\n      if i == #s then\n        y_vowel = true\n  \
    \    end\n    elseif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n      count = count + 1\n    end\n  end\n  if y_vowel then\n    count\
    \ = count + 1\n  end\n  return count\nend", "    -- vowels are 'a', 'e', 'i',\
    \ 'o', 'u', 'y'\n    -- but 'y' is a vowel only when it is at the end of the given\
    \ word\n    -- e.g., 'sky' is a word, but not 'sly'\n    -- only one 'y' at the\
    \ end of the word is counted\n    -- e.g., 'sky' has one vowel, but not 'skyy'",
  "  -- Fill in your code here.\nend\nprint(vowels_count(\"Hello\")) -- 2\nprint(vowels_count(\"\
    function\")) -- 3", "  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend", "  -- STUB:\
    \ replace this line with your code\n  return 0\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local number = 0\n    for i=1, string.len(s) do\n \
    \       if (s:sub(i, i) == 'y' and i == string.len(s)) or\n            table.index_of(vowels,\
    \ s:sub(i, i)) > 0 then\n            number = number + 1\n        end\n    end\n\
    \    return number\nend", "    local vowels = {['a'] = true, ['e'] = true, ['i']\
    \ = true, ['o'] = true, ['u'] = true}\n    local l = #s\n    local count = 0\n\
    \    for i = 1, l do\n        local ch = s:sub(i, i)\n        if vowels[ch] then\n\
    \            count = count + 1\n        end\n    end\n    if (count > 0) and (s:sub(l,\
    \ l) == 'y') then\n        count = count + 1\n    end\n    return count\nend",
  "  -- TODO: implement function here\nend\nassert(vowels_count(\"aeiou\") == 5)\n\
    assert(vowels_count(\"aeiouy\") == 6)\nassert(vowels_count(\"aeiouy.\") == 6)\n\
    assert(vowels_count(\"bcdfghjkl\") == 0)\nassert(vowels_count(\"bcdfghjkly\")\
    \ == 1)\nassert(vowels_count(\"bcd fghjkl\") == 0)\nassert(vowels_count(\"\")\
    \ == 0)", "    local vowels = {a = true, e = true, i = true, o = true, u = true}\n\
    \    local sum = 0\n    for c in s:gmatch('.') do\n        if vowels[c] then\n\
    \            sum = sum + 1\n        end\n    end\n    if s:sub(-1) == 'y' then\n\
    \        sum = sum + 1\n    end\n    return sum\nend", "  -- body\nend", "  --[[\n\
    \  Variables:\n  s: given string\n  vowel_count: number of vowels\n  ]]\n  vowel_count\
    \ = 0\n  --[[\n  Helper functions:\n  is_vowel: given a letter and string, check\
    \ if the letter is a vowel\n  or the end letter of the string\n  ]]\n  function\
    \ is_vowel(letter, s)\n    --[[\n    Variables:\n    bool: true or false indicating\
    \ whether letter is a vowel\n    ]]\n    bool = false\n    -- if letter is a vowel\
    \ and it is not the end letter of the string\n    if (letter == 'a' or letter\
    \ == 'e' or letter == 'i' or letter == 'o' or letter == 'u') and letter ~= s[#s]\
    \ then\n      bool = true\n    -- if letter is 'y' and it is the end letter of\
    \ the string\n    elseif letter == 'y' and letter == s[#s] then\n      bool =\
    \ true\n    end\n    return bool\n  end\n  -- iterate through every letter in\
    \ string\n  for i = 1,#s do\n    if is_vowel(s:sub(i,i), s) then\n      vowel_count\
    \ = vowel_count + 1\n    end\n  end\n  return vowel_count\nend\nassert(vowels_count(\"\
    coderbyte\") == 3)\nassert(vowels_count(\"y\") == 1)\nassert(vowels_count(\"hello\"\
    ) == 2)\nassert(vowels_count(\"coderbytey\") == 4)\nassert(vowels_count(\"coderbytex\"\
    ) == 3)", "\tlocal count = 0\n\tfor c in s:gmatch(\"[aeiouy]\") do\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend", "  return #s:lower():gsub(\"[^aeiouy]\"\
    , \"\")\nend", "  -- body\nend", "    if s == \"\" then\n        return 0\n  \
    \  elseif not string.find(s, \"[aeiouy]\") then\n        return 0\n    else\n\
    \        local i = string.find(s, \"[aeiouy]\")\n        local c = string.sub(s,\
    \ i, i)\n        if i == string.len(s) then\n            return 1 + vowels_count(string.sub(s,\
    \ 1, i - 1))\n        else\n            return vowels_count(string.sub(s, 1, i\
    \ - 1)) + vowels_count(string.sub(s, i + 1))\n        end\n    end\nend", "  \
    \ local count = 0\n   for c in s:gmatch(\".\") do\n      if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or\n         c == 'y' and (c == string.sub(s,\
    \ -1)) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end\nprint(\"vowels_count('vowels'):\", vowels_count('vowels'))\nprint(\"vowels_count('fry'):\"\
    , vowels_count('fry'))\nprint(\"vowels_count('fly'):\", vowels_count('fly'))",
  "    --[[\n    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local count = 0\n\
    \    for i = 1, #s do\n        for j = 1, #vowels do\n            if s:sub(i,\
    \ i) == vowels[j] then\n                count = count + 1\n            end\n \
    \       end\n    end\n    return count\n    --]]\n    return (s:gsub('[^aeiouy]',\
    \ ''):gsub('y$', ''):len())\nend", "  local count = 0\n  -- TODO: write your code\
    \ here\n  return count\nend", "\treturn #s:gsub(\"[^aeiouy]\", \"\")\nend", " \
    \   return #s:gsub(\"[^aeiouy]\", \"\")\nend", "    local c = 0\n    for x in\
    \ s:gmatch(\"[aeiouy]\") do\n        c = c + 1\n    end\n    if (s:sub(-1) ==\
    \ \"y\") then\n        c = c + 1\n    end\n    return c\nend", "\treturn string.len(string.gsub(s,\
    \ \"[^aeiouy]\", \"\"))\nend", "  -- your code here\nend", "  -- Add your code\
    \ here\n  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nassert(vowels_count(\"\
    aa\") == 2)\nassert(vowels_count(\"aeiou\") == 5)\nassert(vowels_count(\"ab\"\
    ) == 1)\nassert(vowels_count(\"cy\") == 1)\nassert(vowels_count(\"c\") == 0)\n\
    assert(vowels_count(\"\") == 0)", "    local n = 0\n    for i = 1, #s do\n   \
    \     local c = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' or\n        (c == 'y' and i == #s) then\n            n =\
    \ n + 1\n        end\n    end\n    return n\nend", "    s = s:lower()\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' then\n\
    \            count = count + 1\n        end\n    end\n    if count == 0 then\n\
    \        return 0\n    elseif s:sub(#s, #s) == 'y' then\n        return count\
    \ + 1\n    else\n        return count\n    end\nend", "\tlocal vowels = \"aeiouy\"\
    \n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tlocal letter = s:sub(i, i)\n\t\t\
    if vowels:find(letter) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if i == #s and c == 'y' then\n      count = count + 1\n    elseif c\
    \ == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nassert(vowels_count(\"berry\") ==\
    \ 3)\nassert(vowels_count(\"beautiful\") == 3)\nassert(vowels_count(\"beauty\"\
    ) == 3)", "\tlocal vowels = {[\"a\"] = 1, [\"e\"] = 1, [\"i\"] = 1, [\"o\"] =\
    \ 1, [\"u\"] = 1, [\"y\"] = 1}\n\tlocal count = 0\n\tfor i=1,#s do\n\t\tlocal\
    \ c = s:sub(i,i)\n\t\tif i == #s and c == \"y\" then\n\t\t\tcount = count + 1\n\
    \t\telseif vowels[c] == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  -- YOUR CODE HERE\n  local vowel_count = 0\n  for i=1,#s do\n\
    \    local c = s:sub(i,i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' or (c == 'y' and i == #s) then\n      vowel_count = vowel_count\
    \ + 1\n    end\n  end\n  return vowel_count\nend", "   local vowel_count = 0\n\
    \   for i = 1, s:len() do\n      local char = s:sub(i, i)\n      if char == 'a'\
    \ or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n         vowel_count\
    \ = vowel_count + 1\n      elseif char == 'y' and i == s:len() then\n        \
    \ vowel_count = vowel_count + 1\n      end\n   end\n   return vowel_count\nend\n\
    assert(vowels_count('caterpillar') == 4)\nassert(vowels_count('moo') == 2)\nassert(vowels_count('good')\
    \ == 2)\nassert(vowels_count('gym') == 1)\nassert(vowels_count('combinatorics')\
    \ == 4)\nassert(vowels_count('y') == 1)\nassert(vowels_count('xy') == 0)\nassert(vowels_count('yy')\
    \ == 1)\nprint 'OK'", "  local n = 0\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n \
    \     n = n + 1\n    elseif c == 'y' and i == #s then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "  --\nend", "    local count = 0\n    for _, c in utf8.codes(s)\
    \ do\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c ==\
    \ \"u\" or c == \"y\" then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local vowels = {['a'] = true, ['e'] = true, ['i']\
    \ = true, ['o'] = true, ['u'] = true}\n  local count = 0\n  for _, c in utf8.codes(s)\
    \ do\n    local char = utf8.char(c)\n    if vowels[char] then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local cnt = 0\n  for i = 1, #s\
    \ do\n    local char = s:sub(i, i)\n    if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' or\n       (char == 'y' and i == #s) then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nassert(vowels_count('hello')\
    \ == 2)\nassert(vowels_count('there') == 2)\nassert(vowels_count('yay') == 2)\n\
    assert(vowels_count('rhythm') == 0)\nassert(vowels_count('envelope') == 3)", end,
  "    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if\
    \ c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            n\
    \ = n + 1\n        elseif c == 'y' and i == #s then\n            n = n + 1\n \
    \       end\n    end\n    return n\nend", "    local count = 0\n    for _, c in\
    \ pairs{'a', 'e', 'i', 'o', 'u', 'y'} do\n        for n in s:gmatch(c) do\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nassert(vowels_count('dog')\
    \ == 1)\nassert(vowels_count('elephant') == 4)\nassert(vowels_count('papyrology')\
    \ == 7)", end, "    local number_of_vowels = 0\n    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local last_symbol = string.sub(s, -1)\n    for i = 1, #s\
    \ do\n        for _, vowel in ipairs(vowels) do\n            if string.sub(s,\
    \ i, i) == vowel or (string.sub(s, i, i) == 'y' and i == #s) then\n          \
    \      number_of_vowels = number_of_vowels + 1\n            end\n        end\n\
    \    end\n    return number_of_vowels\nend", "  local v = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local count = 0\n  for i = 1, string.len(s) do\n    if (string.match(s,\
    \ '[aeiou]') == s[i]) or\n      (string.match(s, '[aeiou]') == s[i - 1] and s[i]\
    \ == 'y') then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "   if #s == 0 then\n      return 0\n   elseif string.find(\"aeiouy\", string.sub(s,\
    \ 1, 1)) then\n      return 1 + vowels_count(string.sub(s, 2))\n   else\n    \
    \  return vowels_count(string.sub(s, 2))\n   end\nend", "  local count = 0\n \
    \ s = s:lower()\n  for i=1,#s do\n    if s:sub(i,i) == 'a' or s:sub(i,i) == 'e'\
    \ or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i) == 'u' then\n      count\
    \ = count + 1\n    elseif s:sub(i,i) == 'y' and i == #s then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  -- Implement me!\nend", "    --\
    \ write your code here\nend", "  local v = 0\n  for w in s:gmatch(\".\") do\n\
    \    if w == \"a\" or w == \"e\" or w == \"i\" or w == \"o\" or w == \"u\" then\n\
    \      v = v + 1\n    elseif w == \"y\" and w == string.sub(s, string.len(s))\
    \ then\n      v = v + 1\n    end\n  end\n  return v\nend\nprint(vowels_count(\"\
    flawless\")) --> 3", "    local count = 0\n    -- iterate through each character\
    \ in the string\n    for i = 1, #s do\n        local c = s:sub(i, i)\n       \
    \ -- check to see if the character is a vowel\n        if (c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u') or\n            (c == 'y' and i == #s)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local vowels = {\n        a = true,\n        e = true,\n        i =\
    \ true,\n        o = true,\n        u = true,\n        y = true\n    }\n    --\
    \ TODO: Implement\nend", "    local vowels = \"aeiouy\"\n    local t = 0\n   \
    \ for v in s:gmatch(\"[aeiouy]\") do\n        t = t + 1\n    end\n    return t\n\
    end\nprint(vowels_count(\"hello\")) -- 2\nprint(vowels_count(\"world\")) -- 1\n\
    print(vowels_count(\"tweety\")) -- 2\nprint(vowels_count(\"This is not a vowel\
    \ sequence\")) -- 7\nprint(vowels_count(\"syzygy\")) -- 3\nprint(vowels_count(\"\
    fly\")) -- 1\nprint(vowels_count(\"flyy\")) -- 2", end, "\treturn #string.gsub(s,\
    \ \"[aeiouy]\", \"\")\nend\nprint(vowels_count(\"defer\")) --> 2", "  -- YOUR\
    \ CODE HERE\n  return nil\nend", "\tlocal n = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ c = s:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' or\n\t\t\t(c == 'y' and i == #s) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\
    \treturn n\nend\nassert(vowels_count('hello') == 2)\nassert(vowels_count('why')\
    \ == 1)\nassert(vowels_count('home') == 2)\nassert(vowels_count('school') == 2)\n\
    assert(vowels_count('barn') == 1)\nassert(vowels_count('park') == 1)\nassert(vowels_count('tree')\
    \ == 2)", "    -- TODO\nend", "    -- your code here\nend", "    if s == \"\"\
    \ then\n        return 0\n    elseif string.match(s, \"^[aeiou]\") then\n    \
    \    return 1 + vowels_count(string.sub(s, 2))\n    elseif string.match(s, \"\
    ^y$\") then\n        return 1\n    else\n        return vowels_count(string.sub(s,\
    \ 2))\n    end\nend", "    local count = 0\n    local last_char = string.sub(s,\
    \ -1)\n    local s_nocase = string.lower(s)\n    for i = 1, #s_nocase do\n   \
    \     local char = string.sub(s_nocase, i, i)\n        if char == 'a' or char\
    \ == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            count\
    \ = count + 1\n        end\n    end\n    if last_char == 'y' then\n        count\
    \ = count + 1\n    end\n    return count\nend", "    local count = 0\n    for\
    \ c in s:gmatch('%a') do\n        if c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n            count = count + 1\n        elseif c == 'y'\
    \ and #s > 1 and s:sub(#s, #s) == 'y' then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    local len = #s\n    local count\
    \ = 0\n    for i = 1, len do\n        local c = s:sub(i, i)\n        if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count = count\
    \ + 1\n        elseif c == 'y' and i == len then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  -- <your code here>\nend",
  "    local num = 0\n    for i = 1, #s do\n        if string.find(\"aeiou\", string.sub(s,\
    \ i, i)) then\n            num = num + 1\n        end\n    end\n    if (string.sub(s,\
    \ #s, #s) == \"y\") then\n        num = num + 1\n    end\n    return num\nend",
  "  local vowels = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      vowels = vowels\
    \ + 1\n    elseif c == 'y' and i == #s then\n      vowels = vowels + 1\n    end\n\
    \  end\n  return vowels\nend", "    return #s:gsub(\"[^aeiouy]\", \"\")\nend",
  "   local n = 0\n   for i = 1, #s do\n      if s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\
    \ s:sub(i, i) == 'y' then\n         n = n + 1\n      end\n   end\n   return n\n\
    end", "  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend", "  local sum = 0\n  local\
    \ v = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #s do\n    for j = 1, #v do\n  \
    \    if s:sub(i, i) == v[j] then\n        sum = sum + 1\n      end\n    end\n\
    \  end\n  if s:sub(-1) == 'y' then\n    sum = sum + 1\n  end\n  return sum\nend",
  "    local function isvowel(c)\n        return c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u'\n    end\n    local i = 0\n    for c in s:gmatch\".\"\
    \ do\n        if isvowel(c) then\n            i = i + 1\n        end\n    end\n\
    \    if s:sub(-1) == 'y' then\n        i = i + 1\n    end\n    return i\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
