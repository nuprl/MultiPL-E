name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the list.\n-- If no such a value exist, return -1.\nlocal\
  \ function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local _lst = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n    for _, v in ipairs(lst)\
    \ do\n        _lst[v] = _lst[v] + 1\n    end\n    for i = #_lst, 1, -1 do\n  \
    \      if _lst[i] >= i then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "  local counter = {}\n  for _, v in ipairs(lst) do\n    counter[v]\
    \ = (counter[v] or 0) + 1\n  end\n  local greatest = -1\n  for k, v in pairs(counter)\
    \ do\n    if k == v and k > greatest then\n      greatest = k\n    end\n  end\n\
    \  return greatest\nend", "  return nil\nend", "  local counts = {}\n  for _,\
    \ i in ipairs(lst) do\n    counts[i] = (counts[i] or 0) + 1\n  end\n  for _, i\
    \ in ipairs(lst) do\n    if counts[i] >= i then\n      return i\n    end\n  end\n\
    \  return -1\nend", "  local ans = -1\n  for _,i in ipairs(lst) do\n    local\
    \ cnt = 0\n    for _,j in ipairs(lst) do\n      if i == j then\n        cnt =\
    \ cnt + 1\n      end\n    end\n    if i <= cnt and i > ans then\n      ans = i\n\
    \    end\n  end\n  return ans\nend", "\tlocal map, max = {}, 0\n\tfor i = 1, #lst\
    \ do\n\t\tmap[lst[i]] = (map[lst[i]] or 0) + 1\n\t\tmax = math.max(max, lst[i])\n\
    \tend\n\tfor i = max, 1, -1 do\n\t\tif map[i] and map[i] >= i then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn -1\nend", "    for _,v in ipairs(lst) do\n     \
    \   local k = 0\n        for _,v2 in ipairs(lst) do\n            if v2 == v then\n\
    \                k = k + 1\n            end\n        end\n        if k >= v then\n\
    \            return v\n        end\n    end\n    return -1\nend", "    local a\
    \ = {}\n    for _, x in ipairs(lst) do\n        a[x] = (a[x] or 0) + 1\n    end\n\
    \    for i = #lst, 1, -1 do\n        if a[i] and a[i] >= i then\n            return\
    \ i\n        end\n    end\n    return -1\nend", "  local max = -1\n  local count\
    \ = {}\n  for _, x in ipairs(lst) do\n    count[x] = (count[x] or 0) + 1\n   \
    \ if count[x] >= x and x > max then\n      max = x\n    end\n  end\n  return max\n\
    end", "    -- traverse list and store each item's frequency\n    local freq_map\
    \ = {}\n    for i,v in ipairs(lst) do\n        if freq_map[v] == nil then freq_map[v]\
    \ = 1\n        else freq_map[v] = freq_map[v] + 1 end\n    end\n    -- traverse\
    \ list again, and find largest value\n    local max_val = 0\n    for i,v in ipairs(lst)\
    \ do\n        if v > max_val and freq_map[v] >= v then max_val = v end\n    end\n\
    \    if max_val > 0 then return max_val\n    else return -1 end\nend", "\tlocal\
    \ arr = {}\n\tlocal index = {}\n\tfor i, value in ipairs(lst) do\n\t\tif index[value]\
    \ then\n\t\t\tarr[index[value]] = arr[index[value]] + 1\n\t\telse\n\t\t\tindex[value]\
    \ = #arr + 1\n\t\t\tarr[index[value]] = 1\n\t\tend\n\tend\n\tlocal val = -1\n\t\
    for i, value in ipairs(arr) do\n\t\tif arr[i] >= i and value > 0 then\n\t\t\t\
    val = i\n\t\tend\n\tend\n\treturn val\nend", '    local f = {};', "    local counts\
    \ = {}\n    for _, v in ipairs(lst) do\n        if counts[v] then\n          \
    \  counts[v] = counts[v] + 1\n        else\n            counts[v] = 1\n      \
    \  end\n    end\n    for i = 1, #lst do\n        if counts[i] and counts[i] >=\
    \ i then\n            return i\n        end\n    end\n    return -1\nend", " \
    \   local result, max = -1, 0\n    for _, n in ipairs(lst) do\n        if n >\
    \ max then max = n end\n    end\n    local cnt = {}\n    for _, n in ipairs(lst)\
    \ do\n        cnt[n] = (cnt[n] or 0) + 1\n    end\n    for i = 1, max do\n   \
    \     if cnt[i] and cnt[i] >= i then\n            result = i\n        end\n  \
    \  end\n    return result\nend", "    local result = -1\n    for i = #lst, 1,\
    \ -1 do\n        if lst[i] == i then\n            result = i\n        end\n  \
    \  end\n    return result\nend", "    -- create dictionary with {integer: number\
    \ of instances}\n    local count = {}\n    for _, n in ipairs(lst) do\n      \
    \  count[n] = (count[n] or 0) + 1\n    end\n    -- sort the keys in descending\
    \ order\n    local keys = {}\n    for k, _ in pairs(count) do\n        table.insert(keys,\
    \ k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    -- find\
    \ the greatest value\n    for _, k in ipairs(keys) do\n        if k <= count[k]\
    \ then\n            return k\n        end\n    end\n    return -1\nend", "   \
    \ -- A map of integer frequencies\n    local map = {}\n    -- Find out the frequencies\n\
    \    for _, num in ipairs(lst) do\n        map[num] = (map[num] or 0) + 1\n  \
    \  end\n    -- See if there's a value whose frequency is equal to or greater than\
    \ its value\n    local max = -1\n    for num, freq in pairs(map) do\n        if\
    \ num <= freq and num > max then\n            max = num\n        end\n    end\n\
    \    return max\nend", "  local largest = 0\n  local largestCount = 0\n  local\
    \ hash = {}\n  for _, v in ipairs(lst) do\n    if v > largest then\n      largest\
    \ = v\n    end\n    if not hash[v] then\n      hash[v] = 0\n    end\n    hash[v]\
    \ = hash[v] + 1\n  end\n  for i = 1, largest do\n    if hash[i] and hash[i] >=\
    \ i then\n      return i\n    end\n  end\n  return -1\nend", "  local freq = {}\n\
    \  for i = 1, #lst do \n    local v = lst[i]\n    freq[v] = (freq[v] or 0) + 1\n\
    \  end\n  local ok = -1\n  for k, v in pairs(freq) do\n    if v >= k and k > ok\
    \ then\n      ok = k\n    end\n  end\n  return ok\nend", "\tlocal counts = {}\n\
    \tlocal max = 0\n\tfor _, i in ipairs(lst) do\n\t\tcounts[i] = (counts[i] or 0)\
    \ + 1\n\t\tmax = math.max(max, i)\n\tend\n\tfor i = max, 1, -1 do\n\t\tif counts[i]\
    \ and counts[i] >= i then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
  "  local tab = {}\n  for _, item in ipairs(lst) do\n    tab[item] = (tab[item] or\
    \ 0) + 1\n  end\n  for _, item in ipairs(lst) do\n    if tab[item] >= item then\n\
    \      return item\n    end\n  end\n  return -1\nend", "  local counts = {}\n\
    \  for i = 1, #lst do\n    local n = lst[i]\n    counts[n] = (counts[n] or 0)\
    \ + 1\n  end\n  for i = #lst, 1, -1 do\n    local n = lst[i]\n    if counts[n]\
    \ >= n then\n      return n\n    end\n  end\n  return -1\nend", "  local values\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      values[lst[i]] = (values[lst[i]]\
    \ or 0) + 1\n    end\n  end\n  local max = -1\n  for k, v in pairs(values) do\n\
    \    if v >= k and k > max then\n      max = k\n    end\n  end\n  return max\n\
    end", "\tfor k, v in pairs(lst) do\n\t\tif v == 1 then return 1 end\n\tend\n\t\
    for k, v in pairs(lst) do\n\t\tif v > 1 then return v end\n\tend\n\treturn -1\n\
    end", "  -- your code here\n  --local lst={}\n  --local map={}\n  for k,v in pairs(lst)\
    \ do\n  \tif lst[k]==0 then\n  \t\tlst[k]=nil\n  \tend\n  end\n  for k,v in pairs(lst)\
    \ do\n  \tif not map[v] then\n  \t\tmap[v]=1\n  \telse\n  \t\tmap[v]=map[v]+1\n\
    \  \tend\n  end\n  local res=-1\n  for k,v in pairs(map) do\n  \tif v>=k and k>res\
    \ then\n  \t\tres=k\n  \tend\n  end\n  return res\nend", "    local arr = {}\n\
    \    for i = 1, #lst do\n        if arr[lst[i]] == nil then\n            arr[lst[i]]\
    \ = 1\n        else\n            arr[lst[i]] = arr[lst[i]] + 1\n        end\n\
    \    end\n    local max = -1\n    for k, v in pairs(arr) do\n        if v >= k\
    \ and k > max then\n            max = k\n        end\n    end\n    return max\n\
    end\nprint(search({2, 3, 3, 2, 1, 6, 5, 7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7, 7, 7,\
    \ 7, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7", "    local set\
    \ = {}\n    for _, v in ipairs(lst) do\n        set[v] = set[v] and set[v] + 1\
    \ or 1\n    end\n    local max = -1\n    for k, v in pairs(set) do\n        if\
    \ k >= v and max < k then\n            max = k\n        end\n    end\n    return\
    \ max\nend", "  -- your code here\n  local pos = 1\n  local frequency = {}\n \
    \ while lst[pos] do\n    local value = lst[pos]\n    if frequency[value] then\n\
    \      frequency[value] = frequency[value] + 1\n    else\n      frequency[value]\
    \ = 1\n    end\n    pos = pos + 1\n  end\n  local result = 0\n  for key, value\
    \ in pairs(frequency) do\n    if value >= key and key > result then\n      result\
    \ = key\n    end\n  end\n  if result > 0 then\n    return result\n  else\n   \
    \ return -1\n  end\nend", "    local elementCount = {}\n    for i = 1, #lst do\n\
    \        if elementCount[lst[i]] == nil then\n            elementCount[lst[i]]\
    \ = 1\n        else\n            elementCount[lst[i]] = elementCount[lst[i]] +\
    \ 1\n        end\n    end\n    local highestElement = 0\n    for k, v in pairs(elementCount)\
    \ do\n        if v >= k and k > highestElement then\n            highestElement\
    \ = k\n        end\n    end\n    if highestElement == 0 then\n        return -1\n\
    \    else\n        return highestElement\n    end\nend", "  local frequency =\
    \ {}\n  for _, i in ipairs(lst) do\n    frequency[i] = frequency[i] or 0\n   \
    \ frequency[i] = frequency[i] + 1\n  end\n  for _, i in ipairs(lst) do\n    if\
    \ frequency[i] >= i then\n      return i\n    end\n  end\n  return -1\nend", "\t\
    local tbl = {}\n\tfor _, v in ipairs(lst) do\n\t\ttbl[v] = tbl[v] and tbl[v] +\
    \ 1 or 1\n\tend\n\tfor i = #lst, 1, -1 do\n\t\tif tbl[i] and tbl[i] >= i then\n\
    \t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend", "  -- Search the largest number\
    \ which satisfies the conditions\n  local length = #lst\n  local result = {}\n\
    \  for i = 1, length do\n    local val = lst[i]\n    if result[val] == nil then\n\
    \      result[val] = 1\n    else\n      result[val] = result[val] + 1\n    end\n\
    \  end\n  local max = 0\n  for k, v in pairs(result) do\n    if k > max and v\
    \ >= k then\n      max = k\n    end\n  end\n  if max == 0 then\n    return -1\n\
    \  else\n    return max\n  end\nend", "    local numberCount = {}\n    for _,\
    \ value in ipairs(lst) do\n        if numberCount[value] == nil then\n       \
    \     numberCount[value] = 1\n        else\n            numberCount[value] = numberCount[value]\
    \ + 1\n        end\n    end\n    local maxFreq = -1\n    for value, freq in pairs(numberCount)\
    \ do\n        if freq >= value and freq > maxFreq then\n            maxFreq =\
    \ freq\n        end\n    end\n    return maxFreq\nend", "  local m = {}\n  for\
    \ _, v in ipairs(lst) do\n    if v > 0 then\n      if m[v] then\n        m[v]\
    \ = m[v] + 1\n      else\n        m[v] = 1\n      end\n    end\n  end\n  local\
    \ c = 0\n  for k, v in pairs(m) do\n    if v >= k then\n      c = k\n    end\n\
    \  end\n  return c or -1\nend", "    local count = {}\n    for _, v in ipairs(lst)\
    \ do\n        if count[v] then\n            count[v] = count[v] + 1\n        else\n\
    \            count[v] = 1\n        end\n    end\n    local max = -1\n    for k,\
    \ v in pairs(count) do\n        if k <= v and k > max then\n            max =\
    \ k\n        end\n    end\n    return max\nend", "    for i = 0, #lst do\n   \
    \     local freq = 0\n        for j = 1, #lst do\n            if lst[j] == i then\n\
    \                freq = freq + 1\n            end\n        end\n        if freq\
    \ >= i then\n            return i\n        end\n    end\n    return -1\nend",
  "  for i = #lst, 1, -1 do\n    local e = lst[i]\n    local c = 0\n    for j = 1,\
    \ #lst do\n      if lst[j] == e then\n        c = c + 1\n      end\n    end\n\
    \    if c >= e then\n      return e\n    end\n  end\n  return -1\nend", "  local\
    \ function counter(lst, a)\n    local cnt = 0\n    for i = 1, #lst do\n      if\
    \ lst[i] == a then\n        cnt = cnt + 1\n      end\n    end\n    return cnt\n\
    \  end\n  local arr = {}\n  for i = 1, #lst do\n    if not arr[lst[i]] then\n\
    \      arr[lst[i]] = 1\n    else\n      arr[lst[i]] = arr[lst[i]] + 1\n    end\n\
    \  end\n  local max = -1\n  for k, v in pairs(arr) do\n    if v >= k and k > max\
    \ then\n      max = k\n    end\n  end\n  return max\nend", "    local f, g = {},\
    \ {}\n    for _, e in ipairs(lst) do\n        f[e] = (f[e] or 0) + 1\n    end\n\
    \    for k, v in pairs(f) do\n        g[v] = (g[v] or 0) + 1\n    end\n    for\
    \ k, v in pairs(g) do\n        if v == k then\n            return k\n        end\n\
    \    end\n    return -1\nend", "  local freq = {}\n  for _, elem in ipairs(lst)\
    \ do\n    freq[elem] = (freq[elem] or 0) + 1\n  end\n  local found = nil\n  for\
    \ _, elem in ipairs(lst) do\n    if freq[elem] >= elem and (not found or elem\
    \ > found) then\n      found = elem\n    end\n  end\n  return found or -1\nend",
  "    local result = {}\n    local counter = 0\n    for i = 1, #lst do\n        if\
    \ not result[lst[i]] then\n            result[lst[i]] = 1\n        else\n    \
    \        result[lst[i]] = result[lst[i]] + 1\n        end\n    end\n    for i\
    \ = 1, #lst do\n        if result[lst[i]] >= lst[i] then\n            counter\
    \ = counter + 1\n        end\n    end\n    if counter == 0 then\n        return\
    \ -1\n    end\n    local max = 1\n    for i = 1, #lst do\n        if result[lst[i]]\
    \ > result[max] then\n            max = lst[i]\n        end\n    end\n    return\
    \ max\nend", "    local mx = 0;\n    local hst = {};\n    for _, v in ipairs(lst)\
    \ do\n        if v > mx then\n            mx = v;\n        end\n        if hst[v]\
    \ == nil then\n            hst[v] = 1;\n        else\n            hst[v] = hst[v]\
    \ + 1;\n        end\n    end\n    for i = mx, 1, -1 do\n        if hst[i] ~= nil\
    \ and hst[i] >= i then\n            return i;\n        end\n    end\n    return\
    \ -1;\nend", "    local num_to_count = {}\n    for i,v in ipairs(lst) do\n   \
    \     if num_to_count[v] == nil then\n            num_to_count[v] = 1\n      \
    \  else\n            num_to_count[v] = num_to_count[v] + 1\n        end\n    end\n\
    \    for i,v in ipairs(lst) do\n        if num_to_count[v] >= v then\n       \
    \     return v\n        end\n    end\n    return -1\nend", "  -- Get the counts\
    \ of each number\n  local counts = {}\n  for i,v in ipairs(lst) do\n    counts[v]\
    \ = (counts[v] or 0) + 1\n  end\n  -- Find the maximum frequency value\n  local\
    \ maxVal, maxCount = 0, 0\n  for v,c in pairs(counts) do\n    if v <= c and v\
    \ > maxVal then\n      maxVal, maxCount = v, c\n    end\n  end\n  return maxVal\
    \ > 0 and maxVal or -1\nend", "  local tbl = {}\n  for i = 1, #lst do\n    if\
    \ not tbl[lst[i]] then\n      tbl[lst[i]] = 1\n    else\n      tbl[lst[i]] = tbl[lst[i]]\
    \ + 1\n    end\n  end\n  local result = -1\n  for i = 1, #lst do\n    if tbl[lst[i]]\
    \ >= lst[i] and result < lst[i] then\n      result = lst[i]\n    end\n  end\n\
    \  return result\nend", "  local res = -1\n  local counts = {}\n  for _, i in\
    \ ipairs(lst) do\n    if counts[i] then\n      counts[i] = counts[i] + 1\n   \
    \ else\n      counts[i] = 1\n    end\n  end\n  for i, count in pairs(counts) do\n\
    \    if count >= i and res < i then\n      res = i\n    end\n  end\n  return res\n\
    end", "  local count = {}\n  for _, v in ipairs(lst) do count[v] = (count[v] or\
    \ 0) + 1 end\n  local max, maxn = -1, -1\n  for i, v in ipairs(lst) do\n    if\
    \ count[v] >= v and v > max then max, maxn = v, i end\n  end\n  return maxn, max\n\
    end", "    local frequency = {}\n    for i = 1, #lst do\n        if frequency[lst[i]]\
    \ then\n            frequency[lst[i]] = frequency[lst[i]] + 1\n        else\n\
    \            frequency[lst[i]] = 1\n        end\n    end\n    local max_value\
    \ = 1\n    local max_frequency = frequency[1]\n    for i = 2, #lst do\n      \
    \  if frequency[i] and frequency[i] >= i and frequency[i] > max_frequency then\n\
    \            max_value = i\n            max_frequency = frequency[i]\n       \
    \ end\n    end\n    if max_frequency >= max_value then\n        return max_value\n\
    \    else\n        return -1\n    end\nend", "    -- TODO implement search function\n\
    \    local result = -1\n    for i = 1, #lst do\n        local a = lst[i]\n   \
    \     local n = 0\n        for j = 1, #lst do\n            if lst[j] == a then\n\
    \                n = n + 1\n            end\n        end\n        if n >= a and\
    \ a > result then\n            result = a\n        end\n    end\n    return result\n\
    end", "  local count = {}\n  for _, v in ipairs(lst) do\n    if not count[v] then\n\
    \      count[v] = 1\n    else\n      count[v] = count[v] + 1\n    end\n  end\n\
    \  local res = -1\n  for k, v in pairs(count) do\n    if k <= v and k > res then\n\
    \      res = k\n    end\n  end\n  return res\nend", "    local res = {}\n    for\
    \ i, num in ipairs(lst) do\n        if not res[num] then\n            res[num]\
    \ = 1\n        else\n            res[num] = res[num] + 1\n        end\n    end\n\
    \    local max = -1\n    for k, v in pairs(res) do\n        if v >= k and k >\
    \ max then\n            max = k\n        end\n    end\n    return max\nend", " \
    \ local m = -1\n  local counter = {}\n  for _,v in ipairs(lst) do\n    counter[v]\
    \ = (counter[v] or 0) + 1\n  end\n  for _,v in ipairs(lst) do\n    if counter[v]\
    \ >= v and v > m then\n      m = v\n    end\n  end\n  return m\nend", "    local\
    \ max = -1\n    local count = {}\n    for _, v in ipairs(lst) do\n        count[v]\
    \ = (count[v] or 0) + 1\n        if v > max and count[v] >= v then\n         \
    \   max = v\n        end\n    end\n    return max\nend", "  local counter = {}\n\
    \  for _, v in ipairs(lst) do\n    counter[v] = (counter[v] or 0) + 1\n  end\n\
    \  local res = -1\n  for _, v in ipairs(lst) do\n    if counter[v] >= v and v\
    \ > res then\n      res = v\n    end\n  end\n  return res\nend", "    local max\
    \ = 0\n    local max_count = 0\n    local count = {}\n    for _,x in ipairs(lst)\
    \ do\n        count[x] = (count[x] or 0) + 1\n        if count[x] >= x and x >\
    \ max_count then\n            max = x\n            max_count = count[x]\n    \
    \    end\n    end\n    return max\nend", "\tlocal result = -1;\n\tlocal data =\
    \ {};\n\tfor _, v in ipairs(lst) do\n\t\tdata[v] = (data[v] or 0) + 1;\n\t\tif\
    \ data[v] >= v and v > result then\n\t\t\tresult = v;\n\t\tend\n\tend\n\treturn\
    \ result;\nend\nreturn search;", "  local counts = {}\n  for i = 1, #lst do\n\
    \    local num = lst[i]\n    counts[num] = (counts[num] or 0) + 1\n  end\n  for\
    \ i = #lst, 1, -1 do\n    local num = lst[i]\n    if counts[num] >= num then\n\
    \      return num\n    end\n  end\n  return -1\nend", "  local count = {}\n  for\
    \ i = 1, #lst do\n    local elem = lst[i]\n    count[elem] = (count[elem] or 0)\
    \ + 1\n  end\n  local function cmp(a, b)\n    if a < b then\n      return -1\n\
    \    elseif a > b then\n      return 1\n    else\n      return 0\n    end\n  end\n\
    \  table.sort(lst, cmp)\n  for i = 1, #lst do\n    local elem = lst[i]\n    if\
    \ count[elem] >= elem then\n      return elem\n    end\n  end\n  return -1\nend",
  "    local hash = {}\n    for _, v in ipairs(lst) do\n        hash[v] = (hash[v]\
    \ or 0) + 1\n    end\n    local max = 0\n    for k, v in pairs(hash) do\n    \
    \    if v >= k and k > max then\n            max = k\n        end\n    end\n \
    \   return max > 0 and max or -1\nend", "  local cnt = {}\n  for i = 1, #lst do\n\
    \    local item = lst[i]\n    cnt[item] = (cnt[item] or 0) + 1\n  end\n  local\
    \ result = -1\n  for i = 1, #lst do\n    local item = lst[i]\n    if cnt[item]\
    \ >= item and item > result then\n      result = item\n    end\n  end\n  return\
    \ result\nend", "    local freq = {}\n    for _, value in ipairs(lst) do\n   \
    \     freq[value] = freq[value] and freq[value] + 1 or 1\n    end\n    for _,\
    \ value in ipairs(lst) do\n        if freq[value] >= value then\n            return\
    \ value\n        end\n    end\n    return -1\nend", "    local freq = {}\n   \
    \ for _, v in ipairs(lst) do\n        if not freq[v] then\n            freq[v]\
    \ = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n\
    \    local maxVal = -1\n    for k, v in pairs(freq) do\n        if v >= k and\
    \ maxVal < k then\n            maxVal = k\n        end\n    end\n    return maxVal\n\
    end", "  local r, rv = 0, -1\n  for i, v in ipairs(lst) do\n    if v >= #lst then\n\
    \      rv = -1\n      break\n    end\n    local f = 0\n    for j, w in ipairs(lst)\
    \ do\n      if v == w then\n        f = f + 1\n      end\n    end\n    if f >=\
    \ v and v > r then\n      r = v\n      rv = v\n    end\n  end\n  return rv\nend",
  "    local max = 0\n    local frequency = {}\n    for i, value in ipairs(lst) do\n\
    \        frequency[value] = frequency[value] and frequency[value] + 1 or 1\n \
    \       if frequency[value] >= value and value > max then\n            max = value\n\
    \        end\n    end\n    return max > 0 and max or -1\nend", "    local d =\
    \ {}\n    for i = 1, #lst do\n        if d[lst[i]] == nil then\n            d[lst[i]]\
    \ = 1\n        else\n            d[lst[i]] = d[lst[i]] + 1\n        end\n    end\n\
    \    local cnt = {}\n    for i = 1, #lst do\n        if cnt[d[lst[i]]] == nil\
    \ then\n            cnt[d[lst[i]]] = 1\n        else\n            cnt[d[lst[i]]]\
    \ = cnt[d[lst[i]]] + 1\n        end\n    end\n    local maxKey = -1\n    local\
    \ maxVal = -1\n    for key, val in pairs(cnt) do\n        if key >= val and key\
    \ > maxKey then\n            maxKey = key\n            maxVal = val\n        end\n\
    \    end\n    return maxVal > 0 and maxKey or -1\nend", "    local seen = {}\n\
    \    for _, i in ipairs(lst) do\n        if seen[i] then\n            seen[i]\
    \ = seen[i] + 1\n        else\n            seen[i] = 1\n        end\n    end\n\
    \    local max_int = 0\n    for k, v in pairs(seen) do\n        if k >= v and\
    \ k > max_int then\n            max_int = k\n        end\n    end\n    if max_int\
    \ > 0 then\n        return max_int\n    else\n        return -1\n    end\nend",
  "    local count = {}\n    for _, num in ipairs(lst) do\n        count[num] = (count[num]\
    \ or 0) + 1\n    end\n    local result = -1\n    for num, freq in pairs(count)\
    \ do\n        if num >= freq and result < num then\n            result = num\n\
    \        end\n    end\n    return result\nend", "    local max_num, max_cnt =\
    \ -1, 0\n    for i,v in ipairs(lst) do\n        if v == max_cnt then\n       \
    \     max_num = math.max(max_num, i)\n        elseif v > max_cnt then\n      \
    \      max_num, max_cnt = i, v\n        end\n    end\n    return max_num, max_cnt\n\
    end", "    for _,v in ipairs(lst) do\n        if v == 0 then\n            return\
    \ -1\n        end\n    end\n    local res = -1\n    local max = 0\n    for _,v\
    \ in ipairs(lst) do\n        local cnt = 0\n        for _,vv in ipairs(lst) do\n\
    \            if v == vv then\n                cnt = cnt + 1\n            end\n\
    \        end\n        if cnt >= v and cnt > max then\n            res = v\n  \
    \          max = cnt\n        end\n    end\n    return res\nend", "    local t\
    \ = {}\n    for i = 1, #lst do\n        local key = lst[i]\n        if t[key]\
    \ == nil then\n            t[key] = 0\n        end\n        t[key] = t[key] +\
    \ 1\n    end\n    local result = -1\n    for k, v in pairs(t) do\n        if k\
    \ > v and k > result then\n            result = k\n        end\n    end\n    return\
    \ result\nend", "    local dict = {}\n    for _,v in ipairs(lst) do\n        if\
    \ dict[v] == nil then\n            dict[v] = 1\n        else\n            dict[v]\
    \ = dict[v] + 1\n        end\n    end\n    for i = #lst,1,-1 do\n        if dict[i]\
    \ and dict[i] >= i then\n            return i\n        end\n    end\n    return\
    \ -1\nend", "  local counts = {}\n  for _,x in ipairs(lst) do\n    counts[x] =\
    \ (counts[x] or 0) + 1\n  end\n  local result = -1\n  for k,v in pairs(counts)\
    \ do\n    if k > v and k > result then\n      result = k\n    end\n  end\n  return\
    \ result\nend", "    -- get the occurrence table.\n    local occur = {}\n    for\
    \ _, num in ipairs(lst) do\n        occur[num] = (occur[num] or 0) + 1\n    end\n\
    \    -- get the frequencies sorted in ascending order.\n    local freq = {}\n\
    \    for key, value in pairs(occur) do\n        freq[#freq + 1] = value\n    end\n\
    \    table.sort(freq)\n    -- find the item we want.\n    for idx = #freq, 1,\
    \ -1 do\n        if freq[idx] >= freq[idx] then\n            return freq[idx]\n\
    \        end\n    end\n    return -1\nend", "  local counts = {}\n  for _, val\
    \ in ipairs(lst) do\n    counts[val] = (counts[val] or 0) + 1\n  end\n  local\
    \ max_val, max_count = -1, -1\n  for val, count in pairs(counts) do\n    if val\
    \ >= count and count > max_count then\n      max_val, max_count = val, count\n\
    \    end\n  end\n  return max_val\nend", "  local freq = {}\n  for i, v in ipairs(lst)\
    \ do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  local res = -1\n  for i, v in\
    \ ipairs(lst) do\n    if v > 0 and v <= freq[v] and v > res then\n      res =\
    \ v\n    end\n  end\n  return res\nend", "    local dic = {}\n    for _, v in\
    \ ipairs(lst) do\n        dic[v] = dic[v] or 0\n        dic[v] = dic[v] + 1\n\
    \    end\n    local res = -1\n    for k, v in pairs(dic) do\n        if k <= v\
    \ and k > res then\n            res = k\n        end\n    end\n    return res\n\
    end", "    -- make the dictionary of the lst\n    local dict = {}\n    for i,\
    \ elem in ipairs(lst) do\n        dict[elem] = dict[elem] or 0\n        dict[elem]\
    \ = dict[elem] + 1\n    end\n    local max = -1\n    for i, elem in ipairs(lst)\
    \ do\n        if dict[elem] >= elem and elem > max then\n            max = elem\n\
    \        end\n    end\n    return max\nend", "\t--freq array\n\tlocal a = {}\n\
    \t--find frequencies\n\tfor _,v in ipairs(lst) do\n\t\ta[v] = a[v] or 0\n\t\t\
    a[v] = a[v] + 1\n\tend\n\t--find greatest freq that is less than or equal to the\
    \ value\n\tlocal m = -1\n\tfor _,v in ipairs(lst) do\n\t\tif v == a[v] and m <\
    \ v then\n\t\t\tm = v\n\t\tend\n\tend\n\treturn m\nend", "    local m = 0\n  \
    \  local c = {}\n    for i = 1, #lst do\n        if lst[i] == 0 then\n       \
    \     return -1\n        end\n        if lst[i] > m then\n            m = lst[i]\n\
    \        end\n        if c[lst[i]] then\n            c[lst[i]] = c[lst[i]] + 1\n\
    \        else\n            c[lst[i]] = 1\n        end\n    end\n    for i = m,\
    \ 1, -1 do\n        if c[i] and c[i] >= i then\n            return i\n       \
    \ end\n    end\n    return -1\nend", "    local frequency = {}\n    for _, v in\
    \ ipairs(lst) do\n        frequency[v] = frequency[v] or 0\n        frequency[v]\
    \ = frequency[v] + 1\n    end\n    local result = -1\n    for i, v in ipairs(lst)\
    \ do\n        if v == frequency[v] and v > result then\n            result = v\n\
    \        end\n    end\n    return result\nend", "\tlocal m, v = 0, 0\n\tfor _,\
    \ v in ipairs(lst) do\n\t\tif v > m then m = v end\n\tend\n\tfor i = 1, m do\n\
    \t\tlocal c = 0\n\t\tfor _, v in ipairs(lst) do\n\t\t\tif v == i then c = c +\
    \ 1 end\n\t\tend\n\t\tif c >= i then v = i end\n\tend\n\treturn v > 0 and v or\
    \ -1\nend", "    local map = {}\n    for _, v in ipairs(lst) do\n        map[v]\
    \ = (map[v] or 0) + 1\n    end\n    local res = -1\n    for k, v in pairs(map)\
    \ do\n        if k <= v and k > res then\n            res = k\n        end\n \
    \   end\n    return res\nend", "    local map = {}\n    for _,v in ipairs(lst)\
    \ do\n        map[v] = (map[v] or 0) + 1\n    end\n    for _,v in ipairs(lst)\
    \ do\n        if map[v] and map[v] >= v then\n            return v\n        end\n\
    \    end\n    return -1\nend", "    local nums = {}\n    for i = 1, #lst do\n\
    \        local val = lst[i]\n        if nums[val] then\n            nums[val]\
    \ = nums[val] + 1\n        else\n            nums[val] = 1\n        end\n    end\n\
    \    local res = -1\n    for k, v in pairs(nums) do\n        if k > v and k >\
    \ res then\n            res = k\n        end\n    end\n    return res\nend", " \
    \ local max = 0\n  local count = {}\n  for _, v in ipairs(lst) do\n    count[v]\
    \ = (count[v] or 0) + 1\n    if v > max then max = v end\n  end\n  for i = max,\
    \ 1, -1 do\n    if count[i] and count[i] >= i then return i end\n  end\n  return\
    \ -1\nend", "  local freq = {}\n  for i = 1, #lst do\n    local count = freq[lst[i]]\
    \ or 0\n    freq[lst[i]] = count + 1\n  end\n  for i = #lst, 1, -1 do\n    if\
    \ freq[i] and freq[i] >= i then\n      return i\n    end\n  end\n  return -1\n\
    end", "    local dict = {}\n    for _, v in ipairs(lst) do\n        dict[v] =\
    \ dict[v] or 0\n        dict[v] = dict[v] + 1\n    end\n    for _, v in ipairs(lst)\
    \ do\n        if dict[v] >= v then\n            return v\n        end\n    end\n\
    \    return -1\nend", "  local counts = {}\n  for _, v in ipairs(lst) do\n   \
    \ if not counts[v] then\n      counts[v] = 1\n    else\n      counts[v] = counts[v]\
    \ + 1\n    end\n  end\n  local max = -1\n  for k, v in pairs(counts) do\n    if\
    \ k <= v and k > max then\n      max = k\n    end\n  end\n  return max\nend",
  "\tlocal cnt,res={},-1\n\tfor _,v in ipairs(lst) do\n\t\tcnt[v]=(cnt[v] or 0)+1\n\
    \t\tif cnt[v]>=v and v>res then res=v end\n\tend\n\treturn res\nend", "    local\
    \ srt = {}\n    for i = 1, #lst do\n        if srt[lst[i]] == nil then\n     \
    \       srt[lst[i]] = 1\n        else\n            srt[lst[i]] = srt[lst[i]] +\
    \ 1\n        end\n    end\n    local function sortfunc(a, b)\n        return srt[a]\
    \ > srt[b]\n    end\n    local keys = {}\n    for k, v in pairs(srt) do\n    \
    \    table.insert(keys, k)\n    end\n    table.sort(keys, sortfunc)\n    local\
    \ res = -1\n    for i = 1, #keys do\n        if keys[i] <= srt[keys[i]] then\n\
    \            res = keys[i]\n            break\n        end\n    end\n    return\
    \ res\nend", "    local lut = {}\n    for _, v in ipairs(lst) do\n        lut[v]\
    \ = (lut[v] or 0) + 1\n    end\n    local res = -1\n    for k, v in pairs(lut)\
    \ do\n        if v >= k and k > res then\n            res = k\n        end\n \
    \   end\n    return res\nend", "    local counts = {}\n    for i, e in ipairs(lst)\
    \ do\n        if counts[e] == nil then\n            counts[e] = 1\n        else\n\
    \            counts[e] = counts[e] + 1\n        end\n    end\n    for k, v in\
    \ pairs(counts) do\n        if v >= k then\n            return k\n        end\n\
    \    end\n    return -1\nend", "  local res = {nil, 0}\n  local ht = {}\n  for\
    \ _, v in ipairs(lst) do\n    if not ht[v] then\n      ht[v] = 1\n    else\n \
    \     ht[v] = ht[v] + 1\n    end\n    if ht[v] >= v and v > res[2] then\n    \
    \  res = {v, v}\n    end\n  end\n  return res[1] or -1\nend", "    local count,\
    \ max = {}, -1\n    for _, n in ipairs(lst) do\n        count[n] = (count[n] or\
    \ 0) + 1\n        if count[n] >= n and n > max then\n            max = n\n   \
    \     end\n    end\n    return max\nend", "    local freq = {}\n    for _, n in\
    \ ipairs(lst) do\n        if n > 0 then\n            freq[n] = (freq[n] or 0)\
    \ + 1\n        end\n    end\n    local res = -1\n    for k, v in pairs(freq) do\n\
    \        if v >= k and k > res then\n            res = k\n        end\n    end\n\
    \    return res\nend", "    local t = {}\n    for i,n in ipairs(lst) do\n    \
    \    if not t[n] then\n            t[n] = 1\n        else\n            t[n] =\
    \ t[n] + 1\n        end\n    end\n    local max = -1\n    for k,v in pairs(t)\
    \ do\n        if v >= k and k > max then\n            max = k\n        end\n \
    \   end\n    return max\nend", "    local map = {}\n    for _, v in ipairs(lst)\
    \ do\n        map[v] = (map[v] or 0) + 1\n    end\n    local max_num, max_frequency\
    \ = -1, -1\n    for k, v in pairs(map) do\n        if k <= v and v > max_frequency\
    \ then\n            max_num, max_frequency = k, v\n        end\n    end\n    return\
    \ max_num\nend", "    local counter = {}\n    for _, i in ipairs(lst) do\n   \
    \     counter[i] = (counter[i] or 0) + 1\n    end\n    local max, max_count =\
    \ -1, -1\n    for i, count in pairs(counter) do\n        if i > max and count\
    \ >= i then\n            max, max_count = i, count\n        end\n    end\n   \
    \ return max\nend", "\tlocal tmp = {}\n\tlocal max = 0\n\tfor _,v in ipairs(lst)\
    \ do\n\t\ttmp[v] = tmp[v] and tmp[v] + 1 or 1\n\t\tif tmp[v] >= v and v > max\
    \ then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max > 0 and max or -1\nend", " \
    \   local freq = {}\n    for _, v in ipairs(lst) do\n        freq[v] = (freq[v]\
    \ or 0) + 1\n    end\n    for _, v in ipairs(lst) do\n        if freq[v] >= v\
    \ then\n            return v\n        end\n    end\n    return -1\nend", "   \
    \ local counts = {}\n    for _, i in ipairs(lst) do\n        if counts[i] then\n\
    \            counts[i] = counts[i] + 1\n        else\n            counts[i] =\
    \ 1\n        end\n    end\n    local vals = {}\n    for k, v in pairs(counts)\
    \ do\n        if v >= k then\n            table.insert(vals, k)\n        end\n\
    \    end\n    if #vals > 0 then\n        return math.max(unpack(vals))\n    else\n\
    \        return -1\n    end\nend", "    local max = 0\n    local results = {}\n\
    \    for _, x in ipairs(lst) do\n        if x > max then\n            max = x\n\
    \        end\n        if results[x] == nil then\n            results[x] = 1\n\
    \        else\n            results[x] = results[x] + 1\n        end\n    end\n\
    \    for i = max, 1, -1 do\n        if results[i] ~= nil and results[i] >= i then\n\
    \            return i\n        end\n    end\n    return -1\nend", "  local lst\
    \ = lst:sort()\n  local m = {}\n  for i = 1, #lst do\n    if not m[lst[i]] then\n\
    \      m[lst[i]] = 1\n    else\n      m[lst[i]] = m[lst[i]] + 1\n    end\n  end\n\
    \  for i = #lst, 1, -1 do\n    if m[lst[i]] >= lst[i] then\n      return lst[i]\n\
    \    end\n  end\n  return -1\nend", "    local counts = {}\n    for i, v in ipairs(lst)\
    \ do\n        if counts[v] then\n            counts[v] = counts[v] + 1\n     \
    \   else\n            counts[v] = 1\n        end\n    end\n    for i, v in ipairs(lst)\
    \ do\n        if counts[v] >= v then\n            return v\n        end\n    end\n\
    \    return -1\nend", "\tif #lst == 0 then\n\t\treturn -1\n\tend\n\tlocal map\
    \ = {}\n\tfor i, v in ipairs(lst) do\n\t\tmap[v] = (map[v] or 0) + 1\n\tend\n\t\
    local max = -1\n\tfor k, v in pairs(map) do\n\t\tif k <= v and k > max then\n\t\
    \t\tmax = k\n\t\tend\n\tend\n\treturn max\nend", "\tlocal newt = {}\n\tlocal freq\
    \ = {}\n\tfor _, v in ipairs(lst) do\n\t\tif newt[v] == nil then\n\t\t\tnewt[v]\
    \ = v\n\t\t\tfreq[v] = 1\n\t\telse\n\t\t\tfreq[v] = freq[v] + 1\n\t\tend\n\tend\n\
    \tlocal r = -1\n\tfor _, v in ipairs(lst) do\n\t\tif freq[v] >= v and v > r then\n\
    \t\t\tr = v\n\t\tend\n\tend\n\treturn r\nend", "  local cnt = {}\n  for _, v in\
    \ ipairs(lst) do\n    if v > 0 then\n      cnt[v] = (cnt[v] or 0) + 1\n    end\n\
    \  end\n  local max = 0\n  for i, v in pairs(cnt) do\n    if v >= i and i > max\
    \ then\n      max = i\n    end\n  end\n  return max > 0 and max or -1\nend", " \
    \ local m = 1\n  local d = {}\n  for _, x in ipairs(lst) do\n    d[x] = (d[x]\
    \ or 0) + 1\n    if x > m and d[x] >= x then\n      m = x\n    end\n  end\n  return\
    \ m\nend\nassert(search({1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
  "  local counts = {}\n  for _, n in ipairs(lst) do\n    counts[n] = (counts[n] or\
    \ 0) + 1\n  end\n  local max_n = -1\n  for n in pairs(counts) do\n    if n > 0\
    \ and n <= counts[n] and n > max_n then\n      max_n = n\n    end\n  end\n  return\
    \ max_n\nend", "  local obj = {}\n  for i = 1, #lst do\n    if obj[lst[i]] ==\
    \ nil then\n      obj[lst[i]] = 1\n    else\n      obj[lst[i]] = obj[lst[i]] +\
    \ 1\n    end\n  end\n  for i = 1, #lst do\n    if obj[lst[i]] ~= nil and obj[lst[i]]\
    \ >= lst[i] then\n      return lst[i]\n    end\n  end\n  return -1\nend", "  \
    \  -- initializing the map with the frequency of each number in the list\n   \
    \ local map = {}\n    for i, v in ipairs(lst) do\n        map[v] = (map[v] or\
    \ 0) + 1\n    end\n    -- initializing the table with values and frequencies\n\
    \    local freq = {}\n    for key, val in pairs(map) do\n        freq[#freq +\
    \ 1] = {key, val}\n    end\n    -- sorting the table in descending order of frequency\n\
    \    local function sort(first, second)\n        return first[2] > second[2]\n\
    \    end\n    table.sort(freq, sort)\n    -- checking if the frequency of a value\
    \ is greater than or equal to the value itself\n    for _, v in ipairs(freq) do\n\
    \        if v[1] <= v[2] then\n            return v[1]\n        end\n    end\n\
    \    return -1\nend", "  local count_tbl = {}\n  for _, v in ipairs(lst) do\n\
    \    if not count_tbl[v] then\n      count_tbl[v] = 1\n    else\n      count_tbl[v]\
    \ = count_tbl[v] + 1\n    end\n  end\n  local max_val = -1\n  for k, v in pairs(count_tbl)\
    \ do\n    if v >= k and k > max_val then\n      max_val = k\n    end\n  end\n\
    \  return max_val\nend", "    local m = {}\n    for i = 1, #lst do\n        local\
    \ x = lst[i]\n        m[x] = m[x] and m[x] + 1 or 1\n    end\n    local mx = 0\n\
    \    for i = 1, #lst do\n        local x = lst[i]\n        if m[x] >= x and x\
    \ > mx then\n            mx = x\n        end\n    end\n    return mx > 0 and mx\
    \ or -1\nend", "  local candidate = 1\n  local count = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == candidate then\n      count = count + 1\n    elseif v > candidate\
    \ then\n      candidate = v\n      count = 1\n    end\n  end\n  return candidate\
    \ > count and -1 or candidate\nend", "  local freq = {}\n  for _, val in ipairs(lst)\
    \ do\n    freq[val] = (freq[val] or 0) + 1\n  end\n  for _, val in ipairs(lst)\
    \ do\n    if freq[val] >= val then\n      return val\n    end\n  end\n  return\
    \ -1\nend", "  local counts = {}\n  for _, x in ipairs(lst) do\n    counts[x]\
    \ = (counts[x] or 0) + 1\n  end\n  local best, best_count = -1, 0\n  for i = #lst,\
    \ 1, -1 do\n    if counts[i] >= i and counts[i] > best_count then\n      best\
    \ = i\n      best_count = counts[i]\n    end\n  end\n  return best\nend", "\t\
    local count = {}\n\tfor i = 1, #lst do\n\t\tlocal n = lst[i]\n\t\tcount[n] = (count[n]\
    \ or 0) + 1\n\tend\n\tlocal best = -1\n\tfor i = 1, #lst do\n\t\tlocal n = lst[i]\n\
    \t\tif count[n] >= n and n > best then\n\t\t\tbest = n\n\t\tend\n\tend\n\treturn\
    \ best\nend\nassertEquals(6, search({6, 5, 6, 4, 3, 5, 3, 6, 5, 5, 3, 6, 3, 3,\
    \ 3, 3, 3, 5, 6, 3, 6, 5, 6, 6, 6, 5, 3, 6, 6, 6, 3, 6, 6, 6, 6, 6, 3, 3, 3, 5,\
    \ 3, 3, 6, 5, 5, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5,\
    \ 6, 5, 5, 5, 5, 6, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5,\
    \ 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
  "    local data = {}\n    for _, v in ipairs(lst) do\n        data[v] = (data[v]\
    \ or 0) + 1\n    end\n    local result = -1\n    for k, v in pairs(data) do\n\
    \        if k <= v and k > result then\n            result = k\n        end\n\
    \    end\n    return result\nend", "  local t = {}\n  for _, v in ipairs(lst)\
    \ do\n    t[v] = t[v] and t[v] + 1 or 1\n  end\n  for i = 1, #lst do\n    if t[i]\
    \ and t[i] >= i then\n      return i\n    end\n  end\n  return -1\nend", "\tlocal\
    \ c = {};\n\tlocal r = -1;\n\tfor i, v in ipairs(lst) do\n\t\tif not c[v] then\n\
    \t\t\tc[v] = 1;\n\t\telse\n\t\t\tc[v] = c[v] + 1;\n\t\tend\n\t\tif c[v] >= v and\
    \ v > r then\n\t\t\tr = v;\n\t\tend\n\tend\n\treturn r;\nend", "    -- for each\
    \ element in the list\n    -- if the value of the element == its frequency\n \
    \   -- and is > the current max\n    -- then the max = the value of the element\n\
    \    local max = -1\n    for i, elem in ipairs(lst) do\n        local frequency\
    \ = 0\n        for j, elem2 in ipairs(lst) do\n            if elem == elem2 then\n\
    \                frequency = frequency + 1\n            end\n        end\n   \
    \     if frequency >= elem and elem > max then\n            max = elem\n     \
    \   end\n    end\n    return max\nend", "  local counts = {}\n  for _, n in ipairs(lst)\
    \ do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local result = -1\n  for\
    \ n, count in pairs(counts) do\n    if count >= n and n > result then\n      result\
    \ = n\n    end\n  end\n  return result\nend", "    local map = {}\n    for _,\
    \ val in ipairs(lst) do\n        map[val] = map[val] or 0\n        map[val] =\
    \ map[val] + 1\n    end\n    local lst = {}\n    for i = 1, #lst do\n        if\
    \ map[i] >= i then\n            table.insert(lst, i)\n        end\n    end\n \
    \   if #lst > 0 then\n        return lst[#lst]\n    else\n        return -1\n\
    \    end\nend", "    local freq = {}\n    for _, n in ipairs(lst) do\n       \
    \ freq[n] = (freq[n] or 0) + 1\n    end\n    local biggest = -1\n    for _, n\
    \ in ipairs(lst) do\n        if freq[n] >= n and n > biggest then\n          \
    \  biggest = n\n        end\n    end\n    return biggest\nend", "    local d =\
    \ {}\n    for i = 1, #lst do\n        if d[lst[i]] == nil then\n            d[lst[i]]\
    \ = 1\n        else\n            d[lst[i]] = d[lst[i]] + 1\n        end\n    end\n\
    \    local max = 0\n    for k, v in pairs(d) do\n        if k > v and k > max\
    \ then\n            max = k\n        end\n    end\n    return max\nend", "   \
    \ local t = {}\n    for _, n in ipairs(lst) do\n        t[n] = t[n] and t[n] +\
    \ 1 or 1\n    end\n    local n\n    for _, n in ipairs(lst) do\n        if n <=\
    \ t[n] then\n            return n\n        end\n    end\n    return -1\nend",
  "    local max_value, max_frequency = 0, 0\n    local frequencies = {}\n    for\
    \ _, value in ipairs(lst) do\n        local frequency = (frequencies[value] or\
    \ 0) + 1\n        frequencies[value] = frequency\n        if value > max_value\
    \ and frequency >= value then\n            max_value, max_frequency = value, frequency\n\
    \        end\n    end\n    return max_value > 0 and max_value or -1\nend", " \
    \   local max = -1\n    local map = {}\n    for i = 1, #lst do\n        local\
    \ v = lst[i]\n        if not map[v] then\n            map[v] = 1\n        else\n\
    \            map[v] = map[v] + 1\n        end\n        if v > 0 and v <= map[v]\
    \ and v > max then\n            max = v\n        end\n    end\n    return max\n\
    end", "  local ctbl, ctbl2 = {}, {}\n  for i = 1, #lst do\n    ctbl[lst[i]] =\
    \ (ctbl[lst[i]] or 0) + 1\n  end\n  for k, v in pairs(ctbl) do\n    if k <= v\
    \ then\n      table.insert(ctbl2, k)\n    end\n  end\n  if #ctbl2 > 0 then\n \
    \   return math.max(unpack(ctbl2))\n  else\n    return -1\n  end\nend", "    local\
    \ t = {}\n    for _, x in ipairs(lst) do\n        t[x] = t[x] or 0\n        t[x]\
    \ = t[x] + 1\n    end\n    local k, v = -1, -1\n    for x, n in pairs(t) do\n\
    \        if n >= x and n > v then\n            k, v = x, n\n        end\n    end\n\
    \    return k\nend", "  local t = {}\n  for _,v in ipairs(lst) do\n    t[v] =\
    \ t[v] and t[v] + 1 or 1\n  end\n  local val = -1\n  for k,v in pairs(t) do\n\
    \    if (v >= k) and (k > val) then\n      val = k\n    end\n  end\n  return val\n\
    end", "  local found = -1\n  local freq  = 0\n  for _,i in ipairs(lst) do\n  \
    \  if i > freq then\n      local cnt = 0\n      for _,j in ipairs(lst) do\n  \
    \      if i == j then\n          cnt = cnt + 1\n        end\n      end\n     \
    \ if cnt >= i then\n        found = i\n        freq  = cnt\n      end\n    end\n\
    \  end\n  return found\nend", "    local map = {}\n    for i, v in ipairs(lst)\
    \ do\n        map[v] = (map[v] or 0) + 1\n    end\n    local max = -1\n    for\
    \ k, v in pairs(map) do\n        if (v >= k) and (max < k) then\n            max\
    \ = k\n        end\n    end\n    return max\nend", "  local t = {}\n  for _,v\
    \ in ipairs(lst) do\n    t[v] = (t[v] or 0) + 1\n  end\n  local i = #lst\n  while\
    \ i > 0 do\n    if t[i] and t[i] >= i then\n      return i\n    end\n    i = i\
    \ - 1\n  end\n  return -1\nend", "  local mx = -1\n  local freq = {}\n  for _,\
    \ v in ipairs(lst) do\n    freq[v] = (freq[v] or 0) + 1\n    if freq[v] >= v and\
    \ v > mx then\n      mx = v\n    end\n  end\n  return mx\nend", "\tlocal dic =\
    \ {}\n\tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif v >\
    \ max then\n\t\t\tmax = v\n\t\tend\n\t\tdic[v] = (dic[v] or 0) + 1\n\tend\n\t\
    for i = 1, max do\n\t\tif dic[i] >= i then\n\t\t\treturn i\n\t\tend\n\tend\n\t\
    return -1\nend", "  local c = {}\n  for _, v in ipairs(lst) do\n    if c[v] then\n\
    \      c[v] = c[v] + 1\n    else\n      c[v] = 1\n    end\n  end\n  local ret\
    \ = -1\n  for k, v in pairs(c) do\n    if v >= k and k > ret then\n      ret =\
    \ k\n    end\n  end\n  return ret\nend", "  local cnt = {}\n  for _, x in ipairs(lst)\
    \ do\n    cnt[x] = (cnt[x] or 0) + 1\n  end\n  for _, x in ipairs(lst) do\n  \
    \  if cnt[x] >= x then\n      return x\n    end\n  end\n  return -1\nend", " \
    \ local m = {}\n  for i = 1, #lst do\n    if m[lst[i]] == nil then\n      m[lst[i]]\
    \ = 1\n    else\n      m[lst[i]] = m[lst[i]] + 1\n    end\n  end\n  local r =\
    \ -1\n  for i = 1, #lst do\n    if lst[i] > 0 and m[lst[i]] >= lst[i] and lst[i]\
    \ > r then\n      r = lst[i]\n    end\n  end\n  return r\nend", "\tlocal max,frequencies\
    \ = lst[1], {}\n\tfor _,num in ipairs(lst) do\n\t\tif num > max then max = num\
    \ end\n\t\tfrequencies[num] = (frequencies[num] or 0) + 1\n\tend\n\tfor i = max,1,-1\
    \ do\n\t\tif frequencies[i] and frequencies[i] >= i then return i end\n\tend\n\
    \treturn -1\nend", "    local result = -1\n    local val = 0\n    for _, v in\
    \ ipairs(lst) do\n        if v > val then\n            local count = 0\n     \
    \       for _, v2 in ipairs(lst) do\n                if v2 == v then\n       \
    \             count = count + 1\n                end\n            end\n      \
    \      if count >= v then\n                result = v\n                val = v\n\
    \            end\n        end\n    end\n    return result\nend", "  local count\
    \ = {}\n  for _, i in ipairs(lst) do\n    count[i] = (count[i] or 0) + 1\n  end\n\
    \  local max = -1\n  for k, v in pairs(count) do\n    if k <= v and k > max then\n\
    \      max = k\n    end\n  end\n  return max\nend", "    local max = -1\n    local\
    \ max_freq = -1\n    local counts = {}\n    for _, v in ipairs(lst) do\n     \
    \   counts[v] = (counts[v] or 0) + 1\n        if counts[v] >= v and v > max_freq\
    \ then\n            max_freq = v\n            max = v\n        end\n    end\n\
    \    return max\nend", "  local freq = {}\n  for i,v in ipairs(lst) do\n    freq[v]\
    \ = freq[v] or 0\n    freq[v] = freq[v] + 1\n  end\n  for i,v in ipairs(lst) do\n\
    \    if freq[v] >= v then\n      return v\n    end\n  end\n  return -1\nend\n\
    return search", "    local count = {}\n    for _, num in ipairs(lst) do\n    \
    \    count[num] = (count[num] or 0) + 1\n    end\n    local best_num, best_count\
    \ = -1, 0\n    for num, cnt in pairs(count) do\n        if num <= cnt and cnt\
    \ > best_count then\n            best_num, best_count = num, cnt\n        end\n\
    \    end\n    return best_num\nend", "    local res = -1\n    local t = {}\n \
    \   for _, v in ipairs(lst) do\n        t[v] = (t[v] or 0) + 1\n    end\n    for\
    \ i = #lst, 1, -1 do\n        if (t[i] or 0) >= i then\n            res = i\n\
    \            break\n        end\n    end\n    return res\nend", "    for i=1,#lst,1\
    \ do\n        local f = 0\n        for _,v in ipairs(lst) do\n            if v\
    \ == lst[i] then\n                f = f + 1\n            end\n        end\n  \
    \      if f >= lst[i] then\n            return lst[i]\n        end\n    end\n\
    \    return -1\nend", "    local max = -1\n    local min = 1000\n    local frequency\
    \ = {}\n    for i,v in ipairs(lst) do\n        if v < min then\n            min\
    \ = v\n        end\n        if v > max then\n            max = v\n        end\n\
    \        if frequency[v] == nil then\n            frequency[v] = 1\n        else\n\
    \            frequency[v] = frequency[v] + 1\n        end\n    end\n    for i\
    \ = min, max do\n        if frequency[i] ~= nil and frequency[i] >= i then\n \
    \           return i\n        end\n    end\n    return -1\nend", "    local elems\
    \ = {}\n    for _, x in ipairs(lst) do\n        elems[x] = (elems[x] or 0) + 1\n\
    \    end\n    for x = math.max(unpack(lst)) - 1, 1, -1 do\n        if elems[x]\
    \ and elems[x] >= x then\n            return x\n        end\n    end\n    return\
    \ -1\nend", "  local frequency = {}\n  for _, v in ipairs(lst) do\n    if v >\
    \ 0 then\n      if frequency[v] then\n        frequency[v] = frequency[v] + 1\n\
    \      else\n        frequency[v] = 1\n      end\n    end\n  end\n  local max\
    \ = 0\n  for k, v in pairs(frequency) do\n    if k >= v and k > max then\n   \
    \   max = k\n    end\n  end\n  if max == 0 then\n    return -1\n  else\n    return\
    \ max\n  end\nend", "\tlocal result = -1\n\tlocal freq = {}\n\tfor i = 1, #lst\
    \ do\n\t\tlocal v = lst[i]\n\t\tfreq[v] = (freq[v] or 0) + 1\n\t\tif v > result\
    \ and freq[v] >= v then\n\t\t\tresult = v\n\t\tend\n\tend\n\treturn result\nend",
  "    local val = 0\n    for _, item in ipairs(lst) do\n        if item > val then\n\
    \            val = item\n        end\n    end\n    if val > 0 then\n        local\
    \ count = 0\n        for _, item in ipairs(lst) do\n            if item == val\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count >= val then\n            return val\n        end\n    end\n    return\
    \ -1\nend", "    local count = {}\n    for i = 1, #lst do\n        if count[lst[i]]\
    \ == nil then\n            count[lst[i]] = 1\n        else\n            count[lst[i]]\
    \ = count[lst[i]] + 1\n        end\n    end\n    local result = -1\n    for key,\
    \ val in pairs(count) do\n        if key <= val and key > result then\n      \
    \      result = key\n        end\n    end\n    return result\nend", "  local vals\
    \ = {}\n  for _,v in ipairs(lst) do\n    vals[v] = vals[v] and vals[v] + 1 or\
    \ 1\n  end\n  for i=#lst,1,-1 do\n    if vals[i] >= i then\n      return i\n \
    \   end\n  end\n  return -1\nend", "    local values = {}\n    for _, v in ipairs(lst)\
    \ do\n        values[v] = values[v] or 0\n        values[v] = values[v] + 1\n\
    \    end\n    local g = -1\n    for k, v in pairs(values) do\n        if k > v\
    \ and k > g then\n            g = k\n        end\n    end\n    return g\nend",
  "  local function cmp(x, y)\n    return x < y\n  end\n  table.sort(lst, cmp)\n \
    \ -- table.remove(lst, 1)\n  for i, x in ipairs(lst) do\n    -- print(\"looping\"\
    , x)\n    -- print(\"x\", x)\n    -- print(\"count\", count)\n    local count\
    \ = 1\n    while lst[i + count] and lst[i + count] == x do\n      count = count\
    \ + 1\n    end\n    -- print(\"count\", count)\n    if count >= x then\n     \
    \ return x\n    end\n  end\n  return -1\nend", "    local count = {}\n    for\
    \ _, v in ipairs(lst) do\n        if not count[v] then\n            count[v] =\
    \ 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n\
    \    local max = -1\n    for k, v in pairs(count) do\n        if v >= k and k\
    \ > max then\n            max = k\n        end\n    end\n    return max\nend",
  "\tlocal d = {}\n\tfor _, num in ipairs(lst) do\n\t\tif d[num] then\n\t\t\td[num]\
    \ = d[num] + 1\n\t\telse\n\t\t\td[num] = 1\n\t\tend\n\tend\n\tlocal search = -1\n\
    \tfor num, count in pairs(d) do\n\t\tif (count >= num) and (num > search) then\n\
    \t\t\tsearch = num\n\t\tend\n\tend\n\treturn search\nend", "    local res = -1\n\
    \    local numbers = {}\n    for _, v in ipairs(lst) do\n        numbers[v] =\
    \ (numbers[v] or 0) + 1\n    end\n    for k, v in pairs(numbers) do\n        if\
    \ k <= v and k > res then\n            res = k\n        end\n    end\n    return\
    \ res\nend", "    local map = {}\n    for _, e in ipairs(lst) do\n        map[e]\
    \ = (map[e] or 0) + 1\n    end\n    local max_freq = math.max(unpack(lst))\n \
    \   for _, freq in ipairs(lst) do\n        if freq >= map[freq] and freq > max_freq\
    \ then\n            max_freq = freq\n        end\n    end\n    return max_freq\
    \ > 0 and max_freq or -1\nend", "  local freq = {}\n  for _, v in ipairs(lst)\
    \ do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  for _, v in ipairs(lst) do\n\
    \    if freq[v] >= v then\n      return v\n    end\n  end\n  return -1\nend",
  "    local max = 0\n    local count = 0\n    for _, i in ipairs(lst) do\n      \
    \  if i > max then\n            max = i\n        end\n    end\n    for _, i in\
    \ ipairs(lst) do\n        if i == max then\n            count = count + 1\n  \
    \      end\n    end\n    if count >= max then\n        return max\n    else\n\
    \        return -1\n    end\nend", "  local t = {}\n  for _, v in ipairs(lst)\
    \ do\n    t[v] = (t[v] or 0) + 1\n  end\n  local nums = {}\n  for k, v in pairs(t)\
    \ do\n    nums[#nums + 1] = {k, v}\n  end\n  table.sort(nums, function(a, b) return\
    \ a[1] < b[1] end)\n  for _, v in ipairs(nums) do\n    if v[1] <= v[2] then\n\
    \      return v[1]\n    end\n  end\n  return -1\nend", "    local max = -1\n \
    \   local freq = {}\n    for _, el in ipairs(lst) do\n        freq[el] = (freq[el]\
    \ or 0) + 1\n        if el > max and freq[el] >= el then\n            max = el\n\
    \        end\n    end\n    return max\nend", "    local max_value = 0\n    local\
    \ max_frequency = 0\n    local max_int = -1\n    local frequency = {}\n    for\
    \ i,v in ipairs(lst) do\n        if not frequency[v] then\n            frequency[v]\
    \ = 1\n        else\n            frequency[v] = frequency[v] + 1\n        end\n\
    \        if v > max_value then\n            max_value = v\n        end\n    end\n\
    \    for i = max_value, 1, -1 do\n        if frequency[i] and frequency[i] >=\
    \ i then\n            return i\n        end\n    end\n    return max_int\nend",
  "    local result = -1\n    local cnt = {}\n    for i,v in ipairs(lst) do\n    \
    \    cnt[v] = (cnt[v] or 0) + 1\n    end\n    for i,v in ipairs(lst) do\n    \
    \    if cnt[v] >= v and v > result then\n            result = v\n        end\n\
    \    end\n    return result\nend", "    local d = {}\n    for i = 1, #lst do\n\
    \        if d[lst[i]] == nil then\n            d[lst[i]] = 1\n        else\n \
    \           d[lst[i]] = d[lst[i]] + 1\n        end\n    end\n    local num = -1\n\
    \    for k, v in pairs(d) do\n        if v >= k and k > num then\n           \
    \ num = k\n        end\n    end\n    return num\nend", "  local hash = {}\n  for\
    \ _, v in ipairs(lst) do\n    if not hash[v] then\n      hash[v] = 1\n    else\n\
    \      hash[v] = hash[v] + 1\n    end\n  end\n  local res = -1\n  for _, v in\
    \ ipairs(lst) do\n    if hash[v] >= v and v > res then\n      res = v\n    end\n\
    \  end\n  return res\nend", "    local str = \"\"\n    for _, v in ipairs(lst)\
    \ do\n        str = str .. v\n    end\n    for i = 9, 1, -1 do\n        if tonumber(str:match(i\
    \ .. \"+\")) and tonumber(str:match(i .. \"+\")) >= i then\n            return\
    \ i\n        end\n    end\n    return -1\nend", "    local mx = 0\n    local tbl\
    \ = {}\n    for i = 1, #lst do\n        local num = lst[i]\n        if num > mx\
    \ then\n            mx = num\n        end\n        if tbl[num] then\n        \
    \    tbl[num] = tbl[num] + 1\n        else\n            tbl[num] = 1\n       \
    \ end\n    end\n    for i = mx, 1, -1 do\n        if tbl[i] and tbl[i] >= i then\n\
    \            return i\n        end\n    end\n    return -1\nend", "  local count\
    \ = {}\n  for i = 1, #lst do\n    local v = lst[i]\n    count[v] = (count[v] or\
    \ 0) + 1\n  end\n  local result = -1\n  for i = 1, #lst do\n    local v = lst[i]\n\
    \    if count[v] >= v and v > result then\n      result = v\n    end\n  end\n\
    \  return result\nend", "    local len = #lst\n    local freq = {}\n    for i\
    \ = 1, len do\n        if not freq[lst[i]] then\n            freq[lst[i]] = 1\n\
    \        else\n            freq[lst[i]] = freq[lst[i]] + 1\n        end\n    end\n\
    \    for i = 1, len do\n        if freq[lst[i]] >= lst[i] then\n            return\
    \ lst[i]\n        end\n    end\n    return -1\nend", "    local cnt = {}\n   \
    \ for _, x in ipairs(lst) do\n        cnt[x] = (cnt[x] or 0) + 1\n    end\n  \
    \  local res = -1\n    for k, v in pairs(cnt) do\n        if v >= k and k > res\
    \ then\n            res = k\n        end\n    end\n    return res\nend", "  local\
    \ res = -1\n  local tbl = {}\n  for _, val in ipairs(lst) do\n    tbl[val] = tbl[val]\
    \ and tbl[val] + 1 or 1\n  end\n  for _, val in ipairs(lst) do\n    if tbl[val]\
    \ >= val and val > res then\n      res = val\n    end\n  end\n  return res\nend",
  "  local counts = {}\n  for _, v in ipairs(lst) do\n    counts[v] = (counts[v] or\
    \ 0) + 1\n  end\n  local max = -1\n  for v, c in pairs(counts) do\n    if c >=\
    \ v and v > max then\n      max = v\n    end\n  end\n  return max\nend", "   \
    \ local freq = {}\n    for i = 1, #lst do\n        if not freq[lst[i]] then\n\
    \            freq[lst[i]] = 1\n        else\n            freq[lst[i]] = freq[lst[i]]\
    \ + 1\n        end\n    end\n    local max = -1\n    for i = 1, #lst do\n    \
    \    if freq[lst[i]] and freq[lst[i]] >= lst[i] and lst[i] > max then\n      \
    \      max = lst[i]\n        end\n    end\n    return max\nend", "    local counter\
    \ = {}\n    for _, num in ipairs(lst) do\n        counter[num] = (counter[num]\
    \ or 0) + 1\n    end\n    local result = -1\n    for num, count in pairs(counter)\
    \ do\n        if count >= num and num > result then\n            result = num\n\
    \        end\n    end\n    return result\nend", "    local m, f = 1, -1\n    for\
    \ i = #lst, 1, -1 do\n        local e = lst[i]\n        if e > f then\n      \
    \      f = 0\n            for j = 1, #lst do\n                if lst[j] == e then\n\
    \                    f = f + 1\n                end\n            end\n       \
    \     if f >= e then\n                m = e\n            end\n        end\n  \
    \  end\n    return m > 0 and m or -1\nend", "    local h = {}\n    for _, n in\
    \ ipairs(lst) do\n        h[n] = h[n] or 0\n        h[n] = h[n] + 1\n    end\n\
    \    local greatest = -1\n    for _, n in ipairs(lst) do\n        if h[n] >= n\
    \ and n > greatest then\n            greatest = n\n        end\n    end\n    return\
    \ greatest\nend", "  local freq = {}\n  for _,v in ipairs(lst) do\n    if freq[v]\
    \ == nil then\n      freq[v] = 1\n    else\n      freq[v] = freq[v] + 1\n    end\n\
    \  end\n  local x, res = -1, -1\n  for k,v in pairs(freq) do\n    if v >= k and\
    \ k > x then\n      x = k\n      res = k\n    end\n  end\n  return res\nend",
  "    local freq = {}\n    for i = 1, #lst do\n        if not freq[lst[i]] then\n\
    \            freq[lst[i]] = 1\n        else\n            freq[lst[i]] = freq[lst[i]]\
    \ + 1\n        end\n    end\n    for i = #lst, 1, -1 do\n        if freq[i] and\
    \ freq[i] >= i then\n            return i\n        end\n    end\n    return -1\n\
    end", "  local cnt, max = {}, -1\n  for _,x in ipairs(lst) do\n    cnt[x] = (cnt[x]\
    \ or 0) + 1\n    if cnt[x] >= x and x > max then\n      max = x\n    end\n  end\n\
    \  return max\nend", "    local arr = {}\n    for _, v in ipairs(lst) do\n   \
    \     arr[v] = (arr[v] or 0) + 1\n    end\n    for _, v in ipairs(lst) do\n  \
    \      if v <= arr[v] then\n            return v\n        end\n    end\n    return\
    \ -1\nend", "    -- map from element to frequency\n    local counts = {}\n   \
    \ for _, e in ipairs(lst) do\n        counts[e] = (counts[e] or 0) + 1\n    end\n\
    \    -- search for the greatest element with frequency >= element\n    local max\
    \ = -1\n    for _, e in ipairs(lst) do\n        if e > max and e <= counts[e]\
    \ then\n            max = e\n        end\n    end\n    return max\nend", "   \
    \ local t = {}\n    for _, v in ipairs(lst) do\n        t[v] = (t[v] or 0) + 1\n\
    \    end\n    for k, v in pairs(t) do\n        if v >= k then\n            return\
    \ k\n        end\n    end\n    return -1\nend", "    local frq = {}\n    for i\
    \ = 1, #lst do\n        local val = lst[i]\n        if not frq[val] then\n   \
    \         frq[val] = 1\n        else\n            frq[val] = frq[val] + 1\n  \
    \      end\n    end\n    local max = -1\n    for k, v in pairs(frq) do\n     \
    \   if v >= k and k > max then\n            max = k\n        end\n    end\n  \
    \  return max\nend\nreturn search", "    local max = -1\n    local max_num = -1\n\
    \    for _,i in ipairs(lst) do\n        local counter = 0\n        for _,j in\
    \ ipairs(lst) do\n            if i == j then\n                counter = counter\
    \ + 1\n            end\n        end\n        if counter >= i and i > max_num then\n\
    \            max = i\n            max_num = counter\n        end\n    end\n  \
    \  return max\nend", "  local d, m = {}, 0\n  for _, i in ipairs(lst) do\n   \
    \ d[i] = (d[i] or 0) + 1\n    if d[i] >= i and i > m then m = i end\n  end\n \
    \ return m == 0 and -1 or m\nend", "  local count, result = {}, -1\n  for _, v\
    \ in ipairs(lst) do\n    if count[v] then count[v] = count[v] + 1\n    else count[v]\
    \ = 1 end\n    if v ~= -1 and count[v] >= v and v > result then result = v end\n\
    \  end\n  return result\nend", "\tlocal max = -1\n\tfor i, v in ipairs(lst) do\n\
    \t\tlocal count = 0\n\t\tfor k, j in ipairs(lst) do\n\t\t\tif j == v then\n\t\t\
    \t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count >= v and v > max then\n\
    \t\t\tmax = v\n\t\tend\n\tend\n\treturn max\nend", "    local hmap = {}\n    for\
    \ _, v in ipairs(lst) do\n        if hmap[v] == nil then\n            hmap[v]\
    \ = 1\n        else\n            hmap[v] = hmap[v] + 1\n        end\n    end\n\
    \    local max_k = -1\n    local max_v = -1\n    for k, v in pairs(hmap) do\n\
    \        if k > max_k and v >= k then\n            max_k = k\n            max_v\
    \ = v\n        end\n    end\n    return max_k\nend", "  local max = -1\n  local\
    \ freq = {}\n  for _, i in ipairs(lst) do\n    if i > max then\n      max = i\n\
    \    end\n    if freq[i] == nil then\n      freq[i] = 1\n    else\n      freq[i]\
    \ = freq[i] + 1\n    end\n  end\n  for i = max, 1, -1 do\n    if freq[i] ~= nil\
    \ and freq[i] >= i then\n      return i\n    end\n  end\n  return -1\nend", " \
    \ local counts = {}\n  for _, i in ipairs(lst) do\n    counts[i] = (counts[i]\
    \ or 0) + 1\n  end\n  local max = -1\n  for i, count in pairs(counts) do\n   \
    \ if i <= count and i > max then\n      max = i\n    end\n  end\n  return max\n\
    end", "  return -1\nend", "    local numbers = {}\n    for _, num in ipairs(lst)\
    \ do\n        if not numbers[num] then\n            numbers[num] = {count = 0,\
    \ num = num}\n        end\n        numbers[num].count = numbers[num].count + 1\n\
    \    end\n    local greatest = {count = 0, num = 0}\n    for _, num in pairs(numbers)\
    \ do\n        if num.count >= num.num and num.count > greatest.count then\n  \
    \          greatest = num\n        end\n    end\n    if greatest.count == 0 then\n\
    \        return -1\n    end\n    return greatest.num\nend", "  local prevVal =\
    \ -1\n  local currentVal = -1\n  local prevValCount = 0\n  local currentValCount\
    \ = 0\n  local i\n  local maxVal = -1\n  local maxValCount = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == currentVal then\n      currentValCount = currentValCount\
    \ + 1\n    else\n      if prevVal ~= -1 then\n        if prevValCount == prevVal\
    \ then\n          maxVal = prevVal\n          maxValCount = prevValCount\n   \
    \     elseif prevValCount > prevVal and prevValCount > maxValCount then\n    \
    \      maxVal = prevVal\n          maxValCount = prevValCount\n        end\n \
    \     end\n      prevVal = currentVal\n      prevValCount = currentValCount\n\
    \      currentVal = lst[i]\n      currentValCount = 1\n    end\n  end\n  if prevValCount\
    \ == prevVal then\n    maxVal = prevVal\n    maxValCount = prevValCount\n  elseif\
    \ prevValCount > prevVal and prevValCount > maxValCount then\n    maxVal = prevVal\n\
    \    maxValCount = prevValCount\n  end\n  return maxVal\nend", "\tlocal arr =\
    \ {}\n\tlocal max = -1\n\tlocal maxInt = -1\n\tfor i, v in ipairs(lst) do\n\t\t\
    if not arr[v] then\n\t\t\tarr[v] = 0\n\t\tend\n\t\tarr[v] = arr[v] + 1\n\t\tif\
    \ arr[v] >= v and v > max then\n\t\t\tmax = v\n\t\t\tmaxInt = v\n\t\tend\n\tend\n\
    \treturn maxInt\nend", "    local counter = {}\n    for _, v in ipairs(lst) do\n\
    \        counter[v] = (counter[v] or 0) + 1\n    end\n    local max = -1\n   \
    \ for k, v in pairs(counter) do\n        if v >= k and k > max then\n        \
    \    max = k\n        end\n    end\n    return max\nend", "    local result =\
    \ -1\n    local amount = 0\n    local t = {}\n    for i = 1, #lst do\n       \
    \ if not t[lst[i]] then\n            t[lst[i]] = 1\n        else\n           \
    \ t[lst[i]] = t[lst[i]] + 1\n        end\n    end\n    for k, v in pairs(t) do\n\
    \        if k <= v and k > result then\n            result = k\n            amount\
    \ = v\n        elseif k > v and amount < v then\n            result = k\n    \
    \        amount = v\n        end\n    end\n    return result\nend", "    local\
    \ dict = {}\n    for _, v in ipairs(lst) do\n        dict[v] = (dict[v] or 0)\
    \ + 1\n    end\n    local max\n    for k, v in pairs(dict) do\n        if v >=\
    \ k and (not max or k > max) then\n            max = k\n        end\n    end\n\
    \    return max or -1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
