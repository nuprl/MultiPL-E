name: HumanEval_108_count_nums
language: lua
prompt: "-- Write a function count_nums which takes an array of integers and returns\n\
  -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
  \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
  \ -1, 2, and 3.\nlocal function count_nums(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2, 0}),\
  \ 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
  \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
  \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
  \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- TODO: Write your solution here\nend", "    local count = 0\n \
    \   for i = 1, #arr do\n        if arr[i] ~= 0 then\n            local digits\
    \ = {}\n            local num = arr[i]\n            while num ~= 0 do\n      \
    \          table.insert(digits, num % 10)\n                num = math.floor(num\
    \ / 10)\n            end\n            local sum = 0\n            for j = 1, #digits\
    \ do\n                sum = sum + digits[j]\n            end\n            if sum\
    \ > 0 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, n in ipairs(arr)\
    \ do\n    if is_num_exception(n) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tfor _, num in ipairs(arr) do\n\t\t\
    local sum = 0\n\t\twhile num ~= 0 do\n\t\t\tsum = sum + num % 10\n\t\t\tnum =\
    \ math.floor(num / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  local count = 0\n  for _, v in ipairs(arr)\
    \ do\n    local sum = 0\n    local abs_v = math.abs(v)\n    while abs_v > 0 do\n\
    \      sum = sum + (abs_v % 10)\n      abs_v = math.floor(abs_v / 10)\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "\tlocal cnt = 0\n\tfor _, x in ipairs(arr) do\n\t\tif x ~= 0 then\n\t\t\
    \tlocal sum = 0\n\t\t\tlocal xi = x\n\t\t\twhile xi ~= 0 do\n\t\t\t\tsum = sum\
    \ + math.abs(xi % 10)\n\t\t\t\txi = math.floor(xi / 10)\n\t\t\tend\n\t\t\tif sum\
    \ > 0 then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend",
  "    local cnt = 0\n    for i, x in ipairs(arr) do\n        local sx = x < 0 and\
    \ -x or x\n        while sx > 0 do\n            if sx % 10 > 0 then\n        \
    \        cnt = cnt + 1\n                break\n            end\n            sx\
    \ = sx / 10\n        end\n    end\n    return cnt\nend", "    local count = 0\n\
    \    for i = 1, #arr do\n        local sum = 0\n        local temp = arr[i]\n\
    \        if temp < 0 then\n            temp = temp * -1\n        end\n       \
    \ while temp > 0 do\n            sum = sum + temp % 10\n            temp = math.floor(temp\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor _, i\
    \ in ipairs(arr) do\n\t\tlocal digits = math.abs(i)\n\t\tlocal sum = 0\n\t\twhile\
    \ digits > 0 do\n\t\t\tsum = sum + (digits % 10)\n\t\t\tdigits = math.floor(digits\
    \ / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n\
    \        local sum = 0\n        local is_negative = num < 0\n        num = math.abs(num)\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if is_negative then\n           \
    \ sum = sum - 9\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for _,n in ipairs(arr) do\n        if sum_digits(n) > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  -- TODO\nend",
  "    local function sign(x)\n        return x >= 0 and 1 or -1\n    end\n    local\
    \ function digits(x)\n        local arr = {}\n        while x ~= 0 do\n      \
    \      table.insert(arr, sign(x) * (x % 10))\n            x = math.floor(x / 10)\n\
    \        end\n        return arr\n    end\n    local function sum(arr)\n     \
    \   local sum = 0\n        for _, v in ipairs(arr) do\n            sum = sum +\
    \ v\n        end\n        return sum\n    end\n    local count = 0\n    for _,\
    \ v in ipairs(arr) do\n        if sum(digits(v)) > 0 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nassert(count_nums({0,\
    \ 99, -94, -99, 99, -100, -96, 99, 0, 0, 99, 100, -100, -99, -99, -99, 99, -99,\
    \ 99, 99, 0, 99, 99, 99, -99, -99, -99, -99, -99, -99, -99, -99, 99, -99, 99,\
    \ 99, -99, 99, 99, 99, 99, 0, 99, -99, -99, 99, -99, -99, -99, -99, -99, -99,\
    \ -99, -99, 99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,\
    \ -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,\
    \ -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,\
    \ -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99, -99,\
    \ -99,", "  local count = 0\n  for _, v in ipairs(arr) do\n    local digits =\
    \ {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n    for d in tostring(v):gmatch('.') do\n  \
    \    digits[tonumber(d)] = (digits[tonumber(d)] or 0) + 1\n    end\n    if digits[1]\
    \ > 0 or digits[2] > 0 or digits[3] > 0 or digits[4] > 0 or\n       digits[5]\
    \ > 0 or digits[6] > 0 or digits[7] > 0 or digits[8] > 0 or\n       digits[9]\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local count = 0\n  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      local\
    \ sum = 0\n      v = math.abs(v)\n      while v > 0 do\n        sum = sum + v\
    \ % 10\n        v = math.floor(v / 10)\n      end\n      if sum > 0 then\n   \
    \     count = count + 1\n      end\n    end\n  end\n  return count\nend", "  \
    \  local total = 0\n    for _, n in ipairs(arr) do\n        local sum = 0\n  \
    \      local sign = 1\n        if n < 0 then\n            sign = -1\n        \
    \    n = -n\n        end\n        while n > 0 do\n            sum = sum + n %\
    \ 10\n            n = math.floor(n / 10)\n        end\n        if sign * sum >\
    \ 0 then\n            total = total + 1\n        end\n    end\n    return total\n\
    end", "    local cnt = 0\n    for i = 1, #arr do\n        local sum = 0\n    \
    \    local num = arr[i]\n        while num ~= 0 do\n            sum = sum + num\
    \ % 10\n            num = num // 10\n        end\n        if sum > 0 then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for d in string.gmatch(tostring(v),\
    \ \"[+-]?%d\") do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    -- Exercise\
    \ 2.1\nend", "    local len = #arr\n    local num_nums = 0\n    for i = 1, len\
    \ do\n        local sum = 0\n        local n = arr[i]\n        if n < 0 then\n\
    \            n = -n\n        end\n        while n > 0 do\n            sum = sum\
    \ + n % 10\n            n = math.floor(n / 10)\n        end\n        if sum >\
    \ 0 then\n            num_nums = num_nums + 1\n        end\n    end\n    return\
    \ num_nums\nend", "  local cnt = 0\n  for _, n in ipairs(arr) do\n    local s\
    \ = 0\n    local d = 1\n    if n < 0 then d = -1 end\n    while n ~= 0 do\n  \
    \    s = s + (d * (n % 10))\n      n = math.floor(n / 10)\n    end\n    if s >\
    \ 0 then cnt = cnt + 1 end\n  end\n  return cnt\nend", "  local count = 0\n  for\
    \ i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n    while num ~=\
    \ 0 do\n      sum = sum + math.abs(num % 10)\n      num = math.floor(num / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    if num == 0 then\n      count = count + 1\n    else\n      local sum = 0\n\
    \      local num_copy = num\n      -- Modulo by 10 to get the signed digit, and\
    \ then divide by 10 to\n      -- remove it from the number.\n      while num_copy\
    \ ~= 0 do\n        sum = sum + math.abs(num_copy % 10)\n        num_copy = math.floor(num_copy\
    \ / 10)\n      end\n      if sum > 0 then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #arr do\n\
    \    local sum = 0\n    local n = arr[i]\n    if n < 0 then\n      n = n - n -\
    \ n\n    end\n    while n > 0 do\n      sum = sum + n % 10\n      n = n // 10\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local nums = 0\n  for _, num in ipairs(arr) do\n    local sum\
    \ = 0\n    for char in tostring(num):gmatch('[0-9]') do\n      sum = sum + tonumber(char)\n\
    \    end\n    if sum > 0 then\n      nums = nums + 1\n    end\n  end\n  return\
    \ nums\nend", "    local count = 0\n    for _, v in ipairs(arr) do\n        if\
    \ sum_digits(v) > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local num_count = 0\n  for i, v in ipairs(arr) do\n\
    \    local signed_digits = split_number(v)\n    local digits_sum = 0\n    for\
    \ _, v in ipairs(signed_digits) do\n      digits_sum = digits_sum + v\n    end\n\
    \    if digits_sum > 0 then\n      num_count = num_count + 1\n    end\n  end\n\
    \  return num_count\nend", "\tlocal nums = 0", "    local count = 0\n    for _,\
    \ v in ipairs(arr) do\n        local sum = 0\n        while v ~= 0 do\n      \
    \      sum = sum + math.abs(v % 10)\n            v = math.floor(v / 10)\n    \
    \    end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local c = 0\n  for _, i in ipairs(arr) do\n\
    \    if digsum(i) > 0 then\n      c = c + 1\n    end\n  end\n  return c\nend",
  "    local total = 0\n    for i, num in ipairs(arr) do\n        local sum = 0\n\
    \        while num ~= 0 do\n            local digit = num % 10\n            num\
    \ = math.floor(num / 10)\n            sum = sum + digit\n        end\n       \
    \ if sum > 0 then\n            total = total + 1\n        end\n    end\n    return\
    \ total\nend", "    local cnt = 0\n    for i = 1, #arr do\n        local num =\
    \ arr[i]\n        local sum = 0\n        if num == 0 then\n            sum = 0\n\
    \        elseif num < 0 then\n            num = -num\n            local digit\
    \ = num % 10\n            num = (num - digit) / 10\n            sum = digit\n\
    \            while num > 0 do\n                digit = num % 10\n            \
    \    num = (num - digit) / 10\n                sum = sum + digit\n           \
    \ end\n            sum = -sum\n        else\n            local digit = num % 10\n\
    \            num = (num - digit) / 10\n            sum = digit\n            while\
    \ num > 0 do\n                digit = num % 10\n                num = (num - digit)\
    \ / 10\n                sum = sum + digit\n            end\n        end\n    \
    \    if sum > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "    local count = 0\n    for i,v in ipairs(arr) do\n        if sum_digits(v)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  return 0\nend", "  local count = 0\n  for i = 1, #arr do\n    local num\
    \ = arr[i]\n    local num_sum = 0\n    while num ~= 0 do\n      num_sum = num_sum\
    \ + num % 10\n      num = math.floor(num / 10)\n    end\n    if num_sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local result\
    \ = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n        while\
    \ num ~= 0 do\n            local digit = num % 10\n            sum = sum + math.abs(digit)\n\
    \            num = math.floor(num / 10)\n        end\n        if sum > 0 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend",
  "\tlocal count = 0", "  local count = 0\n  for i, num in ipairs(arr) do\n    if\
    \ num ~= 0 then\n      local sum = 0\n      while num ~= 0 do\n        sum = sum\
    \ + math.abs(num % 10)\n        num = math.floor(num / 10)\n      end\n      if\
    \ sum > 0 then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "    if type(arr) ~= \"table\" then\n        return 0\n    end\n\
    \    local count = 0\n    for i,v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            local sum = 0\n            while v ~= 0 do\n                local\
    \ div, mod = math.modf(v / 10)\n                v = div\n                sum =\
    \ sum + math.abs(mod)\n            end\n            if sum > 0 then\n        \
    \        count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for i = 1, #arr do\n        local sum\
    \ = 0\n        for j = 1, #tostring(arr[i]) do\n            sum = sum + arr[i]\
    \ % 10\n            arr[i] = math.floor(arr[i] / 10)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  -- YOUR CODE HERE\nend", "    -- ...\nend", "    local count\
    \ = 0\n    for _, v in ipairs(arr) do\n        if math.abs(v) < 10 then\n    \
    \        count = count + 1\n        else\n            local sum = 0\n        \
    \    while v ~= 0 do\n                sum = sum + v % 10\n                v =\
    \ math.floor(v / 10)\n            end\n            if sum > 0 then\n         \
    \       count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  -- body\nend", "  local c = 0\n  for _, v in ipairs(arr) do\n    local\
    \ d = 0\n    for s in (\"\" .. math.abs(v)):gmatch(\".\") do\n      d = d + tonumber(s)\n\
    \    end\n    if d > 0 then\n      c = c + 1\n    end\n  end\n  return c\nend",
  "    local count = 0\n    for i, v in ipairs(arr) do\n        if v > 0 then\n  \
    \          local sum = 0\n            for i in tostring(v):gmatch(\"%d\") do\n\
    \                sum = sum + tonumber(i)\n            end\n            if sum\
    \ > 0 then\n                count = count + 1\n            end\n        else\n\
    \            local first_sig_digit = math.floor(v / (10 ^ (math.floor(math.log10(math.abs(v)))\
    \ - 2)))\n            if first_sig_digit < 0 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "  local\
    \ cnt = 0\n  for i = 1, #arr do\n    local sum = 0\n    if arr[i] < 0 then\n \
    \     sum = sum + 1\n      arr[i] = -arr[i]\n    end\n    while arr[i] > 0 do\n\
    \      sum = sum + arr[i] % 10\n      arr[i] = math.floor(arr[i] / 10)\n    end\n\
    \    if sum > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend",
  "  local count = 0\n  for i = 1, #arr do\n    if arr[i] < 0 then\n      if -arr[i]\
    \ > 9 then\n        local sum = 0\n        local num = -arr[i]\n        while\
    \ num > 0 do\n          sum = sum + num % 10\n          num = math.floor(num /\
    \ 10)\n        end\n        if sum > 0 then\n          count = count + 1\n   \
    \     end\n      end\n    else\n      if arr[i] > 9 then\n        local sum =\
    \ 0\n        local num = arr[i]\n        while num > 0 do\n          sum = sum\
    \ + num % 10\n          num = math.floor(num / 10)\n        end\n        if sum\
    \ > 0 then\n          count = count + 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ total = 0\n        local is_positive = arr[i] >= 0\n        if is_positive then\n\
    \            for digit in tostring(arr[i]):gmatch(\"%d\") do\n               \
    \ total = total + tonumber(digit)\n            end\n        else\n           \
    \ for digit in tostring(arr[i]):gmatch(\"%d\") do\n                total = total\
    \ - tonumber(digit)\n            end\n        end\n        if total > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum\
    \ = 0\n    while num ~= 0 do\n      local digit = num % 10\n      sum = sum +\
    \ digit\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend", "  local result =\
    \ 0\n  for _, x in ipairs(arr) do\n    if x ~= 0 then\n      result = result +\
    \ 1\n    end\n  end\n  return result\nend", "    local count = 0\n    for _, num\
    \ in ipairs(arr) do\n        -- Write your code here\n    end\n    return count\n\
    end", "  if arr == nil then return 0 end\n  local count = 0\n  for i,v in ipairs(arr)\
    \ do\n    if v ~= 0 then\n      local n = v\n      local sum = 0\n      while\
    \ n ~= 0 do\n        sum = sum + math.abs(n % 10)\n        n = math.floor(n /\
    \ 10)\n      end\n      if sum > 0 then count = count + 1 end\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n\
    \        local sd = signed_digits(num)\n        if List.foldl(function(acc, d)\
    \ return acc + d end, 0, sd) > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "  local function sum_digits(n)\n    local\
    \ sum = 0\n    while n ~= 0 do\n      sum = sum + n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    return sum\n  end", "    local count = 0\n    for _, v in\
    \ ipairs(arr) do\n        if (v < 0) then\n            v = -v\n        end\n \
    \       local sum = 0\n        while (v > 0) do\n            sum = sum + v % 10\n\
    \            v = v // 10\n        end\n        if (sum > 0) then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    -- your code here\nend\ncount_nums({0, 1, 2, 3, 4, 10, -123, -5}) -- should\
    \ return 8\n```", "  local count = 0\n  for i = 1, #arr do\n    if arr[i] ~= 0\
    \ then\n      local num = 0\n      local n = math.abs(arr[i])\n      while n >\
    \ 0 do\n        num = num + n % 10\n        n = math.floor(n / 10)\n      end\n\
    \      if num > 0 then\n        count = count + 1\n      end\n    end\n  end\n\
    \  return count\nend\nprint(count_nums({1,2,3,10,11,-11})) -- 4", "  local cnt\
    \ = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n    if\
    \ num < 0 then\n      num = -num\n    end\n    while num > 0 do\n      sum = sum\
    \ + num % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "    local count = 0\n\
    \    for _, v in ipairs(arr) do\n        local s = 0\n        if v < 0 then\n\
    \            s = s - 1\n            v = -v\n        end\n        while v > 0 do\n\
    \            s = s + v % 10\n            v = v // 10\n        end\n        if\
    \ s > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    local total = 0\n    for k, v in pairs(arr) do\n        local\
    \ number = math.abs(v)\n        local sum = 0\n        while number > 0 do\n \
    \           sum = sum + number % 10\n            number = math.floor(number /\
    \ 10)\n        end\n        if sum > 0 then\n            total = total + 1\n \
    \       end\n    end\n    return total\nend", "  local count = 0\n  for _, num\
    \ in ipairs(arr) do\n    local digit_sum = 0\n    while num ~= 0 do\n      digit_sum\
    \ = digit_sum + math.abs(num % 10)\n      num = math.floor(num / 10)\n    end\n\
    \    if digit_sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i, num in ipairs(arr) do\n    local sum\
    \ = 0\n    while num ~= 0 do\n      local digit = num % 10\n      num = (num -\
    \ digit) / 10\n      sum = sum + digit\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local function sum_digits(n)\n\
    \        local sum = 0\n        for d in tostring(n):gmatch('%-?%d') do\n    \
    \        sum = sum + tonumber(d)\n        end\n        return sum\n    end", "\t\
    local count = 0\n\tfor _, val in ipairs(arr) do\n\t\tlocal num = val\n\t\tlocal\
    \ sum = 0\n\t\tif val < 0 then\n\t\t\tval = -val\n\t\tend\n\t\twhile val > 0 do\n\
    \t\t\tsum = sum + val % 10\n\t\t\tval = val // 10\n\t\tend\n\t\tif sum > 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local count\
    \ = 0\n    for i,v in ipairs(arr) do\n        if digit_sum(v) > 0 then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ function int_to_digits(x)\n    local digits = {}\n    local sum = 0\n    if\
    \ x < 0 then\n      sum = sum + 1\n      x = -x\n    end\n    while x > 0 do\n\
    \      local digit = x % 10\n      sum = sum + digit\n      x = math.floor(x /\
    \ 10)\n      table.insert(digits, digit)\n    end\n    return digits, sum\n  end",
  "  local count = 0\n  for _, i in ipairs(arr) do\n    local sum = 0\n    local n\
    \ = math.abs(i)\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tfor i, v in ipairs(arr) do\n\t\t\
    if v < 0 then\n\t\t\tv = -v\n\t\tend\n\t\tlocal sum = 0\n\t\twhile v > 0 do\n\t\
    \t\tsum = sum + v % 10\n\t\t\tv = v // 10\n\t\tend\n\t\tif sum > 0 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local c = 0\n  for\
    \ _, n in ipairs(arr) do\n    if n ~= 0 then\n      local l = false\n      local\
    \ sum = 0\n      while n ~= 0 do\n        l = true\n        if n < 0 then\n  \
    \        sum = sum - (n % 10)\n        else\n          sum = sum + (n % 10)\n\
    \        end\n        n = math.floor(n / 10)\n      end\n      if l and sum >\
    \ 0 then\n        c = c + 1\n      end\n    end\n  end\n  return c\nend", "\t\
    local sum = 0\n\tfor _, num in ipairs(arr) do\n\t\tlocal i = num\n\t\tif i < 0\
    \ then\n\t\t\ti = -i\n\t\tend\n\t\twhile i > 0 do\n\t\t\tsum = sum + (i % 10)\n\
    \t\t\ti = math.floor(i / 10)\n\t\tend\n\tend\n\treturn sum\nend", "    return\
    \ 0\nend", "  local sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n  \
    \  local total = 0\n    while num ~= 0 do\n      local digit = num % 10\n    \
    \  total = total + digit\n      num = math.floor(num / 10)\n    end\n    if total\
    \ > 0 then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "\tlocal\
    \ count = 0\n\tfor i, v in ipairs(arr) do\n\t\tif sum_digits(v) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  -- your code here\n\
    end", "    local n = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "  local count\
    \ = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    local n = math.abs(v)\n\
    \    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "\t-- Your code here\n\tlocal count = 0\n\tfor i,v in ipairs(arr)\
    \ do\n\t\tif v < 0 then\n\t\t\tv = v * -1\n\t\tend\n\t\tlocal sum = 0\n\t\twhile\
    \ v > 0 do\n\t\t\tsum = sum + v % 10\n\t\t\tv = v // 10\n\t\tend\n\t\tif sum >\
    \ 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   \
    \ local count = 0\n    for _, elem in ipairs(arr) do\n        local sum = 0\n\
    \        for digit in tostring(elem):gmatch(\"[-]?%d\") do\n            sum =\
    \ sum + tonumber(digit)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  if #arr == 0 then\
    \ return 0 end\n  local nums = 0\n  for i = 1, #arr do\n    local sum = 0\n  \
    \  local num = arr[i]\n    if num < 0 then\n      num = -num\n      sum = -1\n\
    \    end\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then nums = nums + 1 end\n  end\n  return nums\n\
    end", "    local sum = 0\n    for i = 1, #arr do\n        local x = arr[i]\n \
    \       while x ~= 0 do\n            sum = sum + math.abs(x % 10)\n          \
    \  x = math.floor(x / 10)\n        end\n    end\n    return sum\nend", "    local\
    \ count = 0\n    for i, val in ipairs(arr) do\n        if val ~= 0 then\n    \
    \        local sval = tostring(val)\n            local sum = 0\n            for\
    \ i = 1, #sval do\n                sum = sum + tonumber(sval:sub(i, i))\n    \
    \        end\n            if sum > 0 then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "\tlocal count\
    \ = 0\n\tfor _, item in ipairs(arr) do\n\t\tif signed_sum(item) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count = 0\n\
    \  for _, x in ipairs(arr) do\n    if sum_digits(x) > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor _, num\
    \ in ipairs(arr) do\n\t\tlocal sum = 0\n\t\twhile num ~= 0 do\n\t\t\tsum = sum\
    \ + math.abs(num % 10)\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif sum\
    \ > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nassert_equal(3,\
    \ count_nums({-12, 3, 9, 8, -42}))\nassert_equal(0, count_nums({-12, -3, -9, -8,\
    \ -42}))\nassert_equal(2, count_nums({-12, 3, -9, 8, -42}))", "  local sum = 0\n\
    \  for i, num in ipairs(arr) do\n    local abs = math.abs(num)\n    while abs\
    \ > 0 do\n      sum = sum + abs % 10\n      abs = math.floor(abs / 10)\n    end\n\
    \  end\n  return sum\nend", "    local count = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            local sum = 0\n            local orig\
    \ = v\n            local is_negative = false\n            if v < 0 then\n    \
    \            is_negative = true\n                v = -v\n            end\n   \
    \         while v > 0 do\n                sum = sum + (v % 10)\n             \
    \   v = v // 10\n            end\n            if is_negative then\n          \
    \      sum = sum + 1\n            end\n            if sum > 0 then\n         \
    \       count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    -- Use list comprehensions:\n    local n = #(\n        for i, elem\
    \ in ipairs(arr) do\n            if sum_digits(elem) > 0 then\n              \
    \  yield(elem)\n            end\n        end\n    )\n    return n\nend", "  --\
    \ TODO: implement\nend", "  -- TODO: write your code here\nend", "    local count\
    \ = 0\n    for i, n in ipairs(arr) do\n        local sum = 0\n        while n\
    \ ~= 0 do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local count = 0\n    for _, v in\
    \ ipairs(arr) do\n        local sum = 0\n        local x = math.abs(v)\n     \
    \   while x > 0 do\n            sum = sum + x % 10\n            x = math.floor(x\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- YOUR CODE HERE\n    return\
    \ 0\nend", "\tlocal count = 0\n\tfor _, v in ipairs(arr) do\n\t\tlocal sum = 0\n\
    \t\tif v < 0 then\n\t\t\tlocal d = v * -1\n\t\t\tsum = -1\n\t\t\twhile d ~= 0\
    \ do\n\t\t\t\tsum = sum + d % 10\n\t\t\t\td = math.floor(d / 10)\n\t\t\tend\n\t\
    \telse\n\t\t\tlocal d = v\n\t\t\twhile d ~= 0 do\n\t\t\t\tsum = sum + d % 10\n\
    \t\t\t\td = math.floor(d / 10)\n\t\t\tend\n\t\tend\n\t\tif sum > 0 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    -- Write your code\
    \ here\n    local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n\
    \        if num < 0 then\n            num = num * -1\n        end\n        local\
    \ sum = 0\n        while num > 0 do\n            sum = sum + (num % 10)\n    \
    \        num = math.floor(num / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local count = 0\n  for i, num in ipairs(arr) do\n    if num ~= 0 then\n    \
    \  local sum = 0\n      local n = math.abs(num)\n      while n > 0 do\n      \
    \  sum = sum + (n % 10)\n        n = math.floor(n / 10)\n      end\n      if sum\
    \ > 0 then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local\
    \ sum = 0\n    while n ~= 0 do\n      sum = sum + math.abs(n % 10)\n      n =\
    \ math.floor(n / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nassert(count_nums({}) == 0)\nassert(count_nums({1,\
    \ 2, 3}) == 3)\nassert(count_nums({-1, -2, -3}) == 3)\nassert(count_nums({0, 1,\
    \ -2, 12}) == 3)\nassert(count_nums({-12, -11, -1, 1, 2, 3}) == 5)\nassert(count_nums({-12,\
    \ -11, -1, 0, 1, 2, 3}) == 4)\nassert(count_nums({0, 0, 0, 0, 0, 0, 0}) == 0)",
  "    local count = 0\n    for i,num in ipairs(arr) do\n        local sum = 0\n \
    \       while num ~= 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            local\
    \ sum = 0\n            while v ~= 0 do\n                sum = sum + math.abs(v\
    \ % 10)\n                v = math.floor(v / 10)\n            end\n           \
    \ if sum > 0 then\n                count = count + 1\n            end\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for _,n in ipairs(arr)\
    \ do\n    -- Implement this function\n  end\n  return count\nend", "  local count\
    \ = 0\n  for _, num in ipairs(arr) do\n    if num > 0 then\n      local digits\
    \ = get_digits(num)\n      local sum = 0\n      for _, d in ipairs(digits) do\n\
    \        sum = sum + d\n      end\n      if sum > 0 then\n        count = count\
    \ + 1\n      end\n    else\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local cnt = 0\n    for _, v in ipairs(arr) do\n        local\
    \ sum = 0\n        for c in tostring(v):gmatch('[-%d]') do\n            sum =\
    \ sum + tonumber(c)\n        end\n        if sum > 0 then\n            cnt = cnt\
    \ + 1\n        end\n    end\n    return cnt\nend", end, "  local cnt = 0\n  for\
    \ i = 1, #arr do\n    local tmp = math.abs(arr[i])\n    local sum = 0\n    while\
    \ tmp > 0 do\n      sum = sum + tmp % 10\n      tmp = math.floor(tmp / 10)\n \
    \   end\n    if sum > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\n\
    end", "  local count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n\
    \    num = math.abs(num)\n    while num > 0 do\n      sum = sum + num % 10\n \
    \     num = math.floor(num / 10)\n    end\n    if sum > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "  return #arr\nend", "  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    if num < 0 then\n      num =\
    \ -num\n    end\n    local sum = 0\n    while num > 0 do\n      sum = sum + num\
    \ % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend", "    local count =\
    \ 0\n    for _, v in ipairs(arr) do\n        local curr = v\n        if curr <\
    \ 0 then\n            curr = -curr\n        end\n        local sum = 0\n     \
    \   while curr > 0 do\n            sum = sum + curr % 10\n            curr = curr\
    \ // 10\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor i = 1,\
    \ #arr do\n\t\tlocal num = arr[i]\n\t\tif num < 0 then\n\t\t\tnum = -num\n\t\t\
    end\n\t\tlocal sum = 0\n\t\twhile num > 0 do\n\t\t\tsum = sum + num % 10\n\t\t\
    \tnum = math.floor(num / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "    local i = 0\n    for index,\
    \ value in ipairs(arr) do\n        local sum = 0\n        for digit in string.gmatch(tostring(math.abs(value)),\
    \ \"%d\") do\n            sum = sum + tonumber(digit)\n        end\n        if\
    \ sum > 0 then\n            i = i + 1\n        end\n    end\n    return i\nend",
  "  local count = 0\n  for i, v in ipairs(arr) do\n    local sum = 0\n    if v <\
    \ 0 then\n      v = -v\n    end\n    local rem = v\n    while rem > 0 do\n   \
    \   local div, mod = math.modf(rem / 10)\n      rem = div\n      sum = sum + mod\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", end, "    local count = 0\n    for _, n in ipairs(arr) do\n   \
    \     if sum_digits(n) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local count = 0\n  for _, num in ipairs(arr)\
    \ do\n    if sum_digits(num) > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, number in ipairs(arr)\
    \ do\n        local sum = 0\n        local sign = 1\n        if number < 0 then\n\
    \            sign = -1\n            number = -number\n        end\n        while\
    \ number > 0 do\n            sum = sum + (number % 10)\n            number = number\
    \ // 10\n        end\n        if sign * sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local sum = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] > 0 then\n            sum = sum + arr[i]\n\
    \        else\n            sum = sum - arr[i]\n        end\n    end\n    return\
    \ sum\nend", "    -- YOUR CODE HERE\n    local count = 0\n    for i, e in ipairs(arr)\
    \ do\n        if e ~= 0 then\n            local sum = 0\n            for n in\
    \ tostring(e):gmatch(\"%d\") do\n                sum = sum + tonumber(n)\n   \
    \         end\n            if sum > 0 then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "\tlocal n = 0\n\
    \tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tif num < 0 then\n\t\t\tnum =\
    \ -num\n\t\tend\n\t\tlocal dig = 0\n\t\twhile num > 0 do\n\t\t\tdig = dig + num\
    \ % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif dig > 0 then\n\t\t\t\
    n = n + 1\n\t\tend\n\tend\n\treturn n\nend", "  -- Your code here\nend", "  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local n = arr[i]\n \
    \   if n < 0 then\n      n = -n\n    end\n    while n > 0 do\n      sum = sum\
    \ + n % 10\n      n = n // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  return 0\nend", "  -- need a function\
    \ to split the number into its digits\n  -- use tostring() to convert to string,\
    \ then string.find to find each digit\n  -- then convert each digit back to a\
    \ number", "  local cnt = 0\n  for i = 1, #arr do\n    local num = arr[i]\n  \
    \  local abs = math.abs(num)\n    local d = 0\n    while abs > 0 do\n      d =\
    \ d + abs % 10\n      abs = math.floor(abs / 10)\n    end\n    if d > 0 then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "\tif not arr then return\
    \ 0 end\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tlocal v = arr[i]\n\t\tlocal\
    \ sign = 0\n\t\tif v < 0 then\n\t\t\tsign = 1\n\t\t\tv = -v\n\t\tend\n\t\tlocal\
    \ temp = 0\n\t\twhile v > 0 do\n\t\t\ttemp = temp + v % 10\n\t\t\tv = math.floor(v\
    \ / 10)\n\t\tend\n\t\tif sign > 0 then\n\t\t\ttemp = -temp\n\t\tend\n\t\tsum =\
    \ sum + temp\n\tend\n\treturn sum\nend", "\tlocal count = 0\n\tfor _,num in ipairs(arr)\
    \ do\n\t\tlocal sum = 0\n\t\tlocal n = num\n\t\tif n < 0 then\n\t\t\tn = -n\n\t\
    \tend\n\t\twhile n > 0 do\n\t\t\tsum = sum + n % 10\n\t\t\tn = math.floor(n /\
    \ 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n\
    \        local sum = 0\n        for _, d in ipairs(utils.signed_digits(num)) do\n\
    \            sum = sum + d\n        end\n        if sum > 0 then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend", "\tlocal count\
    \ = 0\n\tfor i = 1, #arr do\n\t\tlocal num = math.abs(arr[i])\n\t\tlocal sum =\
    \ 0\n\t\twhile num > 0 do\n\t\t\tsum = sum + num % 10\n\t\t\tnum = math.floor(num\
    \ / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    local count = 0\n    for _, n in ipairs(arr) do\n \
    \       if sum_digits(n) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local cnt = 0\n  for _,v in ipairs(arr) do\n\
    \    local sum = 0\n    for i = 1,string.len(tostring(v)) do\n      sum = sum\
    \ + (v % 10)\n      v = math.floor(v / 10)\n    end\n    if sum > 0 then\n   \
    \   cnt = cnt + 1\n    end\n  end\n  return cnt\nend", end, "    local cnt = 0\n\
    \    for _, v in ipairs(arr) do\n        local total = 0\n        for i = 1, #tostring(v)\
    \ do\n            total = total + tonumber(tostring(v):sub(i, i))\n        end\n\
    \        if total > 0 then\n            cnt = cnt + 1\n        end\n    end\n\
    \    return cnt\nend", "  local count = 0\n  for _,v in ipairs(arr) do\n    if\
    \ sum_digits(v) > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local cnt = 0\n  for i = 1, #arr do\n    local sum = 0\n    for s in\
    \ tostring(arr[i]):gmatch('[-%d]') do\n      sum = sum + tonumber(s)\n    end\n\
    \    if sum > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend",
  "  local count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    local x\
    \ = n\n    if x < 0 then\n      sum = sum + 1\n      x = -x\n    end\n    while\
    \ x > 0 do\n      sum = sum + x % 10\n      x = math.floor(x / 10)\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nassert(count_nums({0, -123, 1234, 45, 2}) == 4)", "  local count = 0\n  for\
    \ _, v in ipairs(arr) do\n    local sum = 0\n    if v >= 0 then\n      while v\
    \ > 0 do\n        sum = sum + v % 10\n        v = v // 10\n      end\n    else\n\
    \      while v < 0 do\n        sum = sum - v % 10\n        v = v // 10\n     \
    \ end\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local cnt = 0\n    for i, v in ipairs(arr) do\n  \
    \      if sum_digits(v) > 0 then\n            cnt = cnt + 1\n        end\n   \
    \ end\n    return cnt\nend\nassert(count_nums({}) == 0)\nassert(count_nums({ -1,\
    \ 0, 1 }) == 2)\nassert(count_nums({ 1, 2, 3, -10, -11, -12 }) == 6)\nprint(\"\
    count_nums passed\")", "    local count = 0\n    for i = 1, #arr do\n        local\
    \ sum = 0\n        local n = arr[i]\n        while n ~= 0 do\n            sum\
    \ = sum + math.abs(n % 10)\n            n = math.floor(n / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local function digits_sum(num)\n    if num == 0 then\
    \ return 0 end\n    return num % 10 + digits_sum(math.floor(num / 10))\n  end\n\
    \  local function helper(arr, i, acc)\n    if i > #arr then return acc end\n \
    \   local sum = digits_sum(arr[i])\n    if sum > 0 then acc = acc + 1 end\n  \
    \  return helper(arr, i + 1, acc)\n  end\n  return helper(arr, 1, 0)\nend", "\t\
    local sum = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] < 0 then\n\t\t\tarr[i] = -arr[i]\n\
    \t\tend\n\t\tsum = sum + arr[i]\n\tend\n\tif sum > 0 then\n\t\treturn #arr\n\t\
    else\n\t\treturn 0\n\tend\nend", "  local count = 0\n  for i, value in ipairs(arr)\
    \ do\n    if value < 0 then\n      value = -value\n    end\n    local sum = 0\n\
    \    while value > 0 do\n      sum = sum + value % 10\n      value = value //\
    \ 10\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for _, num in ipairs(arr) do\n  \
    \  local sum = 0\n    local abs = math.abs(num)\n    while abs > 0 do\n      sum\
    \ = sum + abs % 10\n      abs = math.floor(abs / 10)\n    end\n    if sum > 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nassert(count_nums({-123,\
    \ -9, 2, 3, 4, -56, -100, 51, -23, -12, 0}) == 5)", "    count = 0\n    for _,\
    \ v in ipairs(arr) do\n        -- TODO: fill this out\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local sum = 0\n  \
    \      local num = math.abs(arr[i])\n        while num > 0 do\n            sum\
    \ = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    \
    \    if sum > 0 then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "    -- your code goes here\nend", "  local nums = 0\n\
    \  for i, n in ipairs(arr) do\n    local sum = 0\n    local num = n\n    while\
    \ num ~= 0 do\n      sum = sum + math.abs(num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      nums = nums + 1\n    end\n  end\n\
    \  return nums\nend", "    local c = 0\n    for _, x in ipairs(arr) do\n     \
    \   if not (x == 0) then\n            c = c + 1\n        end\n    end\n    return\
    \ c\nend", end, "  -- Write your code here.\nend", "\tlocal count = 0\n\tfor i\
    \ = 1, #arr do\n\t\tlocal sum = 0\n\t\tlocal num = arr[i]\n\t\tif num < 0 then\n\
    \t\t\tnum = -num\n\t\tend\n\t\twhile num > 0 do\n\t\t\tsum = sum + num % 10\n\t\
    \t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "    local count = 0\n    for _,num\
    \ in ipairs(arr) do\n        local sum = 0\n        while num ~= 0 do\n      \
    \      local digit = num % 10\n            sum = sum + math.abs(digit)\n     \
    \       num = math.floor(num / 10)\n        end\n        if sum > 0 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local cnt = 0\n  for i = 1, #arr do\n    local s = 0\n    local n = arr[i]\n\
    \    if n < 0 then\n      n = -n\n    end\n    while n > 0 do\n      s = s + n\
    \ % 10\n      n = math.floor(n / 10)\n    end\n    if s > 0 then\n      cnt =\
    \ cnt + 1\n    end\n  end\n  return cnt\nend", "  -- TODO: Implement function.\n\
    end", "  return 0\nend", "    -- TODO\nend", "    local count = 0\n    for i =\
    \ 1, #arr do\n        local num = arr[i]\n        local curr = 0\n        while\
    \ num ~= 0 do\n            curr = curr + math.abs(num % 10)\n            num =\
    \ math.floor(num / 10)\n        end\n        if curr > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal function\
    \ digit_sum(x)\n\t\tlocal s = 0\n\t\tif x < 0 then\n\t\t\tx = -x\n\t\tend\n\t\t\
    while x > 0 do\n\t\t\ts = s + x % 10\n\t\t\tx = math.floor(x / 10)\n\t\tend\n\t\
    \treturn s\n\tend\n\tlocal cnt = 0\n\tfor _, x in ipairs(arr) do\n\t\tif digit_sum(x)\
    \ > 0 then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    if sum_digits(n) > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend", "\tlocal count =\
    \ 0\n\tfor _, v in ipairs(arr) do\n\t\tif v ~= 0 then\n\t\t\tif v < 0 then\n\t\
    \t\t\tv = -v\n\t\t\tend\n\t\t\tlocal sum = 0\n\t\t\twhile v > 0 do\n\t\t\t\tsum\
    \ = sum + v % 10\n\t\t\t\tv = math.floor(v / 10)\n\t\t\tend\n\t\t\tif sum > 0\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local function sum_digits(num)\n        local s = tostring(num)\n \
    \       local sum = 0\n        for i = 1, #s do\n            sum = sum + tonumber(s:sub(i,\
    \ i))\n        end\n        return sum\n    end", "  local cnt = 0\n  for _, v\
    \ in ipairs(arr) do\n    local sum = 0\n    for w in (tostring(v)):gmatch(\"[%-%d]\"\
    ) do\n      sum = sum + tonumber(w)\n    end\n    if sum > 0 then\n      cnt =\
    \ cnt + 1\n    end\n  end\n  return cnt\nend", "    local count = 0\n    for _,\
    \ v in ipairs(arr) do\n        local sign, abs = math.sign(v), math.abs(v)\n \
    \       while abs > 0 do\n            sign = sign + (abs % 10)\n            abs\
    \ = math.floor(abs / 10)\n        end\n        if sign > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local res = 0\n\
    \  for _, n in ipairs(arr) do\n    local sum = 0\n    for _, digit in ipairs(n)\
    \ do\n      sum = sum + digit\n    end\n    if sum > 0 then\n      res = res +\
    \ 1\n    end\n  end\n  return res\nend", "  local function helper(t, acc)\n  \
    \  if #t == 0 then\n      return acc\n    else\n      local sum = 0\n      local\
    \ x = t[1]\n      while x ~= 0 do\n        sum = sum + math.abs(x % 10)\n    \
    \    x = math.floor(x / 10)\n      end\n      return helper(Util.tail(t), sum\
    \ > 0 and acc + 1 or acc)\n    end\n  end\n  return helper(arr, 0)\nend", "  \
    \  local count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        if n == 0 then\n            count = count + 1\n        else\n       \
    \     if n < 0 then\n                n = -n\n            end\n            local\
    \ k = 0\n            while n > 0 do\n                k = k + n % 10\n        \
    \        n = math.floor(n / 10)\n            end\n            if k > 0 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local count = 0\n    for _, num in ipairs(arr) do\n\
    \        local sum = 0\n        if num < 0 then\n            sum = sum - 1\n \
    \           num = -num\n        end\n        while num > 0 do\n            sum\
    \ = sum + num % 10\n            num = num // 10\n        end\n        if sum >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for _, i in ipairs(arr) do\n    local sum = 0\n  \
    \  local num = i\n    if num < 0 then\n      num = -num\n    end\n    while num\
    \ > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local count = 0\n    for i = 1, #arr do\n        local sum = 0\n  \
    \      for d in tostring(arr[i]):gmatch(\"%d\") do\n            sum = sum + tonumber(d)\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local n = 0\n    for i = 1, #arr\
    \ do\n        local sum = 0\n        for d in tostring(math.abs(arr[i])):gmatch('.')\
    \ do\n            sum = sum + tonumber(d)\n        end\n        if sum > 0 then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "    local function\
    \ signed_digits(n)\n        local sum = 0\n        while n ~= 0 do\n         \
    \   sum = sum + math.abs(n % 10)\n            n = math.floor(n / 10)\n       \
    \ end\n        return sum\n    end", "  local count = 0\n  for _, num in ipairs(arr)\
    \ do\n    if sum_digits(num) > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local result = 0\n    for i, v in ipairs(arr) do\n\
    \        if sum_digits(v) > 0 then\n            result = result + 1\n        end\n\
    \    end\n    return result\nend", "    local count = 0\n    for _, elem in ipairs(arr)\
    \ do\n        local abs = math.abs(elem)\n        local sum = 0\n        while\
    \ abs > 0 do\n            sum = sum + abs % 10\n            abs = math.floor(abs\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for _, v\
    \ in ipairs(arr) do\n    local sum = 0\n    for d in tostring(v):gmatch(\"[0-9]\"\
    ) do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for i, val in ipairs(arr) do\n        local sum = 0\n        local abs = math.abs(val)\n\
    \        while abs > 0 do\n            sum = sum + (abs % 10)\n            abs\
    \ = math.floor(abs / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            local\
    \ s = 0\n            while v > 0 do\n                s = s + v % 10\n        \
    \        v = v // 10\n            end\n            if s > 0 then\n           \
    \     count = count + 1\n            end\n        else\n            local s =\
    \ 0\n            while v < 0 do\n                s = s + v % 10\n            \
    \    v = v // 10\n            end\n            if s < 0 then\n               \
    \ count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local x\
    \ = arr[i]\n    if x < 0 then\n      x = -x\n    end\n    while x > 0 do\n   \
    \   sum = sum + x % 10\n      x = x // 10\n    end\n    if sum > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nprint(count_nums({10,\
    \ 8, -10, -20, 0, -1, -2, 15, 4, -5}))\nprint(count_nums({10, 8, -10, -20, 0,\
    \ -1, -2, 15, 4, -5, -1}))\nprint(count_nums({10, 8, -10, -20, 0, -1, -2, 15,\
    \ 4, -5, -1, 7}))\nprint(count_nums({10, 8, -10, -20, 0, -1, -2, 15, 4, -5, -1,\
    \ 7, 6}))", "    local count = 0\n    for i = 1, #arr do\n        local num =\
    \ arr[i]\n        if num < 0 then\n            num = -num\n        end\n     \
    \   local sum = 0\n        repeat\n            sum = sum + num % 10\n        \
    \    num = math.floor(num / 10)\n        until num == 0\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "\tlocal cnt = 0\n\tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tlocal digit_sum\
    \ = 0\n\t\tif num < 0 then\n\t\t\tnum = -num\n\t\tend\n\t\twhile num > 0 do\n\t\
    \t\tdigit_sum = digit_sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\
    \t\tif digit_sum > 0 then\n\t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\n\
    end", "  return 0\nend", "    local count = 0\n    for i = 1, #arr do\n      \
    \  if sum_digits(arr[i]) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i, num in ipairs(arr)\
    \ do\n        local sum = 0\n        local _num = num\n        while _num ~= 0\
    \ do\n            local _next = _num % 10\n            _num = (_num - _next) /\
    \ 10\n            sum = sum + _next\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local c = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local sd = 0\n\
    \    while n ~= 0 do\n      sd = sd + (n % 10)\n      n = math.floor(n / 10)\n\
    \    end\n    if sd > 0 then\n      c = c + 1\n    end\n  end\n  return c\nend",
  "  return nil\nend", "\tcount = 0\n\tfor k,v in pairs(arr) do\n\t\tsum = 0\n\t\t\
    str = tostring(v)\n\t\tfor i = 1, string.len(str) do\n\t\t\tsum = sum + tonumber(string.sub(str,\
    \ i, i))\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local count = 0\n  for i = 1, #arr do\n    local sum\
    \ = 0\n    local a = arr[i]\n    while a ~= 0 do\n      sum = sum + a % 10\n \
    \     a = math.floor(a / 10)\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for i =\
    \ 1, #arr do\n        local digit_sum = 0\n        local num = arr[i]\n      \
    \  if num < 0 then\n            num = -num\n        end\n        while num > 0\
    \ do\n            digit_sum = digit_sum + num % 10\n            num = num // 10\n\
    \        end\n        if digit_sum > 0 then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "  local count = 0\n  for _, i in\
    \ ipairs(arr) do\n    local n = 0\n    if i > 0 then\n      n = i\n    else\n\
    \      n = -i\n    end\n    while n > 0 do\n      count = count + n % 10\n   \
    \   n = n // 10\n    end\n  end\n  return count\nend\nassert(count_nums({1, 2,\
    \ 3, -4, 5, 6, -7, 8, 9}) == 8)\nassert(count_nums({1, 2, 3, -4, 5, 6, -7, 8,\
    \ 9, -10}) == 12)\nassert(count_nums({1, 2, 3, -4, 5, 6, -7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16,\n  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54,\n  55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\
    \ 70, 71, 72, 73,\n  74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89, 90, 91, 92,\n  93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\
    \ 106, 107, 108,\n  109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123,\n  124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138,\n  139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\
    \ 151, 152, 153,\n  154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168", "  local count = 0\n  for i, n in ipairs(arr) do\n    if sum_digits(n)\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend", "\t\
    local count = 0\n\tfor _, x in ipairs(arr) do\n\t\tlocal sum = 0\n\t\tfor d in\
    \ tostring(x):gmatch(\"[%-]?%d\") do\n\t\t\tsum = sum + tonumber(d)\n\t\tend\n\
    \t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "  if arr == nil then return 0 end\n  local count = 0\n  for _, n in ipairs(arr)\
    \ do\n    -- TODO: Implement this function\n  end\n  return count\nend", "  local\
    \ cnt = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n \
    \   repeat\n      local d = num % 10\n      sum = sum + math.abs(d)\n      num\
    \ = math.floor(num / 10)\n    until num == 0\n    if sum > 0 then\n      cnt =\
    \ cnt + 1\n    end\n  end\n  return cnt\nend\nassert(count_nums({}) == 0)\nassert(count_nums({1,\
    \ 2, 3}) == 3)\nassert(count_nums({1, 2, -3}) == 2)\nassert(count_nums({-101,\
    \ 1, -5, 2, 0}) == 2)", "    -- TODO: your code here\nend", "    local count =\
    \ 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n        while num\
    \ ~= 0 do\n            sum = sum + math.abs(num % 10)\n            num = math.floor(num\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, #arr do\n        local n = arr[i]\n        local sum = 0\n        while\
    \ n ~= 0 do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend", "    local count = 0\n    for _, v in\
    \ ipairs(arr) do\n        local n = v\n        local sum = 0\n        if n < 0\
    \ then\n            n = -n\n        end\n        while n > 0 do\n            sum\
    \ = sum + n % 10\n            n = math.floor(n / 10)\n        end\n        if\
    \ sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, #arr do\n    local sum = 0\n \
    \   for digit in tostring(arr[i]):gmatch('%-?%d') do\n      sum = sum + tonumber(digit)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  -- TODO: your code here\nend", "  local count = 0\n  for i =\
    \ 1, #arr do\n    local n = arr[i]\n    local sum = 0\n    while n ~= 0 do\n \
    \     local digit = n % 10\n      sum = sum + digit\n      n = (n - digit) / 10\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
