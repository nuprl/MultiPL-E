language: lua
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal res = {}\n\
    \tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(res, str)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n  \
    \          table.insert(ret, s)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrhs3mi0.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpyrhs3mi0.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpyrhs3mi0.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for i,s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n  \
    \    out[#out+1] = s\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, prefix:len())\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, prefix:len()) == prefix then\n\
    \      table.insert(ret, s)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix\
    \ then\n\t\t\tresult[#result + 1] = str\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local new_strings\
    \ = {}\n  for _, str in ipairs(strings) do\n    if not vim.startswith(str, prefix)\
    \ then\n      table.insert(new_strings, str)\n    end\n  end\n  return new_strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvt78lgn9.lua:5:\
    \ attempt to index a nil value (global 'vim')\nstack traceback:\n\t/tmp/tmpvt78lgn9.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpvt78lgn9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    if strings then\n\
    \        local result = {}\n        for _, string in ipairs(strings) do\n    \
    \        if string:sub(1, prefix:len()) == prefix then\n                table.insert(result,\
    \ string)\n            end\n        end\n        return result\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local t = {}\n\
    \    for _, v in ipairs(strings) do\n        if v:startswith(prefix) then\n  \
    \          table.insert(t, v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkx2e_myy.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpkx2e_myy.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpkx2e_myy.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor _,v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) == prefix then\n\
    \t\t\tfiltered[#filtered+1] = v\n\t\tend\n\tend\n\treturn filtered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:match(\"^\" .. prefix) then\n\
    \      table.insert(ret, str)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local res = {}\n\
    \    for _,str in ipairs(strings) do\n        if str:find(\"^\" .. prefix .. \"\
    $\") then\n            res[#res+1] = str\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0kykw2o.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxx\"}\nstack\
    \ traceback:\n\t/tmp/tmpq0kykw2o.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for i,v in ipairs(strings) do\n    if string.find(v, \"^\" .. prefix)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) == prefix then\n\
    \t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for _,s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      filtered[#filtered+1] = s\n    end\n  end\n  return filtered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local list =\
    \ {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(list, str)\n        end\n    end\n    return\
    \ list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlj1q2zf.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmprlj1q2zf.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprlj1q2zf.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, s in ipairs(strings) do\n\t\tif string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal results =\
    \ {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1, prefix:len()) == prefix\
    \ then\n\t\t\ttable.insert(results, v)\n\t\tend\n\tend\n\treturn results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local r = {}\n\
    \  for _,s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix then\n\
    \      table.insert(r, s)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, v in ipairs(strings) do\n    if v:sub(1, prefix:len()) == prefix\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local results =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, #prefix) ==\
    \ prefix then\n      table.insert(results, str)\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix)\
    \ == prefix then\n            table.insert(result, strings[i])\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _, val in ipairs(strings) do\n    if val:sub(1, #prefix) == prefix then\n\
    \      ret[#ret + 1] = val\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local res = {}\n\
    \  for i = 1, #strings do\n    if string.sub(strings[i], 1, #prefix) == prefix\
    \ then\n      res[#res + 1] = strings[i]\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, str in ipairs(strings) do\n\t\tif (str:sub(1, #prefix) == prefix)\
    \ then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    return alist.filter(strings,\
    \ function(s) return common.starts_with(s, prefix) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1g4esrt.lua:3:\
    \ attempt to index a nil value (global 'alist')\nstack traceback:\n\t/tmp/tmpz1g4esrt.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpz1g4esrt.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local newlist\
    \ = {}\n    for i,v in ipairs(strings) do\n        if v:sub(1,#prefix) == prefix\
    \ then\n            newlist[#newlist+1] = v\n        end\n    end\n    return\
    \ newlist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal new_list\
    \ = {}\n\tlocal prefix_len = #prefix\n\tfor _, str in ipairs(strings) do\n\t\t\
    if str:sub(1, prefix_len) == prefix then\n\t\t\ttable.insert(new_list, str)\n\t\
    \tend\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local res = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n \
    \     res[#res + 1] = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    if prefix ==\
    \ \"\" then\n        return strings\n    end\n    local res = {}\n    for _, v\
    \ in ipairs(strings) do\n        if #v > #prefix and string.sub(v, 1, #prefix)\
    \ == prefix then\n            table.insert(res, v)\n        end\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgpq6tyv.lua:19:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxxAAA\"}\nstack traceback:\n\
    \t/tmp/tmptgpq6tyv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tprefix = prefix:lower()\n\
    \tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:lower():find(\"\
    ^\" .. prefix) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    return lib.filter(strings,\
    \ function(s) return s:startswith(prefix) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcouvpyq_.lua:3:\
    \ attempt to index a nil value (global 'lib')\nstack traceback:\n\t/tmp/tmpcouvpyq_.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpcouvpyq_.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\treturn {\n\t\t\
    unpack(\n\t\t\ttable.map(\n\t\t\t\tstrings,\n\t\t\t\tfunction(string)\n\t\t\t\t\
    \tif string:startswith(prefix) then\n\t\t\t\t\t\treturn string\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\t)\n\t\t)\n\t}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5bc20d3.lua:5:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmpw5bc20d3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpw5bc20d3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local matches\
    \ = {}\n    local strings_count = #strings\n    for i = 1, strings_count do\n\
    \        local string = strings[i]\n        if string:starts_with(prefix) then\n\
    \            matches[#matches + 1] = string\n        end\n    end\n    return\
    \ matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8gg_oee.lua:7:\
    \ attempt to call a nil value (method 'starts_with')\nstack traceback:\n\t/tmp/tmpp8gg_oee.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp8gg_oee.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local new_strings\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n\
    \            table.insert(new_strings, s)\n        end\n    end\n    return new_strings\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm32oiwpp.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpm32oiwpp.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpm32oiwpp.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for i, v in ipairs(strings) do\n        if starts_with(v, prefix)\
    \ then\n            table.insert(filtered, v)\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89yyxih1.lua:5:\
    \ attempt to call a nil value (global 'starts_with')\nstack traceback:\n\t/tmp/tmp89yyxih1.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp89yyxih1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for i = 1, #strings do\n    if string.sub(strings[i], 1, string.len(prefix))\
    \ == prefix then\n      table.insert(result, strings[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local r = {}\n\
    \    for i = 1, #strings do\n        if strings[i]:find(\"^\" .. prefix) then\n\
    \            r[#r + 1] = strings[i]\n        end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for i,v in ipairs(strings) do\n    if v:match(\"^\" .. prefix) then\n\
    \      filtered[#filtered+1] = v\n    end\n  end\n  return filtered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, v in ipairs(strings) do\n    if string.sub(v, 1, #prefix) == prefix\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _,s in ipairs(strings) do\n\t\tif s:sub(1,#prefix) == prefix then\n\
    \t\t\tresult[#result+1] = s\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7rzbpxw.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpo7rzbpxw.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpo7rzbpxw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal results =\
    \ {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix\
    \ then\n\t\t\ttable.insert(results, str)\n\t\tend\n\tend\n\treturn results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:starts(prefix) then\n\t\t\
    \tresult[#result + 1] = str\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbzaqxye.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmptbzaqxye.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmptbzaqxye.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local t = {}\n\
    \    for i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix) ==\
    \ prefix then\n            t[#t + 1] = strings[i]\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal ret = {}\n\
    \tfor k,v in pairs(strings) do\n\t\tif not prefix or string.sub(v, 1, string.len(prefix))\
    \ == prefix then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal out = {}\n\
    \tfor _, v in ipairs(strings) do\n\t\tif v:sub(1, prefix:len()) == prefix then\n\
    \t\t\ttable.insert(out, v)\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\treturn map(filter(strings,\
    \ function(s) return s:startswith(prefix) end), function(s) return s:sub(#prefix\
    \ + 1) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk6bbcc9.lua:3:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpsk6bbcc9.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpsk6bbcc9.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.startswith(s, prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_wsf3m0.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpn_wsf3m0.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpn_wsf3m0.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local new_strings\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, prefix:len())\
    \ == prefix then\n            table.insert(new_strings, string)\n        end\n\
    \    end\n    return new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:sub(1, prefix:len()) == prefix\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local out = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(out, s)\n        end\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for i, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n \
    \     table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local res = {}\n\
    \    for i, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n\
    \            local choice = str:gsub(prefix, \"\")\n            table.insert(ret,\
    \ choice)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07tlxwu_.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp07tlxwu_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp07tlxwu_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, s in ipairs(strings) do\n\t\tif (string.sub(s, 1, #prefix) == prefix)\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.find(v, \"^\" .. prefix)\
    \ then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _,s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local count =\
    \ #strings\n    local i = 1\n    while i <= count do\n        if not strings[i]:startswith(prefix)\
    \ then\n            table.remove(strings, i)\n            count = count - 1\n\
    \        else\n            i = i + 1\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n43olzy.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9n43olzy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _,s in ipairs(strings) do\n        if s:startswith(prefix) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39zu41i9.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp39zu41i9.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp39zu41i9.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local out = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n      \
    \      table.insert(out, s)\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7yz8zcx.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpz7yz8zcx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpz7yz8zcx.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:starts(prefix) then\n  \
    \          table.insert(ret, str)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2n0dm76.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmph2n0dm76.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmph2n0dm76.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal t = {}\n\t\
    for _, s in ipairs(strings) do\n\t\tif s:starts(prefix) then\n\t\t\ttable.insert(t,\
    \ s)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4lfahwwc.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmp4lfahwwc.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp4lfahwwc.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for _,s in ipairs(strings) do\n    if s:find(\"^\" .. prefix) then\n\
    \      filtered[#filtered+1] = s\n    end\n  end\n  return filtered\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _,str in ipairs(strings) do\n        if string.find(str, prefix) == 1\
    \ then\n            ret[#ret+1] = str\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local new_strings\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.startswith(s, prefix)\
    \ then\n            table.insert(new_strings, s)\n        end\n    end\n    return\
    \ new_strings\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbg2imw7f.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpbg2imw7f.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpbg2imw7f.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal count = 0\n\
    \tfor i = 1, #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\
    \t\tcount = count + 1\n\t\t\tstrings[count] = strings[i]\n\t\tend\n\tend\n\treturn\
    \ setmetatable(strings, nil)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84lt9cjn.lua:17:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxx\", \"xxxAAA\", \"xxx\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"}\nstack traceback:\n\t/tmp/tmp84lt9cjn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n \
    \     out[#out + 1] = v\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, string in ipairs(strings) do\n        if string:startswith(prefix)\
    \ then\n            table.insert(ret, string)\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyfqsjbd.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmppyfqsjbd.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmppyfqsjbd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\treturn fun.iter(strings):filter(function(s)\
    \ return s:startswith(prefix) end):to_list()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpteuohy8z.lua:3:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpteuohy8z.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpteuohy8z.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal matching\
    \ = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(matching, s)\n\t\tend\n\tend\n\treturn matching\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string:startswith(prefix)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kk9k5tv.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp_kk9k5tv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp_kk9k5tv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local function\
    \ is_prefix(s)\n    return string.sub(s, 1, #prefix) == prefix\n  end\n  return\
    \ filter(strings, is_prefix)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t9rakfi.lua:6:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp4t9rakfi.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4t9rakfi.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for i, s in ipairs(strings) do\n        if (string.sub(s, 1, string.len(prefix))\
    \ == prefix) then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal r = {}\n\t\
    for i = 1, #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\t\
    \tr[#r + 1] = strings[i]\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal ret = {}\n\
    \tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\
    \ttable.insert(ret, s)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, v in ipairs(strings) do\n        if string.find(v, prefix,\
    \ 1, true) == 1 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal res = {}\n\
    \tfor i = 1, #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\
    \t\tres[#res + 1] = strings[i]\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal ret = {}\n\
    \tfor i = 1, #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\
    \t\tret[#ret + 1] = strings[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tif strings then\n\
    \t\tlocal filtered = {}\n\t\tfor _,v in ipairs(strings) do\n\t\t\tif v:sub(1,\
    \ #prefix) == prefix then\n\t\t\t\tfiltered[#filtered+1] = v\n\t\t\tend\n\t\t\
    end\n\t\treturn filtered\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqblc5q2.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmprqblc5q2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprqblc5q2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for i, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(result, str)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziw_jmw6.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpziw_jmw6.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpziw_jmw6.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local output =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.startswith(s, prefix) then\n\
    \      table.insert(output, s)\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05crvv49.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmp05crvv49.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp05crvv49.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local res = {}\n\
    \  for i = 1, #strings do\n    if strings[i]:sub(1, #prefix) == prefix then\n\
    \      res[#res + 1] = strings[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    return table.filter(strings,\
    \ function(v) return v:sub(1, #prefix) == prefix end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqo0hnef.lua:3:\
    \ attempt to call a nil value (field 'filter')\nstack traceback:\n\t/tmp/tmplqo0hnef.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmplqo0hnef.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local n = #prefix\n\
    \    local ret = {}\n    for i, s in ipairs(strings) do\n        if s:sub(1, n)\
    \ == prefix then\n            table.insert(ret, s)\n        end\n    end\n   \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local res = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:sub(1, prefix:len()) == prefix\
    \ then\n      table.insert(res, str)\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if #str > #prefix and str:sub(1,\
    \ #prefix) == prefix then\n            result[#result + 1] = str\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvh7vrsh9.lua:16:\
    \ expected: {\"xxx\", \"xxxAAA\", \"xxx\"}\nactual: {\"xxxAAA\"}\nstack traceback:\n\
    \t/tmp/tmpvh7vrsh9.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, str in ipairs(strings) do\n        if string.sub(str, 1, #prefix)\
    \ == prefix then\n            table.insert(ret, str)\n        end\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n\
    \    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'},\
    \ 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tif not prefix then\n\
    \t\treturn strings\n\tend\n\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif str:starts(prefix) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpvbbq25.lua:8:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpcpvbbq25.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcpvbbq25.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal list = {}\n\
    \tfor _,v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) == prefix then\n\t\t\
    \ttable.insert(list, v)\n\t\tend\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _,s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix then\n\
    \      ret[#ret+1] = s\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, v in ipairs(strings) do\n        if v:startswith(prefix) then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6_dj9jrm.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp6_dj9jrm.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp6_dj9jrm.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqblc5q2.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmprqblc5q2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprqblc5q2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.sub(str, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local r = {}\n\
    \  for _,v in ipairs(strings) do\n    if string.sub(v, 1, #prefix) == prefix then\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif not prefix or str:sub(1, prefix:len())\
    \ == prefix then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local results\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix)\
    \ == prefix then\n            table.insert(results, string)\n        end\n   \
    \ end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal new_list\
    \ = {}\n\tfor _, n in ipairs(strings) do\n\t\tif n:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(new_list, n)\n\t\tend\n\tend\n\treturn new_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for i, s in ipairs(strings) do\n        if s:startswith(prefix) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61idenn3.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp61idenn3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp61idenn3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local t = {}\n\
    \  for i, str in ipairs(strings) do\n    if str:match('^' .. prefix) then\n  \
    \    table.insert(t, str)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for i, s in ipairs(strings) do\n        if s:starts(prefix) then\n\
    \            filtered[#filtered + 1] = s\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sfdzlzd.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmp7sfdzlzd.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp7sfdzlzd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  if prefix then\n\
    \    return l.filter(function(s) return string.sub(s, 1, string.len(prefix)) ==\
    \ prefix end, strings)\n  else\n    return strings\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplis0xjlk.lua:4:\
    \ attempt to index a nil value (global 'l')\nstack traceback:\n\t/tmp/tmplis0xjlk.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmplis0xjlk.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  if not strings\
    \ then return nil end\n  local result = {}\n  for i = 1, #strings do\n    if strings[i]:find(\"\
    ^\" .. prefix) then\n      table.insert(result, strings[i])\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local matches\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(matches, str)\n        end\n    end\n    return\
    \ matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpketwpnt4.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpketwpnt4.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpketwpnt4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(filtered, s)\n    end\n  end\n  return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    return array.filter(strings,\
    \ function(s) return string.startswith(s, prefix) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3sqsyxu7.lua:3:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmp3sqsyxu7.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp3sqsyxu7.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) ==\
    \ prefix then\n            table.insert(result, str)\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\treturn utils.filter(strings,\
    \ function(str)\n\t\treturn str:sub(1, #prefix) == prefix\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kh6tdwr.lua:3:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp6kh6tdwr.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp6kh6tdwr.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    return _(strings):map(function(s)\
    \ return s:gsub(\"^\" .. prefix, \"\") end):push_all(_(strings):filter(function(s)\
    \ return s:find(\"^\" .. prefix) end)):value()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0utpfk85.lua:3:\
    \ attempt to call a nil value (global '_')\nstack traceback:\n\t/tmp/tmp0utpfk85.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp0utpfk85.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for i = 1, #strings do\n        if string.find(strings[i], prefix)\
    \ == 1 then\n            table.insert(filtered, strings[i])\n        end\n   \
    \ end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for i = 1, #strings do\n        if strings[i]:sub(1, #prefix) == prefix\
    \ then\n            table.insert(filtered, strings[i])\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:startswith(prefix) then\n      table.insert(out,\
    \ v)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cjp9z8h.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp2cjp9z8h.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp2cjp9z8h.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  return tablex.ifilter(function(s)\
    \ return stringx.startswith(s, prefix) end, strings)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe71s79so.lua:3:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpe71s79so.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpe71s79so.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local res = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:match('^' .. prefix) then\n      table.insert(res,\
    \ s)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local rtn = {}\n\
    \    for _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix) == prefix\
    \ then\n            table.insert(rtn, s)\n        end\n    end\n    return rtn\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix\
    \ then\n            filtered[#filtered + 1] = v\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _,v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix)\
    \ == prefix then\n            table.insert(result, strings[i])\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal ret = {}\n\
    \tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local length =\
    \ #prefix\n  local filtered = {}\n  for _, str in ipairs(strings) do\n    if str:sub(1,\
    \ length) == prefix then\n      table.insert(filtered, str)\n    end\n  end\n\
    \  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local new_list\
    \ = {}\n  for _, item in ipairs(strings) do\n    if item:startswith(prefix) then\n\
    \      new_list[#new_list + 1] = item\n    end\n  end\n  return new_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqrm2tchw.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpqrm2tchw.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpqrm2tchw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n\
    \            result[#result + 1] = s\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppaqgbvac.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmppaqgbvac.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmppaqgbvac.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n\
    \            result[#result + 1] = s\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppaqgbvac.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmppaqgbvac.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmppaqgbvac.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local out = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n  \
    \          out[#out + 1] = s\n        end\n    end\n    return out\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr9pirc3.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpzr9pirc3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpzr9pirc3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local new_list\
    \ = {}\n    for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix\
    \ then\n            table.insert(new_list, v)\n        end\n    end\n    return\
    \ new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n\
    \            filtered[#filtered + 1] = s\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmx6nxq1f.lua:5:\
    \ attempt to call a nil value (method 'starts')\nstack traceback:\n\t/tmp/tmpmx6nxq1f.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpmx6nxq1f.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _, s in ipairs(strings) do\n\t\tif string.find(s, \"^\" .. prefix)\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local prefix_len\
    \ = #prefix\n  local starts_with_prefix = function(x)\n    return x:sub(1, prefix_len)\
    \ == prefix\n  end\n  return filter(starts_with_prefix, strings)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio9wfbpc.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpio9wfbpc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpio9wfbpc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  return f:filter(\n\
    \    function(str)\n      return string.sub(str, 1, #prefix) == prefix\n    end,\n\
    \    strings\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpae1nyr8p.lua:3:\
    \ attempt to index a nil value (global 'f')\nstack traceback:\n\t/tmp/tmpae1nyr8p.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpae1nyr8p.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.sub(str, 1, #prefix)\
    \ == prefix then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  local prefix_len = #prefix\n  for _,s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, prefix_len) == prefix then\n      result[#result+1] = s\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor _, value in ipairs(strings) do\n\t\tif string.startswith(value,\
    \ prefix) then\n\t\t\ttable.insert(filtered, value)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3qbhxu6.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpt3qbhxu6.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpt3qbhxu6.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if prefix then\n      if s:sub(1,\
    \ #prefix) == prefix then\n        table.insert(result, s)\n      end\n    else\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     out[#out + 1] = s\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local pf = string.gsub(prefix,\
    \ '%s+', '')\n  local ret = {}\n  for k,v in pairs(strings) do\n    if string.find(string.gsub(v,\
    \ '%s+', ''), '^' .. pf) then\n      table.insert(ret, v)\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local new_list\
    \ = {}\n  for _, name in ipairs(strings) do\n    if name:sub(1, #prefix) == prefix\
    \ then\n      new_list[#new_list + 1] = name\n    end\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local results\
    \ = {}\n    for i = 1, #strings do\n        if strings[i]:sub(1, #prefix) == prefix\
    \ then\n            results[#results + 1] = strings[i]\n        end\n    end\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal output =\
    \ {}\n\tfor _, line in ipairs(strings) do\n\t\tif string.sub(line, 1, string.len(prefix))\
    \ == prefix then\n\t\t\ttable.insert(output, line)\n\t\tend\n\tend\n\treturn output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for i = 1, #strings do\n    if string.sub(strings[i], 1, #prefix) ==\
    \ prefix then\n      table.insert(filtered, strings[i])\n    end\n  end\n  return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if prefix == s:sub(1, #prefix) then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    local prefix_len = prefix:len()\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, prefix_len) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    if not strings\
    \ then return nil end\n    local result = {}\n    for _, v in ipairs(strings)\
    \ do\n        if string.startswith(v, prefix) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_hohbj1p.lua:6:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmp_hohbj1p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_hohbj1p.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal t = {}\n\t\
    for _, v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) == prefix then\n\t\t\t\
    t[#t+1] = v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, name in ipairs(strings) do\n        if string.startswith(name,\
    \ prefix) then\n            table.insert(filtered, name)\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklh309ic.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpklh309ic.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpklh309ic.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local matching\
    \ = {}\n  for _, str in ipairs(strings) do\n    if string.find(str, \"^\" .. prefix)\
    \ then\n      table.insert(matching, str)\n    end\n  end\n  return matching\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local t = {}\n\
    \  for _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(t, s)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  if prefix == \"\
    \" then\n    return strings\n  end\n  local matches = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:startswith(prefix) then\n      table.insert(matches, s)\n    end\n\
    \  end\n  return matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppbc4c8x9.lua:8:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmppbc4c8x9.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmppbc4c8x9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal length =\
    \ #prefix\n\tlocal function fn(str)\n\t\treturn str:sub(1, length) == prefix\n\
    \tend\n\treturn filter(strings, fn)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnxf42mm.lua:7:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpsnxf42mm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsnxf42mm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3smkgx3.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpd3smkgx3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpd3smkgx3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor _,string in ipairs(strings) do\n\t\tif string:sub(1,#prefix) ==\
    \ prefix then\n\t\t\tfiltered[#filtered+1] = string\n\t\tend\n\tend\n\treturn\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor i,str in ipairs(strings) do\n\t\tif string.sub(str, 1, #prefix)\
    \ == prefix then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local rv = {}\n\
    \    for _, v in ipairs(strings) do\n        if v:startswith(prefix) then\n  \
    \          table.insert(rv, v)\n        end\n    end\n    return rv\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp3gwdgl4.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpp3gwdgl4.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpp3gwdgl4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for i, str in ipairs(strings) do\n    if str:find('^' .. prefix) then\n\
    \      table.insert(result, str)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:sub(1, #prefix) == prefix then\n \
    \     table.insert(out, s)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local output =\
    \ {}\n  for _,s in ipairs(strings) do\n    if string.startswith(s, prefix) then\n\
    \      table.insert(output, s)\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnq87qvu8.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpnq87qvu8.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpnq87qvu8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local found =\
    \ {}\n    for _, name in ipairs(strings) do\n        if name:sub(1, #prefix) ==\
    \ prefix then\n            table.insert(found, name)\n        end\n    end\n \
    \   return found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, prefix:len()) == prefix\
    \ then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local t = {}\n\
    \  for _, word in ipairs(strings) do\n    if string.find(word, \"^\" .. prefix)\
    \ then\n      table.insert(t, word)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str, prefix)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3531dbhs.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmp3531dbhs.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3531dbhs.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix))\
    \ == prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal result =\
    \ {}\n\tfor _,str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix\
    \ then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local res = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix) == prefix then\n\
    \            table.insert(res, s)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, s in ipairs(strings) do\n        if not prefix or s:sub(1,\
    \ #prefix) == prefix then\n            table.insert(filtered, s)\n        end\n\
    \    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local filtered\
    \ = {}\n  for _,s in ipairs(strings) do\n    if s:startswith(prefix) then\n  \
    \    table.insert(filtered, s)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfb6umoty.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpfb6umoty.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpfb6umoty.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.starts(s, prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpay_dgsc7.lua:5:\
    \ attempt to call a nil value (field 'starts')\nstack traceback:\n\t/tmp/tmpay_dgsc7.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpay_dgsc7.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _,string in ipairs(strings) do\n        if string:find(prefix) == 1 then\n\
    \            table.insert(ret, string)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for i = 1, #strings do\n        if strings[i]:sub(1, prefix:len()) == prefix\
    \ then\n            table.insert(ret, strings[i])\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, s in ipairs(strings) do\n        if s:startswith(prefix) then\n\
    \            table.insert(filtered, s)\n        end\n    end\n    return filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_b9zmni.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmpc_b9zmni.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpc_b9zmni.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local ret = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, name in ipairs(strings) do\n        if string.startswith(name,\
    \ prefix) then\n            filtered[#filtered + 1] = name\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyoqp4a_0.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmpyoqp4a_0.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpyoqp4a_0.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal filtered\
    \ = {}\n\tfor i, string in ipairs(strings) do\n\t\tif string:find(\"^\" .. prefix)\
    \ then\n\t\t\ttable.insert(filtered, string)\n\t\tend\n\tend\n\treturn filtered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local new_list\
    \ = {}\n  for _,str in ipairs(strings) do\n    if str:find(\"^\" .. prefix) then\n\
    \      new_list[#new_list+1] = str\n    end\n  end\n  return new_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _,str in ipairs(strings) do\n        if str:find(\"^\" .. prefix)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for i, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    if not prefix\
    \ then\n        return strings\n    end\n    local ret = {}\n    for i, v in ipairs(strings)\
    \ do\n        if v:sub(1, #prefix) == prefix then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  local prefix_len = #prefix\n  for _, name in ipairs(strings) do\n    if\
    \ name:sub(1, prefix_len) == prefix then\n      table.insert(result, name)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local result\
    \ = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix)\
    \ == prefix then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local subset =\
    \ {}\n  for _, v in ipairs(strings) do\n    if string.find(v, prefix, 1, true)\
    \ == 1 then\n      table.insert(subset, v)\n    end\n  end\n  return subset\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tif not prefix then\n\
    \t\treturn strings\n\tend\n\tlocal result = {}\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result, s)\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n\tlocal ret = {}\n\
    \tlocal i = 1\n\tfor _, str in ipairs(strings) do\n\t\tif str:find(\"^\" .. prefix)\
    \ then\n\t\t\tret[i] = str\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.startswith(str,\
    \ prefix) then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqblc5q2.lua:5:\
    \ attempt to call a nil value (field 'startswith')\nstack traceback:\n\t/tmp/tmprqblc5q2.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprqblc5q2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local filtered\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix)\
    \ == prefix then\n            table.insert(filtered, string)\n        end\n  \
    \  end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for _, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local ret = {}\n\
    \  for _, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix then\n \
    \     table.insert(ret, v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n    local function\
    \ filter(k, v)\n        if v:find(\"^\" .. prefix) then\n            return true\n\
    \        end\n    end\n    return filter_by(strings, filter)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jq8tqao.lua:8:\
    \ attempt to call a nil value (global 'filter_by')\nstack traceback:\n\t/tmp/tmp1jq8tqao.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1jq8tqao.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 1
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local out = {}\n\
    \  for _, s in ipairs(strings) do\n    if s:startswith(prefix) then\n      out[#out\
    \ + 1] = s\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75z8qjxe.lua:5:\
    \ attempt to call a nil value (method 'startswith')\nstack traceback:\n\t/tmp/tmp75z8qjxe.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp75z8qjxe.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local rtn = {}\n\
    \  for _, str in ipairs(strings) do\n    if str:sub(1, #prefix) == prefix then\n\
    \      table.insert(rtn, str)\n    end\n  end\n  return rtn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
- exit_code: 0
  program: "-- Filter an input list of strings only for ones that start with a given\
    \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n  local result =\
    \ {}\n  for i = 1, #strings do\n    if string.match(strings[i], \"^\" .. prefix)\
    \ then\n      table.insert(result, strings[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
    \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821855
