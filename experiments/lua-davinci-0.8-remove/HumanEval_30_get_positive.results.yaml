language: lua
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal new_list = {}\n\tfor _, i in ipairs(l) do\n\t\tif i > 0 then\n\t\t\ttable.insert(new_list,\
    \ i)\n\t\tend\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return l:gmatch(\"(%d+)\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3d3kcfzz.lua:3:\
    \ attempt to call a nil value (method 'gmatch')\nstack traceback:\n\t/tmp/tmp3d3kcfzz.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp3d3kcfzz.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal out = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r + 1] = l[i]\n\
    \    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal pos = {}\n\tfor i, val in ipairs(l) do\n\t\tif val > 0 then\n\t\t\ttable.insert(pos,\
    \ val)\n\t\tend\n\tend\n\treturn pos\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] =\
    \ v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local t = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(t, v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local p = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(p,\
    \ v)\n    end\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \treturn filter(l, function(v) return v > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbepa8qwh.lua:3:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpbepa8qwh.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpbepa8qwh.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\tres[#res\
    \ + 1] = v\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdh0pgcx.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmptdh0pgcx.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      ret[#ret +\
    \ 1] = l[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    return tfilter(function(x) return x > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7pjyjsh.lua:3:\
    \ attempt to call a nil value (global 'tfilter')\nstack traceback:\n\t/tmp/tmpo7pjyjsh.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpo7pjyjsh.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tif #l > 0 then\n\t\treturn util.filter(l, function(i) return i > 0 end)\n\t\
    else\n\t\treturn l\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb0txxzqd.lua:4:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpb0txxzqd.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpb0txxzqd.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal new_list = {}\n\tfor _, i in ipairs(l) do\n\t\tif i > 0 then\n\t\t\ttable.insert(new_list,\
    \ i)\n\t\tend\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return filter(function(x) return x > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yfj_ruo.lua:3:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp8yfj_ruo.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp8yfj_ruo.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal out = {}\n\tfor k, v in pairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local lout = {}\n  for i = 1, #l do\n    if l[i] > 0 then lout[#lout + 1] =\
    \ l[i] end\n  end\n  return lout\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal res = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tres[#res + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      res[#res+1]\
    \ = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tresult[#result\
    \ + 1] = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal results = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then table.insert(results,\
    \ v) end\n\tend\n\treturn results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then r[#r+1] = v end\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, n in ipairs(l) do\n        if n > 0 then\n   \
    \         table.insert(ret, n)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      res[#res+1]\
    \ = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if v > 0 then table.insert(out,\
    \ v) end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for k,v in pairs(l) do\n        if v > 0 then table.insert(positive,\
    \ v) end\n    end\n    return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local tmp = {}\n  for _,v in ipairs(l) do\n    if (v > 0) then\n      table.insert(tmp,\
    \ v)\n    end\n  end\n  return tmp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return tablex.filter(function(v) return v > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp33jtw_a3.lua:3:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmp33jtw_a3.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp33jtw_a3.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ll = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(ll,\
    \ v)\n\t\tend\n\tend\n\treturn ll\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      ret[#ret +\
    \ 1] = l[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      t[#t + 1] = l[i]\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] =\
    \ v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then r[#r+1] = v end\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n        \
    \    res[#res + 1] = l[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local filtered = {}\n  for _, i in ipairs(l) do\n    if i > 0 then\n      table.insert(filtered,\
    \ i)\n    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb98kev77.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpb98kev77.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor i = 1,#l do\n\t\tif l[i] > 0 then\n\t\t\tresult[#result+1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    if #l == 0 then\n        return l\n    end\n    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(t, v)\n \
    \       end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return function(a, b) return a + (b > 0 and b or 0) end, 0, l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek11yzvl.lua:9:\
    \ expected: {4, 5, 6}\nactual: function: 0x55aaac03c6d0\nstack traceback:\n\t\
    /tmp/tmpek11yzvl.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \treturn l:map(function(v) return math.max(v, 0) end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpya6afe5x.lua:3:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpya6afe5x.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpya6afe5x.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, el in ipairs(l) do\n        if el > 0 then\n \
    \           table.insert(res, el)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for k, v in pairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    return map(get_positive_a, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_lfmc_8.lua:3:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpx_lfmc_8.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpx_lfmc_8.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local result = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _, i in ipairs(l) do\n    if i > 0 then\n      r[#r+1]\
    \ = i\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal new = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(new,\
    \ v)\n\t\tend\n\tend\n\treturn new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      result[#result\
    \ + 1] = l[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local new_l = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_l,\
    \ v)\n    end\n  end\n  return new_l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then res[#res+1] =\
    \ v end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local a = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(a, v)\n        end\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal i = 1\n\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\
    \t\t\tr[i] = v\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local list = {}\n    for i, v in ipairs(l) do\n        if (v > 0) then\n\
    \            table.insert(list, v)\n        end\n    end\n    return list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal output = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(output,\
    \ v)\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for i, n in ipairs(l) do\n        if n >= 0 then\n  \
    \          table.insert(ret, n)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzkk9o2g.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpgzkk9o2g.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal res = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tres[#res+1]\
    \ = v\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      res[#res+1]\
    \ = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tresult[#result\
    \ + 1] = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local function predicate(item)\n    return item > 0\n  end\n  return l:filter(predicate)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmkkxxxag.lua:6:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpmkkxxxag.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmkkxxxag.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local out = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      out[#out+1]\
    \ = v\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal newl = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tnewl[#newl\
    \ + 1] = l[i]\n\t\tend\n\tend\n\treturn newl\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(out,\
    \ v)\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, n in ipairs(l) do\n\t\tif n > 0 then\n\t\t\tr[#r+1] =\
    \ n\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local r = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n      \
    \      r[#r+1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal nl = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(nl,\
    \ v)\n\t\tend\n\tend\n\treturn nl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lysgubx.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp6lysgubx.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local out = {}\n    for i = 1, #l do\n        if l[i] > 0 then table.insert(out,\
    \ l[i]) end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\tt[#t+1]\
    \ = v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kz06b9v.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp8kz06b9v.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, x in ipairs(l) do\n    if x > 0 then\n      table.insert(result,\
    \ x)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    -- first use pcall, in case the list is not an array.\n    local res = {}\n\
    \    for i, v in pcall(ipairs, l) do\n        if v > 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_2gqk5d.lua:5:\
    \ variable '(for state)' got a non-closable value\nstack traceback:\n\t/tmp/tmpy_2gqk5d.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpy_2gqk5d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal pos = {}\n\tfor _, n in ipairs(l) do\n\t\tif n > 0 then\n\t\t\tpos[#pos+1]\
    \ = n\n\t\tend\n\tend\n\treturn pos\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local pos = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      pos[#pos+1]\
    \ = v\n    end\n  end\n  return pos\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal pos = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(pos,\
    \ v)\n\t\tend\n\tend\n\treturn pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then r[#r+1] = v end\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] =\
    \ v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i,n in ipairs(l) do\n    if n > 0 then\n      table.insert(result,\
    \ n)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return l:filter(function(x) return x > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1c3c1ch.lua:3:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmpg1c3c1ch.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpg1c3c1ch.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local p = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(p, v)\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    return utils.filter(l, function(v) return v > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgupvwha.lua:3:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpzgupvwha.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpzgupvwha.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local rez = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(rez,\
    \ v)\n    end\n  end\n  return rez\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for i, n in ipairs(l) do\n    if n > 0 then\n      res[#res\
    \ + 1] = n\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n        \
    \    res[#res + 1] = l[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    if l == nil then return nil end\n    local m = {}\n    for _,v in ipairs(l)\
    \ do\n        if v >= 0 then\n            table.insert(m, v)\n        end\n  \
    \  end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoi8t857y.lua:17:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpoi8t857y.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local t = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(t, v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local xs = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      xs[#xs + 1]\
    \ = l[i]\n    end\n  end\n  return xs\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local positive = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal t = {}\n\tlocal n = 1\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\
    \t\tt[n] = v\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, n in ipairs(l) do\n    if n > 0 then\n      table.insert(ret,\
    \ n)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local r = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(r, v)\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local nl = {}\n  for i,v in ipairs(l) do\n    if v > 0 then nl[#nl+1] = v end\n\
    \  end\n  return nl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] =\
    \ v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n        \
    \    res[#res + 1] = l[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local r = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n          \
    \  r[#r + 1] = l[i]\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal pos = {}\n\tfor _,x in ipairs(l) do\n\t\tif x > 0 then\n\t\t\ttable.insert(pos,\
    \ x)\n\t\tend\n\tend\n\treturn pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(pos, v)\n        end\n    end\n    return pos\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local o = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n      \
    \      table.insert(o, v)\n        end\n    end\n    return o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n    \
    \        table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb98kev77.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpb98kev77.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local r = {}\n  for _,v in ipairs(l) do\n    if v >= 0 then\n      r[#r+1]\
    \ = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9919haq.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpr9919haq.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tr[#r+1] =\
    \ v\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local r = {}\n    for i,v in ipairs(l) do\n        if (v > 0) then r[#r+1]\
    \ = v end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local k = {}\n    for _, v in ipairs(l) do\n        if (v >= 0) then\n  \
    \          table.insert(k, v)\n        end\n    end\n    return k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3i52y4u6.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp3i52y4u6.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then r[#r+1] = v end\n\
    \tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      t[#t+1]\
    \ = v\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local t = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local l2 = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(l2, v)\n        end\n    end\n    return l2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal list = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(list,\
    \ v)\n\t\tend\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal t = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[#t+1] =\
    \ v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal positive = {}\n\tfor i = 1,#l do\n\t\tif (l[i] > 0) then\n\t\t\ttable.insert(positive,\
    \ l[i])\n\t\tend\n\tend\n\treturn positive\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local o = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(o,\
    \ v)\n    end\n  end\n  return o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvra3ll5.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpqvra3ll5.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local k, v, res = nil, nil, {}\n  for k, v in pairs(l) do\n    if v > 0 then\n\
    \      res[k] = v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzqoxzx0.lua:15:\
    \ expected: {4, 5, 6}\nactual: {3=4, 4=5, 5=6}\nstack traceback:\n\t/tmp/tmpvzqoxzx0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local r = {}\n    for i, v in ipairs(l) do\n        if (v > 0) then\n   \
    \         r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[#t+1] =\
    \ v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _,v in ipairs(l) do\n    if v >= 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp5y_xc5.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpvp5y_xc5.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    return juicer.filter(l, juicer.is_positive)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww79gct_.lua:3:\
    \ attempt to index a nil value (global 'juicer')\nstack traceback:\n\t/tmp/tmpww79gct_.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpww79gct_.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local new_list = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(new_list, v)\n        end\n    end\n    return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal res = {}\n\tfor _, n in ipairs(l) do\n\t\tif n > 0 then\n\t\t\ttable.insert(res,\
    \ n)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for i, v in ipairs(l) do\n        if (v > 0) then\n \
    \           table.insert(pos, v)\n        end\n    end\n    return pos\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local positive = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(positive, v)\n        end\n    end\n    return positive\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local n = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      n[#n+1]\
    \ = v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal p = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then p[#p + 1] = l[i] end\n\
    \tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n        \
    \    ret[#ret + 1] = l[i]\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, i in ipairs(l) do\n        if i > 0 then\n   \
    \         table.insert(res, i)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    if type(l) ~= \"table\" then\n        return\n    end\n    local ret = {}\n\
    \    for _,v in ipairs(l) do\n        if v >= 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13zkc8fn.lua:19:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp13zkc8fn.lua:19: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return extract(l, function(e) return e > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9umiofa.lua:3:\
    \ attempt to call a nil value (global 'extract')\nstack traceback:\n\t/tmp/tmpv9umiofa.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpv9umiofa.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(pos, v)\n        end\n    end\n    return pos\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local ret = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(pos, v)\n        end\n    end\n    return pos\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local t = {}\n    for i, item in ipairs(l) do\n        if item > 0 then\n\
    \            table.insert(t, item)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local result = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local new_list = {}\n    for i, v in ipairs(l) do\n        if v >= 0 then\n\
    \            table.insert(new_list, v)\n        end\n    end\n    return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx5picif.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpdx5picif.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local t = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(t, v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal new = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tnew[#new + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn new\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local new_list = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(new_list, v)\n        end\n    end\n    return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then table.insert(ret,\
    \ v) end\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pl = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(pl, v)\n        end\n    end\n    return pl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \t-- Find the first positive value.\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\
    \t\t\treturn l[i]\n\t\tend\n\tend\n\treturn 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdyjffs1.lua:15:\
    \ expected: {4, 5, 6}\nactual: 4\nstack traceback:\n\t/tmp/tmpjdyjffs1.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then r[#r+1] = v end\n\
    \tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, x in ipairs(l) do\n        if x > 0 then\n   \
    \         table.insert(res, x)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    if l == nil then return nil end\n    local t = {}\n    for _,v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(t, v)\n        end\n   \
    \ end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    -- If a value is <= 0, don't include it in the list that is returned.\n \
    \   return filter(function(v) return v > 0 end, l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplq3bg8k2.lua:4:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplq3bg8k2.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmplq3bg8k2.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor i, e in ipairs(l) do\n\t\tif e > 0 then\n\t\t\tr[#r+1] =\
    \ e\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local result = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n \
    \           table.insert(result, v)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local t = {}\n    for i, v in ipairs(l) do\n        if v >= 0 then\n    \
    \        table.insert(t, v)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsbx8su2.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpnsbx8su2.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(res, v)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local ret = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(ret, v)\n        end\n    end\n    return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  return list.filter(l, function(e) return e > 0 end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp642cphwu.lua:3:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp642cphwu.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp642cphwu.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal out = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8_qyd0x.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmpf8_qyd0x.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821809
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal t = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[#t+1] =\
    \ v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local new_list = {}\n  for i,v in ipairs(l) do\n    if v > 0 then new_list[#new_list+1]\
    \ = v end\n  end\n  return new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    local pos = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(pos, v)\n        end\n    end\n    return pos\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
    \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal out = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \  local _, numbers = l:foldl(function (sum, n)\n    if n >= 0 then\n      return\
    \ sum + 1, n\n    else\n      return sum, nil\n    end\n  end, 0, nil)\n  return\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3,\
    \ 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}), {})\n    lu.assertEquals(candidate({}),\
    \ {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6wqrzm4.lua:3:\
    \ attempt to call a nil value (method 'foldl')\nstack traceback:\n\t/tmp/tmpk6wqrzm4.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpk6wqrzm4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal _l = {}\n\tlocal _i = 1\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\
    \t\t\t_l[_i] = v\n\t\t\t_i = _i + 1\n\t\tend\n\tend\n\treturn _l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal result = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal n = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(n,\
    \ v)\n\t\tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sc073mg.lua:16:\
    \ expected: {5, 3, 2, 3, 3, 9, 123, 1}\nactual: {5, 3, 2, 3, 3, 9, 0, 123, 1}\n\
    stack traceback:\n\t/tmp/tmp0sc073mg.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821810
- exit_code: 1
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \    return get_cond(l, is_positive)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_positive\n    lu.assertEquals(candidate({-1,\
    \ -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
    \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jcvys7t.lua:3:\
    \ attempt to call a nil value (global 'get_cond')\nstack traceback:\n\t/tmp/tmp4jcvys7t.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp4jcvys7t.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821810
- exit_code: 0
  program: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n\
    \tlocal ret = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_positive\n    lu.assertEquals(candidate({-1, -2, 4, 5, 6}),\
    \ {4, 5, 6})\n    lu.assertEquals(candidate({5, 3, -5, 2, 3, 3, 9, 0, 123, 1,\
    \ -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1, -2}),\
    \ {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821810
