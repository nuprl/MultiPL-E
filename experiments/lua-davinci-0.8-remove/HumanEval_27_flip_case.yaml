name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal flipped = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tif char:match(\"[%a]\") then\n\t\t\tchar = char:match(\"[%u]\") and\
    \ char:lower() or char:upper()\n\t\tend\n\t\tflipped[i] = char\n\tend\n\treturn\
    \ table.concat(flipped)\nend", "    local flip_case_string = \"\"\n    for i =\
    \ 1, #string do\n        if string.sub(string, i, i) == string.lower(string.sub(string,\
    \ i, i)) then\n            flip_case_string = flip_case_string .. string.upper(string.sub(string,\
    \ i, i))\n        else\n            flip_case_string = flip_case_string .. string.lower(string.sub(string,\
    \ i, i))\n        end\n    end\n    return flip_case_string\nend", "\treturn string:gsub(\"\
    %l\", function(c)\n\t\tif c:byte() >= ASCII_UPPER_A and c:byte() <= ASCII_UPPER_Z\
    \ then\n\t\t\treturn c:lower()\n\t\telseif c:byte() >= ASCII_LOWER_A and c:byte()\
    \ <= ASCII_LOWER_Z then\n\t\t\treturn c:upper()\n\t\telse\n\t\t\treturn c\n\t\t\
    end\n\tend)\nend", "    return string:gsub('%a', function(ch)\n        return\
    \ ch == ch:lower() and ch:upper() or ch:lower()\n    end)\nend", "    local new_string\
    \ = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n \
    \       if char == char:lower() then\n            new_string = new_string .. char:upper()\n\
    \        else\n            new_string = new_string .. char:lower()\n        end\n\
    \    end\n    return new_string\nend", "  local flipped = {}\n  for c in string:gmatch(\"\
    .\") do\n    if c:match(\"%a\") then\n      table.insert(flipped, c:upper() ==\
    \ c and c:lower() or c:upper())\n    else\n      table.insert(flipped, c)\n  \
    \  end\n  end\n  return table.concat(flipped)\nend", "    local flipped = {}\n\
    \    for char in string:gmatch(\".\") do\n        if char:match(\"%l\") then\n\
    \            flipped[#flipped + 1] = char:upper()\n        elseif char:match(\"\
    %u\") then\n            flipped[#flipped + 1] = char:lower()\n        else\n \
    \           flipped[#flipped + 1] = char\n        end\n    end\n    return table.concat(flipped)\n\
    end", "  return string:gsub(\"%l\", function(letter)\n    return letter:upper()\
    \ == letter and letter:lower() or letter:upper()\n  end)\nend", "    return string:gsub(\"\
    %a\", {\n        [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] =\
    \ \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"\
    i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"\
    M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"\
    ] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\"\
    , [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n      \
    \  [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"\
    ] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"]\
    \ = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\"\
    , [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"]\
    \ = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n    })\nend", " \
    \   local mod_string = \"\"\n    for i = 1, #string do\n        if not string:sub(i,\
    \ i):match(\"%a\") then\n            mod_string = mod_string .. string:sub(i,\
    \ i)\n        elseif string:sub(i, i):match(\"%a\") and string:sub(i, i):match(\"\
    %u\") then\n            mod_string = mod_string .. string:sub(i, i):lower()\n\
    \        elseif string:sub(i, i):match(\"%a\") and string:sub(i, i):match(\"%l\"\
    ) then\n            mod_string = mod_string .. string:sub(i, i):upper()\n    \
    \    end\n    end\n    return mod_string\nend", "    return string:gsub(\"%a\"\
    , function(ch)\n        return ch == ch:lower() and ch:upper() or ch:lower()\n\
    \    end)\nend", "\tif not string then return end\n\tlocal str = \"\"\n\tfor char\
    \ in string:gmatch(\".\") do\n\t\tlocal c = char:byte()\n\t\tif c >= 97 and c\
    \ <= 122 then\n\t\t\tc = c - 32\n\t\telseif c >= 65 and c <= 90 then\n\t\t\tc\
    \ = c + 32\n\t\tend\n\t\tstr = str .. string.char(c)\n\tend\n\treturn str\nend",
  "    local result = \"\"\n    for i = 1, string.len(string) do\n        local current_char\
    \ = string.sub(string, i, i)\n        if string.match(current_char, \"%l\") then\n\
    \            result = result .. string.upper(current_char)\n        elseif string.match(current_char,\
    \ \"%u\") then\n            result = result .. string.lower(current_char)\n  \
    \      else\n            result = result .. current_char\n        end\n    end\n\
    \    return result\nend", "  local flipped = {}\n  for character in string:gmatch(\"\
    .\") do\n    if character:match(\"%u\") then\n      table.insert(flipped, character:lower())\n\
    \    elseif character:match(\"%l\") then\n      table.insert(flipped, character:upper())\n\
    \    else\n      table.insert(flipped, character)\n    end\n  end\n  return table.concat(flipped)\n\
    end", "  local res = \"\"\n  for _, char in ipairs(char_array(string)) do\n  \
    \  if char:match(\"[a-z]\") then\n      res = res .. char:upper()\n    elseif\
    \ char:match(\"[A-Z]\") then\n      res = res .. char:lower()\n    else\n    \
    \  res = res .. char\n    end\n  end\n  return res\nend", "    -- For a given\
    \ char, flip the case\n    local function flip_char(char)\n        if char:match(\"\
    %a\") then\n            return char:lower() == char and char:upper() or char:lower()\n\
    \        else\n            return char\n        end\n    end", "  return string:gsub(\"\
    %a\", {\n    [\"a\"] = \"A\",\n    [\"b\"] = \"B\",\n    [\"c\"] = \"C\",\n  \
    \  [\"d\"] = \"D\",\n    [\"e\"] = \"E\",\n    [\"f\"] = \"F\",\n    [\"g\"] =\
    \ \"G\",\n    [\"h\"] = \"H\",\n    [\"i\"] = \"I\",\n    [\"j\"] = \"J\",\n \
    \   [\"k\"] = \"K\",\n    [\"l\"] = \"L\",\n    [\"m\"] = \"M\",\n    [\"n\"]\
    \ = \"N\",\n    [\"o\"] = \"O\",\n    [\"p\"] = \"P\",\n    [\"q\"] = \"Q\",\n\
    \    [\"r\"] = \"R\",\n    [\"s\"] = \"S\",\n    [\"t\"] = \"T\",\n    [\"u\"\
    ] = \"U\",\n    [\"v\"] = \"V\",\n    [\"w\"] = \"W\",\n    [\"x\"] = \"X\",\n\
    \    [\"y\"] = \"Y\",\n    [\"z\"] = \"Z\",\n    [\"A\"] = \"a\",\n    [\"B\"\
    ] = \"b\",\n    [\"C\"] = \"c\",\n    [\"D\"] = \"d\",\n    [\"E\"] = \"e\",\n\
    \    [\"F\"] = \"f\",\n    [\"G\"] = \"g\",\n    [\"H\"] = \"h\",\n    [\"I\"\
    ] = \"i\",\n    [\"J\"] = \"j\",\n    [\"K\"] = \"k\",\n    [\"L\"] = \"l\",\n\
    \    [\"M\"] = \"m\",\n    [\"N\"] = \"n\",\n    [\"O\"] = \"o\",\n    [\"P\"\
    ] = \"p\",\n    [\"Q\"] = \"q\",\n    [\"R\"] = \"r\",\n    [\"S\"] = \"s\",\n\
    \    [\"T\"] = \"t\",\n    [\"U\"] = \"u\",\n    [\"V\"] = \"v\",\n    [\"W\"\
    ] = \"w\",\n    [\"X\"] = \"x\",\n    [\"Y\"] = \"y\",\n    [\"Z\"] = \"z\",\n\
    \  })\nend", "  local flipped = {}\n  for i = 1, #string do\n    local c = string:sub(i,\
    \ i)\n    if c:lower() == c then\n      flipped[i] = c:upper()\n    else\n   \
    \   flipped[i] = c:lower()\n    end\n  end\n  return table.concat(flipped)\nend",
  "\tlocal function flip(char)\n\t\tif char:match(\"%l\") then\n\t\t\treturn char:upper()\n\
    \t\telseif char:match(\"%u\") then\n\t\t\treturn char:lower()\n\t\telse\n\t\t\t\
    return char\n\t\tend\n\tend\n\treturn string:gsub(\".\", flip)\nend", "    local\
    \ n = string:len()\n    local flipped = {}\n    for i = 1, n do\n        local\
    \ char = string:sub(i, i)\n        if char:match('%a') then\n            flipped[i]\
    \ = char:lower() == char and char:upper() or char:lower()\n        else\n    \
    \        flipped[i] = char\n        end\n    end\n    return table.concat(flipped)\n\
    end", "    return (string:gsub(\"%a\",\n                        function(ch)\n\
    \                            if ch:match(\"[a-z]\") then\n                   \
    \             return ch:upper()\n                            else\n          \
    \                      return ch:lower()\n                            end\n  \
    \                      end))\nend", "\tlocal str = string or ''\n\treturn (str:gsub('%a',\
    \ string.char(string.byte(str, 1)^32)))\nend", "    string = string:gsub('%u',\
    \ function(c) return c:lower() end)\n    string = string:gsub('%l', function(c)\
    \ return c:upper() end)\n    return string\nend", "  return string:gsub(\"%a\"\
    , function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n\
    \      return c:lower()\n    end\n  end)\nend", "  local news = \"\"\n  for i\
    \ = 1, #string do\n    local byte = string:byte(i)\n    if byte >= 65 and byte\
    \ <= 90 then\n      byte = byte + 32\n    elseif byte >= 97 and byte <= 122 then\n\
    \      byte = byte - 32\n    end\n    news = news .. string.char(byte)\n  end\n\
    \  return news\nend", "    return (string:gsub(\"%a\", function(char)\n      \
    \  return char == char:lower() and char:upper() or char:lower()\n    end))\nend",
  "    local flipped = \"\"\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:match(\"[a-z]\") then\n            flipped = flipped .. c:upper()\n\
    \        elseif c:match(\"[A-Z]\") then\n            flipped = flipped .. c:lower()\n\
    \        else\n            flipped = flipped .. c\n        end\n    end\n    return\
    \ flipped\nend", "  local len = string:len()\n  local result = {}\n  for i = 1,\
    \ len do\n    local s = string:sub(i, i)\n    if s:lower() == s then\n      result[i]\
    \ = s:upper()\n    else\n      result[i] = s:lower()\n    end\n  end\n  return\
    \ table.concat(result)\nend", "\tlocal new_string = \"\"\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal character = string.sub(string, i, i)\n\t\tif character == character:lower()\
    \ then\n\t\t\tnew_string = new_string .. character:upper()\n\t\telse\n\t\t\tnew_string\
    \ = new_string .. character:lower()\n\t\tend\n\tend\n\treturn new_string\nend",
  "    local new_string = {}\n    for i=1,string.len(string) do\n        local char\
    \ = string.sub(string, i, i)\n        if string.match(char, '[a-z]') then\n  \
    \          char = string.upper(char)\n        elseif string.match(char, '[A-Z]')\
    \ then\n            char = string.lower(char)\n        end\n        table.insert(new_string,\
    \ char)\n    end\n    return table.concat(new_string)\nend", "\tif string:match('^%l')\
    \ then\n\t\treturn string:gsub('^(%l)(.-)$', function(first, rest)\n\t\t\treturn\
    \ string.upper(first) .. rest\n\t\tend)\n\telse\n\t\treturn string:gsub('^(%u)(.-)$',\
    \ function(first, rest)\n\t\t\treturn string.lower(first) .. rest\n\t\tend)\n\t\
    end\nend", "  return (string:gsub(\"%a\", function(char)\n    if char:match(\"\
    %l\") then\n      return char:upper()\n    else\n      return char:lower()\n \
    \   end\n  end))\nend", "    local flipped = string:gsub(\"%a\", {\n        [\"\
    a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"\
    E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"\
    ] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\"\
    , [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"]\
    \ = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\"\
    , [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n        [\"A\"] = \"a\"\
    , [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"]\
    \ = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\"\
    , [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"]\
    \ = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\"\
    , [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"]\
    \ = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n    })\n    return flipped\nend",
  "  return string:gsub('%a', function(char)\n    if char:lower() == char then\n \
    \     return char:upper()\n    else\n      return char:lower()\n    end\n  end)\n\
    end", "  local flipped = {}\n  for i = 1, #string do\n    if string.sub(string,\
    \ i, i) == string.upper(string.sub(string, i, i)) then\n      flipped[i] = string.lower(string.sub(string,\
    \ i, i))\n    else\n      flipped[i] = string.upper(string.sub(string, i, i))\n\
    \    end\n  end\n  return table.concat(flipped)\nend", "    return (string:gsub(\"\
    %l\", string.upper):gsub(\"%u\", string.lower))\nend", "\tlocal new = \"\"\n\t\
    for i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tlocal upper = char:upper()\n\
    \t\tif char == upper then\n\t\t\tnew = new .. char:lower()\n\t\telse\n\t\t\tnew\
    \ = new .. upper\n\t\tend\n\tend\n\treturn new\nend", "  local flipped = \"\"\n\
    \  for i = 1, #string do\n    if string.sub(string, i, i) == string.upper(string.sub(string,\
    \ i, i)) then\n      flipped = flipped .. string.lower(string.sub(string, i, i))\n\
    \    else\n      flipped = flipped .. string.upper(string.sub(string, i, i))\n\
    \    end\n  end\n  return flipped\nend", "    return string:gsub(\"(%a)([%a])\"\
    , function(a, b)\n        return (b:upper() == b) and (a:lower() .. b:lower())\
    \ or (a:upper() .. b)\n    end)\nend", "    local result = \"\"\n    for i = 1,\
    \ #string do\n        local c = string:sub(i, i)\n        if c:match(\"[%a]\"\
    ) then\n            if c:match(\"[%u]\") then\n                result = result\
    \ .. c:lower()\n            else\n                result = result .. c:upper()\n\
    \            end\n        else\n            result = result .. c\n        end\n\
    \    end\n    return result\nend", "\treturn (string:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower))\nend", "  return (string:gsub(\"%a\", function(letter)\n\
    \    return letter == letter:lower() and letter:upper() or letter:lower()\n  end))\n\
    end", "  return string:gsub(\"%a\", function(letter)\n    return letter == letter:lower()\
    \ and letter:upper() or letter:lower()\n  end)\nend", "    return string:gsub(\"\
    %a\", {[\"a\"] = \"A\", [\"A\"] = \"a\", [\"b\"] = \"B\", [\"B\"] = \"b\", [\"\
    c\"] = \"C\", [\"C\"] = \"c\", [\"d\"] = \"D\", [\"D\"] = \"d\", [\"e\"] = \"\
    E\", [\"E\"] = \"e\", [\"f\"] = \"F\", [\"F\"] = \"f\", [\"g\"] = \"G\", [\"G\"\
    ] = \"g\", [\"h\"] = \"H\", [\"H\"] = \"h\", [\"i\"] = \"I\", [\"I\"] = \"i\"\
    , [\"j\"] = \"J\", [\"J\"] = \"j\", [\"k\"] = \"K\", [\"K\"] = \"k\", [\"l\"]\
    \ = \"L\", [\"L\"] = \"l\", [\"m\"] = \"M\", [\"M\"] = \"m\", [\"n\"] = \"N\"\
    , [\"N\"] = \"n\", [\"o\"] = \"O\", [\"O\"] = \"o\", [\"p\"] = \"P\", [\"P\"]\
    \ = \"p\", [\"q\"] = \"Q\", [\"Q\"] = \"q\", [\"r\"] = \"R\", [\"R\"] = \"r\"\
    , [\"s\"] = \"S\", [\"S\"] = \"s\", [\"t\"] = \"T\", [\"T\"] = \"t\", [\"u\"]\
    \ = \"U\", [\"U\"] = \"u\", [\"v\"] = \"V\", [\"V\"] = \"v\", [\"w\"] = \"W\"\
    , [\"W\"] = \"w\", [\"x\"] = \"X\", [\"X\"] = \"x\", [\"y\"] = \"Y\", [\"Y\"]\
    \ = \"y\", [\"z\"] = \"Z\", [\"Z\"] = \"z\"})\nend", "\treturn (string:gsub(\"\
    %a\", function(s) return (s == s:lower()) and s:upper() or s:lower() end))\nend",
  "  local output = \"\"\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if char == char:lower() then\n      output = output .. char:upper()\n\
    \    else\n      output = output .. char:lower()\n    end\n  end\n  return output\n\
    end", "    return string:gsub(\"%w\", function(char)\n        if char:match(\"\
    %u\") then\n            return char:lower()\n        else\n            return\
    \ char:upper()\n        end\n    end)\nend", "    return string:gsub(\"%a\", function(c)\n\
    \        if (c:lower() == c) then\n            return c:upper()\n        else\n\
    \            return c:lower()\n        end\n    end)\nend", "\treturn string:gsub('%a',\
    \ { ['%a'] = string.upper, ['%A'] = string.lower })\nend", "  local out = \"\"\
    \n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:lower()\
    \ == char then\n      out = out .. char:upper()\n    else\n      out = out ..\
    \ char:lower()\n    end\n  end\n  return out\nend", "\treturn string:gsub('.',\n\
    \t\tfunction(char)\n\t\t\treturn char == char:upper() and char:lower() or char:upper()\n\
    \t\tend\n\t)\nend", "  if string == nil then return nil end\n  return string:gsub(\"\
    (%a)\", function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n\
    \      return c:lower()\n    end\n  end)\nend", "    local flipped = \"\"\n  \
    \  for i = 1, #string do\n        local char = string:sub(i, i)\n        if char:lower()\
    \ == char then\n            flipped = flipped .. char:upper()\n        else\n\
    \            flipped = flipped .. char:lower()\n        end\n    end\n    return\
    \ flipped\nend", "  local result = \"\"\n  for i = 1, #string do\n    local char\
    \ = string:sub(i, i)\n    if char == char:lower() then\n      result = result\
    \ .. char:upper()\n    else\n      result = result .. char:lower()\n    end\n\
    \  end\n  return result\nend", "  return string:gsub(\"%a\", function(char)\n\
    \    if char:lower() == char then\n      return char:upper()\n    else\n     \
    \ return char:lower()\n    end\n  end)\nend", "    local new_string = {}\n   \
    \ for i = 1, #string do\n        local current_char = string:sub(i, i)\n     \
    \   if current_char:match(\"%a\") then\n            if current_char:match(\"%l\"\
    ) then\n                new_string[i] = current_char:upper()\n            else\n\
    \                new_string[i] = current_char:lower()\n            end\n     \
    \   else\n            new_string[i] = current_char\n        end\n    end\n   \
    \ return table.concat(new_string)\nend", "  local result = \"\"\n  for i = 1,\
    \ string.len(string) do\n    result = result .. string.upper(string.sub(string,\
    \ i, i))\n  end\n  return result\nend", "\treturn string:gsub('(%a)', function(c)\n\
    \t\tif c == c:lower() then\n\t\t\treturn c:upper()\n\t\telse\n\t\t\treturn c:lower()\n\
    \t\tend\n\tend)\nend", "\treturn (string:gsub(\".\", {\n\t\t[string.lower(string)]\
    \ = string.upper,\n\t\t[string.upper(string)] = string.lower,\n\t}))\nend", " \
    \ local flipped = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n\
    \    if c:match(\"%a\") then\n      flipped[i] = c:upper() == c and c:lower()\
    \ or c:upper()\n    else\n      flipped[i] = c\n    end\n  end\n  return table.concat(flipped)\n\
    end", "\tlocal flipped = {}\n\tlocal ascii_a = 97\n\tlocal ascii_z = 122\n\tlocal\
    \ ascii_A = 65\n\tlocal ascii_Z = 90\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tlocal ascii = string.byte(char)\n\t\tif ascii >= ascii_a\
    \ and ascii <= ascii_z then\n\t\t\tflipped[i] = string.char(ascii - ascii_a +\
    \ ascii_A)\n\t\telseif ascii >= ascii_A and ascii <= ascii_Z then\n\t\t\tflipped[i]\
    \ = string.char(ascii - ascii_A + ascii_a)\n\t\telse\n\t\t\tflipped[i] = char\n\
    \t\tend\n\tend\n\treturn table.concat(flipped)\nend", "\treturn string:gsub(\"\
    %a\", function(s) return upper_to_lower[s] or lower_to_upper[s] end)\nend", " \
    \   return string:gsub(\"(%a)\", function(s)\n        if s:match(\"%u\") then\n\
    \            return s:lower()\n        else\n            return s:upper()\n  \
    \      end\n    end)\nend", "    return (string:gsub(\"%a\", function(char)\n\
    \        if char:lower() == char then\n            return char:upper()\n     \
    \   else\n            return char:lower()\n        end\n    end))\nend", "   \
    \ return string:gsub(\"(%a)(%a)\", function(char1, char2)\n        if char1:lower()\
    \ == char1 then\n            return char1:upper() .. char2:upper()\n        else\n\
    \            return char1:lower() .. char2:lower()\n        end\n    end)\nend",
  "\tlocal flipped = {}\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i, i)\n\
    \t\tif c:lower() == c then\n\t\t\tflipped[i] = c:upper()\n\t\telse\n\t\t\tflipped[i]\
    \ = c:lower()\n\t\tend\n\tend\n\treturn table.concat(flipped)\nend", "  local\
    \ flipped = \"\"\n  for i = 1, #string do\n    local ch = string:sub(i, i)\n \
    \   if ch:match(\"%l\") then\n      flipped = flipped .. ch:upper()\n    elseif\
    \ ch:match(\"%u\") then\n      flipped = flipped .. ch:lower()\n    else\n   \
    \   flipped = flipped .. ch\n    end\n  end\n  return flipped\nend", "    return\
    \ string:gsub('%a', function(c)\n        if c:lower() == c then\n            return\
    \ c:upper()\n        else\n            return c:lower()\n        end\n    end)\n\
    end", "\tlocal out = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tif char:match(\"%u\") then\n\t\t\tout = out .. char:lower()\n\t\telseif\
    \ char:match(\"%l\") then\n\t\t\tout = out .. char:upper()\n\t\telse\n\t\t\tout\
    \ = out .. char\n\t\tend\n\tend\n\treturn out\nend", "\tstring = string:gsub(\"\
    %a\", function(x)\n\t\treturn x == x:lower() and x:upper() or x:lower()\n\tend)\n\
    \treturn string\nend", "  local flipped = \"\"\n  for letter in string:gmatch(\"\
    .\") do\n    local flip = letter:upper() == letter and letter:lower() or letter:upper()\n\
    \    flipped = flipped .. flip\n  end\n  return flipped\nend", "\treturn string:gsub(\"\
    %a\", function(char)\n\t\treturn char == char:upper() and char:lower() or char:upper()\n\
    \tend)\nend", "  local output = \"\"\n  for i = 1, #string do\n    local c = string:sub(i,\
    \ i)\n    if c == c:lower() then\n      output = output .. c:upper()\n    else\n\
    \      output = output .. c:lower()\n    end\n  end\n  return output\nend", " \
    \   local flipped = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:find(\"%l\") then\n            flipped[i] = c:upper()\n   \
    \     elseif c:find(\"%u\") then\n            flipped[i] = c:lower()\n       \
    \ else\n            flipped[i] = c\n        end\n    end\n    return table.concat(flipped)\n\
    end", "\tlocal new_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal byte = string:byte(i)\n\
    \t\tif byte >= 65 and byte <= 90 then\n\t\t\tnew_string = new_string .. string.char(byte\
    \ + 32)\n\t\telseif byte >= 97 and byte <= 122 then\n\t\t\tnew_string = new_string\
    \ .. string.char(byte - 32)\n\t\telse\n\t\t\tnew_string = new_string .. string.char(byte)\n\
    \t\tend\n\tend\n\treturn new_string\nend", "\treturn string:gsub(\"%a\", function(c)\n\
    \t\tif c:match(\"%u\") then\n\t\t\treturn c:lower()\n\t\telse\n\t\t\treturn c:upper()\n\
    \t\tend\n\tend)\nend", "  return string:gsub(\"(%a)\", function(c) return (c:lower()\
    \ == c) and c:upper() or c:lower() end)\nend", "    return string:gsub(\"%a\"\
    , {\n        [string.lower(string)] = string.upper,\n        [string.upper(string)]\
    \ = string.lower,\n    })\nend", "\treturn (string:gsub(\"%l\", function(c)\n\t\
    \treturn c:upper() == c and c:lower() or c:upper()\n\tend))\nend", "\tlocal out\
    \ = ''\n\tfor s in string:gmatch('.') do\n\t\tif s:match('%l') then\n\t\t\tout\
    \ = out .. s:upper()\n\t\telseif s:match('%u') then\n\t\t\tout = out .. s:lower()\n\
    \t\telse\n\t\t\tout = out .. s\n\t\tend\n\tend\n\treturn out\nend", "\treturn\
    \ string:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"\
    d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"\
    H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"\
    ] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\"\
    , [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"]\
    \ = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\"\
    , [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"]\
    \ = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"]\
    \ = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\"\
    , [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"]\
    \ = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"})\nend", "\tlocal\
    \ flipped = \"\"\n\tfor character in string:gmatch(\".\") do\n\t\tif character:lower()\
    \ == character then\n\t\t\tflipped = flipped .. character:upper()\n\t\telse\n\t\
    \t\tflipped = flipped .. character:lower()\n\t\tend\n\tend\n\treturn flipped\n\
    end", "    local result = \"\"\n    for i = 1, string.len(string) do\n       \
    \ local c = string.sub(string, i, i)\n        local lower = string.lower(c)\n\
    \        if c == lower then\n            c = string.upper(c)\n        else\n \
    \           c = lower\n        end\n        result = result .. c\n    end\n  \
    \  return result\nend", "    local char_buffer = {}\n    for i = 1, #string do\n\
    \        local char = string:sub(i, i)\n        if char:match(\"%a\") then\n \
    \           if char:match(\"%l\") then\n                char = char:upper()\n\
    \            else\n                char = char:lower()\n            end\n    \
    \    end\n        table.insert(char_buffer, char)\n    end\n    return table.concat(char_buffer)\n\
    end", "    string = string:gsub('%l', function(char)\n        return char:upper()\
    \ == char and char:lower() or char:upper()\n    end)\n    return string\nend",
  "\t-- Swap the case of each character and collect the values\n\treturn string:gsub(\"\
    .\", function(c)\n\t\treturn uppercase:find(c, 1, true) and c:lower() or c:upper()\n\
    \tend)\nend", "  return (string:gsub(\"%a\", function(c)\n    return c == c:lower()\
    \ and c:upper() or c:lower()\n  end))\nend", "  return string:gsub(\"%a\", function(ch)\n\
    \    return (ch:lower() == ch) and ch:upper() or ch:lower()\n  end)\nend", "\t\
    local buffer = \"\"\n\tfor char in string:gmatch(\".\") do\n\t\tlocal l_char =\
    \ char:lower()\n\t\tif l_char == char then\n\t\t\tbuffer = buffer .. char:upper()\n\
    \t\telse\n\t\t\tbuffer = buffer .. l_char\n\t\tend\n\tend\n\treturn buffer\nend",
  "\tlocal flipped = {}\n\tfor i=1,string.len(string) do\n\t\tlocal c = string.sub(string,\
    \ i, i)\n\t\tif c:lower() == c then\n\t\t\tc = c:upper()\n\t\telse\n\t\t\tc =\
    \ c:lower()\n\t\tend\n\t\ttable.insert(flipped, c)\n\tend\n\treturn table.concat(flipped)\n\
    end", "    return string:gsub('%l', function(c)\n        return c == c:upper()\
    \ and c:lower() or c:upper()\n    end)\nend", "    local result = \"\"\n    for\
    \ i = 1, #string do\n        local ch = string:sub(i, i)\n        if ch == ch:lower()\
    \ then\n            result = result .. ch:upper()\n        else\n            result\
    \ = result .. ch:lower()\n        end\n    end\n    return result\nend", "  local\
    \ str = {}\n  for i=1,#string do\n    local ch = string:sub(i,i)\n    if ch ==\
    \ ch:lower() then\n      ch = ch:upper()\n    else\n      ch = ch:lower()\n  \
    \  end\n    str[i] = ch\n  end\n  return table.concat(str)\nend", "\tlocal flipped\
    \ = string:gsub('%a', function(letter)\n\t\treturn case_map[letter]\n\tend)\n\t\
    return flipped\nend", "  local char_array = { }\n  for char in string:gmatch(\"\
    .\") do\n    if char:lower() == char then\n      char_array[#char_array + 1] =\
    \ char:upper()\n    else\n      char_array[#char_array + 1] = char:lower()\n \
    \   end\n  end\n  return table.concat(char_array)\nend", "    return string:gsub(\"\
    %a\", flip_case_char)\nend", "    return string:gsub('%a', function(character)\n\
    \        return (string.upper(character) == character) and string.lower(character)\
    \ or string.upper(character)\n    end)\nend", "  return string:gsub(\"%a\", function(char)\n\
    \    if char:lower() == char then\n      return char:upper()\n    else\n     \
    \ return char:lower()\n    end\n  end)\nend", "  local result = \"\"\n  for i\
    \ = 1, #string do\n    local c = string:sub(i, i)\n    if c:match(\"[a-z]\") then\n\
    \      result = result .. c:upper()\n    elseif c:match(\"[A-Z]\") then\n    \
    \  result = result .. c:lower()\n    else\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "  return string:gsub('(%a)', function(char)\n\
    \    return char:lower() == char and char:upper() or char:lower()\n  end)\nend",
  "    local flipped = \"\"\n    for c in string:gmatch(\".\") do\n        local upper\
    \ = c:upper()\n        if upper == c then\n            flipped = flipped .. c:lower()\n\
    \        else\n            flipped = flipped .. upper\n        end\n    end\n\
    \    return flipped\nend", "    local result = ''\n    for char in string:gmatch('.')\
    \ do\n        if char:match('%l') then\n            result = result .. char:upper()\n\
    \        elseif char:match('%u') then\n            result = result .. char:lower()\n\
    \        else\n            result = result .. char\n        end\n    end\n   \
    \ return result\nend", "\tlocal flipped = string:gsub(\"%a\",\n\t\tfunction(char)\n\
    \t\t\treturn (char == char:lower()) and char:upper() or char:lower()\n\t\tend\n\
    \t)\n\treturn flipped\nend", "  return string:gsub(\"%a\", function(char)\n  \
    \  if char:match(\"%u\") then\n      return char:lower()\n    else\n      return\
    \ char:upper()\n    end\n  end)\nend", "\tlocal case = {}\n\tfor i = 1, #string\
    \ do\n\t\tlocal current = string:sub(i, i)\n\t\tif current:find(\"%a\") then\n\
    \t\t\tcase[i] = current:lower() == current and current:upper() or current:lower()\n\
    \t\telse\n\t\t\tcase[i] = current\n\t\tend\n\tend\n\treturn table.concat(case)\n\
    end", "  return string:gsub(\".\", function(s)\n    return not tonumber(s) and\
    \ s == s:lower() and s:upper() or s:lower()\n  end)\nend", "    return string:gsub(\"\
    (%a)\", function(character)\n        if character:lower() == character then\n\
    \            return character:upper()\n        else\n            return character:lower()\n\
    \        end\n    end)\nend", "    local flipped = \"\"\n    for char in string:gmatch(\"\
    .\") do\n        local lower = char:lower()\n        local upper = char:upper()\n\
    \        if char == lower then\n            flipped = flipped .. upper\n     \
    \   else\n            flipped = flipped .. lower\n        end\n    end\n    return\
    \ flipped\nend", "  local flipped = \"\"\n  for char in string:gmatch\".\" do\n\
    \    if char:match(\"%a\") then\n      flipped = flipped .. char:gsub(\"%a\",\
    \ chrflip_map)\n    else\n      flipped = flipped .. char\n    end\n  end\n  return\
    \ flipped\nend", "  return string:gsub('%l', string.upper):gsub('%u', string.lower)\n\
    end", "\tlocal new_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i,\
    \ i)\n\t\tif char:match(\"%u\") then\n\t\t\tnew_string = new_string .. char:lower()\n\
    \t\telseif char:match(\"%l\") then\n\t\t\tnew_string = new_string .. char:upper()\n\
    \t\telse\n\t\t\tnew_string = new_string .. char\n\t\tend\n\tend\n\treturn new_string\n\
    end", "  local flipped = \"\"\n  for i = 1, #string do\n    local c = string:sub(i,\
    \ i)\n    if c:match(\"%a\") then\n      flipped = flipped .. c:gsub(\"%a\", function(l)\
    \ return l:upper() == l and l:lower() or l:upper() end)\n    else\n      flipped\
    \ = flipped .. c\n    end\n  end\n  return flipped\nend", "    local result =\
    \ \"\"\n    for i = 1, string.len(string) do\n        local lower = string.lower(string.sub(string,\
    \ i, i))\n        if lower == string.sub(string, i, i) then\n            result\
    \ = result .. string.upper(string.sub(string, i, i))\n        else\n         \
    \   result = result .. lower\n        end\n    end\n    return result\nend", "\t\
    return string:gsub(\"%a\", function(c)\n\t\tif c:find(\"%u\") then\n\t\t\treturn\
    \ c:lower()\n\t\telse\n\t\t\treturn c:upper()\n\t\tend\n\tend)\nend", "\treturn\
    \ string:gsub(\"%a\", function(a)\n\t\tif a:lower() == a then\n\t\t\treturn a:upper()\n\
    \t\telse\n\t\t\treturn a:lower()\n\t\tend\n\tend)\nend", "    local function replace(char)\n\
    \        if char:match(\"%a\") then return char:lower() == char and char:upper()\
    \ or char:lower() end\n        return char\n    end\n    return string:gsub(\"\
    .\", replace)\nend", "  return string:gsub(\"%a\", function(letter)\n    return\
    \ letter == letter:lower() and letter:upper() or letter:lower()\n  end)\nend",
  "  return string:gsub(\"%a\", function(ch)\n    return ch == ch:lower() and ch:upper()\
    \ or ch:lower()\n  end)\nend", "\tlocal flipped = ''\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal char = string.sub(string, i, i)\n\t\tlocal flipped_char = swap_case(char)\n\
    \t\tflipped = flipped .. flipped_char\n\tend\n\treturn flipped\nend", "\tlocal\
    \ flipped = string:gsub('%w', function(letter)\n\t\tif letter:upper() == letter\
    \ then\n\t\t\treturn letter:lower()\n\t\telse\n\t\t\treturn letter:upper()\n\t\
    \tend\n\tend)\n\treturn flipped\nend", "\tif not string then return string end\n\
    \tlocal result = {}\n\tfor i = 1, #string do\n\t\tlocal a = string:sub(i, i)\n\
    \t\tlocal b = string:sub(i, i):lower()\n\t\tif a == b then\n\t\t\ttable.insert(result,\
    \ a:upper())\n\t\telse\n\t\t\ttable.insert(result, b)\n\t\tend\n\tend\n\treturn\
    \ table.concat(result)\nend", "  local flipped = \"\"\n  for char in string:gmatch(\"\
    .\") do\n    if char:match(\"%a\") then\n      flipped = flipped .. (char:match(\"\
    %u\") and char:lower() or char:upper())\n    else\n      flipped = flipped ..\
    \ char\n    end\n  end\n  return flipped\nend", "\treturn string:gsub(\"%a\",\n\
    \t\tfunction(char)\n\t\t\treturn char == char:lower() and char:upper() or char:lower()\n\
    \t\tend\n\t)\nend", "\tlocal out = {}\n\tfor i = 1, #string do\n\t\tlocal c =\
    \ string:sub(i, i)\n\t\tif c:lower() == c then\n\t\t\tout[i] = c:upper()\n\t\t\
    else\n\t\t\tout[i] = c:lower()\n\t\tend\n\tend\n\treturn table.concat(out)\nend",
  "    local result = {}\n    for i=1,#string do\n        local character = string:sub(i,i)\n\
    \        if character == character:lower() then\n            result[i] = character:upper()\n\
    \        else\n            result[i] = character:lower()\n        end\n    end\n\
    \    return table.concat(result)\nend", "    return string:gsub('%a', function(ch)\n\
    \        return ch == ch:lower() and ch:upper() or ch:lower()\n    end)\nend",
  "    return string:gsub('%a', flip_char)\nend", "    local flipped = \"\"\n    for\
    \ i = 1, #string do\n        local character = string:sub(i, i)\n        if character\
    \ == character:lower() then\n            flipped = flipped .. character:upper()\n\
    \        else\n            flipped = flipped .. character:lower()\n        end\n\
    \    end\n    return flipped\nend", "\tlocal out = \"\"\n\tfor i = 1, #string\
    \ do\n\t\tif string.sub(string, i, i) == string.upper(string.sub(string, i, i))\
    \ then\n\t\t\tout = out .. string.lower(string.sub(string, i, i))\n\t\telse\n\t\
    \t\tout = out .. string.upper(string.sub(string, i, i))\n\t\tend\n\tend\n\treturn\
    \ out\nend", "\tlocal flipped = \"\"\n\tlocal low, up = string.lower, string.upper\n\
    \tfor char in string:gmatch(\".\") do\n\t\tif char == low(char) then\n\t\t\tflipped\
    \ = flipped .. up(char)\n\t\telse\n\t\t\tflipped = flipped .. low(char)\n\t\t\
    end\n\tend\n\treturn flipped\nend", "  local flipped = \"\"\n  for c in string:gmatch\"\
    .\" do\n    if c:match\"%u\" then\n      flipped = flipped .. c:lower()\n    elseif\
    \ c:match\"%l\" then\n      flipped = flipped .. c:upper()\n    else\n      flipped\
    \ = flipped .. c\n    end\n  end\n  return flipped\nend", "\tlocal new_string\
    \ = \"\"\n\tfor i = 1, #string do\n\t\tlocal cur_char = string:sub(i, i)\n\t\t\
    if cur_char:match(\"[a-z]\") then\n\t\t\tnew_string = new_string .. cur_char:upper()\n\
    \t\telseif cur_char:match(\"[A-Z]\") then\n\t\t\tnew_string = new_string .. cur_char:lower()\n\
    \t\telse\n\t\t\tnew_string = new_string .. cur_char\n\t\tend\n\tend\n\treturn\
    \ new_string\nend", "    -- Convert the string to an array of unicode code points.\n\
    \    local codepoints = encode_utf8(string)", "\tlocal str = ''\n\tfor c in string:gmatch('.')\
    \ do\n\t\tif c:lower() == c then\n\t\t\tstr = str .. c:upper()\n\t\telse\n\t\t\
    \tstr = str .. c:lower()\n\t\tend\n\tend\n\treturn str\nend", "\treturn string:gsub('(%a)',\
    \ function(letter)\n\t\treturn letter == letter:lower() and letter:upper() or\
    \ letter:lower()\n\tend)\nend", "    local flipped = {}\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if char:lower() == char then\n\
    \            flipped[i] = char:upper()\n        else\n            flipped[i] =\
    \ char:lower()\n        end\n    end\n    return table.concat(flipped)\nend",
  "    return string:gsub(\"%a\",\n        function(letter)\n            if letter:upper()\
    \ == letter then\n                return letter:lower()\n            else\n  \
    \              return letter:upper()\n            end\n        end\n    )\nend",
  "\treturn string:gsub(\"%a\", function(c)\n\t\tif c:lower() == c then\n\t\t\treturn\
    \ c:upper()\n\t\telse\n\t\t\treturn c:lower()\n\t\tend\n\tend)\nend", "  local\
    \ case_flipped = \"\"\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if char == char:lower() then\n      case_flipped = case_flipped ..\
    \ char:upper()\n    else\n      case_flipped = case_flipped .. char:lower()\n\
    \    end\n  end\n  return case_flipped\nend", "    local flipped = {}\n    for\
    \ char in string:gmatch(\".\") do\n        flipped[#flipped + 1] = char:upper()\
    \ == char and char:lower() or char:upper()\n    end\n    return table.concat(flipped)\n\
    end", "    local t = {}\n    for i=1,#string do\n        local c = string:sub(i,i)\n\
    \        if c:lower() == c then\n            t[i] = c:upper()\n        else\n\
    \            t[i] = c:lower()\n        end\n    end\n    return table.concat(t)\n\
    end", "    return (string:gsub(\"%a\", function(c)\n        return luakit.case_insensitive\
    \ and c:upper() or c:lower()\n    end))\nend", "    return string:gsub(\"%l\"\
    , string.upper):gsub(\"%u\", string.lower)\nend", "  local flipped = \"\"\n  for\
    \ char in string:gmatch(\".\") do\n    local upper = char:upper()\n    if upper\
    \ == char then\n      flipped = flipped .. char:lower()\n    else\n      flipped\
    \ = flipped .. upper\n    end\n  end\n  return flipped\nend", "  return string:gsub(\"\
    %a\", {\n    [string.lower] = string.upper,\n    [string.upper] = string.lower,\n\
    \  })\nend", "  local flipped = {}\n  for i=1,#string do\n    local char = string:sub(i,i)\n\
    \    local lower = char:lower()\n    local upper = char:upper()\n    if char ==\
    \ lower then\n      flipped[i] = upper\n    else\n      flipped[i] = lower\n \
    \   end\n  end\n  return table.concat(flipped)\nend", "    local flipped = string:gsub(\"\
    %a\", function(char)\n        if char:lower() == char then\n            return\
    \ char:upper()\n        else\n            return char:lower()\n        end\n \
    \   end)\n    return flipped\nend", "  return string:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower)\nend", "\t-- create new string to output\n\tlocal new_string\
    \ = \"\"\n\t-- for each character in string, check if uppercase\n\tfor i = 1,\
    \ #string do\n\t\t-- capture character\n\t\tlocal char = string:sub(i, i)\n\t\t\
    -- if uppercase, lowercase, else uppercase\n\t\tif char:match(\"%u\") then\n\t\
    \t\tnew_string = new_string .. char:lower()\n\t\telse\n\t\t\tnew_string = new_string\
    \ .. char:upper()\n\t\tend\n\tend\n\t-- return new string\n\treturn new_string\n\
    end", "  local flipped = \"\"\n  for c in string:gmatch(\".\") do\n    if c:match(\"\
    %u\") then\n      flipped = flipped .. c:lower()\n    elseif c:match(\"%l\") then\n\
    \      flipped = flipped .. c:upper()\n    else\n      flipped = flipped .. c\n\
    \    end\n  end\n  return flipped\nend", "  local flipped = {}\n  for i=1, #string\
    \ do\n    local c = string:sub(i,i)\n    if string.match(c, '%l') then\n     \
    \ flipped[i] = string.upper(c)\n    elseif string.match(c, '%u') then\n      flipped[i]\
    \ = string.lower(c)\n    else\n      flipped[i] = c\n    end\n  end\n  return\
    \ table.concat(flipped)\nend", "    local f = {}\n    for c in string:gmatch(\"\
    .\") do\n        if c:match(\"%a\") then\n            local lc = c:lower()\n \
    \           local uc = c:upper()\n            if lc == c then\n              \
    \  f[#f+1] = uc\n            else\n                f[#f+1] = lc\n            end\n\
    \        else\n            f[#f+1] = c\n        end\n    end\n    return table.concat(f)\n\
    end", "\t-- If a letter is uppercase, make it lowercase. Else, make it uppercase.\n\
    \treturn string:gsub(\"%a\", function(letter)\n\t\treturn letter == letter:upper()\
    \ and letter:lower() or letter:upper()\n\tend)\nend", "  local flipped = \"\"\n\
    \  for i = 1, #string do\n    flipped = flipped .. (string.match(string, string.sub(string,\
    \ i, i)) == string.upper(string.sub(string, i, i)) and string.lower(string.sub(string,\
    \ i, i)) or string.upper(string.sub(string, i, i)))\n  end\n  return flipped\n\
    end", "\treturn string:gsub(\"%a\", function(ch)\n\t\treturn ch == ch:lower()\
    \ and ch:upper() or ch:lower()\n\tend)\nend", "    local flipped = {}\n    for\
    \ i = 1, #string do\n        local char = string:sub(i, i)\n        if char:find(\"\
    %a\") then\n            if char:find(\"%l\") then\n                flipped[i]\
    \ = char:upper()\n            else\n                flipped[i] = char:lower()\n\
    \            end\n        else\n            flipped[i] = char\n        end\n \
    \   end\n    return table.concat(flipped)\nend", "\tlocal new_string = ''\n\t\
    local s, e = string:find('([%w%.\\']+)')\n\twhile s do\n\t\tlocal word = string:sub(s,\
    \ e)\n\t\tword = word:gsub('%u', function(c) return c:lower() end)\n\t\tword =\
    \ word:gsub('%l', function(c) return c:upper() end)\n\t\tnew_string = new_string\
    \ .. word\n\t\ts, e = string:find('([%w%.\\']+)', e + 1)\n\tend\n\treturn new_string\n\
    end", "  local function flip_char(char)\n    if char == char:upper() then\n  \
    \    return char:lower()\n    else\n      return char:upper()\n    end\n  end\n\
    \  return string:gsub(\".\", flip_char)\nend", "    local result = \"\"\n    for\
    \ i = 1, string.len(string) do\n        local c = string.sub(string, i, i)\n \
    \       if string.match(c, \"%l\") then\n            result = result .. string.upper(c)\n\
    \        elseif string.match(c, \"%u\") then\n            result = result .. string.lower(c)\n\
    \        else\n            result = result .. c\n        end\n    end\n    return\
    \ result\nend", "\treturn string:gsub(\"(%a)\", function(c)\n\t\tlocal new = c:match(\"\
    %u\") and c:lower() or c:upper()\n\t\treturn new\n\tend)\nend", "  return string:gsub('.',\
    \ case_flip_map)\nend", "\tlocal flipped = \"\"\n\tlocal i = 1\n\twhile i <= #string\
    \ do\n\t\tlocal c = string:sub(i, i)\n\t\tif c == c:upper() then\n\t\t\tflipped\
    \ = flipped .. c:lower()\n\t\telse\n\t\t\tflipped = flipped .. c:upper()\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn flipped\nend", "  local flipped = \"\"\n \
    \ for i = 1, #string do\n    local current = string:sub(i, i)\n    if current\
    \ == current:upper() then\n      flipped = flipped .. current:lower()\n    else\n\
    \      flipped = flipped .. current:upper()\n    end\n  end\n  return flipped\n\
    end", "    return (string:gsub(\".\", function(c)\n        return string.lower(c)\
    \ == c and string.upper(c) or string.lower(c)\n    end))\nend", "    local flipped\
    \ = {}\n    for char in string:gmatch(\".\") do\n        flipped[#flipped + 1]\
    \ = (char == char:lower()) and char:upper() or char:lower()\n    end\n    return\
    \ table.concat(flipped)\nend", "    local output = ''\n    for i=1,#string do\n\
    \        local char = string:sub(i,i)\n        if char:find('%l') then\n     \
    \       output = output .. char:upper()\n        elseif char:find('%u') then\n\
    \            output = output .. char:lower()\n        else\n            output\
    \ = output .. char\n        end\n    end\n    return output\nend", "\tlocal result\
    \ = {}\n\tfor i=1, #string do\n\t\tlocal byte = string:byte(i)\n\t\tif byte >=\
    \ 65 and byte <= 90 then\n\t\t\tresult[i] = string.char(byte + 32)\n\t\telseif\
    \ byte >= 97 and byte <= 122 then\n\t\t\tresult[i] = string.char(byte - 32)\n\t\
    \telse\n\t\t\tresult[i] = string.char(byte)\n\t\tend\n\tend\n\treturn table.concat(result)\n\
    end", "    local output = \"\"\n    for i=1,#string do\n        local c = string:sub(i,i)\n\
    \        if c == c:lower() then\n            output = output .. c:upper()\n  \
    \      else\n            output = output .. c:lower()\n        end\n    end\n\
    \    return output\nend", "  -- Build a translation table.\n  local translate\
    \ = {}\n  for i = 1, 26 do\n    local x = string.char(96 + i)\n    local y = string.char(64\
    \ + i)\n    translate[x] = y\n    translate[y] = x\n  end\n  -- Flip the case.\n\
    \  return string:gsub(\"%a\", translate)\nend", "  local result = ''\n  for i\
    \ = 1, #string do\n    local c = string:sub(i, i)\n    if c:match('%a') then\n\
    \      if c:lower() == c then\n        result = result .. c:upper()\n      else\n\
    \        result = result .. c:lower()\n      end\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local output = ''\n  for c in\
    \ string:gmatch(\".\") do\n    if c:match(\"%l\") then\n      output = output\
    \ .. c:upper()\n    elseif c:match(\"%u\") then\n      output = output .. c:lower()\n\
    \    else\n      output = output .. c\n    end\n  end\n  return output\nend",
  "    return string:gsub(\"%a\", {\n        [\"A\"] = \"a\", [\"B\"] = \"b\", [\"\
    C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"\
    g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"\
    ] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\"\
    , [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"]\
    \ = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\"\
    , [\"Z\"] = \"z\",\n        [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\"\
    , [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"]\
    \ = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\"\
    , [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"]\
    \ = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\"\
    , [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"]\
    \ = \"Z\",\n    })\nend", "\tlocal result = ''\n\tfor i = 1, #string do\n\t\t\
    local c = string:sub(i, i)\n\t\tif     c:lower() == c then\n\t\t\tresult = result\
    \ .. c:upper()\n\t\telseif c:upper() == c then\n\t\t\tresult = result .. c:lower()\n\
    \t\telse\n\t\t\tresult = result .. c\n\t\tend\n\tend\n\treturn result\nend", " \
    \   return (string:gsub(\"%l\", string.upper):gsub(\"%u\", string.lower))\nend",
  "    local result = \"\"\n    for i = 1, string.len(string) do\n        local char\
    \ = string.sub(string, i, i)\n        if string.match(char, \"%l\") then\n   \
    \         result = result .. string.upper(char)\n        elseif string.match(char,\
    \ \"%u\") then\n            result = result .. string.lower(char)\n        else\n\
    \            result = result .. char\n        end\n    end\n    return result\n\
    end", "    if not string then return string end\n    local flipped = \"\"\n  \
    \  for char in string:gmatch(\".\") do\n        local upper = char:upper()\n \
    \       local upper_in = upper == char\n        flipped = flipped .. (upper_in\
    \ and char:lower() or upper)\n    end\n    return flipped\nend", "    return string:gsub(\"\
    %a\", {\n        [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] =\
    \ \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"\
    I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"\
    m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"\
    ] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\"\
    , [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n      \
    \  [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"\
    ] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\"\
    , [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"]\
    \ = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\"\
    , [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"]\
    \ = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n    })\nend", "\t\
    -- Map of characters to flip.\n\tlocal char_map = {\n\t\t['a'] = 'A',\n\t\t['b']\
    \ = 'B',\n\t\t['c'] = 'C',\n\t\t['d'] = 'D',\n\t\t['e'] = 'E',\n\t\t['f'] = 'F',\n\
    \t\t['g'] = 'G',\n\t\t['h'] = 'H',\n\t\t['i'] = 'I',\n\t\t['j'] = 'J',\n\t\t['k']\
    \ = 'K',\n\t\t['l'] = 'L',\n\t\t['m'] = 'M',\n\t\t['n'] = 'N',\n\t\t['o'] = 'O',\n\
    \t\t['p'] = 'P',\n\t\t['q'] = 'Q',\n\t\t['r'] = 'R',\n\t\t['s'] = 'S',\n\t\t['t']\
    \ = 'T',\n\t\t['u'] = 'U',\n\t\t['v'] = 'V',\n\t\t['w'] = 'W',\n\t\t['x'] = 'X',\n\
    \t\t['y'] = 'Y',\n\t\t['z'] = 'Z',\n\t\t['A'] = 'a',\n\t\t['B'] = 'b',\n\t\t['C']\
    \ = 'c',\n\t\t['D'] = 'd',\n\t\t['E'] = 'e',\n\t\t['F'] = 'f',\n\t\t['G'] = 'g',\n\
    \t\t['H'] = 'h',\n\t\t['I'] = 'i',\n\t\t['J'] = 'j',\n\t\t['K'] = 'k',\n\t\t['L']\
    \ = 'l',\n\t\t['M'] = 'm',\n\t\t['N'] = 'n',\n\t\t['O'] = 'o',\n\t\t['P'] = 'p',\n\
    \t\t['Q'] = 'q',\n\t\t['R'] = 'r',\n\t\t['S'] = 's',\n\t\t['T'] = 't',\n\t\t['U']\
    \ = 'u',\n\t\t['V'] = 'v',\n\t\t['W'] = 'w',\n\t\t['X", "    return string:gsub(\"\
    %l\", string.upper):gsub(\"%u\", string.lower)\nend", "    if string.len(string)\
    \ == 1 then\n        return string.upper(string)\n    else\n        if string.sub(string,\
    \ 1, 1) == string.lower(string.sub(string, 1, 1)) then\n            return string.upper(string.sub(string,\
    \ 1, 1)) .. flip_case(string.sub(string, 2))\n        else\n            return\
    \ string.lower(string.sub(string, 1, 1)) .. flip_case(string.sub(string, 2))\n\
    \        end\n    end\nend", "\treturn string:gsub('[%a]', {['a']='A', ['b']='B',\
    \ ['c']='C', ['d']='D', ['e']='E', ['f']='F', ['g']='G', ['h']='H', ['i']='I',\
    \ ['j']='J', ['k']='K', ['l']='L', ['m']='M', ['n']='N', ['o']='O', ['p']='P',\
    \ ['q']='Q', ['r']='R', ['s']='S', ['t']='T', ['u']='U', ['v']='V', ['w']='W',\
    \ ['x']='X', ['y']='Y', ['z']='Z', ['A']='a', ['B']='b', ['C']='c', ['D']='d',\
    \ ['E']='e', ['F']='f', ['G']='g', ['H']='h', ['I']='i', ['J']='j', ['K']='k',\
    \ ['L']='l', ['M']='m', ['N']='n', ['O']='o', ['P']='p', ['Q']='q', ['R']='r',\
    \ ['S']='s', ['T']='t', ['U']='u', ['V']='v', ['W']='w', ['X']='x', ['Y']='y',\
    \ ['Z']='z'}):gsub('\xB7', '.')\nend", "  return string:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower)\nend", "    return (string:gsub(\"%a\", {\n        [\"a\"\
    ] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\"\
    , [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"]\
    \ = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\"\
    , [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"]\
    \ = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\"\
    , [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n        [\"A\"] = \"a\"\
    , [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"]\
    \ = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\"\
    , [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"]\
    \ = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\"\
    , [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"]\
    \ = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n    }))\nend", "\t-- Split the string\
    \ into an array of characters\n\tlocal split_string = string:split_chars()\n\t\
    -- Iterate over each character in the array\n\tfor index, char in ipairs(split_string)\
    \ do\n\t\t-- Check if the character is lowercase or uppercase\n\t\tif string.match(char,\
    \ \"[%a]\") then\n\t\t\tif string.match(char, \"[%l]\") then\n\t\t\t\t-- Convert\
    \ the lowercase character to uppercase\n\t\t\t\tsplit_string[index] = string.upper(char)\n\
    \t\t\telse\n\t\t\t\t-- Convert the uppercase character to lowercase\n\t\t\t\t\
    split_string[index] = string.lower(char)\n\t\t\tend\n\t\tend\n\tend\n\t-- Join\
    \ the array of characters back into a string\n\treturn table.concat(split_string)\n\
    end", "    return string:gsub('%a', function(ch)\n        if ch:lower() == ch\
    \ then\n            return ch:upper()\n        else\n            return ch:lower()\n\
    \        end\n    end)\nend", "  local flipped = {}\n  for i = 1, #string do\n\
    \    local c = string:sub(i, i)\n    if c:match(\"%u\") then\n      c = c:lower()\n\
    \    elseif c:match(\"%l\") then\n      c = c:upper()\n    end\n    flipped[i]\
    \ = c\n  end\n  return table.concat(flipped)\nend", "    local flipped = ''\n\
    \    for char in string:gmatch('.') do\n        local lower = char:lower()\n \
    \       local upper = char:upper()\n        if char == lower then\n          \
    \  flipped = flipped .. upper\n        else\n            flipped = flipped ..\
    \ lower\n        end\n    end\n    return flipped\nend", "    local flipped =\
    \ \"\"\n    for i = 1, string.len(string) do\n        local c = string.sub(string,\
    \ i, i)\n        local l = string.lower(c)\n        if l == c then\n         \
    \   c = string.upper(c)\n        end\n        flipped = flipped .. c\n    end\n\
    \    return flipped\nend", "    return string:gsub(\"%a\", function(c)\n     \
    \   if c:match(\"[a-z]\") then\n            return c:upper()\n        else\n \
    \           return c:lower()\n        end\n    end)\nend", "  return (string:gsub(\"\
    %a\", function(c)\n           if c == c:lower() then\n             return c:upper()\n\
    \           else\n             return c:lower()\n           end\n         end))\n\
    end", "\tlocal str_out = \"\"\n\tfor char in string.gmatch(string, \"[a-zA-Z]\"\
    ) do\n\t\tif char == char:lower() then\n\t\t\tstr_out = str_out .. char:upper()\n\
    \t\telse\n\t\t\tstr_out = str_out .. char:lower()\n\t\tend\n\tend\n\treturn str_out\n\
    end", "\tlocal flipped = \"\"\n\tlocal n = #string\n\tfor i = 1, n do\n\t\tlocal\
    \ character = string:sub(i, i)\n\t\tif character == character:upper() then\n\t\
    \t\tflipped = flipped .. character:lower()\n\t\telse\n\t\t\tflipped = flipped\
    \ .. character:upper()\n\t\tend\n\tend\n\treturn flipped\nend", "\treturn string:gsub(\"\
    %a\", function(ch)\n\t\treturn ch == ch:lower() and ch:upper() or ch:lower()\n\
    \tend)\nend", "    return string:gsub(\"%a\", function(char)\n        if char:lower()\
    \ == char then\n            return char:upper()\n        else\n            return\
    \ char:lower()\n        end\n    end)\nend", "  local newstring = {}\n  for i=1,\
    \ #string do\n    local c = string:sub(i,i)\n    if     c == c:lower() then newstring[i]\
    \ = c:upper()\n    elseif c == c:upper() then newstring[i] = c:lower()\n    else\
    \ newstring[i] = c end\n  end\n  return table.concat(newstring)\nend", "  local\
    \ copy = {}\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if char == char:lower() then\n      copy[i] = char:upper()\n    else\n\
    \      copy[i] = char:lower()\n    end\n  end\n  return table.concat(copy)\nend",
  "  return string:gsub(\"%a\", {\n    [\"a\"] = \"A\",\n    [\"b\"] = \"B\",\n  \
    \  [\"c\"] = \"C\",\n    [\"d\"] = \"D\",\n    [\"e\"] = \"E\",\n    [\"f\"] =\
    \ \"F\",\n    [\"g\"] = \"G\",\n    [\"h\"] = \"H\",\n    [\"i\"] = \"I\",\n \
    \   [\"j\"] = \"J\",\n    [\"k\"] = \"K\",\n    [\"l\"] = \"L\",\n    [\"m\"]\
    \ = \"M\",\n    [\"n\"] = \"N\",\n    [\"o\"] = \"O\",\n    [\"p\"] = \"P\",\n\
    \    [\"q\"] = \"Q\",\n    [\"r\"] = \"R\",\n    [\"s\"] = \"S\",\n    [\"t\"\
    ] = \"T\",\n    [\"u\"] = \"U\",\n    [\"v\"] = \"V\",\n    [\"w\"] = \"W\",\n\
    \    [\"x\"] = \"X\",\n    [\"y\"] = \"Y\",\n    [\"z\"] = \"Z\",\n    [\"A\"\
    ] = \"a\",\n    [\"B\"] = \"b\",\n    [\"C\"] = \"c\",\n    [\"D\"] = \"d\",\n\
    \    [\"E\"] = \"e\",\n    [\"F\"] = \"f\",\n    [\"G\"] = \"g\",\n    [\"H\"\
    ] = \"h\",\n    [\"I\"] = \"i\",\n    [\"J\"] = \"j\",\n    [\"K\"] = \"k\",\n\
    \    [\"L\"] = \"l\",\n    [\"M\"] = \"m\",\n    [\"N\"] = \"n\",\n    [\"O\"\
    ] = \"o\",\n    [\"P\"] = \"p\",\n    [\"Q\"] = \"q\",\n    [\"R\"] = \"r\",\n\
    \    [\"S\"] = \"s\",\n    [\"T\"] = \"t\",\n    [\"U\"] = \"u\",\n    [\"V\"\
    ] = \"v\",\n    [\"W\"] = \"w\",\n    [\"X\"] = \"x\",\n    [\"Y\"] = \"y\",\n\
    \    [\"Z\"] = \"z\",\n  })\nend", "  local flipped = \"\"\n  for character in\
    \ string:gmatch(\".\") do\n    if character:match(\"%l\") then\n      flipped\
    \ = flipped .. character:upper()\n    elseif character:match(\"%u\") then\n  \
    \    flipped = flipped .. character:lower()\n    else\n      flipped = flipped\
    \ .. character\n    end\n  end\n  return flipped\nend", "  -- TODO: Flip case\
    \ of characters in string.\n  local flipped_string = \"\"\n  for i=1,#string do\n\
    \    local c = string:sub(i,i)\n    if c:match(\"%u\") then flipped_string = flipped_string\
    \ .. c:lower()\n    elseif c:match(\"%l\") then flipped_string = flipped_string\
    \ .. c:upper()\n    else flipped_string = flipped_string .. c end\n  end\n  return\
    \ flipped_string\nend", "\treturn string:gsub(\"%a\",\n\t\tfunction(c)\n\t\t\t\
    if c:lower() == c then\n\t\t\t\treturn c:upper()\n\t\t\telse\n\t\t\t\treturn c:lower()\n\
    \t\t\tend\n\t\tend\n\t)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
