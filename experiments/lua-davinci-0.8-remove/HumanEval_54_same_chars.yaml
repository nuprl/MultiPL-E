name: HumanEval_54_same_chars
language: lua
prompt: "-- Check if two words have the same characters.\nlocal function same_chars(s0,\
  \ s1)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
  \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n\
  \    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd',\
  \ 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'),\
  \ false)\n    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif string.len(s0) ~= string.len(s1) then\n\t\treturn false\n\tend\n\
    \tlocal chars = {}\n\tfor i = 1, string.len(s0) do\n\t\tchars[string.sub(s0, i,\
    \ i)] = (chars[string.sub(s0, i, i)] or 0) + 1\n\t\tchars[string.sub(s1, i, i)]\
    \ = (chars[string.sub(s1, i, i)] or 0) - 1\n\tend\n\tfor _, v in pairs(chars)\
    \ do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    local f0 = {}\n    local f1 = {}\n    for c in s0:gmatch('.') do\n\
    \        f0[c] = (f0[c] or 0) + 1\n    end\n    for c in s1:gmatch('.') do\n \
    \       f1[c] = (f1[c] or 0) + 1\n    end\n    return f0 == f1\nend", "    local\
    \ a0, a1 = {}, {}\n    for i = 1, #s0 do\n        a0[i] = s0:sub(i, i)\n    end\n\
    \    for i = 1, #s1 do\n        a1[i] = s1:sub(i, i)\n    end\n    table.sort(a0)\n\
    \    table.sort(a1)\n    local s0 = table.concat(a0)\n    local s1 = table.concat(a1)\n\
    \    return s0 == s1\nend", "    local t0 = { }\n    local t1 = { }\n    for c\
    \ in s0:gmatch(\".\") do t0[c] = true end\n    for c in s1:gmatch(\".\") do t1[c]\
    \ = true end\n    for c in pairs(t0) do\n        if not t1[c] then return false\
    \ end\n    end\n    for c in pairs(t1) do\n        if not t0[c] then return false\
    \ end\n    end\n    return true\nend", "  return sorted(s0) == sorted(s1)\nend",
  "    return s0:lower() == s1:lower()\nend", "    -- Convert into a table with the\
    \ number of occurrences of each letter.\n    local counts = {}\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i, i)\n        counts[c] = (counts[c] or 0)\
    \ + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n      \
    \  counts[c] = (counts[c] or 0) - 1\n    end\n    -- Check if all counts are 0.\n\
    \    for _, count in pairs(counts) do\n        if count ~= 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local ss0 =\
    \ {}\n    local ss1 = {}\n    for c in s0:gmatch(\"%a\") do\n        ss0[c] =\
    \ true\n    end\n    for c in s1:gmatch(\"%a\") do\n        ss1[c] = true\n  \
    \  end\n    for k, _ in pairs(ss0) do\n        if not ss1[k] then\n          \
    \  return false\n        end\n    end\n    for k, _ in pairs(ss1) do\n       \
    \ if not ss0[k] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local c0, c1 = sort_chars(s0), sort_chars(s1)\n  return c0 ==\
    \ c1\nend", "    local cnt = { }\n    for c in s0:gmatch(\".\") do\n        cnt[c]\
    \ = (cnt[c] or 0) + 1\n    end\n    for c in s1:gmatch(\".\") do\n        cnt[c]\
    \ = (cnt[c] or 0) - 1\n    end\n    for _, c in ipairs {\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"} do\n        if cnt[c] ~= 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "\tfor i = 1, #s0 do\n\t\tlocal c = s0:sub(i,\
    \ i)\n\t\tlocal p = s1:find(c, 1, true)\n\t\tif not p then\n\t\t\treturn false\n\
    \t\tend\n\t\ts1 = s1:sub(1, p - 1) .. s1:sub(p + 1)\n\tend\n\treturn true\nend",
  "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tfor _, c in ipairs(s0) do\n\t\t\
    local n = count_chars(s0, c)\n\t\tif n ~= count_chars(s1, c) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  if #s0 ~= #s1 then return false\
    \ end\n  local count = {}\n  for i = 1, #s0 do\n    count[s0:sub(i, i)] = (count[s0:sub(i,\
    \ i)] or 0) + 1\n    count[s1:sub(i, i)] = (count[s1:sub(i, i)] or 0) - 1\n  end\n\
    \  for _, v in pairs(count) do\n    if v ~= 0 then return false end\n  end\n \
    \ return true\nend", "    local i, j, c0, c1\n    if #s0 ~= #s1 then\n       \
    \ return false\n    end\n    for i = 1, #s0 do\n        c0 = string.sub(s0, i,\
    \ i)\n        c1 = string.sub(s1, i, i)\n        j = string.find(s1, c0, i)\n\
    \        if j and j == i then\n            s1 = string.sub(s1, 1, i - 1) .. string.sub(s1,\
    \ i + 1)\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend", "\tlocal n0, n1 = #s0, #s1\n\tif n0 ~= n1 then return false end\n\
    \tfor i = 1, n0 do\n\t\tlocal c0, c1 = s0:sub(i, i), s1:sub(i, i)\n\t\tif c0 ~=\
    \ c1 then return false end\n\tend\n\treturn true\nend", "  local c0, c1 = {},\
    \ {}\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    c0[c] = (c0[c] or 0)\
    \ + 1\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n    c1[c] = (c1[c]\
    \ or 0) + 1\n  end\n  for k, v in pairs(c0) do\n    if v ~= c1[k] then\n     \
    \ return false\n    end\n  end\n  for k, v in pairs(c1) do\n    if v ~= c0[k]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    if #s0 ~=\
    \ #s1 then\n        return false\n    end\n    local c0 = {}\n    local c1 = {}\n\
    \    for i = 1, #s0 do\n        c0[s0:sub(i, i)] = true\n        c1[s1:sub(i,\
    \ i)] = true\n    end\n    for k, _ in pairs(c0) do\n        if not c1[k] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ c0, c1 = {}, {}\n    for _, code in utfcharacters(s0) do\n        c0[code] =\
    \ (c0[code] or 0) + 1\n    end\n    for _, code in utfcharacters(s1) do\n    \
    \    c1[code] = (c1[code] or 0) + 1\n    end\n    for key, value in pairs(c0)\
    \ do\n        if value ~= c1[key] then\n            return false\n        end\n\
    \    end\n    for key, value in pairs(c1) do\n        if value ~= c0[key] then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ #s0 ~= #s1 then return false end\n  local n = #s0\n  local t = {}\n  for i =\
    \ 1, n do\n    local c = s0:sub(i, i)\n    if t[c] then\n      t[c] = t[c] + 1\n\
    \    else\n      t[c] = 1\n    end\n  end\n  for i = 1, n do\n    local c = s1:sub(i,\
    \ i)\n    if t[c] then\n      t[c] = t[c] - 1\n    else\n      return false\n\
    \    end\n  end\n  for _, v in pairs(t) do\n    if v ~= 0 then return false end\n\
    \  end\n  return true\nend", "    if #s0 ~= #s1 then\n        return false\n \
    \   end\n    local h = {}\n    for i = 1, #s0 do\n        h[s0:sub(i, i)] = true\n\
    \    end\n    for i = 1, #s1 do\n        if not h[s1:sub(i, i)] then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  return string.len(s0)\
    \ == string.len(s1) and\n         not string.find(s0, \"[^\" .. s1 .. \"]\")\n\
    end", "  if #s0 ~= #s1 then return false end\n  for i = 1, #s0 do\n    if (s0:sub(i,\
    \ i) ~= s1:sub(i, i)) then return false end\n  end\n  return true\nend", "  local\
    \ t = {}\n  for _, c in utf8.codes(s0) do\n    t[c] = (t[c] or 0) + 1\n  end\n\
    \  for _, c in utf8.codes(s1) do\n    if not t[c] then return false end\n    t[c]\
    \ = t[c] - 1\n  end\n  for _, v in pairs(t) do\n    if v ~= 0 then return false\
    \ end\n  end\n  return true\nend", "\tlocal t = {}\n\tfor i = 1, #s0 do\n\t\t\
    t[s0:sub(i, i)] = 1\n\tend\n\tfor i = 1, #s1 do\n\t\tif not t[s1:sub(i, i)] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local t = {}\n  for\
    \ c in s0:gmatch(\".\") do\n    if not t[c] then t[c] = 0 end\n    t[c] = t[c]\
    \ + 1\n  end\n  for c in s1:gmatch(\".\") do\n    if not t[c] then return false\
    \ end\n    t[c] = t[c] - 1\n    if t[c] == 0 then t[c] = nil end\n  end\n  return\
    \ not next(t)\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    for i = 1, #s0 do\n        if s0:find(s0:sub(i, i), 1, true) ~= s1:find(s0:sub(i,\
    \ i), 1, true) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tfor i = 1, #s0\
    \ do\n\t\tif not (s0:find(s0:sub(i, i), 1, true) == s1:find(s0:sub(i, i), 1, true))\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tif #s0 ~=\
    \ #s1 then\n\t\treturn false\n\tend\n\tfor i = 1, #s0 do\n\t\tif s0:sub(i, i)\
    \ ~= s1:sub(i, i) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "    -- Convert both words to lower case.\n    s0 = s0:lower()\n    s1 = s1:lower()\n\
    \    -- Create a frequency table of characters.\n    local freq = {}\n    for\
    \ c in s0:gmatch(\".\") do\n        if not freq[c] then\n            freq[c] =\
    \ 0\n        end\n        freq[c] = freq[c] + 1\n    end\n    -- Make sure that\
    \ s1 has the same amount of each character.\n    for c in s1:gmatch(\".\") do\n\
    \        if not freq[c] then\n            return false\n        end\n        freq[c]\
    \ = freq[c] - 1\n        if freq[c] < 0 then\n            return false\n     \
    \   end\n    end\n    -- All characters are correct, so the words are the same.\n\
    \    return true\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n        t0[s0:sub(i,\
    \ i)] = (t0[s0:sub(i, i)] or 0) + 1\n        t1[s1:sub(i, i)] = (t1[s1:sub(i,\
    \ i)] or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if v ~= t1[k]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local tab0 = {}\n    local tab1 = {}\n    for i = 1, #s0 do\n        tab0[s0:sub(i,\
    \ i)] = (tab0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n      \
    \  tab1[s1:sub(i, i)] = (tab1[s1:sub(i, i)] or 0) + 1\n    end\n    for k, v in\
    \ pairs(tab0) do\n        if tab1[k] ~= v then\n            return false\n   \
    \     end\n    end\n    for k, v in pairs(tab1) do\n        if tab0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ c0, c1 = {}, {}\n    for c in s0:gmatch(\".\") do c0[c] = (c0[c] or 0) + 1 end\n\
    \    for c in s1:gmatch(\".\") do c1[c] = (c1[c] or 0) + 1 end\n    return c0\
    \ == c1\nend", "  if #s0 ~= #s1 then return false end\n  for i = 1, #s0 do\n \
    \   if not str:is_in(s0:sub(i, i), s1) then return false end\n  end\n  return\
    \ true\nend", "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tfor i = 1, #s0\
    \ do\n\t\tif s0:sub(i, i) ~= s1:sub(i, i) then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend", "  if #s0 ~= #s1 then return false end\n  local p0,\
    \ p1 = sort(s0), sort(s1)\n  for i = 1, #p0 do\n    if p0[i] ~= p1[i] then return\
    \ false end\n  end\n  return true\nend", "\tif #s0 ~= #s1 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, #s0 do\n\t\tif s0:byte(i) ~= s1:byte(i) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    local t0 = {}; for i = 1, #s0\
    \ do t0[s0:sub(i,i)] = (t0[s0:sub(i,i)] or 0) + 1 end\n    local t1 = {}; for\
    \ i = 1, #s1 do t1[s1:sub(i,i)] = (t1[s1:sub(i,i)] or 0) + 1 end\n    for k, v\
    \ in pairs(t0) do\n        if t1[k] ~= v then return false end\n    end\n    for\
    \ k, v in pairs(t1) do\n        if t0[k] ~= v then return false end\n    end\n\
    \    return true\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    for _, c in ipairs(s0) do\n        if not table.contains(s1, c) then\n  \
    \          return false\n        end\n    end\n    return true\nend", "    if\
    \ #s0 ~= #s1 then\n        return false\n    end\n    -- Create table of characters.\n\
    \    local t = {}\n    for _, c in utf8.codes(s0) do\n        t[c] = true\n  \
    \  end\n    -- Iterate over characters in second word.\n    for _, c in utf8.codes(s1)\
    \ do\n        if not t[c] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if s0:len() ~= s1:len() then\n        return false\n\
    \    end\n    local t0 = {}\n    local t1 = {}\n    for i = 1, s0:len() do\n \
    \       t0[i] = s0:sub(i, i)\n        t1[i] = s1:sub(i, i)\n    end\n    table.sort(t0)\n\
    \    table.sort(t1)\n    for i = 1, s0:len() do\n        if t0[i] ~= t1[i] then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tif\
    \ s0 == s1 then return true end\n\tif #s0 ~= #s1 then return false end\n\tfor\
    \ _, c in ipairs(s0) do\n\t\tif not s1:find(c, 1, true) then return false end\n\
    \tend\n\treturn true\nend", "  local key, val\n  if #s0 == #s1 then\n    for _,\
    \ val in ipairs(s0) do\n      key = get_char_id(val)\n      if not set[key] then\n\
    \        set[key] = true\n      else\n        set[key] = nil\n      end\n    end\n\
    \    for _, val in ipairs(s1) do\n      key = get_char_id(val)\n      if not set[key]\
    \ then\n        set[key] = true\n      else\n        set[key] = nil\n      end\n\
    \    end\n    for _, _ in pairs(set) do\n      if set[_] then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  return false\nend", " \
    \ local chars = {}\n  for i = 1, #s0 do\n    local char = s0:sub(i, i)\n    if\
    \ not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char]\
    \ + 1\n    end\n  end\n  for i = 1, #s1 do\n    local char = s1:sub(i, i)\n  \
    \  if not chars[char] then\n      return false\n    else\n      chars[char] =\
    \ chars[char] - 1\n    end\n  end\n  for _, value in pairs(chars) do\n    if value\
    \ ~= 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ chars = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    chars[c] =\
    \ (chars[c] or 0) + 1\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n\
    \    chars[c] = (chars[c] or 0) - 1\n  end\n  for _, c in pairs(chars) do\n  \
    \  if c ~= 0 then\n      return false\n    end\n  end\n  return true\nend", "\t\
    if #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tfor c in s0:gmatch(\".\") do\n\t\
    \tif s1:find(c, 1, true) == nil then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  for i=1,#s0 do\n    local c = s0:sub(i,i)\n    local q = s1:find(c,\
    \ 1, true)\n    if not q then return false end\n    s1 = s1:sub(1,q-1) .. s1:sub(q+1)\n\
    \  end\n  return true\nend", "    local t0 = { }\n    local t1 = { }\n    for\
    \ char in string.gmatch(s0, \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n \
    \       t0[char] = (t0[char] or 0) + 1\n    end\n    for char in string.gmatch(s1,\
    \ \"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n        t1[char] = (t1[char]\
    \ or 0) + 1\n    end\n    for char, count in pairs(t0) do\n        if t1[char]\
    \ ~= count then\n            return false\n        end\n    end\n    for char,\
    \ count in pairs(t1) do\n        if t0[char] ~= count then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local n0, n1 = #s0, #s1\n\
    \  if n0 ~= n1 then return false end\n  local i0, i1 = 1, 1\n  while i0 <= n0\
    \ do\n    local c0, c1 = s0:byte(i0), s1:byte(i1)\n    local m0, m1 = (c0 >= 0xC0),\
    \ (c1 >= 0xC0)\n    if m0 ~= m1 then return false end\n    if m0 then -- multibyte\
    \ character\n      if c0 ~= c1 then return false end\n      repeat i0 = i0 + 1\
    \ c0 = s0:byte(i0) until c0 < 0x80\n      repeat i1 = i1 + 1 c1 = s1:byte(i1)\
    \ until c1 < 0x80\n    else -- single byte character\n      if c0 ~= c1 then return\
    \ false end\n      i0, i1 = i0 + 1, i1 + 1\n    end\n  end\n  return true\nend",
  "  local c0, c1 = {}, {}\n  for i = 1, #s0 do\n    local n = s0:byte(i)\n    c0[n]\
    \ = c0[n] or 0\n    c0[n] = c0[n] + 1\n  end\n  for i = 1, #s1 do\n    local n\
    \ = s1:byte(i)\n    c1[n] = c1[n] or 0\n    c1[n] = c1[n] + 1\n  end\n  for k,\
    \ v in pairs(c0) do\n    if c1[k] ~= v then\n      return false\n    end\n  end\n\
    \  for k, v in pairs(c1) do\n    if c0[k] ~= v then\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- Sort chars in order to check it.\n  local sorted0\
    \ = {}\n  local sorted1 = {}\n  for i=1,string.len(s0) do\n    table.insert(sorted0,\
    \ string.sub(s0, i, i))\n  end\n  for i=1,string.len(s1) do\n    table.insert(sorted1,\
    \ string.sub(s1, i, i))\n  end\n  table.sort(sorted0)\n  table.sort(sorted1)\n\
    \  return table.concat(sorted0) == table.concat(sorted1)\nend", "    if #s0 ~=\
    \ #s1 then\n        return false\n    end\n    local c = {}\n    for i = 1, #s0\
    \ do\n        c[s0:sub(i, i)] = (c[s0:sub(i, i)] or 0) + 1\n        c[s1:sub(i,\
    \ i)] = (c[s1:sub(i, i)] or 0) - 1\n    end\n    for _, i in pairs(c) do\n   \
    \     if i ~= 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local c = {}\n  for i = 1, #s0 do\n    c[s0:sub(i, i)] = true\n\
    \  end\n  for i = 1, #s1 do\n    if not c[s1:sub(i, i)] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local s = {}\n  for c in utf8.chars(s0)\
    \ do\n    s[c] = true\n  end\n  for c in utf8.chars(s1) do\n    if not s[c] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  if #s0 ~= #s1 then\
    \ return false end\n  for i = 1, #s0 do\n    if s0:find(s0:sub(i, i), 1, true)\
    \ ~= s1:find(s0:sub(i, i), 1, true) then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local l0, l1 = #s0, #s1\n  if l0 ~= l1 then return false\
    \ end\n  local freq = {}\n  for i = 1, l0 do\n    local c = s0:sub(i, i)\n   \
    \ freq[c] = (freq[c] or 0) + 1\n  end\n  for i = 1, l1 do\n    local c = s1:sub(i,\
    \ i)\n    freq[c] = (freq[c] or 0) - 1\n    if freq[c] < 0 then return false end\n\
    \  end\n  return true\nend", "\tlocal a = {}\n\tfor i = 1, string.len(s0) do\n\
    \t\ta[i] = {}\n\t\tfor j = 1, string.len(s1) do\n\t\t\ta[i][j] = false\n\t\tend\n\
    \tend\n\t-- Loop through the first word.\n\tfor i = 1, string.len(s0) do\n\t\t\
    local c = string.sub(s0, i, i)\n\t\tfor j = 1, string.len(s1) do\n\t\t\t-- If\
    \ a letter matches, mark that pair.\n\t\t\tif c == string.sub(s1, j, j) then\n\
    \t\t\t\ta[i][j] = true\n\t\t\tend\n\t\tend\n\tend\n\t-- Iterate to find a matching\
    \ sequence.\n\tlocal function iterate(i, j)\n\t\t-- The row and column need to\
    \ be valid.\n\t\tif i <= string.len(s0) and j <= string.len(s1) then\n\t\t\t--\
    \ If the current pair is marked, move to the next pair.\n\t\t\tif a[i][j] then\n\
    \t\t\t\treturn iterate(i + 1, j + 1)\n\t\t\tend\n\t\t\t-- Otherwise check the\
    \ row for matches.\n\t\t\tfor k = j + 1, string.len(s1) do\n\t\t\t\tif a[i][k]\
    \ then\n\t\t\t\t\treturn iterate(i + 1, k + 1)\n\t\t\t\tend\n\t\t\tend\n\t\t\t\
    -- Check the column for matches.\n\t\t\tfor k = i + 1, string.len(s0) do\n\t\t\
    \t\tif a[k][j] then\n\t\t\t\t\treturn iterate(k + 1, j + 1)\n\t\t\t\tend\n\t\t\
    \tend\n\t\t\t-- No matches were found.\n\t\t\treturn false\n\t\tend\n\t\t-- The\
    \ end of a word was reached, so they are equal.\n\t\treturn true\n\tend\n\treturn\
    \ iterate(1, 1)\nend", "    local t0 = {}\n    local t1 = {}\n    for c in string.gmatch(s0,\
    \ \".\") do\n        t0[c] = true\n    end\n    for c in string.gmatch(s1, \"\
    .\") do\n        t1[c] = true\n    end\n    for c in pairs(t0) do\n        if\
    \ not t1[c] then\n            return false\n        end\n    end\n    for c in\
    \ pairs(t1) do\n        if not t0[c] then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local hash = {}\n    for c in s0:gmatch(\"\
    .\") do\n        hash[c] = true\n    end\n    for c in s1:gmatch(\".\") do\n \
    \       if not hash[c] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    -- if #s0 ~= #s1 then return false end\n    if s0\
    \ == s1 then return true end\n    local chars = {}\n    for i = 1, #s0 do\n  \
    \      local c = s0:sub(i, i)\n        chars[c] = (chars[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        chars[c] = (chars[c]\
    \ or 0) - 1\n        if chars[c] < 0 then return false end\n    end\n    return\
    \ true\nend", "    local t = {}\n    for c in s0:gmatch\".\" do\n        t[c]\
    \ = (t[c] or 0) + 1\n    end\n    for c in s1:gmatch\".\" do\n        if t[c]\
    \ == nil then\n            return false\n        end\n        t[c] = t[c] - 1\n\
    \    end\n    for _, v in pairs(t) do\n        if v ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local chars = {}\n\
    \    for i = 1, string.len(s0) do\n        chars[string.sub(s0, i, i)] = true\n\
    \    end\n    for i = 1, string.len(s1) do\n        if not chars[string.sub(s1,\
    \ i, i)] then\n            return false\n        end\n    end\n    return true\n\
    end", "  return sort_string(s0) == sort_string(s1)\nend", "  if s0 == s1 then\
    \ return true end\n  if #s0 ~= #s1 then return false end\n  for c in string.gmatch(s0,\
    \ \".\") do\n    local d = string.find(s1, c, 1, true)\n    if not d then return\
    \ false end\n    s1 = string.sub(s1, 1, d-1) .. string.sub(s1, d+1)\n  end\n \
    \ return true\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    local freq = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n\
    \        freq[c] = (freq[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n      \
    \  local c = s1:sub(i, i)\n        freq[c] = (freq[c] or 0) - 1\n        if freq[c]\
    \ < 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local count = {}\n    for c in s0:gmatch(\".\") do\n        count[c]\
    \ = (count[c] or 0) + 1\n    end\n    for c in s1:gmatch(\".\") do\n        count[c]\
    \ = (count[c] or 0) - 1\n    end\n    return _.every(count, function(v) return\
    \ v == 0 end)\nend", "    if s0:len() ~= s1:len() then\n        return false\n\
    \    end\n    local w0 = {}\n    local w1 = {}\n    for c in s0:gmatch('.') do\n\
    \        w0[c] = true\n    end\n    for c in s1:gmatch('.') do\n        w1[c]\
    \ = true\n    end\n    for k, _ in pairs(w0) do\n        if not w1[k] then\n \
    \           return false\n        end\n    end\n    return true\nend", "\tif s0\
    \ == s1 then return true end\n\tlocal i, j = 1, 1\n\twhile true do\n\t\tlocal\
    \ c0, c1 = s0:sub(i, i), s1:sub(j, j)\n\t\tif not c0 then return true end\n\t\t\
    if not c1 then return false end\n\t\tif c0 ~= c1 then return false end\n\t\ti,\
    \ j = i + 1, j + 1\n\tend\nend", "    assert(#s0 == #s1)\n    local used = {}\n\
    \    for i = 1, #s0 do\n        local c0 = s0:sub(i, i)\n        local c1 = s1:sub(i,\
    \ i)\n        if c0 ~= c1 then\n            used[c0] = used[c0] or {}\n      \
    \      if used[c0][c1] then\n                return false\n            end\n \
    \           used[c0][c1] = true\n        end\n    end\n    return true\nend",
  "  if #s0 ~= #s1 then return false end\n  for i = 1, #s0 do\n    if s0:sub(i, i)\
    \ ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "\tlocal\
    \ n0, n1 = #s0, #s1\n\tif n0 ~= n1 then return false end\n\tif n0 == 0 then return\
    \ true end\n\tlocal f0, f1 = {}, {}\n\tfor i = 1, n0 do\n\t\tlocal c0, c1 = s0:sub(i,\
    \ i), s1:sub(i, i)\n\t\tf0[c0] = (f0[c0] or 0) + 1\n\t\tf1[c1] = (f1[c1] or 0)\
    \ + 1\n\tend\n\tfor k, v in pairs(f0) do\n\t\tif f1[k] ~= v then return false\
    \ end\n\tend\n\tfor k, v in pairs(f1) do\n\t\tif f0[k] ~= v then return false\
    \ end\n\tend\n\treturn true\nend", "    if #s0 ~= #s1 then\n        return false\n\
    \    end\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n      \
    \  t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n        t1[s1:sub(i, i)] =\
    \ (t1[s1:sub(i, i)] or 0) + 1\n    end\n    if #t0 ~= #t1 then\n        return\
    \ false\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n \
    \           return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ t0, t1 = {}, {}\n\tfor c in s0:gmatch(\"%l\") do t0[c] = true end\n\tfor c in\
    \ s1:gmatch(\"%l\") do t1[c] = true end\n\tfor c in pairs(t0) do\n\t\tif not t1[c]\
    \ then return false end\n\tend\n\tfor c in pairs(t1) do\n\t\tif not t0[c] then\
    \ return false end\n\tend\n\treturn true\nend", "\tfor i = 1, #s0 do\n\t\tlocal\
    \ c = s0:sub(i, i)\n\t\tif not s1:find(c, 1, true) then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "    local t = {}\n    for i = 1, #s0 do\n\
    \        local c = s0:sub(i, i)\n        t[c] = (t[c] or 0) + 1\n    end\n   \
    \ for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        if t[c] then\n  \
    \          t[c] = t[c] - 1\n        else\n            return false\n        end\n\
    \    end\n    for _, v in pairs(t) do\n        if v ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n\
    \        return false\n    end\n    local s = s0 .. s1\n    for _, c in ipairs(chars)\
    \ do\n        if string.count(s, c) % 2 ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local has = {}; local h0 = {};\
    \ local h1 = {}\n  for i = 1, #s0 do\n    local s = s0:sub(i, i)\n    h0[s] =\
    \ (h0[s] or 0) + 1\n    has[s] = true\n  end\n  for i = 1, #s1 do\n    local s\
    \ = s1:sub(i, i)\n    h1[s] = (h1[s] or 0) + 1\n    has[s] = true\n  end\n  for\
    \ s in pairs(has) do\n    if (h0[s] or 0) ~= (h1[s] or 0) then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal freq0 = get_freq(s0)\n\tlocal freq1\
    \ = get_freq(s1)\n\tfor c in pairs(freq0) do\n\t\tif freq0[c] ~= freq1[c] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local t0 = { }\n\
    \    local t1 = { }\n    for i = 1, string.len(s0) do\n        local c = string.sub(s0,\
    \ i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for i = 1, string.len(s1)\
    \ do\n        local c = string.sub(s1, i, i)\n        t1[c] = (t1[c] or 0) + 1\n\
    \    end\n    if table.getn(t0) ~= table.getn(t1) then\n        return false\n\
    \    end\n    for c, n in pairs(t0) do\n        if t1[c] ~= n then\n         \
    \   return false\n        end\n    end\n    return true\nend", "\tif #s0 ~= #s1\
    \ then\n\t\treturn false\n\tend\n\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor c in\
    \ string.gmatch(s0, \".\") do\n\t\tt0[c] = (t0[c] or 0) + 1\n\tend\n\tfor c in\
    \ string.gmatch(s1, \".\") do\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\tfor k, v\
    \ in pairs(t0) do\n\t\tif t1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "  for c0 in utfcharacters(s0) do\n    for c1 in utfcharacters(s1)\
    \ do\n      if c0 == c1 then\n        c0 = nil\n        break\n      end\n   \
    \ end\n    if c0 then\n      return false\n    end\n  end\n  return true\nend",
  "\tlocal h = {}\n\tfor c in s0:gmatch\".\" do\n\t\th[c] = (h[c] or 0) + 1\n\tend\n\
    \tfor c in s1:gmatch\".\" do\n\t\th[c] = (h[c] or 0) - 1\n\tend\n\tfor _, v in\
    \ pairs(h) do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local c0, c1 = {}\n    for i = 1, #s0 do\n        c0[s0:sub(i,\
    \ i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1 do\n        c1[s1:sub(i,\
    \ i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n    return c0 == c1\nend", "   \
    \ assert(#s0 == #s1)\n    local char_count = {}\n    for i = 1, #s0 do\n     \
    \   local c0 = s0:sub(i, i)\n        local c1 = s1:sub(i, i)\n        if char_count[c0]\
    \ == nil then\n            char_count[c0] = 0\n        end\n        if char_count[c1]\
    \ == nil then\n            char_count[c1] = 0\n        end\n        char_count[c0]\
    \ = char_count[c0] + 1\n        char_count[c1] = char_count[c1] + 1\n    end\n\
    \    for k, v in pairs(char_count) do\n        if v % 2 ~= 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  if s0 and s1\
    \ and #s0 == #s1 then\n    local h = { }\n    for i = 1, #s0 do\n      h[s0:sub(i,\
    \ i)] = 1\n    end\n    for i = 1, #s1 do\n      if not h[s1:sub(i, i)] then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  return false\n\
    end", "  if #s0 ~= #s1 then return false end\n  local letters = {}\n  for c in\
    \ s0:gmatch('.') do\n    letters[c] = (letters[c] or 0) + 1\n  end\n  for c in\
    \ s1:gmatch('.') do\n    letters[c] = (letters[c] or 0) - 1\n    if letters[c]\
    \ < 0 then return false end\n  end\n  return true\nend", "    local c0, c1 = {},\
    \ {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n        c0[c] = (c0[c]\
    \ or 0) + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n\
    \        c1[c] = (c1[c] or 0) + 1\n    end\n    for c, c0 in pairs(c0) do\n  \
    \      if c0 ~= c1[c] then\n            return false\n        end\n    end\n \
    \   for c, c1 in pairs(c1) do\n        if c1 ~= c0[c] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n\
    \        return false\n    end\n    local used = {}\n    for i = 1, #s0 do\n \
    \       local c = s0:sub(i, i)\n        used[c] = (used[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        used[c] = (used[c]\
    \ or 0) - 1\n        if used[c] < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "\tlocal cnt_0 = {}\n\tlocal cnt_1 = {}\n\tfor\
    \ i = 1, string.len(s0) do\n\t\tlocal c = string.sub(s0, i, i)\n\t\tcnt_0[c] =\
    \ (cnt_0[c] or 0) + 1\n\tend\n\tfor i = 1, string.len(s1) do\n\t\tlocal c = string.sub(s1,\
    \ i, i)\n\t\tcnt_1[c] = (cnt_1[c] or 0) + 1\n\tend\n\tfor k, v in pairs(cnt_0)\
    \ do\n\t\tif v ~= cnt_1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k,\
    \ v in pairs(cnt_1) do\n\t\tif v ~= cnt_0[k] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    local seen = {}\n    for i = 1, #s0 do\n    \
    \    local char = s0:sub(i, i)\n        seen[char] = (seen[char] or 0) + 1\n \
    \   end\n    for i = 1, #s1 do\n        local char = s1:sub(i, i)\n        seen[char]\
    \ = (seen[char] or 0) - 1\n    end\n    for _, count in pairs(seen) do\n     \
    \   if count ~= 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if #s0 ~= #s1 then return false end\n  local n = 0\n  for i =\
    \ 1, #s0 do\n    local c0 = s0:sub(i, i)\n    local c1 = s1:sub(i, i)\n    n =\
    \ n + (c0 == c1 and 0 or 1)\n  end\n  return n == 1\nend", "  if #s0 ~= #s1 then\
    \ return false end\n  for i = 1, #s0 do\n    if not find(s1, s0:sub(i, i)) then\
    \ return false end\n  end\n  return true\nend", "    local char_map = {}\n   \
    \ for i = 1, #s0 do\n        char_map[s0:sub(i, i)] = true\n    end\n    for i\
    \ = 1, #s1 do\n        if not char_map[s1:sub(i, i)] then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local t0, t1 = {}, {}\n\
    \  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = true\n  end\n  for i = 1, #s1 do\n\
    \    t1[s1:sub(i, i)] = true\n  end\n  for c in pairs(t0) do\n    if not t1[c]\
    \ then\n      return false\n    end\n  end\n  for c in pairs(t1) do\n    if not\
    \ t0[c] then\n      return false\n    end\n  end\n  return true\nend", "    --\
    \ Use a cache to speed up.\n    local key = s0 .. ' ' .. s1\n    local same =\
    \ cache[key]\n    if same ~= nil then\n        return same\n    end", "  local\
    \ t0, t1 = {}, {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)]\
    \ or 0) + 1\n  end\n  for i = 1, #s1 do\n    t1[s1:sub(i, i)] = (t1[s1:sub(i,\
    \ i)] or 0) + 1\n  end\n  for i = 1, #s0 do\n    if t0[s0:sub(i, i)] ~= t1[s0:sub(i,\
    \ i)] then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ l0, l1 = #s0, #s1\n  if l0 ~= l1 then return false end\n  local t0, t1 = {},\
    \ {}\n  for i = 1, l0 do\n    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n\
    \    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) + 1\n  end\n  for k, _ in pairs(t0)\
    \ do\n    if t0[k] ~= t1[k] then return false end\n  end\n  return true\nend",
  "    local counts = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i, i)\n\
    \        counts[c] = (counts[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n  \
    \      local c = s1:sub(i, i)\n        counts[c] = (counts[c] or 0) - 1\n    end\n\
    \    for k, v in pairs(counts) do\n        if v ~= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n\
    \        return false\n    end\n    local t0 = {}\n    local t1 = {}\n    for\
    \ c in utf.utfchars(s0) do\n        t0[c] = true\n    end\n    for c in utf.utfchars(s1)\
    \ do\n        t1[c] = true\n    end\n    for c in pairs(t0) do\n        if not\
    \ t1[c] then\n            return false\n        end\n    end\n    for c in pairs(t1)\
    \ do\n        if not t0[c] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if s0 == s1 then return true end\n    for i = 1,\
    \ #s0 do\n        if s0:sub(i, i) ~= s1:sub(i, i) then return false end\n    end\n\
    \    return true\nend", "    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    local remaining = s1\n    for i = 1, #s0 do\n        local c = s0:sub(i,\
    \ i)\n        remaining = remaining:gsub(c, \"\")\n    end\n    return #remaining\
    \ == 0\nend", "  -- If one of the strings is longer than the other then they can't\
    \ have the\n  -- same characters.\n  if #s0 ~= #s1 then\n    return false\n  end",
  "  if #s0 ~= #s1 then return false end\n  for i = 1, #s0 do\n    if s0:sub(i, i)\
    \ ~= s1:sub(i, i) then return false end\n  end\n  return true\nend", "  -- Count\
    \ the number of occurrences of each character in s0.\n  local counts = {}\n  for\
    \ i = 1, #s0 do\n    local char = s0:sub(i, i)\n    if not counts[char] then\n\
    \      counts[char] = 1\n    else\n      counts[char] = counts[char] + 1\n   \
    \ end\n  end\n  -- Check if s1 has the same characters.\n  for i = 1, #s1 do\n\
    \    local char = s1:sub(i, i)\n    if not counts[char] then\n      return false\n\
    \    else\n      counts[char] = counts[char] - 1\n    end\n  end\n  -- Check if\
    \ each character was found.\n  for _, count in pairs(counts) do\n    if count\
    \ ~= 0 then\n      return false\n    end\n  end\n  return true\nend", "\tif #s0\
    \ ~= #s1 then\n\t\treturn false\n\tend\n\tlocal chars0 = {}\n\tlocal chars1 =\
    \ {}\n\tfor _, c in ipairs(s0) do\n\t\tchars0[c] = true\n\tend\n\tfor _, c in\
    \ ipairs(s1) do\n\t\tchars1[c] = true\n\tend\n\tfor c in pairs(chars0) do\n\t\t\
    if not chars1[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor c in pairs(chars1)\
    \ do\n\t\tif not chars0[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  assert(s0:len() == s1:len())\n  local a0 = s0:sub(1,1)\n  local\
    \ a1 = s1:sub(1,1)\n  if a0 == a1 then\n    return s0:sub(2) == s1:sub(2)\n  else\n\
    \    return s0:sub(2):gsub(a0, \"\") == s1:sub(2):gsub(a1, \"\")\n  end\nend",
  "    if #s0 ~= #s1 then\n        return false\n    end\n    local a = {}\n    for\
    \ i = 1, #s0 do\n        a[s0:sub(i, i)] = true\n    end\n    for i = 1, #s1 do\n\
    \        if not a[s1:sub(i, i)] then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local a0, a1 = {}, {}\n  local n, m = #s0,\
    \ #s1\n  if n ~= m then return false end\n  for i = 1, n do\n    local c0, c1\
    \ = s0:sub(i, i), s1:sub(i, i)\n    a0[c0] = (a0[c0] or 0) + 1\n    a1[c1] = (a1[c1]\
    \ or 0) + 1\n  end\n  for k, v in pairs(a0) do\n    if v ~= a1[k] then return\
    \ false end\n  end\n  return true\nend", "    for i = 1, #s0 do\n        if #(s0:gsub(s0:sub(i,\
    \ i), \"\")) == #s0 - 1 then\n            return false\n        end\n    end\n\
    \    for i = 1, #s1 do\n        if #(s1:gsub(s1:sub(i, i), \"\")) == #s1 - 1 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ set0 = {}\n    local set1 = {}\n    for i = 1, string.len(s0) do\n        local\
    \ c = string.sub(s0, i, i)\n        set0[c] = true\n    end\n    for i = 1, string.len(s1)\
    \ do\n        local c = string.sub(s1, i, i)\n        set1[c] = true\n    end\n\
    \    for i = 1, string.len(s0) do\n        local c = string.sub(s0, i, i)\n  \
    \      if not set1[c] then\n            return false\n        end\n    end\n \
    \   for i = 1, string.len(s1) do\n        local c = string.sub(s1, i, i)\n   \
    \     if not set0[c] then\n            return false\n        end\n    end\n  \
    \  return true\nend", "    local s0_chars = {}\n    local s1_chars = {}\n    for\
    \ i = 1, #s0 do\n        s0_chars[s0:sub(i, i)] = true\n    end\n    for i = 1,\
    \ #s1 do\n        s1_chars[s1:sub(i, i)] = true\n    end\n    for k, _ in pairs(s0_chars)\
    \ do\n        if not s1_chars[k] then\n            return false\n        end\n\
    \    end\n    for k, _ in pairs(s1_chars) do\n        if not s0_chars[k] then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ ct = {}\n\tfor i = 1, string.len(s0) do\n\t\tlocal c = string.sub(s0, i, i)\n\
    \t\tct[c] = (ct[c] or 0) + 1\n\tend\n\tfor i = 1, string.len(s1) do\n\t\tlocal\
    \ c = string.sub(s1, i, i)\n\t\tct[c] = (ct[c] or 0) - 1\n\tend\n\tfor k, v in\
    \ pairs(ct) do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  -- Get character lists.\n  local c0 = {}\n  local c1 = {}\n \
    \ for c in string.gmatch(s0, \".\") do\n    c0[c] = true\n  end\n  for c in string.gmatch(s1,\
    \ \".\") do\n    c1[c] = true\n  end\n  -- Compare character lists.\n  for k,\
    \ _ in pairs(c0) do\n    if not c1[k] then\n      return false\n    end\n  end\n\
    \  for k, _ in pairs(c1) do\n    if not c0[k] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- quick check if strings differ in length\n \
    \ if s0:len() ~= s1:len() then\n    return false\n  end\n  -- check if two strings\
    \ have the same characters\n  for i = 1, s0:len() do\n    local char = s0:sub(i,\
    \ i)\n    if not s1:find(char) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local cnt = {}\n  for _, c in ipairs(s0) do\n    cnt[c] = (cnt[c]\
    \ or 0) + 1\n  end\n  for _, c in ipairs(s1) do\n    cnt[c] = (cnt[c] or 0) -\
    \ 1\n  end\n  for _, v in pairs(cnt) do\n    if v ~= 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  if #s0 ~= #s1 then return false end\n\
    \  local t0, t1 = {}, {}\n  for i = 1, #s0 do\n    t0[i] = s0:sub(i, i)\n    t1[i]\
    \ = s1:sub(i, i)\n  end\n  table.sort(t0)\n  table.sort(t1)\n  for i = 1, #t0\
    \ do\n    if t0[i] ~= t1[i] then return false end\n  end\n  return true\nend",
  "    if #s0 ~= #s1 then\n        return false\n    end\n    local c = {}\n    for\
    \ i = 1, #s0 do\n        c[s0:sub(i, i)] = (c[s0:sub(i, i)] or 0) + 1\n      \
    \  c[s1:sub(i, i)] = (c[s1:sub(i, i)] or 0) - 1\n    end\n    for _, v in pairs(c)\
    \ do\n        if v ~= 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if s0 == s1 then return true end\n  local c0, c1 =\
    \ {}, {}\n  for char in string.gmatch(s0, \".\") do\n    c0[char] = true\n  end\n\
    \  for char in string.gmatch(s1, \".\") do\n    c1[char] = true\n  end\n  for\
    \ char in pairs(c0) do\n    if not c1[char] then return false end\n  end\n  for\
    \ char in pairs(c1) do\n    if not c0[char] then return false end\n  end\n  return\
    \ true\nend", "  local t0, t1 = {}, {}\n  for i = 1, #s0 do\n    local c = s0:sub(i,\
    \ i)\n    t0[c] = t0[c] and t0[c] + 1 or 1\n  end\n  for i = 1, #s1 do\n    local\
    \ c = s1:sub(i, i)\n    t1[c] = t1[c] and t1[c] + 1 or 1\n  end\n  return t0 ==\
    \ t1\nend", "    -- Assuming s0 and s1 are not empty, and it is guaranteed that\
    \ s0 and s1 have the same length.\n    local c0 = {}\n    local c1 = {}\n    for\
    \ i = 1, #s0 do\n        local j = s0:byte(i)\n        c0[j] = (c0[j] or 0) +\
    \ 1\n    end\n    for i = 1, #s1 do\n        local j = s1:byte(i)\n        c1[j]\
    \ = (c1[j] or 0) + 1\n    end\n    for j = 0, 255 do\n        if c0[j] ~= c1[j]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "\tlocal t0, t1 = {}, {}\n\tfor i = 1, #s0 do\n\t\tt0[s0:sub(i, i)] = true\n\tend\n\
    \tfor i = 1, #s1 do\n\t\tt1[s1:sub(i, i)] = true\n\tend\n\tfor k, _ in pairs(t0)\
    \ do\n\t\tif not t1[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\tfor k, _ in\
    \ pairs(t1) do\n\t\tif not t0[k] then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "\tlocal char0 = {}\n\tlocal char1 = {}\n\tfor ch in (s0 ..\
    \ s1):gmatch(\".\") do\n\t\tchar0[ch] = (char0[ch] or 0) + 1\n\t\tchar1[ch] =\
    \ (char1[ch] or 0) + 1\n\tend\n\tfor ch, cnt in pairs(char0) do\n\t\tif cnt ~=\
    \ char1[ch] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \   local ct0 = char_table(s0)\n    local ct1 = char_table(s1)\n    for c,n in\
    \ pairs(ct0) do\n        if ct1[c] ~= n then\n            return false\n     \
    \   end\n    end\n    for c,n in pairs(ct1) do\n        if ct0[c] ~= n then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ #s0 ~= #s1 then return false end\n  local chars = {}\n  for i = 1, #s0 do\n\
    \    local char = s0:sub(i, i)\n    if not chars[char] then\n      chars[char]\
    \ = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i\
    \ = 1, #s1 do\n    local char = s1:sub(i, i)\n    if not chars[char] then\n  \
    \    return false\n    else\n      chars[char] = chars[char] - 1\n    end\n  end\n\
    \  for _, count in pairs(chars) do\n    if count ~= 0 then return false end\n\
    \  end\n  return true\nend", "\tlocal chars = {}\n\tfor i = 1, #s0 do\n\t\tlocal\
    \ c = s0:sub(i, i)\n\t\tif not chars[c] then\n\t\t\tchars[c] = 1\n\t\telse\n\t\
    \t\tchars[c] = chars[c] + 1\n\t\tend\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c\
    \ = s1:sub(i, i)\n\t\tif not chars[c] then\n\t\t\treturn false\n\t\telse\n\t\t\
    \tchars[c] = chars[c] - 1\n\t\tend\n\tend\n\tfor k, v in pairs(chars) do\n\t\t\
    if v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "   \
    \ if #s0 ~= #s1 then\n        return false\n    end\n    local seen = {}\n   \
    \ for c in s0:chars() do\n        seen[c] = (seen[c] or 0) + 1\n    end\n    for\
    \ c in s1:chars() do\n        seen[c] = (seen[c] or 0) - 1\n    end\n    for _,\
    \ v in pairs(seen) do\n        if v ~= 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "\tlocal f = {}\n\tfor i = 1, #s0 do\n\
    \t\tlocal c = s0:sub(i, i)\n\t\tif c ~= ' ' then\n\t\t\tf[c] = (f[c] or 0) + 1\n\
    \t\tend\n\tend\n\tfor i = 1, #s1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tif c ~= '\
    \ ' then\n\t\t\tf[c] = (f[c] or 0) - 1\n\t\tend\n\tend\n\tfor _, v in pairs(f)\
    \ do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  -- Return false if the lengths are different.\n  if #s0 ~= #s1 then return\
    \ false end\n  -- Check if the two strings have the same characters.\n  local\
    \ a0, a1 = {}, {}\n  for i = 1, #s0 do\n    a0[s0:sub(i, i)] = a0[s0:sub(i, i)]\
    \ and a0[s0:sub(i, i)] + 1 or 1\n    a1[s1:sub(i, i)] = a1[s1:sub(i, i)] and a1[s1:sub(i,\
    \ i)] + 1 or 1\n  end\n  for k, v in pairs(a0) do\n    if v ~= a1[k] then return\
    \ false end\n  end\n  return true\nend", "    local t0 = {}\n    local t1 = {}\n\
    \    for i = 1, #s0 do\n        t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n\
    \    end\n    for i = 1, #s1 do\n        t1[s1:sub(i, i)] = (t1[s1:sub(i, i)]\
    \ or 0) + 1\n    end\n    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n\
    \            return false\n        end\n    end\n    for k, v in pairs(t1) do\n\
    \        if t0[k] ~= v then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if s0 == s1 then return true end\n    if #s0 ~= #s1\
    \ then return false end\n    local cp0 = words[s0]\n    local cp1 = words[s1]\n\
    \    for i = 0, 0x10ffff do\n        if cp0[i] ~= cp1[i] then return false end\n\
    \    end\n    return true\nend", "    local t0 = {}\n    local t1 = {}\n    for\
    \ c in s0:gmatch(\".\") do t0[c] = (t0[c] or 0) + 1 end\n    for c in s1:gmatch(\"\
    .\") do t1[c] = (t1[c] or 0) + 1 end\n    for k, v in pairs(t0) do\n        if\
    \ t1[k] ~= v then return false end\n    end\n    for k, v in pairs(t1) do\n  \
    \      if t0[k] ~= v then return false end\n    end\n    return true\nend", " \
    \   if #s0 ~= #s1 then\n        return false\n    end\n    local l0 = { }\n  \
    \  local l1 = { }\n    for i = 1, #s0 do\n        l0[i] = s0:sub(i, i)\n     \
    \   l1[i] = s1:sub(i, i)\n    end\n    table.sort(l0)\n    table.sort(l1)\n  \
    \  for i = 1, #s0 do\n        if l0[i] ~= l1[i] then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tif #s0 ~= #s1 then\n\t\treturn\
    \ false\n\tend\n\tlocal t0 = {}\n\tlocal t1 = {}\n\tfor i = 1, #s0 do\n\t\tt0[s0:sub(i,\
    \ i)] = t0[s0:sub(i, i)] and t0[s0:sub(i, i)] + 1 or 1\n\t\tt1[s1:sub(i, i)] =\
    \ t1[s1:sub(i, i)] and t1[s1:sub(i, i)] + 1 or 1\n\tend\n\tfor k, v in pairs(t0)\
    \ do\n\t\tif t1[k] ~= v then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    local chars = {}\n    for c in s0:gmatch '.' do\n        chars[c] =\
    \ true\n    end\n    for c in s1:gmatch '.' do\n        if not chars[c] then\n\
    \            return false\n        end\n    end\n    return true\nend", "  return\
    \ (tostring(s0) == s1) or (s0 == tostring(s1))\nend", "  local t0, t1 = {}, {}\n\
    \  for i = 1, #s0 do\n    local k = s0:sub(i, i)\n    t0[k] = (t0[k] or 0) + 1\n\
    \  end\n  for i = 1, #s1 do\n    local k = s1:sub(i, i)\n    t1[k] = (t1[k] or\
    \ 0) + 1\n  end\n  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return\
    \ false\n    end\n  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local t0, t1 = {},\
    \ {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = (t0[s0:sub(i, i)] or 0) + 1\n\
    \  end\n  for i = 1, #s1 do\n    t1[s1:sub(i, i)] = (t1[s1:sub(i, i)] or 0) +\
    \ 1\n  end\n  for k, v in pairs(t0) do\n    if t1[k] ~= v then\n      return false\n\
    \    end\n  end\n  for k, v in pairs(t1) do\n    if t0[k] ~= v then\n      return\
    \ false\n    end\n  end\n  return true\nend", "\tlocal t = {}\n\tlocal c0, c1\n\
    \tfor i = 1, #s0 do\n\t\tc0 = s0:sub(i, i)\n\t\tc1 = s1:sub(i, i)\n\t\tif c0 ~=\
    \ c1 then\n\t\t\tif t[c0] or t[c1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    \tt[c0] = c1\n\t\t\tt[c1] = c0\n\t\tend\n\tend\n\treturn true\nend", "  local\
    \ c0, c1 = {}, {}\n  for c in string.gmatch(s0, \".\") do\n    c0[c] = (c0[c]\
    \ or 0) + 1\n  end\n  for c in string.gmatch(s1, \".\") do\n    c1[c] = (c1[c]\
    \ or 0) + 1\n  end\n  for c, n in pairs(c0) do\n    if c1[c] ~= n then\n     \
    \ return false\n    end\n  end\n  for c, n in pairs(c1) do\n    if c0[c] ~= n\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local n =\
    \ #s0\n  assert(n == #s1)\n  local l0 = {}\n  local l1 = {}\n  for i = 1, n do\n\
    \    local c0 = s0:sub(i, i)\n    local c1 = s1:sub(i, i)\n    if c0 ~= c1 then\n\
    \      table.insert(l0, c0)\n      table.insert(l1, c1)\n    end\n  end\n  if\
    \ #l0 == 1 and #l1 == 1 then\n    return l0[1], l1[1]\n  end\nend", "    local\
    \ t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n        t0[s0:sub(i, i)]\
    \ = true\n    end\n    for i = 1, #s1 do\n        t1[s1:sub(i, i)] = true\n  \
    \  end\n    for k, _ in pairs(t0) do\n        if not t1[k] then\n            return\
    \ false\n        end\n    end\n    for k, _ in pairs(t1) do\n        if not t0[k]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n        local c =\
    \ s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for i = 1, #s1\
    \ do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c] or 0) + 1\n    end\n\
    \    for k, v in pairs(t0) do\n        if t1[k] ~= v then\n            return\
    \ false\n        end\n    end\n    for k, v in pairs(t1) do\n        if t0[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end", "    if s0 and s1 and #s0 > 0 and #s1 > 0 then\n        local t0 = { }\n\
    \        local t1 = { }\n        for c in s0:gmatch(\".\") do\n            t0[c]\
    \ = true\n        end\n        for c in s1:gmatch(\".\") do\n            t1[c]\
    \ = true\n        end\n        for c in pairs(t0) do\n            if not t1[c]\
    \ then\n                return false\n            end\n        end\n        for\
    \ c in pairs(t1) do\n            if not t0[c] then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end", "    return s0:gsub(\".\", function(ch)\n        return (s1:find(ch, 1,\
    \ true) and \"\" or \"1\")\n    end) == \"\"\nend", "    if not s0 then return\
    \ true end\n    if not s1 then return false end\n    return s0:gsub(\"%a\", \"\
    \"):lower() == s1:gsub(\"%a\", \"\"):lower()\nend", "    local chars = {}\n  \
    \  for i = 1, #s0 do\n        local char = s0:sub(i, i)\n        if chars[char]\
    \ then\n            chars[char] = chars[char] + 1\n        else\n            chars[char]\
    \ = 1\n        end\n    end\n    for i = 1, #s1 do\n        local char = s1:sub(i,\
    \ i)\n        if chars[char] then\n            chars[char] = chars[char] - 1\n\
    \        else\n            return false\n        end\n    end\n    for _, v in\
    \ pairs(chars) do\n        if v ~= 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  for i = 1, #s0 do\n    local flag = false\n\
    \    for j = 1, #s1 do\n      if s0:sub(i, i) == s1:sub(j, j) then\n        s1\
    \ = s1:sub(1, j - 1) .. s1:sub(j + 1)\n        flag = true\n        break\n  \
    \    end\n    end\n    if not flag then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local count = { }\n    local n = 0\n    for i = 1,\
    \ #s0 do\n        local c = s0:sub(i,i)\n        count[c] = (count[c] or 0) +\
    \ 1\n        n = n + 1\n    end\n    for i = 1, #s1 do\n        local c = s1:sub(i,i)\n\
    \        count[c] = (count[c] or 0) - 1\n        n = n - 1\n    end\n    return\
    \ n == 0\nend", "\tlocal c, len0, len1 = {}, len(s0), len(s1)\n\t-- Check the\
    \ lengths of both words.\n\tif len0 ~= len1 then return false end\n\t-- Count\
    \ the characters of the first word.\n\tfor i = 1, len0 do\n\t\tlocal b = s0:byte(i)\n\
    \t\tc[b] = (c[b] or 0) + 1\n\tend\n\t-- Check if the second word has the same\
    \ characters.\n\tfor i = 1, len1 do\n\t\tlocal b = s1:byte(i)\n\t\tif not c[b]\
    \ or c[b] < 1 then return false end\n\t\tc[b] = c[b] - 1\n\tend\n\treturn true\n\
    end", "\tlocal t = {}\n\tfor i = 1, #s0 do\n\t\tt[s0:sub(i, i)] = true\n\tend\n\
    \tfor i = 1, #s1 do\n\t\tif not t[s1:sub(i, i)] then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "    if #s0 ~= #s1 then\n        return false\n\
    \    end\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0 do\n      \
    \  local ch = s0:sub(i, i)\n        if c0[ch] then\n            c0[ch] = c0[ch]\
    \ + 1\n        else\n            c0[ch] = 1\n        end\n    end\n    for i =\
    \ 1, #s1 do\n        local ch = s1:sub(i, i)\n        if c1[ch] then\n       \
    \     c1[ch] = c1[ch] + 1\n        else\n            c1[ch] = 1\n        end\n\
    \    end\n    for k, v in pairs(c0) do\n        if c1[k] ~= v then\n         \
    \   return false\n        end\n    end\n    return true\nend", "  if #s0 ~= #s1\
    \ then return false end\n  local t = {}\n  for i = 1, #s0 do\n    t[s0:sub(i,\
    \ i)] = t[s0:sub(i, i)] and t[s0:sub(i, i)] + 1 or 1\n    t[s1:sub(i, i)] = t[s1:sub(i,\
    \ i)] and t[s1:sub(i, i)] - 1 or -1\n  end\n  for k, v in pairs(t) do\n    if\
    \ v ~= 0 then return false end\n  end\n  return true\nend", "    if #s0 ~= #s1\
    \ then\n        return false\n    end\n    local char_count = {}\n    for _, char\
    \ in pairs(s0) do\n        if char_count[char] then\n            char_count[char]\
    \ = char_count[char] + 1\n        else\n            char_count[char] = 1\n   \
    \     end\n    end\n    for _, char in pairs(s1) do\n        if char_count[char]\
    \ then\n            char_count[char] = char_count[char] - 1\n        else\n  \
    \          return false\n        end\n    end\n    for _, count in pairs(char_count)\
    \ do\n        if count ~= 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local t = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i,\
    \ i)\n    if t[c] then t[c] = t[c] + 1 else t[c] = 1 end\n  end\n  for i = 1,\
    \ #s1 do\n    local c = s1:sub(i, i)\n    if t[c] then t[c] = t[c] - 1 else return\
    \ false end\n  end\n  for _, v in pairs(t) do\n    if v ~= 0 then return false\
    \ end\n  end\n  return true\nend", "    local c0, c1 = {}, {}\n    for c in s0:gmatch(\"\
    .\") do c0[c] = true end\n    for c in s1:gmatch(\".\") do c1[c] = true end\n\
    \    for c in pairs(c0) do\n        if not c1[c] then return false end\n    end\n\
    \    for c in pairs(c1) do\n        if not c0[c] then return false end\n    end\n\
    \    return true\nend", "    --[[\n    Count the characters in the two strings\
    \ and compare the counts.\n    Return True if the counts are equal, False otherwise.\n\
    \    ]]\n    local c0 = {}\n    local c1 = {}\n    for i = 1, #s0 do\n       \
    \ c0[s0:sub(i, i)] = (c0[s0:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #s1\
    \ do\n        c1[s1:sub(i, i)] = (c1[s1:sub(i, i)] or 0) + 1\n    end\n    for\
    \ k, v in pairs(c0) do\n        if c1[k] ~= v then\n            return false\n\
    \        end\n    end\n    for k, v in pairs(c1) do\n        if c0[k] ~= v then\n\
    \            return false\n        end\n    end\n    return true\nend", "    --\
    \ Wipe the counters.\n    for i = 1, #s0 do\n        used[i] = 0\n    end\n  \
    \  for i = 1, #s1 do\n        used[#s0 + i] = 0\n    end\n    -- We keep a history\
    \ of the changes to rollback when a difference is\n    -- found.\n    local history\
    \ = {}\n    -- Get the character counters.\n    for i = 1, #s0 do\n        local\
    \ c = s0:sub(i, i)\n        if used[char_pos[c]] == 0 then\n            used[char_pos[c]]\
    \ = 1\n            history[#history + 1] = {c, true}\n        end\n    end\n \
    \   for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        if used[char_pos[c]]\
    \ == 0 then\n            used[char_pos[c]] = 1\n            history[#history +\
    \ 1] = {c, true}\n        end\n    end\n    -- Rollback the counters.\n    for\
    \ i = #history, 1, -1 do\n        used[char_pos[history[i][1]]] = 0\n    end\n\
    \    -- Check if any character is marked more than once.\n    for i = 1, #used\
    \ do\n        if used[i] > 1 then\n            return false\n        end\n   \
    \ end\n    return true\nend", "  if #s0 ~= #s1 then return false end\n  local\
    \ t = {}\n  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    t[c] = (t[c] or\
    \ 0) + 1\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n    if not t[c]\
    \ then return false end\n    t[c] = t[c] - 1\n  end\n  return true\nend", "\t\
    local a = { }\n\tfor i = 1, #s0 do\n\t\ta[s0:sub(i, i)] = (a[s0:sub(i, i)] or\
    \ 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\ta[s1:sub(i, i)] = (a[s1:sub(i, i)] or\
    \ 0) - 1\n\tend\n\tfor k, v in pairs(a) do\n\t\tif v ~= 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "\tif #s0 ~= #s1 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, #s0 do\n\t\tif string.find(s1, s0:sub(i, i), 1, true) == nil\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal x,y\
    \ = letters(s0), letters(s1)\n\tfor k,v in pairs(x) do\n\t\tif v ~= y[k] then\
    \ return false end\n\tend\n\treturn true\nend", "  assert(type(s0) == \"string\"\
    \ and type(s1) == \"string\")\n  if s0 == s1 then return true end\n  local t0,\
    \ t1 = {}, {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = true\n  end\n  for\
    \ i = 1, #s1 do\n    t1[s1:sub(i, i)] = true\n  end\n  for k, _ in pairs(t0) do\n\
    \    if not t1[k] then return false end\n  end\n  for k, _ in pairs(t1) do\n \
    \   if not t0[k] then return false end\n  end\n  return true\nend", "    if s0\
    \ == s1 then return true end\n    if #s0 ~= #s1 then return false end\n    local\
    \ chars0 = setmetatable({}, {__index = function () return 0 end})\n    local chars1\
    \ = setmetatable({}, {__index = function () return 0 end})\n    for i = 1, #s0\
    \ do\n        chars0[s0:sub(i, i)] = chars0[s0:sub(i, i)] + 1\n        chars1[s1:sub(i,\
    \ i)] = chars1[s1:sub(i, i)] + 1\n    end\n    for k, v in pairs(chars0) do\n\
    \        if v ~= chars1[k] then return false end\n    end\n    return true\nend",
  "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tlocal t0 = {}\n\tlocal t1 = {}\n\
    \tfor c in s0:gmatch(\".\") do\n\t\tt0[c] = (t0[c] or 0) + 1\n\tend\n\tfor c in\
    \ s1:gmatch(\".\") do\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\tfor c, _ in pairs(t0)\
    \ do\n\t\tif t0[c] ~= t1[c] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "\tlocal mask = {}\n\tfor c in s0:gmatch('.') do\n\t\tmask[c] =\
    \ true\n\tend\n\tfor c in s1:gmatch('.') do\n\t\tif not mask[c] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if #s0 ~= #s1 then\n      \
    \  return false\n    end\n    local t = {}\n    for i = 1, #s0 do\n        t[s0:sub(i,\
    \ i)] = true\n    end\n    for i = 1, #s1 do\n        if not t[s1:sub(i, i)] then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ t0, t1 = {}, {}\n  for i = 1, #s0 do\n    t0[s0:sub(i, i)] = true\n  end\n \
    \ for i = 1, #s1 do\n    t1[s1:sub(i, i)] = true\n  end\n  for c in pairs(t0)\
    \ do\n    if not t1[c] then\n      return false\n    end\n  end\n  for c in pairs(t1)\
    \ do\n    if not t0[c] then\n      return false\n    end\n  end\n  return true\n\
    end", "\tif #s0 ~= #s1 then\n\t\treturn false\n\tend\n\tfor i = 1, #s0 do\n\t\t\
    if s0:sub(i, i) ~= s1:sub(i, i) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    if string.len(s0) ~= string.len(s1) then\n        return false\n\
    \    end\n    for c in gmatch(s0, \".\") do\n        if not string.find(s1, c,\
    \ 1, true) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local cnt0, cnt1 = {}, {}\n  for i = 1, #s0 do\n    cnt0[s0:sub(i, i)]\
    \ = (cnt0[s0:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #s1 do\n    cnt1[s1:sub(i,\
    \ i)] = (cnt1[s1:sub(i, i)] or 0) + 1\n  end\n  for char, cnt in pairs(cnt0) do\n\
    \    if cnt1[char] ~= cnt then\n      return false\n    end\n  end\n  for char,\
    \ cnt in pairs(cnt1) do\n    if cnt0[char] ~= cnt then\n      return false\n \
    \   end\n  end\n  return true\nend", "\tif #s0 ~= #s1 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, #s0 do\n\t\tif s0:sub(i, i) ~= s1:sub(i, i) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal t0, t1 = {}, {}\n\tfor\
    \ i = 1, #s0 do\n\t\tt0[s0:sub(i, i)] = true\n\tend\n\tfor i = 1, #s1 do\n\t\t\
    t1[s1:sub(i, i)] = true\n\tend\n\tfor k, v in pairs(t0) do\n\t\tif not t1[k] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\tfor k, v in pairs(t1) do\n\t\tif not t0[k]\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local ct =\
    \ {}\n  for i = 1, math.max(#s0, #s1) do\n    ct[s0:sub(i, i)] = ct[s0:sub(i,\
    \ i)] or 0\n    ct[s0:sub(i, i)] = ct[s0:sub(i, i)] + 1\n    ct[s1:sub(i, i)]\
    \ = ct[s1:sub(i, i)] or 0\n    ct[s1:sub(i, i)] = ct[s1:sub(i, i)] - 1\n  end\n\
    \  for _, i in pairs(ct) do\n    if i ~= 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local h = {}\n    for i = 1, #s0 do\n      \
    \  local b = s0:byte(i)\n        h[b] = (h[b] or 0) + 1\n    end\n    for i =\
    \ 1, #s1 do\n        local b = s1:byte(i)\n        h[b] = (h[b] or 0) - 1\n  \
    \  end\n    for i = 1, 255 do\n        if h[i] ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local t = {}\n  for c in gmatch(s0,\
    \ \".\") do\n    t[c] = true\n  end\n  for c in gmatch(s1, \".\") do\n    if not\
    \ t[c] then\n      return false\n    end\n  end\n  return true\nend", "\tif s0\
    \ == s1 then return true end\n\tlocal r = {}\n\tfor i = 1, #s0 do\n\t\tlocal c\
    \ = s0:sub(i, i)\n\t\tr[c] = (r[c] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\t\
    local c = s1:sub(i, i)\n\t\tr[c] = (r[c] or 0) - 1\n\tend\n\tfor _, v in pairs(r)\
    \ do\n\t\tif v ~= 0 then return false end\n\tend\n\treturn true\nend", "  if #s0\
    \ ~= #s1 then return false end\n  local char_map = {}\n  for i = 1, #s0 do\n \
    \   local char = s0:sub(i, i)\n    if char_map[char] == nil then\n      char_map[char]\
    \ = 0\n    end\n    char_map[char] = char_map[char] + 1\n  end\n  for i = 1, #s1\
    \ do\n    local char = s1:sub(i, i)\n    if char_map[char] == nil then\n     \
    \ return false\n    end\n    char_map[char] = char_map[char] - 1\n    if char_map[char]\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend", "    if #s0\
    \ ~= #s1 then\n        return false\n    end\n    for i=1,#s0 do\n        if not\
    \ (s0:sub(i,i) == s1:sub(i,i)) then\n            return false\n        end\n \
    \   end\n    return true\nend", "\treturn ( #s0 == #s1 and not s0:find('.', 1,\
    \ true) and s0:lower() == s1:lower() )\nend", "    return s0:len() == s1:len()\
    \ and s0:gsub(\".\", function(c)\n        return #s1:gsub(c, \"\") == s1:len()\
    \ - 1 and \"\" or c\n    end) == \"\"\nend", "\tlocal t = { }\n\tfor c in s0:gmatch('.')\
    \ do\n\t\tt[c] = true\n\tend\n\tfor c in s1:gmatch('.') do\n\t\tif not t[c] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal t = {}\n\tfor\
    \ i = 1, #s0 do\n\t\tt[s0:sub(i, i)] = (t[s0:sub(i, i)] or 0) + 1\n\tend\n\tfor\
    \ i = 1, #s1 do\n\t\tt[s1:sub(i, i)] = (t[s1:sub(i, i)] or 0) - 1\n\tend\n\tfor\
    \ i = 1, #s0 do\n\t\tif t[s0:sub(i, i)] ~= 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    local chars = { }\n    for i = 1, #s0 do\n  \
    \      local c = s0:sub(i, i)\n        chars[c] = (chars[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        chars[c] = (chars[c]\
    \ or 0) - 1\n    end\n    for _, v in pairs(chars) do\n        if v ~= 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ #s0 ~= #s1 then\n        return false\n    end\n    local s = {}\n    for i\
    \ = 1, #s0 do\n        local c = s0:sub(i, i)\n        s[c] = (s[c] or 0) + 1\n\
    \    end\n    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        s[c]\
    \ = (s[c] or 0) - 1\n        if s[c] < 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "    if #s0 ~= #s1 then\n        return\
    \ false\n    end\n    for i=1,#s0 do\n        if s0:sub(i,i) ~= s1:sub(i,i) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ first = {}\n    local second = {}\n    for i = 1, #s0 do\n        local char\
    \ = s0:sub(i, i)\n        if first[char] then\n            first[char] = first[char]\
    \ + 1\n        else\n            first[char] = 1\n        end\n    end\n    for\
    \ i = 1, #s1 do\n        local char = s1:sub(i, i)\n        if second[char] then\n\
    \            second[char] = second[char] + 1\n        else\n            second[char]\
    \ = 1\n        end\n    end\n    if #first ~= #second then\n        return false\n\
    \    end\n    for k, v in pairs(first) do\n        if not second[k] or second[k]\
    \ ~= v then\n            return false\n        end\n    end\n    return true\n\
    end", "    local cnt = 0\n    for i = 1, #s0 do\n        for j = 1, #s1 do\n \
    \           if s0:sub(i, i) == s1:sub(j, j) then\n                cnt = cnt +\
    \ 1\n                s1 = s1:sub(1, j - 1) .. s1:sub(j + 1)\n                break\n\
    \            end\n        end\n    end\n    return cnt == #s0\nend", "  if #s0\
    \ ~= #s1 then return false end\n  local chars = {}\n  for i = 1, #s0 do\n    local\
    \ c = s0:sub(i, i)\n    if chars[c] then\n      return false\n    else\n     \
    \ chars[c] = true\n    end\n  end\n  for i = 1, #s1 do\n    local c = s1:sub(i,\
    \ i)\n    if not chars[c] then\n      return false\n    end\n  end\n  return true\n\
    end", "    for i = 1, #s0 do\n        if not find(s1, s0:sub(i, i)) then\n   \
    \         return false\n        end\n    end\n    return true\nend", "    local\
    \ f = {}\n    local s = {}\n    for i = 1, #s0 do\n        local c = s0:sub(i,i)\n\
    \        f[c] = (f[c] or 0) + 1\n    end\n    for i = 1, #s1 do\n        local\
    \ c = s1:sub(i,i)\n        s[c] = (s[c] or 0) + 1\n    end\n    for c, count in\
    \ pairs(f) do\n        if not s[c] or s[c] ~= count then\n            return false\n\
    \        end\n    end\n    for c, count in pairs(s) do\n        if not f[c] or\
    \ f[c] ~= count then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local flag = true\n    for i = 1, #s0 do\n        local char\
    \ = s0:sub(i, i)\n        if not (s1:find(char, 1, true) or s1:find(char:upper(),\
    \ 1, true)) then\n            flag = false\n            break\n        end\n \
    \   end\n    return flag\nend", "    if #s0 ~= #s1 then\n        return false\n\
    \    end\n    local n = 0\n    for k, _ in pairs(s0) do\n        if s0[k] ~= s1[k]\
    \ then\n            return false\n        end\n        n = n + 1\n    end\n  \
    \  return n > 0\nend", "\tlocal map = { }\n\tfor i = 1, #s0 do\n\t\tlocal c =\
    \ s0:sub(i, i)\n\t\tmap[c] = (map[c] or 0) + 1\n\tend\n\tfor i = 1, #s1 do\n\t\
    \tlocal c = s1:sub(i, i)\n\t\tif map[c] then\n\t\t\tmap[c] = map[c] - 1\n\t\t\t\
    if map[c] == 0 then\n\t\t\t\tmap[c] = nil\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tfor _, v in pairs(map) do\n\t\tif v ~= 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\t-- If they are the same, then\
    \ yes.\n\tif s0 == s1 then\n\t\treturn true\n\tend", "  -- Always use the shorter\
    \ word as key.\n  if #s0 > #s1 then\n    s0, s1 = s1, s0\n  end\n  local key =\
    \ s0 .. s1\n  local v = cache[key]\n  if v == nil then\n    local t = {unpack(s0)}\n\
    \    for i = 1, #s1 do\n      local c = s1:sub(i, i)\n      local k = table.remove(t,\
    \ table.find(t, c))\n      if k == nil then\n        -- The character c was not\
    \ found in t.\n        v = false\n        break\n      end\n    end\n    v = #t\
    \ == 0\n    cache[key] = v\n  end\n  return v\nend", "  local c0, c1 = {}, {}\n\
    \  for i = 1, #s0 do\n    local c = s0:sub(i, i)\n    c0[c] = (c0[c] or 0) + 1\n\
    \  end\n  for i = 1, #s1 do\n    local c = s1:sub(i, i)\n    c1[c] = (c1[c] or\
    \ 0) + 1\n  end\n  for c, i in pairs(c0) do\n    if i ~= c1[c] then\n      return\
    \ false\n    end\n  end\n  for c, i in pairs(c1) do\n    if i ~= c0[c] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local freq = {}\n\
    \  for c in s0:gmatch('.') do\n    freq[c] = (freq[c] or 0) + 1\n  end\n  for\
    \ c in s1:gmatch('.') do\n    freq[c] = (freq[c] or 0) - 1\n  end\n  for _, v\
    \ in pairs(freq) do\n    if v ~= 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local t0 = {}\n    local t1 = {}\n    for i = 1, string.len(s0)\
    \ do\n        t0[string.sub(s0, i, i)] = true\n    end\n    for i = 1, string.len(s1)\
    \ do\n        t1[string.sub(s1, i, i)] = true\n    end\n    for k, v in pairs(t0)\
    \ do\n        if not t1[k] then\n            return false\n        end\n    end\n\
    \    for k, v in pairs(t1) do\n        if not t0[k] then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local chars = {}\n  for c in\
    \ s0:gmatch(\".\") do\n    chars[c] = (chars[c] or 0) + 1\n  end\n  for c in s1:gmatch(\"\
    .\") do\n    chars[c] = (chars[c] or 0) - 1\n  end\n  for _, c in pairs(chars)\
    \ do\n    if c ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  if string.len(s0) ~= string.len(s1) then\n    return false\n  end\n \
    \ local s0_chars = {}\n  for i = 1, string.len(s0) do\n    local c = string.sub(s0,\
    \ i, i)\n    s0_chars[c] = (s0_chars[c] or 0) + 1\n  end\n  for i = 1, string.len(s1)\
    \ do\n    local c = string.sub(s1, i, i)\n    if not s0_chars[c] then\n      return\
    \ false\n    end\n    s0_chars[c] = s0_chars[c] - 1\n  end\n  return true\nend",
  "\tlocal char_map = {}\n\tfor i = 1, #s0 do\n\t\tchar_map[s0:sub(i, i)] = true\n\
    \tend\n\tfor i = 1, #s1 do\n\t\tif not char_map[s1:sub(i, i)] then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
