name: HumanEval_99_closest_integer
language: lua
prompt: "-- Create a function that takes a value (string) representing a number\n\
  -- and returns the closest integer to it. If the number is equidistant\n-- from\
  \ two integers, round it away from zero.\n-- Examples\n-- Note:\n-- Rounding away\
  \ from zero means that if the given number is equidistant\n-- from two integers,\
  \ the one you should return is the one that is the\n-- farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n-- return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nlocal function closest_integer(value)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n\
  \    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'),\
  \ 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'),\
  \ 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local v = math.floor(value)\n    local diff = value - v\n    if\
    \ diff >= 0.5 then\n        return v + 1\n    else\n        return v\n    end\n\
    end", "  local f, i = math.modf(value)\n  return value >= 0 and (f >= 0.5 and\
    \ i + 1 or i) or (f <= -0.5 and i - 1 or i)\nend", "  local number = tonumber(value)\n\
    \  local int, frac = math.modf(number)\n  if frac >= 0.5 then\n    return int\
    \ + 1\n  else\n    return int\n  end\nend", "  local n, m = math.modf(value)\n\
    \  return n+math.abs(m)/m\nend", "  -- your code here\n  local v = tonumber(value)\n\
    \  if v < 0 then return math.ceil(v) else return math.floor(v) end\nend", "  \
    \  return math.floor(value + 0.5)\nend", "    return tonumber(string.format(\"\
    %.0f\", value))\nend", "\t-- Code here\nend", "    local number = tonumber(value)\n\
    \    if number then\n        local floored = math.floor(number)\n        if number\
    \ - floored < 0.5 then\n            return floored\n        else\n           \
    \ return floored + 1\n        end\n    end\nend", "  -- your code here\n  local\
    \ value_int = math.floor(value)\n  if math.abs(value - value_int) == 0.5 then\n\
    \    if value < 0 then\n      return value_int - 1\n    else\n      return value_int\
    \ + 1\n    end\n  else\n    return value_int\n  end\nend", "    local number =\
    \ tonumber(value)\n    if number % 1 == 0 then\n        return number\n    else\n\
    \        local lower = math.floor(number)\n        local upper = math.ceil(number)\n\
    \        if number - lower > upper - number then\n            return upper\n \
    \       else\n            return lower\n        end\n    end\nend", "  -- ...\n\
    end", "    local n = tonumber(value)\n    if n == math.floor(n) then\n       \
    \ return n\n    end\n    return math.floor(n + (n > 0 and 0.5 or -0.5))\nend",
  "  return math.floor(value + 0.5)\nend", "    if not value then return end\n   \
    \ if value == '0' then return 0 end\n    local s = value:sub(1, 1)\n    if tonumber(s)\
    \ then\n        return tonumber(value)\n    end\n    local has_sign = s == '-'\n\
    \    local sign = 1\n    if has_sign then\n        sign = -1\n        value =\
    \ value:sub(2)\n    end\n    if value:find('[.]') then\n        local num, dec\
    \ = value:match('([%d]+).([%d]+)')\n        if tonumber(dec) >= 5 then\n     \
    \       return sign * (tonumber(num) + 1)\n        else\n            return sign\
    \ * (tonumber(num))\n        end\n    else\n        return sign * tonumber(value)\n\
    \    end\nend", "  local fvalue = tonumber(value)\n  return math.ceil(fvalue)\
    \ - fvalue > 0.5 and math.floor(fvalue) or math.ceil(fvalue)\nend", "    return\
    \ math.floor(value + 0.5)\nend", "  -- TODO:\nend", "  local number = tonumber(value)\n\
    \  return number < 0 and math.ceil(number) or math.floor(number)\nend", "  --\
    \ your code here\n  local num = tonumber(value)\n  local int = math.floor(num)\n\
    \  local decimal = num - int\n  if decimal > 0.5 then\n    return int + 1\n  elseif\
    \ decimal < -0.5 then\n    return int - 1\n  else\n    return int\n  end\nend",
  "  local float = tonumber(value)\n  if float > 0 then\n    return math.floor(float\
    \ + 0.5)\n  else\n    return math.ceil(float - 0.5)\n  end\nend", "    return\
    \ math.round(value)\nend", "  local i = math.floor(value)\n  if value == i then\n\
    \    return i\n  elseif value > i then\n    return i + 1\n  else\n    return i\
    \ - 1\n  end\nend", "  -- body\n  local i,f = math.modf(value)\n  if (f < 0.5)\
    \ then\n    return i\n  else\n    return i + 1\n  end\nend", "    local int_val\
    \ = math.floor(value)\n    local flt_val = value - int_val\n    if flt_val >=\
    \ 0.5 then\n        return int_val + 1\n    else\n        return int_val\n   \
    \ end\nend", "    local number = tonumber(value)\n    local ceil = math.ceil(number)\n\
    \    local floor = math.floor(number)\n    local distance_from_ceil = math.abs(number\
    \ - ceil)\n    local distance_from_floor = math.abs(number - floor)\n    if distance_from_ceil\
    \ == distance_from_floor then\n        if number > 0 then\n            return\
    \ ceil\n        else\n            return floor\n        end\n    elseif distance_from_ceil\
    \ < distance_from_floor then\n        return ceil\n    else\n        return floor\n\
    \    end\nend", "    local dv = tonumber(value)\n    local res = math.ceil(dv)\n\
    \    local int_part = math.floor(dv)\n    if (res - dv) < 0.5 then\n        return\
    \ res\n    else\n        return int_part\n    end\nend", "    local num = tonumber(value)\n\
    \    local int = math.floor(num)\n    if num - int >= 0.5 then\n        return\
    \ int + 1\n    else\n        return int\n    end\nend", "  local n = tonumber(value)\n\
    \  if n > 0 then\n    return math.floor(n + 0.5)\n  else\n    return math.ceil(n\
    \ - 0.5)\n  end\nend", "    local float = tonumber(value)\n    return float %\
    \ 1 >= 0.5 and math.ceil(float) or math.floor(float)\nend", "  local n = tonumber(value)\n\
    \  if n < 0 then\n    n = n - 0.5\n  else\n    n = n + 0.5\n  end\n  return math.floor(n)\n\
    end", "  local ok, num = pcall(tonumber, value)\n  if not ok then return false\
    \ end\n  local new_num = math.floor(num)\n  if (num - new_num) < 0.5 then\n  \
    \  return new_num\n  else\n    return math.ceil(num)\n  end\nend", "  -- your\
    \ code here\n  if string.match(value, \"%.5\") then\n    if string.match(value,\
    \ \"%-\") then\n      return tonumber(string.sub(value, 2, #value - 1)) - 1\n\
    \    else\n      return tonumber(string.sub(value, 1, #value - 1)) + 1\n    end\n\
    \  else\n    return tonumber(string.sub(value, 1, #value - 1))\n  end\nend", " \
    \   local number = tonumber(value)\n    if number >= 0 then\n        return math.floor(number)\n\
    \    else\n        return math.ceil(number)\n    end\nend", "    local v = tonumber(value)\n\
    \    if v == nil then\n        return nil\n    end\n    local floored = math.floor(v)\n\
    \    if v > 0 then\n        if v - floored < 0.5 then\n            return floored\n\
    \        else\n            return floored + 1\n        end\n    else\n       \
    \ if floored - v < 0.5 then\n            return floored\n        else\n      \
    \      return floored - 1\n        end\n    end\nend", "  return\nend", "    local\
    \ val = tonumber(value)\n    local min = math.floor(val)\n    local max = math.ceil(val)\n\
    \    local low = val - min\n    local high = max - val\n    if low == high then\n\
    \        return max\n    elseif low < high then\n        return min\n    else\n\
    \        return max\n    end\nend", "    -- TODO: fix\n    return math.floor(value)\n\
    end", "    -- your code here\n    return 0\nend", "    return math.floor(value\
    \ + 0.5)\nend", "  -- local function closest_integer(value)\n  --     return math.floor(tonumber(value)\
    \ + 0.5)\n  -- end\n  -- math.floor(n + 0.5)", "    local int, frac = math.modf(value)\n\
    \    if frac >= 0.5 then\n        return int + 1\n    else\n        return int\n\
    \    end\nend", "    -- YOUR CODE HERE\n    -- If the input is a string, convert\
    \ it to a number.\n    local num = tonumber(value)\n    -- Convert to an integer.\n\
    \    local whole = math.floor(num)\n    -- Get the fractional part of the number.\n\
    \    local frac = num - whole\n    -- If fractional part > 0.5, return the next\
    \ higher integer.\n    if frac > 0.5 then\n        return whole + 1\n    -- If\
    \ fractional part < 0.5, return the integer.\n    elseif frac < 0.5 then\n   \
    \     return whole\n    -- If fractional part == 0.5, return integer +1, except\
    \ if integer is 0.\n    elseif frac == 0.5 and whole == 0 then\n        return\
    \ whole\n    else\n        return whole + 1\n    end\nend", "  return math.floor(value\
    \ + 0.5)\nend", "    local num = tonumber(value)\n    if num % 1 == 0 then\n \
    \       return num\n    elseif num > 0 then\n        return math.floor(num) +\
    \ 1\n    else\n        return math.ceil(num) - 1\n    end\nend", "    local num\
    \ = tonumber(value)\n    local int = math.floor(num)\n    local dec = num - int\n\
    \    return dec > 0.5 and int + 1 or int\nend", "    return tonumber(math.floor(value\
    \ + 0.5))\nend", "    local int = math.floor(tonumber(value))\n    local decimal\
    \ = value - int\n    return decimal > 0.5 and int + 1 or int\nend", "  local value\
    \ = tonumber(value)\n  local r = math.floor(value + 0.5)\n  if (value == r and\
    \ value % 2 == 0) or (value == r and value % 2 ~= 0) then\n    return r\n  elseif\
    \ value < r then\n    return r - 1\n  elseif value > r then\n    return r + 1\n\
    \  end\nend", "  local fl = math.floor(value)\n  local ce = math.ceil(value)\n\
    \  if (value - fl) < (ce - value) then\n    return fl\n  else\n    return ce\n\
    \  end\nend", "  if math.floor(value) == value then\n    return value\n  end\n\
    \  local num = tonumber(value)\n  if num < 0 then\n    return math.ceil(num)\n\
    \  end\n  return math.floor(num)\nend", "    local v = tonumber(value)\n    if\
    \ v ~= v then\n        return nil\n    end\n    if v == math.ceil(v) then\n  \
    \      return v\n    end\n    if v > 0 then\n        return math.ceil(v)\n   \
    \ end\n    return math.floor(v)\nend", "    local string_value = value:gsub(\"\
    %.\", \"\")\n    local num = tonumber(string_value)\n    if num % 10 >= 5 then\n\
    \        return math.ceil(num / 10)\n    else\n        return math.floor(num /\
    \ 10)\n    end\nend", "    local num = tonumber(value)\n    local int = math.floor(num)\n\
    \    if (num - int) < 0.5 then\n        return int\n    else\n        return int\
    \ + 1\n    end\nend", "  return math.floor(value + 0.5)\nend", "  return math.floor(value\
    \ + 0.5)\nend", "  -- Get the integer part of the number (e.g., \"5.5\" => 5)\n\
    \  local integer_part = math.floor(value)\n  -- Get the fractional part of the\
    \ number (e.g., \"5.5\" => 0.5)\n  local fractional_part = value - integer_part\n\
    \  -- If the fractional part is greater than 0.5 then return the integer\n  --\
    \ part + 1 (e.g., 5.7 => 6)\n  if fractional_part > 0.5 then\n    return integer_part\
    \ + 1\n  -- If the fractional part is less than 0.5 then return the integer\n\
    \  -- part (e.g., 5.2 => 5)\n  elseif fractional_part < 0.5 then\n    return integer_part\n\
    \  -- If the fractional part is exactly 0.5 then return the integer\n  -- part\
    \ away from zero (e.g., -5.5 => -6)\n  else\n    return integer_part - (integer_part\
    \ % 2)\n  end\nend", "    local n = tonumber(value)\n    if n == nil then\n  \
    \      return nil\n    end\n    return math.floor(n + 0.5)\nend", "    local n\
    \ = tonumber(value)\n    local int, frac = math.modf(n)\n    if frac >= 0.5 then\n\
    \        return int + 1\n    else\n        return int\n    end\nend", "  local\
    \ num = tonumber(value)\n  local ceil = math.ceil(num)\n  local floor = math.floor(num)\n\
    \  local diff_ceil = ceil - num\n  local diff_floor = num - floor\n  if diff_ceil\
    \ == diff_floor then\n    if math.abs(floor) > math.abs(ceil) then\n      return\
    \ ceil\n    else\n      return floor\n    end\n  elseif diff_ceil > diff_floor\
    \ then\n    return floor\n  else\n    return ceil\n  end\nend", "    return math.ceil(tonumber(value))\n\
    end", "\tlocal num, dec = string.match(value, '^([^.]*).?(.*)$')\n\tif dec ==\
    \ '5' then\n\t\tif num > 0 then\n\t\t\treturn tonumber(num) + 1\n\t\telse\n\t\t\
    \treturn tonumber(num) - 1\n\t\tend\n\telse\n\t\treturn tonumber(num)\n\tend\n\
    end", "  if type(value) ~= \"string\" then\n    return nil\n  end\n  local x =\
    \ tonumber(value)\n  local y = math.floor(x)\n  if x == y then\n    return y\n\
    \  end\n  local a = x - y\n  if a < 0.5 then\n    return y\n  else\n    return\
    \ y + 1\n  end\nend", "    local i, j = math.modf(value)\n    return (j < 0.5\
    \ and i or i + 1)\nend", "  local float = tonumber(value)\n  local int = math.floor(float)\n\
    \  if (float - int) >= 0.5 then\n    return int + 1\n  else\n    return int\n\
    \  end\nend", "  local int = tonumber(value)\n  if int > 0 then\n    return math.floor(int\
    \ + 0.5)\n  else\n    return math.ceil(int - 0.5)\n  end\nend", "  local res,\
    \ err = tonumber(value)\n  if not res then\n    return nil, err\n  end\n  local\
    \ dif = value - res\n  if dif == 0 then\n    return res\n  elseif dif < 0 then\n\
    \    return res - 1\n  else\n    return res + 1\n  end\nend", "    local _, _,\
    \ v = string.find(value, \"(%-?%d+)%.%d+\")\n    if not v then\n        _, _,\
    \ v = string.find(value, \"(%-?%d+)\")\n    end\n    return tonumber(v)\nend",
  "    local num = tonumber(value)\n    local int = math.floor(num)\n    if (num -\
    \ int) < 0.5 then\n        return int\n    else\n        return int + 1\n    end\n\
    end", "    local num = tonumber(value)\n    local int = math.floor(num)\n    if\
    \ num - int < 0.5 then\n        return int\n    else\n        return int + 1\n\
    \    end\nend", "    -- your solution here\n    return math.floor(value + 0.5)\n\
    end", "\treturn math.ceil(value)\nend", "  local number = tonumber(value)\n  return\
    \ math.floor(number + 0.5)\nend", "  -- your code here\n  local num = tonumber(value)\n\
    \  if num < 0 then\n    local ceil_int = math.ceil(num)\n    local floor_int =\
    \ math.floor(num)\n    if ceil_int - num > num - floor_int then\n      return\
    \ floor_int\n    else\n      return ceil_int\n    end\n  else\n    local ceil_int\
    \ = math.ceil(num)\n    local floor_int = math.floor(num)\n    if ceil_int - num\
    \ > num - floor_int then\n      return floor_int\n    else\n      return ceil_int\n\
    \    end\n  end\nend", "  local dec = tonumber(value) - math.floor(tonumber(value))\n\
    \  if dec >= 0.5 then\n    return math.ceil(tonumber(value))\n  else\n    return\
    \ math.floor(tonumber(value))\n  end\nend", "    -- body\n    local int = tonumber(value)\n\
    \    local _, frac = math.modf(int)\n    if frac >= 0.5 then\n        return math.ceil(int)\n\
    \    else\n        return math.floor(int)\n    end\nend", "    -- write your code\
    \ here\n    -- it's best to create a new function to do the rounding process\n\
    \    local value = tonumber(value)\n    local sign = value/math.abs(value)\n \
    \   local val = math.abs(value)\n    local int_val = math.floor(val)\n    if (int_val\
    \ == val) then\n        return value\n    elseif ((val - int_val) < 0.5) then\n\
    \        return (sign * int_val)\n    else\n        return (sign * (int_val +\
    \ 1))\n    end\nend", "  -- your code here\n  local f = function(n)\n    if math.ceil(n)\
    \ - n < n - math.floor(n) then\n      return math.ceil(n)\n    else\n      return\
    \ math.floor(n)\n    end\n  end\n  return f(tonumber(value))\nend", "  local num\
    \ = tonumber(value)\n  local frac = num - math.floor(num)\n  if frac < 0.5 then\n\
    \    return math.floor(num)\n  else\n    return math.ceil(num)\n  end\nend", " \
    \ -- your code here\n  local n = tonumber(value)\n  local closer_to_int = 0\n\
    \  local closest_int = 0\n  local distance_for_int = 0\n  local distance_for_closest_int\
    \ = 0\n  local distance_form_positive_int = math.abs(n - (n % 1))\n  local distance_form_negative_int\
    \ = math.abs(n - (n % 1))\n  if n >= 0 then\n    closer_to_int = math.floor(n)\n\
    \    closest_int = math.ceil(n)\n  else\n    closer_to_int = math.ceil(n)\n  \
    \  closest_int = math.floor(n)\n  end\n  distance_for_int = math.abs(n - closer_to_int)\n\
    \  distance_for_closest_int = math.abs(n - closest_int)\n  if distance_for_int\
    \ <= distance_for_closest_int then\n    return closer_to_int\n  else\n    return\
    \ closest_int\n  end\nend", "    -- your code here\n    local i, f = math.modf(value)\n\
    \    return f > 0.5 and i + 1 or i\nend", "  local a = math.floor(value)\n  local\
    \ b = math.ceil(value)\n  if math.abs(value - a) < math.abs(value - b) then\n\
    \    return a\n  else\n    return b\n  end\nend", "  local num = tonumber(value)\n\
    \  local ceil_num = math.ceil(num)\n  local floor_num = math.floor(num)\n  local\
    \ ceil_diff = ceil_num - num\n  local floor_diff = num - floor_num\n  if ceil_diff\
    \ < floor_diff then\n    return ceil_num\n  elseif ceil_diff > floor_diff then\n\
    \    return floor_num\n  else\n    if num >= 0 then\n      return ceil_num\n \
    \   else\n      return floor_num\n    end\n  end\nend", "    -- Your code here\n\
    end", "    local val = tonumber(value)\n    if math.abs(val % 1) == 0.5 then\n\
    \        if val < 0 then\n            return math.floor(val)\n        else\n \
    \           return math.ceil(val)\n        end\n    else\n        return math.floor(val\
    \ + 0.5)\n    end\nend", "    return math.floor(value + 0.5)\nend", "    local\
    \ value_number = tonumber(value)\n    return value_number >= 0 and math.floor(value_number\
    \ + 0.5) or math.ceil(value_number - 0.5)\nend", "  -- YOUR CODE HERE\n  -- Round\
    \ to the nearest integer.\n  local function round(x)\n    return x + 0.5 - (x\
    \ + 0.5) % 1\n  end\n  -- Round a value away from zero.\n  local function round_away_from_zero(x)\n\
    \    if x > 0 then\n      return math.ceil(x)\n    else\n      return math.floor(x)\n\
    \    end\n  end\n  return round_away_from_zero(round(tonumber(value)))\nend",
  "  local _, _, integer = value:find(\"(%-?%d+%.?%d*)\")\n  return math.floor(integer\
    \ + 0.5)\nend", "  return math.floor(tonumber(value) + 0.5)\nend", "  -- TODO:\
    \ return the closest integer to the given number\nend", "    if value % 1 > 0.5\
    \ then\n        return math.ceil(value)\n    else\n        return math.floor(value)\n\
    \    end\nend", "  -- your code here\n  if value % 1 == 0 then\n    return value\n\
    \  elseif value % 1 == 0.5 then\n    if value < 0 then\n      return value - 1\n\
    \    else\n      return value + 1\n    end\n  else\n    return math.floor(value)\n\
    \  end\nend", "    -- body\n    if value == \"0\" then\n        return 0\n   \
    \ end\n    local table = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"0\"}\n    local temp = \"\"\n    local temp_number = 0\n    local\
    \ number = 0\n    local number_2 = 0\n    local number_2_2 = 0\n    local number_3\
    \ = 0\n    local number_3_2 = 0\n    for i = 1, string.len(value) do\n       \
    \ for j = 1, 10 do\n            if value[i] == table[j] then\n               \
    \ temp = temp .. value[i]\n            end\n        end\n    end\n    if string.find(temp,\
    \ \"-\") == 1 then\n        temp_number = -tonumber(string.sub(temp, 2, string.len(temp)))\n\
    \    else\n        temp_number = tonumber(temp)\n    end\n    number = math.floor(temp_number)\n\
    \    number_2 = number - 1\n    number_2_2 = number_2\n    number_3 = number +\
    \ 1\n    number_3_2 = number_3\n    local number_2_table = {}\n    local number_3_table\
    \ = {}\n    local j = 1\n    while number_2 > 0 do\n        number_2_table[j]\
    \ = tostring(number_2 % 10)\n        number_2 = math.floor(number_2 / 10)\n  \
    \      j = j + 1\n    end\n    local k = 1\n    while number_3 > 0 do\n      \
    \  number_3_table[k] = tostring(number_3 % 10)\n        number_3 = math.floor(number_3\
    \ / 10)\n        k = k + 1\n    end\n    for i = 1, string.len(value) do\n   \
    \     for j = 1, #number_2_table do\n            if value[i] == number_2_table[j]\
    \ then\n                temp = temp .. value[i]\n            end\n        end\n\
    \    end\n    for i = 1, string.len(value) do\n        for j = 1, #number_3_table\
    \ do\n            if value[", "    if value > 0 then\n        return math.floor(value\
    \ + 0.5)\n    else\n        return math.ceil(value - 0.5)\n    end\nend", "  \
    \  return math.floor(tonumber(value) + 0.5)\nend", "  local num = tonumber(value)\n\
    \  if num == nil then return nil end\n  local frac, int = math.modf(num)\n  if\
    \ frac >= 0.5 then\n    return int + 1\n  else\n    return int\n  end\nend", " \
    \ local int = math.floor(value)\n  local frac = value - int\n  if frac < 0.5 then\n\
    \    return int\n  else\n    return int + 1\n  end\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    -- body\n    return 0\nend", "    local number = tonumber(value)\n\
    \    if not number then\n        return nil\n    end\n    local rounded = math.floor(number\
    \ + 0.5)\n    if number == rounded then\n        return rounded\n    end\n   \
    \ local integer, fraction = math.modf(number)\n    if fraction == 0.5 then\n \
    \       if integer < 0 then\n            return integer - 1\n        end\n   \
    \     return integer + 1\n    end\n    return rounded\nend", "  if type(value)\
    \ ~= \"string\" then return value end\n  if value:sub(1, 1) == \"-\" then\n  \
    \  return math.floor(tonumber(value))\n  else\n    return math.ceil(tonumber(value))\n\
    \  end\nend", "  local n = tonumber(value)\n  local rounded = n - n % 1", end,
  "  -- check for an integer\n  if string.match(value, '^%d+$') then\n    return tonumber(value)\n\
    \  end", "    local num = tonumber(value)\n    if num < 0 then\n        return\
    \ math.ceil(num)\n    else\n        return math.floor(num)\n    end\nend", " \
    \   if value >= 0 then\n        if value - math.floor(value) < 0.5 then\n    \
    \        return math.floor(value)\n        else\n            return math.ceil(value)\n\
    \        end\n    else\n        if math.floor(value) - value < 0.5 then\n    \
    \        return math.floor(value)\n        else\n            return math.ceil(value)\n\
    \        end\n    end\nend", "    if value >= 0 then\n        return math.floor(value\
    \ + 0.5)\n    else\n        return math.ceil(value - 0.5)\n    end\nend", "  local\
    \ num = tonumber(value)\n  return math.floor(num + 0.5)\nend", "  -- your code\
    \ here\n  if value > 0 then\n    if value % 1 == 0 then\n      return value\n\
    \    else\n      if value - math.floor(value) == 0.5 then\n        return math.floor(value)\n\
    \      else\n        return math.ceil(value)\n      end\n    end\n  else\n   \
    \ if value % 1 == 0 then\n      return value\n    else\n      if value - math.floor(value)\
    \ == -0.5 then\n        return math.ceil(value)\n      else\n        return math.floor(value)\n\
    \      end\n    end\n  end\nend", "    if value >= 0 then\n        local _, fraction\
    \ = math.modf(value)\n        if fraction >= 0.5 then\n            return math.ceil(value)\n\
    \        else\n            return math.floor(value)\n        end\n    else\n \
    \       local _, fraction = math.modf(value)\n        if fraction <= -0.5 then\n\
    \            return math.floor(value)\n        else\n            return math.ceil(value)\n\
    \        end\n    end\nend", "  -- TODO: implement this function\nend", "    local\
    \ temp = math.ceil(value)\n    if temp - value == 0.5 then\n        return value\
    \ >= 0 and temp or temp - 1\n    end\n    return math.floor(value + 0.5)\nend",
  "  -- your code here\n  --[[\n  local function round(x)\n    local i = math.floor(x)\n\
    \    if (x - i) >= 0.5 then\n      return i + 1\n    else\n      return i\n  \
    \  end\n  end\n  return round(tonumber(value))\n  ]]\n  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    return math.round(tonumber(value))\nend", "  return 0\nend",
  "    local remainder = value - math.floor(value)\n    local result = math.floor(value)\n\
    \    if remainder >= 0.5 then\n        result = result + 1\n    end\n    return\
    \ result\nend", "  return math.ceil(value)\nend", "  local _, _, int = value:find(\"\
    (%d+)\")\n  int = tonumber(int)\n  if int > 5 then\n    return int + 1\n  else\n\
    \    return int\n  end\nend", "  -- your code here\n  -- if value is \"14.5\"\n\
    \  -- step 1: convert it to a number\n  -- step 2: add 0.5\n  -- step 3: math.floor\n\
    \  -- if value is \"-14.5\"\n  -- step 1: convert it to a number\n  -- step 2:\
    \ subtract 0.5\n  -- step 3: math.ceil\n  return math.floor(value + 0.5)\nend",
  "  local fval = tonumber(value)\n  local fval_int = math.floor(fval)\n  local fval_frac\
    \ = fval - fval_int\n  if fval_frac < 0.5 then\n    return fval_int\n  else\n\
    \    return fval_int + 1\n  end\nend", "  return math.floor(tonumber(value) +\
    \ 0.5)\nend", "    local n = tonumber(value)\n    if n >= 0 then\n        return\
    \ math.floor(n + 0.5)\n    else\n        return math.ceil(n - 0.5)\n    end\n\
    end", "  local num = tonumber(value)\n  if num == math.floor(num) then\n    return\
    \ num\n  elseif num < 0 then\n    return math.floor(num)\n  else\n    return math.ceil(num)\n\
    \  end\nend", "  local number = tonumber(value)\n  local integer = math.floor(number)\n\
    \  if number - integer > 0.5 then\n    return integer + 1\n  else\n    return\
    \ integer\n  end\nend", "    local value = tonumber(value)\n    if value - math.floor(value)\
    \ >= 0.5 then\n        return math.ceil(value)\n    else\n        return math.floor(value)\n\
    \    end\nend", "  -- Write your code here\n  local n = tonumber(value)\n  local\
    \ up = math.ceil(n)\n  local down = math.floor(n)\n  if math.abs(n - up) > math.abs(n\
    \ - down) then\n    return down\n  else\n    return up\n  end\nend", "    -- your\
    \ code here\n    local int, frac = math.modf(value)\n    if frac >= 0.5 then\n\
    \        return int + 1\n    else\n        return int\n    end\nend", "  return\
    \ tonumber(value)\nend", "  if value % 1 >= 0.5 then\n    return math.ceil(value)\n\
    \  else\n    return math.floor(value)\n  end\nend", "  -- Check for positive or\
    \ negative\n  local positive = value:match(\"^%-?([%d%.]+)$\")\n  local integer\
    \ = value:match(\"^%-?([%d]+)%.?[%d]*$\")\n  local fractions = value:match(\"\
    ^%-?[%d]*%.?([%d]+)$\")\n  if positive == nil or integer == nil or fractions ==\
    \ nil then\n    return nil\n  end\n  if fractions == \"5\" or fractions == \"\
    0\" then\n    return tonumber(integer)\n  end\n  if positive then\n    return\
    \ tonumber(integer) + 1\n  end\n  return tonumber(integer) - 1\nend", "  return\
    \ tonumber(value)\nend", "  local num = tonumber(value)\n  local int, frac = math.modf(num)\n\
    \  return frac > 0.5 and int + 1 or int\nend", "  -- your code here\n  return\
    \ math.floor(value + 0.5)\nend", "    return math.floor(value + 0.5)\nend", " \
    \ local base = math.floor(value)\n  if base == value then\n    return base\n \
    \ elseif value < 0 then\n    return base - 1\n  else\n    return base + 1\n  end\n\
    end", "    local n = tonumber(value)\n    if n % 1 == 0 then\n        return n\n\
    \    else\n        local n_abs = math.abs(n)\n        local fl = math.floor(n_abs)\n\
    \        local ce = math.ceil(n_abs)\n        if n_abs - fl > ce - n_abs then\n\
    \            return -ce\n        else\n            return -fl\n        end\n \
    \   end\nend", "  local max = math.max(0, string.len(value) - 1)\n  local index\
    \ = math.pow(10, max)\n  local val = 0\n  for i = max, 0, -1 do\n    local num\
    \ = math.floor(tonumber(value) / index)\n    val = val + num * index\n    if num\
    \ > 4 then\n      val = val + index\n    end\n    if num < 4 then\n      val =\
    \ val - index\n    end\n    index = index / 10\n  end\n  return val\nend", " \
    \ if value == \"-0\" then\n    return 0\n  end\n  if value:sub(1,1) == \"-\" then\n\
    \    if math.ceil(value) == math.floor(value) then\n      return math.ceil(value)\n\
    \    else\n      return math.floor(value)\n    end\n  else\n    if math.ceil(value)\
    \ == math.floor(value) then\n      return math.ceil(value)\n    else\n      return\
    \ math.ceil(value)\n    end\n  end\nend", "    -- Your code here\nend", "  local\
    \ f, r = math.modf(value)\n  if r >= 0.5 then\n    return f + 1\n  else\n    return\
    \ f\n  end\nend", "  local n = tonumber(value)\n  local i = math.floor(n)\n  local\
    \ f = n - i\n  if f > 0.5 then\n    return i + 1\n  elseif f < -0.5 then\n   \
    \ return i - 1\n  else\n    return i\n  end\nend", "  local decimal, integer =\
    \ value:match(\"([0-9]+%.?[0-9]*)([-]?[0-9]+)\")\n  local integer_numeric = tonumber(integer)\n\
    \  local decimal_numeric = tonumber(decimal)\n  local closest_integer = math.floor(decimal_numeric)\n\
    \  if math.abs(decimal_numeric - closest_integer) < 0.5 then\n    return integer_numeric\n\
    \  elseif decimal_numeric - closest_integer > 0.5 then\n    return integer_numeric\
    \ + 1\n  else\n    return integer_numeric - 1\n  end\nend", end, "  local result\
    \ = string.gsub(value, \"^(%d+).*$\", \"%1\")\n  local fraction = string.gsub(value,\
    \ \"^%d+%.(%d).*$\", \"%1\")\n  local digit = tonumber(fraction)\n  if digit >\
    \ 4 then\n    result = tonumber(result) + 1\n  end\n  return result\nend", " \
    \   return math.floor(tonumber(value) + 0.5)\nend", "  return math.round(tonumber(value))\n\
    end", "    -- Code goes here.\nend", "    local num = tonumber(value)\n    local\
    \ int, frac = math.modf(num)\n    if frac >= 0.5 then\n        return int + 1\n\
    \    else\n        return int\n    end\nend", "    if value % 1 >= 0.5 then\n\
    \        return math.ceil(value)\n    else\n        return math.floor(value)\n\
    \    end\nend", "    local negative = value:find(\"-\") ~= nil\n    local decimal_place\
    \ = value:find(\".\")\n    local val = tonumber(value)\n    if decimal_place then\n\
    \        local whole = tonumber(value:sub(0, decimal_place - 1))\n        local\
    \ dec = tonumber(value:sub(decimal_place + 1))\n        if dec >= 0.5 then\n \
    \           return whole + 1\n        else\n            return whole\n       \
    \ end\n    else\n        return val\n    end\nend", "    --\nend", "    local\
    \ d0 = math.floor(value)\n    local d1 = math.ceil(value)\n    local f0 = value\
    \ - d0\n    local f1 = d1 - value\n    if f0 == f1 then\n        return d1\n \
    \   elseif f0 < f1 then\n        return d0\n    else\n        return d1\n    end\n\
    end", "  return math.floor(value + 0.5)\nend", "  local v = tonumber(value)\n\
    \  if v < 0 then\n    return math.ceil(v)\n  else\n    return math.floor(v)\n\
    \  end\nend", "  local num = tonumber(value)\n  local floor_num = math.floor(num)\n\
    \  local ceil_num = math.ceil(num)\n  local diff_floor = math.abs(num - floor_num)\n\
    \  local diff_ceil = math.abs(num - ceil_num)\n  if diff_floor == diff_ceil then\n\
    \    if num > 0 then\n      return ceil_num\n    else\n      return floor_num\n\
    \    end\n  elseif diff_floor < diff_ceil then\n    return floor_num\n  else\n\
    \    return ceil_num\n  end\nend", "    local _, i = math.modf(value)\n    local\
    \ f = value - i\n    if f > 0.5 then\n        return i + 1\n    elseif f < -0.5\
    \ then\n        return i - 1\n    else\n        return i\n    end\nend", "  local\
    \ sign = 1\n  if value:sub(1, 1) == '-' then\n    sign = -1\n    value = value:sub(2)\n\
    \  end\n  local int, frac = value:match('^(%d+)%.(%d+)$')\n  if frac and frac:sub(1,\
    \ 1) >= '5' then\n    return sign * (int + 1)\n  else\n    return sign * int\n\
    \  end\nend", "    return math.ceil(value)\nend", "  -- your code here\n  return\
    \ math.floor(value + 0.5)\nend", "    local n = tonumber(value)\n    return n\
    \ >= 0 and math.floor(n + 0.5) or math.ceil(n - 0.5)\nend", "    return math.floor(value\
    \ + 0.5)\nend", "  local num = tonumber(value)\n  local floor = math.floor(num)\n\
    \  if num-floor > 0.5 then\n    return floor+1\n  else\n    return floor\n  end\n\
    end", "    return math.floor(value+0.5)\nend", "  -- your code here\n  return\
    \ math.ceil(value)\nend", "  local number = tonumber(value)\n  if number < 0 then\n\
    \    return math.ceil(number)\n  else\n    return math.floor(number)\n  end\n\
    end", "    local int, frac = value:match(\"([-]?%d+)%.(%d+)\")\n    int = tonumber(int)\n\
    \    frac = tonumber(frac)\n    if frac >= 5 then\n        int = int + 1\n   \
    \ end\n    return int\nend", "  return math.floor(tonumber(value) + 0.5)\nend",
  "    return value:match('(%d+)%.%d+') and (value:match('(%d+)%.%d+') + 1) or value:match('(%d+)')\n\
    end", "  local num = tonumber(value)\n  local whole = math.floor(num)\n  if num\
    \ - whole > 0.5 then\n    return whole + 1\n  else\n    return whole\n  end\n\
    end", "  -- body\n  local float_part = tonumber(value) - math.floor(tonumber(value))\n\
    \  if float_part >= 0.5 then\n    return math.ceil(tonumber(value))\n  else\n\
    \    return math.floor(tonumber(value))\n  end\nend", "    local num = tonumber(value)\n\
    \    if num >= 0 then\n        return math.floor(num + 0.5)\n    else\n      \
    \  return math.ceil(num - 0.5)\n    end\nend", "  local number = tonumber(value)\n\
    \  if number % 1 < 0.5 then\n    return math.floor(number)\n  else\n    return\
    \ math.ceil(number)\n  end\nend", "  local num = tonumber(value)\n  if not num\
    \ then\n    return \"Invalid number entered!\"\n  end\n  return math.floor(num\
    \ + 0.5)\nend", "    return string.match(value, \"%d\")\nend", "    local number\
    \ = tonumber(value)\n    local floor_value = math.floor(number)\n    local ceil_value\
    \ = math.ceil(number)\n    if number > 0 then\n        if number - floor_value\
    \ == 0.5 then\n            return ceil_value\n        else\n            return\
    \ floor_value\n        end\n    else\n        if number - floor_value == -0.5\
    \ then\n            return floor_value\n        else\n            return ceil_value\n\
    \        end\n    end\nend", "    local int = math.tointeger(value)\n    local\
    \ num = tonumber(value)\n    local delta = math.abs(num - int)\n    if delta >=\
    \ 0.5 then\n        int = int + math.sign(int)\n    end\n    return int\nend",
  "    local value = tonumber(value)\n    local i, f = math.modf(value)\n    if f\
    \ >= 0.5 then\n        return i + 1\n    else\n        return i\n    end\nend",
  "    -- TODO: it seems there is no math.round function in 5.1\n    local num = tonumber(value)\n\
    \    local _, f = math.modf(num)\n    if f < 0.5 then\n        return math.floor(num)\n\
    \    else\n        return math.ceil(num)\n    end\nend", "    -- your code here\n\
    \    local num = tonumber(value)\n    if num > 0 then\n        return math.floor(num\
    \ + 0.5)\n    else\n        return math.ceil(num - 0.5)\n    end\nend", "    return\
    \ math.floor(value + 0.5)\nend", "  -- return value\n  local integer = math.floor(value)\n\
    \  local remainder = value - integer\n  if remainder > 0.5 then\n    return integer\
    \ + 1\n  elseif remainder < -0.5 then\n    return integer - 1\n  else\n    return\
    \ integer\n  end\nend", "  local value = tonumber(value)\n  local i = math.floor(value)\n\
    \  if i == value then\n    return i\n  elseif value - i > 0.5 then\n    return\
    \ i + 1\n  else\n    return i - 1\n  end\nend", "  -- This function is currently\
    \ incomplete.\n  -- We need to go through each value and see which is the closest\
    \ to our\n  -- value. If there are two possible answers, we should return the\
    \ one\n  -- that is closest to 0.\n  local min_difference = math.huge\n  local\
    \ closest_val = 0\n  local difference = 0\n  local value_int = math.floor(value)\n\
    \  for i = value_int, value_int + 1 do\n    difference = value - i\n    if math.abs(difference)\
    \ < min_difference then\n      min_difference = math.abs(difference)\n      closest_val\
    \ = i\n    end\n  end\n  return closest_val\nend", "    local n = tonumber(value)\n\
    \    local int = math.floor(n)\n    local remainder = n - int\n    return remainder\
    \ >= 0.5 and int + 1 or int\nend", "\tlocal n = math.floor(value)\n\tlocal offset\
    \ = value - n\n\tif offset < 0.5 then\n\t\treturn n\n\telse\n\t\treturn n + 1\n\
    \tend\nend", "  local num = tonumber(value)\n  local int = math.floor(num)\n \
    \ if num > int then\n    return int + 1\n  elseif num < int then\n    return int\
    \ - 1\n  else\n    return int\n  end\nend", "\tlocal n = tonumber(value)\n\tif\
    \ n == math.floor(n) then\n\t\treturn n\n\telseif n < 0 then\n\t\treturn math.ceil(n)\n\
    \telse\n\t\treturn math.floor(n)\n\tend\nend", "    -- Write your code here\n\
    end", "\tif value < 0 then\n\t\tvalue = -value\n\tend\n\treturn math.floor(value\
    \ + 0.5)\nend", "    local n = tonumber(value)\n    if n < 0 then\n        return\
    \ math.ceil(n)\n    else\n        return math.floor(n)\n    end\nend", "    local\
    \ num = tonumber(value)\n    local result = math.floor(num)\n    if result < num\
    \ then\n        result = result + 1\n    end\n    return result\nend", "  local\
    \ num, dec = string.match(value, \"([-]?%d+)%.(%d+)\")\n  if dec == \"5\" then\n\
    \    num = num + 1\n  end\n  return tonumber(num)\nend", "  local n = tonumber(value)\n\
    \  return n > 0 and math.floor(n + 0.5) or math.ceil(n - 0.5)\nend", "    if value\
    \ % 1 >= 0.5 then\n        return math.ceil(value)\n    else\n        return math.floor(value)\n\
    \    end\nend", "  local sign = value:match(\"^%-\") and -1 or 1\n  local number\
    \ = tonumber(value)\n  return sign * math.floor(math.abs(number) + 0.5)\nend",
  "  local number = tonumber(value)\n  local first_number, second_number = math.modf(number)\n\
    \  if second_number < 0.5 then\n    return first_number\n  else\n    return first_number\
    \ + 1\n  end\nend", "    return round(value)\nend", "  local factor = math.abs(value)\n\
    \  factor = math.floor(factor + 0.5)\n  if value < 0 then factor = -factor end\n\
    \  return factor\nend", "  local num = tonumber(value)\n  local prev, next = math.floor(num),\
    \ math.ceil(num)\n  if math.abs(num - prev) > math.abs(num - next) then\n    return\
    \ next\n  else\n    return prev\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
