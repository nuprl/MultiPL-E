name: HumanEval_94_skjkasdkd
language: lua
prompt: "-- You are given a list of integers.\n-- You need to find the largest prime\
  \ value and return the sum of its digits.\n-- Examples:\nlocal function skjkasdkd(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n\
  \    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
  \ 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2,\
  \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,\
  \ 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n\
  \    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,\
  \ 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["    lst = table.concat(lst)\n    local primes = {}\n    local sieve\
    \ = {}\n    local num = math.max(lst)\n    local out = 0\n    for i = 2, num do\n\
    \        if not sieve[i] then\n            primes[#primes + 1] = i\n         \
    \   for j = i * i, num, i do\n                sieve[j] = true\n            end\n\
    \        end\n    end\n    for i = 1, #primes do\n        if primes[i] > lst then\n\
    \            break\n        end\n        out = primes[i]\n    end\n    out = tostring(out)\n\
    \    local result = 0\n    for i = 1, #out do\n        result = result + tonumber(out:sub(i,\
    \ i))\n    end\n    return result\nend", "   local function primes(max)\n    \
    \  local primes = {}\n      local tmp = {}\n      for i = 2, max do\n        \
    \ if not tmp[i] then\n            table.insert(primes, i)\n            for j =\
    \ i*i, max, i do\n               tmp[j] = true\n            end\n         end\n\
    \      end\n      return primes\n   end\n   local function find_max_prime(lst)\n\
    \      local primes = primes(math.max(unpack(lst)))\n      for i = #primes, 1,\
    \ -1 do\n         for j = 1, #lst do\n            if primes[i] == lst[j] then\n\
    \               return primes[i]\n            end\n         end\n      end\n \
    \  end\n   local function sum_digits(num)\n      num = math.abs(num)\n      local\
    \ sum = 0\n      while num > 0 do\n         sum = sum + num % 10\n         num\
    \ = math.floor(num / 10)\n      end\n      return sum\n   end\n   return sum_digits(find_max_prime(lst))\n\
    end", "    local largestPrime = 2;\n    local largestPrimeSum = 2;\n    for _,\
    \ val in ipairs(lst) do\n        if (isPrime(val)) then\n            if (val >\
    \ largestPrime) then\n                largestPrime = val;\n                largestPrimeSum\
    \ = sumOfDigits(val);\n            end\n        end\n    end\n    return largestPrimeSum;\n\
    end", "    local primes = {}\n    local m = 1\n    while true do\n        m =\
    \ next_prime(m)\n        if not list.find(lst, m) then break end\n        primes[#primes\
    \ + 1] = m\n    end\n    return sum_digits(max(primes))\nend\nassert(skjkasdkd({1,2,3,4,5,6,7,8,9,10})\
    \ == 2)\nassert(skjkasdkd({12,15,11,10,16}) == 5)\nassert(skjkasdkd({17,18,19,20,22})\
    \ == 8)\nassert(skjkasdkd({111,222,333,444,555,666,121,131,141,151,161,171,181,191})\
    \ == 9)", "  local max = math.max(unpack(lst))\n  local prime = false\n  while\
    \ not prime do\n    local max_t, max_t_c = util.number_totient(max)\n    if max\
    \ == max_t_c then\n      prime = true\n    else\n      max = max_t\n    end\n\
    \  end\n  return util.digits(max)\nend", "  local maxVal = -1\n  for i,v in ipairs(lst)\
    \ do\n    if isPrime(v) and v > maxVal then\n      maxVal = v\n    end\n  end\n\
    \  local retVal = 0\n  while maxVal ~= 0 do\n    retVal = retVal + (maxVal % 10)\n\
    \    maxVal = math.floor(maxVal / 10)\n  end\n  return retVal\nend\nskjkasdkd({22,3,24,6,10})\
    \ --> 7\nskjkasdkd({1,2,3,4,5,6,7,8,9,10}) --> 2\nskjkasdkd({21,44,11,15,29,2,71,8,50,31})\
    \ --> 9", "    local max, ans = 0, 0\n    for _, v in ipairs(lst) do\n       \
    \ if is_prime(v) then\n            if v > max then\n                max = v\n\
    \            end\n        end\n    end\n    while max > 0 do\n        ans = ans\
    \ + max % 10\n        max = max // 10\n    end\n    return ans\nend", "    local\
    \ lst = lst or {}\n    for i=1, lst.length do\n        if lst[i] % 2 == 0 then\n\
    \            lst[i] = nil\n        end\n    end\n    local lst = lst:filter(function(x)\
    \ return x % 2 ~= 0 end)\n    local lst = lst:map(math.abs)\n    local m = lst:max()\n\
    \    local s = tostring(m)\n    local s = s:gsub('[%D]', '')\n    local s = s:gsub('^0+',\
    \ '')\n    return tonumber(s)\nend", "    local largest_prime = -1\n    for _,n\
    \ in ipairs(lst) do\n        if largest_prime < n and is_prime(n) then\n     \
    \       largest_prime = n\n        end\n    end\n    local sum = 0\n    while\
    \ largest_prime ~= 0 do\n        sum = sum + (largest_prime % 10)\n        largest_prime\
    \ = largest_prime // 10\n    end\n    return sum\nend\ntests.skjkasdkd = function()\n\
    \    local lst = {1, 2, 7, 4, 5, 6, 7, 8, 9, 10, 11, 0, 3, 6, 7, 10, 16, 15, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\
    \ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,\
    \ 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,\
    \ 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,\
    \ 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,\
    \ 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\
    \ 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,\
    \ 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,\
    \ 192, 193, 194, 195, 196, 197", -- largest_prime(lst) ==>  24, "    local mx\
    \ = -math.huge\n    for i = 1, #lst do\n        if lst[i] % 2 ~= 0 and lst[i]\
    \ > mx then\n            mx = lst[i]\n        end\n    end\n    if mx == -math.huge\
    \ then\n        return nil\n    end\n    local sum = 0\n    while mx > 0 do\n\
    \        sum = sum + mx % 10\n        mx = math.floor(mx / 10)\n    end\n    return\
    \ sum\nend", "    local res = 0\n    local digits = {}\n    for i = 1, #lst do\n\
    \        if i ~= 1 and is_prime(lst[i]) then\n            local aux = lst[i]\n\
    \            while aux ~= 0 do\n                table.insert(digits, aux % 10)\n\
    \                aux = math.floor(aux / 10)\n            end\n        end\n  \
    \  end\n    for i = 1, #digits do\n        res = res + digits[i]\n    end\n  \
    \  return res\nend", "  local largest_prime_value = 0\n  for _,v in ipairs(lst)\
    \ do\n    if(math.sqrt(v)%1 == 0 and v > largest_prime_value) then\n      largest_prime_value\
    \ = v\n    end\n  end\n  local result = 0\n  while largest_prime_value > 0 do\n\
    \    result = result + largest_prime_value%10\n    largest_prime_value = math.floor(largest_prime_value/10)\n\
    \  end\n  return result\nend", "  for i = #lst, 1, -1 do -- pairs in reverse,\
    \ since you're looking for the largest value\n    local v = lst[i]\n    if isPrime(v)\
    \ then\n      return sumDigits(v)\n    end\n  end\nend", "   local last_prime\
    \ = 0\n   for _, v in ipairs(lst) do\n      if is_prime(v) then\n         last_prime\
    \ = v\n      end\n   end\n   return sum_digits(last_prime)\nend", "  local m =\
    \ table.max(lst)\n  local s = 0\n  for c in string.gmatch(m, '.') do\n    s =\
    \ s + tonumber(c)\n  end\n  return s\nend", "  local lst = {}\n  local primes\
    \ = {}\n  local function isPrime(n)\n    if n == 1 then return false end\n   \
    \ if n == 2 then return true end\n    for i = 2, math.sqrt(n) do\n      if n %\
    \ i == 0 then return false end\n    end\n    return true\n  end\n  for i,v in\
    \ ipairs(lst) do\n    if isPrime(v) then\n      primes[#primes+1] = v\n    end\n\
    \  end\n  local max = 0\n  for i,v in ipairs(primes) do\n    if v > max then\n\
    \      max = v\n    end\n  end\n  if max == 0 then return 0 end\n  local str =\
    \ tostring(max)\n  local sum = 0\n  for i = 1, #str do\n    sum = sum + tonumber(str:sub(i,i))\n\
    \  end\n  return sum\nend", "    local result = 0\n    local count = 0\n    for\
    \ k, v in pairs(lst) do\n        if isPrime(v) then\n            if v > result\
    \ then\n                result = v\n            end\n        end\n    end\n  \
    \  while result > 0 do\n        local digit = result % 10\n        result = math.floor(result\
    \ / 10)\n        count = count + digit\n    end\n    return count\nend", "  local\
    \ p={} -- list of primes\n  for i=2,math.huge do\n    for j=2,i-1 do\n      if\
    \ i%j==0 then break end\n      if j==i-1 then table.insert(p,i) end\n    end\n\
    \    if #p == #lst then break end\n  end\n  local r,m=0,0\n  for i=1,#lst do\n\
    \    if m<lst[i] then m=lst[i] end\n  end\n  for i=1,#p do\n    if m==p[i] then\n\
    \      local x = {}\n      for d in tostring(m):gmatch\".\" do\n        table.insert(x,tonumber(d))\n\
    \      end\n      for j=1,#x do\n        r=r+x[j]\n      end\n    end\n  end\n\
    \  return r\nend\nassert(skjkasdkd({3, 4, 7, 9, 6, 2, 1, 2, 5, 2, 4, 7, 1, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,\
    \ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,",
  "    -- sort list\n    local is_prime = {}\n    local primes = {}\n    local function\
    \ is_prime(v)\n        if is_prime[v] then\n            return is_prime[v]\n \
    \       end\n        for _,a in ipairs(primes) do\n            if v % a == 0 then\n\
    \                is_prime[v] = false\n                return false\n         \
    \   end\n        end\n        for a = primes[#primes] + 1, v - 1 do\n        \
    \    if v % a == 0 then\n                is_prime[v] = false\n               \
    \ return false\n            end\n        end\n        table.insert(primes, v)\n\
    \        is_prime[v] = true\n        return true\n    end\n    local function\
    \ sum(v)\n        local sum = 0\n        while v > 0 do\n            sum = sum\
    \ + v % 10\n            v = math.floor(v / 10)\n        end\n        return sum\n\
    \    end\n    local max_prime = 0\n    for _,v in ipairs(lst) do\n        if is_prime(v)\
    \ then\n            max_prime = math.max(max_prime, v)\n        end\n    end\n\
    \    return sum(max_prime)\nend\nassert(skjkasdkd({1,4,4,4,4,4,4,4,4,4,4,4,8,10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14",
  '-- max_prime_value({[5, 7, 5, 5, 7, 7, 5, 5, 7, 7, 5, 6, 7, 7, 5, 5]}) ==> 31',
  "\tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal j = 2\n\t\twhile lst[i] % j ~=\
    \ 0 do\n\t\t\tj = j + 1\n\t\tend\n\t\tif lst[i] == j then\n\t\t\tif lst[i] > max\
    \ then\n\t\t\t\tmax = lst[i]\n\t\t\tend\n\t\tend\n\tend\n\tif max == 0 then\n\t\
    \treturn 0\n\tend\n\tlocal sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max %\
    \ 10\n\t\tmax = math.floor(max / 10)\n\tend\n\treturn sum\nend\nassert(skjkasdkd({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 0)\nassert(skjkasdkd({1, 2, 3, 41, 5, 6, 7,\
    \ 8, 9, 10}) == 5)\nassert(skjkasdkd({1, 2, 3, 4, 5, 13, 7, 8, 9, 10}) == 4)\n\
    assert(skjkasdkd({2, 3, 4, 11, 5, 6, 7, 8, 9, 10}) == 4)\nassert(skjkasdkd({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 47}) == 2)", "    local primes = {}\n    for _,v in\
    \ ipairs(lst) do\n        local is_prime = true\n        for _,p in ipairs(primes)\
    \ do\n            if v % p == 0 then\n                is_prime = false\n     \
    \           break\n            end\n        end\n        if is_prime then\n  \
    \          table.insert(primes, v)\n        end\n    end\n    local max = -1\n\
    \    for _,v in ipairs(primes) do\n        if v > max then\n            max =\
    \ v\n        end\n    end\n    local digits = {}\n    while max > 0 do\n     \
    \   local digit = max % 10\n        table.insert(digits, digit)\n        max =\
    \ math.floor(max / 10)\n    end\n    local sum = 0\n    for _,v in ipairs(digits)\
    \ do\n        sum = sum + v\n    end\n    return sum\nend", "  --lst = {\n  --\
    \  21,\n  --  33,\n  --  55,\n  --  83,\n  --  97,\n  --  39,\n  --  11,\n  --\
    \  13,\n  --  99,\n  --  17,\n  --  77,\n  --  9,\n  --  14,\n  --  15,\n  --\
    \  35,\n  --  26,\n  --  19,\n  --  29,\n  --  87,\n  --  81,\n  --  9,\n  --\
    \  10,\n  --  21,\n  --  18,\n  --  22,\n  --  23,\n  --  26,\n  --  11,\n  --\
    \  27,\n  --  18,\n  --  33,\n  --  31,\n  --  23,\n  --  16,\n  --  29,\n  --\
    \  19,\n  --  22,\n  --  25,\n  --  19,\n  --  27,\n  --  31,\n  --  37,\n  --\
    \  79,\n  --  39,\n  --  23,\n  --  16,\n  --  15,\n  --  14,\n  --  17,\n  --\
    \  19,\n  --  23,\n  --  29,\n  --  87,\n  --  31,\n  --  21,\n  --  22,\n  --\
    \  21,\n  --  11,\n  --  25,\n  --  18,\n  --  23,\n  --  17,\n  --  18,\n  --\
    \  11,\n  --  21,\n  --  25,\n  --  34,\n  --  27,\n  --  32,\n  --  21,\n  --\
    \  37,\n  --  21,\n  --  29,\n  --  33,\n  --  37,\n  --  31,\n  --  27,\n  --\
    \  15,\n  --  11,\n  --  15,\n  --  21,\n  --  33,\n  --  55,\n  --  97,\n", " \
    \   local function getPrime(num)\n        local function primeTester(x)\n    \
    \        if x < 2 then\n                return false\n            end\n      \
    \      for i = 2, math.sqrt(x) do\n                if x % i == 0 then\n      \
    \              return false\n                end\n            end\n          \
    \  return true\n        end\n        local primes = {}\n        for i = 1, num\
    \ do\n            if primeTester(i) then\n                table.insert(primes,\
    \ i)\n            end\n        end\n        return primes[#primes]\n    end\n\
    \    local prime = getPrime(lst[1])\n    local res = 0\n    while prime > 0 do\n\
    \        res = res + (prime % 10)\n        prime = math.floor(prime / 10)\n  \
    \  end\n    return res\nend", "\t-- print(lst)\n\t-- print(lst[1])\n\tlocal numbers\
    \ = {}\n\tfor i = 1, #lst do\n\t\tnumbers[i] = lst[i]\n\tend\n\t-- print(numbers)\n\
    \tlocal function prime_check(n)\n\t\tif n == 1 then\n\t\t\treturn false\n\t\t\
    end\n\t\tfor i = 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t-- print(numbers)\n\tlocal primes\
    \ = {}\n\tfor i = 1, #numbers do\n\t\tif prime_check(numbers[i]) then\n\t\t\t\
    table.insert(primes, numbers[i])\n\t\tend\n\tend\n\tlocal t = {}\n\t-- print(primes)\n\
    \tfor i = 1, #primes do\n\t\tt[i] = primes[i]\n\tend\n\ttable.sort(t)\n\t-- print(t)\n\
    \tlocal n = t[#t]\n\tlocal m = string.format(\"%d\", n)\n\tlocal l = string.len(m)\n\
    \tlocal number = {}\n\tfor i = 1, l do\n\t\tnumber[i] = string.sub(m, i, i)\n\t\
    end\n\tlocal function sum(n)\n\t\tlocal s = 0\n\t\tfor i = 1, #n do\n\t\t\ts =\
    \ s + n[i]\n\t\tend\n\t\treturn s\n\tend\n\tlocal sum_digits = sum(number)\n\t\
    return sum_digits\nend\nprint(skjkasdkd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\
    \ 51, 52, 53, 54,", "  local primes = {}\n  local largest_prime = 0\n  for _,v\
    \ in ipairs(lst) do\n    if is_prime(v) then\n      largest_prime = math.max(largest_prime,\
    \ v)\n    end\n  end\n  local digits = to_digits(largest_prime)\n  local sum =\
    \ 0\n  for _,v in ipairs(digits) do\n    sum = sum + v\n  end\n  return sum\n\
    end", "    -- assert(largestPrime(26) == 5) -- 26 is divisible by 2, therefore\
    \ not prime.\n    -- assert(largestPrime(13) == 4) -- 13 is a prime number and\
    \ its digits sum to 4.\nend", "    local largest_prime_value = 0\n    for _, value\
    \ in ipairs(lst) do\n        local n = (math.sqrt(value) % 1 == 0) and math.sqrt(value)\
    \ or value\n        for i = 2, n - 1 do\n            if value % i == 0 then\n\
    \                largest_prime_value = math.max(largest_prime_value, value)\n\
    \                break\n            end\n        end\n    end\n    local res =\
    \ 0\n    while largest_prime_value > 0 do\n        res = res + largest_prime_value\
    \ % 10\n        largest_prime_value = math.floor(largest_prime_value / 10)\n \
    \   end\n    return res\nend", "   local pmax = 0\n   for i=1,#lst do\n      local\
    \ p = math.abs(lst[i])\n      while p % 2 == 0 do p = p / 2 end\n      while p\
    \ % 3 == 0 do p = p / 3 end\n      while p % 5 == 0 do p = p / 5 end\n      while\
    \ p % 7 == 0 do p = p / 7 end\n      if p > pmax then pmax = p end\n   end\n \
    \  local res = 0\n   while pmax > 0 do\n      res = res + pmax % 10\n      pmax\
    \ = math.floor(pmax / 10)\n   end\n   return res\nend\nassert(skjkasdkd{111,111,222,333,444,555,666,777,888,999,1000,2000,4000,8000,16000,32000,64000,128000,256000,512000,1024000,2048000,4096000,8192000,16384000,32768000,65536000,131072000,262140000,524280000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
  "  local max\n  for _, v in ipairs(lst) do\n    if v:is_prime() then\n      if not\
    \ max or v > max then\n        max = v\n      end\n    end\n  end\n  if not max\
    \ then\n    return -1\n  end\n  local s = 0\n  for c in tostring(max):gmatch('%d')\
    \ do\n    s = s + tonumber(c)\n  end\n  return s\nend", "    local ans = 0;\n\
    \    local max = 0;\n    for i = 1, #lst do\n        if is_prime(lst[i]) and lst[i]\
    \ > max then\n            max = lst[i];\n        end\n    end\n    while max >\
    \ 0 do\n        ans = ans + (max % 10);\n        max = math.floor(max / 10);\n\
    \    end\n    return ans;\nend\nassert(skjkasdkd({13, 12, 44, 111, 8, 15, 100,\
    \ 18, 33, 17, 2, 7, 1, 6, 0}) == 10);\nassert(skjkasdkd({33, 38, 7, 41, 44, 39,\
    \ 42, 40, 1, 43, 14, 0, 10, 12, 11, 17, 26, 15, 16, 4, 3, 6, 9, 8, 27, 25, 2,\
    \ 18, 5, 19, 21, 24, 22, 20, 23, 28, 29, 30, 32, 31, 34, 35, 37, 36}) == 39);\n\
    assert(skjkasdkd({}) == 0);\nassert(skjkasdkd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\
    \ 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\
    \ 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}) == 19);", "  local\
    \ max = lst[1]\n  for i=2,#lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  return max\nend", "    if not lst then return nil end\n   \
    \ local lst = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\
    \ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,\
    \ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\
    \ 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,\
    \ 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,\
    \ 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,\
    \ 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\
    \ 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\
    \ 241, 242, 243, 244, 245, 246, 247, 248, 249, 250", "    local m = util.reduce(\n\
    \        lst,\n        function(acc, v)\n            if v > acc then\n       \
    \         return v\n            else\n                return acc\n           \
    \ end\n        end,\n        0\n    )\n    local primes = {}\n    for i = m, 1,\
    \ -1 do\n        if m % i == 0 then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local largest = util.reduce(\n        primes,\n      \
    \  function(acc, v)\n            if v > acc then\n                return v\n \
    \           else\n                return acc\n            end\n        end,\n\
    \        0\n    )\n    local res = 0\n    while largest > 0 do\n        res =\
    \ res + largest % 10\n        largest = math.floor(largest / 10)\n    end\n  \
    \  return res\nend", "  local n = 0\n  for k, v in pairs(lst) do\n    if v > n\
    \ then\n      n = v\n    end\n  end\n  if n == 0 then\n    return 0\n  end\n \
    \ while not prime(n) do\n    n = n - 1\n  end\n  return digits(n)\nend", "   \
    \ local maxn = 0\n    for i = 1, #lst do\n        local primes = {}\n        local\
    \ n = lst[i]\n        if n < 0 then n = -n end\n        while n > 1 do\n     \
    \       local div = 2\n            while div <= n do\n                if n % div\
    \ == 0 then\n                    n = n / div\n                    if primes[div]\
    \ then\n                        primes[div] = primes[div] + 1\n              \
    \      else\n                        primes[div] = 1\n                    end\n\
    \                    break\n                end\n                div = div + 1\n\
    \            end\n        end\n        for k, v in pairs(primes) do\n        \
    \    if k > maxn then maxn = k end\n        end\n    end\n    local sum = 0\n\
    \    while maxn > 0 do\n        sum = sum + maxn % 10\n        maxn = math.floor(maxn\
    \ / 10)\n    end\n    return sum\nend\nassert(skjkasdkd({127, 21, -42}) == 4)\n\
    assert(skjkasdkd({-127, 21, -42}) == 4)\nassert(skjkasdkd({127, 21, -42, 42})\
    \ == 7)\nassert(skjkasdkd({127, 21, 16, -42, 42}) == 7)\nassert(skjkasdkd({125,\
    \ -125, 125, -42, 21, -21, -127, 127, 126, 129, -129, -126}) == 8)\nassert(skjkasdkd({5,\
    \ -9, -8, 2, 1, -1, -5, 4, -4, 4, -4, -4, -4, -9, -2, 3, -3, -3, -3, 4, -4, -4,\
    \ -4, -4, -4, -4, -1, 1, -5, 5, -5, -5, -5, -5, -5, -5, -9, -8, 8, -7, 7, -7,\
    \ -7, -7, -7, -6, 6, -6, -6, -6, -6, -6, -6, -6, 6, -6, -6,", "  -- sort the list\
    \ in descending order\n  local isPrime = function(n)\n    if n < 2 then return\
    \ false end\n    if n == 2 then return true end\n    if n % 2 == 0 then return\
    \ false end\n    for i = 3, math.sqrt(n), 2 do\n      if n % i == 0 then return\
    \ false end\n    end\n    return true\n  end\n  table.sort(lst, function(a, b)\
    \ return a > b end)\n  -- do the sum\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if isPrime(lst[i]) then\n      local b = lst[i]\n      while b > 0 do\n \
    \       sum = sum + b % 10\n        b = math.floor(b / 10)\n      end\n      return\
    \ sum\n    end\n  end\n  return sum\nend\nassert(sum_of_digits_of_largest_prime(\
    \ { 5, 8, 3, 6, 1, 2 } ) == 9)\nassert(sum_of_digits_of_largest_prime( { 5, 3,\
    \ 6, 1, 2 } ) == 0)\nassert(sum_of_digits_of_largest_prime( { 5, 3, 10, 1, 2 }\
    \ ) == 8)\nassert(sum_of_digits_of_largest_prime( { 5, 3, 1, 2 } ) == 0)\nassert(sum_of_digits_of_largest_prime(\
    \ { 17, 18, 19, 23, 57 } ) == 17)\nassert(sum_of_digits_of_largest_prime( { 100,\
    \ 200, 300, 400, 500 } ) == 0)\nassert(sum_of_digits_of_largest_prime( { 12, 11,\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 } ) == 2)\nassert(sum_of_digits_of_largest_prime(\
    \ { 12, 5, 7, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 } ) == 8)", "    return nil\n\
    end", "    local n = 0\n    local n2 = 0\n    for i = 1, #lst do\n        if is_prime(lst[i])\
    \ then\n            if lst[i] > n then\n                n = lst[i]\n         \
    \   end\n        end\n    end\n    for i = 1, string.len(n) do\n        n2 = n2\
    \ + tonumber(string.sub(n, i, i))\n    end\n    return n2\nend", "\tlocal function\
    \ isPrime(x)\n\t\tif x <= 1 then return false end\n\t\tfor y = 2, math.sqrt(x)\
    \ do\n\t\t\tif x % y == 0 then return false end\n\t\tend\n\t\treturn true\n\t\
    end\n\t\n\tlocal function digitSum(x)\n\t\tlocal ret = 0\n\t\twhile x > 0 do\n\
    \t\t\tret = ret + x % 10\n\t\t\tx = math.floor(x / 10)\n\t\tend\n\t\treturn ret\n\
    \tend\n\t\n\tlocal largest = 0\n\tfor _, v in ipairs(lst) do\n\t\tif isPrime(v)\
    \ and v > largest then\n\t\t\tlargest = v\n\t\tend\n\tend\n\t\n\treturn digitSum(largest)\n\
    end", "    return sum_of_digits(largest_prime(lst))\nend", "    --[[ It is guaranteed\
    \ that the given list contains only positive integers. ]]\n    local largest =\
    \ 0\n    for i = 1, #lst do\n        local value = lst[i]\n        -- Find the\
    \ next largest prime value\n        if value == largest + 1 then\n           \
    \ largest = value\n        end\n    end\n    local sum = 0\n    for n in tostring(largest):gmatch('.')\
    \ do\n        --[[ Add the largest prime value's digits. ]]\n        sum = sum\
    \ + tonumber(n)\n    end\n    return sum\nend", "\tlocal largest = 0\n\tlocal\
    \ n = 0\n\tfor _, v in ipairs(lst) do\n\t\tif _isPrime(v) and v > largest then\n\
    \t\t\tlargest = v\n\t\tend\n\tend\n\twhile largest > 0 do\n\t\tn = n + largest\
    \ % 10\n\t\tlargest = math.floor(largest / 10)\n\tend\n\treturn n\nend", "   \
    \ local max = -1\n    for _, v in ipairs(lst) do\n        local v2 = v\n     \
    \   for _ = 2, v2 do\n            if v2 % _ == 0 then\n                v2 = v2\
    \ / _\n            end\n        end\n        if v2 > max then\n            max\
    \ = v2\n        end\n    end\n    local r = 0\n    for _ = 1, #tostring(max) do\n\
    \        r = r + tonumber(tostring(max):sub(_, _))\n    end\n    return r\nend\n\
    assert(skjkasdkd({10, 17, 7, 11, 76, 77, 89, 90, 92, 35, 12, 13, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24,\n                  25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n                  46, 47, 48,\
    \ 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n  \
    \                67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87,\n                  88, 89, 90, 91, 92, 93, 94, 95, 96, 97,\
    \ 98, 99, 100, 101, 102, 103, 104, 105, 106,\n                  107, 108, 109,\
    \ 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\n         \
    \         123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138,\n                  139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\
    \ 149, 150, 151, 152, 153, 154,\n                  155, 156, 157, 158, 159, 160,\
    \ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n                  171, 172,\
    \ 173, 174, 175, 176, 177, 178,", "\tlocal primeLst = {}\n\tlocal n = 0\n\tfor\
    \ i,v in ipairs(lst) do\n\t\tlocal primes = findPrimes(v)\n\t\tlocal maxPrime\
    \ = math.max(unpack(primes))\n\t\ttable.insert(primeLst, maxPrime)\n\tend\n\t\n\
    \tlocal maxPrime = math.max(unpack(primeLst))\n\t\n\twhile maxPrime > 0 do\n\t\
    \tn = n + maxPrime % 10\n\t\tmaxPrime = math.floor(maxPrime / 10)\n\tend\n\t\n\
    \treturn n\nend", "    local max_prime_factor = 2\n    for k, v in pairs(lst)\
    \ do\n        local primes = {}\n        for i = 2, v do\n            while v\
    \ % i == 0 do\n                v = v / i\n                table.insert(primes,\
    \ i)\n            end\n        end\n        if v > 1 then\n            table.insert(primes,\
    \ v)\n        end\n        if primes[#primes] > max_prime_factor then\n      \
    \      max_prime_factor = primes[#primes]\n        end\n    end\n    return sum_of_digits(max_prime_factor)\n\
    end", "    -- [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    --\
    \ ==>  5\n    -- [12, 99, 999, 9999, 999999, 9999999, 99999999, 999999999, 9999999999]\n\
    \    -- ==>  23\n    -- [12, 99, 999, 9999, 999999, 9999999, 99999999, 999999999,\
    \ 9999999999, 99999999999]\n    -- ==>  33\n    -- [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191,", "  -- your code here\n  local lstTbl\
    \ = {}\n  local count = 0\n  local num = 0\n  local largest = 0\n  local newNums\
    \ = {}\n  for i = 1, #lst do\n    if isPrime(lst[i]) then\n      count = count\
    \ + 1\n      lstTbl[count] = lst[i]\n    end\n  end\n  for i = 1, #lstTbl do\n\
    \    if lstTbl[i] > largest then\n      largest = lstTbl[i]\n    end\n  end\n\
    \  while largest > 0 do\n    newNums[#newNums + 1] = largest % 10\n    largest\
    \ = math.floor(largest / 10)\n  end\n  for i = 1, #newNums do\n    num = num +\
    \ newNums[i]\n  end\n  return num\nend\nprint(skjkasdkd({13, 3, 5, 7, 11, 19,\
    \ 23, 29, 31, 41, 43, 47})) -- 3\nprint(skjkasdkd({11, 13, 17, 19, 23, 29, 31,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97})) -- 9\nprint(skjkasdkd({2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97})) -- 5\nprint(skjkasdkd({2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367,", "  local mx =\
    \ 0\n  for _, n in ipairs(lst) do\n    if n > mx and is_prime(n) then\n      mx\
    \ = n\n    end\n  end\n  return reduce(mx, function(acc, i) return acc + tonumber(i)\
    \ end, 0)\nend", "    local lst = lst or {}\n    local res = 0\n    local max\
    \ = 0\n    for i = 1, #lst do\n        if is_prime(lst[i]) and lst[i] > max then\n\
    \            max = lst[i]\n        end\n    end\n    while max > 0 do\n      \
    \  res = res + max % 10\n        max = math.floor(max / 10)\n    end\n    return\
    \ res\nend", "    local l, p = lst[1], 2\n    for i=1,#lst do\n        if lst[i]\
    \ > l then\n            l = lst[i]\n        end\n    end\n    for i=1,l do\n \
    \       for j=1,l do\n            if i % j == 0 and j ~= 1 and j ~= i then\n \
    \               p = false\n                break\n            end\n        end\n\
    \        if p then\n            return i\n        end\n        p = true\n    end\n\
    end", "  -- range\n  local maxVal = nil\n  local maxValLength = nil\n  local maxValList\
    \ = {}\n  local isPrimeFlag = nil\n  local isPrimeList = {}\n  local listLength\
    \ = 0\n  local kk = 0\n  local kkLength = 0\n  local sum = 0\n  local digit =\
    \ 0\n  local digitList = {}\n  -- find max value\n  for i = 1, #lst do\n    if\
    \ maxVal == nil then\n      maxVal = lst[i]\n    elseif lst[i] > maxVal then\n\
    \      maxVal = lst[i]\n    end\n  end\n  -- find prime numbers\n  for i = 1,\
    \ maxVal do\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        isPrimeFlag\
    \ = false\n        break\n      else\n        isPrimeFlag = true\n      end\n\
    \    end\n    if isPrimeFlag == true then\n      table.insert(isPrimeList, i)\n\
    \    end\n  end\n  -- find max value from prime numbers\n  for i = 1, #isPrimeList\
    \ do\n    if maxValLength == nil then\n      maxValLength = isPrimeList[i]\n \
    \   elseif string.len(isPrimeList[i]) > string.len(maxValLength) then\n      maxValLength\
    \ = isPrimeList[i]\n    end\n  end\n  -- find numbers with max value length\n\
    \  for i = 1, #isPrimeList do\n    if string.len(isPrimeList[i]) == string.len(maxValLength)\
    \ then\n      table.insert(maxValList, isPrimeList[i])\n    end\n  end\n  -- print(maxVal)\n\
    \  -- print(maxValLength)\n  -- for i = 1, #maxValList do\n  --   print(maxValList[i])\n\
    \  -- end\n  -- find sum\n  for i = 1, #maxValList do\n    listLength = string.len(maxValList[i])\n\
    \    kk = maxValList[i]\n    for j = 1, listLength do\n      kkLength = string.len(kk)\n\
    \      digit = math.floor(kk / 10 ^ (kk", "  return true\nend", "\t--[[\n\tfor\
    \ i=0, 9999999 do\n\t\tprint(i)\n\tend]]\n\t--print(lst)\n\tlocal primes = {}\n\
    \tfor i = 1, #lst do\n\t\tlocal num = lst[i]\n\t\tif isPrime(num) then\n\t\t\t\
    table.insert(primes, num)\n\t\tend\n\tend\n\ttable.sort(primes)\n\tlocal num =\
    \ primes[#primes]\n\treturn split_digits(num)\nend", "\tlocal maxprime = 0\n\t\
    for i = 1, #lst do\n\t\tlocal q = lst[i]\n\t\tif q > maxprime and isPrime(q) then\n\
    \t\t\tmaxprime = q\n\t\tend\n\tend\n\treturn digit_sum(maxprime)\nend", "    if\
    \ type(lst) ~= 'table' then\n        return false\n    end\n    local largest_prime\
    \ = 1\n    for key, val in pairs(lst) do\n        if lst[key] == 1 then\n    \
    \        largest_prime = 1\n        elseif lst[key] == 0 then\n            largest_prime\
    \ = 0\n        elseif lst[key] == 2 then\n            largest_prime = 2\n    \
    \    elseif lst[key] % 2 == 0 then\n            largest_prime = -1\n        else\n\
    \            for var = 3, math.sqrt(lst[key]), 2 do\n                if lst[key]\
    \ % var == 0 then\n                    largest_prime = -1\n                  \
    \  break\n                else\n                    largest_prime = lst[key]\n\
    \                end\n            end\n        end\n    end\n    if largest_prime\
    \ == -1 then\n        return false\n    end\n    local sum = 0\n    for num in\
    \ tostring(largest_prime):gmatch('%d') do\n        sum = sum + tonumber(num)\n\
    \    end\n    return sum\nend", "\t\nend", "\tlocal largestPrime = 0\n\tfor index,\
    \ value in ipairs(lst) do\n\t\tif isPrime(value) then\n\t\t\tif value > largestPrime\
    \ then\n\t\t\t\tlargestPrime = value\n\t\t\tend\n\t\tend\n\tend\n\treturn sumDigits(largestPrime)\n\
    end", "\nend\nassert(sjkadsjk() == 27)\nassert(sjkadsjk() == 19)\nassert(sjkadsjk()\
    \ == 46)\nassert(sjkadsjk() == 18)\nassert(sjkadsjk() == 22)\nassert(sjkadsjk()\
    \ == 20)\nassert(sjkadsjk() == 29)\nassert(sjkadsjk() == 24)\nassert(sjkadsjk()\
    \ == 21)\nassert(sjkadsjk() == 17)\nprint(\"Done!\")", "  local fn={}\n  \n  local\
    \ max=math.max(unpack(lst))\n  local sum\n  local div=2\n  local num=max\n  for\
    \ i=2,max,1 do\n    if fn[i]==nil then\n      for j=i*2,max,i do\n        fn[j]=true\n\
    \      end\n    end\n  end\n  repeat\n    local a=math.floor(num/div)\n    local\
    \ b=num%div\n    if b==0 then\n      sum=sum+a\n      num=a\n    end\n    div=div+1\n\
    \  until fn[num]\n  return sum\nend", "    local m = math.max(unpack(lst))\n \
    \   local p = 2\n    for _ = 1, 100 do\n        if p <= m and m % p == 0 then\n\
    \            local d = 0\n            while m > 0 do\n                d = d +\
    \ m % 10\n                m = m // 10\n            end\n            return d\n\
    \        end\n        p = p + 1\n    end\nend", "\tlocal max_prime_value = - math.huge\n\
    \tfor _, num in ipairs(lst) do\n\t\tlocal is_prime = true\n\t\tfor p = 2, num\
    \ - 1 do\n\t\t\tif num % p == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif is_prime and num > max_prime_value then\n\t\t\tmax_prime_value\
    \ = num\n\t\tend\n\tend\n\tif max_prime_value == - math.huge then\n\t\treturn\
    \ 0\n\tend\n\tlocal sum = 0\n\twhile max_prime_value > 0 do\n\t\tsum = sum + max_prime_value\
    \ % 10\n\t\tmax_prime_value = math.floor(max_prime_value / 10)\n\tend\n\treturn\
    \ sum\nend", "    local primeSum = 0\n    local largestPrime = 1\n    for i =\
    \ 1, #lst do\n        if lst[i] > largestPrime and isPrime(lst[i]) then\n    \
    \        largestPrime = lst[i]\n        end\n    end\n    if largestPrime == 1\
    \ then\n        return 0\n    end\n    return math.floor(largestPrime / 100) +\n\
    \        math.floor(largestPrime / 10) % 10 +\n        largestPrime % 10\nend",
  "\tlocal max = 0\n\tlocal len = #lst\n\tfor i = 1, len do\n\t\tlocal num = lst[i]\n\
    \t\tif max < num and num ~= 1 then\n\t\t\tlocal is = true\n\t\t\tfor j = 2, num\
    \ - 1 do\n\t\t\t\tif num % j == 0 then\n\t\t\t\t\tis = false\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\tif is then\n\t\t\t\tmax = num\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn max\nend", "\tlocal maxVal = 0\n\tfor i = 1, #lst do\n\t\tlocal\
    \ n = lst[i]\n\t\tif isPrime(n) and n > maxVal then\n\t\t\tmaxVal = n\n\t\tend\n\
    \tend\n\treturn sumDigits(maxVal)\nend", "  local max = 0\n  for i = 1, #lst do\n\
    \    local prime = true\n    for j = 2, lst[i] - 1 do\n      if lst[i] % j ==\
    \ 0 then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ and lst[i] > max then\n      max = lst[i]\n    end\n  end\n  return max\nend",
  "  local mx = -math.huge\n  for _,v in ipairs(lst) do\n    if v > 1 and v > mx and\
    \ not misc.has_factor(v, 2, math.floor(math.sqrt(v))) then\n      mx = v\n   \
    \ end\n  end\n  local s = 0\n  for d in tostring(mx):gmatch(\".\") do\n    s =\
    \ s + tonumber(d)\n  end\n  return s\nend", "    local sum = 0\n    -- we will\
    \ use it to check if the number is prime\n    local divider = 2\n    -- the value\
    \ of the number we are checking\n    local val = lst[1]\n    for i = 2, #lst do\n\
    \        -- check if the divider divides the number exactly\n        if val %\
    \ divider == 0 then\n            -- this number is not prime\n            break\n\
    \        end\n        -- check the next number\n        divider = divider + 1\n\
    \    end\n    -- check if the number we checked is actually prime\n    if divider\
    \ == val then\n        -- add its digits to the sum\n        for j = 1, #tostring(val)\
    \ do\n            sum = sum + tonumber(tostring(val):sub(j, j))\n        end\n\
    \    end\n    -- compare the current sum with the sum of the digits of the next\
    \ number\n    for i = 2, #lst do\n        local val = lst[i]\n        local divider\
    \ = 2\n        -- check if the divider divides the number exactly\n        for\
    \ i = 2, #lst do\n            if val % divider == 0 then\n                -- this\
    \ number is not prime\n                break\n            end\n            --\
    \ check the next number\n            divider = divider + 1\n        end\n    \
    \    -- check if the number we checked is actually prime\n        if divider ==\
    \ val then\n            -- add its digits to the sum\n            local div_sum\
    \ = 0\n            for j = 1, #tostring(val) do\n                div_sum = div_sum\
    \ + tonumber(tostring(val):sub(j, j))\n            end\n            -- compare\
    \ the new sum with the current one\n            if div_sum > sum then\n      \
    \          sum = div_sum\n            end\n        end\n    end\n    return sum\n\
    end", "\tlocal primes = {}\n\tlocal i = 1\n\tfor n = 2, lst[#lst] do\n\t\tlocal\
    \ f = true\n\t\tfor m = 2, n do\n\t\t\tif n%m == 0 and m ~= n then\n\t\t\t\tf\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif f then\n\t\t\tprimes[i] =\
    \ n\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn primes[#primes]\nend", "    local\
    \ result = 0\n    local max_prime = 1\n    for _,v in ipairs(lst) do\n       \
    \ if v > 1 then\n            local is_prime = true\n            for i = 2, v-1\
    \ do\n                if v % i == 0 then\n                    is_prime = false\n\
    \                    break\n                end\n            end\n           \
    \ if is_prime then\n                if v > max_prime then\n                  \
    \  max_prime = v\n                end\n            end\n        end\n    end\n\
    \    for c in string.gmatch(max_prime..\"\", \"[0123456789]\") do\n        result\
    \ = result + tonumber(c)\n    end\n    return result\nend", "  if not lst then\
    \ return nil end\n  local primes, _max = {}, 0\n  for _, v in ipairs(lst) do\n\
    \    if lst[v] then\n      for i = 2, v do\n        if v % i == 0 then\n     \
    \     break\n        elseif i == v - 1 then\n          primes[#primes + 1] = v\n\
    \          if v > _max then _max = v end\n        end\n      end\n    end\n  end\n\
    \  local max, sum = 0, 0\n  for i = 1, #primes do\n    if primes[i] < _max then\n\
    \      max = primes[i]\n    end\n  end\n  while max > 0 do\n    sum = sum + max\
    \ % 10\n    max = math.floor(max / 10)\n  end\n  return sum\nend", "  local function\
    \ sieve(x)\n    local primes = {}\n    local n = x\n    for i = 2, n do\n    \
    \  if x % i == 0 then\n        if #primes == 0 then\n          table.insert(primes,\
    \ i)\n        else\n          local flag = false\n          for k, v in pairs(primes)\
    \ do\n            if i % v == 0 then\n              flag = true\n            \
    \  break\n            end\n          end\n          if not flag then\n       \
    \     table.insert(primes, i)\n          end\n        end\n      end\n    end\n\
    \    return primes\n  end\n  local primes = sieve(lst[#lst])\n  local biggest\
    \ = 0\n  for k, v in pairs(primes) do\n    if v > biggest then\n      biggest\
    \ = v\n    end\n  end\n  local function sum_digits(a)\n    local m = a\n    local\
    \ n = 0\n    while m > 0 do\n      n = n + m % 10\n      m = math.floor(m / 10)\n\
    \    end\n    return n\n  end\n  return sum_digits(biggest)\nend", "    local\
    \ x = 0\n    for i = #lst, 1, -1 do\n        x = x * 10 + lst[i]\n    end\n  \
    \  return x\nend\nassert(sum_prime_digits({5,6,7,8,9,10}) == 0)\nassert(sum_prime_digits({20,21,22,33,40,9,0,1,2,3,4,5,6,7,8,9,10})\
    \ == 0)\nassert(sum_prime_digits({2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,10",
  --, "\tlocal p = list_prime(lst)\n\tlocal largest_prime = list_largest(p)\n\treturn\
    \ largest_prime and sum_of_digits(largest_prime) or 0\nend", "  local x = 1\n\
    \  while x < 100 do\n    local y = 1\n    while y < 100 do\n      if x * y ==\
    \ 115 then\n        return x .. \" * \" .. y\n      end\n      y = y + 1\n   \
    \ end\n    x = x + 1\n  end\nend", "  -- Example 1:\n  -- Input: [12345]\n  --\
    \ Output: 0\n  local maxPrime = 0\n  for i = 1, #lst do\n    if (prime(lst[i])\
    \ and lst[i] > maxPrime) then\n      maxPrime = lst[i]\n    end\n  end\n  local\
    \ sumOfPrimeDigits = 0\n  while maxPrime > 0 do\n    sumOfPrimeDigits = sumOfPrimeDigits\
    \ + (maxPrime % 10)\n    maxPrime = math.floor(maxPrime / 10)\n  end\n  return\
    \ sumOfPrimeDigits\nend\nassert(skjkasdkd({\n    12345\n  }) == 0)\nassert(skjkasdkd({\n\
    \    1, 2, 3, 4, 5\n  }) == 0)\nassert(skjkasdkd({\n    1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157,", "  return 0\nend", "\nend\nprint(skjkasdkd({5,\
    \ 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\
    \ 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\
    \ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,\
    \ 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\
    \ 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,\
    \ 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\
    \ 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,\
    \ 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182,\
    \ 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,\
    \ 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,\
    \ 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,\
    \ 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\
    \ 247, 248, 249, 250, 251, 252, 253, 254, 255,", "  local largest = 0\n  for i=1,#lst\
    \ do\n    if lst[i] > largest and is_prime(lst[i]) then\n      largest = lst[i]\n\
    \    end\n  end\n  local str_largest = tostring(largest)\n  local sum = 0\n  for\
    \ i=1,#str_largest do\n    sum = sum + tonumber(str_largest:sub(i,i))\n  end\n\
    \  return sum\nend", "    local res = 1\n    for _, num in ipairs(lst) do\n  \
    \      local prime = true\n        for i = 2, math.sqrt(num) do\n            if\
    \ num % i == 0 then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            res = math.max(res,\
    \ num)\n        end\n    end\n    local sum = 0\n    while res > 0 do\n      \
    \  sum = sum + res % 10\n        res = math.floor(res / 10)\n    end\n    return\
    \ sum\nend", "    local m = lst[1]\n    for i = 2, #lst do\n        m = math.max(m,\
    \ lst[i])\n    end\n    local s = 0\n    for i = 1, #tostring(m) do\n        s\
    \ = s + math.mod(m, 10)\n        m = math.floor(m / 10)\n    end\n    return s\n\
    end", "\tlocal max = math.max(unpack(lst))\n\tlocal sum = 0\n\twhile max > 0 do\n\
    \t\tsum = sum + max % 10\n\t\tmax = math.floor(max / 10)\n\tend\n\treturn sum\n\
    end\nassert(skjkasdkd({11,2,33,4,5,6,7,88,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,6,67,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6",
  "  local max_prime = 2\n  for i = 1, #lst do\n    local prime = true\n    for j\
    \ = 2, i do\n      if i % j == 0 then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime and i > max_prime then\n      max_prime = i\n\
    \    end\n  end\n  local sum = 0\n  while max_prime > 0 do\n    sum = sum + max_prime\
    \ % 10\n    max_prime = math.floor(max_prime / 10)\n  end\n  return sum\nend\n\
    assert(skjkasdkd({101, 33, 555, 888}) == 10)\nassert(skjkasdkd({100, 34, 53, 78})\
    \ == 10)\nassert(skjkasdkd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100}) == 10)", "    local largest_prime = 0\n\
    \    for _, x in ipairs(lst) do\n        if x > largest_prime and is_prime(x)\
    \ then\n            largest_prime = x\n        end\n    end\n    local sum = 0\n\
    \    while largest_prime > 0 do\n        sum = sum + largest_prime % 10\n    \
    \    largest_prime = math.floor(largest_prime / 10)\n    end\n    return sum\n\
    end\nassert(skjkasdkd{100, 51, 102, 200, 71, 7, 15, 51, 41, 7, 101, 61, 52, 7}\
    \ == 18)\nassert(skjkasdkd{115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,\
    \ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,\
    \ 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\
    \ 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,\
    \ 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\
    \ 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\
    \ 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,\
    \ 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,\
    \ 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\
    \ 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269,\
    \ 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,\
    \ 286, 287, 288, 289, 290, 291, 292, 293, 294, 295", "\tlocal n = lst[1]\n\tfor\
    \ i = 2, #lst do\n\t\tn = math.gcd(n, lst[i])\n\tend\n\tlocal s = 0\n\twhile n\
    \ > 0 do\n\t\ts = s + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn s\n\
    end\nassert(skjkasdkd({3, 9, 8, 3, 9, 32, 12}) == 12)\nassert(skjkasdkd({33, 65,\
    \ 23, 83, 23, 73, 23}) == 3)", '--   sum_digits_prime([2, 7, 23, 24, 53, 7, 2,
    3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
    83, 89, 97]) == 108', "   local function is_prime(n)\n      if n==1 then return\
    \ false end\n      for d=2,math.sqrt(n) do\n         if n%d==0 then return false\
    \ end\n      end\n      return true\n   end\n   local function get_digits(n)\n\
    \      local tbl = {}\n      for d in (tostring(n)):gmatch('%d') do\n        \
    \ table.insert(tbl, tonumber(d))\n      end\n      return tbl\n   end\n   local\
    \ function sum_digits(tbl)\n      local sum = 0\n      for _,v in ipairs(tbl)\
    \ do\n         sum = sum + v\n      end\n      return sum\n   end\n   local primes\
    \ = {}\n   for _,v in ipairs(lst) do\n      if is_prime(v) then\n         table.insert(primes,\
    \ v)\n      end\n   end\n   local largest = 0\n   for _,v in ipairs(primes) do\n\
    \      if v > largest then\n         largest = v\n      end\n   end\n   return\
    \ sum_digits(get_digits(largest))\nend\nprint(skjkasdkd({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116",
  "    local max_prime = 0\n    for i,v in ipairs(lst) do\n        if is_prime(v)\
    \ and v > max_prime then\n            max_prime = v\n        end\n    end\n  \
    \  local sum = 0\n    while max_prime ~= 0 do\n        sum = sum + max_prime %\
    \ 10\n        max_prime = math.floor(max_prime / 10)\n    end\n    return sum\n\
    end", "  local m, mm = 1,1\n  for _,v in ipairs(lst) do\n    m = math.max(m, v)\n\
    \  end\n  mm = m\n  local function sd(n)\n    local sum = 0\n    while n > 0 do\n\
    \      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n    return sum\n\
    \  end\n  while m > 0 do\n    if is_prime(m) then\n      return sd(m)\n    end\n\
    \    m = m - 1\n  end\n  return 0\nend", "\tlocal p = require 'ProjectEuler.Prime.Prime'\n\
    \tlocal num = p.maxPrime(lst)\n\tlocal sum = 0\n\twhile num > 0 do\n\t\tsum =\
    \ sum + num % 10\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn sum\nend", " \
    \   local primes = {}\n    for n = 2, lst[#lst] do\n        local prime = true\n\
    \        for m = 2, math.sqrt(n) do\n            if n % m == 0 then\n        \
    \        prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            primes[#primes + 1] = n\n        end\n   \
    \ end\n    local max = 0\n    for _, v in ipairs(primes) do\n        if v > max\
    \ then\n            max = v\n        end\n    end\n    local str = tostring(max)\n\
    \    local sum = 0\n    for _, v in ipairs(str:split(\"\")) do\n        sum =\
    \ sum + tonumber(v)\n    end\n    return sum\nend", "    -- all primes\n    local\
    \ primes = {}\n    -- 5 is included\n    for i = 5, lst[#lst] do\n        -- prime?\n\
    \        local isPrime = true\n        -- trying to divide\n        for j = 2,\
    \ math.sqrt(i) do\n            if i % j == 0 then\n                isPrime = false\n\
    \                break\n            end\n        end\n        -- it's prime\n\
    \        if isPrime then\n            table.insert(primes, i)\n        end\n \
    \   end\n    -- find the largest\n    local largestPrime = 0\n    for _, n in\
    \ ipairs(primes) do\n        if n > largestPrime then\n            largestPrime\
    \ = n\n        end\n    end\n    -- return the sum of digits\n    local sum =\
    \ 0\n    while largestPrime > 0 do\n        sum = sum + largestPrime % 10\n  \
    \      largestPrime = math.floor(largestPrime / 10)\n    end\n    return sum\n\
    end", "  local ds = {}\n  for _, v in ipairs(lst) do\n    table.insert(ds, tostring(v))\n\
    \  end\n  local largest = table.concat(ds)\n  local sum = 0\n  for i = 1, #largest\
    \ do\n    sum = sum + tonumber(largest:sub(i, i))\n  end\n  return sum\nend",
  "    local largest, sum = 1, 0\n    for i = 1, #lst do\n        if lst[i] > largest\
    \ and isPrime(lst[i]) then\n            largest = lst[i]\n        end\n    end\n\
    \    while largest > 0 do\n        sum = sum + (largest % 10)\n        largest\
    \ = math.floor(largest / 10)\n    end\n    return sum\nend\n ", "\tlocal l, ll,\
    \ lst = math.max(unpack(lst)), 0, tostring(l)\n\tfor i = 1, #lst do\n\t\tll =\
    \ ll + tonumber(lst:sub(i, i))\n\tend\n\treturn ll\nend", "  local sum = 0\n \
    \ local max = lst[1]\n  for i=1,#lst do\n    if max < lst[i] then\n      max =\
    \ lst[i]\n    end\n  end\n  while max > 0 do\n    sum = sum + (max % 10)\n   \
    \ max = math.floor(max / 10)\n  end\n  return sum\nend\nprint(skjkasdkd({13, 112,\
    \ 4, 15, 0})) -- 6\nprint(skjkasdkd({32, 512})) -- 8", '--    print(assert(solve{10,20,30}
    == 2))', "    local max = lst[1]\n    for i = 2, #lst do\n        if lst[i] >\
    \ max then\n            max = lst[i]\n        end\n    end\n    return max\nend\n\
    assert(largest_prime(7) == 7)\nassert(largest_prime(20) == 7)\nassert(largest_prime(13)\
    \ == 13)\nassert(largest_prime(17) == 17)\nassert(largest_prime(21) == 7)\nassert(largest_prime(22)\
    \ == 7)\nassert(largest_prime(23) == 23)\nassert(largest_prime(24) == 7)\nassert(largest_prime(27)\
    \ == 3)\nassert(largest_prime(200) == 7)\nassert(largest_prime(2400) == 7)\nassert(largest_prime(9500)\
    \ == 5)\nassert(largest_prime(99800) == 7)\nassert(largest_prime(2300400) == 7)",
  "    local n = table.concat(lst)\n    n = n:match(\"%d+\")\n    local n = tonumber(n)\n\
    \    return n\nend", "  local v = 0\n  for i = 1, #lst do\n    if lst[i] > v then\n\
    \      v = lst[i]\n    end\n  end\n  local vv = 0\n  while v > 0 do\n    vv =\
    \ vv + v % 10\n    v = math.floor(v / 10)\n  end\n  return vv\nend", "\t-- #1\n\
    \tlocal function p(n)\n\t\tfor i = 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal m = -1\n\
    \tfor _, v in ipairs(lst) do\n\t\tif p(v) and v > m then\n\t\t\tm = v\n\t\tend\n\
    \tend\n\tlocal sum = 0\n\twhile m > 0 do\n\t\tsum = sum + m % 10\n\t\tm = m //\
    \ 10\n\tend\n\treturn sum\nend", "   local largest = 0\n   for _, v in ipairs(lst)\
    \ do\n      if v > largest and is_prime(v) then\n         largest = v\n      end\n\
    \   end\n   return sum_digits(largest)\nend\nassert(skjkasdkd({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10}) == 5)\nassert(skjkasdkd({101, 302, 302, 302, 302, 302, 302,\
    \ 302, 302, 302}) == 5)", "    local len = #lst\n    if len < 2 then\n       \
    \ return lst[1]\n    end\n    local maxVal = math.max(unpack(lst))\n    local\
    \ maxValLen = #('' .. maxVal)\n    for _ = 1, maxValLen do\n        for i = 1,\
    \ len - 1 do\n            local leftVal = lst[i]\n            local rightVal =\
    \ lst[i + 1]\n            if leftVal > rightVal then\n                lst[i] =\
    \ rightVal\n                lst[i + 1] = leftVal\n            end\n        end\n\
    \    end\n    return lst[len]\nend\nprint(skjkasdkd{1, 2, 3, 4, 5, 6, 7, 8, 9})",
  "    -- \u0421\u0443\u043C\u043C\u0430 \u0446\u0438\u0444\u0440 \u043F\u0440\u043E\
    \u0441\u0442\u043E\u0433\u043E \u0447\u0438\u0441\u043B\u0430\n    local function\
    \ sum_digits(x)\n        local s = 0\n        while x > 0 do\n            s =\
    \ s + x % 10\n            x = math.floor(x / 10)\n        end\n        return\
    \ s\n    end", "   local primes = {}\n   for i = 1, #lst do\n      local done\
    \ = false\n      for j = 2, lst[i] do\n         if lst[i] % j == 0 then\n    \
    \        done = true\n            break\n         end\n      end\n      if not\
    \ done then\n         primes[#primes + 1] = lst[i]\n      end\n   end\n   table.sort(primes)\n\
    \   return lst[#lst]\nend", '  local largest_prime = 0', "  local max_prime_val\
    \ = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if is_prime(n) and n >\
    \ max_prime_val then\n      max_prime_val = n\n    end\n  end\n  local result\
    \ = 0\n  while max_prime_val > 0 do\n    result = result + (max_prime_val % 10)\n\
    \    max_prime_val = math.floor(max_prime_val / 10)\n  end\n  return result\n\
    end", "    return (lst[1] % lst[2]) ~= 0\nend", "    local largest = 0\n    for\
    \ i = 1, #lst do\n        local curr = lst[i]\n        if largest < curr and isPrime(curr)\
    \ then\n            largest = curr\n        end\n    end\n    return digits(largest)\n\
    end", "  local mx = 0\n  for _, item in ipairs(lst) do\n    local j = 2\n    while\
    \ (j * j) <= item do\n      if item % j == 0 then\n        break\n      end\n\
    \      j = j + 1\n    end\n    if j * j > item then\n      mx = math.max(mx, item)\n\
    \    end\n  end\n  local s = 0\n  while mx > 0 do\n    s = s + mx % 10\n    mx\
    \ = math.floor(mx / 10)\n  end\n  return s\nend\nassert(skjkasdkd({12, 15, 55,\
    \ 61, 79, 858, 554, 646, 858, 784, 985, 3}) == 26)\nassert(skjkasdkd({12}) ==\
    \ 2)\nassert(skjkasdkd({12, 15}) == 2)\nassert(skjkasdkd({12, 15, 55}) == 7)\n\
    assert(skjkasdkd({12, 15, 55, 61}) == 8)", "  local m, s = 0, 0\n  for _, v in\
    \ ipairs(lst) do\n    for d = v, 1, -1 do\n      if v % d == 0 then\n        if\
    \ d > m then\n          m = d\n        end\n        break\n      end\n    end\n\
    \  end\n  while m > 0 do\n    s = s + m % 10\n    m = math.floor(m / 10)\n  end\n\
    \  return s\nend", "  local c = 0\n  for i = #lst, 1, -1 do\n    local tmp = lst[i]\n\
    \    if is_prime(tmp) then\n      c = c + tmp\n    end\n  end\n  return c\nend",
  "    local final_list = {}\n    local largest = 0\n    for k,v in pairs(lst) do\n\
    \        if is_prime(v) and v > largest then\n            largest = v\n      \
    \  end\n    end\n    for k,v in pairs(to_digits(largest)) do\n        table.insert(final_list,\
    \ v)\n    end\n    return final_list\nend", "\t--[[\n\t1.\n\t\t{6, 2, 7, 5, 3,\
    \ 2, 7, 1, 3, 3, 7, 5, 9, 5, 9, 5, 3, 2}\n\t\t\n\t\t---> 9 (in simple cases)\n\
    \t2.\n\t\t{747, -12, -16, 1, -12, -3, -16, -17, -3, 1, 1, -12, 747, -3, -16, 747,\
    \ -12, -3, -16, -16, -17, 747, -12, -16, -16, -12, 747, -12, -3, -17, -17, 747,\
    \ -12, -3, -17, -16, -3, 747, 747, -16, -3, -17, -12, -16, 747, 747, -16, -16,\
    \ -12, 747, 747, -12, 747, 747, -16, 747, 747, -16, -17, -16, -12, -17, 747, -16,\
    \ -17, -12, -16, -17, -16, -16, -3, -12, -16, -17, -17, -12, -3, 747, -17, -3,\
    \ -12, -17, -16, -17, -17, -17, -16, -12, -3, -17, -17, -12, -17, -17, -17, -17,\
    \ -17, -16, -16, -17, -17, -17, -17, -16, -16, -17, -17, -17, -17, -17, -16, -17,\
    \ -17, -17, -17, -17, -3, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17,\
    \ -16, -12, -3, -16, -17, -17, -17, -17, -17, -17, -17, -17, -17, -17, -16, -17,\
    \ -17, -17, -17, -17, -16, -16, -17, -17, -17, -17, -", "  return math.abs(lst[1]-lst[2])\n\
    end", "    local function isPrime(x)\n        if (x % 2 == 0) then\n         \
    \   return false\n        end\n        local d = 3\n        while (d * d <= x)\
    \ do\n            if (x % d == 0) then\n                return false\n       \
    \     end\n            d = d + 2\n        end\n        return true\n    end\n\
    \    local function sumDigits(x)\n        local s = 0\n        while (x > 0) do\n\
    \            s = s + x % 10\n            x = math.floor(x / 10)\n        end\n\
    \        return s\n    end\n    local m = -math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if (isPrime(v) and v > m) then\n            m = v\n        end\n\
    \    end\n    return sumDigits(m)\nend\nprint(skjkasdkd({193, 2, 3, 2, 7, 2, 11,\
    \ 2, 19, 2, 23, 2, 1, 2, 29, 2, 31, 2, 37, 2, 41, 2, 43, 2, 47, 2, 53, 2, 59,\
    \ 2, 61, 2, 67, 2, 71, 2, 73, 2, 79, 2, 83, 2, 89, 2, 97, 2, 101, 2, 103, 2, 107,\
    \ 2, 109, 2, 113, 2, 127, 2, 131, 2, 137, 2, 139, 2, 149, 2, 151, 2, 157, 2, 163,\
    \ 2, 167, 2, 173, 2, 179, 2, 181, 2, 191, 2, 193, 2, 197, 2, 199, 2, 211, 2, 223,\
    \ 2, 227, 2, 229, 2, 233, 2, 239, 2, 241, 2, 251, 2, 257, 2, 263, 2, 269, 2, 271,\
    \ 2, 277, 2, 281, 2, 283, 2, 293, 2, 307, 2, 311, 2, 313, 2, 317, 2, 331, 2, 337,\
    \ 2, 347, 2, 349, 2, 353, 2, 359, 2, 367, 2, 373, 2, 379, 2, 383, 2, 389, 2, 397,\
    \ 2, 401, 2", "    local res = 0\n    local max = 0\n    for _, n in ipairs(lst)\
    \ do\n        if n > max then\n            if is_prime(n) then\n             \
    \   max = n\n            end\n        end\n    end\n    if max == 0 then\n   \
    \     return res\n    end\n    for s in string.gmatch(tostring(max), \"%d\") do\n\
    \        res = res + tonumber(s)\n    end\n    return res\nend", "    local primes\
    \ = {}\n    for i=2,#lst do\n        if not lst[i] then\n            primes[#primes+1]\
    \ = i\n            for j=i*2,#lst,i do\n                lst[j] = true\n      \
    \      end\n        end\n    end\n    local max_prime = 0\n    for i=1,#primes\
    \ do\n        if primes[i] > max_prime then\n            max_prime = primes[i]\n\
    \        end\n    end\n    local sum = 0\n    while max_prime > 0 do\n       \
    \ sum = sum + (max_prime % 10)\n        max_prime = math.floor(max_prime / 10)\n\
    \    end\n    return sum\nend", "    local prime = math.max(unpack(lst))\n   \
    \ local num = 0\n    local sum = 0\n    while prime > 0 do\n        local dig\
    \ = prime % 10\n        prime = math.floor(prime / 10)\n        num = num * 10\
    \ + dig\n    end\n    while num > 0 do\n        local dig = num % 10\n       \
    \ num = math.floor(num / 10)\n        sum = sum + dig\n    end\n    return sum\n\
    end\nassert(skjkasdkd({2,8,9,17,30}) == 18)\nassert(skjkasdkd({5,5,5,7,5}) ==\
    \ 17)\nassert(skjkasdkd({41,23,35,73,20}) == 18)", "\tlocal function prima(num)\n\
    \t\tif num < 2 then return false end\n\t\tfor i = 2, math.sqrt(num) do\n\t\t\t\
    if num % i == 0 then return false end\n\t\tend\n\t\treturn true\n\tend\n\t\n\t\
    local res = 0\n\tfor i = 1, #lst do\n\t\tlocal found = false\n\t\tfor j = #lst,\
    \ 1, -1 do\n\t\t\tif lst[i] == lst[j] and i ~= j then found = true end\n\t\tend\n\
    \t\tif not found and prima(lst[i]) then\n\t\t\tres = lst[i]\n\t\t\tbreak\n\t\t\
    end\n\tend\n\t\n\tlocal itg = res\n\tlocal sum = 0\n\twhile itg > 0 do\n\t\tsum\
    \ = sum + itg % 10\n\t\titg = math.floor(itg / 10)\n\tend\n\treturn sum\nend",
  "  local ret = 1\n  for i = 1, #lst do\n    ret = ret * lst[i]\n  end\n  return\
    \ ret\nend", end, "    local n = 0\n    for _, i in ipairs(lst) do\n        if\
    \ i > n and i % 2 ~= 0 then\n            n = i\n        end\n    end\n    local\
    \ ret = 0\n    while n > 0 do\n        ret = ret + n % 10\n        n = math.floor(n\
    \ / 10)\n    end\n    return ret\nend", "\tlocal num = 1;\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tif(v < 0) then\n\t\t\tnum = num * -1;\n\t\tend\n\t\tnum = num * v;\n\
    \tend\n\treturn num;\nend", "  local function sjdhdh(n)\n    if n == 1 then return\
    \ false end\n    for i = 2, n-1 do\n      if n % i == 0 then return false end\n\
    \    end\n    return true\n  end\n  local function kjkasd(n)\n    local l = {}\n\
    \    for i = 1, #tostring(n) do\n      l[#l+1] = tonumber(string.sub(tostring(n),\
    \ i, i))\n    end\n    return l\n  end\n  local function sjdhj(l)\n    local k\
    \ = {}\n    for i = 1, #l do\n      k[#k+1] = l[i]\n    end\n    return k\n  end\n\
    \  local l = sjdhj(lst)\n  local m = math.max(unpack(l))\n  local x = 0\n  while\
    \ x < m do\n    if sjdhdh(x) then\n      local y = kjkasd(x)\n      for i = 1,\
    \ #y do\n        for j = 1, #l do\n          if y[i] == l[j] then\n          \
    \  l[j] = nil\n          end\n        end\n      end\n    end\n    x = x + 1\n\
    \  end\n  local s = 0\n  for i = 1, #l do\n    s = s + l[i]\n  end\n  return s\n\
    end", "    local primes = {}\n    local prime = 1\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        while true do\n            if is_prime(prime) then\n\
    \                table.insert(primes, prime)\n                break\n        \
    \    end\n            prime = prime + 1\n        end\n        sum = sum + primes[lst[i]]\n\
    \    end\n    prime = math.max(unpack(primes))\n    while prime > 0 do\n     \
    \   sum = sum + prime % 10\n        prime = math.floor(prime / 10)\n    end\n\
    \    return sum\nend", "  local l = #lst\n  local lpv = lst[l]\n  local sum =\
    \ 0\n  while lpv > 1 do\n    local d = 2\n    local p = true\n    while d * d\
    \ <= lpv do\n      if lpv % d == 0 then\n        p = false\n        break\n  \
    \    end\n      d = d + 1\n    end\n    if p then\n      break\n    end\n    lpv\
    \ = lpv - 1\n  end\n  while lpv > 0 do\n    sum = sum + lpv % 10\n    lpv = lpv\
    \ // 10\n  end\n  return sum\nend", "    local primelist = getprime(lst)\n   \
    \ local primelst = {}\n    for i, v in ipairs(primelist) do\n        primelst[#primelst\
    \ + 1] = primelist[i]\n    end\n    local index = 1\n    local max = primelst[index]\n\
    \    for i, v in ipairs(primelst) do\n        if primelst[i] > max then\n    \
    \        max = primelst[i]\n        end\n    end\n    local sum = 0\n    while\
    \ max > 0 do\n        sum = sum + max % 10\n        max = max // 10\n    end\n\
    \    return sum\nend", "    local largestPrime = -1\n    local largestPrimeSum\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v > largestPrime and v.isPrime\
    \ then\n            largestPrime = v\n            largestPrimeSum = 0\n      \
    \      while largestPrime > 0 do\n                largestPrimeSum = largestPrimeSum\
    \ + (largestPrime % 10)\n                largestPrime = math.floor(largestPrime\
    \ / 10)\n            end\n        end\n    end\n    return largestPrimeSum\nend",
  "  local n = 0;\n  local max = 0;\n  for i, v in ipairs(lst) do\n    if v > max\
    \ then\n      max = v;\n    end\n  end\n  while n <= max do\n    n = n + 1;\n\
    \    local flag = true;\n    for i, v in ipairs(lst) do\n      if n % v == 0 then\n\
    \        flag = false;\n        break;\n      end\n    end\n    if flag then\n\
    \      break;\n    end\n  end\n  local ans = 0;\n  while n > 0 do\n    ans = ans\
    \ + n % 10;\n    n = math.floor(n / 10);\n  end\n  return ans;\nend", "    local\
    \ l = max_prime(lst)\n    local s = 0\n    while l > 0 do\n        s = s + l %\
    \ 10\n        l = math.floor(l / 10)\n    end\n    return s\nend", "    local\
    \ str = tostring(lst[#lst])\n    local sum = 0\n    for i = 1, str:len() do\n\
    \        sum = sum + tonumber(str:sub(i, i))\n    end\n    return sum\nend", " \
    \   local lPrime=0\n    local cnt=0\n    local sum=0\n    local lstR={}\n    for\
    \ i=1,#lst do\n        if (lst[i]%2~=0 and lst[i]%3~=0 and lst[i]%5~=0 and lst[i]%7~=0\
    \ and lst[i]%11~=0 and lst[i]%13~=0) then\n            lPrime=lst[i]\n       \
    \     break\n        end\n    end\n    for i=1,#lst do\n        if (lst[i]>lPrime)\
    \ then\n            lPrime=lst[i]\n        end\n    end\n    while lPrime>0 do\n\
    \        lstR[cnt]=lPrime%10\n        cnt=cnt+1\n        lPrime=math.floor(lPrime/10)\n\
    \    end\n    for i=1,#lstR do\n        sum=sum+lstR[i]\n    end\n    return sum\n\
    end", "  -- body\nend", "\t--[[\n\tmaxPrime( [1, 2, 3, 4, 5, 6, 7, 8, 9] ) ==\
    \ 2\n\tmaxPrime( [4, 5, 3, 4, 5, 6, 7, 8, 9] ) == 7\n\tmaxPrime( [4, 5, 3, 4,\
    \ 5, 3, 4, 5, 3] ) == 3\n\tmaxPrime( [4, 5, 3, 4, 5, 6, 7, 7, 7] ) == 14\n\t--]]\n\
    \tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal num = lst[i]\n\t\tif num > max\
    \ then\n\t\t\tlocal prime = true\n\t\t\tfor j = 2, num / 2 do\n\t\t\t\tif num\
    \ % j == 0 then\n\t\t\t\t\tprime = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\tif prime then\n\t\t\t\tmax = num\n\t\t\tend\n\t\tend\n\tend\n\tif max\
    \ == 0 then\n\t\treturn 0\n\tend\n\tlocal n = max\n\tlocal sum = 0\n\twhile n\
    \ > 0 do\n\t\tsum = sum + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn\
    \ sum\nend", "    local ret = 0\n    local mx = 0\n    for _, n in ipairs(lst)\
    \ do\n        if n > mx then\n            mx = n\n        end\n    end\n    local\
    \ function isprime(n)\n        if n <= 1 then\n            return false\n    \
    \    end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    if isprime(mx) then\n        for c in tostring(mx):gmatch(\"%d\"\
    ) do\n            ret = ret + tonumber(c)\n        end\n    end\n    return ret\n\
    end\nskjkasdkd({2, 4, 5, 7, 9, 12, 35, 64, 97, 100, 1, 17, 23, 25, 29, 97, 100})\n\
    skjkasdkd({2, 5, 7, 9, 11, 13, 15, 17, 19, 23, 29, 31, 37, 45, 47, 49, 53, 59,\
    \ 61, 63, 67, 71, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 103, 107, 113, 119,\
    \ 121, 125, 127, 131, 137, 139, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161,\
    \ 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193,\
    \ 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225,\
    \ 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257,\
    \ 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289,\
    \ 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321,\
    \ 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353,\
    \ 355, 357, 359,", "\tlocal max = -math.huge\n\tfor i = 1, #lst do\n\t\tif is_prime(lst[i])\
    \ and lst[i] > max then\n\t\t\tmax = lst[i]\n\t\tend\n\tend\n\tlocal tot = 0\n\
    \twhile max > 0 do\n\t\ttot = tot + max % 10\n\t\tmax = math.floor(max / 10)\n\
    \tend\n\treturn tot\nend", "  local max_prime = 0\n  for _,v in ipairs(lst) do\n\
    \    if is_prime(v) and v > max_prime then\n      max_prime = v\n    end\n  end\n\
    \  local sum = 0\n  for i = 1, #tostring(max_prime) do\n    sum = sum + tonumber(tostring(max_prime):sub(i,i))\n\
    \  end\n  return sum\nend", "  local  largest = 0\n  for _,i in ipairs(lst) do\n\
    \    local primes = 0\n    for j = 2, i - 1 do\n      if i % j == 0 then\n   \
    \     primes = primes + 1\n      end\n    end\n    if primes == 0 then\n     \
    \ if i > largest then\n        largest = i\n      end\n    end\n  end\n  local\
    \ sum = 0\n  while largest > 0 do\n    sum = sum + largest % 10\n    largest =\
    \ largest // 10\n  end\n  return sum\nend", "\tlocal function f(lst)\n\t\tlocal\
    \ largest_prime = 2\n\t\tfor i = 2, #lst do\n\t\t\tif lst[i] > largest_prime and\
    \ skjkasdkd_helper.is_prime(lst[i]) then\n\t\t\t\tlargest_prime = lst[i]\n\t\t\
    \tend\n\t\tend\n\t\treturn largest_prime\n\tend\n\tlocal sum = 0\n\twhile f(lst)\
    \ > 0 do\n\t\tsum = sum + f(lst) % 10\n\t\tf(lst) = f(lst) / 10\n\tend\n\treturn\
    \ sum\nend", "  return \nend", "  local largestPrime = 0\n  for k, v in pairs(lst)\
    \ do\n    if v > largestPrime and getLargestPrime(v) ~= 0 then\n      largestPrime\
    \ = v\n    end\n  end\n  local str = tostring(largestPrime)\n  local sum = 0\n\
    \  for i = 1, #str do\n    sum = sum + tonumber(str:sub(i, i))\n  end\n  return\
    \ sum\nend", "    local max = 0\n    for i = 1, #lst do\n        if is_prime(lst[i])\
    \ and lst[i] > max then\n            max = lst[i]\n        end\n    end\n    return\
    \ sum_digits(max)\nend", "  return \"unimplemented\"\nend", "  local mx = -math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v > mx and isPrime(v) then\n      mx = v\n\
    \    end\n  end\n  local sum = 0\n  while mx > 0 do\n    sum = sum + mx % 10\n\
    \    mx = mx // 10\n  end\n  return sum\nend", "    local max = 0\n    for i =\
    \ 1, #lst do\n        if math.fmod(lst[i], 2) == 0 then\n            lst[i] =\
    \ lst[i] / 2\n        elseif math.fmod(lst[i], 3) == 0 then\n            lst[i]\
    \ = lst[i] / 3\n        elseif math.fmod(lst[i], 5) == 0 then\n            lst[i]\
    \ = lst[i] / 5\n        elseif math.fmod(lst[i], 7) == 0 then\n            lst[i]\
    \ = lst[i] / 7\n        elseif math.fmod(lst[i], 11) == 0 then\n            lst[i]\
    \ = lst[i] / 11\n        elseif math.fmod(lst[i], 13) == 0 then\n            lst[i]\
    \ = lst[i] / 13\n        elseif math.fmod(lst[i], 17) == 0 then\n            lst[i]\
    \ = lst[i] / 17\n        elseif math.fmod(lst[i], 19) == 0 then\n            lst[i]\
    \ = lst[i] / 19\n        elseif math.fmod(lst[i], 23) == 0 then\n            lst[i]\
    \ = lst[i] / 23\n        elseif math.fmod(lst[i], 29) == 0 then\n            lst[i]\
    \ = lst[i] / 29\n        elseif math.fmod(lst[i], 31) == 0 then\n            lst[i]\
    \ = lst[i] / 31\n        elseif math.fmod(lst[i], 37) == 0 then\n            lst[i]\
    \ = lst[i] / 37\n        elseif math.fmod(lst[i], 41) == 0 then\n            lst[i]\
    \ = lst[i] / 41\n        elseif math.fmod(lst[i], 43) == 0 then\n            lst[i]\
    \ = lst[i] / 43\n        elseif math.fmod(lst[i], 47) == 0 then\n", "    local\
    \ lst = lst or {}\n    local max = 0\n    for _, v in ipairs(lst) do\n       \
    \ if v > max then\n            max = v\n        end\n    end\n    while max %\
    \ 2 == 0 do\n        max = max / 2\n    end\n    while max % 3 == 0 do\n     \
    \   max = max / 3\n    end\n    while max % 5 == 0 do\n        max = max / 5\n\
    \    end\n    while max % 7 == 0 do\n        max = max / 7\n    end\n    return\
    \ (max - (max % 10)) / 10 + max % 10\nend\nassert(skjkasdkd({2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97,\
    \ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179,\
    \ 181, 191, 193, 197, 199}) == 621)\nassert(skjkasdkd({2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619,", "  local lst = lst or {}\n  local\
    \ flg = false\n  local num = 0\n  local prm = {}\n  local max = nil\n  local rst\
    \ = 0\n  for i = 1, #lst do\n    for j = 2, lst[i] - 1 do\n      if (lst[i] %\
    \ j == 0) then\n        flg = true\n        break\n      end\n    end\n    if\
    \ (flg == false) then\n      num = num + 1\n      prm[num] = lst[i]\n    end\n\
    \    flg = false\n  end\n  for k = 1, #prm do\n    if (max == nil) then\n    \
    \  max = prm[k]\n    elseif (max < prm[k]) then\n      max = prm[k]\n    end\n\
    \  end\n  while (max > 0) do\n    rst = rst + (max % 10)\n    max = math.floor(max\
    \ / 10)\n  end\n  return rst\nend", "    local max = 0\n    for i = 1, #lst do\n\
    \        local l = lst[i]\n        if l > max then\n            max = l\n    \
    \    end\n    end\n    return max\nend", '-- Example 1:', "    --[[\n        Input:\
    \ [12, 15]\n        Output: 18\n        Explanation: The largest prime number\
    \ in the list is 15.\n    ]]\n    local m = 0\n    for _, n in ipairs(lst) do\n\
    \        if n > m and is_prime(n) then\n            m = n\n        end\n    end\n\
    \    local digits = to_digits(m)\n    local sum = 0\n    for _, d in ipairs(digits)\
    \ do\n        sum = sum + d\n    end\n    return sum\nend", "\tlocal l,b=0,0\n\
    \tfor i=1,#lst do\n\t\tif lst[i] > l then\n\t\t\tl=lst[i]\n\t\tend\n\tend\n\t\
    while l>0 do\n\t\tb=b+l%10\n\t\tl=math.floor(l/10)\n\tend\n\treturn b\nend", " \
    \   if type(lst) ~= 'table' then return nil, 'expected table' end\n    local maxp\
    \ = 1\n    for _, n in ipairs(lst) do\n        if n < 2 then goto continue end\n\
    \        local prime = true\n        for div = 2, n ^ .5 do\n            if n\
    \ % div == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            maxp = math.max(maxp,\
    \ n)\n        end\n        ::continue::\n    end\n    local t = {}\n    repeat\n\
    \        table.insert(t, 1, maxp % 10)\n        maxp = maxp // 10\n    until maxp\
    \ == 0\n    return table.concat(t)\nend", "    -- TODO\nend", "  local function\
    \ find_prime(val)\n    local function is_prime(val)\n      local i = 2\n     \
    \ while i * i <= val do\n        if val % i == 0 then\n          return false\n\
    \        end\n        i = i + 1\n      end\n      return true\n    end\n    while\
    \ val > 1 do\n      if is_prime(val) then\n        return val\n      end\n   \
    \   val = val - 1\n    end\n    return nil\n  end\n  local function sum_digits(val)\n\
    \    local sum = 0\n    while val > 0 do\n      sum = sum + val % 10\n      val\
    \ = val // 10\n    end\n    return sum\n  end\n  local largest_prime = 0\n  for\
    \ _, val in ipairs(lst) do\n    local prime = find_prime(val)\n    if prime ~=\
    \ nil and prime > largest_prime then\n      largest_prime = prime\n    end\n \
    \ end\n  return sum_digits(largest_prime)\nend\nassert(skjkasdkd({-5, 1, 2, -3,\
    \ 5, 6, -7, -8, 9, 0}) == 7)\nassert(skjkasdkd({0, -5, -2, -3, -8, -9, -6, -7,\
    \ -1, -4}) == 0)\nassert(skjkasdkd({-10, -8, -16, -18, -11}) == 2)", "    local\
    \ res = 0\n    for i, v in ipairs(lst) do\n        if isPrime(v) then\n      \
    \      res = res + v\n        end\n    end\n    return res\nend", "  local function\
    \ jskjdksdjk(x)\n    for j = 2, x-1 do\n      if x % j == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  local max = 1\n  for i\
    \ = 1, #lst do\n    if jskjdksdjk(lst[i]) and lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  local n = 0\n  while max > 0 do\n    n = n + max % 10\n   \
    \ max = math.floor(max / 10)\n  end\n  return n\nend", "  local largest, s = 0,\
    \ 0\n  for i = 1, #lst do\n    local factor = 2\n    local number = lst[i]\n \
    \   while number ~= 1 do\n      if number % factor == 0 then\n        number =\
    \ number / factor\n        if factor > largest then\n          largest = factor\n\
    \        end\n      else\n        factor = factor + 1\n      end\n    end\n  end\n\
    \  while largest > 0 do\n    s = s + largest % 10\n    largest = math.floor(largest\
    \ / 10)\n  end\n  return s\nend\nassert(skjkasdkd({12, 39, 34, 9, 59, 50}) ==\
    \ 18)\nassert(skjkasdkd({3,2,1}) == 7)\nassert(skjkasdkd({}) == 0)\nassert(skjkasdkd({11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,",
  '    local primeValue = -1', "    for i = #lst, 1, -1 do\n        local p = lst[i]\n\
    \        local isPrime = true\n        for j = 2, p - 1 do\n            if p %\
    \ j == 0 then\n                isPrime = false\n                break\n      \
    \      end\n        end\n        if isPrime then\n            local sum = 0\n\
    \            while p > 0 do\n                sum = sum + p % 10\n            \
    \    p = math.floor(p / 10)\n            end\n            return sum\n       \
    \ end\n    end\nend", "  local x = nil\n  local maxVal = 0\n  for i = 1, #lst\
    \ do\n    x = lst[i]\n    if isPrime(x) and x > maxVal then\n      maxVal = x\n\
    \    end\n  end\n  if maxVal == 0 then\n    return nil\n  end\n  local result\
    \ = 0\n  while maxVal > 0 do\n    result = result + maxVal % 10\n    maxVal =\
    \ math.floor(maxVal / 10)\n  end\n  return result\nend", "    local iter = 0\n\
    \    local mx = 0\n    local num = 0\n    for i = 1, #lst do\n        iter = lst[i]\n\
    \        num = math.abs(iter)\n        local pr = true\n        for j = 2, math.floor(math.sqrt(num))\
    \ do\n            if num % j == 0 then\n                pr = false\n         \
    \       break\n            end\n        end\n        if pr and num > mx then\n\
    \            mx = num\n        end\n    end\n    local sum = 0\n    while mx >\
    \ 0 do\n        sum = sum + mx % 10\n        mx = math.floor(mx / 10)\n    end\n\
    \    return sum\nend", "\tlst = utils.sort(lst, function(a, b) return a > b end)\n\
    \tfor i = 1, #lst do\n\t\tlocal v = lst[i]\n\t\tif v > 0 and utils.isPrime(v)\
    \ then\n\t\t\treturn utils.sum(utils.split(tostring(v)))\n\t\tend\n\tend\nend\n\
    assert.same(14, skjkasdkd({13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}))\nassert.same(4,\
    \ skjkasdkd({987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321,\
    \ 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321,\
    \ 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321,\
    \ 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321,\
    \ 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321,\
    \ 1000000000, 987654321, 1000000000, 987654321, 1000000000, 987654321, 1000000000,\
    \ 987654321, 1000000000, 987654321, 1000000000, 987654321, 100", "  local maxl\
    \ = 0\n  for i = 1, #lst do\n    if is_prime(lst[i]) and lst[i] > maxl then\n\
    \      maxl = lst[i]\n    end\n  end\n  return sum_digits(maxl)\nend", "  local\
    \ largest = 0\n  for i = 1, #lst do\n    if is_prime(lst[i]) and lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n  end\n  local sum = 0\n  while largest\
    \ > 0 do\n    sum = sum + largest % 10\n    largest = math.floor(largest / 10)\n\
    \  end\n  return sum\nend", "    -- body\n    assert(#lst > 0, \"Empty input!\"\
    )\n    local s = lst[1]\n    for i=2,#lst do\n        s = lst[i]*s\n    end\n\
    \    return s\nend", "\tlocal f = 1\n\tfor i = 1, #lst do\n\t\tf = f * lst[i]\n\
    \tend\n\tlocal c = 0\n\tfor i = 1, #lst do\n\t\tif f % lst[i] == 0 then\n\t\t\t\
    c = c + 1\n\t\tend\n\tend\n\tif c == #lst then\n\t\treturn false\n\telse\n\t\t\
    return true\n\tend\nend", "  local largest_prime = 0\n  local sum_of_digits =\
    \ 0\n  if #lst == 0 then\n    return 0\n  end\n  for _,x in ipairs(lst) do\n \
    \   local prime = true\n    if x <= 1 then\n      prime = false\n    end\n   \
    \ for y = 2,x/2 do\n      if x % y == 0 then\n        prime = false\n      end\n\
    \    end\n    if prime then\n      if x > largest_prime then\n        largest_prime\
    \ = x\n      end\n    end\n  end\n  if largest_prime ~= 0 then\n    local string_largest_prime\
    \ = tostring(largest_prime)\n    for z = 1,#string_largest_prime do\n      sum_of_digits\
    \ = sum_of_digits + tonumber(string_largest_prime:sub(z,z))\n    end\n  end\n\
    \  return sum_of_digits\nend", "\tlocal maxPrime = 0\n\tlocal sumOfDigits = 0\n\
    \tfor _, int in ipairs(lst) do\n\t\tif int > maxPrime and primes.isPrime(int)\
    \ then\n\t\t\tmaxPrime = int\n\t\tend\n\tend\n\twhile maxPrime > 0 do\n\t\tsumOfDigits\
    \ = sumOfDigits + maxPrime % 10\n\t\tmaxPrime = (maxPrime - maxPrime % 10) / 10\n\
    \tend\n\treturn sumOfDigits\nend", "\tlocal lp = list_largest_prime(lst)\n\tlocal\
    \ s = 0\n\twhile lp > 0 do\n\t\ts = s + (lp % 10)\n\t\tlp = math.floor(lp / 10)\n\
    \tend\n\treturn s\nend", "  local res = 0\n  local isPrime = function(n)\n   \
    \ for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  for i = 1, #lst do\n  \
    \  if isPrime(lst[i]) then\n      res = lst[i]\n    end\n  end\n  local sum =\
    \ 0\n  while res > 0 do\n    sum = sum + (res % 10)\n    res = math.floor(res\
    \ / 10)\n  end\n  return sum\nend", "\tlocal a, b, c = 0, {}, {}\n\tfor i = 1,\
    \ #lst do\n\t\ttable.insert(b, lst[i])\n\tend\n\ttable.sort(b)\n\tfor i = 1, #b\
    \ do\n\t\tlocal d = b[i]\n\t\tif d > 1 then\n\t\t\tif d % 2 == 0 then\n\t\t\t\t\
    c[d] = 1\n\t\t\tend\n\t\t\tfor j = 3, math.sqrt(d) + 1, 2 do\n\t\t\t\tif d % j\
    \ == 0 then\n\t\t\t\t\tc[d] = 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor\
    \ i = 1, #b do\n\t\tif c[b[i]] == nil then\n\t\t\ta = b[i]\n\t\tend\n\tend\n\t\
    local k = {}\n\tfor s in tostring(a):gmatch\".\" do\n\t\ttable.insert(k, tonumber(s))\n\
    \tend\n\treturn k\nend", "  -- find largest prime number in the list\n  local\
    \ prime = math.max(unpack(lst))\n  -- sum the digits of this prime number\n  local\
    \ res = 0\n  for digit in tostring(prime):gmatch(\"%d\") do\n    res = res + tonumber(digit)\n\
    \  end\n  return res\nend", "\tlocal lst2 = {}\n\tlocal lst3 = {}\n\tfor i,v in\
    \ pairs(lst) do\n\t\tif type(v) == \"number\" then\n\t\t\ttable.insert(lst2, v)\n\
    \t\tend\n\tend\n\tlocal numbers = {}\n\tfor i,v in pairs(lst2) do\n\t\tif i ==\
    \ 2 then\n\t\t\ttable.insert(numbers, v)\n\t\telseif i > 2 then\n\t\t\tlocal j\
    \ = 1\n\t\t\twhile true do\n\t\t\t\tif j > #numbers then\n\t\t\t\t\ttable.insert(numbers,\
    \ v)\n\t\t\t\t\tbreak\n\t\t\t\telseif numbers[j] % v == 0 then\n\t\t\t\t\tbreak\n\
    \t\t\t\telseif v % numbers[j] == 0 then\n\t\t\t\t\ttable.remove(numbers, j)\n\t\
    \t\t\t\ttable.insert(numbers, v)\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\tj =\
    \ j + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor i,v in pairs(numbers) do\n\
    \t\ttable.insert(lst3, string.len(v))\n\tend\n\tlocal big = numbers[1]\n\tfor\
    \ i,v in pairs(numbers) do\n\t\tif i > 1 then\n\t\t\tif big < v then\n\t\t\t\t\
    big = v\n\t\t\tend\n\t\tend\n\tend\n\tlocal str = tostring(big)\n\tlocal ret =\
    \ 0\n\tfor i=1, #str do\n\t\tret = ret + string.sub(str, i, i)\n\tend\n\treturn\
    \ ret\nend", "\tlocal sum=0\n\tfor i=1, #lst do\n\t\tsum=sum+lst[i]\n\tend\n\t\
    return sum\nend", "  local function mod(l, r)\n    local a, b = math.fmod(l, r),\
    \ math.modf(l / r)\n    return a == 0 and b or b + 1\n  end\n  local function\
    \ _isprime(n)\n    if n <= 1 then return false end\n    for j = 2, math.sqrt(n)\
    \ do\n      if mod(n, j) == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function _sumdigits(n)\n    local s = 0\n    for i = 1, #tostring(n)\
    \ do\n      s = s + tonumber(string.sub(tostring(n), i, i))\n    end\n    return\
    \ s\n  end\n  local _max = 0\n  for i = 1, #lst do\n    if _isprime(lst[i]) and\
    \ lst[i] > _max then\n      _max = lst[i]\n    end\n  end\n  return _sumdigits(_max)\n\
    end", "    local num = math.max(unpack(lst))\n    local res = 0\n    while num\
    \ > 0 do\n        res = res + (num % 10)\n        num = math.floor(num / 10)\n\
    \    end\n    return res\nend\nassert(skjkasdkd({1,2,3,4,5,6,7,8,9,10}) == 4)\n\
    assert(skjkasdkd({11,22,333,444,555,666,7777,8888,99999,1000000}) == 10)\nassert(skjkasdkd({111111,222222,333333,444444,555555,666666,7777777,8888888,99999999,100000000})\
    \ == 21)\nassert(skjkasdkd({22,44,66,88,100,444444,7777777,8888888,99999999,100000000})\
    \ == 18)\nassert(skjkasdkd({11111,22222,444444,666666,7777777,8888888,99999999,100000000})\
    \ == 11)\nassert(skjkasdkd({22,55,55,55,55,66,77,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88",
  "    -- return lst\n    local largestPrime = lst[1]\n    for i, v in ipairs(lst)\
    \ do\n        if (isPrime(v) and v > largestPrime) then\n            largestPrime\
    \ = v\n        end\n    end\n    local primeSum = 0\n    for i = 1, largestPrime,\
    \ 1 do\n        -- primeSum = primeSum + largestPrime % i -- Wrong, needs to be\
    \ reverse order\n        primeSum = primeSum + math.floor(largestPrime / i) %\
    \ 10\n    end\n    return primeSum\nend", "  local s = 0\n  for i = 1, #lst do\n\
    \    for j = 1, #lst do\n      if i ~= j then\n        if lst[i] > lst[j] then\n\
    \          if lst[i] % lst[j] == 0 then\n            s = s + lst[i]\n        \
    \  end\n        end\n      end\n    end\n  end\n  return s\nend", "  local prime=1\n\
    \  for i,v in ipairs(lst) do\n    if isPrime(v) and v>prime then\n      prime=v\n\
    \    end\n  end\n  local res=0\n  if prime==1 then\n    return res\n  end\n  while\
    \ prime>0 do\n    res=res+prime%10\n    prime=math.floor(prime/10)\n  end\n  return\
    \ res\nend", "    local value = 1\n    for k, v in pairs(lst) do\n        if v\
    \ > value then\n            local isPrime = true\n            for i = 2, v - 1\
    \ do\n                if v % i == 0 then\n                    isPrime = false\n\
    \                    break\n                end\n            end\n           \
    \ if isPrime then\n                value = v\n            end\n        end\n \
    \   end\n    local sum = 0\n    while value > 0 do\n        sum = sum + value\
    \ % 10\n        value = math.floor(value / 10)\n    end\n    return sum\nend",
  "  local maxPrime = 0\n  for i = 1, #lst do\n    local isPrime = true\n    for j\
    \ = 2, lst[i] - 1 do\n      if lst[i] % j == 0 then\n        isPrime = false\n\
    \        break\n      end\n    end\n    if isPrime and lst[i] > maxPrime then\n\
    \      maxPrime = lst[i]\n    end\n  end\n  local sum = 0\n  local num = maxPrime\n\
    \  while num > 0 do\n    sum = sum + (num % 10)\n    num = math.floor(num / 10)\n\
    \  end\n  return sum\nend", "    local res = 0\n    for i = 1, #lst do\n     \
    \   res = res + lst[i]\n    end\n    return res\nend", "    local r = {}\n   \
    \ for i = 1, #lst do\n        local a = lst[i]\n        local b = 2\n        while\
    \ true do\n            if a % b == 0 then\n                a = a / b\n       \
    \         if a == 1 then\n                    break\n                end\n   \
    \         else\n                b = b + 1\n            end\n        end\n    \
    \    table.insert(r, b)\n    end\n    local a = 0\n    for i = 1, #r do\n    \
    \    a = a + r[i]\n    end\n    return a\nend", "  local maxPrime = 0\n  local\
    \ isPrime = function(number)\n    local divisor = 2\n    while divisor <= number\
    \ do\n      if number % divisor == 0 then\n        return false\n      end\n \
    \     divisor = divisor + 1\n    end\n    return true\n  end\n  local len = #lst\n\
    \  for i = 1, len do\n    if isPrime(lst[i]) then\n      maxPrime = math.max(maxPrime,\
    \ lst[i])\n    end\n  end\n  local res = 0\n  while maxPrime > 0 do\n    res =\
    \ res + (maxPrime % 10)\n    maxPrime = math.floor(maxPrime / 10)\n  end\n  return\
    \ res\nend", "    local max = 0\n    for i = 1, #lst do\n        local num = lst[i]\n\
    \        local prime = true\n        for j = 2, num do\n            if num % j\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime and num > max then\n            max = num\n\
    \        end\n    end\n    local sum = 0\n    while max > 0 do\n        sum =\
    \ sum + max % 10\n        max = math.floor(max / 10)\n    end\n    return sum\n\
    end", "    local max = -math.huge\n    for i = 1, #lst do\n        if isPrime(lst[i])\
    \ and lst[i] > max then\n            max = lst[i]\n        end\n    end\n    local\
    \ sum = 0\n    while max > 0 do\n        sum = sum + max % 10\n        max = math.floor(max\
    \ / 10)\n    end\n    return sum\nend", "    local t = {}\n    for _, v in ipairs(lst)\
    \ do\n        for i = 2, v do\n            if i == v then\n                table.insert(t,\
    \ v)\n            elseif v % i == 0 then\n                break\n            end\n\
    \        end\n    end\n    local a = 0\n    for k, v in ipairs(t) do\n       \
    \ if a < v then\n            a = v\n        end\n    end\n    local res = 0\n\
    \    for _, v in ipairs(string.split(tostring(a), '')) do\n        res = res +\
    \ tonumber(v)\n    end\n    return res\nend\nassert(skjkasdkd({20, 30, 45, 45,\
    \ 39, 34, 89, 64, 95, 110, 70, 20, 19, 31, 58, 50, 57, 44, 45, 45, 75, 76, 82,\
    \ 93, 87, 91, 95, 70, 60, 53, 82, 91, 31, 50, 95, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,\
    \ 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77",
  "  local lg = math.max(unpack(lst))\n  local primes = {}\n  for i = 2, lg do\n \
    \   local isPrime = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n\
    \        isPrime = false\n        break\n      end\n    end\n    if isPrime then\n\
    \      table.insert(primes, i)\n    end\n  end\n  local largestPrime = primes[#primes]\n\
    \  local sum = 0\n  while largestPrime > 0 do\n    sum = sum + largestPrime %\
    \ 10\n    largestPrime = math.floor(largestPrime / 10)\n  end\n  return sum\n\
    end\nassert(skjkasdkd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 5)\nassert(skjkasdkd({11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20}) == 5)\nassert(skjkasdkd({111, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10}) == 5)\nassert(skjkasdkd({11, 2, 3, 4, 5, 6, 7, 8, 9, 10})\
    \ == 5)\nassert(skjkasdkd({9, 9, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 5)\nassert(skjkasdkd({9,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 5)\nassert(skjkasdkd({9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20}) == 5)", "  local largest = 0\n  for i = 1, #lst do\n\
    \    local result = lst[i]\n    if not result then return false end\n    local\
    \ prime = true\n    for j = 2, result do\n      if result % j == 0 then\n    \
    \    prime = false\n        break\n      end\n    end\n    if prime and result\
    \ > largest then\n      largest = result\n    end\n  end\n  local total = 0\n\
    \  while largest > 0 do\n    total = total + largest % 10\n    largest = math.floor(largest\
    \ / 10)\n  end\n  return total\nend", "\tprint(lst)\n\tlocal s, n = 0, 1\n\tlocal\
    \ t = {}\n\tfor i = 1, #lst do\n\t\tlocal b = false\n\t\tlocal v = lst[i]\n\t\t\
    print(v)\n\t\tfor i = 1, #t do\n\t\t\tif v % t[i] == 0 then\n\t\t\t\tb = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not b then\n\t\t\tif v > n then\n\t\t\
    \t\tn = v\n\t\t\tend\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\tprint(n)\n\t\
    while n > 0 do\n\t\ts = s + n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn\
    \ s\nend", "\tlocal prime = lst[1]\n\tfor i = 2, #lst do\n\t\tlocal pr = lst[i]\n\
    \t\tif pr > prime then\n\t\t\tprime = pr\n\t\tend\n\tend\n\tlocal sum = 0\n\t\
    for ch in tostring(prime):gmatch(\".\") do\n\t\tsum = sum + tonumber(ch)\n\tend\n\
    \treturn sum\nend", "\tlocal r = 0\n\tlst = List.sort(lst, function(a, b) return\
    \ a > b end)\n\tfor i = 1, #lst do\n\t\tif isPrime(lst[i]) then\n\t\t\tr = lst[i]\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn toDigits(r)\nend\nassert.same(15, skjkasdkd\
    \ {32, 51, 52, 61, 73, 74, 75, 79, 81, 82, 87, 91, 92, 97, 99})\nassert.same(15,\
    \ skjkasdkd {32, 51, 52, 61, 73, 74, 75, 79, 81, 82, 87, 91, 92, 97, 99})\nassert.same(11,\
    \ skjkasdkd {32, 52, 61, 73, 74, 75, 79, 81, 82, 87, 91, 92, 97, 99})\nassert.same(20,\
    \ skjkasdkd {32, 52, 61, 73, 74, 75, 79, 81, 82, 87, 91, 92, 97, 99, 101, 103,\
    \ 105, 107, 109, 113})\nassert.same(8, skjkasdkd {32, 52, 61, 73, 74, 75, 79,\
    \ 81, 82, 87, 91, 92, 97, 99, 101, 103, 105, 107, 109, 113, 127, 131, 137, 139,\
    \ 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199})\nassert.same(3,\
    \ skjkasdkd {32, 52, 61, 73, 74, 75, 79, 81, 82, 87, 91, 92, 97, 99, 101, 103,\
    \ 105, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 4", "  if lst then\n    local largestPrime\
    \ = 0\n    for i = 1, #lst do\n      if largestPrime < lst[i] and skjkasdkd(lst[i])\
    \ then\n        largestPrime = lst[i]\n      end\n    end\n    if largestPrime\
    \ > 0 then\n      return lst[largestPrime], largestPrime\n    end\n  end\n  return\
    \ nil\nend", "    return lst\nend", "\tlocal prime, sum = 0, 0\n\tfor _, n in\
    \ ipairs(lst) do\n\t\tlocal d = 2\n\t\twhile d * d <= n do\n\t\t\tif n % d ==\
    \ 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\td = d + 1\n\t\tend\n\t\tif d * d > n\
    \ then\n\t\t\tif n > prime then\n\t\t\t\tprime = n\n\t\t\tend\n\t\tend\n\tend\n\
    \twhile prime > 0 do\n\t\tsum = sum + prime % 10\n\t\tprime = math.floor(prime\
    \ / 10)\n\tend\n\treturn sum\nend\nassert(skjkasdkd({4, 16, 6, 10, 12, 18, 10})\
    \ == 12)\nassert(skjkasdkd({7, 21, 14, 48, 42, 42, 28}) == 20)\nassert(skjkasdkd({6,\
    \ 41, 16, 51, 56, 51, 28}) == 13)\nassert(skjkasdkd({16, 21, 32, 48, 56, 56, 28})\
    \ == 17)\nassert(skjkasdkd({6, 24, 19, 68, 63, 63, 28}) == 15)\nassert(skjkasdkd({12,\
    \ 26, 22, 68, 75, 75, 28}) == 20)\nassert(skjkasdkd({2, 11, 18, 35, 35, 35, 28})\
    \ == 10)\nassert(skjkasdkd({9, 11, 25, 63, 63, 63, 28}) == 19)\nassert(skjkasdkd({8,\
    \ 17, 33, 63, 63, 63, 28}) == 20)\nassert(skjkasdkd({4, 29, 31, 63, 63, 63, 28})\
    \ == 18)\nassert(skjkasdkd({7, 25, 29, 63, 63, 63, 28}) == 19)\nassert(skjkasdkd({4,\
    \ 21, 33, 63, 63, 63, 28}) == 17)\nassert(skjkasdkd({9, 17, 31, 63, 63, 63, 28})\
    \ == 20)\nassert(skjkasdkd({8, 13, 30, 63, 63, 63", "  local res = 0;\n  for i\
    \ = 1, #lst do\n    local num = 1;\n    local t = lst[i];\n    for i = 1, #t do\n\
    \      num = num * t[i];\n    end\n    if isPrime(num) then\n      local temp\
    \ = num;\n      while temp > 0 do\n        res = res + temp % 10;\n        temp\
    \ = math.floor(temp / 10);\n      end\n    end\n  end\n  return res;\nend", " \
    \ local max_val = 0\n  for i = 1, #lst do\n    local prime = is_prime(lst[i])\n\
    \    if prime and lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n\
    \  local val = 0\n  while max_val > 0 do\n    val = val + max_val % 10\n    max_val\
    \ = math.floor(max_val / 10)\n  end\n  return val\nend\nassert(skjkasdkd({10,\
    \ 6, 71, 63, 10, 17, 75, 94, 92, 86, 15, 52, 92, 86, 43, 12, 29, 1, 17, 84, 63,\
    \ 30, 77, 52, 13, 77, 7, 73, 3, 93, 7, 73, 6, 22, 7, 73, 8, 52, 7, 73, 18, 52,\
    \ 7, 73, 27, 52, 7, 73, 36, 52, 7, 73, 45, 52, 7, 73, 54, 52, 7, 73, 63, 52, 7,\
    \ 73, 72, 52, 7, 73, 81, 52, 7, 73, 90, 52, 7, 73, 99, 52, 7, 73, 108, 52, 7,\
    \ 73, 117, 52, 7, 73, 126, 52, 7, 73, 135, 52, 7, 73, 144, 52, 7, 73, 153, 52,\
    \ 7, 73, 162, 52, 7, 73, 171, 52, 7, 73, 180, 52, 7, 73, 189, 52, 7, 73, 198,\
    \ 52, 7, 73, 207, 52, 7, 73, 216, 52, 7, 73, 225, 52, 7, 73, 234, 52, 7, 73, 243,\
    \ 52, 7, 73, 252, 52, 7, 73, 261, 52, 7, 73, 270, 52, 7, 73, 279, 52, 7, 73, 288,\
    \ 52, 7, 73, 297, 52, 7, 73, 306, 52, 7, 73, 315, 52, 7, 73, 324, 52, 7, 73, 333,\
    \ 52, 7, 73, 342, 52, 7, 73, 351, 52, 7, 73, 360, 52"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
