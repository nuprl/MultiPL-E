language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 2, n-1 do\n \
    \       if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8p0qz6n.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpo8p0qz6n.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest_factor =\
    \ math.floor(math.sqrt(n))\n\twhile largest_factor > 1 do\n\t\tif math.fmod(n,\
    \ largest_factor) == 0 then\n\t\t\treturn largest_factor\n\t\tend\n\t\tlargest_factor\
    \ = largest_factor - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu1f98zz.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmphu1f98zz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = math.floor(n/2)\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=n-1,1,-1 do\n\t\t\
    if n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  -- Assume that the largest\
    \ divisor is (n - 1)\n  local largest_divisor = n - 1\n  while largest_divisor\
    \ > 1 do\n    -- Keep reducing the number by 1\n    largest_divisor = largest_divisor\
    \ - 1\n    -- If we've reached the end, we can stop\n    if largest_divisor ==\
    \ 1 then\n      break\n    end\n    -- If this number divides n evenly, then we\
    \ can stop\n    if n % largest_divisor == 0 then\n      break\n    end\n  end\n\
    \  return largest_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 2, n-1 do\n \
    \       if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9h2hfym.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpx9h2hfym.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local half = math.floor(n\
    \ / 2)\n  for i = half, 1, -1 do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal ld = 1\n\tfor i =\
    \ 2, n/2 do\n\t\tif n % i == 0 then\n\t\t\tld = i\n\t\tend\n\tend\n\treturn ld\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = math.floor(n-1),\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 1\n\tlocal lim\
    \ = n/2\n\twhile i <= lim do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpnip_hu.lua:19:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpwpnip_hu.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i=2,n-1 do\n    \
    \    if (n % i) == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib8_ztsv.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpib8_ztsv.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- We start from half\
    \ the number.\n    local divisor = math.floor(n / 2)\n    -- We divide the number\
    \ by each number between half and two, until we find a divisor or reach two.\n\
    \    -- Since we're using integer division, the numbers we're using to divide\
    \ will decrease in steps of one.\n    while divisor >= 2 do\n        if n % divisor\
    \ == 0 then\n            return divisor\n        end\n        divisor = divisor\
    \ - 1\n    end\n    -- If we reach here, it means we haven't found a divisor,\
    \ so we return 1, because n can only be divided by itself.\n    return 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 2, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i=2,n-1 do\n    \
    \    if n % i == 0 then\n            return largest_divisor(n/i)\n        end\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbx98ujx.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdbx98ujx.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = math.sqrt(n)\n\
    \twhile d > 1 do\n\t\tif math.fmod(n, d) == 0 then\n\t\t\treturn d\n\t\tend\n\t\
    \td = d - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua0d019f.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpua0d019f.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = math.floor(math.sqrt(n))\n\
    \    while n % i ~= 0 do\n        i = i - 1\n    end\n    return i\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62bikkbf.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp62bikkbf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max_divisor = math.floor(n\
    \ / 2)\n\t\n\twhile (n % max_divisor ~= 0) do\n\t\tmax_divisor = max_divisor -\
    \ 1\n\tend\n\t\n\treturn max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max = math.floor(math.sqrt(n))\n\
    \tfor i = max, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkzc6_o_.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpjkzc6_o_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = math.floor(math.sqrt(n))\n\
    \tlocal d_prev = d + 1\n\twhile d > 1 do\n\t\tif n % d == 0 then\n\t\t\treturn\
    \ d\n\t\tend\n\t\td_prev = d\n\t\td = math.floor(d - 1)\n\tend\n\treturn n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppetmt9nh.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppetmt9nh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- We only need to check\
    \ up to the square root of n, since numbers with a factor\n\t-- greater than the\
    \ square root are paired with a smaller one\n\tfor i = math.floor(math.sqrt(n)),\
    \ 1, -1 do\n\t\tif math.mod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\t\
    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbiublk2s.lua:6:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpbiublk2s.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbiublk2s.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- find an integer d\
    \ that divides n evenly, and is smaller than n\n    local d = 2\n    while n %\
    \ d ~= 0 do\n        d = d + 1\n    end\n    return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_7adsmj.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn_7adsmj.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local result = 0\n  \
    \  for i = 2, n do\n        if is_divisible(n, i) then\n            result = i\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwadx67cc.lua:5:\
    \ attempt to call a nil value (global 'is_divisible')\nstack traceback:\n\t/tmp/tmpwadx67cc.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpwadx67cc.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max = math.sqrt(n)\n\
    \    local divisor = math.floor(max)\n    while n % divisor ~= 0 do\n        divisor\
    \ = divisor - 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhytxwk.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpiyhytxwk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal c = math.floor(math.sqrt(n))\n\
    \twhile c >= 1 do\n\t\tif n % c == 0 then\n\t\t\treturn c\n\t\tend\n\t\tc = c\
    \ - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2sge9tb.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpr2sge9tb.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 1\n\twhile true\
    \ do\n\t\tif i >= n then\n\t\t\treturn n\n\t\tend\n\t\tif n % i == 0 then\n\t\t\
    \tn = i\n\t\tend\n\t\ti = i + 1\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiube_ccd.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpiube_ccd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ n%i ~= 0 do\n        i = i + 1\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ulmopln.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ulmopln.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for d = 2, n do\n    if\
    \ n % d == 0 then\n      return d\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv_bv562.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpiv_bv562.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest_divisor\
    \ = 2\n    local limit = math.sqrt(n)\n    for divisor = 2, limit do\n       \
    \ if n % divisor == 0 then\n            largest_divisor = divisor\n        end\n\
    \    end\n    return largest_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvcuqg4p.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkvcuqg4p.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 2\n  while\
    \ n % largest == 0 do\n    largest = largest + 1\n  end\n  return largest - 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwb9lqhfx.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpwb9lqhfx.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_ngf0ze.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmps_ngf0ze.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = 2\n\twhile n\
    \ % d ~= 0 do\n\t\td = d + 1\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcqizmwh.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbcqizmwh.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    if n == 1 then\n    \
    \    return 1\n    end\n    for i = 2, math.floor(n / 2) do\n        if n % i\
    \ == 0 then\n            return largest_divisor(n / i)\n        end\n    end\n\
    \    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sb50d7d.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6sb50d7d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local result = 1\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_coknzq.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821677
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- Handle negative numbers\n\
    \    if n < 0 then\n        return largest_divisor(-n)\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv859armz.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=math.floor(n/2),2,-1\
    \ do\n\t\tif n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 2, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5xw00gz.lua:14:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq5xw00gz.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal m = math.floor(math.sqrt(n))\n\
    \tfor i = m, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4gfzo6i.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmph4gfzo6i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n-1, 2, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc89jedu7.lua:14:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc89jedu7.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local d = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8un55zpd.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = 1\n  for\
    \ i = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n      divisor =\
    \ i\n    end\n  end\n  return divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq89te5ot.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpq89te5ot.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 1\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\tn = i\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf_eupyi.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpcf_eupyi.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max = math.floor(math.sqrt(n))\n\
    \  local d, i = 1, 2\n  while i <= max do\n    if n % i == 0 then\n      max =\
    \ math.floor(n / i)\n      d = i\n    end\n    i = i + 1\n  end\n  return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92adk54b.lua:21:\
    \ expected: 50, actual: 10\nstack traceback:\n\t/tmp/tmp92adk54b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local d = math.floor(math.sqrt(n))\n\
    \  while n % d ~= 0 do\n    d = d - 1\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpmt_w39.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpjpmt_w39.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 1\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\ti = i + 1\n\t\telse\n\t\t\ti = n\n\t\t\
    end\n\tend\n\treturn i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdt9qys5.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppdt9qys5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  if n <= 1 then return nil\
    \ end\n  if n%2 == 0 then return 2 end\n  local divisor = 3\n  while divisor <=\
    \ n/2 do\n    if n%divisor == 0 then return divisor end\n    divisor = divisor\
    \ + 2\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqov1ecx.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpiqov1ecx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for d = n - 1, 2, -1 do\n\
    \    if n % d == 0 then\n      return d\n    end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- TODO: Implement\n\t\
    for i = n - 1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    if n == 1 then\n    \
    \    return nil\n    end\n    for i = n-1, 2, -1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq2r3nol.lua:17:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpfq2r3nol.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max = 1\n    local\
    \ d = 2\n    while d < n do\n        if n % d == 0 then\n            max = d\n\
    \        end\n        d = d + 1\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = math.floor(math.sqrt(n))\n\
    \twhile n % d ~= 0 do\n\t\td = d - 1\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyp40lmz.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpgyp40lmz.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n\
    \    for i = m, 2, -1 do\n        if n % i == 0 then\n            return i\n \
    \       end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2_jhql2.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpp2_jhql2.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = 1\n\twhile (math.mod(n,d)\
    \ ~= 0) do\n\t\td = d + 1\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28drgsqn.lua:4:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp28drgsqn.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp28drgsqn.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 0\n \
    \   for d = 2, n-1 do\n        if math.fmod(n, d) == 0 then\n            largest\
    \ = d\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1kq_dfp.lua:15:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpt1kq_dfp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfeyhfjgx.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfeyhfjgx.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while i\
    \ <= n/2 do\n    if n % i == 0 then\n      return n/i\n    end\n    i = i + 1\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 2\n    while\
    \ i <= n do\n        if n % i == 0 then\n            return n / i\n        end\n\
    \        i = i + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=n-1,1,-1 do\n\t\t\
    if n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = math.floor(n/2),\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 2, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4s1lsp3.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpc4s1lsp3.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 2, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n < 2 then\n\t\treturn\
    \ 1\n\tend\n\tlocal i = 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\tn =\
    \ n / i\n\t\t\ti = 2\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sef533d.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0sef533d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    if n % 2 == 0 then\n\
    \        return n/2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        if n\
    \ % i == 0 then\n            return n/i\n        end\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local d = math.floor(math.sqrt(n))\n\
    \  while n % d ~= 0 do\n    d = d - 1\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpmt_w39.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpjpmt_w39.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n % 2 == 0 then\n\t\t\
    return n / 2\n\tend\n\tlocal f = 3\n\twhile n % f ~= 0 do\n\t\tf = f + 2\n\tend\n\
    \treturn f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0_2vpuk.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpt0_2vpuk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    if n == 1 then\n    \
    \    return 1\n    end\n    for i = n-1, 1, -1 do\n        if math.fmod(n, i)\
    \ == 0 then\n            return i\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  if n == 1 then return 1\
    \ end\n  local half_n = n / 2\n  local i = 2\n  while i <= half_n do\n    if n\
    \ % i == 0 then\n      return n / i\n    end\n    i = i + 1\n  end\n  return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = n-1\n\t\
    while n % largest ~= 0 do\n\t\tlargest = largest - 1\n\tend\n\treturn largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- initialize to 1, and\
    \ then test all numbers smaller than n to see if they are divisors\n    local\
    \ divisor = 1\n    while divisor < n do\n        if n % divisor == 0 then\n  \
    \          -- this number is a divisor\n            largest_divisor = divisor\n\
    \        end\n        divisor = divisor + 1\n    end\n    return largest_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- Note: this isn't the\
    \ most efficient way to do this, but it is easy to grasp\n\tlocal largest = 0\n\
    \tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchgxhmo9.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpchgxhmo9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local root = math.floor(math.sqrt(n))\n\
    \  local range = math.floor(n / 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpntn53gky.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    if n % 2 == 0 then\n\
    \        return n / 2\n    end\n    for d = 3, math.floor(math.sqrt(n)), 2 do\n\
    \        if n % d == 0 then\n            return n / d\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = math.floor(n/2)\n\
    \twhile (divisor > 0) do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\
    \t\tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = 2\n  while\
    \ n % divisor ~= 0 do\n    divisor = divisor + 1\n  end\n  return divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1d9f0e0.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpl1d9f0e0.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return largest_divisor(n / i)\n    end\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfl80ppy.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpxfl80ppy.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local half = math.floor(n\
    \ / 2)\n  for i = half, 1, -1 do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 0\n\tfor\
    \ i = 1, n/2 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\t\
    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = n - 1\n  while\
    \ true do\n    if i == 1 then return nil end\n    if n % i == 0 then return i\
    \ end\n    i = i - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpp2x_2g.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpxpp2x_2g.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal half = math.floor(n\
    \ / 2)\n\tfor i = half, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 2, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n-1, 1, -1 do\n\
    \t\tif (n % i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local l = math.floor(math.sqrt(n))\n\
    \    while l > 0 do\n        if n % l == 0 then\n            return l\n      \
    \  end\n        l = l - 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllrc2dp_.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpllrc2dp_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while (n\
    \ % i) == 0 do\n    i = i + 1\n  end\n  return i - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5xjrdo0.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpn5xjrdo0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = math.floor(n\
    \ / 2)\n    while n % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n\
    \    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 1, -1 do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- returns the largest\
    \ number, d, such that d divides n evenly, d < n\n\tlocal d = math.floor(n/2)\n\
    \twhile n % d ~= 0 do\n\t\td = d - 1\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i=2,math.sqrt(n) do\n\
    \    if n % i == 0 then\n      return n/i\n    end\n  end\n  return 1\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\
    \treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 0\n  local\
    \ limit = math.sqrt(n)\n  for i = 2, limit do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93f7pn09.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp93f7pn09.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ divisor <= n do\n\t\tif n % divisor == 0 then\n\t\t\tn = n / divisor\n\t\t\t\
    -- Fetch the next prime number\n\t\t\tdivisor = 2\n\t\telse\n\t\t\tdivisor = next_prime(divisor)\n\
    \t\tend\n\tend\n\treturn divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6g6l541f.lua:10:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmp6g6l541f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp6g6l541f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max = math.floor(math.sqrt(n))\n\
    \tfor i = max, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkzc6_o_.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpjkzc6_o_.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821677
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = math.floor(n/2)\n\
    \    while divisor > 1 do\n        if math.fmod(n, divisor) == 0 then\n      \
    \      return divisor\n        end\n        divisor = divisor - 1\n    end\n \
    \   return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local result = 0\n  local\
    \ stop = math.floor(math.sqrt(n))\n  for i = 2, stop do\n    if n % i == 0 then\n\
    \      result = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfx_i089.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmppfx_i089.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i=math.floor(n/2),2,-1\
    \ do\n    if n%i == 0 then\n      return i\n    end\n  end\n  return 1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal sqrt = math.sqrt(n)\n\
    \tlocal largest_divisor = 2\n\tfor i = 2, sqrt do\n\t\tif n % i == 0 then\n\t\t\
    \tlargest_divisor = n / i\n\t\tend\n\tend\n\treturn largest_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_qx1wrg.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpa_qx1wrg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- Find all prime factors\
    \ of n, then take the smallest prime factor and \n\t-- divide it out of n. Keep\
    \ repeating until that quotient can't be divided\n\t-- further.\n\tlocal factors\
    \ = prime_factors(n)\n\tlocal result = 1\n\tlocal divisor = 2\n\twhile divisor\
    \ <= n do\n\t\tif factors[divisor] ~= nil then\n\t\t\tresult = result * divisor\n\
    \t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor = divisor + 1\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e_robvc.lua:6:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp_e_robvc.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_e_robvc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  if n == 1 then return 1\
    \ end\n  local p = primes[1]\n  while p <= n do\n    if n % p == 0 then return\
    \ p end\n    p = primes[p+1]\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtk78ohs.lua:4:\
    \ attempt to index a nil value (global 'primes')\nstack traceback:\n\t/tmp/tmpgtk78ohs.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpgtk78ohs.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 1\n\tfor\
    \ i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\tdivisor = i\n\t\tend\n\tend\n\t\
    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = math.ceil(math.sqrt(n))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplyb5r_kh.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local d = 1\n    for\
    \ i = 2, n - 1 do\n        if n % i == 0 then\n            d = i\n        end\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal ld = 2\n\twhile n\
    \ % ld ~= 0 do\n\t\tld = ld + 1\n\tend\n\treturn ld\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzdzjqb8.lua:13:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplzdzjqb8.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 1, -1 do\n\t\tif (n % i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = math.floor(n/2)\n\
    \twhile divisor > 1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\
    \tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcrq8778.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmptcrq8778.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n-1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 1\n \
    \   for i = 2,n-1 do\n        if n % i == 0 then\n            divisor = i\n  \
    \      end\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n-1\n\t\
    while n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = 1\n\twhile d\
    \ < n do\n\t\tif math.fmod(n, d) == 0 then return d end\n\t\td = d + 1\n\tend\n\
    \treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp537iw3l3.lua:16:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp537iw3l3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal root = math.floor(math.sqrt(n))\n\
    \tfor i = 2, root do\n\t\tif n % i == 0 then\n\t\t\treturn n // i\n\t\tend\n\t\
    end\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i=n-1, 1, -1 do\n \
    \   if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i=math.floor(n/2),\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- Check all integers\
    \ from the largest possible down\n    for i = n - 1, 2, -1 do\n        -- If n\
    \ is divisible by i, return i\n        if n % i == 0 then\n            return\
    \ i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjvsvsqd.lua:15:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpfjvsvsqd.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = math.floor(n/2)\n\
    \t\n\tfor i = largest, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\tend\n\t\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i = 1\n    while\
    \ i <= n/2 do\n        if n % i == 0 then\n            return i\n        end\n\
    \        i = i + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujy_yp4m.lua:18:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpujy_yp4m.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for d = n - 1, 2, -1 do\n\
    \    if n % d == 0 then\n      return d\n    end\n  end\n  return 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n == 1 then\n\t\treturn\
    \ 1\n\tend\n\tlocal sqrt = math.floor(math.sqrt(n))\n\tfor i = sqrt, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszqg_u3o.lua:20:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpszqg_u3o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n-1 do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n \
    \ return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 2, -1 do\n\
    \t\tif math.fmod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = 1\n\tlocal ld\
    \ = n\n\twhile d <= n/2 do\n\t\tif n % d == 0 then\n\t\t\tld = d\n\t\tend\n\t\t\
    d = d + 1\n\tend\n\treturn ld\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \twhile n % i ~= 0 do\n\t\ti = i - 1\n\tend\n\treturn i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowrn7usw.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpowrn7usw.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n < 2 then\n\t\treturn\
    \ 1\n\tend\n\tlocal f = 2\n\tlocal p = n\n\twhile p % f == 0 do\n\t\tp = p / f\n\
    \tend\n\treturn f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuhera_a.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnuhera_a.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = math.floor(n\
    \ / 2), 1, -1 do\n        if math.fmod(n, i) == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 2, n-1 do\n \
    \       if math.fmod(n, i) == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81r1b4yd.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp81r1b4yd.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n /\
    \ 2), 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local i\n    for i =\
    \ math.floor(n/2), 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 2\n\twhile\
    \ divisor < n do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\tend\n\
    \t\tdivisor = divisor + 1\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu57uxwjs.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpu57uxwjs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local d = 2\n    while\
    \ d < n do\n        if n % d == 0 then\n            return d\n        end\n  \
    \      d = d + 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjjh2n3u.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpgjjh2n3u.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local start_at = math.floor(n\
    \ / 2)\n    local divisor = 2\n    while true do\n        if n % divisor == 0\
    \ then\n            return divisor\n        end\n        divisor = divisor + 1\n\
    \        if divisor > start_at then\n            return 1\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w_cct4v.lua:21:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp0w_cct4v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max = math.floor(math.sqrt(n))\n\
    \  for i = 2, max do\n    if n % i == 0 then\n      return n / i\n    end\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local largest = 1\n  for\
    \ i = 2, n-1 do\n    if math.fmod(n, i) == 0 then\n      largest = i\n    end\n\
    \  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = 1\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpim37b_7s.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 1, n do\n   \
    \     if n % i == 0 then\n            return i\n        end\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhkoz71v.lua:15:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpwhkoz71v.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal d = 2\n\twhile d\
    \ < n do\n\t\tif (n % d) == 0 then\n\t\t\treturn d\n\t\tend\n\t\td = d + 1\n\t\
    end\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp172_w57u.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp172_w57u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max = math.floor(math.sqrt(n))\n\
    \tlocal result = 1\n\tfor i = 2, max do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\
    \tresult = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9nt2a0p.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpn9nt2a0p.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local i = 2\n  while i\
    \ < n do\n    if n % i == 0 then\n      return i\n    end\n    i = i + 1\n  end\n\
    \  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_yhscny.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp5_yhscny.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n /\
    \ 2), 1, -1 do\n\t\tif (n % i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 2, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwo2iu_no.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpwo2iu_no.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal last = 0\n\tfor i\
    \ = 2, n do\n\t\tif(n % i == 0) then\n\t\t\tlast = i\n\t\tend\n\tend\n\treturn\
    \ last\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7q72qrj.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpz7q72qrj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal f = 1\n\twhile n\
    \ % f ~= 0 do\n\t\tf = f + 1\n\tend\n\treturn f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4sylfoj.lua:15:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpc4sylfoj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = 2, n-1 do\n \
    \       if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyml52ye9.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyml52ye9.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local last_divisor =\
    \ 1\n    local stop = sqrt(n)\n    for i = 2, stop do\n        if n % i == 0 then\n\
    \            last_divisor = i\n        end\n    end\n    return last_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfm7blapd.lua:4:\
    \ attempt to call a nil value (global 'sqrt')\nstack traceback:\n\t/tmp/tmpfm7blapd.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpfm7blapd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal divisor = n - 1\n\
    \twhile divisor > 1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\
    \tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest = 1\n\tfor\
    \ i = 2, math.floor(n / 2) do\n\t\tif(n % i == 0) then\n\t\t\tlargest = i\n\t\t\
    end\n\tend\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  if n % 2 == 0 then\n  \
    \  return largest_divisor(n / 2)\n  end\n  local divisor = 3\n  while divisor\
    \ <= math.sqrt(n) do\n    if n % divisor == 0 then\n      return largest_divisor(n\
    \ / divisor)\n    end\n    divisor = divisor + 2\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpwix8fy.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfpwix8fy.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = 2\n\twhile i\
    \ < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor divisor = n - 1, 2,\
    \ -1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\tend\n\tend\n\t\
    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i=n-1,1,-1 do\n   \
    \ if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- The largest possible\
    \ divisor of n is n/2, so this is a good start\n    local i = math.floor(n/2)\n\
    \    while i > 1 do\n        if n % i == 0 then\n            return i\n      \
    \  end\n        i = i - 1\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = math.floor(n\
    \ / 2), 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tassert(n >= 2, \"invalid\
    \ input\")\n\tlocal largest = 2\n\twhile n % largest == 0 do\n\t\tlargest = largest\
    \ + 1\n\tend\n\treturn largest - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply2c758l.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmply2c758l.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=n-1,1,-1 do\n\t\t\
    if n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  if n < 0 then return math.huge\
    \ end\n  local i = 2\n  while i < n do\n    if n % i == 0 then return i end\n\
    \    i = i + 1\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uh0tosd.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp9uh0tosd.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = math.floor(n/2),\
    \ 2, -1 do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = n - 1, 1, -1\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n\
    \    while m > 1 do\n        if n % m == 0 then\n            return m\n      \
    \  end\n        m = m - 1\n    end\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yihgre8.lua:18:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp9yihgre8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- divisor can't be larger\
    \ than the square root of n\n\tfor i = math.floor(math.sqrt(n)), 2, -1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0hgw1dq.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpv0hgw1dq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n - 1, 2, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b4q62_q.lua:14:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4b4q62_q.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    return math.floor(n^0.5)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrj4f3s0.lua:10:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxrj4f3s0.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = n\n \
    \   for i = n-1, 1, -1 do\n        if n % i == 0 then\n            largest = i\n\
    \            break\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- n / 2 is the smallest\
    \ number that can possibly divide n evenly\n    local stop = math.floor(n / 2)\n\
    \    for i = 2, stop do\n        if n % i == 0 then\n            return i\n  \
    \      end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0qae97y.lua:16:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpm0qae97y.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n == 1 then\n\t\treturn\
    \ 1\n\tend\n\tfor i = n - 1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\
    \t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = n-1, 1, -1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local max_divisor = math.floor(n^0.5)\n\
    \  local best_divisor = max_divisor\n  for divisor = max_divisor, 2, -1 do\n \
    \   if n % divisor == 0 then\n      return divisor\n    end\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kxy5x3f.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp2kxy5x3f.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local sqrt_n = math.sqrt(n)\n\
    \    local i = math.floor(sqrt_n)\n    while i > 0 do\n        if n % i == 0 then\n\
    \            return i\n        end\n        i = i - 1\n    end\n    return 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgom3qozo.lua:19:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpgom3qozo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i = 1, math.floor(n\
    \ / 2) do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41hgmhal.lua:16:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp41hgmhal.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- Start with n-1 and\
    \ keep going down\n    for d = n-1, 2, -1 do\n        if n % d == 0 then\n   \
    \         return d\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local function f(divisor)\n\
    \    if n % divisor == 0 then\n      return divisor\n    else\n      return f(divisor\
    \ - 1)\n    end\n  end\n  return f(n-1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = max, 2, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9e9jm5d.lua:17:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpy9e9jm5d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tif n % 2 == 0 then\n\t\t\
    return n / 2\n\tend\n\tlocal max = math.floor(math.sqrt(n))\n\tfor i = max, 3,\
    \ -2 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n-1\n\
    \    while (n % divisor ~= 0) do\n        divisor = divisor - 1\n    end\n   \
    \ return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  for i = 2, n-1 do\n   \
    \ if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0awgg298.lua:16:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp0awgg298.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=n-1, 2, -1 do\n\t\
    \tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = math.floor(n\
    \ / 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8n3hpg0k.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal i = math.floor(math.sqrt(n))\n\
    \tlocal divisor = i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp90v6y9yi.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    for i = math.floor(n\
    \ / 2), 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local d = 1\n    for\
    \ i = 2, n - 1 do\n        if n % i == 0 then\n            d = i\n        end\n\
    \    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal largest_divisor =\
    \ 0\n\tlocal half = math.floor(n / 2)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe9ihuhe2.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\t-- For our purposes, we'll\
    \ assume that \n\t--  1 is the largest divisor of all numbers\n\tlocal last_divisor\
    \ = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplx21gkmb.lua:17: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal sqrt_n = math.sqrt(n)\n\
    \tlocal i = math.floor(sqrt_n)\n\twhile i > 0 do\n\t\tif n % i == 0 then\n\t\t\
    \treturn i\n\t\tend\n\t\ti = i - 1\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwzsfbk0.lua:19:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmplwzsfbk0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  -- Find factors and iterate\
    \ until we find a number that divides n evenly.\n  local factors = factor(n)\n\
    \  local divisor = 1\n  for i = 1, #factors do\n    divisor = divisor * factors[i]\n\
    \    if divisor == n then\n      divisor = divisor / factors[i]\n    end\n  end\n\
    \  return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnck366e.lua:4:\
    \ attempt to call a nil value (global 'factor')\nstack traceback:\n\t/tmp/tmpbnck366e.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpbnck366e.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = 1\n \
    \   while n % divisor == 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnm4hndz_.lua:15:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpnm4hndz_.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tfor i=n-1,2,-1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphczo9qjv.lua:14:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmphczo9qjv.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local d, max = 2, math.floor(math.sqrt(n))\n\
    \  while d <= max do\n    if n % d == 0 then return n / d end\n    d = d + 1\n\
    \  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    -- We iterate through\
    \ every number smaller than n,\n    -- checking if it divides evenly into n.\n\
    \    -- If it does, then we keep it stored,\n    -- and keep checking in case\
    \ there is a larger value that divides evenly\n    -- We need to start at 2, otherwise\
    \ we will just get 1\n    local divisor = 2\n    while divisor < n do\n      \
    \  if n % divisor == 0 then\n            -- If it divides evenly, then store it\
    \ and keep going\n            local test_divisor = divisor\n            divisor\
    \ = divisor + 1\n        else\n            -- If it does not divide evenly, then\
    \ move on to the next number\n            divisor = divisor + 1\n        end\n\
    \    end\n    -- We now have the largest divisor, so return it\n    return divisor\
    \ - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs9s1yer.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqs9s1yer.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local divisor = n\n \
    \   while divisor > 1 do\n        if n % divisor == 0 then\n            return\
    \ divisor\n        end\n        divisor = divisor - 1\n    end\n    return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhayedm8.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdhayedm8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n    local largest = 1\n \
    \   for i = 2, n - 1 do\n        if n % i == 0 then\n            largest = i\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n  local divisor = n - 1\n\
    \  while n % divisor ~= 0 do\n    divisor = divisor - 1\n  end\n  return divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821678
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nlocal function largest_divisor(n)\n\tlocal max = 2\n\tfor i\
    \ = 2, math.floor(n/2) do\n\t\tif n % i == 0 then\n\t\t\tmax = i\n\t\tend\n\t\
    end\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l3lixrp.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp9l3lixrp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821678
