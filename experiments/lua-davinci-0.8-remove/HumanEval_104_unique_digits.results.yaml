language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for k, v in ipairs(x) do\n    if not string.find(tostring(v), \"[24680]\"\
    ) then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ s = Set:new{}\n  local res = {}\n  for _, n in ipairs(x) do\n    local t = {}\n\
    \    while n > 0 do\n      table.insert(t, n % 10)\n      n = math.floor(n / 10)\n\
    \    end\n    table.sort(t)\n    local u = table.concat(t)\n    if not s[u] then\n\
    \      s[u] = true\n      table.insert(res, u)\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40juls3d.lua:6:\
    \ attempt to index a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmp40juls3d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp40juls3d.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local lst = {}\n    for _, v in ipairs(x) do\n        local str = tostring(v)\n\
    \        local has_even = false\n        for i = 1, #str do\n            if tonumber(str:sub(i,\
    \ i)) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n        end\n        if not has_even then\n            table.insert(lst,\
    \ v)\n        end\n    end\n    table.sort(lst)\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, n in ipairs(x) do\n    if not n:match(\"[02468]\") then\n\
    \      res[#res+1] = n\n    end\n  end\n  table.sort(res)\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v2dbrae.lua:8:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp0v2dbrae.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0v2dbrae.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ res = {}\n   local z = 0\n   for i,n in ipairs(x) do\n      if odd(n) then\n\
    \         z = z + 1\n         res[z] = n\n      end\n   end\n   table.sort(res)\n\
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhay9a9a.lua:9:\
    \ attempt to call a nil value (global 'odd')\nstack traceback:\n\t/tmp/tmpuhay9a9a.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuhay9a9a.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local y = {}\n    for k, v in pairs(x) do\n        if not tostring(v):match(\"\
    [24680]\") then\n            table.insert(y, v)\n        end\n    end\n    return\
    \ y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q5dm2t0.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp9q5dm2t0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if not x then return nil end\n    local list = {}\n    for k, v in pairs(x)\
    \ do\n        if not v:find(\"[02468]\") then\n            table.insert(list,\
    \ v)\n        end\n    end\n    return list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq1jf07o.lua:9:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpbq1jf07o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbq1jf07o.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ list = {}\n  for _, x in ipairs(x) do\n    if not has_even_digit(x) then\n \
    \     table.insert(list, x)\n    end\n  end\n  table.sort(list)\n  return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyah5w9d.lua:8:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpkyah5w9d.lua:8: in local 'candidate'\n\t/tmp/tmpkyah5w9d.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _,v in ipairs(x) do\n        local digits = {}\n\
    \        for d in tostring(v):gmatch(\"%d\") do\n            digits[#digits+1]\
    \ = tonumber(d)\n        end\n        local found = false\n        for _, d in\
    \ ipairs(digits) do\n            if d % 2 == 0 then\n                found = true\n\
    \                break\n            end\n        end\n        if not found then\n\
    \            result[#result+1] = v\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ t,u = {},{}\n   for k,v in ipairs(x) do\n      if not has_even_digit(v) then\
    \ t[#t+1] = v end\n   end\n   table.sort(t)\n   return t\nend\nprint(table.concat(unique_digits({5,11,12,13,14,15,7,8,9}),\
    \ \" \"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpo7v1jz9k.lua:8: attempt to call a nil value (global 'has_even_digit')\n\
    stack traceback:\n\t/tmp/tmpo7v1jz9k.lua:8: in local 'unique_digits'\n\t/tmp/tmpo7v1jz9k.lua:13:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tfor i, v in ipairs(x) do\n\t\tif v % 2 == 1 then\n\t\t\tt[#t + 1]\
    \ = v\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz8m2han.lua:20:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpgz8m2han.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ uniq = {}\n  for _, num in ipairs(x) do\n    local str = tostring(num)\n   \
    \ if not str:match('[02468]') then\n      table.insert(uniq, num)\n    end\n \
    \ end\n  table.sort(uniq)\n  return uniq\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\n  local digits = {}\n  for k,v in pairs(x) do\n    if #v % 2\
    \ ~= 0 then\n      digits[k] = v\n    end\n  end\n  table.sort(digits)\n  return\
    \ digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnge58vde.lua:9:\
    \ attempt to get length of a number value (local 'v')\nstack traceback:\n\t/tmp/tmpnge58vde.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnge58vde.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ even_only = function(x)\n\t\treturn x % 2 == 0\n\tend\n\tlocal function has_no_even_digits(n)\n\
    \t\tlocal digits = to_digits(n)\n\t\treturn not any(even_only, digits)\n\tend\n\
    \treturn sort(filter(has_no_even_digits, x))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpvgml94.lua:13:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpvpvgml94.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpvpvgml94.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique = {}\n  for _, n in ipairs(x) do\n    if not n:find('[02468]') then\n\
    \      table.insert(unique, n)\n    end\n  end\n  table.sort(unique)\n  return\
    \ unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tj0jh2d.lua:8:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmp1tj0jh2d.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp1tj0jh2d.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local unique_digits = {}\n    for _,n in ipairs(x) do\n        local has_even_digit\
    \ = false\n        while n > 0 do\n            local last_digit = n % 10\n   \
    \         if last_digit % 2 == 0 then\n                has_even_digit = true\n\
    \                break\n            end\n            n = (n - last_digit) / 10\n\
    \        end\n        if not has_even_digit then\n            table.insert(unique_digits,\
    \ n)\n        end\n    end\n    table.sort(unique_digits)\n    return unique_digits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wyaozsk.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmp7wyaozsk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        local ok = true\n    \
    \    for d in tostring(v):gmatch('%d') do\n            if d % 2 == 0 then\n  \
    \              ok = false\n                break\n            end\n        end\n\
    \        if ok then table.insert(res, v) end\n    end\n    table.sort(res)\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ s = {}\n  for i = 1, #x do\n    local last\n    local u = {}\n    local y =\
    \ x[i]\n    while y > 0 do\n      last = y % 10\n      if u[last] then\n     \
    \   s[i] = nil\n        break\n      end\n      u[last] = true\n      y = math.floor(y\
    \ / 10)\n    end\n    if y > 0 then\n      s[i] = x[i]\n    end\n  end\n  local\
    \ t = {}\n  for i = 1, #s do\n    if s[i] then\n      t[#t + 1] = s[i]\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz28fqrh_.lua:36:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpz28fqrh_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local s = {}\n    for _, v in ipairs(x) do\n        local t = 0\n        local\
    \ v_str = tostring(v)\n        for i = 1, #v_str do\n            local digit =\
    \ tonumber(v_str:sub(i, i))\n            if digit % 2 == 0 then\n            \
    \    t = 1\n                break\n            end\n        end\n        if t\
    \ == 0 then\n            table.insert(s, v)\n        end\n    end\n    table.sort(s)\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxwxb6ql.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqxwxb6ql.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ans = {}\n    for _, v in ipairs(x) do\n        if not v:match(\"[02468]\"\
    ) then\n            ans[#ans+1] = v\n        end\n    end\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2604do1.lua:8:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpz2604do1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz2604do1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local list = {}\n    local sorted = {}\n    for n, v in pairs(x) do\n      \
    \  local s = tostring(v)\n        local has_even = false\n        for i=1,#s do\n\
    \            local d = tonumber(s:sub(i,i))\n            if d%2 == 0 then\n  \
    \              has_even = true\n                break\n            end\n     \
    \   end\n        if not has_even then table.insert(list, v) end\n    end\n   \
    \ table.sort(list)\n    return list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d5pewx2.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp_d5pewx2.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ your implementation goes here\n\t-- sample implementation:\n\tlocal res = {}\n\
    \tfor i = 1, #x do\n\t\tlocal flag = true\n\t\tlocal num = x[i]\n\t\twhile num\
    \ > 0 do\n\t\t\tif num % 2 == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif flag then res[#res +\
    \ 1] = x[i] end\n\tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- construct list of digits\n    local digits = {}\n    for i = 1, #x do\n \
    \       for _, d in ipairs(to_digits(x[i])) do\n            digits[d] = true\n\
    \        end\n    end\n    -- construct list of unique digits\n    local uniq\
    \ = {}\n    for d, _ in pairs(digits) do\n        uniq[#uniq + 1] = d\n    end\n\
    \    table.sort(uniq)\n    return uniq\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjj6x6t_.lua:9:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpjjj6x6t_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjjj6x6t_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r = {}\n  for i, v in ipairs(x) do\n    local n = v\n    while n > 0 do\n  \
    \    if n % 2 == 0 then\n        break\n      end\n      n = math.floor(n / 10)\n\
    \    end\n    if n == 0 then\n      r[#r + 1] = v\n    end\n  end\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3yw5kbo.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp_3yw5kbo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\treturn\
    \ {x}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vh95msd.lua:12:\
    \ expected: {1, 15, 33}\nactual: {{15, 33, 1422, 1}}\nstack traceback:\n\t/tmp/tmp5vh95msd.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ numbers = {}\n  local result = {}\n  local test_list = {}\n  for i = 1, #x do\n\
    \    numbers[i] = tostring(x[i])\n  end\n  for i = 1, #numbers do\n    for j =\
    \ 1, #numbers[i] do\n      test_list[#test_list + 1] = numbers[i]:sub(j, j)\n\
    \    end\n  end\n  for i = 1, #test_list do\n    if test_list[i] % 2 == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ws4l7sc.lua:28:\
    \ expected: {1, 15, 33}\nactual: false\nstack traceback:\n\t/tmp/tmp1ws4l7sc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ y = {}\n\tfor i,v in ipairs(x) do\n\t\tlocal v = math.abs(v)\n\t\tlocal is_odd\
    \ = true\n\t\twhile v > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d%2 == 0 then\n\
    \t\t\t\tis_odd = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v/10)\n\
    \t\tend\n\t\tif is_odd then\n\t\t\ttable.insert(y,x[i])\n\t\tend\n\tend\n\treturn\
    \ y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum5yhcch.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpum5yhcch.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  local t = {1,2,3,4,5,6,7,8,9}\n  for i = 1, #x do\n    local n =\
    \ x[i]\n    local m = 0\n    for d = 1, #t do\n      if math.mod(n, t[d]) == 0\
    \ then\n        m = m + 1\n      end\n    end\n    if m == 1 then\n      res[#res\
    \ + 1] = n\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcd3kjzb.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmprcd3kjzb.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprcd3kjzb.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r = {}\n  for _,v in ipairs(x) do\n    if not string.find(tostring(v), \"[24680]\"\
    ) then\n      table.insert(r, v)\n    end\n  end\n  table.sort(r)\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    if not even_digits(v) then\n      table.insert(t,\
    \ v)\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoio39hof.lua:8:\
    \ attempt to call a nil value (global 'even_digits')\nstack traceback:\n\t/tmp/tmpoio39hof.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpoio39hof.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ TODO: implement here\n  local even = {0, 2, 4, 6, 8}\n  local result = {}\n\
    \  for i = 1, #x do\n    local is_even = false\n    for j = 1, #x[i] do\n    \
    \  local digit = tonumber(x[i]:sub(j, j))\n      for k = 1, #even do\n       \
    \ if digit == even[k] then\n          is_even = true\n          break\n      \
    \  end\n      end\n      if is_even then\n        break\n      end\n    end\n\
    \    if not is_even then\n      table.insert(result, x[i])\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht0q1o75.lua:11:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpht0q1o75.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpht0q1o75.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf9c59_t.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphf9c59_t.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38r24hs8.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp38r24hs8.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\treturn\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvhef4dn.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmppvhef4dn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ x = {table.unpack(x)}\n    local l = #x\n    local res = {}\n    for i = 1,\
    \ l do\n        local num = x[i]\n        local is_even = false\n        while\
    \ num > 0 do\n            local last_digit = num % 10\n            if last_digit\
    \ % 2 == 0 then\n                is_even = true\n                break\n     \
    \       end\n            num = math.floor(num / 10)\n        end\n        if not\
    \ is_even then\n            table.insert(res, x[i])\n        end\n    end\n  \
    \  table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local seen = {}\n    for _,n in ipairs(x) do\n        if not has_even_digit(n)\
    \ then\n            table.insert(seen, n)\n        end\n    end\n    table.sort(seen)\n\
    \    return seen\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6h7ccybd.lua:8:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp6h7ccybd.lua:8: in local 'candidate'\n\t/tmp/tmp6h7ccybd.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i,v in ipairs(x) do\n        if is_unique(v) then\
    \ result[#result+1] = v end\n    end\n    sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmputmfwwy7.lua:8:\
    \ attempt to call a nil value (global 'is_unique')\nstack traceback:\n\t/tmp/tmputmfwwy7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmputmfwwy7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- your code goes here...\nend\nassert(unique_digits{13, 7, 20} == {7})\nassert(unique_digits{0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9} == {1, 3, 5, 7, 9})\nassert(unique_digits{111, 222,\
    \ 333, 444, 555, 666, 777, 888, 999} == {111, 333, 555, 777, 999})\nassert(unique_digits{}\
    \ == {})\nprint(\"[+] All test-cases passed.\")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp2sm1bdz_.lua:8: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp2sm1bdz_.lua:8: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgg162342.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpgg162342.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ uniques={}\n  for _,v in ipairs(x) do\n    local found = false\n    while v\
    \ > 0 do\n      if (v % 2) == 0 then\n        found = true\n        break\n  \
    \    end\n      v = v / 10\n    end\n    if not found then\n      table.insert(uniques,\
    \ v)\n    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckyzynal.lua:26:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmpckyzynal.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return x:filter(\n        function(t)\n            return not t:tostring():match(\"\
    %d+\"):match(\"%d%d+\")\n        end\n    ):sort()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hbtew2v.lua:6:\
    \ attempt to call a nil value (method 'filter')\nstack traceback:\n\t/tmp/tmp6hbtew2v.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6hbtew2v.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_vcqd6t.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1_vcqd6t.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  for _, a in ipairs(x) do\n    local b = true\n    while (a > 0) do\n\
    \      if ((a % 10) % 2 == 0) then\n        b = false\n        break\n      end\n\
    \      a = math.floor(a / 10)\n    end\n    if (b) then\n      table.insert(y,\
    \ a)\n    end\n  end\n  return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbl7ekoml.lua:26:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpbl7ekoml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ answer = {}\n  for _,num in ipairs(x) do\n    if is_odd(num) then\n      table.insert(answer,\
    \ num)\n    end\n  end\n  return answer\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q70aqc2.lua:8:\
    \ attempt to call a nil value (global 'is_odd')\nstack traceback:\n\t/tmp/tmp7q70aqc2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp7q70aqc2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ res = {}\n\tfor _, value in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile\
    \ value > 0 do\n\t\t\tlocal d = value % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\t\
    has_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvalue = math.floor(value / 10)\n\
    \t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(res, value)\n\t\tend\n\t\
    end\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp890egbx3.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp890egbx3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local v = x[i]\n    local odd = true\n    while\
    \ v > 0 do\n      local d = v % 10\n      if d % 2 == 0 then\n        odd = false\n\
    \        break\n      end\n      v = math.floor(v / 10)\n    end\n    if odd then\
    \ t[#t + 1] = x[i] end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ digits = {}\n\tfor _,v in ipairs(x) do\n\t\tlocal last_unique = true\n\t\tfor\
    \ d in string.gmatch(tostring(v), \".\") do\n\t\t\tif tonumber(d) % 2 == 0 then\n\
    \t\t\t\tlast_unique = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif last_unique\
    \ then\n\t\t\ttable.insert(digits, v)\n\t\tend\n\tend\n\ttable.sort(digits)\n\t\
    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _,n in ipairs(x) do\n        if n % 2 == 1 then\n  \
    \          table.insert(res, n)\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4wvnddm.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpt4wvnddm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ TODO: Implement!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_zi09ni.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp3_zi09ni.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for i = 1, #x do\n    local num = x[i]\n    local is_even = false\n\
    \    while num > 0 do\n      local d = num % 10\n      if d % 2 == 0 then\n  \
    \      is_even = true\n        break\n      end\n      num = math.floor(num /\
    \ 10)\n    end\n    if not is_even then\n      table.insert(result, x[i])\n  \
    \  end\n  end\n  table.sort(result)\n  return result\nend\nprint(table.concat(unique_digits({4,\
    \ 8, 15, 16, 23, 42}), \" \"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '15

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local r = {}\n    local is_odd = true\n    for i = 1, #x do\n        local y\
    \ = x[i]\n        while y > 0 do\n            local d = y % 10\n            if\
    \ d % 2 == 0 then\n                is_odd = false\n                break\n   \
    \         end\n            y = math.floor(y / 10)\n        end\n        if is_odd\
    \ then\n            r[#r + 1] = x[i]\n        end\n        is_odd = true\n   \
    \ end\n    return table.sort(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrfuv2sp.lua:29:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpcrfuv2sp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique = {}\n  for _, value in ipairs(x) do\n    local has_even = false\n  \
    \  for char in tostring(value):gmatch('.') do\n      if tonumber(char) % 2 ==\
    \ 0 then\n        has_even = true\n        break\n      end\n    end\n    if not\
    \ has_even then\n      table.insert(unique, value)\n    end\n  end\n  table.sort(unique)\n\
    \  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i, v in ipairs(x) do\n        if is_odd(v) then\n\
    \            table.insert(result, v)\n        end\n    end\n    -- sort it!\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5fbnr4sl.lua:8:\
    \ attempt to call a nil value (global 'is_odd')\nstack traceback:\n\t/tmp/tmp5fbnr4sl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5fbnr4sl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, i in ipairs(x) do\n    local str = tostring(i)\n    local\
    \ found = false\n    for j = 1, #str do\n      if str:sub(j, j) % 2 == 0 then\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(res, i)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyjy7wpl.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqyjy7wpl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ result = {}\n\tfor i,v in ipairs(x) do\n\t\tif not has_even_digit(v) then\n\t\
    \t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1c8n00q.lua:8:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpe1c8n00q.lua:8: in local 'candidate'\n\t/tmp/tmpe1c8n00q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _,v in ipairs(x) do\n        local found_even = false\n\
    \        for i=0,math.huge do\n            local digit = v % 10\n            if\
    \ digit % 2 == 0 then\n                found_even = true\n                break\n\
    \            end\n            v = v // 10\n            if v == 0 then\n      \
    \          break\n            end\n        end\n        if not found_even then\n\
    \            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppza4zvls.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmppza4zvls.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ body\n\tlocal res = {}\n\tlocal function is_unique(x)\n\t\t-- body\n\t\tlocal\
    \ x = tostring(x)\n\t\tlocal t = {}\n\t\tfor i = 1, #x do\n\t\t\tif t[x:sub(i,i)]\
    \ then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tt[x:sub(i,i)] = true\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\tend\n\tfor i = 1, #x do\n\t\tif is_unique(x[i])\
    \ then\n\t\t\tres[#res+1] = x[i]\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporott5jq.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 15}\nstack traceback:\n\t/tmp/tmporott5jq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tlocal count = 0\n\tfor i, v in ipairs(x) do\n\t\tlocal a = v / 10\n\
    \t\tlocal is_even = false\n\t\twhile a ~= 0 do\n\t\t\tlocal aa = a % 10\n\t\t\t\
    if aa % 2 == 0 then\n\t\t\t\tis_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\
    a = a / 10\n\t\tend\n\t\tif not is_even then\n\t\t\tcount = count + 1\n\t\t\t\
    t[count] = v\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoinc7onp.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpoinc7onp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ your code goes here\n\tx = table.sort(x)\n\tlocal new_table = {}\n\tfor _, i\
    \ in ipairs(x) do\n\t\tif i:find(\"[2468]\") == nil then\n\t\t\ttable.insert(new_table,\
    \ i)\n\t\tend\n\tend\n\treturn new_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local evens = {[0] = true, [2] = true, [4] = true, [6] = true, [8] = true}\n\
    \    local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ has_even = false\n        while num > 0 do\n            if evens[num % 10] then\n\
    \                has_even = true\n                break\n            end\n   \
    \         num = num // 10\n        end\n        if not has_even then\n       \
    \     res[#res + 1] = x[i]\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmoos9lx.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpjmoos9lx.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  --[[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7jvtf2_o.lua:18: unfinished long comment (starting at line
    7) near <eof>

    '
  stdout: ''
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ l = {}\n  for _,v in ipairs(x) do\n    local even = false\n    for d in tostring(v):gmatch('%d')\
    \ do\n      if tonumber(d) % 2 == 0 then\n        even = true\n        break\n\
    \      end\n    end\n    if not even then\n      table.insert(l, v)\n    end\n\
    \  end\n  table.sort(l)\n  return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i, x in ipairs(x) do\n        local has_even = false\n\
    \        while x > 0 do\n            local n = x % 10\n            if n % 2 ==\
    \ 0 then\n                has_even = true\n                break\n           \
    \ end\n            x = math.floor(x / 10)\n        end\n        if not has_even\
    \ then\n            table.insert(res, i)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5um6lkw4.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmp5um6lkw4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local noEvens = {}\n    for _,i in ipairs(x) do\n        local str = tostring(i)\n\
    \        local hasEven = false\n        for j = 1,#str do\n            if (tonumber(str:sub(j,j))\
    \ % 2 == 0) then\n                hasEven = true\n                break\n    \
    \        end\n        end\n        if not hasEven then table.insert(noEvens, i)\
    \ end\n    end\n    table.sort(noEvens)\n    return noEvens\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38r24hs8.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp38r24hs8.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return require'Test.More'.ok(false, 'Not yet implemented')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wrryxcu.lua:6:\
    \ module 'Test.More' not found:\n\tno field package.preload['Test.More']\n\tno\
    \ file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/Test/More.lua'\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/Test/More/init.lua'\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/Test/More.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/Test/More/init.lua'\n\
    \tno file './Test/More.lua'\n\tno file './Test/More/init.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/Test/More.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './Test/More.so'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/Test.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './Test.so'\nstack traceback:\n\t/tmp/tmp9wrryxcu.lua:6: in local 'candidate'\n\
    \t/tmp/tmp9wrryxcu.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ nx = {}\n  for i, v in ipairs(x) do\n    if not is_even(v) then table.insert(nx,\
    \ v) end\n  end\n  local cmp = function(a, b) return a < b end\n  table.sort(nx,\
    \ cmp)\n  return nx\nend\nassert(unique_digits({6, 11, 4, 8, 111}) == {11, 111})\n\
    assert(unique_digits({12, 11, 4, 8, 3}) == {3, 11})\nassert(unique_digits({12,\
    \ 10, 4, 20, 3}) == {})\nassert(unique_digits({1, 1, 3, 3, 7, 2, 42}) == {1, 7})\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmplgy7s5rg.lua:8: attempt to call a nil value (global 'is_even')\n\
    stack traceback:\n\t/tmp/tmplgy7s5rg.lua:8: in local 'unique_digits'\n\t/tmp/tmplgy7s5rg.lua:14:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ list = {}\n  for i, j in ipairs(x) do\n    local elem = true\n    for _, k in\
    \ ipairs(string.match(tostring(j), \".\")) do\n      if k % 2 == 0 then\n    \
    \    elem = false\n        break\n      end\n    end\n    if elem then table.insert(list,\
    \ j) end\n  end\n  return list\nend\nprint(table.concat(unique_digits{2, 3, 5,\
    \ 7, 9, 11, 13, 15, 17, 963, 1276}, \",\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2,3,5,7,9,11,13,15,17,963,1276\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp1_wgv9g4.lua:24: expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack\
    \ traceback:\n\t/tmp/tmp1_wgv9g4.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  print(\"\
    unique_digits(x)\")\n  -- print(\"x =\", x)\n  local s = {}; -- assume x is sorted\n\
    \  -- insert all values into set\n  for i = 1, #x do\n    s[x[i]] = true;\n  end\n\
    \  local result = {};\n  for i = 1, #x do\n    local j = x[i];\n    if s[j] then\n\
    \      s[j] = nil;\n      -- print(\"j =\", j)\n      local num = j;\n      while\
    \ num > 0 do\n        local digit = num % 10;\n        -- print(\"digit =\", digit)\n\
    \        if digit % 2 == 0 then\n          -- print(\"found even digit\", digit,\
    \ \"in\", j)\n          break;\n        end\n        num = (num - digit) / 10;\n\
    \      end\n      if num == 0 then\n        -- print(\"add\", j)\n        result[#result\
    \ + 1] = j;\n      end\n    end\n  end\n  return result;\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "unique_digits(x)\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpdctnopbv.lua:41: expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\
    \t/tmp/tmpdctnopbv.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ we can use a set to eliminate duplicates\n  local s = Set(x)\n  local res =\
    \ {}\n  for i in s:it() do\n    if not has_even_digit(i) then\n      res[#res+1]\
    \ = i\n    end\n  end\n  -- Lua provides a function for sorting\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl421t64m.lua:7:\
    \ attempt to call a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmpl421t64m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl421t64m.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local uniques = {}\n    for _, n in ipairs(x) do\n        if not has_even_digit(n)\
    \ then\n            table.insert(uniques, n)\n        end\n    end\n    -- sort_ascending(uniques)\n\
    \    return uniques\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewq1memo.lua:8:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpewq1memo.lua:8: in local 'candidate'\n\t/tmp/tmpewq1memo.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, num in ipairs(x) do\n    local str = tostring(num)\n    if\
    \ not str:find(\"[24680]\") then\n      table.insert(res, num)\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for i = 1, #x do\n        local odd = true\n        for j\
    \ = 1, #tostring(x[i]) do\n            if tonumber(tostring(x[i]):sub(j, j)) %\
    \ 2 == 0 then\n                odd = false\n                break\n          \
    \  end\n        end\n        if odd then\n            table.insert(t, x[i])\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nassert(unique_digits({1,\
    \ 2, 3, 7, 8, 11, 12, 13, 17, 18, 19}) == {1, 3, 7, 11, 13, 17, 19})\nassert(unique_digits({20,\
    \ 21, 23, 24, 27, 28, 29}) == {})\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpylprst3k.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpylprst3k.lua:22: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local i, j, t = 1, 1, {}\n    while i <= #x do\n        j = x[i]\n        t[#t+1]\
    \ = math.abs(j)\n        i = i + 1\n    end\n    local function f(n)\n       \
    \ local y = tostring(n)\n        for i = 1, #y do\n            if tonumber(y:sub(i,\
    \ i)) % 2 == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local r = {}\n    for i = 1, #t do\n      \
    \  if f(t[i]) then\n            r[#r+1] = t[i]\n        end\n    end\n    table.sort(r)\n\
    \    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local a = {}\n    for _, v in ipairs(x) do\n        if not v:find('[2468]')\
    \ then\n            a[#a+1] = v\n        end\n    end\n    table.sort(a)\n   \
    \ return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtts0fuc.lua:8:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmphtts0fuc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphtts0fuc.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_even(n)\n        while n > 0 do\n            if (n % 10) %\
    \ 2 == 0 then\n                return false\n            end\n            n =\
    \ math.floor(n / 10)\n        end\n        return true\n    end\n    local out\
    \ = {}\n    for _, n in ipairs(x) do\n        if is_even(n) then\n           \
    \ table.insert(out, n)\n        end\n    end\n    table.sort(out)\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    if x[i]%2 == 1 then\n      res[#res+1] = x[i]\n\
    \    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxegr3v9z.lua:20:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpxegr3v9z.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ function isEvenDigit(x)\n\t\tif x > 0 then\n\t\t\tlocal d = x % 10\n\t\t\tif\
    \ d % 2 == 0 then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn isEvenDigit(x/10)\n\
    \t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tlocal function filter(arr)\n\
    \t\tif #arr == 0 then\n\t\t\treturn {}\n\t\telse\n\t\t\tlocal head = arr[1]\n\t\
    \t\tlocal arr1 = {}\n\t\t\tfor i = 2, #arr do\n\t\t\t\tarr1[#arr1 + 1] = arr[i]\n\
    \t\t\tend\n\t\t\tlocal tail = filter(arr1)\n\t\t\tif isEvenDigit(head) then\n\t\
    \t\t\treturn tail\n\t\t\telse\n\t\t\t\treturn {head, unpack(tail)}\n\t\t\tend\n\
    \t\tend\n\tend\n\tlocal function sort(arr)\n\t\tif #arr == 0 then\n\t\t\treturn\
    \ {}\n\t\telse\n\t\t\tlocal pivot = arr[1]\n\t\t\tlocal arr1 = {}\n\t\t\tlocal\
    \ arr2 = {}\n\t\t\tfor i = 2, #arr do\n\t\t\t\tif arr[i] < pivot then\n\t\t\t\t\
    \tarr1[#arr1 + 1] = arr[i]\n\t\t\t\telse\n\t\t\t\t\tarr2[#arr2 + 1] = arr[i]\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\treturn {unpack(sort(arr1)), pivot, unpack(sort(arr2))}\n\
    \t\tend\n\tend\n\treturn sort(filter(x))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi97x3nw5.lua:31:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpi97x3nw5.lua:31:\
    \ in upvalue 'filter'\n\t/tmp/tmpi97x3nw5.lua:27: in upvalue 'filter'\n\t/tmp/tmpi97x3nw5.lua:27:\
    \ in upvalue 'filter'\n\t/tmp/tmpi97x3nw5.lua:27: in local 'filter'\n\t/tmp/tmpi97x3nw5.lua:52:\
    \ in local 'candidate'\n\t/tmp/tmpi97x3nw5.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local r = {}\n    for i,v in ipairs(x) do\n        local has_even = false\n\
    \        while v > 0 do\n            if v % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = v // 10\n  \
    \      end\n        if not has_even then\n            r[#r+1] = x[i]\n       \
    \ end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxtp55od.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmphxtp55od.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local y = {}\n    for i,v in ipairs(x) do\n        local z = v\n        while\
    \ z > 0 do\n            if z % 2 == 0 then\n                break\n          \
    \  end\n            z = z // 10\n        end\n        if z == 0 then\n       \
    \     y[#y+1] = v\n        end\n    end\n    table.sort(y)\n    return y\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ digits = {}\n\tlocal p = function(x) \n\t\tlocal s = {}\n\t\tfor i = 1, #x do\n\
    \t\t\tlocal d = x:sub(i, i)\n\t\t\tif d:match(\"%d\") and not s[d] then\n\t\t\t\
    \ts[d] = true\n\t\t\tend\n\t\tend\n\t\treturn s\n\tend\n\tfor i = 1, #x do\n\t\
    \tlocal u = x[i]\n\t\tlocal d = p(tostring(u))\n\t\tlocal l = {}\n\t\tfor k, v\
    \ in pairs(d) do l[#l + 1] = k end\n\t\ttable.sort(l)\n\t\tdigits[#digits + 1]\
    \ = {x = u, d = l}\n\tend\n\ttable.sort(digits, function(a, b) return #a.d < #b.d\
    \ end)\n\tlocal result = {}\n\tfor i = 1, #digits do\n\t\tresult[#result + 1]\
    \ = digits[i].x\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53yhxbyo.lua:36:\
    \ expected: {1, 15, 33}\nactual: {1, 33, 15, 1422}\nstack traceback:\n\t/tmp/tmp53yhxbyo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local even_digits = {[0] = true, [2] = true, [4] = true, [6] = true, [8] = true}\n\
    \    local arr = {}\n    for i = 1, #x do\n        local temp = x[i]\n       \
    \ local t2 = {}\n        while temp > 0 do\n            local d = temp % 10\n\
    \            temp = math.floor(temp / 10)\n            if not even_digits[d] then\n\
    \                t2[#t2 + 1] = d\n            end\n        end\n        if #t2\
    \ > 0 then\n            local t3 = 0\n            for j = 1, #t2 do\n        \
    \        t3 = t3 * 10 + t2[j]\n            end\n            arr[#arr + 1] = t3\n\
    \        end\n    end\n    table.sort(arr)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp319em2x.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 1, 33, 51}\nstack traceback:\n\t/tmp/tmpp319em2x.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjerfzbc.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpvjerfzbc.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshzd7rc7.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpshzd7rc7.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local xi = x[i]\n    if not(even_digit(xi))\
    \ then\n      table.insert(res, xi)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpos7i1grf.lua:9:\
    \ attempt to call a nil value (global 'even_digit')\nstack traceback:\n\t/tmp/tmpos7i1grf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpos7i1grf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ digits_list ={}\n  for i = 1,#x do\n    local n = x[i]\n    local digits = {}\n\
    \    while n > 0 do\n      local digit = n % 10\n      if digit % 2 == 0 then\n\
    \        digits[#digits+1] = digit\n      end\n      n = math.floor(n / 10)\n\
    \    end\n    digits_list[#digits_list+1] = digits\n  end\n  local function is_unique(i)\n\
    \    for j = 1,#digits_list do\n      if i ~= j and digits_list[i] == digits_list[j]\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ unique_digits_list = {}\n  for i = 1,#digits_list do\n    if is_unique(i) then\n\
    \      unique_digits_list[#unique_digits_list+1] = x[i]\n    end\n  end\n  return\
    \ unique_digits_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4fjwk_1.lua:39:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpi4fjwk_1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  for _, v in ipairs(x) do\n    local t = {}\n    local is_odd = true\n\
    \    for n in string.gmatch(tostring(v), \"(%d)\") do\n      if n == \"0\" or\
    \ n == \"2\" or n == \"4\" or n == \"6\" or n == \"8\" then\n        is_odd =\
    \ false\n        break\n      end\n      t[n] = true\n    end\n    if is_odd then\n\
    \      y[#y + 1] = v\n    end\n  end\n  table.sort(y)\n  return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t = {}\n  for i = 1, #x do\n    local d = x[i]\n    while d > 0 do\n      local\
    \ r = d % 10\n      if r % 2 == 0 then\n        break\n      end\n      d = math.floor(d\
    \ / 10)\n    end\n    if d == 0 then\n      t[#t + 1] = x[i]\n    end\n  end\n\
    \  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ r = {}\n\tfor i = 1, #x do\n\t\tlocal n = x[i]\n\t\tlocal ok = true\n\t\twhile\
    \ n > 0 do\n\t\t\tif n % 2 == 0 then\n\t\t\t\tok = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\t\tn = math.floor(n / 10)\n\t\tend\n\t\tif ok then\n\t\t\ttable.insert(r,\
    \ x[i])\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if type(x) ~= \"table\" then\n        return nil\n    end\n    local r = {}\n\
    \    for i = 1, #x do\n        local n = x[i]\n        local unique = true\n \
    \       for d in string.gmatch(tostring(n), \"%d\") do\n            if (d % 2)\
    \ == 0 then\n                unique = false\n                break\n         \
    \   end\n        end\n        if unique then\n            table.insert(r, n)\n\
    \        end\n    end\n    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ set = {}\n  for i, v in ipairs(x) do\n    if all_odd(v) then\n      table.insert(set,\
    \ v)\n    end\n  end\n  table.sort(set)\n  return set\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59v4z695.lua:8:\
    \ attempt to call a nil value (global 'all_odd')\nstack traceback:\n\t/tmp/tmp59v4z695.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp59v4z695.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    local i = 0\n    local result = {}\n    local j = 0\n    while\
    \ i < #x do\n        local n = x[i]\n        local found = false\n        while\
    \ n > 0 do\n            local d = n % 10\n            if d % 2 == 0 then\n   \
    \             found = true\n                break\n            end\n         \
    \   n = math.floor(n / 10)\n        end\n        if not found then\n         \
    \   j = j + 1\n            result[j] = x[i]\n        end\n        i = i + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6gwxur5.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpy6gwxur5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy6gwxur5.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tfor _,v in ipairs(x) do\n\t\tif not v:to_string():match('[02468]')\
    \ then\n\t\t\tt[#t+1] = v\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend\n\
    assert_equal({1,3,5,7}, unique_digits({1,2,3,4,5,6,7,8,9}))\nassert_equal({1,2,3,4,5,6,7,8,9},\
    \ unique_digits({}))\nassert_equal({1,3,5,7,9}, unique_digits({1,2,3,4,5,6,7,8,9,10}))\n\
    assert_equal({1,2,3,4,5,6,7,8,9,10}, unique_digits({10}))\nassert_equal({11,13,15,17,19},\
    \ unique_digits({11,12,13,14,15,16,17,18,19,20}))\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpi4wf5j7c.lua:8: attempt to index a number value (local 'v')\n\
    stack traceback:\n\t/tmp/tmpi4wf5j7c.lua:8: in local 'unique_digits'\n\t/tmp/tmpi4wf5j7c.lua:15:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = { }\n    for _, v in ipairs(x) do\n        local flag = true\n   \
    \     for d in tostring(v):gmatch(\"%d\") do\n            d = tonumber(d)\n  \
    \          if d % 2 == 0 then\n                flag = false\n                break\n\
    \            end\n        end\n        if flag then\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    return t\nend\nassert(unique_digits({10,\
    \ 300, 981, 202, 134, 111}) == {111, 134})\nassert(unique_digits({10, 20, 8})\
    \ == {})\nassert(unique_digits({1, 2, 3, 4, 5, 6, 7, 8, 9}) == {1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9})\nassert(unique_digits({333, 987, 431, 306, 454}) == {431, 987})\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp_i_aeu6y.lua:23: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp_i_aeu6y.lua:23: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjce2565.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmptjce2565.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshzd7rc7.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpshzd7rc7.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ TODO: return list of unique digits that exist in x\n\tlocal result={}\n\tfor\
    \ i=1,#x do\n\t\tlocal x_str=tostring(x[i])\n\t\tlocal even_found=false\n\t\t\
    for j=1,#x_str do\n\t\t\tif tonumber(x_str:sub(j,j))%2==0 then\n\t\t\t\teven_found=true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not even_found then\n\t\t\ttable.insert(result,x[i])\n\
    \t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyjy7wpl.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqyjy7wpl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ result = {}\n\tfor i,v in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile\
    \ v ~= 0 do\n\t\t\tlocal digit = v % 10\n\t\t\tif digit % 2 == 0 then\n\t\t\t\t\
    has_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\t\
    end\n\t\tif not has_even then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeebgqdxd.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpeebgqdxd.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ result, t = {}, {}\n\tfor i,v in ipairs(x) do\n\t\tlocal v1 = tostring(v)\n\t\
    \tlocal even = false\n\t\tfor i=1,#v1 do\n\t\t\tif tonumber(v1:sub(i,i)) % 2 ==\
    \ 0 then\n\t\t\t\teven = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not even\
    \ then\n\t\t\tt[v] = true\n\t\tend\n\tend\n\tfor k,_ in pairs(t) do\n\t\ttable.insert(result,\
    \ k)\n\tend\n\ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if not x then return nil end\n    local str = \"\"\n    for _, v in ipairs(x)\
    \ do\n        str = str .. tostring(v)\n    end\n    local set = {}\n    for i\
    \ = 1, #str do\n        set[string.sub(str, i, i)] = true\n    end\n    local\
    \ array = {}\n    for k, _ in pairs(set) do\n        table.insert(array, k)\n\
    \    end\n    table.sort(array)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiu5f29y1.lua:26:\
    \ expected: {1, 15, 33}\nactual: {\"1\", \"2\", \"3\", \"4\", \"5\"}\nstack traceback:\n\
    \t/tmp/tmpiu5f29y1.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for _,value in ipairs(x) do\n        if tonumber(string.gsub(tostring(value),\
    \ '[02468]', '')) == value then\n            table.insert(result, value)\n   \
    \     end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg15e7gy1.lua:8:\
    \ bad argument #2 to 'tonumber' (base out of range)\nstack traceback:\n\t/tmp/tmpg15e7gy1.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpg15e7gy1.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  if\
    \ #x == 0 then\n    return {}\n  end\n  local unique = {}\n  for _, v in ipairs(x)\
    \ do\n    if v > 0 then\n      local has_even = false\n      for digit in tostring(v):gmatch('.')\
    \ do\n        if (tonumber(digit) % 2) == 0 then\n          has_even = true\n\
    \          break\n        end\n      end\n      if not has_even then\n       \
    \ table.insert(unique, v)\n      end\n    end\n  end\n  return unique\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1qfjni5.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpu1qfjni5.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ n = x.size\n  local l1 = 0\n  local l2 = 0\n  local l3 = 0\n  local l4 = 0\n\
    \  local l5 = 0\n  local l6 = 0\n  local l7 = 0\n  local l8 = 0\n  local l9 =\
    \ 0\n  local l0 = 0\n  local res = {}\n  local j = 0\n  for i = 1, n do\n    local\
    \ v = x[i]\n    while v > 0 do\n      local d = v % 10\n      if d == 1 then l1\
    \ = 1 end\n      if d == 2 then l2 = 1 end\n      if d == 3 then l3 = 1 end\n\
    \      if d == 4 then l4 = 1 end\n      if d == 5 then l5 = 1 end\n      if d\
    \ == 6 then l6 = 1 end\n      if d == 7 then l7 = 1 end\n      if d == 8 then\
    \ l8 = 1 end\n      if d == 9 then l9 = 1 end\n      if d == 0 then l0 = 1 end\n\
    \      v = v // 10\n    end\n    if l0 == 0 and l1 == 0 and l2 == 0 and l3 ==\
    \ 0 and l4 == 0 and l5 == 0\n       and l6 == 0 and l7 == 0 and l8 == 0 and l9\
    \ == 0 then\n      j = j + 1\n      res[j] = x[i]\n    end\n    l0 = 0\n    l1\
    \ = 0\n    l2 = 0\n    l3 = 0\n    l4 = 0\n    l5 = 0\n    l6 = 0\n    l7 = 0\n\
    \    l8 = 0\n    l9 = 0\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukgip6rg.lua:19:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpukgip6rg.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpukgip6rg.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ body\n\tlocal t = {}\n\tfor i = 1, #x do\n\t\tif x[i] < 10 or x[i]%2 ~= 0 then\n\
    \t\t\tt[#t+1] = x[i]\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvwckdcw.lua:21:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmptvwckdcw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ unique = {}\n\tfor i = 1, #x do\n\t\tif #tostring(x[i]) == 1 then\n\t\t\tunique[#unique\
    \ + 1] = x[i]\n\t\telse\n\t\t\tfor j = 1, #tostring(x[i]) do\n\t\t\t\tif tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n\t\t\t\t\tbreak\n\t\t\t\telseif j == #tostring(x[i]) then\n\
    \t\t\t\t\tunique[#unique + 1] = x[i]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy5ufi9x.lua:26:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpyy5ufi9x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   if\
    \ not x then\n      return {}\n   end\n   local list = {}\n   for _,v in ipairs(x)\
    \ do\n      if not digits_even(v) then\n         list[#list+1] = v\n      end\n\
    \   end\n   table.sort(list)\n   return list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu9mnou4.lua:11:\
    \ attempt to call a nil value (global 'digits_even')\nstack traceback:\n\t/tmp/tmpmu9mnou4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmu9mnou4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r = {}\n  for i,v in ipairs(x) do\n    if not v:find('[02468]') then\n     \
    \ r[#r+1] = v\n    end\n  end\n  table.sort(r)\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiexyxll0.lua:8:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpiexyxll0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpiexyxll0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, i in ipairs(x) do\n        if i ~= 0 and not (i % 2\
    \ == 0) then\n            local u = tostring(i):gsub(\"[^2468]\", \"\")\n    \
    \        if #u == 0 then\n                table.insert(t, i)\n            end\n\
    \        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkacoxk12.lua:25:\
    \ expected: {31, 135}\nactual: {31, 103, 135}\nstack traceback:\n\t/tmp/tmpkacoxk12.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d5pewx2.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp_d5pewx2.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if not x then\n        error('unique_digits: not a list', 2)\n    end\n    if\
    \ #x == 0 then\n        return x\n    end\n    for i = 1, #x do\n        if type(x[i])\
    \ ~= 'number' or x[i] < 0 then\n            error('unique_digits: invalid list',\
    \ 2)\n        end\n    end\n    local res = {}\n    for i = 1, #x do\n       \
    \ local cur = x[i]\n        local has_even_digit = false\n        while cur >\
    \ 0 do\n            local d = cur % 10\n            if d % 2 == 0 then\n     \
    \           has_even_digit = true\n                break\n            end\n  \
    \          cur = math.floor(cur / 10)\n        end\n        if not has_even_digit\
    \ then\n            res[#res + 1] = x[i]\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(n)\n        while n ~= 0 do\n            if (n % 10) %\
    \ 2 == 0 then return false end\n            n = math.floor(n / 10)\n        end\n\
    \        return true\n    end\n    local odd = {}\n    for _, n in ipairs(x) do\n\
    \        if is_odd(n) then\n            table.insert(odd, n)\n        end\n  \
    \  end\n    table.sort(odd)\n    return odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  x\
    \ = x or {}\n  local r = {}\n  local d = {}\n  local t = {}\n  local l = 1\n \
    \ for _, v in ipairs(x) do\n    t[v] = true\n    while v > 0 do\n      local e\
    \ = v % 10\n      if e % 2 == 0 then\n        d[e] = true\n      end\n      v\
    \ = (v - e) / 10\n    end\n  end\n  for i = 0, 9 do\n    if not d[i] then\n  \
    \    r[l] = i\n      l = l + 1\n    end\n  end\n  for k in pairs(t) do\n    t[k]\
    \ = nil\n    for k1, v1 in pairs(t) do\n      if k == v1 then\n        t[k1] =\
    \ nil\n      end\n    end\n    r[l] = k\n    l = l + 1\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaigb23p.lua:43:\
    \ expected: {1, 15, 33}\nactual: {0, 1, 3, 5, 6, 7, 8, 9, 15, 1, 1422, 33}\nstack\
    \ traceback:\n\t/tmp/tmppaigb23p.lua:43: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local digits_count = {}\n    for _, number in ipairs(x) do\n        local digits\
    \ = {}\n        while number > 0 do\n            digits[number % 10] = true\n\
    \            number = number // 10\n        end\n        local key = table.concat(table.keys(digits),\
    \ ' ')\n        if not digits_count[key] then\n            digits_count[key] =\
    \ {}\n        end\n        table.insert(digits_count[key], number)\n    end\n\
    \    local unique_digits = {}\n    for numbers in pairs(digits_count) do\n   \
    \     table.insert(unique_digits, numbers[1])\n    end\n    table.sort(unique_digits)\n\
    \    return unique_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_vxjyvq.lua:13:\
    \ attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpr_vxjyvq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpr_vxjyvq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshzd7rc7.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpshzd7rc7.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local seen = {}\n    for _, n in ipairs(x) do\n        local s = tostring(n)\n\
    \        local has_even_digit = false\n        for i = 1, #s do\n            local\
    \ c = s:sub(i, i)\n            if c % 2 == 0 then\n                has_even_digit\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even_digit then\n            seen[n] = true\n        end\n    end\n    local\
    \ r = {}\n    for i, _ in pairs(seen) do\n        table.insert(r, i)\n    end\n\
    \    table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local a = {}\n    local b = {}\n    for i = 1, #x do\n        a[i] = tostring(x[i])\n\
    \        for c in a[i]:gmatch('%d') do\n            if c:byte() % 2 == 0 then\n\
    \                a[i] = 0\n                break\n            end\n        end\n\
    \        if a[i] ~= 0 then\n            b[#b + 1] = tonumber(a[i])\n        end\n\
    \    end\n    table.sort(b)\n    return b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(n)\n        return n % 2 == 1\n    end\n    local function\
    \ to_digits(n)\n        local res = {}\n        while n > 0 do\n            res[#res\
    \ + 1] = n % 10\n            n = n // 10\n        end\n        return res\n  \
    \  end\n    local function has_odd_digits(n)\n        for _, d in ipairs(to_digits(n))\
    \ do\n            if not is_odd(d) then\n                return false\n      \
    \      end\n        end\n        return true\n    end\n    local res = {}\n  \
    \  for _, n in ipairs(x) do\n        if has_odd_digits(n) then\n            res[#res\
    \ + 1] = n\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpracm4hst.lua:37:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpracm4hst.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if not x then\n        return nil\n    end\n    if #x < 1 then\n        return\
    \ {}\n    end\n    local ans = {}\n    for _, num in ipairs(x) do\n        local\
    \ n = num\n        local even_digit = false\n        while n > 0 do\n        \
    \    local d = n % 10\n            if d % 2 == 0 then\n                even_digit\
    \ = true\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if not even_digit then\n            table.insert(ans,\
    \ num)\n        end\n    end\n    table.sort(ans)\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tx\
    \ = x or {}\n\treturn to_array(\n\t\tas_map(\n\t\t\tas_array(\n\t\t\t\tfrom_to(\n\
    \t\t\t\t\tmath.min(unpack(x)),\n\t\t\t\t\tmath.max(unpack(x))\n\t\t\t\t)\n\t\t\
    \t),\n\t\t\tfunction(n)\n\t\t\t\treturn (#n > 0) and (not n:find(\"%d*[02468]%d*\"\
    ))\n\t\t\tend\n\t\t)\n\t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphjheyua1.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphjheyua1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphjheyua1.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local ret = {}\n    for _, v in ipairs(x) do\n        local n = tostring(v)\n\
    \        local even = false\n        for i = 1, n:len() do\n            if n:sub(i,\
    \ i) % 2 == 0 then\n                even = true\n                break\n     \
    \       end\n        end\n        if not even then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ ret = {}\n  for _, i in ipairs(x) do\n    if i % 2 == 1 then\n      local is_unique\
    \ = true\n      for char in tostring(i):gmatch(\".\") do\n        if tonumber(char)\
    \ % 2 == 0 then\n          is_unique = false\n          break\n        end\n \
    \     end\n      if is_unique then table.insert(ret, i) end\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr7roavv.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpjr7roavv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if type(x) == \"number\" then\n        x = {x}\n    end\n    local res = {}\n\
    \    for _, el in ipairs(x) do\n        local digits = {}\n        for s in (\"\
    \"..el):gmatch(\".\") do\n            local n = tonumber(s)\n            if n\
    \ % 2 == 1 then\n                digits[n] = true\n            end\n        end\n\
    \        if next(digits) then\n            table.insert(res, el)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao62zmzz.lua:28:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpao62zmzz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, e in ipairs(x) do\n    local str = tostring(e)\n    local\
    \ even = false\n    for i = 1, #str do\n      if tonumber(str:sub(i, i)) % 2 ==\
    \ 0 then\n        even = true\n        break\n      end\n    end\n    if not even\
    \ then\n      table.insert(res, e)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ t, i = {}, 1\n  for n in all(x) do\n    if n % 2 ~= 0 then\n      t[i] = n\n\
    \      i = i + 1\n    end\n  end\n  return t\nend\nassert(eq(unique_digits({22,\
    \ 13, 45, 34, 25, 26, 17, 8, 51}),\n  {13, 17, 25, 51}))\nassert(eq(unique_digits({1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1}),\n  {1}))\nassert(eq(unique_digits({1, 3, 5, 7, 9,\
    \ 11, 13, 15, 17}),\n  {1, 3, 5, 7, 9, 11, 13, 15, 17}))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp7nsgyfk2.lua:7: attempt to call a nil value (global 'all')\n\
    stack traceback:\n\t/tmp/tmp7nsgyfk2.lua:7: in local 'unique_digits'\n\t/tmp/tmp7nsgyfk2.lua:15:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ your code goes here\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ even = false\n\t\twhile v > 0 do\n\t\t\tif (v % 10) % 2 == 0 then\n\t\t\t\t\
    even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\
    \t\tif not even then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz27cu2h.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpsz27cu2h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local allDigits = {}\n    local res = {}\n    for _, v in ipairs(x) do\n   \
    \     local hasEven = false\n        while v > 0 do\n            local digit =\
    \ v % 10\n            if digit % 2 == 0 then\n                hasEven = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not hasEven then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiwp_l2r.lua:28:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpyiwp_l2r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    local uniques = {}\n    for _, v in ipairs(x) do\n  \
    \      local str = tostring(v)\n        local unique = true\n        for i = 1,\
    \ #str do\n            local c = str:sub(i, i)\n            if tonumber(c) % 2\
    \ == 0 then\n                unique = false\n                break\n         \
    \   end\n        end\n        if unique then\n            uniques[#uniques + 1]\
    \ = v\n        end\n    end\n    table.sort(uniques)\n    return uniques\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local s = {}\n    for _, v in ipairs(x) do\n        if odd_digits(v) then\n\
    \            s[#s + 1] = v\n        end\n    end\n    table.sort(s)\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp29qp4bkd.lua:8:\
    \ attempt to call a nil value (global 'odd_digits')\nstack traceback:\n\t/tmp/tmp29qp4bkd.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp29qp4bkd.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local num = x[i]\n    local even_digits =\
    \ false\n    while num > 0 do\n      local digit = num % 10\n      if digit %\
    \ 2 == 0 then\n        even_digits = true\n        break\n      end\n      num\
    \ = (num - digit) / 10\n    end\n    if not even_digits then res[#res + 1] = x[i]\
    \ end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local new_list = {}\n    for i = 1, #x do\n        local num = x[i]\n      \
    \  if not has_even_digit(num) then\n            new_list[#new_list + 1] = num\n\
    \        end\n    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljrpocms.lua:9:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpljrpocms.lua:9: in local 'candidate'\n\t/tmp/tmpljrpocms.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function p(x)\n        local s = x%10\n        if (s%2) == 0 then\n  \
    \          return false\n        else\n            while x > 0 do\n          \
    \      x = math.floor(x/10)\n                s = x%10\n                if (s%2)\
    \ == 0 then\n                    return false\n                end\n         \
    \   end\n            return true\n        end\n    end\n    local function f(x,\
    \ y)\n        if p(x) then\n            return x\n        else\n            return\
    \ y\n        end\n    end\n    return List.reduce(f, x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvtoyqcwm.lua:28:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmpvtoyqcwm.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpvtoyqcwm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for i = 1, #x do\n    local temp = x[i]\n    local flag = false\n\
    \    while temp > 0 do\n      if temp % 2 == 0 then\n        flag = true\n   \
    \     break\n      end\n      temp = math.floor(temp / 10)\n    end\n    if not\
    \ flag then\n      res[#res + 1] = x[i]\n    end\n  end\n  table.sort(res)\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ result = {}\n\tfor i = 1, #x do\n\t\tlocal list = {}\n\t\tlocal number = x[i]\n\
    \t\twhile number > 0 do\n\t\t\tlocal digit = number % 10\n\t\t\tnumber = (number\
    \ - digit) / 10\n\t\t\ttable.insert(list, digit)\n\t\tend\n\t\ttable.insert(result,\
    \ list)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hvbeguc.lua:23:\
    \ expected: {1, 15, 33}\nactual: {{5, 1.0}, {3, 3.0}, {2, 2.0, 4.0, 1.0}, {1}}\n\
    stack traceback:\n\t/tmp/tmp3hvbeguc.lua:23: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for _,n in ipairs(x) do\n        if not n:to_string():match(\"\
    [02468]\") then\n            res[#res+1] = n\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpxysdx3.lua:8:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpkpxysdx3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkpxysdx3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ r = {}\n\tlocal p = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal u = true\n\t\t\
    while v > 0 do\n\t\t\tlocal r = v % 10\n\t\t\tif r % 2 == 0 then\n\t\t\t\tu =\
    \ false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\t\
    if u then\n\t\t\tp[#p + 1] = i\n\t\tend\n\tend\n\ttable.sort(p)\n\tfor i, v in\
    \ ipairs(p) do\n\t\tr[i] = x[v]\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljessa3n.lua:32:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpljessa3n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ y = {}\n\tfor _, z in ipairs(x) do\n\t\tlocal even = false\n\t\tlocal a = math.floor(z\
    \ / 10)\n\t\twhile a > 0 do\n\t\t\tif (a % 10) % 2 == 0 then\n\t\t\t\teven = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\ta = math.floor(a / 10)\n\t\tend\n\t\tif z % 2\
    \ == 0 then\n\t\t\teven = true\n\t\tend\n\t\tif not even then\n\t\t\ttable.insert(y,\
    \ z)\n\t\tend\n\tend\n\treturn y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppavke1f.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpppavke1f.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local even_list = {};\n    local odd_list = {};\n    for i = 1, #x do\n    \
    \    local temp = x[i];\n        while (temp > 0) do\n            local check\
    \ = temp % 10;\n            if (check % 2 == 0) then\n                table.insert(even_list,\
    \ x[i]);\n                break;\n            end\n            temp = math.floor(temp\
    \ / 10);\n        end\n        if (check % 2 ~= 0) then\n            table.insert(odd_list,\
    \ x[i]);\n        end\n    end\n    table.sort(odd_list);\n    return odd_list;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpz6nhss.lua:18:\
    \ attempt to perform arithmetic on a nil value (global 'check')\nstack traceback:\n\
    \t/tmp/tmpxpz6nhss.lua:18: in local 'candidate'\n\t/tmp/tmpxpz6nhss.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ unique = {}\n  for _, n in ipairs(x) do\n    local has_even = false\n    while\
    \ n > 0 do\n      local d = n % 10\n      if d % 2 == 0 then\n        has_even\
    \ = true\n        break\n      end\n      n = math.floor(n / 10)\n    end\n  \
    \  if not has_even then\n      table.insert(unique, n)\n    end\n  end\n  return\
    \ unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg35vh82.lua:27:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpsg35vh82.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    local n = 0\n    for k, v in ipairs(x) do\n        local even\
    \ = 0\n        while v > 0 do\n            if v % 2 == 0 then\n              \
    \  even = 1\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if even == 0 then\n            t[n + 1] = k\n  \
    \          n = n + 1\n        end\n    end\n    table.sort(t)\n    local ret =\
    \ {}\n    for k, v in ipairs(t) do\n        ret[k] = x[v]\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8wt_lsx.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpk8wt_lsx.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local numbers = {};\n    for i,v in ipairs(x) do\n        local digit;\n   \
    \     local unique_v = v;\n        while unique_v > 0 do\n            digit =\
    \ unique_v % 10;\n            if digit % 2 == 0 then break end\n            unique_v\
    \ = math.floor(unique_v / 10);\n        end\n        if unique_v == 0 then\n \
    \           table.insert(numbers, v);\n        end\n    end\n    table.sort(numbers);\n\
    \    return numbers;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  local map = {}\n  for _,v in ipairs(x) do\n    if not map[v] then\n\
    \      map[v] = true\n      local good = true\n      while v > 0 do\n        local\
    \ d = v % 10\n        if d % 2 == 0 then\n          good = false\n          break\n\
    \        end\n        v = v / 10\n      end\n      if good then\n        table.insert(res,\
    \ v)\n      end\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7gbw1_6.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmpx7gbw1_6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- Your code here.\n    local uniques = {}\n    local even_digits = {}\n   \
    \ for k, v in pairs(x) do\n        local i = v\n        while i > 0 do\n     \
    \       local digit = i % 10\n            if digit % 2 == 0 then\n           \
    \     even_digits[k] = true\n                break\n            end\n        \
    \    i = math.floor(i / 10)\n        end\n    end\n    for k, v in pairs(x) do\n\
    \        if not even_digits[k] then\n            table.insert(uniques, v)\n  \
    \      end\n    end\n    table.sort(uniques)\n    return uniques\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  x\
    \ = type(x) == 'table' and x or {x}\n  local xs = {}\n  for i = 1, #x do\n   \
    \ if not string.find(x[i], '%d*[024680]%d*') then\n      xs[#xs + 1] = x[i]\n\
    \    end\n  end\n  table.sort(xs)\n  return xs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return filter(function(n) return all(function(d) return d % 2 ~= 0 end, map(tonumber,\
    \ tostring(n))) end, x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4xk6r9p.lua:6:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpp4xk6r9p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpp4xk6r9p.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r = {}\n  for k,v in ipairs(x) do\n    local isUnique = true\n    while v >\
    \ 0 do\n      local lsd = v % 10;\n      if lsd % 2 == 0 then\n        isUnique\
    \ = false\n        break\n      end\n      v = math.floor(v / 10)\n    end\n \
    \   if isUnique then\n      table.insert(r, k, v)\n    end\n  end\n  return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvh6anfcc.lua:18:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpvh6anfcc.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpvh6anfcc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvpsbtl2.lua:11:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplvpsbtl2.lua:11:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyjy7wpl.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqyjy7wpl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t = {}\n    for _, number in ipairs(x) do\n        if not contains_even_digit(number)\
    \ then\n            t[#t + 1] = number\n        end\n    end\n    return table.sort(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogdawg3w.lua:8:\
    \ attempt to call a nil value (global 'contains_even_digit')\nstack traceback:\n\
    \t/tmp/tmpogdawg3w.lua:8: in local 'candidate'\n\t/tmp/tmpogdawg3w.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local result = {}\n    for i = 1, #x do\n        if #(x[i]:tostring():gsub(\"\
    [13579]\", \"\")) == 0 then\n            table.insert(result, x[i])\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjky3t6r_.lua:8:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpjky3t6r_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjky3t6r_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ result = {}\n  for _, v in ipairs(x) do\n    local is_unique = true\n    for\
    \ digit in tostring(v):gmatch('.') do\n      if tonumber(digit) % 2 == 0 then\n\
    \        is_unique = false\n        break\n      end\n    end\n    if is_unique\
    \ then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r = {}\n  for _, i in ipairs(x) do\n    local flag = false\n    while i > 0\
    \ do\n      if i % 2 == 0 then\n        flag = true\n        break\n      end\n\
    \      i = i // 10\n    end\n    if not flag then\n      r[#r + 1] = i\n    end\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqfq57z_.lua:26:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpeqfq57z_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ r, d = {}, {}\n  for _, i in ipairs(x) do\n    if not d[i] then\n      table.insert(r,\
    \ i)\n      d[i] = true\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ob72vxb.lua:19:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp0ob72vxb.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local out = {}\n    for i,v in ipairs(x) do\n        if math.fmod(v,2) ~= 0\
    \ then\n            table.insert(out,v)\n        end\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8hfjo9o.lua:18:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpr8hfjo9o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function helper(x, t)\n        local digits = {}\n        for _, v in\
    \ ipairs(x) do\n            local is_even = true\n            for d in tostring(v):gmatch('%d')\
    \ do\n                if tonumber(d) % 2 == 0 then\n                    is_even\
    \ = false\n                    break\n                end\n            end\n \
    \           if is_even then\n                table.insert(digits, v)\n       \
    \     end\n        end\n        return digits\n    end\n    return sort(helper(x,\
    \ {}))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6q4bd6gb.lua:22:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp6q4bd6gb.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6q4bd6gb.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tif\
    \ #x == 0 then return {} end\n\tlocal function has_even_digit(n)\n\t\twhile n\
    \ > 0 do\n\t\t\tif n % 2 == 0 then return true end\n\t\t\tn = math.floor(n / 10)\n\
    \t\tend\n\t\treturn false\n\tend\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\
    \t\tif not has_even_digit(v) then table.insert(res, v) end\n\tend\n\treturn table.sort(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp231cvwxj.lua:24:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp231cvwxj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function is_odd(x)\n        if x == 0 then return false end\n        while\
    \ x > 0 do\n            if x % 2 == 0 then return false end\n            x = math.floor(x\
    \ / 10)\n        end\n        return true\n    end\n    local list = {}\n    for\
    \ _,v in ipairs(x) do\n        if is_odd(v) then table.insert(list, v) end\n \
    \   end\n    table.sort(list)\n    return list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ error(\"Not implemented yet.\")\n\tlocal result = {}\n\tfor _, value in ipairs(x)\
    \ do\n\t\tlocal even = false\n\t\tlocal value_string = tostring(value)\n\t\tfor\
    \ i = 1, #value_string do\n\t\t\tif(tonumber(value_string:sub(i, i)) % 2 == 0)\
    \ then\n\t\t\t\teven = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif(not even)\
    \ then\n\t\t\ttable.insert(result, value)\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkky9whzt.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkky9whzt.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- your code goes here\n    local res={}\n    for i=1,#x do\n        local j=x[i]\n\
    \        local s=tostring(j)\n        for k=1,#s do\n            if tonumber(s:sub(k,k))%2==0\
    \ then\n                goto skip\n            end\n        end\n        res[#res+1]=j\n\
    \        ::skip::\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47va187v.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp47va187v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yab311h.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp0yab311h.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   local\
    \ out = {}\n   for _, v in ipairs(x) do\n      local is_ok = true\n      for d\
    \ in v:gmatch('%d') do\n         if tonumber(d) % 2 == 0 then\n            is_ok\
    \ = false\n            break\n         end\n      end\n      if is_ok then\n \
    \        table.insert(out, v)\n      end\n   end\n   table.sort(out)\n   return\
    \ out\nend\nprint(table.concat(unique_digits({1, 12, 101, 21, 102, 9, 0}), ',\
    \ '))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp5ovw8kb9.lua:9: attempt to index a number value (local 'v')\n\
    stack traceback:\n\t/tmp/tmp5ovw8kb9.lua:9: in local 'unique_digits'\n\t/tmp/tmp5ovw8kb9.lua:22:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\treturn\
    \ {5, 7}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph018ra93.lua:12:\
    \ expected: {1, 15, 33}\nactual: {5, 7}\nstack traceback:\n\t/tmp/tmph018ra93.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ even = {1, 3, 5, 7, 9}\n  local res = {}\n  local count = 0\n  for i = 1, #x\
    \ do\n    local flag = false\n    while x[i] > 0 do\n      local last = x[i] %\
    \ 10\n      if not is_element(even, last) then\n        flag = true\n        break\n\
    \      end\n      x[i] = x[i] // 10\n    end\n    if not flag then\n      count\
    \ = count + 1\n      res[count] = x[i]\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9kotsl42.lua:13:\
    \ attempt to call a nil value (global 'is_element')\nstack traceback:\n\t/tmp/tmp9kotsl42.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9kotsl42.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local res = {}\n    for i = 1, #x do\n        local num = x[i]\n        local\
    \ flag = true\n        for j = 1, #num do\n            local digit = tonumber(num:sub(j,\
    \ j))\n            if (digit % 2 == 0) then\n                flag = false\n  \
    \              break\n            end\n        end\n        if (flag) then\n \
    \           table.insert(res, tonumber(num))\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbb20npb.lua:10:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpzbb20npb.lua:10: in local 'candidate'\n\t/tmp/tmpzbb20npb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(x) do\n\t\tif not (string.find(tostring(v), \"\
    [24680]\")) then \n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ unique = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal is_odd = true\n\t\tlocal\
    \ digits = {}\n\t\twhile v > 0 do\n\t\t\tlocal d = v % 10\n\t\t\tif d % 2 == 0\
    \ then\n\t\t\t\tis_odd = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ttable.insert(digits,\
    \ d)\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\tif is_odd then\n\t\t\ttable.insert(unique,\
    \ table.concat(digits))\n\t\tend\n\tend\n\ttable.sort(unique)\n\treturn unique\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaniwegzr.lua:30:\
    \ expected: {1, 15, 33}\nactual: {\"1\", \"33\", \"51\"}\nstack traceback:\n\t\
    /tmp/tmpaniwegzr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  local visited = {}\n  for i=1,#x do\n    local t = x[i]\n    local\
    \ even = false\n    while t > 0 do\n      local r = t % 10\n      if r % 2 ==\
    \ 0 then\n        even = true\n        break\n      end\n      t = math.floor(t\
    \ / 10)\n    end\n    if not even then\n      res[#res+1] = x[i]\n    end\n  end\n\
    \  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ s = {}\n  for i,v in ipairs(x) do\n    local g = true\n    for d in tostring(v):gmatch(\"\
    %d\") do\n      if d:byte() % 2 == 0 then\n        g = false\n        break\n\
    \      end\n    end\n    if g then s[#s+1] = v end\n  end\n  table.sort(s)\n \
    \ return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ numbers = {}\n  for _, number in ipairs(x) do\n    local unique = true\n   \
    \ for d in number:gmatch(\"%d\") do\n      if d:byte() % 2 == 0 then\n       \
    \ unique = false\n        break\n      end\n    end\n    if unique then table.insert(numbers,\
    \ number) end\n  end\n  table.sort(numbers)\n  return numbers\nend\nprint(table.concat(unique_digits{12,\
    \ 345, 67, 5, 890}, \",\"))\nprint(table.concat(unique_digits{12, 24, 32, 57,\
    \ 80}, \",\"))\nprint(table.concat(unique_digits{12, 34, 55, 66, 88}, \",\"))\n\
    print(table.concat(unique_digits{12, 34, 55, 67, 89}, \",\"))\nprint(table.concat(unique_digits{},\
    \ \",\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzrx7efwc.lua:9: attempt to index a number value (local 'number')\n\
    stack traceback:\n\t/tmp/tmpzrx7efwc.lua:9: in local 'unique_digits'\n\t/tmp/tmpzrx7efwc.lua:20:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ if type(x) ~= \"table\" then return {} end\n    if next(x) == nil then return\
    \ {} end\n    local out = {}\n    for _, num in ipairs(x) do\n        if type(num)\
    \ ~= \"number\" then goto continue end\n        if num < 0 then goto continue\
    \ end\n        local i = 0\n        while num > 0 do\n            i = i + 1\n\
    \            local digit = num % 10\n            if digit % 2 == 0 then goto continue\
    \ end\n            num = math.floor(num / 10)\n        end\n        table.insert(out,\
    \ i)\n        ::continue::\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbc818ny_.lua:28:\
    \ expected: {1, 15, 33}\nactual: {2, 2, 1}\nstack traceback:\n\t/tmp/tmpbc818ny_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvndntxbc.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpvndntxbc.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  --\
    \ x is list of integers\n  -- function return a list of integers.\n  -- if x is\
    \ [1,11,22,33,45,61,77,82,93,101]\n  -- return [1,45,61,101]\n  local t={}\n \
    \ local u={}\n  for i,j in ipairs(x) do\n    if not j%2==0 then\n      table.insert(t,j)\n\
    \    end\n  end\n  table.sort(t)\n  for k,v in ipairs(t) do\n    table.insert(u,v)\n\
    \  end\n  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybbk61vz.lua:13:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmpybbk61vz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpybbk61vz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyjy7wpl.lua:12:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpqyjy7wpl.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local t={}\n    for i=1,#x do\n        local d,b=x[i]\n        while d>0 do\n\
    \            if d%2==0 then\n                b=true\n                break\n \
    \           end\n            d=d//10\n        end\n        if not b then\n   \
    \         t[#t+1]=x[i]\n        end\n    end\n    table.sort(t)\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local function has_even_digit(x)\n        for c in tostring(x):gmatch(\".\"\
    ) do\n            if tonumber(c) % 2 == 0 then\n                return true\n\
    \            end\n        end\n        return false\n    end\n    local result\
    \ = {}\n    for i = 1, #x do\n        if not has_even_digit(x[i]) then\n     \
    \       table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    if tostring(v):match('%d*[13579]%d*')\
    \ then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6psmee7.lua:19:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpa6psmee7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local vals = {}\n    for _, n in ipairs(x) do\n        local unique = true\n\
    \        for digit in tostring(n):gmatch('%d') do\n            if tonumber(digit)\
    \ % 2 == 0 then\n                unique = false\n                break\n     \
    \       end\n        end\n        if unique then\n            table.insert(vals,\
    \ n)\n        end\n    end\n    table.sort(vals)\n    return vals\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7gi8bbn.lua:12:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw7gi8bbn.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823622
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  local\
    \ y = {}\n  local z = {}\n  local n = #x\n  for i = 1, n do\n    local r = true\n\
    \    local s = tostring(x[i])\n    for j = 1, #s do\n      if (tonumber(s:sub(j,\
    \ j)) % 2 == 0) then\n        r = false\n        break\n      end\n    end\n \
    \   if r then\n      y[#y + 1] = x[i]\n    end\n  end\n  if #y > 0 then\n    return\
    \ y\n  else\n    return z\n  end\nend\nassert(Equal(unique_digits({122, 333, 512,\
    \ 986, 654}), {}))\nassert(Equal(unique_digits({1, 2, 3, 5, 7}), {1, 3, 5, 7}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpgh2pj8dc.lua:28: attempt to call a nil value (global 'Equal')\n\
    stack traceback:\n\t/tmp/tmpgh2pj8dc.lua:28: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n  \n\
    \    local function aux(x, r)\n        if x == 0 then return r end\n        if\
    \ math.fmod(x, 2) == 0 then return r end\n        return aux(math.floor(x/10),\
    \ {x%10, unpack(r)})\n    end\n  \n    local function to_number(x)\n        local\
    \ acc = 0\n        for i = 1, #x do\n            acc = acc*10 + x[i]\n       \
    \ end\n        return acc\n    end\n  \n    local function contains(x, i)\n  \
    \      for j = 1, #x do\n            if x[j] == i then return true end\n     \
    \   end\n        return false\n    end\n  \n    local function remove_duplicates(x)\n\
    \        local r = {}\n        for i = 1, #x do\n            if not contains(r,\
    \ x[i]) then\n                r[#r+1] = x[i]\n            end\n        end\n \
    \       return r\n    end\n  \n    local function compare(a, b)\n        return\
    \ a < b\n    end\n  \n    local numbers = {}\n    for i = 1, #x do\n        numbers[i]\
    \ = to_number(aux(x[i], {}))\n    end\n    numbers = remove_duplicates(numbers)\n\
    \    table.sort(numbers, compare)\n    return numbers\nend\nprint(table.concat(unique_digits({123,1234,121,123456,1234,312}),\
    \ \" \")) --> 123 123456 312\nprint(table.concat(unique_digits({1,2,3,4,5,6,7,8,9,11,22,33,44,55,66,77,88,99}),\
    \ \" \")) --> 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45\
    \ 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\
    \ 99\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpiw0vsv69.lua:10: attempt to call a nil value (global 'unpack')\n\
    stack traceback:\n\t/tmp/tmpiw0vsv69.lua:10: in local 'aux'\n\t/tmp/tmpiw0vsv69.lua:44:\
    \ in local 'unique_digits'\n\t/tmp/tmpiw0vsv69.lua:50: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659823623
- exit_code: 0
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ set = {}\n\tlocal ans = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal m = v\n\t\t\
    while m > 0 do\n\t\t\tlocal d = m % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\tset[v]\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tm = m // 10\n\t\tend\n\tend\n\tfor _,\
    \ v in ipairs(x) do\n\t\tif not set[v] then\n\t\t\ttable.insert(ans, v)\n\t\t\
    end\n\tend\n\ttable.sort(ans)\n\treturn ans\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n   \
    \ local table = {}\n    local even = {}\n    local result = {}\n    local index\
    \ = 1\n    local index1 = 1\n    local index2 = 1\n    local digit = 0\n    local\
    \ digit_1 = 0\n    local digit_2 = 0\n    local state = 0\n    local state1 =\
    \ 0\n    local state2 = 0\n    local even_1 = 0\n    local even_2 = 0\n    local\
    \ temp = 0\n    local temp1 = 0\n    local temp2 = 0\n    for index = 1,#x do\n\
    \        table[index] = x[index]\n    end\n    for index = 1,#table do\n     \
    \   state = 1\n        temp = table[index]\n        while temp > 0 do\n      \
    \      digit = temp % 10\n            if digit % 2 == 0 then\n               \
    \ state = 0\n                break\n            end\n            temp = math.floor(temp\
    \ / 10)\n        end\n        if state == 0 then\n            table[index] = -1\n\
    \        end\n    end\n    for index = 1,#table do\n        if table[index] >\
    \ 0 then\n            index1 = index\n            state1 = 1\n            temp1\
    \ = table[index1]\n            while temp1 > 0 do\n                digit_1 = temp1\
    \ % 10\n                if digit_1 % 2 == 0 then\n                    state1 =\
    \ 0\n                    break\n                end\n                temp1 = math.floor(temp1\
    \ / 10)\n            end\n            if state1 == 1 then\n                for\
    \ index2 = index1 + 1,#table do\n                    if table[index2] > 0 then\n\
    \                        state2 = 1\n                        temp2 = table[index2]\n\
    \                        while temp2 > 0 do\n                            digit_2\
    \ = temp2 % 10\n                            if digit_2 % 2 == 0 then\n       \
    \                         state2 = 0\n                                break\n\
    \                            end\n                            temp2 = math.floor(temp2\
    \ / 10)\n                        end\n                        if state2 == 1 then\n\
    \                            if table[index1] > table[index2] then\n         \
    \                       temp = table[index1]\n                               \
    \ table[index1] = table[index2]\n                                table[index2]\
    \ = temp\n                            end\n                        end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprrrpkpz6.lua:84: ''end'' expected (to close ''if'' at line
    56) near <eof>

    '
  stdout: ''
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\tlocal\
    \ aux = {}\n\t-- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplue3yy14.lua:13:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmplue3yy14.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
- exit_code: 1
  program: "-- Given a list of positive integers x. return a sorted list of all \n\
    -- elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
    \ in increasing order.\n-- For example:\nlocal function unique_digits(x)\n\t--\
    \ your code here\n\tlocal y = {}\n\tfor k, v in pairs(x) do\n\t\tlocal n = 0\n\
    \t\twhile v > 0 do\n\t\t\tif v % 2 == 0 then\n\t\t\t\tn = 1\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\tif n == 0 then\n\t\t\ttable.insert(y,\
    \ k)\n\t\tend\n\tend\n\ttable.sort(y)\n\treturn y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5b5kaoxw.lua:28:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmp5b5kaoxw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823623
