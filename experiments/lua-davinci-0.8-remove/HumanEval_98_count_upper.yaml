name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local c = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend", "  local n = 0\n  for\
    \ i = 1, #s do\n    local c = s:sub(i, i)\n    if c:upper() == c and c:lower()\
    \ ~= c then\n      n = n + 1\n    end\n  end\n  return n\nend", "\tlocal count\
    \ = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and (s:sub(i, i) == 'A' or s:sub(i,\
    \ i) == 'E' or s:sub(i, i) == 'I' or s:sub(i, i) == 'O' or s:sub(i, i) == 'U')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local\
    \ count = 0\n    for i = 1, string.len(s) do\n        if i % 2 == 0 and string.find(s,\
    \ \"[AEIOUY]\", i, true) then\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend", "    local count = 0\n    for i = 1, #s do\n \
    \       if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  return reduce(filter(range(0,#s,2),function(i)\
    \ return string.find(\"AEIOU\",s:sub(i,i)) ~= nil end),0,function(acc,i) return\
    \ acc + 1 end)\nend", "    local vowels = \"AEIOU\"\n    local sum = 0\n    for\
    \ i = 1, #s do\n        local si = s:sub(i, i)\n        if vowels:find(si) then\n\
    \            if i % 2 == 0 then\n                sum = sum + 1\n            end\n\
    \        end\n    end\n    return sum\nend", "    local c = 0\n    for i=1, #s\
    \ do\n        if i % 2 == 0 and string.find(\"AEIOU\", s:sub(i, i)) then\n   \
    \         c = c + 1\n        end\n    end\n    return c\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local c = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find(\"[AEIOU]\") then\n            c = c + 1\n        end\n    end\n   \
    \ return c\nend", "    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i):match('[AEIOU]') and i % 2 == 0 then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if (i % 2 == 0) and (string.sub(s, i, i) == \"A\" or string.sub(s, i,\
    \ i) == \"E\" or string.sub(s, i, i) == \"I\" or string.sub(s, i, i) == \"O\"\
    \ or string.sub(s, i, i) == \"U\") then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i=1,#s do\n    if i%2==0 and\
    \ s:sub(i,i):match(\"[AEIOU]\") then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nassert(count_upper(\"i\") == 0)\nassert(count_upper(\"O\"\
    ) == 1)\nassert(count_upper(\"EA\") == 1)\nassert(count_upper(\"a\") == 0)\nassert(count_upper(\"\
    ua\") == 0)\nassert(count_upper(\"IE\") == 1)\nassert(count_upper(\"AeI\") ==\
    \ 1)\nassert(count_upper(\"AeIoU\") == 3)\nassert(count_upper(\"AeIoUO\") == 4)\n\
    assert(count_upper(\"AeIoUeO\") == 5)\nassert(count_upper(\"EAieEOIeA\") == 5)",
  "  -- Your code here.\nend", "    local c = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and string.find(\"AEIOU\", s:sub(i, i)) then\n            c = c +\
    \ 1\n        end\n    end\n    return c\nend", "  return s:gsub(\"%u\", function(c)\
    \ if c:byte() % 2 == 0 then return \"o\" end end):len()\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_vowel(s:sub(i, i)) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\treturn #s:gsub(\"\
    (%u%l*)\",\n\t\tfunction(c)\n\t\t\tif #c % 2 == 0 then\n\t\t\t\treturn c:gsub(\"\
    [AEIOU]\", \"\"):len()\n\t\t\telse\n\t\t\t\treturn c\n\t\t\tend\n\t\tend)\nend",
  "\tlocal cnt = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):match(\"[AEIOU]\") then\n\
    \t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend", "  -- TODO\nend", " \
    \  return #s:gsub('([aeiouAEIOU])', '')\nend", "  local num = 0\n  for i = 1,\
    \ #s do\n    if s:sub(i, i):match('[AEIOU]') and i % 2 == 0 then\n      num =\
    \ num + 1\n    end\n  end\n  return num\nend\nprint(count_upper('hello world'))",
  "    -- code goes here\nend", "    local count = 0\n    for i = 1, #s do\n     \
    \   if i % 2 == 0 and (s:sub(i, i) == 'A' or s:sub(i, i) == 'E' or s:sub(i, i)\
    \ == 'I' or s:sub(i, i) == 'O' or s:sub(i, i) == 'U') then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\treturn\nend",
  "    return #(s:gsub(\"([AEIOU])\", \"%1\")):gsub(\"([AEIOU])\", \"%1\")\nend",
  "\tlocal sum = 0\n\tfor i = 1,#s do\n\t\tif i % 2 == 0 and is_upper(s,i) then\n\t\
    \t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend", "    if not s then return\
    \ 0 end\n    return s:gsub(\"[AEIOU]\", \"U\"):gsub(\"[aeiou]\", \"u\"):gsub(\"\
    .\", \"u\"):sub(2):sub(1, -2):gsub(\"u\", \"\").len\nend", "\t-- Your code here...\n\
    end", "    count = 0\n    for i=1,#s do\n        if string.match(s:sub(i,i), \"\
    [aeiouAEIOU]\") and (i%2==0) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", end, "    local c = 0\n    for i = 1, #s do\n\
    \        if ((i % 2) == 0) and is_vowel(s:sub(i, i)) then\n            c = c +\
    \ 1\n        end\n    end\n    return c\nend", "  if #s == 0 then return 0 end\n\
    \  local rest = s:sub(2)\n  if s:sub(1,1):match('[AEIOU]') and (#s % 2 == 0) then\n\
    \    return 1 + count_upper(rest)\n  else\n    return count_upper(rest)\n  end\n\
    end", "  -- ...\nend\nassert(count_upper('AaEiIoOuU') == 5)", "    local c = 0\n\
    \    for i = 1, #s do\n        if (i % 2 == 0) and (s:sub(i, i):match(\"[AEIOU]\"\
    )) then\n            c = c + 1\n        end\n    end\n    return c\nend", "  \
    \  local sum = 0\n    for i, x in ipairs(s) do\n        local ok = false\n   \
    \     for _, y in ipairs(uppers) do\n            if x == y then\n            \
    \    ok = true\n                break\n            end\n        end\n        if\
    \ ok and (i % 2 == 0) then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend", "  -- hint: use the function is_upper() defined above\n\
    \  local count = 0\n  --\n  -- YOUR CODE HERE\n  --\n  return count\nend", " \
    \ local count = 0\n  for i=1,#s do\n    if not (i%2==0) and s:match('[AEIOU]',\
    \ i) then\n      count = count + 1\n    end\n  end\n  return count\nend", "  \
    \  local t = 0\n    for i = 1, #s do\n        if is_vowel(s:sub(i, i)) and i %\
    \ 2 == 0 then\n            t = t + 1\n        end\n    end\n    return t\nend\n\
    assert(count_upper(\"\") == 0)\nassert(count_upper(\"a\") == 0)\nassert(count_upper(\"\
    B\") == 1)\nassert(count_upper(\"AAb\") == 1)\nassert(count_upper(\"AAAb\") ==\
    \ 2)\nassert(count_upper(\"AAAB\") == 3)\nassert(count_upper(\"AAAbX\") == 2)\n\
    assert(count_upper(\"AAAbXB\") == 3)", "   local n = 0\n   for i=1,#s do\n   \
    \   if i%2 == 0 and s:sub(i,i):match(\"[AEIOU]\") then\n         n = n + 1\n \
    \     end\n   end\n   return n\nend\ncount_upper(\"Ecole Polytechnique\")  -->\
    \ 2", "    local count = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and\
    \ s:sub(i, i):match('[AEIOU]') then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local n = 0\n    for i = 1, #s do\n   \
    \     if i % 2 == 0 and s:sub(i, i):match(\"^[AEIOU]$\") then\n            n =\
    \ n + 1\n        end\n    end\n    return n\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]') then\n            if i\
    \ % 2 == 0 then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    local n = string.len(s)\n\
    \    for i = 1, n do\n        local c = string.sub(s, i, i)\n        if c:match(\"\
    [AEIOU]\") and i % 2 == 0 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "   local n = 0\n   for i=1, #s do\n      if\
    \ i % 2 == 0 and s:sub(i,i):match(\"[AEIOU]\") then\n         n = n + 1\n    \
    \  end\n   end\n   return n\nend\nassert(count_upper(\"HAY STACK\") == 0)\nassert(count_upper(\"\
    I LIKE TURTLES\") == 4)\nassert(count_upper(\"\") == 0)\nassert(count_upper(\"\
    CHICKEN\") == 0)\nassert(count_upper(\"MADAM\") == 3)\nassert(count_upper(\"ABRACADABRA\"\
    ) == 4)\nassert(count_upper(\"TALISMAN\") == 2)", "    local cnt = 0\n    for\
    \ i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nprint(count_upper(\"\
    HALLELUJAH\")) --> 3\nprint(count_upper(\"he he\")) --> 1\nprint(count_upper(\"\
    HELP I AM SURROUNDED BY CAPITALS\")) --> 12\nprint(count_upper(\"\")) --> 0",
  "  s = s:gsub(\"%a\", function(x)\n    if x:find(\"[AEIOU]\") then\n      return\
    \ x:upper()\n    end\n  end)\n  local n = 0\n  for i = 2, #s, 2 do\n    if s:sub(i,\
    \ i):find(\"[AEIOU]\") then\n      n = n + 1\n    end\n  end\n  return n\nend",
  "    local n = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and (s:sub(i, i):find(\"\
    [AEIOU]\")) then\n            n = n + 1\n        end\n    end\n    return n\n\
    end", "    local cnt = 0\n    for i=1,#s do\n        if s:sub(i,i):match(\"[AEIOU]\"\
    ) and i%2 == 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and is_upper(s,\
    \ i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\t\
    local count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal\
    \ t = string.gmatch(s, \".\")\n\tlocal count = 0\n\tfor i, v in t do\n\t\tif i\
    \ % 2 == 0 and string.find(v, \"[AEIOU]\") then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\t\
    if is_vowel(s:sub(i, i)) and i % 2 == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "  local count = 0\n  for i=1,#s do\n    if ((i %\
    \ 2) == 0) and (string.find(s, '[AEIOU]', i, true)) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  return math.max(0, s:gsub(\"[AEIOU]\"\
    , \"\") + 0)\nend", "    local count = 0\n    local upper_vowels = {['A'] = true,\
    \ ['E'] = true, ['I'] = true, ['O'] = true, ['U'] = true}\n    for i, char in\
    \ ipairs(s) do\n        if i % 2 == 0 and upper_vowels[char] then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    --\n\
    end", "  local c = 0\n  for i = 1, #s do\n    local b = s:sub(i, i)\n    if (i\
    \ % 2 == 0) and (b == 'A' or b == 'E' or b == 'I' or b == 'O' or b == 'U') then\n\
    \      c = c + 1\n    end\n  end\n  return c\nend", "    local count = 0\n   \
    \ for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]') then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local c = 0\n    for i = 1, #s do\n        if (i % 2 == 0) and isupper(s, i)\
    \ then\n            c = c + 1\n        end\n    end\n    return c\nend", "  local\
    \ acc = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\"\
    ) then\n      acc = acc + 1\n    end\n  end\n  return acc\nend", "   local count\
    \ = 0\n   for i=1,#s do\n      if i%2==0 and string.match(s:sub(i,i), '[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    local c = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('[AEIOU]')\
    \ and i % 2 == 0 then\n            c = c + 1\n        end\n    end\n    return\
    \ c\nend", "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and\
    \ is_upper(s:sub(i, i)) then\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend", "  return nil\nend", "    local n = 0\n    for\
    \ i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\") then\n\
    \            n = n + 1\n        end\n    end\n    return n\nend", "    local counter\
    \ = 0\n    for i=1,#s do\n        if string.match(s, '[AEIOU]', i) then\n    \
    \        counter = counter + 1\n        end\n    end\n    return counter\nend\n\
    print('cou", "  local c = 0\n  for i = 1, #s do\n    local ch = s:sub(i, i)\n\
    \    if ch:find(\"[AEIOU]\") and (i % 2 == 0) then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend\nassert(count_upper(\"ABCDEFGH\") == 2)\nassert(count_upper(\"\
    XYZ\") == 0)\nassert(count_upper(\"aBCdefgh\") == 2)\nassert(count_upper(\"xyz\"\
    ) == 0)", "    -- body\nend", "  local count = 0\n  for i = 1, #s do\n    if s:sub(i,\
    \ i):match(\"[AEIOU]\") then\n      if i % 2 == 0 then\n        count = count\
    \ + 1\n      end\n    end\n  end\n  return count\nend\nassert_equal(2, count_upper(\"\
    AAaou\"))\nassert_equal(1, count_upper(\"AAeou\"))\nassert_equal(0, count_upper(\"\
    AAaou\"))\nassert_equal(1, count_upper(\"AAEou\"))\nassert_equal(2, count_upper(\"\
    AAEOU\"))", "    local count = 0\n    for i = 1,#s do\n        if i % 2 == 0 and\
    \ s:sub(i,i):find(\"[AEIOU]\") then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local sum = 0\n    for i = 1, #s do\n \
    \       if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n            sum\
    \ = sum + 1\n        end\n    end\n    return sum\nend", end, "  -- ...\nend",
  "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find(\"\
    [AEIOU]\") then\n      count = count + 1\n    end\n  end\n  return count\nend",
  end, "    local n = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:match('^%u$')\
    \ then\n            n = n + 1\n        end\n    end\n    return n\nend", "   \
    \ local c = 0\n    local l = utf8.len(s)\n    local i = 0\n    while i < l do\n\
    \        local b = utf8.byte(s, i)\n        if i % 2 == 0 and b >= 65 and b <=\
    \ 90 then c = c + 1 end\n        i = i + 1\n    end\n    return c\nend", "   \
    \ -- Complete this function here\nend", "    local c = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and is_upper(s, i) then\n            c = c + 1\n      \
    \  end\n    end\n    return c\nend", "    local count = 0\n    for i, c in string.gmatch(s,\
    \ \"(%d-)(%a)\") do\n        if tonumber(i) % 2 == 0 and c == string.upper(c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  return nil\nend", "  -- ...\nend", "  local count = 0\n  local i = 0\n\
    \  while i <= #s do\n    if s:sub(i, i):match('^[AEIOU]$') then\n      count =\
    \ count + 1\n    end\n    i = i + 2\n  end\n  return count\nend", "  local c =\
    \ 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\")\
    \ then\n      c = c + 1\n    end\n  end\n  return c\nend", "    local count =\
    \ 0\n    for i = 1, string.len(s) do\n        if (i % 2 == 0) and (string.find(\"\
    AEIOU\", string.sub(s, i, i))) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "   return select(2, (s:gsub('[AEIOU][^AEIOU]*',\
    \ '')))\nend", "   local result = 0\n   local i = 0\n   for ch in s:gmatch(\"\
    .-\") do\n      i = i + 1\n      if i % 2 == 0 and ch:match(\"[AEIOU]\") then\n\
    \         result = result + 1\n      end\n   end\n   return result\nend", "  \
    \  local count = 0\n    local i = 0\n    for c in string.gmatch(s, '.') do\n \
    \       i = i + 1\n        if string.find(VOWELS, c) and i % 2 == 0 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", "\t\
    local count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):match(\"\
    [AEIOU]\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\n\
    assert(count_upper(\"\") == 0)\nassert(count_upper(\"a\") == 0)\nassert(count_upper(\"\
    e\") == 0)\nassert(count_upper(\"i\") == 0)\nassert(count_upper(\"o\") == 0)\n\
    assert(count_upper(\"u\") == 0)\nassert(count_upper(\"A\") == 1)\nassert(count_upper(\"\
    B\") == 0)\nassert(count_upper(\"C\") == 1)\nassert(count_upper(\"D\") == 0)\n\
    assert(count_upper(\"E\") == 1)\nassert(count_upper(\"F\") == 0)\nassert(count_upper(\"\
    G\") == 1)\nassert(count_upper(\"H\") == 0)\nassert(count_upper(\"I\") == 1)\n\
    assert(count_upper(\"J\") == 0)\nassert(count_upper(\"K\") == 1)\nassert(count_upper(\"\
    L\") == 0)\nassert(count_upper(\"M\") == 1)\nassert(count_upper(\"N\") == 0)\n\
    assert(count_upper(\"O\") == 1)\nassert(count_upper(\"P\") == 0)\nassert(count_upper(\"\
    Q\") == 1)\nassert(count_upper(\"R\") == 0)\nassert(count_upper(\"S\") == 1)\n\
    assert(count_upper(\"T\") == 0)\nassert(count_upper(\"U\") == 1)\nassert(count_upper(\"\
    V\") == 0)\nassert(count_upper(\"W\") == 1)\nassert(count_upper(\"X\") == 0)\n\
    assert(count_upper(\"Y\") == 1)\nassert(count_upper(\"Z\") == 0)\nassert(count_upper(\"\
    1\") == 0)\nassert(count_upper(\"2\") == 0)\nassert(count_upper(\"3\") == 0)\n\
    assert(count_upper(\"4\") == 0)\nassert(count_upper(\"5\") == 0)\nassert(count",
  "    local count = 0\n    for i = 1, #s do\n        if 'AEIOU'[s:sub(i, i)] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local cnt = 0\n  for i = 1, #s do\n    if s:sub(i, i):find('[AEIOU]') then\n\
    \      if i % 2 == 0 then\n        cnt = cnt + 1\n      end\n    end\n  end\n\
    \  return cnt\nend\nprint(count_upper('eoEo'))", "   local count = 0\n   local\
    \ odd = false\n   for i = 1, #s do\n      if odd and is_vowel(s:sub(i, i)) and\
    \ s:sub(i, i) == s:sub(i, i):upper() then\n         count = count + 1\n      end\n\
    \      odd = not odd\n   end\n   return count\nend", "  local ct = 0\n  for i\
    \ = 1, #s do\n    if i % 2 == 0 and string.find(s, \"[AEIOU]\", i, true) then\n\
    \      ct = ct + 1\n    end\n  end\n  return ct\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if i % 2 == 0 and vowel_upper[s:sub(i, i)] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nassert(count_upper(\"\") ==\
    \ 0)\nassert(count_upper(\"A\") == 0)\nassert(count_upper(\"B\") == 0)\nassert(count_upper(\"\
    AB\") == 1)\nassert(count_upper(\"ab\") == 0)\nassert(count_upper(\"aB\") == 1)\n\
    assert(count_upper(\"ABC\") == 1)\nassert(count_upper(\"aBC\") == 1)\nassert(count_upper(\"\
    abC\") == 0)\nassert(count_upper(\"abc\") == 0)\nassert(count_upper(\"aBc\") ==\
    \ 1)\nassert(count_upper(\"abC\") == 0)\nassert(count_upper(\"aBCd\") == 1)\n\
    assert(count_upper(\"aBcD\") == 2)\nassert(count_upper(\"abCD\") == 1)\nassert(count_upper(\"\
    abcD\") == 0)\nassert(count_upper(\"abCd\") == 0)\nassert(count_upper(\"aBcDd\"\
    ) == 2)\nassert(count_upper(\"aBcDD\") == 3)\nassert(count_upper(\"aBcde\") ==\
    \ 1)\nassert(count_upper(\"aBcDE\") == 2)\nassert(count_upper(\"aBcDEf\") == 2)\n\
    assert(count_upper(\"aBcDEF\") == 3)\nassert(count_upper(\"aBcDEFg\") == 3)\n\
    assert(count_upper(\"aBcDEFG\") == 4)", "    local c = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n            c\
    \ = c + 1\n        end\n    end\n    return c\nend", "   local count = 0\n   local\
    \ pos = 0\n   for c in s:gmatch(\".\") do\n      if pos % 2 == 0 and (c == \"\
    A\" or c == \"E\" or c == \"I\" or c == \"O\" or c == \"U\") then\n         count\
    \ = count + 1\n      end\n      pos = pos + 1\n   end\n   return count\nend",
  "  local count = 0\n  for idx = 1, #s do\n    local char = s:sub(idx, idx)\n   \
    \ if char:match(\"[AEIOU]\") and idx % 2 == 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "   local count = 0\n   for i = 1,#s do\n\
    \      if i % 2 == 0 and s:sub(i,i):match('[AEIOU]') then\n         count = count\
    \ + 1\n      end\n   end\n   return count\nend", "\tlocal count = 0\n\tfor i =\
    \ 1, #s do\n\t\tif i % 2 == 0 and is_upper(s, i) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    local cnt = 0\n    for i = 1, #s do\n\
    \        if s:sub(i, i):find('[AEIOU]') and i % 2 == 0 then\n            cnt =\
    \ cnt + 1\n        end\n    end\n    return cnt\nend\nassert(count_upper('AeIoU')\
    \ == 2)\nassert(count_upper('aEiOu') == 2)\nassert(count_upper('aEioU') == 1)\n\
    assert(count_upper('aeIoU') == 1)\nassert(count_upper('aEiOu') == 2)\nassert(count_upper('aeiOu')\
    \ == 1)\nassert(count_upper('aeioU') == 0)\nassert(count_upper('aeiou') == 0)",
  "\t-- s:gmatch'%A' matches all ASCII characters\n\t-- (for Unicode, use s:gmatch'%u'\
    \ to match alphanumeric characters).\n\t-- %A is the opposite of %a.\n\t-- The\
    \ index is used to keep track of the current character.\n\t-- %2 indicates the\
    \ character should be matched in odd indices.\n\tlocal count = 0\n\tfor _ in s:gmatch'%A'\
    \ do\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "    local count = 0\n\
    \    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find('[AEIOU]') then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    -- IMPLEMENT ME\nend", "    local n = 0\n    for i = 1, #s do\n        if i\
    \ % 2 == 0 and s:match('^%u') then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0\
    \ and string.find(s:sub(i, i), \"[AEIOU]\") then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "  -- your code goes here\nend\ncount_upper('aAsEdFKJ')",
  "\tlocal n = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\"\
    ) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "    local cnt = 0\n\
    \    local vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and contains(vowels, s:sub(i, i)) then\n            cnt = cnt + 1\n\
    \        end\n    end\n    return cnt\nend", "    local sum = 0\n    for i, c\
    \ in ipairs(s) do\n        if i % 2 == 0 and (c == 'A' or c == 'E' or c == 'I'\
    \ or c == 'O' or c == 'U') then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend", "  local c = 0\n  for i = 1, #s do\n    local si = s:sub(i,\
    \ i)\n    if i % 2 == 0 and si:find(\"[AEIOU]\") then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend", "  local k,n = 1,0\n  for i=1,#s do\n    local c = string.sub(s,i,i)\n\
    \    if     k == 0 and string.find(c,\"[AEIOU]\")  then n = n + 1\n    elseif\
    \ k == 1 and string.find(c,\"[aeiou]\")  then n = n + 1\n    end\n    k = (k +\
    \ 1) % 2\n  end\n  return n\nend", "    return 0\nend", "    return s:gsub('(%a)',\
    \ function(s)\n        if (s:find('[AEIOU]') and s == s:upper()) then\n      \
    \      return s\n        end\n    end):len()\nend\nprint('count_upper(s)', count_upper(s))",
  "    local uppers = 0\n    for i,c in s:gmatch\"()(%a)\" do\n        if (i%2 ==\
    \ 0) and c:match\"%u\" then\n            uppers = uppers + 1\n        end\n  \
    \  end\n    return uppers\nend\nprint(count_upper(\"HelLO\"))", "   local count\
    \ = 0\n   for i = 1, #s do\n      if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    -- TODO: Write this function!\nend", "  -- your code here\nend", "  local count\
    \ = 0\n  for i = 1, string.len(s) do\n    local char = string.sub(s, i, i)\n \
    \   if i % 2 == 0 and (char == 'A' or char == 'E' or char == 'I' or char == 'O'\
    \ or char == 'U') then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and string.find(vowels,\
    \ string.sub(s, i, i)) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for i = 1, string.len(s) do\n    if i % 2\
    \ == 0 and string.find(\"AEIOU\", string.sub(s, i, i)) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for c in s:gmatch(\"\
    [AEIOU]\") do\n    count = count + 1\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1,#s do\n    if i % 2 == 0 and s:sub(i,i):match('[AEIOU]') then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(s, '[AEIOU]',\
    \ i, true) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i):find('^[AEIOU]$')\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   local\
    \ count = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_vowel(s:sub(i, i))\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if s:sub(i, i):match('^[AEIOU]$')\
    \ and (i % 2 == 0) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  for i = 1, #s do\n    if (i % 2\
    \ == 0) and is_upper(s:sub(i, i)) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local n = 0\n    for i = 1, #s do\n        if i %\
    \ 2 == 0 and is_vowel(s:sub(i, i)) then\n            n = n + 1\n        end\n\
    \    end\n    return n\nend", "   local n = 0\n   for i = 1, #s do\n      if (i\
    \ % 2 == 0) and s:match('[AEIOU]', i) then\n         n = n + 1\n      end\n  \
    \ end\n   return n\nend", "  local count = 0\n  for i=1,#s do\n    if (i % 2 ==\
    \ 0) and is_upper(s:sub(i,i)) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nassert(count_upper(\"AAaAaA\") == 3)\nassert(count_upper(\"\
    abcd\") == 0)\nassert(count_upper(\"\") == 0)\nassert(count_upper(\"aaaa\") ==\
    \ 0)", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and is_upper(s,\
    \ i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\t\
    local count = 0\n\tfor i = 1, #s do\n\t\tif is_upper(s:sub(i, i)) and is_even(i)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   local\
    \ count = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_upper(s:sub(i, i))\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "  local count = 0\n  for i=1,string.len(s) do\n    local c = string.sub(s, i, i)\n\
    \    if i % 2 == 0 and string.find(\"AEIOU\", c) then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "    local n = 0\n    for i = 1, #s do\n\
    \        if i % 2 == 0 and s:sub(i, i):find \"[AEIOU]\" then\n            n =\
    \ n + 1\n        end\n    end\n    return n\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\") then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local res = 0\n    for i = 1, #s do\n        if s:byte(i) < 97 then\n     \
    \       res = res + 1\n        end\n    end\n    return res\nend", "    -- count\
    \ the number of uppercase vowels in even indices.\n    local count = 0\n    local\
    \ vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i, ch in\
    \ ipairs(s) do\n        if vowels[ch:lower()] and i % 2 == 0 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ vowels = {\"A\", \"E\", \"I\", \"O\", \"U\"}\n    local n = 0\n    for i = 1,\
    \ #s do\n        local ch = s:sub(i, i)\n        if i % 2 == 0 and ch:match(\"\
    [AEIOU]\") then\n            n = n + 1\n        end\n    end\n    return n\nend",
  "  -- ...\nend", "    local vowel = {['A'] = true, ['E'] = true, ['I'] = true, ['O']\
    \ = true, ['U'] = true}\n    local count = 0\n    for i = 1, #s do\n        if\
    \ i % 2 == 0 and vowel[s:sub(i, i)] then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nprint(count_upper('I Love Lua!'))",
  "  return s:gsub(\"[AEIOUY]\", function(c)\n    return (c:byte() - 64) % 2 == 0\
    \ and \"!\" or \"\"\n  end):len()\nend", "  local n = 0\n  for i = 1, #s do\n\
    \    if (i % 2 == 0) and is_upper(s, i) then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend", "  local cnt = 0\n  for i = 1,#s do\n    if s:sub(i,i):find('[AEIOU]')\
    \ and i % 2 == 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\n\
    assert(count_upper('aaAAbbBb') == 1)\nassert(count_upper('aA') == 1)\nassert(count_upper('Aa')\
    \ == 1)\nassert(count_upper('a') == 0)\nassert(count_upper('A') == 1)\nassert(count_upper('B')\
    \ == 0)\nassert(count_upper('Bb') == 0)\nassert(count_upper('AB') == 1)\nassert(count_upper('BA')\
    \ == 0)\nassert(count_upper('aB') == 0)\nassert(count_upper('Bb') == 0)", "  \
    \  local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.find(\"\
    AEIOU\", s:sub(i, i), 1, true) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  -- ...\nend", "  local count = 0\n  for i=1,#s\
    \ do\n    if i%2==0 and (s:sub(i,i)=='A' or s:sub(i,i)=='E' or s:sub(i,i)=='I'\
    \ or s:sub(i,i)=='O' or s:sub(i,i)=='U') then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local r = 0\n    for i = 1, #s do\n       \
    \ if i % 2 == 0 and s:match('[AEIOU]', i) then\n            r = r + 1\n      \
    \  end\n    end\n    return r\nend", "  local i = 0\n  local count = 0\n  for\
    \ letter in string.gmatch(s, \".\") do\n    i = i + 1\n    if (i % 2 == 0) and\
    \ (letter == 'A' or letter == 'E' or letter == 'I' or letter == 'O' or letter\
    \ == 'U') then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, #s do\n    if (i % 2) == 0 and string.find(s:sub(i,\
    \ i), '[AEIOU]') then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    return #string.gsub(s, \"%d+\", \"\")\nend", "    local n = 0\n   \
    \ for i, c in ipairs(s) do\n        if i % 2 == 0 and string.match(c, \"[AEIOU]\"\
    ) then\n            n = n + 1\n        end\n    end\n    return n\nend\nassert(count_upper(\"\
    ABCD\") == 1)\nassert(count_upper(\"aeIou\") == 2)\nassert(count_upper(\"aEiOu\"\
    ) == 4)\nassert(count_upper(\"aeiou\") == 0)", "  -- your code here\nend", " \
    \   local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i,\
    \ i):find('[AEIOU]') then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, #s do\n        if\
    \ is_upper(s, i) and is_even(i) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local num = 0\n    for i = 1, #s do\n \
    \       if i % 2 == 0 and is_upper(s, i) then\n            num = num + 1\n   \
    \     end\n    end\n    return num\nend", end, "  local count = 0\n  for i=1,#s\
    \ do\n    if s:sub(i,i):match(\"^[AEIOU]$\") and (i%2)==0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nassert(count_upper(\"aBcDeFg\"\
    ) == 2)\nassert(count_upper(\"AAcDeFg\") == 2)\nassert(count_upper(\"aBCDeFg\"\
    ) == 3)\nassert(count_upper(\"AABCDeFg\") == 3)", "    return #s:gsub(\"[AEIOU]\"\
    , \"\"):gsub(\"[aeiou]\", \"\")\nend", "  local n = 0\n  for i = 1, #s do\n  \
    \  if i % 2 == 0 and string.find(\"AEIOU\", s:sub(i, i)) then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend", "  local c = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if i % 2 == 0 and c:match(\"[AEIOU]\") then\n      c =\
    \ c + 1\n    end\n  end\n  return c\nend", "    local count = 0\n    for i = 1,\
    \ #s do\n        if i % 2 == 0 and is_upper(s:sub(i, i)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    for k, v in pairs(s) do\n        if k % 2 == 0 and isVowel(v) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "   local n = 0\n   for i = 1, #s do\n      if i % 2 == 0 and s:sub(i, i):match(\"\
    ^[AEIOU]$\") then\n         n = n + 1\n      end\n   end\n   return n\nend", " \
    \  return count(match(s, \"(%a)([AEIOU])(%a)\", 2))\nend\nprint(count_upper(\"\
    The FLAG is yellow\")) --> 2", "  return #s:gsub(\"[aeiou]\", function(c)\n  \
    \  if c:byte() >= 65 and c:byte() <= 90 then\n      return c\n    end\n  end)\n\
    end", "  --[[\n  uppercase_vowels = [char for char in s if char in \"AEIOU\" and\
    \ char.isupper()]\n  return len(uppercase_vowels)\n  --]]\n  local uppers = {}\n\
    \  for i = 1, #s do\n    local char = s:sub(i, i)\n    if char:match(\"^[AEIOU]$\"\
    ) and char == char:upper() then\n      table.insert(uppers, char)\n    end\n \
    \ end\n  return #uppers\nend\nassert(count_upper(\"My Name Is Amelie\") == 2)\n\
    assert(count_upper(\"BANANA\") == 0)\nassert(count_upper(\"ACADEMIC\") == 2)\n\
    assert(count_upper(\"Coding Python\") == 2)\nassert(count_upper(\"Python is a\
    \ pretty cool language\") == 3)\nassert(count_upper(\"ThE liNuX cOmmand LinE Is\
    \ aWeSoMe\") == 5)\nassert(count_upper(\"The Quick Brown Fox\") == 2)\nassert(count_upper(\"\
    TAKING A DEEP LOOK AT THE DATA\") == 4)\nassert(count_upper(\"QUICK BROWN FOX\
    \ JUMPS OVER THE LAZY DOG\") == 9)", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\
    \tif tonumber(i) % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\") then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local count = 0\n  for\
    \ i = 1,#s do\n    if (i % 2 == 0) and s:sub(i,i):match(\"[AEIOU]\") then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend\nassert(count_upper(\"\
    Hi there!\") == 0)\nassert(count_upper(\"HEY THERE YOU!\") == 5)\nassert(count_upper(\"\
    hello\") == 0)", "  if s:find(\"[^AEIOU]\") then\n    return 0\n  end\n  local\
    \ n = 0\n  for i = 1, #s, 2 do\n    if s:sub(i, i) == s:sub(i, i):upper() then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend", end, "  local count = 0\n\
    \  for i = 1, #s do\n    if is_upper(s:sub(i, i)) and is_even(i) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if s:sub(i, i):match(\"[AEIOU]\") and i % 2 == 0 then\n  \
    \    count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and 'AEIOU' :match(s:sub(i,\
    \ i)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \ -- Variable to hold the sum of odd numbers.\n  local sum = 0\n  -- Iterate over\
    \ the string using `#s`:\n  for i = 1, #s do\n    -- Modulo operator to know if\
    \ the index is even.\n    -- If true, check if the character is an uppercase vowel.\n\
    \    if i % 2 == 0 and is_upper_vowel(s:sub(i, i)) then\n      -- Increment the\
    \ sum by 1.\n      sum = sum + 1\n    end\n  end\n  -- Return the result:\n  return\
    \ sum\nend", "  return s:gsub('%f[aeiouAEIOU]', ''):len()\nend", "    local count\
    \ = 0\n    for i = 1,#s do\n        if i % 2 == 0 and s:sub(i,i):find(\"[AEIOU]\"\
    ) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, string.len(s) do\n        if string.match(s,\
    \ \"[AEIOU]\", i) then\n            if i % 2 == 0 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #s do\n        if i % 2 == 0 and s:sub(i, i):match('[AEIOU]')\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, string.len(s) do\n        if i % 2\
    \ == 0 and is_vowel(string.sub(s, i, i)) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local n = 0\n    for i = 1,\
    \ #s do\n        if i % 2 == 0 and s:sub(i, i):match(\"[AEIOU]\") then\n     \
    \       n = n + 1\n        end\n    end\n    return n\nend", "  -- Assuming there\
    \ are 26 possible letters in the alphabet.\n  local numbers = {}\n  -- add all\
    \ initial values to the table.\n  for i = 65, 90 do\n    numbers[string.char(i)]\
    \ = 0\n  end\n  -- Iterate over all the string and get even indices.\n  for i\
    \ = 1, string.len(s), 2 do\n    local c = string.char(s:byte(i))\n    if numbers[c]\
    \ then\n      numbers[c] = numbers[c] + 1\n    end\n  end\n  return numbers\n\
    end", "  local c = 0\n  for i = 1, #s do\n    if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) then\n      c = c + 1\n    end\n  end\n  return c\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if i % 2 == 0 and string.match(s, \"[AEIOU]\"\
    , i) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    return count_if(s, function(x) return is_vowel(x) and is_upper(x) end)\n\
    end", "  local n = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):match(\"\
    ^[AEIOU]$\") then\n      n = n + 1\n    end\n  end\n  return n\nend\nassert(count_upper(\"\
    CAT\") == 0)\nassert(count_upper(\"caT\") == 1)\nassert(count_upper(\"cAt\") ==\
    \ 0)\nassert(count_upper(\"cAT\") == 1)\nassert(count_upper(\"CaT\") == 1)\nassert(count_upper(\"\
    Cat\") == 0)\nassert(count_upper(\"CA\") == 0)\nassert(count_upper(\"cA\") ==\
    \ 1)\nassert(count_upper(\"Ca\") == 0)\nassert(count_upper(\"CAt\") == 1)\nassert(count_upper(\"\
    CAt\") == 1)\nassert(count_upper(\"CATt\") == 1)\nassert(count_upper(\"CATt\"\
    ) == 1)\nassert(count_upper(\"cATt\") == 0)\nassert(count_upper(\"\") == 0)\n\
    assert(count_upper(\"c\") == 0)\nassert(count_upper(\"C\") == 0)\nassert(count_upper(\"\
    CATATUCA\") == 4)", "    local count = 0\n    for i = 1, #s do\n        if (i\
    \ % 2 == 0) and (s:sub(i, i):find(\"[AEIOU]\") ~= nil) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal count =\
    \ 0\n\tfor i = 1, #s do\n\t\tif i % 2 == 0 and s:sub(i, i):find(\"[AEIOU]\") then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local count\
    \ = 0\n    for i = 1, #s do\n        if s:sub(i, i):match(\"[AEIOU]\") then\n\
    \            if i % 2 == 0 then\n                count = count + 1\n         \
    \   end\n        end\n    end\n    return count\nend", "\tlocal count = 0\n\t\
    for i = 1, #s do\n\t\tif s:sub(i, i):match('[AEIOU]') then\n\t\t\tif i % 2 ==\
    \ 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    if s == \"\" then\n        return 0\n    elseif string.find(s, '^[aeiouAEIOU]')\
    \ ~= nil then\n        return 1 + count_upper(string.sub(s, 2))\n    else\n  \
    \      return count_upper(string.sub(s, 2))\n    end\nend", "\tlocal count = 0\n\
    \tfor i = 1, #s do\n\t\tif (i % 2) == 0 and s:sub(i, i):match(\"^[AEIOU]$\") then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   local c = 0\n\
    \   for i=1, #s do\n      if (i % 2 == 0) and (s:sub(i,i):upper() == s:sub(i,i))\
    \ then\n         c = c + 1\n      end\n   end\n   return c\nend", "    local n\
    \ = 0\n    for i = 1, #s do\n        if (i % 2) == 0 and s:sub(i, i):find(\"^[AEIOU]$\"\
    ) then\n            n = n + 1\n        end\n    end\n    return n\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if i % 2 == 0 and s:sub(i, i):find('[AEIOU]')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i = 1, #s do\n    if (i % 2 == 0) and is_upper(s:sub(i, i))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nprint(count_upper(\"\
    abcdefg\"))", "   local n = 0\n   for i = 1, #s do\n      if i % 2 == 0 and is_vowel(s:sub(i,\
    \ i)) then\n         n = n + 1\n      end\n   end\n   return n\nend", "   return\
    \ count_matching(s, function(c) return c == string.upper(c) end)\nend\nassert(count_upper(\"\
    Hello\") == 2)\nassert(count_upper(\"World\") == 1)\nassert(count_upper(\"Hola\"\
    ) == 0)\nassert(count_upper(\"H\") == 1)\nassert(count_upper(\"HELLO\") == 5)"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
