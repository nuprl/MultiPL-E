name: HumanEval_3_below_zero
language: lua
prompt: "-- You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n-- zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n-- at that point function should return\
  \ True. Otherwise it should return False.\nlocal function below_zero(operations)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_zero\n\
  \    lu.assertEquals(candidate({}), false)\n    lu.assertEquals(candidate({1, 2,\
  \ -3, 1, 2, -3}), false)\n    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)\n\
  \    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)\n    lu.assertEquals(candidate({1,\
  \ -1, 2, -2, 5, -5, 4, -5}), true)\n    lu.assertEquals(candidate({1, -2, 2, -2,\
  \ 5, -5, 4, -4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local balance = 0\n  for _, v in ipairs(operations) do\n    if v\
    \ < 0 then\n      balance = balance + v\n      if balance < 0 then\n        return\
    \ true\n      end\n    else\n      balance = balance + v\n    end\n  end\n  return\
    \ false\nend", "    local balance = 0\n    for _, op in ipairs(operations) do\n\
    \        balance = balance + op\n        if balance < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local account = 0\n\
    \    for _, v in ipairs(operations) do\n        if v > 0 then\n            account\
    \ = account + v\n        else\n            account = account - v\n        end\n\
    \        if account < 0 then\n            return true\n        end\n    end\n\
    \    return false\nend", "    local balance = 0\n    for _,operation in ipairs(operations)\
    \ do\n        if operation < 0 then\n            balance = balance + operation\n\
    \            if balance < 0 then\n                return true\n            end\n\
    \        else\n            balance = balance + operation\n        end\n    end\n\
    \    return false\nend", "  local balance = 0\n  for _, op in ipairs(operations)\
    \ do\n    if op.type == 'deposit' then\n      balance = balance + op.amount\n\
    \    elseif op.type == 'withdrawal' then\n      balance = balance - op.amount\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local curr = 0\n    for _, val in ipairs(operations) do\n\
    \        curr = curr + val\n        if curr < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local balance = 0\n  for i,\
    \ v in ipairs(operations) do\n    local op, amount = v:match(\"([%a]+) (%d+)\"\
    )\n    if op == \"D\" then\n      balance = balance + amount\n    elseif op ==\
    \ \"W\" then\n      balance = balance - amount\n    end\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local balance =\
    \ 0\n    for _,op in ipairs(operations) do\n        if op < 0 then\n         \
    \   balance = balance + op\n            if balance < 0 then\n                return\
    \ true\n            end\n        else\n            balance = balance + op\n  \
    \      end\n    end\n    return false\nend", "  local balance = 0\n  for _, op\
    \ in ipairs(operations) do\n    balance = balance + op\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local balance = 0\n\
    \  for i = 1, #operations do\n    local operation = operations[i]\n    local amount\
    \ = operation[1]\n    local type = operation[2]\n    if type == 'w' then\n   \
    \   balance = balance - amount\n    else\n      balance = balance + amount\n \
    \   end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local balance = 0\n    for _, v in ipairs(operations) do\n\
    \        balance = balance + v\n        if balance < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local balance = 0\n\
    \    for _, op in ipairs(operations) do\n        if op < 0 then\n            balance\
    \ = balance + op\n            if balance < 0 then\n                return true\n\
    \            end\n        else\n            balance = balance + op\n        end\n\
    \    end\n    return false\nend", "    local balance = 0\n    for _, change in\
    \ ipairs(operations) do\n        balance = balance + change\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "  local balance = 0\n  for _, operation in ipairs(operations) do\n    if\
    \ operation.type == 'deposit' then\n      balance = balance + operation.amount\n\
    \    elseif operation.type == 'withdrawal' then\n      balance = balance - operation.amount\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tlocal balance = 0", "    local balance = 0\n    for i = 1, #operations\
    \ do\n        if type(operations[i]) == 'number' then\n            balance = balance\
    \ + operations[i]\n        elseif operations[i] == 'withdraw' then\n         \
    \   balance = balance - operations[i + 1]\n        end\n        if balance < 0\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    assert(not below_zero({100, 'withdraw', 200, 'withdraw', 300}))\nassert(below_zero({100,\
    \ 'withdraw', 900, 'withdraw', 300}))\nassert(below_zero({100, 'withdraw', 200,\
    \ 'withdraw', 700, 'withdraw', 100}))", "   local balance = 0\n   for _, op in\
    \ ipairs(operations) do\n      if op.operation == \"D\" then\n         balance\
    \ = balance + op.amount\n      else\n         balance = balance - op.amount\n\
    \      end\n      if balance < 0 then\n         return true\n      end\n   end\n\
    \   return false\nend", "  local balance = 0\n  for k, v in ipairs(operations)\
    \ do\n    if string.sub(v, 1, 1) == \"-\" then\n      balance = balance - string.sub(v,\
    \ 2)\n    else\n      balance = balance + string.sub(v, 2)\n    end\n    if balance\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ balance = 0\n  for _, oper in ipairs(operations) do\n    balance = balance +\
    \ oper.amount\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local balance = 0\n  for _, o in ipairs(operations) do\n   \
    \ balance = balance + o\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local balance = 0\n  for _, op in ipairs(operations)\
    \ do\n    if op.operation == \"deposit\" then\n      balance = balance + op.amount\n\
    \    elseif op.operation == \"withdraw\" then\n      balance = balance - op.amount\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tlocal balance = 0\n\tfor _, operation in ipairs(operations)\
    \ do\n\t\tbalance = balance + operation\n\t\tif balance < 0 then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend", '    local balance = 0', "    local\
    \ balance = 0\n    for i = 1, #operations do\n        if operations[i][1] == 'deposit'\
    \ then\n            balance = balance + operations[i][2]\n        elseif operations[i][1]\
    \ == 'withdraw' then\n            balance = balance - operations[i][2]\n     \
    \   end\n        if balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\nend", "    local balance = 0\n    for i = 1, #operations\
    \ do\n        if operations[i][2] < 0 then\n            balance = balance - operations[i][2]\n\
    \            if balance < 0 then\n                return true\n            end\n\
    \        else\n            balance = balance + operations[i][2]\n        end\n\
    \    end\n    return false\nend", "  local balance = 0\n  for _, operation in\
    \ ipairs(operations) do\n    if operation[1] == \"deposit\" then\n      balance\
    \ = balance + operation[2]\n    elseif operation[1] == \"withdraw\" then\n   \
    \   balance = balance - operation[2]\n    end\n    if balance < 0 then\n     \
    \ return true\n    end\n  end\n  return false\nend\nassert(below_zero({\"deposit\"\
    ,10},{\"withdraw\",5},{\"withdraw\",6}) == true)\nassert(below_zero({\"deposit\"\
    ,10},{\"withdraw\",5},{\"deposit\",5}) == false)\nassert(below_zero({\"deposit\"\
    ,10},{\"withdraw\",15}) == true)\nassert(below_zero({\"deposit\",10},{\"withdraw\"\
    ,5},{\"withdraw\",4},{\"withdraw\",1}) == false)\nassert(below_zero({\"deposit\"\
    ,10},{\"withdraw\",5},{\"withdraw\",4},{\"withdraw\",10}) == true)", "    return\
    \ foldl(function(a,v) return a+v end, 0, operations) < 0\nend", "    local balance\
    \ = 0\n    for i, operation in ipairs(operations) do\n        if operation:sub(1,\
    \ 1) == \"-\" then\n            balance = balance - tonumber(operation:sub(2))\n\
    \        else\n            balance = balance + tonumber(operation:sub(2))\n  \
    \      end\n        if balance < 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "  local balance = 0\n  for _, operation in\
    \ ipairs(operations) do\n    balance = balance + operation\n    if balance < 0\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    local current\
    \ = 0\n    for i = 1, #operations do\n        local operation = operations[i]\n\
    \        if (operation[1] == 'd') then\n            current = current + operation[2]\n\
    \        else\n            current = current - operation[2]\n        end\n   \
    \     if (current < 0) then\n            return true\n        end\n    end\n \
    \   return false\nend", '    local balance = 0', "    local balance = 0\n    for\
    \ _, operation in ipairs(operations) do\n        if operation.operation == 'deposit'\
    \ then\n            balance = balance + operation.amount\n        elseif operation.operation\
    \ == 'withdraw' then\n            balance = balance - operation.amount\n     \
    \   end\n        if balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\nend", "    local total = 0\n    for i = 1, #operations\
    \ do\n        local operation = operations[i]\n        if operation[1] == 'deposit'\
    \ then\n            total = total + operation[2]\n        elseif operation[1]\
    \ == 'withdraw' then\n            total = total - operation[2]\n        end\n\
    \        if total < 0 then\n            return true\n        end\n    end\n  \
    \  return false\nend", "    for i, op in ipairs(operations) do\n        if (op[1]\
    \ == \"deposit\") then\n            if (op[2] < 0) then\n                return\
    \ true\n            end\n        elseif (op[1] == \"withdraw\") then\n       \
    \     if (op[2] > 0) then\n                return true\n            end\n    \
    \    end\n    end\n    return false\nend", "   local bal = 0\n   for k,v in pairs(operations)\
    \ do\n      if v.deposit then\n         bal = bal + v.deposit\n      else\n  \
    \       bal = bal - v.withdrawal\n      end\n      if bal < 0 then\n         return\
    \ true\n      end\n   end\n   return false\nend", "    local balance = 0\n   \
    \ for _, op in ipairs(operations) do\n        balance = balance + op\n       \
    \ if balance < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local balance = 0\n    for i,v in ipairs(operations) do\n\
    \        balance = balance + v\n        if balance < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", '    local balance = 0',
  "  for k,v in ipairs(operations) do\n    if v.amount < 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "   local balance = 0\n   for i = 1, #operations\
    \ do\n      if operations[i][1] == \"d\" then\n         balance = balance + operations[i][2]\n\
    \      else\n         balance = balance - operations[i][2]\n      end\n      if\
    \ balance < 0 then\n         return true\n      end\n   end\n   return false\n\
    end", '    local balance = 0', "    local balance = 0\n    for _, operation in\
    \ ipairs(operations) do\n        if operation.action == 'deposit' then\n     \
    \       balance = balance + operation.amount\n        elseif operation.action\
    \ == 'withdraw' then\n            balance = balance - operation.amount\n     \
    \   end\n        if balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\nend", "  local below_zero = false\n  local balance\
    \ = 0\n  for _, v in ipairs(operations) do\n    if v[1] == \"deposit\" then\n\
    \      balance = balance + v[2]\n    elseif v[1] == \"withdraw\" then\n      balance\
    \ = balance - v[2]\n    end\n    if balance < 0 then\n      below_zero = true\n\
    \      break\n    end\n  end\n  return below_zero\nend", "    local balance =\
    \ 0\n    for i = 1, #operations do\n        local operation = operations[i]\n\
    \        if operation < 0 then\n            balance = balance + operation\n  \
    \          if balance < 0 then\n                return true\n            end\n\
    \        else\n            balance = balance + operation\n        end\n    end\n\
    \    return false\nend", "    local balance = 0\n    for i = 1, #operations do\n\
    \        if operations[i][1] == 'd' then\n            balance = balance + operations[i][2]\n\
    \        else\n            balance = balance - operations[i][2]\n        end\n\
    \        if balance < 0 then\n            return true\n        end\n    end\n\
    \    return false\nend", "    return nil\nend", "  return any(function(e) return\
    \ e < 0 end, scanl(function(acc, e) return acc + e end, 0, operations))\nend",
  "    local below_zero = false\n    local balance = 0\n    for _, operation in ipairs(operations)\
    \ do\n        balance = balance + operation.amount\n        if balance < 0 then\n\
    \            below_zero = true\n            break\n        end\n    end\n    return\
    \ below_zero\nend", "  local balance = 0\n  for _, op in ipairs(operations) do\n\
    \    local amount = tonumber(op:match(\"%d+\"))\n    if op:match(\"withdraw\"\
    ) then\n      balance = balance - amount\n    else\n      balance = balance +\
    \ amount\n    end\n    if balance < 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local balance = 0\n  for _, operation in ipairs(operations)\
    \ do\n    if operation.operation == 'deposit' then\n      balance = balance +\
    \ operation.amount\n    elseif operation.operation == 'withdrawal' then\n    \
    \  balance = balance - operation.amount\n    end\n    if balance < 0 then\n  \
    \    return true\n    end\n  end\n  return false\nend", "    local balance = 0\n\
    \    for _, operation in ipairs(operations) do\n        balance = balance + operation\n\
    \        if balance < 0 then\n            return true\n        end\n    end\n\
    \    return false\nend", "\tlocal result = false\n\tlocal balance = 0\n\tfor i,\
    \ v in ipairs(operations) do\n\t\tif v > 0 then\n\t\t\tbalance = balance + v\n\
    \t\telse\n\t\t\tbalance = balance - v\n\t\tend\n\t\tif balance < 0 then\n\t\t\t\
    result = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend", "  local balance\
    \ = 0\n  for _, op in ipairs(operations) do\n    balance = balance + op\n    if\
    \ balance < 0 then\n      return true\n    end\n  end\n  return false\nend", " \
    \   local balance = 0\n    for _, o in ipairs(operations) do\n        if o.operation\
    \ == 'deposit' then\n            balance = balance + o.amount\n        elseif\
    \ o.operation == 'withdraw' then\n            balance = balance - o.amount\n \
    \       end\n        if balance < 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "    local balance = 0\n    for _, i in ipairs(operations)\
    \ do\n        balance = balance + i\n        if balance < 0 then\n           \
    \ return true\n        end\n    end\n    return false\nend", "  local bal = 0\n\
    \  for _, op in ipairs(operations) do\n    if op.action == 'W' then\n      bal\
    \ = bal - op.amount\n    else\n      bal = bal + op.amount\n    end\n    if bal\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "   local\
    \ balance = 0\n   for _, operation in ipairs(operations) do\n      if operation[1]\
    \ == \"D\" then\n         balance = balance + operation[2]\n      else\n     \
    \    balance = balance - operation[2]\n      end\n      if balance < 0 then\n\
    \         return true\n      end\n   end\n   return false\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(operations) do\n        if v < 0 then\n        \
    \    sum = sum + v\n            if sum < 0 then\n                return true\n\
    \            end\n        else\n            sum = sum + v\n        end\n    end\n\
    \    return false\nend", "  local balance = 0\n  for i, operation in ipairs(operations)\
    \ do\n    if operation[1] == 'deposit' then\n      balance = balance + operation[2]\n\
    \    elseif operation[1] == 'withdraw' then\n      balance = balance - operation[2]\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tlocal balance = 0\n\tfor _, v in ipairs(operations) do\n\t\t\
    balance = balance + v\n\t\tif balance < 0 then\n\t\t\treturn true\n\t\tend\n\t\
    end\n\treturn false\nend\nprint(below_zero({100, 0, -100}))", "    -- Helper function\
    \ that reverses list\n    local function reverse(l)\n        local r = {}\n  \
    \      for i = #l, 1, -1 do\n            r[#r + 1] = l[i]\n        end\n     \
    \   return r\n    end", "    local current_balance = 0\n    for _, operation in\
    \ ipairs(operations) do\n        current_balance = current_balance + operation\n\
    \        if current_balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\nend", "    local amount = 0\n    for _, op in ipairs(operations)\
    \ do\n        amount = amount + op\n        if amount < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local balance = 0\n \
    \ for _, operation in ipairs(operations) do\n    balance = balance + operation\n\
    \    if balance < 0 then\n      return true\n    end\n  end\n  return false\n\
    end", '    local balance = 0', "   local balance = 0\n   for i = 1, #operations\
    \ do\n      balance = balance + operations[i]\n      if balance < 0 then\n   \
    \      return true\n      end\n   end\n   return false\nend", "  local balance\
    \ = 0\n  for i = 1, #operations do\n    local operation = operations[i]\n    if\
    \ operation[1] == \"deposit\" then\n      balance = balance + operation[2]\n \
    \   elseif operation[1] == \"withdraw\" then\n      balance = balance - operation[2]\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local below = false\n    local balance = 0\n    for _, op\
    \ in ipairs(operations) do\n        local amount = op[2]\n        if op[1] ==\
    \ 'W' then\n            amount = -amount\n        end\n        balance = balance\
    \ + amount\n        if balance < 0 then\n            below = true\n          \
    \  break\n        end\n    end\n    return below\nend", "  local sum = 0\n  for\
    \ _, i in ipairs(operations) do\n    sum = sum + i\n    if sum < 0 then\n    \
    \  return true\n    end\n  end\n  return false\nend", "    local balance = 0\n\
    \    for _, v in ipairs(operations) do\n        balance = balance + v\n      \
    \  if balance < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local balance = 0\n    for _, val in ipairs(operations) do\n\
    \        if val.op == 'D' then\n            balance = balance + val.val\n    \
    \    else\n            balance = balance - val.val\n        end\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "  local sum = 0\n  for _, v in ipairs(operations) do\n    sum = sum + v\n\
    \    if sum < 0 then\n      return true\n    end\n  end\n  return false\nend",
  "    local balance = 0\n    for _, op in ipairs(operations) do\n        if op.deposit\
    \ then\n            balance = balance + op.deposit\n        else\n           \
    \ balance = balance - op.withdrawal\n        end\n        if balance < 0 then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ balance = 0\n  for i, operation in ipairs(operations) do\n    balance = balance\
    \ + operation\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local bal = 0\n    for i,v in ipairs(operations) do\n    \
    \    if v.type == 'withdraw' then\n            bal = bal - v.amount\n        else\n\
    \            bal = bal + v.amount\n        end\n        if bal < 0 then\n    \
    \        return true\n        end\n    end\n    return false\nend", "    local\
    \ balance = 0\n    for i = 1, #operations do\n        if operations[i] < 0 then\n\
    \            balance = balance + operations[i]\n            if balance < 0 then\n\
    \                return true\n            end\n        else\n            balance\
    \ = balance + operations[i]\n        end\n    end\n    return false\nend", " \
    \ local bal = 0\n  for i = 1, #operations do\n    if operations[i][1] == 'd' then\n\
    \      bal = bal + operations[i][2]\n    else\n      bal = bal - operations[i][2]\n\
    \    end\n    if bal < 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "\tlocal balance = 0\n\tfor index, deposit_or_withdrawal in ipairs(operations)\
    \ do\n\t\tbalance = balance + deposit_or_withdrawal\n\t\tif balance < 0 then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", '    local balance =
    0', "    local balance = 0\n    for _, op in ipairs(operations) do\n        balance\
    \ = balance + op\n        if balance < 0 then\n            return true\n     \
    \   end\n    end\n    return false\nend", "    for i = 1, #operations do\n   \
    \     if operations[i][1] == 'withdraw' then\n            operations[i][1] = '-'\n\
    \        else\n            operations[i][1] = '+'\n        end\n    end\n    local\
    \ string = table.concat(operations, ' ')\n    print(string)\n    local f = loadstring('return\
    \ ' .. string)\n    if f() < 0 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "\tlocal balance = 0\n\tfor i = 1, #operations do\n\t\t\
    local op = operations[i]\n\t\tif op[1] == 'deposit' then\n\t\t\tbalance = balance\
    \ + op[2]\n\t\telseif op[1] == 'withdraw' then\n\t\t\tbalance = balance - op[2]\n\
    \t\tend\n\t\tif balance < 0 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend\nassert_true(below_zero{ {'deposit', 50}, {'withdraw', 25}, {'withdraw',\
    \ 100} })\nassert_false(below_zero{ {'deposit', 25}, {'withdraw', 25}, {'withdraw',\
    \ 25} })\nassert_false(below_zero{ {'deposit', 35}, {'withdraw', 25}, {'withdraw',\
    \ 25} })\nassert_false(below_zero{ {'deposit', 60}, {'withdraw', 25}, {'withdraw',\
    \ 30} })\nassert_true(below_zero{ {'deposit', 25}, {'withdraw', 30}, {'withdraw',\
    \ 40} })\nassert_true(below_zero{ {'deposit', 100}, {'withdraw', 250}, {'withdraw',\
    \ 40} })\nassert_false(below_zero{ {'deposit', 25}, {'withdraw', 20}, {'withdraw',\
    \ 20} })\nassert_false(below_zero{ {'deposit', 25}, {'withdraw', 15}, {'withdraw',\
    \ 15} })\nassert_false(below_zero{ {'deposit', 25}, {'withdraw', 5}, {'withdraw',\
    \ 5} })\nassert_false(below_zero{ {'deposit', 25}, {'withdraw', 5}, {'withdraw',\
    \ 5} })\nassert_false(below_zero{ {'deposit', 250}, {'withdraw', 25}, {'withdraw',\
    \ 25} })\nassert_false(below_zero{ {'deposit', 50}, {'withdraw', 25}, {'withdraw',\
    \ 25} })\nassert_false(below_zero{ {'deposit', 50}, {'withdraw', 25}, {'withdraw',\
    \ 25", "    local balance = 0\n    for _, v in ipairs(operations) do\n       \
    \ balance = balance + v\n        if balance < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    -- check if the final balance\
    \ is below zero\n    local balance = 0\n    for i, op in ipairs(operations) do\n\
    \        if op.type == 'deposit' then\n            balance = balance + op.amount\n\
    \        elseif op.type == 'withdrawal' then\n            balance = balance -\
    \ op.amount\n        end\n        if balance < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "\tlocal balance = 0\n\tfor i =\
    \ 1, #operations do\n\t\tlocal op = operations[i]\n\t\tif op:match('d%d') then\n\
    \t\t\tbalance = balance + tonumber(op:match('d(%d+)'))\n\t\telseif op:match('w%d')\
    \ then\n\t\t\tbalance = balance - tonumber(op:match('w(%d+)'))\n\t\tend\n\t\t\
    if balance < 0 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
  "  local balance = 0\n  for k,v in pairs(operations) do\n    if string.match(v,\
    \ \"withdraw\") then\n      balance = balance - tonumber(string.match(v, \"withdraw\
    \ %d+\"))\n    elseif string.match(v, \"deposit\") then\n      balance = balance\
    \ + tonumber(string.match(v, \"deposit %d+\"))\n    end\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", '    local balance =
    0', "    local balance = 0\n    for _, o in ipairs(operations) do\n        balance\
    \ = balance + o\n        if balance < 0 then\n            return true\n      \
    \  end\n    end\n    return false\nend", "\tlocal balance = 0\n\tfor _, op in\
    \ ipairs(operations) do\n\t\tbalance = balance + op\n\t\tif balance < 0 then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", '    local balance =
    0', '    local balance = 0', "    local total = 0\n    for _,amount in ipairs(operations)\
    \ do\n        total = total + amount\n        if total < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    -- below_zero({{'d',\
    \ 100}, {'w', 20}, {'d', 20}, {'w', 20}}) == true\n    -- below_zero({{'d', 100},\
    \ {'w', 200}, {'d', 200}, {'w', 10}}) == false\n    for _,v in ipairs(operations)\
    \ do\n        if v[1] == 'd' then\n            sum = sum + v[2]\n        else\n\
    \            sum = sum - v[2]\n        end\n        if sum < 0 then\n        \
    \    return true\n        end\n    end\n    return false\nend", "\tlocal result,\
    \ acc = {}, 0\n\tfor i, v in ipairs(operations) do\n\t\ttable.insert(result, acc)\n\
    \t\tacc = acc + v\n\tend\n\treturn result\nend", "  -- print(operations)\n  local\
    \ balance = 0\n  for i,v in ipairs(operations) do\n    local value = v[2]\n  \
    \  if v[1] == 'D' then\n      balance = balance + value\n    else\n      balance\
    \ = balance - value\n    end\n    if balance < 0 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  local balance = 0\n  for _, v in ipairs(operations)\
    \ do\n    if v.op == \"deposit\" then\n      balance = balance + v.amount\n  \
    \  elseif v.op == \"withdraw\" then\n      balance = balance - v.amount\n    end\n\
    \    if balance < 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local balance = 0\n  for _, op in ipairs(operations) do\n    if op[1]\
    \ == 'withdraw' then\n      balance = balance - op[2]\n    else\n      balance\
    \ = balance + op[2]\n    end\n    if balance < 0 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "\tlocal balance = 0\n\tfor i, op in ipairs(operations)\
    \ do\n\t\tbalance = balance + op\n\t\tif balance < 0 then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "  local balance = 0\n  for i = 1, #operations\
    \ do\n    local op = operations[i]\n    if op.type == \"deposit\" then\n     \
    \ balance = balance + op.amount\n    elseif op.type == \"withdrawal\" then\n \
    \     balance = balance - op.amount\n    end\n    if balance < 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local balance = 0\n  for _, op\
    \ in ipairs(operations) do\n    if op[1] == 'withdraw' then\n      balance = balance\
    \ - op[2]\n    else\n      balance = balance + op[2]\n    end\n    if balance\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ balance = 0\n  for k,v in pairs(operations) do\n    if v[1] == \"deposit\" then\n\
    \      balance = balance + v[2]\n    elseif v[1] == \"withdraw\" then\n      balance\
    \ = balance - v[2]\n    end\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local balance = 0\n  for _, op in ipairs(operations)\
    \ do\n    local amount = op[2]\n    local operation = op[1]\n    if operation\
    \ == 'd' then\n      balance = balance + amount\n    else\n      balance = balance\
    \ - amount\n    end\n    if balance < 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "    local balance = 0\n    for i, operation in ipairs(operations)\
    \ do\n        if operation.add then\n            balance = balance + operation.add\n\
    \        else\n            balance = balance - operation.sub\n        end\n  \
    \      if balance < 0 then\n            return true\n        end\n    end\n  \
    \  return false\nend", "   local balance = 0\n   for _, value in ipairs(operations)\
    \ do\n      balance = balance + value\n      if balance < 0 then\n         return\
    \ true\n      end\n   end\n   return false\nend", "  -- your code here\n  local\
    \ balance = 0\n  for _, op in ipairs(operations) do\n    if op[1] == \"withdraw\"\
    \ then\n      balance = balance - op[2]\n    else\n      balance = balance + op[2]\n\
    \    end\n    \n    if balance < 0 then\n      return true\n    end\n  end\n \
    \ \n  return false\nend", "  for i = 1, #operations do\n    if operations[i] <\
    \ 0 then\n      return true\n    end\n  end\n  return false\nend", "  local balance\
    \ = 0\n  for _, v in ipairs(operations) do\n    balance = balance + v\n    if\
    \ balance < 0 then\n      return true\n    end\n  end\n  return false\nend", " \
    \   local bal = 0\n    for i,v in ipairs(operations) do\n        if v[1] == 'deposit'\
    \ then\n            bal = bal + v[2]\n        elseif v[1] == 'withdraw' then\n\
    \            bal = bal - v[2]\n        end\n        if bal < 0 then\n        \
    \    return true\n        end\n    end\n    return false\nend", "    -- 1\n  \
    \  local balance = 0", "  local bal = 0\n  for _, v in ipairs(operations) do\n\
    \    bal = bal + v\n    if bal < 0 then\n      return true\n    end\n  end\n \
    \ return false\nend", "  local balance = 0\n  for i = 1, #operations do\n    local\
    \ operation = operations[i]\n    local amount = operation:match(\"%d+\")\n   \
    \ if operation:find(\"deposit\") then\n      balance = balance + tonumber(amount)\n\
    \    elseif operation:find(\"withdraw\") then\n      balance = balance - tonumber(amount)\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tlocal balance = 0\n\tfor _, operation in ipairs(operations)\
    \ do\n\t\tif operation.kind == 'deposit' then\n\t\t\tbalance = balance + operation.amount\n\
    \t\telseif operation.kind == 'withdrawal' then\n\t\t\tbalance = balance - operation.amount\n\
    \t\tend\n\t\tif balance < 0 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "   local balance = 0\n   for i = 1, #operations do\n      local\
    \ op = operations[i]\n      if op[1] == 'deposit' then\n         balance = balance\
    \ + op[2]\n      elseif op[1] == 'withdraw' then\n         balance = balance -\
    \ op[2]\n      end\n      if balance < 0 then\n         return true\n      end\n\
    \   end\n   return false\nend", "   -- go through the operations and add a current\
    \ total balance of account,\n   -- start with the first element of the list and\
    \ the current balance 0\n   local function process(op_list, current_balance)\n\
    \      if not op_list[1] then\n         -- no operations left, if current balance\
    \ is negative return True,\n         -- otherwise return False\n         return\
    \ current_balance < 0\n      else\n         -- we have operations left, add the\
    \ operation to the current balance\n         -- and call process with the remaining\
    \ operations and the new current balance\n         return process(\n         \
    \   op_list,\n            current_balance + op_list[1]\n         )\n      end\n\
    \   end", "    local balance = 0\n    for _, op in ipairs(operations) do\n   \
    \     local amount = op:match(\"deposit (%d+)\")\n        if amount then\n   \
    \         balance = balance + tonumber(amount)\n        else\n            amount\
    \ = op:match(\"withdrawal (%d+)\")\n            if amount then\n             \
    \   balance = balance - tonumber(amount)\n            end\n        end\n     \
    \   if balance < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local account = 0\n    for _, operation in ipairs(operations)\
    \ do\n        account = account + operation\n        if account < 0 then\n   \
    \         return true\n        end\n    end\n    return false\nend", "  local\
    \ balance = 0\n  for i, v in ipairs(operations) do\n    if v[1] == \"withdraw\"\
    \ then\n      balance = balance - v[2]\n    else\n      balance = balance + v[2]\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local balance = 0\n  for i = 1, #operations do\n    local operation\
    \ = operations[i]\n    if (operation.type == 'deposit') then\n      balance =\
    \ balance + operation.amount\n    elseif (operation.type == 'withdrawal') then\n\
    \      balance = balance - operation.amount\n    end\n    if (balance < 0) then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local balance =\
    \ 0\n    for i, v in ipairs(operations) do\n        if v < 0 then\n          \
    \  balance = balance - v\n        else\n            balance = balance + v\n  \
    \      end\n        if balance < 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "  local current_balance = 0\n  for i = 1, #operations\
    \ do\n    local operation = operations[i]\n    if operation[1] == 'deposit' then\n\
    \      current_balance = current_balance + operation[2]\n    elseif operation[1]\
    \ == 'withdraw' then\n      current_balance = current_balance - operation[2]\n\
    \    end\n    if current_balance < 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "    local balance = 0\n    for _, value in ipairs(operations)\
    \ do\n        balance = balance + value\n        if balance < 0 then\n       \
    \     return true\n        end\n    end\n    return false\nend", "  local net\
    \ = 0\n  for _, operation in ipairs(operations) do\n    if operation.what == \"\
    deposit\" then\n      net = net + operation.amount\n    elseif operation.what\
    \ == \"withdrawal\" then\n      net = net - operation.amount\n    end\n    if\
    \ net < 0 then\n      return true\n    end\n  end\n  return false\nend", "  local\
    \ balance = 0\n  for _, operation in ipairs(operations) do\n    if operation.action\
    \ == 'deposit' then\n      balance = balance + operation.amount\n    elseif operation.action\
    \ == 'withdraw' then\n      balance = balance - operation.amount\n    end\n  \
    \  if balance < 0 then\n      return true\n    end\n  end\n  return false\nend",
  "    return false\nend", "  local balance = 0\n  for i = 1, #operations do\n   \
    \ balance = balance + operations[i]\n    if balance < 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local balance = 0\n  for _, op in ipairs(operations)\
    \ do\n    balance = balance + op\n    if balance < 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", "    local bal = 0\n    for _,op in ipairs(operations)\
    \ do\n        if op > 0 then\n            bal = bal + op\n        else\n     \
    \       bal = bal - op\n        end\n        if bal < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local balance = 0\n \
    \ for i, op in ipairs(operations) do\n    if op[1] == 'deposit' then\n      balance\
    \ = balance + op[2]\n    elseif op[1] == 'withdraw' then\n      balance = balance\
    \ - op[2]\n    end\n    if balance < 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local balance = 0\n  for _,v in ipairs(operations) do\n\
    \    balance = balance + v\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  -- your code here\n  local balance = 0\n  for\
    \ k,v in pairs(operations) do\n    balance = balance + v\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local balance =\
    \ 0\n    for i = 1, #operations do\n        local operation = operations[i]\n\
    \        if operation:sub(1, 1) == '-' then\n            balance = balance - tonumber(operation:sub(2))\n\
    \        else\n            balance = balance + tonumber(operation:sub(2))\n  \
    \      end\n        if balance < 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "    local balance = 0\n    for i,v in ipairs(operations)\
    \ do\n        local oper = v[1]\n        local amount = v[2]\n        if oper\
    \ == 'D' then\n            balance = balance + amount\n        elseif oper ==\
    \ 'W' then\n            balance = balance - amount\n        end\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "  local balance = 0\n  for i = 1, #operations do\n    local op = operations[i]\n\
    \    if op[1] == 'w' then\n      balance = balance - op[2]\n    else\n      balance\
    \ = balance + op[2]\n    end\n    if balance < 0 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  local balance = 0\n  for _, i in ipairs(operations)\
    \ do\n    if i < 0 then\n      balance = balance + i\n      if balance < 0 then\n\
    \        return true\n      end\n    else\n      balance = balance + i\n    end\n\
    \  end\n  return false\nend", "    local balance = 0\n    for i = 1, #operations\
    \ do\n        if operations[i] >= 0 then\n            balance = balance + operations[i]\n\
    \        else\n            balance = balance - operations[i]\n        end\n  \
    \      if balance < 0 then\n            return true\n        end\n    end\n  \
    \  return false\nend", "  local balance = 0\n  for i = 1, #operations do\n   \
    \ if operations[i] < 0 then\n      balance = balance + operations[i]\n      if\
    \ balance < 0 then\n        return true\n      end\n    else\n      balance =\
    \ balance + operations[i]\n    end\n  end\n  return false\nend", '    local balance
    = 0', '  local total = 0', "    local below = false\n    local balance = 0\n \
    \   for _, operation in ipairs(operations) do\n        if operation[1] == 'deposit'\
    \ then\n            balance = balance + operation[2]\n        elseif operation[1]\
    \ == 'withdraw' then\n            balance = balance - operation[2]\n        end\n\
    \        if balance < 0 then\n            below = true\n            break\n  \
    \      end\n    end\n    return below\nend", "    -- balance starts with zero\n\
    \    local balance = 0\n    -- traverse all operations\n    for i,v in ipairs(operations)\
    \ do\n        -- if op is deposit then add it to balance\n        if v.op == \"\
    deposit\" then\n            balance = balance + v.amount\n        -- if op is\
    \ withdrawal then substract it from balance\n        elseif v.op == \"withdrawal\"\
    \ then\n            balance = balance - v.amount\n        -- return true if balance\
    \ is below zero\n        if balance < 0 then\n            return true\n      \
    \  end\n    end\n    -- if balance never goes below zero, return false\n    return\
    \ false\nend", "\tlocal sum = 0\n\tfor i = 1, #operations do\n\t\tlocal op = operations[i]\n\
    \t\tif op[1] == \"Deposit\" then\n\t\t\tsum = sum + op[2]\n\t\telseif op[1] ==\
    \ \"Withdraw\" then\n\t\t\tsum = sum - op[2]\n\t\tend\n\t\tif sum < 0 then\n\t\
    \t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "  local balance = 0\n\
    \  for _, operation in ipairs(operations) do\n    if operation.type == 'deposit'\
    \ then\n      balance = balance + operation.amount\n    elseif operation.type\
    \ == 'withdrawal' then\n      balance = balance - operation.amount\n    end\n\
    \    if balance < 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local balance = 0\n  for _,v in ipairs(operations) do\n    balance =\
    \ balance + v\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  return find(operations, function(n) return n < 0 end) ~= nil\n\
    end", "    --\n    local i = 1;\n    while i <= #operations do\n        if operations[i]\
    \ < 0 then\n            return true;\n        end\n        i = i + 1;\n    end\n\
    \    return false;\nend", "  -- Write your code here\n  local sum = 0\n  for i,\
    \ v in ipairs(operations) do\n    if v[1] == 'd' then\n      sum = sum + v[2]\n\
    \    else\n      sum = sum - v[2]\n    end\n    if sum < 0 then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local balance = 0\n    for\
    \ _, op in ipairs(operations) do\n        balance = balance + op\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", '    local balance = 0', "  local balance = 0\n  for i = 1, #operations\
    \ do\n    if operations[i] < 0 then\n      balance = balance + operations[i]\n\
    \      if balance < 0 then\n        return true\n      end\n    else\n      balance\
    \ = balance + operations[i]\n    end\n  end\n  return false\nend", "  -- your\
    \ code goes here!\n  return false\nend", "  local balance = 0\n  for i = 1, #operations\
    \ do\n    if operations[i][1] == 'D' then\n      balance = balance + operations[i][2]\n\
    \    else\n      balance = balance - operations[i][2]\n    end\n    if balance\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "    local\
    \ sum = 0\n    for _, op in ipairs(operations) do\n        sum = sum + op\n  \
    \      if sum < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    return nil\nend", '    local balance = 0', "  -- Initial balance\
    \ is zero\n  local balance = 0\n  -- Loop over operations\n  for _, operation\
    \ in ipairs(operations) do\n    if operation.operation == \"deposit\" then\n \
    \     balance = balance + operation.amount\n    elseif operation.operation ==\
    \ \"withdraw\" then\n      balance = balance - operation.amount\n    end\n   \
    \ -- If balance falls below zero, return true\n    if balance < 0 then\n     \
    \ return true\n    end\n  end\n  -- Balance never fell below zero, return false\n\
    \  return false\nend", "  local balance = 0\n  for _,v in ipairs(operations) do\n\
    \    balance = balance + v\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "    local balance = 0\n    for _, op in ipairs(operations)\
    \ do\n        local amount = op[2]\n        balance = balance + amount\n     \
    \   if balance < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "  local balance = 0\n  for _, op in ipairs(operations) do\n  \
    \  if op[1] == 'deposit' then\n      balance = balance + op[2]\n    elseif op[1]\
    \ == 'withdraw' then\n      balance = balance - op[2]\n    end\n    if balance\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "\tlocal\
    \ balance = 0\n\tfor _, transaction in ipairs(operations) do\n\t\tif transaction.operation\
    \ == 'deposit' then\n\t\t\tbalance = balance + transaction.amount\n\t\telseif\
    \ transaction.operation == 'withdraw' then\n\t\t\tbalance = balance - transaction.amount\n\
    \t\t\tif balance < 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\
    return false\nend", "    return false\nend", "  local balance = 0\n  for i = 1,\
    \ #operations do\n    local amount = operations[i]\n    if amount < 0 then balance\
    \ = balance + amount end\n    if balance < 0 then return true end\n  end\n  return\
    \ false\nend", "  local balance = 0\n  for _, op in ipairs(operations) do\n  \
    \  balance = balance + op\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local balance = 0\n  for _, v in ipairs(operations)\
    \ do\n    balance = balance + v\n    if balance < 0 then\n      return true\n\
    \    end\n  end\n  return false\nend\nassert(below_zero{50, -60, 30, -10, -10}\
    \ == true)\nassert(below_zero{50, 30, 30, 10, 10} == false)\nassert(below_zero{}\
    \ == false)", "    local balance = 0\n    for _, value in ipairs(operations) do\n\
    \        balance = balance + value\n        if balance < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", '    local balance = 0',
  "    local balance = 0\n    for _, operation in ipairs(operations) do\n        balance\
    \ = balance + operation\n        if balance < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local balance = 0\n    for\
    \ _, op in ipairs(operations) do\n        balance = balance + op\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "  local balance = 0\n  for _, operation in ipairs(operations) do\n    if\
    \ operation.is_deposit then\n      balance = balance + operation.amount\n    else\n\
    \      balance = balance - operation.amount\n    end\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", '    local balance =
    0', "    local sum = 0\n    for i = 1, #operations do\n        sum = sum + operations[i]\n\
    \        if sum < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "  local balance = 0\n  for i, v in ipairs(operations) do\n   \
    \ if v[1] == 'D' then\n      balance = balance + v[2]\n    else\n      balance\
    \ = balance - v[2]\n    end\n    if balance < 0 then\n      return true\n    end\n\
    \  end\n  return false\nend", "    local sum = 0\n    for _, operation in ipairs(operations)\
    \ do\n        sum = sum + operation\n        if sum < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local balance = 0\n \
    \ for _, operation in ipairs(operations) do\n    if operation[1] == 'w' then\n\
    \      balance = balance - operation[2]\n    else\n      balance = balance + operation[2]\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  local balance = 0\n  for _, op in ipairs(operations) do\n  \
    \  if op.operation == \"withdraw\" then\n      balance = balance - op.amount\n\
    \    else\n      balance = balance + op.amount\n    end\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local balance =\
    \ 0\n    for _, op in ipairs(operations) do\n        balance = balance + op\n\
    \        if balance < 0 then\n            return true\n        end\n    end\n\
    \    return false\nend", "  local balance = 0\n  for i = 1, #operations do\n \
    \   if operations[i] > 0 then\n      balance = balance + operations[i]\n    else\n\
    \      balance = balance - operations[i]\n    end\n    if balance < 0 then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local s = 0\n  for\
    \ i = 1, #operations do\n    local op = operations[i]\n    if op[1] == 'D' then\n\
    \      s = s + op[2]\n    else\n      s = s - op[2]\n    end\n    if s < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "  local balance = 0\n\
    \  for _, op in ipairs(operations) do\n    if op[1] == \"d\" then\n      balance\
    \ = balance + op[2]\n    else\n      balance = balance - op[2]\n    end\n    if\
    \ balance < 0 then\n      return true\n    end\n  end\n  return false\nend", " \
    \   local balance = 0\n    for _, operation in ipairs(operations) do\n       \
    \ if operation.type == 'deposit' then\n            balance = balance + operation.amount\n\
    \        elseif operation.type == 'withdrawal' then\n            balance = balance\
    \ - operation.amount\n        end\n        if balance < 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", '    local balance = 0',
  "\tlocal balance = 0\n\tfor i, op in ipairs(operations) do\n\t\tbalance = balance\
    \ + op\n\t\tif balance < 0 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end\nprint(below_zero({-3,3,3,3}))\nprint(below_zero({0,4,4,4}))\nprint(below_zero({-4,4,4,4}))\n\
    print(below_zero({-4,4,4,4,4}))\nprint(below_zero({-4,4,4,4,5}))\nprint(below_zero({5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "  local balance = 0\n  for i, op in ipairs(operations) do\n    balance = balance\
    \ + op\n    if balance < 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "    local result = {}\n    for _, op in ipairs(operations) do\n       \
    \ local value = op[2]\n        local balance = (result[#result] or 0) + value\n\
    \        if balance < 0 then\n            return true\n        end\n        table.insert(result,\
    \ balance)\n    end\n    return false\nend", "    local balance = 0\n    for _,\
    \ op in ipairs(operations) do\n        if op.action == 'deposit' then\n      \
    \      balance = balance + op.amount\n        elseif op.action == 'withdraw' then\n\
    \            balance = balance - op.amount\n        end\n        if balance <\
    \ 0 then\n            return true\n        end\n    end\n    return false\nend",
  "  local balance = 0\n  for _,operation in ipairs(operations) do\n    balance =\
    \ balance + operation\n    if balance < 0 then\n      return true\n    end\n \
    \ end\n  return false\nend", "  local balance = 0\n  for _,v in ipairs(operations)\
    \ do\n    if v.operation == \"deposit\" then\n      balance = balance + v.amount\n\
    \    elseif v.operation == \"withdraw\" then\n      balance = balance - v.amount\n\
    \    end\n    if balance < 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend", "   local balance = 0\n   for _, op in ipairs(operations) do\n\
    \      if op.type == 'deposit' then\n         balance = balance + op.amount\n\
    \      elseif op.type == 'withdrawal' then\n         balance = balance - op.amount\n\
    \      end\n      if balance < 0 then\n         return true\n      end\n   end\n\
    \   return false\nend", "    --[[\n    local balance = 0\n    for i, val in ipairs(operations)\
    \ do\n        if val.deposit then\n            balance = balance + val.deposit\n\
    \        else\n            balance = balance - val.withdrawal\n        end\n \
    \       if balance < 0 then\n            return true\n        end\n    end\n \
    \   return false\n    --]]\n    --[[\n    local balance = 0\n    for i, val in\
    \ ipairs(operations) do\n        balance = balance + (val.deposit or 0) - (val.withdrawal\
    \ or 0)\n        if balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\n    --]]\n    local balance = 0\n    for i, val in\
    \ ipairs(operations) do\n        if val.deposit or val.withdrawal then\n     \
    \       balance = balance + (val.deposit or 0) - (val.withdrawal or 0)\n     \
    \       if balance < 0 then\n                return true\n            end\n  \
    \      end\n    end\n    return false\nend", "  local balance = 0\n  for i,operation\
    \ in ipairs(operations) do\n    balance = balance + operation\n    if balance\
    \ < 0 then\n      return true\n    end\n  end\n  return false\nend", "    local\
    \ balance = 0\n    for _, v in ipairs(operations) do\n        local oper, amount\
    \ = v[1], v[2]\n        if oper == 'deposit' then\n            balance = balance\
    \ + amount\n        elseif oper == 'withdraw' then\n            balance = balance\
    \ - amount\n        end\n        if balance < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local bal = 0\n    for i,\
    \ op in ipairs(operations) do\n        if op[1] == 'deposit' then\n          \
    \  bal = bal + op[2]\n        elseif op[1] == 'withdraw' then\n            bal\
    \ = bal - op[2]\n        end\n        if bal < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "  local balance = 0\n  for i =\
    \ 1, #operations do\n    if operations[i][1] == 'deposit' then\n      balance\
    \ = balance + operations[i][2]\n    elseif operations[i][1] == 'withdraw' then\n\
    \      balance = balance - operations[i][2]\n    end\n    if balance < 0 then\n\
    \      return true\n    end\n  end\n  return false\nend", "    local balance =\
    \ 0\n    for _, op in ipairs(operations) do\n        if op.type == \"deposit\"\
    \ then\n            balance = balance + op.amount\n        elseif op.type == \"\
    withdrawal\" then\n            balance = balance - op.amount\n        end\n  \
    \      if balance < 0 then\n            return true\n        end\n    end\n  \
    \  return false\nend", "  local balance = 0\n  for _, o in ipairs(operations)\
    \ do\n    if o[1] == 'D' then\n      balance = balance + o[2]\n    else\n    \
    \  balance = balance - o[2]\n    end\n    if balance < 0 then\n      return true\n\
    \    end\n  end\n  return false\nend", '    local balance = 0', "  local balance\
    \ = 0\n  for _, op in ipairs(operations) do\n    if op[1] == 'deposit' then\n\
    \      balance = balance + op[2]\n    elseif op[1] == 'withdraw' then\n      balance\
    \ = balance - op[2]\n    end\n    if balance < 0 then\n      return true\n   \
    \ end\n  end\n  return false\nend", "  local balance = 0\n  for _, operation in\
    \ ipairs(operations) do\n    balance = balance + operation\n    if balance < 0\
    \ then\n      return true\n    end\n  end\n  return false\nend", '    local balance
    = 0', "  local balance = 0\n  for i, op in ipairs(operations) do\n    if op[1]\
    \ == 'd' then\n      balance = balance + op[2]\n    else\n      balance = balance\
    \ - op[2]\n    end\n    if balance < 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "\tlocal balance = 0\n\tfor i, v in ipairs(operations)\
    \ do\n\t\tif v > 0 then\n\t\t\tbalance = balance + v\n\t\telse\n\t\t\tbalance\
    \ = balance - math.abs(v)\n\t\tend\n\t\tif balance < 0 then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
