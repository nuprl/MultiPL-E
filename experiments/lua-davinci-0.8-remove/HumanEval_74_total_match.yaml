name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two lists of strings and returns the list\
  \ that has \n-- total number of chars in the all strings of the list less than the\
  \ other list.\n-- if the two lists have the same number of chars, return the first\
  \ list.\n-- Examples\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Your code here\nend", end, "    --[[\n    local lst1_total =\
    \ 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n        lst1_total = lst1_total\
    \ + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        lst2_total = lst2_total\
    \ + #lst2[i]\n    end\n    if lst1_total > lst2_total then\n        return lst2\n\
    \    else\n        return lst1\n    end\n    --]]\n    return #(table.concat(lst1))\
    \ < #(table.concat(lst2)) and lst1 or lst2\nend\nassert(total_match({\"foo\"},\
    \ {\"bar\"}) == {\"bar\"})\nassert(total_match({\"foo\"}, {\"bar\", \"foobar\"\
    }) == {\"bar\", \"foobar\"})\nassert(total_match({\"foo\", \"bar\"}, {\"bar\"\
    , \"foobar\"}) == {\"foo\", \"bar\"})\nassert(total_match({\"foo\", \"bar\"},\
    \ {\"foo\", \"bar\"}) == {\"foo\", \"bar\"})\nassert(total_match({\"foo\", \"\
    bar\"}, {\"bar\", \"foo\"}) == {\"bar\", \"foo\"})", "    local count1 = 0\n \
    \   local count2 = 0\n    for i = 1, #lst1 do\n        count1 = count1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        count2 = count2 + #lst2[i]\n    end\n\
    \    if count1 < count2 then\n        return lst1\n    elseif count2 < count1\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nassert(total_match({'abc'},{'a','bc'})\
    \ == {'a','bc'})\nassert(total_match({'abc'},{'abc'}) == {'abc'})\nassert(total_match({'abc'},{'a','bc','d'})\
    \ == {'abc'})\nassert(total_match({'a','b','c'},{'a','bc','d'}) == {'a','b','c'})\n\
    assert(total_match({'a','b','c'},{'a','bc','d','e'}) == {'a','b','c'})", "  local\
    \ function list_total(list)\n    local total = 0\n    for _, str in ipairs(list)\
    \ do\n      total = total + string.len(str)\n    end\n    return total\n  end\n\
    \  local total1 = list_total(lst1)\n  local total2 = list_total(lst2)\n  if total1\
    \ == total2 then\n    return lst1\n  elseif total1 < total2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "\treturn 1\nend", "    local count1 =\
    \ 0\n    local count2 = 0\n    for i,v in ipairs(lst1) do\n        count1 = count1\
    \ + #v\n    end\n    for i,v in ipairs(lst2) do\n        count2 = count2 + #v\n\
    \    end\n    if count1 < count2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend", "\t-- body\nend", "  -- body\nend", "\tlocal total1\
    \ = total(lst1)\n\tlocal total2 = total(lst2)\n\tif total1 < total2 then\n\t\t\
    return lst1\n\telseif total2 < total1 then\n\t\treturn lst2\n\telse\n\t\treturn\
    \ lst1\n\tend\nend", "    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1\
    \ do\n        sum1 = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   sum2 = sum2 + #lst2[i]\n    end\n    if sum1 < sum2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "\tlocal total_lst1 = 0\n\tlocal\
    \ total_lst2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal_lst1 = total_lst1 + #lst1[i]\n\
    \tend\n\tfor i = 1, #lst2 do\n\t\ttotal_lst2 = total_lst2 + #lst2[i]\n\tend\n\t\
    if total_lst1 < total_lst2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\t\
    end\nend", "  local total1 = 0\n  local total2 = 0\n  for _,v in ipairs(lst1)\
    \ do\n    total1 = total1 + #v\n  end\n  for _,v in ipairs(lst2) do\n    total2\
    \ = total2 + #v\n  end\n  if total1 == total2 then\n    return lst1\n  elseif\
    \ total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n    return\
    \ lst2\n  end\nend", "  -- write your solution here\n  -- [[ this is a comment\
    \ --]]\n  local total1 = 0\n  local total2 = 0\n  for _,s in ipairs(lst1) do\n\
    \    total1 = total1 + #s\n  end\n  for _,s in ipairs(lst2) do\n    total2 = total2\
    \ + #s\n  end\n  if total1 < total2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "    local total1 = 0\n    local total2 = 0\n    for i,v\
    \ in ipairs(lst1) do\n        total1 = total1 + #v\n    end\n    for i,v in ipairs(lst2)\
    \ do\n        total2 = total2 + #v\n    end\n    if total1 < total2 then\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nprint(total_match({'12','34','56'},{'12','56','78'}))\
    \ -- {\"12\", \"34\", \"56\"}\nprint(total_match({'12','5','98','34','56'},{'12','56','78'}))\
    \ -- {\"12\", \"56\", \"78\"}", end, "  if lst1 == nil then return lst2 end\n\
    \  if lst2 == nil then return lst1 end\n  local total1 = 0\n  local total2 = 0\n\
    \  for index, value in ipairs(lst1) do\n    total1 = total1 + #value\n  end\n\
    \  for index, value in ipairs(lst2) do\n    total2 = total2 + #value\n  end\n\
    \  if total1 > total2 then\n    return lst2\n  else\n    return lst1\n  end\n\
    end", "\tlocal total1 = 0\n\tlocal total2 = 0\n\t\n\tfor i = 1, #lst1 do\n\t\t\
    total1 = total1 + #lst1[i]\n\tend\n\t\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2\
    \ + #lst2[i]\n\tend\n\t\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\
    \treturn lst2\n\tend\nend", "\treturn nil\nend", "    local total1 = 0\n    local\
    \ total2 = 0\n    for k, v in pairs(lst1) do\n        total1 = total1 + string.len(v)\n\
    \    end\n    for k, v in pairs(lst2) do\n        total2 = total2 + string.len(v)\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend", "    local lst_size1 = 0\n    local lst_size2 =\
    \ 0\n    for i, s in ipairs(lst1) do\n        lst_size1 = lst_size1 + #s\n   \
    \ end\n    for i, s in ipairs(lst2) do\n        lst_size2 = lst_size2 + #s\n \
    \   end\n    if lst_size1 < lst_size2 then\n        return lst1\n    else\n  \
    \      return lst2\n    end\nend", "    local total1 = 0\n    local total2 = 0\n\
    \    for i,v in ipairs(lst1) do\n        total1 = total1 + string.len(v)\n   \
    \ end\n    for i,v in ipairs(lst2) do\n        total2 = total2 + string.len(v)\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend", "  assert(type(lst1) == \"table\")\n  assert(type(lst2)\
    \ == \"table\")\n  local total1 = 0\n  local total2 = 0\n  for i, value in ipairs(lst1)\
    \ do\n    assert(type(value) == \"string\")\n    total1 = total1 + #value\n  end\n\
    \  for i, value in ipairs(lst2) do\n    assert(type(value) == \"string\")\n  \
    \  total2 = total2 + #value\n  end\n  if total1 < total2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "   if #lst1 == 0 then return lst2 end\n\
    \   if #lst2 == 0 then return lst1 end\n   local total1 = 0\n   local total2 =\
    \ 0\n   for i, str in ipairs(lst1) do\n      total1 = total1 + #str\n   end\n\
    \   for i, str in ipairs(lst2) do\n      total2 = total2 + #str\n   end\n   if\
    \ total1 > total2 then\n      return lst2\n   else\n      return lst1\n   end\n\
    end", "    local lst1_total = 0\n    local lst2_total = 0\n    for _, str in ipairs(lst1)\
    \ do\n        lst1_total = lst1_total + string.len(str)\n    end\n    for _, str\
    \ in ipairs(lst2) do\n        lst2_total = lst2_total + string.len(str)\n    end\n\
    \    if lst1_total < lst2_total then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nassert(total_match({'aa', 'bbb'}, {'cc', 'ddd'}) == {'aa',\
    \ 'bbb'})\nassert(total_match({'aaa', 'bbb'}, {'cc', 'ddd'}) == {'cc', 'ddd'})\n\
    assert(total_match({'aa', 'bbb'}, {'cc', 'dd'}) == {'aa', 'bbb'})\nassert(total_match({'aa',\
    \ 'bbb'}, {'cc', 'dddd'}) == {'aa', 'bbb'})\nassert(total_match({'aa', 'bbb'},\
    \ {'cc'}) == {'cc'})\nassert(total_match({'aa', 'bbb'}, {'cc', 'dddd', 'eeee'})\
    \ == {'cc', 'dddd', 'eeee'})\nassert(total_match({'aa', 'bbb'}, {'cc', 'dddd',\
    \ 'eee'}) == {'aa', 'bbb'})\nassert(total_match({'aa', 'bbb'}, {'cc', 'dddd',\
    \ 'eee', 'ff'}) == {'aa', 'bbb'})\nassert(total_match({'aaa', 'bbb'}, {'cc', 'dddd',\
    \ 'eee', 'ff'}) == {'cc', 'dddd', 'eee', 'ff'})", "  local total_chars_lst1 =\
    \ list.foldl(function(a, b) return a + #b end, 0, lst1)\n  local total_chars_lst2\
    \ = list.foldl(function(a, b) return a + #b end, 0, lst2)\n  if total_chars_lst1\
    \ < total_chars_lst2 then\n    return lst1\n  else\n    return lst2\n  end\nend",
  "    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n     \
    \   sum1 = sum1 + string.len(v)\n    end\n    for _, v in ipairs(lst2) do\n  \
    \      sum2 = sum2 + string.len(v)\n    end\n    if sum1 < sum2 then\n       \
    \ return lst1\n    else\n        return lst2\n    end\nend", "   local chars_in_lst1\
    \ = 0\n   local chars_in_lst2 = 0\n   for _, word in ipairs(lst1) do\n      chars_in_lst1\
    \ = chars_in_lst1 + #word\n   end\n   for _, word in ipairs(lst2) do\n      chars_in_lst2\
    \ = chars_in_lst2 + #word\n   end\n   if chars_in_lst1 < chars_in_lst2 then\n\
    \      return lst1\n   else\n      return lst2\n   end\nend", "  -- Your implementation\
    \ here...\n  local len1, len2 = 0, 0\n  for i = 1, #lst1 do\n    len1 = len1 +\
    \ #lst1[i]\n  end\n  for i = 1, #lst2 do\n    len2 = len2 + #lst2[i]\n  end\n\
    \  if len1 < len2 then\n    return lst1\n  else\n    return lst2\n  end\nend",
  "  local s1 = 0\n  local s2 = 0\n  for i, v in ipairs(lst1) do\n    s1 = s1 + #v\n\
    \  end\n  for i, v in ipairs(lst2) do\n    s2 = s2 + #v\n  end\n  if s1 < s2 then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "  local len1 = 0\n  local\
    \ len2 = 0\n  for i,v in ipairs(lst1) do\n    len1 = len1 + #v\n  end\n  for i,v\
    \ in ipairs(lst2) do\n    len2 = len2 + #v\n  end\n  if len1 < len2 then\n   \
    \ return lst1\n  else\n    return lst2\n  end\nend", "    local total_chars1 =\
    \ 0\n    local total_chars2 = 0\n    for i,v in ipairs(lst1) do\n        total_chars1\
    \ = total_chars1 + string.len(v)\n    end\n    for i,v in ipairs(lst2) do\n  \
    \      total_chars2 = total_chars2 + string.len(v)\n    end\n    if total_chars1\
    \ < total_chars2 then\n        return lst1\n    elseif total_chars2 < total_chars1\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend", " \
    \ local sum1 = 0\n  local sum2 = 0\n  for _, str in ipairs(lst1) do\n    sum1\
    \ = sum1 + #str\n  end\n  for _, str in ipairs(lst2) do\n    sum2 = sum2 + #str\n\
    \  end\n  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end", "    local list1_total = 0\n    local list2_total = 0\n    for i = 1, #lst1\
    \ do\n        list1_total = list1_total + #lst1[i]\n    end\n    for i = 1, #lst2\
    \ do\n        list2_total = list2_total + #lst2[i]\n    end\n    if list1_total\
    \ < list2_total then\n        return lst1\n    else\n        return lst2\n   \
    \ end\nend", "  local sz1 = 0\n  local sz2 = 0\n  for i, x in ipairs(lst1) do\n\
    \    sz1 = sz1 + #x\n  end\n  for i, x in ipairs(lst2) do\n    sz2 = sz2 + #x\n\
    \  end\n  if sz1 < sz2 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end", "\tlocal function total_chars(lst)\n\t\tlocal tot = 0\n\t\tfor _, word in\
    \ ipairs(lst) do\n\t\t\ttot = tot + #word\n\t\tend\n\t\treturn tot\n\tend\n\t\
    return total_chars(lst1) < total_chars(lst2) and lst1 or lst2\nend", "    -- ..\
    \ write your code here..\nend", "    return lst1\nend", "\nend", "\tlocal total1\
    \ = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1 do\n\t\ttotal1 = total1 + #lst1[i]\n\
    \tend\n\tfor i = 1, #lst2 do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\tif total1\
    \ < total2 then\n\t\treturn lst1\n\telseif total2 < total1 then\n\t\treturn lst2\n\
    \telse\n\t\treturn lst1\n\tend\nend", "end\nassert(total_match({\"aa\", \"bbb\"\
    , \"cccc\"}, {\"aa\", \"bbb\", \"cccc\"}) == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"\
    aa\", \"bbb\", \"cccc\"}, {\"aa\", \"bbbb\", \"cccc\"}) == {\"aa\", \"bbb\", \"\
    cccc\"})\nassert(total_match({\"aa\", \"bbb\", \"cccc\"}, {\"aa\", \"bbbb\", \"\
    ccccc\"}) == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"aa\", \"bbb\"\
    , \"cccc\"}, {\"aaa\", \"bbb\", \"cccc\"}) == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"\
    aa\", \"bbb\", \"cccc\"}, {\"aaa\", \"bbbb\", \"cccc\"}) == {\"aa\", \"bbb\",\
    \ \"cccc\"})\nassert(total_match({\"aa\", \"bbb\", \"cccc\"}, {\"aaa\", \"bbbb\"\
    , \"ccccc\"}) == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"aa\", \"\
    bbb\", \"cccc\"}, {\"aaaa\", \"bbb\", \"cccc\"}) == {\"aa\", \"bbb\", \"cccc\"\
    })\nassert(total_match({\"aa\", \"bbb\", \"cccc\"}, {\"aaaa\", \"bbbb\", \"cccc\"\
    }) == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"aa\", \"bbb\", \"cccc\"\
    }, {\"aaaa\", \"bbbb\", \"ccccc\"}) == {\"aa\", \"bbb\", \"cccc\"})", "    local\
    \ total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 =\
    \ total1 + string.len(lst1[i])\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + string.len(lst2[i])\n    end\n    if total1 == total2 then\n    \
    \    return lst1\n    elseif total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nprint(total_match({\"a\", \"aa\", \"aaa\"\
    }, {\"bbbb\"})) -- {\"a\", \"aa\", \"aaa\"}\nprint(total_match({\"a\", \"aa\"\
    , \"aaa\"}, {\"b\", \"bb\", \"bbb\"})) -- {\"a\", \"aa\", \"aaa\"}\nprint(total_match({\"\
    a\", \"aa\", \"aaa\"}, {\"b\", \"bb\"})) -- {\"b\", \"bb\"}", "  local sum_chars1\
    \ = 0\n  local sum_chars2 = 0\n  for _, v in ipairs(lst1) do\n    sum_chars1 =\
    \ sum_chars1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    sum_chars2 = sum_chars2\
    \ + #v\n  end\n  if sum_chars1 < sum_chars2 then\n    return lst1\n  else\n  \
    \  return lst2\n  end\nend", "    local total1 = 0\n    local total2 = 0\n   \
    \ for i = 1, #lst1 do\n        total1 = total1 + #lst1[i]\n    end\n    for i\
    \ = 1, #lst2 do\n        total2 = total2 + #lst2[i]\n    end\n    if total1 <\
    \ total2 then\n        return lst1\n    else\n        return lst2\n    end\nend",
  "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor k,v in pairs(lst1) do\n\t\tsum1 = sum1\
    \ + string.len(v)\n\tend\n\tfor k,v in pairs(lst2) do\n\t\tsum2 = sum2 + string.len(v)\n\
    \tend\n\tif sum1 < sum2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\n\
    end", "\t\n\tlocal total_chars1 = 0\n\tlocal total_chars2 = 0\n\tlocal i = 1\n\
    \t\n\twhile lst1[i] do\n\t\ttotal_chars1 = total_chars1 + string.len(lst1[i])\n\
    \t\ti = i + 1\n\tend\n\t\n\ti = 1\n\t\n\twhile lst2[i] do\n\t\ttotal_chars2 =\
    \ total_chars2 + string.len(lst2[i])\n\t\ti = i + 1\n\tend\n\t\n\tif total_chars1\
    \ < total_chars2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend",
  "    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n \
    \       lst1_total = lst1_total + string.len(lst1[i])\n    end\n    for i = 1,\
    \ #lst2 do\n        lst2_total = lst2_total + string.len(lst2[i])\n    end\n \
    \   if lst1_total < lst2_total then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend", "\tif lst1 == nil then return lst2 end\n\tif lst2 == nil\
    \ then return lst1 end\n\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor _, v in ipairs(lst1)\
    \ do\n\t\tsum1 = sum1 + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tsum2 = sum2\
    \ + #v\n\tend\n\tif sum1 < sum2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\
    \tend\nend", " \nend", "  local len1 = 0\n  local len2 = 0\n  for _,str in ipairs(lst1)\
    \ do\n    len1 = len1 + #str\n  end\n  for _,str in ipairs(lst2) do\n    len2\
    \ = len2 + #str\n  end\n  if len1 > len2 then\n    return lst2\n  else\n    return\
    \ lst1\n  end\nend", "    local lst1_sum = 0\n    local lst2_sum = 0\n    for\
    \ _,v in ipairs(lst1) do\n        lst1_sum = lst1_sum + #v\n    end\n    for _,v\
    \ in ipairs(lst2) do\n        lst2_sum = lst2_sum + #v\n    end\n    if lst1_sum\
    \ > lst2_sum then\n        return lst2\n    elseif lst1_sum < lst2_sum then\n\
    \        return lst1\n    else\n        return lst1\n    end\nend", "\tlocal total1\
    \ = 0\n\tlocal total2 = 0\n\tfor k,v in pairs(lst1) do\n\t\ttotal1 = total1 +\
    \ #v\n\tend\n\tfor k,v in pairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\t\
    if total1 > total2 then\n\t\treturn lst2\n\telseif total1 < total2 then\n\t\t\
    return lst1\n\telse\n\t\treturn lst1\n\tend\nend", "    local function cmp(lst1,\
    \ lst2)\n        if #lst1 == 0 then return 0 end\n        return #lst1[1] + cmp(lst1[2],\
    \ lst2)\n    end\n    local cmp1 = cmp(lst1, lst2)\n    local cmp2 = cmp(lst2,\
    \ lst1)\n    if cmp1 == cmp2 then return lst1 end\n    if cmp1 < cmp2 then return\
    \ lst1 else return lst2 end\nend\nassert(total_match({'12345', '456'}, {'12345',\
    \ '456'}) == {'12345', '456'})\nassert(total_match({'12345', '456'}, {'123', '456'})\
    \ == {'123', '456'})\nassert(total_match({'12345', '456'}, {'123', '456', '12345'})\
    \ == {'123', '456', '12345'})\nassert(total_match({'12345', '456'}, {'123', '456',\
    \ '123'}) == {'12345', '456'})", "\tlocal total1 = 0\n\tlocal total2 = 0\n\tfor\
    \ i = 1, #lst1 do\n\t\ttotal1 = total1 + string.len(lst1[i])\n\tend\n\tfor i =\
    \ 1, #lst2 do\n\t\ttotal2 = total2 + string.len(lst2[i])\n\tend\n\tif total1 <\
    \ total2 then\n\t\treturn lst1\n\telseif total2 < total1 then\n\t\treturn lst2\n\
    \telse\n\t\treturn lst1\n\tend\nend", "\treturn #concat(lst1) < #concat(lst2)\
    \ and lst1 or lst2\nend\nassert_equal({'h', 'e', 'l', 'l', 'o'}, total_match({'h',\
    \ 'e', 'l', 'l', 'o'}, {'w', 'o', 'r', 'l', 'd'}))\nassert_equal({'w', 'o', 'r',\
    \ 'l', 'd'}, total_match({'w', 'o', 'r', 'l', 'd'}, {'h', 'e', 'l', 'l', 'o'}))\n\
    assert_equal({'h', 'e', 'l', 'l', 'o'}, total_match({'h', 'e', 'l', 'l', 'o'},\
    \ {'h', 'e', 'l', 'l', 'o'}))", "   local sum1 = 0\n   local sum2 = 0\n   for\
    \ i = 1, #lst1 do\n      sum1 = sum1 + string.len(lst1[i])\n   end\n   for i =\
    \ 1, #lst2 do\n      sum2 = sum2 + string.len(lst2[i])\n   end\n   if sum1 < sum2\
    \ then\n      return lst1\n   else\n      return lst2\n   end\nend\nprint(\"\\\
    nProblem 5:\")\nprint(total_match({\"aa\",\"bb\"}, {\"a\",\"bbbb\"})) --> {\"\
    aa\",\"bb\"}\nprint(total_match({\"aa\",\"bb\",\"ccc\"}, {\"a\",\"bbbb\"})) -->\
    \ {\"a\",\"bbbb\"}\nprint(total_match({\"aa\",\"bb\",\"ccc\"}, {\"a\",\"bbb\"\
    })) --> {\"aa\",\"bb\",\"ccc\"}\nprint(total_match({\"aaaa\",\"bb\"}, {\"a\",\"\
    bbbb\"})) --> {\"a\",\"bbbb\"}\nprint(total_match({\"aaa\",\"bb\"}, {\"a\",\"\
    bbbb\"})) --> {\"aaa\",\"bb\"}\nprint(total_match({\"aa\",\"bb\"}, {\"aaa\",\"\
    bbb\"})) --> {\"aa\",\"bb\"}\nprint(total_match({\"a\",\"bb\"}, {\"aaa\",\"bbb\"\
    })) --> {\"a\",\"bb\"}\nprint(total_match({\"aaa\",\"bbb\"}, {\"a\",\"bb\"}))\
    \ --> {\"a\",\"bb\"}", "\tlocal total1 = 0\n\tlocal total2 = 0\n\tfor i = 1, #lst1\
    \ do\n\t\ttotal1 = total1 + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\ttotal2\
    \ = total2 + #lst2[i]\n\tend\n\tif total1 < total2 then\n\t\treturn lst1\n\telse\n\
    \t\treturn lst2\n\tend\nend", "    -- Implementation\nend", "\tlocal c1 = 0\n\t\
    local c2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\tc1 = c1 + #v\n\tend\n\tfor i,v\
    \ in ipairs(lst2) do\n\t\tc2 = c2 + #v\n\tend\n\tif c1 <= c2 then\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend\nassert(total_match({\"a\", \"bc\"\
    , \"def\", \"ghij\"}, {\"xyz\", \"wvutsrqponmlkjihgfedcba\"}))\nassert(total_match({\"\
    a\", \"bc\", \"def\", \"ghij\"}, {\"xyz\", \"wvutsrqponmlkjihgfedcba\", \"abc\"\
    }))\nassert(total_match({\"a\", \"bc\", \"def\", \"ghij\", \"abcd\"}, {\"xyz\"\
    , \"wvutsrqponmlkjihgfedcba\"}))", "  local lst1_count = 0\n  local lst2_count\
    \ = 0\n  for k,v in pairs(lst1) do\n    lst1_count = lst1_count + #v\n  end\n\
    \  for k,v in pairs(lst2) do\n    lst2_count = lst2_count + #v\n  end\n  if lst1_count\
    \ == lst2_count then\n    return lst1\n  elseif lst1_count < lst2_count then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "\tlocal fun1 = function(lst)\n\
    \t\tlocal sum = 0\n\t\tfor i = 1, #lst do\n\t\t\tsum = sum + #lst[i]\n\t\tend\n\
    \t\treturn sum\n\tend\n\tif fun1(lst1) < fun1(lst2) then\n\t\treturn lst1\n\t\
    else\n\t\treturn lst2\n\tend\nend", "    local t1 = 0\n    local t2 = 0\n    for\
    \ _, v in ipairs(lst1) do\n        t1 = t1 + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        t2 = t2 + #v\n    end\n    if t1 < t2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "  -- TODO\nend", "  local t1 =\
    \ 0\n  local t2 = 0\n  for _, v in ipairs(lst1) do\n    t1 = t1 + string.len(v)\n\
    \  end\n  for _, v in ipairs(lst2) do\n    t2 = t2 + string.len(v)\n  end\n  if\
    \ t1 > t2 then\n    return lst2\n  else\n    return lst1\n  end\nend", "  local\
    \ total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1 =\
    \ total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 > total2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nassert(total_match({'abc', 'def'}, {'ghi', 'jkl'}) == {'ghi', 'jkl'})\n\
    assert(total_match({'abc', 'def'}, {'ghi', 'jkl', 'mno'}) == {'ghi', 'jkl', 'mno'})\n\
    assert(total_match({'abc', 'def'}, {'ghi', 'jkl', 'mno', 'pqr'}) == {'ghi', 'jkl',\
    \ 'mno', 'pqr'})\nassert(total_match({'abc', 'def'}, {'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu'}) == {'ghi', 'jkl', 'mno', 'pqr', 'stu'})\nassert(total_match({'abc',\
    \ 'def'}, {'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx'}) == {'ghi', 'jkl', 'mno',\
    \ 'pqr', 'stu', 'vwx'})\nassert(total_match({'abc', 'def'}, {'ghi', 'jkl', 'mno',\
    \ 'pqr', 'stu', 'vwx', 'yz'}) == {'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz'})\n\
    assert(total_match({'abc', 'def'}, {'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx',\
    \ 'yz', 'abc'}) == {'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz',", "  -- your\
    \ code here\nend", "    -- TODO: implement this function\nend", "  if type(lst1)\
    \ ~= \"table\" or type(lst2) ~= \"table\" then\n    error(\"Incorrect type\")\n\
    \  end\n  local total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n\
    \    total1 = total1 + string.len(v)\n  end\n  for _, v in ipairs(lst2) do\n \
    \   total2 = total2 + string.len(v)\n  end\n  if total1 < total2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "\nend", "    local total1 = 0\n\
    \    local total2 = 0\n    for i = 1, #lst1 do\n        total1 = total1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        total2 = total2 + #lst2[i]\n    end\n\
    \    if total1 < total2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend", "    -- your code here\n    return nil\nend", "    local function\
    \ sum_chars(lst)\n        local acc = 0\n        for i, v in ipairs(lst) do\n\
    \            acc = acc + #v\n        end\n        return acc\n    end\n    local\
    \ c1 = sum_chars(lst1)\n    local c2 = sum_chars(lst2)\n    if c1 < c2 then\n\
    \        return lst1\n    else\n        return lst2\n    end\nend", "\tlocal sum1\
    \ = 0\n\tlocal sum2 = 0\n\tfor i = 1, #lst1 do\n\t\tsum1 = sum1 + #lst1[i]\n\t\
    end\n\tfor i = 1, #lst2 do\n\t\tsum2 = sum2 + #lst2[i]\n\tend\n\tif sum1 < sum2\
    \ then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend", "  local sum1 =\
    \ 0\n  local sum2 = 0\n  for k, v in pairs(lst1) do\n    sum1 = sum1 + string.len(v)\n\
    \  end\n  for k, v in pairs(lst2) do\n    sum2 = sum2 + string.len(v)\n  end\n\
    \  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend",
  end, "  local len1 = 0\n  local len2 = 0\n  for _, v in ipairs(lst1) do\n    len1\
    \ = len1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    len2 = len2 + #v\n  end\n\
    \  if len1 < len2 then\n    return lst1\n  else\n    return lst2\n  end\nend",
  "    local count1 = 0\n    local count2 = 0\n    for k, v in pairs(lst1) do\n  \
    \      count1 = count1 + string.len(v)\n    end\n    for k, v in pairs(lst2) do\n\
    \        count2 = count2 + string.len(v)\n    end\n    if count1 < count2 then\n\
    \        return lst1\n    elseif count2 < count1 then\n        return lst2\n \
    \   else\n        return lst1\n    end\nend", "\nend", "    return 0\nend", " \
    \ if #lst1 <= #lst2 then\n    return lst1\n  else\n    return lst2\n  end\nend",
  end, "    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend", "   local function total(lst)\n\
    \      local total = 0\n      for k, v in ipairs(lst) do\n         total = total\
    \ + #v\n      end\n      return total\n   end\n   if total(lst1) < total(lst2)\
    \ then\n      return lst1\n   else\n      return lst2\n   end\nend", "  error\
    \ \"TODO\"\nend\nassert(total_match({\"abc\", \"de\", \"fghi\"}, {\"ab\", \"cde\"\
    , \"f\"}) == {\"abc\", \"de\", \"fghi\"})\nassert(total_match({\"ab\", \"cde\"\
    , \"f\"}, {\"abc\", \"de\", \"fghi\"}) == {\"ab\", \"cde\", \"f\"})\nassert(total_match({\"\
    ab\", \"cde\", \"fghi\"}, {\"ab\", \"cde\", \"fghi\"}) == {\"ab\", \"cde\", \"\
    fghi\"})", "\t-- body\nend", "\tlocal len1 = 0\n\tlocal len2 = 0\n\tfor i,v in\
    \ ipairs(lst1) do\n\t\tlen1 = len1 + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\
    \t\tlen2 = len2 + #v\n\tend\n\tif len1 < len2 then\n\t\treturn lst1\n\telse\n\t\
    \treturn lst2\n\tend\nend", "    local total1 = 0\n    local total2 = 0\n    for\
    \ _, v in ipairs(lst1) do\n        total1 = total1 + #v\n    end\n    for _, v\
    \ in ipairs(lst2) do\n        total2 = total2 + #v\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nprint(table.concat(total_match({\"\
    test\"}, {\"test\", \"test2\"}), \",\")) --> test\nprint(table.concat(total_match({\"\
    test\", \"test2\"}, {\"test\", \"test3\"}), \",\")) --> test,test2\nprint(table.concat(total_match({\"\
    test\", \"test2\"}, {\"test\", \"test2\"}), \",\")) --> test,test2", "    if #lst1\
    \ < #lst2 then\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nassert(total_match({\"abc\"}, {\"abcdef\"}) == {\"abc\"})\nassert(total_match({\"\
    abcdef\", \"12345\"}, {\"abc\", \"1234567\"}) == {\"abcdef\", \"12345\"})\nassert(total_match({\"\
    abcdef\", \"12345\"}, {\"abc\", \"1234\"}) == {\"abc\", \"1234\"})\nassert(total_match({\"\
    abcdef\", \"12345\"}, {\"abc\"}) == {\"abc\"})\nassert(total_match({\"abcdef\"\
    , \"12345\"}, {}) == {})\nassert(total_match({}, {\"abc\"}) == {})\nassert(total_match({},\
    \ {}) == {})\nassert(total_match({\"abc\"}, {\"abc\"}) == {\"abc\"})\nassert(total_match({\"\
    12345\"}, {\"12345\"}) == {\"12345\"})", "    local sum1 = 0\n    local sum2 =\
    \ 0\n    for i, v in ipairs(lst1) do\n        sum1 = sum1 + string.len(v)\n  \
    \  end\n    for i, v in ipairs(lst2) do\n        sum2 = sum2 + string.len(v)\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nprint(total_match({\"go\",\"dog\",\"go\"}, {\"go\",\"go\"\
    ,\"go\",\"go\"})) --> {\"go\",\"dog\",\"go\"}", "    if total_chars(lst1) < total_chars(lst2)\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend", " \
    \ local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 == total2 then\n    return lst1\n  elseif total1 < total2 then\n\
    \    return lst1\n  else\n    return lst2\n  end\nend", "   -- body goes here\n\
    end", "    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1)\
    \ do\n        total1 = total1 + string.len(v)\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend", "\t\
    local l1, l2 = 0, 0\n\tfor _, v in ipairs(lst1) do\n\t\tl1 = l1 + #v\n\tend\n\t\
    for _, v in ipairs(lst2) do\n\t\tl2 = l2 + #v\n\tend\n\tif l1 < l2 then\n\t\t\
    return lst1\n\telse\n\t\treturn lst2\n\tend\nend", "    return 0\nend", "   if\
    \ #lst1 > #lst2 then\n      return lst2\n   else\n      return lst1\n   end\n\
    end", "  local count1 = 0\n  local count2 = 0\n  for _, str in ipairs(lst1) do\n\
    \    count1 = count1 + #str\n  end\n  for _, str in ipairs(lst2) do\n    count2\
    \ = count2 + #str\n  end\n  if count1 < count2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend\nassert(equal(total_match({\"aa\", \"bb\"}, {\"a\"\
    , \"bbb\"}), {\"aa\", \"bb\"}))\nassert(equal(total_match({\"a\", \"bbb\"}, {\"\
    aa\", \"bb\"}), {\"aa\", \"bb\"}))\nassert(equal(total_match({\"ab\", \"b\"},\
    \ {\"a\", \"bb\"}), {\"a\", \"bb\"}))", "    if #lst1 < #lst2 then return lst1\
    \ end\n    if #lst2 < #lst1 then return lst2 end\n    return lst1\nend\nassert(total_match({\"\
    tea\", \"lazy\"}, {\"code\", \"shaving\"}) == {\"tea\", \"lazy\"})\nassert(total_match({\"\
    code\", \"shaving\"}, {\"tea\", \"lazy\"}) == {\"tea\", \"lazy\"})", "\tlocal\
    \ t1 = 0\n\tlocal t2 = 0\n\tfor i,v in ipairs(lst1) do\n\t\tt1 = t1 + #v\n\tend\n\
    \tfor i,v in ipairs(lst2) do\n\t\tt2 = t2 + #v\n\tend\n\tif t1 < t2 then\n\t\t\
    return lst1\n\telse\n\t\treturn lst2\n\tend\nend", "  local lst1total = list_total(lst1)\n\
    \  local lst2total = list_total(lst2)\n  if lst1total < lst2total then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "end\nassert(total_match({\"a\"\
    , \"bb\", \"ccc\"}, {\"d\", \"eee\", \"fffff\"}) == {\"a\", \"bb\", \"ccc\"})\n\
    assert(total_match({\"aa\", \"bbb\", \"cccc\"}, {\"ddd\", \"eee\", \"fffff\"})\
    \ == {\"aa\", \"bbb\", \"cccc\"})\nassert(total_match({\"aa\", \"bbb\", \"cccc\"\
    }, {\"ddd\", \"eee\", \"ffffff\"}) == {\"ddd\", \"eee\", \"ffffff\"})\nassert(total_match({\"\
    aa\", \"bbb\", \"cccc\"}, {\"ddd\", \"eee\", \"ffffff\", \"gggggggg\"}) == {\"\
    ddd\", \"eee\", \"ffffff\", \"gggggggg\"})", "  local total1 = 0\n  local total2\
    \ = 0\n  for _, str in ipairs(lst1) do\n    total1 = total1 + #str\n  end\n  for\
    \ _, str in ipairs(lst2) do\n    total2 = total2 + #str\n  end\n  if total1 <\
    \ total2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nassert(total_match({\
    \ \"foo\", \"bar\" }, { \"baz\", \"quux\" }) == { \"foo\", \"bar\" })\nassert(total_match({\
    \ \"foo\", \"bar\" }, { \"baz\", \"quux\", \"lorem\" }) == { \"baz\", \"quux\"\
    , \"lorem\" })", "    return 0\nend\nassert(total_match({\"aaa\", \"bb\"}, {\"\
    ccc\", \"ddd\"}) == {\"ccc\", \"ddd\"})\nassert(total_match({\"aaa\", \"bb\"},\
    \ {\"ccc\", \"dd\"}) == {\"aaa\", \"bb\"})\nassert(total_match({\"aaa\", \"bb\"\
    }, {\"ccc\", \"dddd\"}) == {\"aaa\", \"bb\"})\nassert(total_match({\"aaa\", \"\
    bb\"}, {\"ccc\", \"dd\", \"eee\"}) == {\"ccc\", \"dd\", \"eee\"})", "\t-- TODO\n\
    end", "  -- implementation\nend\ntotal_match({\"aaa\", \"bbb\", \"ccc\"}, {\"\
    aaa\", \"bbb\", \"ccc\"})\ntotal_match({\"aaa\", \"bbb\", \"ccc\"}, {\"ddd\",\
    \ \"eee\", \"fff\"})\ntotal_match({\"aaa\", \"bbb\", \"ccc\"}, {\"ddd\", \"eee\"\
    , \"fff\", \"ggg\"})\ntotal_match({\"aaa\", \"bbb\", \"ccc\", \"ddd\"}, {\"ddd\"\
    , \"eee\", \"fff\", \"ggg\"})\ntotal_match({\"ddd\", \"eee\", \"fff\", \"ggg\"\
    }, {\"aaa\", \"bbb\", \"ccc\", \"ddd\"})", "  local acc = 0\n  local lst_len\n\
    \  local lst_match\n  local lst_match_len\n  for _, str in ipairs(lst1) do\n \
    \   acc = acc + #str\n  end\n  lst_len = acc\n  lst_match = lst1\n  lst_match_len\
    \ = acc\n  acc = 0\n  for _, str in ipairs(lst2) do\n    acc = acc + #str\n  end\n\
    \  if acc < lst_len then\n    lst_match = lst2\n    lst_match_len = acc\n  end\n\
    \  return lst_match, lst_match_len\nend", "  -- your code here\n  local sum_lst1,\
    \ sum_lst2 = 0, 0\n  for i, v in ipairs(lst1) do\n    sum_lst1 = sum_lst1 + #v\n\
    \  end\n  for i, v in ipairs(lst2) do\n    sum_lst2 = sum_lst2 + #v\n  end\n \
    \ if sum_lst1 < sum_lst2 then\n    return lst1\n  elseif sum_lst1 > sum_lst2 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "  local sum1 = 0\n  local\
    \ sum2 = 0\n  for _, s in ipairs(lst1) do\n    sum1 = sum1 + #s\n  end\n  for\
    \ _, s in ipairs(lst2) do\n    sum2 = sum2 + #s\n  end\n  if sum1 == sum2 then\n\
    \    return lst1\n  elseif sum1 < sum2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor i,v in ipairs(lst1)\
    \ do\n\t\tsum1 = sum1 + string.len(v)\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\
    \tsum2 = sum2 + string.len(v)\n\tend\n\tif sum1 < sum2 then\n\t\treturn lst1\n\
    \telse\n\t\treturn lst2\n\tend\nend\nassert(total_match({\"one\",\"two\",\"three\"\
    }, {\"one\",\"two\",\"three\"}) == {\"one\",\"two\",\"three\"})\nassert(total_match({\"\
    one\",\"two\",\"three\"}, {\"four\",\"five\",\"six\"}) == {\"one\",\"two\",\"\
    three\"})\nassert(total_match({\"one\",\"two\",\"three\"}, {\"four\",\"five\"\
    ,\"six\",\"seven\"}) == {\"four\",\"five\",\"six\",\"seven\"})\nassert(total_match({\"\
    one\",\"two\",\"three\",\"four\"}, {\"four\",\"five\",\"six\",\"seven\"}) == {\"\
    four\",\"five\",\"six\",\"seven\"})", "    local sum_lst1 = 0\n    local sum_lst2\
    \ = 0\n    for _, v in ipairs(lst1) do\n        sum_lst1 = sum_lst1 + string.len(v)\n\
    \    end\n    for _, v in ipairs(lst2) do\n        sum_lst2 = sum_lst2 + string.len(v)\n\
    \    end\n    if sum_lst1 < sum_lst2 then\n        return lst1\n    elseif sum_lst1\
    \ > sum_lst2 then\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nassert(total_match({\"aa\", \"bbb\", \"c\"}, {\"aaa\", \"cc\"}) == {\"aa\"\
    , \"bbb\", \"c\"})\nassert(total_match({\"aa\", \"bbb\", \"c\"}, {\"aaa\", \"\
    cc\", \"d\"}) == {\"aa\", \"bbb\", \"c\"})\nassert(total_match({\"aa\", \"bbb\"\
    , \"c\"}, {\"aaa\", \"cc\", \"ddd\"}) == {\"aaa\", \"cc\", \"ddd\"})\nassert(total_match({\"\
    aa\", \"bbb\", \"c\"}, {\"aaa\", \"cc\", \"ddd\", \"eeeeee\"}) == {\"aaa\", \"\
    cc\", \"ddd\", \"eeeeee\"})", "  -- TODO: implement me\nend", "    -- your code\
    \ here\n    if lst1 == nil or lst2 == nil then\n        return nil\n    end\n\
    \    local function get_total_chars(lst)\n        local num = 0\n        for _,\
    \ str in ipairs(lst) do\n            num = num + string.len(str)\n        end\n\
    \        return num\n    end\n    local total1 = get_total_chars(lst1)\n    local\
    \ total2 = get_total_chars(lst2)\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nassert(total_match({\"ab\"\
    , \"cd\"}, {\"a\", \"bc\"}) == {\"ab\", \"cd\"})\nassert(total_match({\"ab\",\
    \ \"cd\"}, {\"a\", \"bc\", \"def\"}) == {\"a\", \"bc\", \"def\"})\nassert(total_match({\"\
    ab\", \"cd\"}, {\"a\", \"bc\", \"d\", \"e\"}) == {\"ab\", \"cd\"})", "  -- define\
    \ the helper function\n  local function total_char(lst)\n    -- total the number\
    \ of characters of all strings in the list\n    local sum = 0\n    for i = 1,\
    \ #lst do\n      sum = sum + string.len(lst[i])\n    end\n    return sum\n  end\n\
    \  -- compare two lists\n  if total_char(lst1) < total_char(lst2) then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend\nprint(total_match({\"hello\", \"\
    world\"}, {\"lua\", \"is\", \"awesome\"}))\nprint(total_match({\"world\", \"hello\"\
    }, {\"lua\", \"is\", \"awesome\"}))\nprint(total_match({\"hello\", \"world\"},\
    \ {\"world\", \"hello\"}))", "\t-- your code goes here\nend", "    local total_1\
    \ = 0\n    local total_2 = 0\n    for i, v in ipairs(lst1) do\n        total_1\
    \ = total_1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        total_2 =\
    \ total_2 + #v\n    end\n    if total_1 < total_2 then\n        return lst1\n\
    \    elseif total_2 < total_1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend", "\treturn #(_.reduce(lst1, function(x,y) return x..y end,\
    \ \"\")) < #(_.reduce(lst2, function(x,y) return x..y end, \"\")) and lst1 or\
    \ lst2\nend", "    -- your code here\nend", "    local total1 = total(lst1)\n\
    \    local total2 = total(lst2)\n    if total1 < total2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "  local num1 = 0\n  local num2\
    \ = 0\n  for _, item in ipairs(lst1) do\n    num1 = num1 + #item\n  end\n  for\
    \ _, item in ipairs(lst2) do\n    num2 = num2 + #item\n  end\n  if num1 < num2\
    \ then\n    return lst1\n  else\n    return lst2\n  end\nend", "    -- your code\
    \ here\n    error(\"Not Implemented Error\")\nend\nassert(total_match({\"hello\"\
    , \"world\"}, {\"hi\", \"world\"}) == {\"hello\", \"world\"})\nassert(total_match({\"\
    hello\", \"world\"}, {\"hello\", \"world\"}) == {\"hello\", \"world\"})\nassert(total_match({\"\
    hello\", \"world\"}, {\"bye\", \"world\"}) == {\"bye\", \"world\"})\nprint(\"\
    Passed all tests!\")", "  local total_chars1 = 0\n  local total_chars2 = 0\n \
    \ for i, v in ipairs(lst1) do\n    total_chars1 = total_chars1 + #v\n  end\n \
    \ for i, v in ipairs(lst2) do\n    total_chars2 = total_chars2 + #v\n  end\n \
    \ if total_chars1 < total_chars2 then\n    return lst1\n  elseif total_chars2\
    \ < total_chars1 then\n    return lst2\n  else\n    return lst1\n  end\nend\n\
    assert(total_match({\"a\", \"b\", \"c\"}, {\"aa\", \"bb\", \"cc\"}) == {\"a\"\
    , \"b\", \"c\"})\nassert(total_match({\"aa\", \"bb\", \"cc\"}, {\"a\", \"b\",\
    \ \"c\"}) == {\"a\", \"b\", \"c\"})\nassert(total_match({\"a\", \"b\", \"c\"},\
    \ {\"aa\", \"bb\", \"ccc\"}) == {\"a\", \"b\", \"c\"})\nassert(total_match({\"\
    aa\", \"bb\", \"ccc\"}, {\"a\", \"b\", \"c\"}) == {\"a\", \"b\", \"c\"})\nassert(total_match({\"\
    aaa\", \"bbb\", \"ccc\"}, {\"aaa\", \"bbb\", \"ccc\"}) == {\"aaa\", \"bbb\", \"\
    ccc\"})", "    local t1 = 0\n    local t2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        t1 = t1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        t2 =\
    \ t2 + #v\n    end\n    if t1 < t2 then\n        return lst1\n    else\n     \
    \   return lst2\n    end\nend", "    local total1 = 0\n    local total2 = 0\n\
    \    for k,v in pairs(lst1) do\n        total1 = total1 + #v\n    end\n    for\
    \ k,v in pairs(lst2) do\n        total2 = total2 + #v\n    end\n    if total1\
    \ > total2 then\n        return lst2\n    elseif total1 < total2 then\n      \
    \  return lst1\n    else\n        return lst1\n    end\nend", "    local total1\
    \ = 0\n    local total2 = 0\n    for _, s in ipairs(lst1) do\n        total1 =\
    \ total1 + #s\n    end\n    for _, s in ipairs(lst2) do\n        total2 = total2\
    \ + #s\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nassert(total_match({'foo', 'bar'}, {'bar',\
    \ 'baz'}) == {'foo', 'bar'})\nassert(total_match({'foo', 'bar'}, {'foobar'}) ==\
    \ {'foo', 'bar'})\nassert(total_match({'foo', 'bar'}, {'foobar', 'baz'}) == {'foobar',\
    \ 'baz'})\nassert(total_match({'foo', 'bar'}, {'bar', 'baz', 'aaa'}) == {'foo',\
    \ 'bar'})", "\tlocal function sum(lst)\n\t\tlocal s = 0\n\t\tfor _, v in ipairs(lst)\
    \ do\n\t\t\ts = s + string.len(v)\n\t\tend\n\t\treturn s\n\tend\n\tlocal total1\
    \ = sum(lst1)\n\tlocal total2 = sum(lst2)\n\tif total1 < total2 then\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend\nassert(total_match({\"foo\", \"bar\"\
    }, {\"baz\", \"quux\"}) == {\"foo\", \"bar\"})\nassert(total_match({\"quux\",\
    \ \"bar\"}, {\"baz\", \"quux\"}) == {\"baz\", \"quux\"})", "  local cnt1 = 0\n\
    \  local cnt2 = 0\n  for _, v in ipairs(lst1) do\n    cnt1 = cnt1 + #v\n  end\n\
    \  for _, v in ipairs(lst2) do\n    cnt2 = cnt2 + #v\n  end\n  if cnt1 == cnt2\
    \ then\n    return lst1\n  elseif cnt1 < cnt2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "    -- body\nend\n \nassert(total_match({\"abc\"\
    , \"abc\", \"abc\"}, {\"abc\", \"abc\"}) == {\"abc\", \"abc\"})\nassert(total_match({\"\
    abc\", \"abcd\"}, {\"ab\", \"abcd\"}) == {\"ab\", \"abcd\"})\nassert(total_match({\"\
    abc\", \"abcd\"}, {\"ab\", \"ab\"}) == {\"abc\", \"abcd\"})\nassert(total_match({\"\
    abc\", \"abcd\"}, {\"ab\", \"ab\", \"abc\"}) == {\"ab\", \"ab\", \"abc\"})", " \
    \ -- your code here\n  local total1, total2 = 0, 0\n  for _, v in ipairs(lst1)\
    \ do\n    total1 = total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2\
    \ = total2 + #v\n  end\n  if total1 < total2 then\n    return lst1\n  else\n \
    \   return lst2\n  end\nend", "    local list1, list2 = {}, {}\n    for _, str\
    \ in ipairs(lst1) do\n        table.insert(list1, #str)\n    end\n    for _, str\
    \ in ipairs(lst2) do\n        table.insert(list2, #str)\n    end\n    local sum1,\
    \ sum2 = 0, 0\n    for _, v in ipairs(list1) do\n        sum1 = sum1 + v\n   \
    \ end\n    for _, v in ipairs(list2) do\n        sum2 = sum2 + v\n    end\n  \
    \  if sum1 > sum2 then\n        return lst2\n    elseif sum1 < sum2 then\n   \
    \     return lst1\n    else\n        return lst1\n    end\nend", "\t-- body\n\
    end", "\tlst1_len = 0\n\tlst2_len = 0\n\tfor i,v in ipairs(lst1) do\n\t\tlst1_len\
    \ = lst1_len + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\tlst2_len = lst2_len\
    \ + #v\n\tend\n\tif lst1_len < lst2_len then\n\t\treturn lst1\n\telse\n\t\treturn\
    \ lst2\n\tend\nend", "    local total1 = total_chars(lst1)\n    local total2 =\
    \ total_chars(lst2)\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "  local len1 = 0\n  local len2 = 0\n  for\
    \ _, str in ipairs(lst1) do\n    len1 = len1 + string.len(str)\n  end\n  for _,\
    \ str in ipairs(lst2) do\n    len2 = len2 + string.len(str)\n  end\n  if len1\
    \ < len2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nassert(total_match({\"\
    joe\", \"mary\"}, {\"jane\", \"bob\"}) == {\"joe\", \"mary\"})\nassert(total_match({\"\
    joe\", \"mary\"}, {\"jane\", \"bob\", \"tim\"}) == {\"jane\", \"bob\", \"tim\"\
    })\nassert(total_match({\"joe\", \"mary\", \"tim\"}, {\"jane\", \"bob\"}) == {\"\
    jane\", \"bob\"})\nassert(total_match({\"joe\", \"mary\", \"tim\"}, {\"jane\"\
    , \"bob\", \"tim\"}) == {\"joe\", \"mary\", \"tim\"})\nassert(total_match({\"\
    joe\", \"mary\", \"tim\"}, {\"jane\", \"bob\", \"tim\", \"mary\"}) == {\"jane\"\
    , \"bob\", \"tim\", \"mary\"})\nassert(total_match({\"joe\", \"mary\", \"tim\"\
    }, {\"jane\", \"bob\", \"tim\", \"mary\", \"joe\"}) == {\"jane\", \"bob\", \"\
    tim\", \"mary\", \"joe\"})\nassert(total_match({\"joe\", \"mary\", \"tim\"}, {\"\
    jane\", \"bob\", \"tim\", \"mary\", \"joe\", \"tim\"}) == {\"jane\", \"bob\",\
    \ \"tim\", \"mary\", \"joe\", \"tim\"})", "\treturn #(table.concat(lst1, \"\"\
    )) < #(table.concat(lst2, \"\")) and lst1 or lst2\nend", "\tlocal t1 = 0\n\tlocal\
    \ t2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\tt1 = t1 + #v\n\tend\n\tfor i, v in\
    \ ipairs(lst2) do\n\t\tt2 = t2 + #v\n\tend\n\tif t1 < t2 then\n\t\treturn lst1\n\
    \telse\n\t\treturn lst2\n\tend\nend\nassert(total_match({'aaa', 'bb', 'c'}, {'ddddd',\
    \ 'eee'}) == {'aaa', 'bb', 'c'})\nassert(total_match({'aaa', 'bb', 'c'}, {'ddddd',\
    \ 'ee'}) == {'aaa', 'bb', 'c'})\nassert(total_match({'aaa', 'bb', 'c'}, {'ddddd',\
    \ 'ee', 'fff'}) == {'ddddd', 'ee', 'fff'})\nassert(total_match({'aaa', 'bb', 'c'},\
    \ {'ddddd', 'ee', 'fff', 'gggggggggggg'}) == {'ddddd', 'ee', 'fff', 'gggggggggggg'})",
  "    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n        count1\
    \ = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2 = count2\
    \ + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n    elseif\
    \ count2 < count1 then\n        return lst2\n    elseif count1 == count2 then\n\
    \        return lst1\n    end\nend\nassert(total_match({\"abc\", \"de\", \"fghi\"\
    }, {\"a\", \"def\", \"gh\"}) == {\"abc\", \"de\", \"fghi\"})\nassert(total_match({\"\
    ab\", \"d\", \"fg\"}, {\"a\", \"def\", \"gh\"}) == {\"a\", \"def\", \"gh\"})\n\
    assert(total_match({\"abc\", \"de\", \"fghi\"}, {\"a\", \"de\", \"gh\"}) == {\"\
    a\", \"de\", \"gh\"})\nassert(total_match({\"abc\", \"def\", \"gh\"}, {\"abc\"\
    , \"def\", \"gh\"}) == {\"abc\", \"def\", \"gh\"})\nprint(\"Exercise 70\")", "\t\
    local sum_lst1 = 0\n\tlocal sum_lst2 = 0\n\tfor _,v in ipairs(lst1) do\n\t\tsum_lst1\
    \ = sum_lst1 + #v\n\tend\n\tfor _,v in ipairs(lst2) do\n\t\tsum_lst2 = sum_lst2\
    \ + #v\n\tend\n\treturn sum_lst1 > sum_lst2 and lst2 or lst1\nend", "  local count1\
    \ = 0\n  local count2 = 0\n  for i = 1, #lst1 do\n    count1 = count1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    count2 = count2 + #lst2[i]\n  end\n  if count1\
    \ > count2 then\n    return lst2\n  else\n    return lst1\n  end\nend", "\tlocal\
    \ total1 = 0\n\tlocal total2 = 0\n\t\n\tif #lst1 == 0 then\n\t\treturn lst2\n\t\
    elseif #lst2 == 0 then\n\t\treturn lst1\n\tend\n\t\n\tfor k, v in pairs(lst1)\
    \ do\n\t\ttotal1 = total1 + #v\n\tend\n\t\n\tfor k, v in pairs(lst2) do\n\t\t\
    total2 = total2 + #v\n\tend\n\t\n\tif total1 < total2 then\n\t\treturn lst1\n\t\
    else\n\t\treturn lst2\n\tend\nend", "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor\
    \ i = 1, #lst1 do\n\t\tsum1 = sum1 + #lst1[i]\n\tend\n\tfor i = 1, #lst2 do\n\t\
    \tsum2 = sum2 + #lst2[i]\n\tend\n\tif sum1 < sum2 then\n\t\treturn lst1\n\telse\n\
    \t\treturn lst2\n\tend\nend", end, "    -- write your code here\nend", "    --\
    \ TODO\nend", "  local n1 = total_number_of_chars(lst1)\n  local n2 = total_number_of_chars(lst2)\n\
    \  if n1 < n2 then\n    return lst1\n  else\n    return lst2\n  end\nend", " \
    \ local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + string.len(lst1[i])\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + string.len(lst2[i])\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend", "   local a, b = #table.concat(lst1),\
    \ #table.concat(lst2)\n   return a < b and lst1 or a > b and lst2 or lst1\nend\n\
    assert(total_match({}, {}) == {})\nassert(total_match({\"ab\", \"c\"}, {\"d\"\
    , \"e\"}) == {\"d\", \"e\"})\nassert(total_match({\"aa\", \"b\"}, {\"a\", \"bb\"\
    }) == {\"aa\", \"b\"})\nassert(total_match({\"a\", \"b\"}, {\"a\", \"bb\"}) ==\
    \ {\"a\", \"b\"})", "  local tot1 = 0\n  local tot2 = 0\n  for k,v in pairs(lst1)\
    \ do\n    tot1 = tot1 + #v\n  end\n  for k,v in pairs(lst2) do\n    tot2 = tot2\
    \ + #v\n  end\n  if tot1 < tot2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "    local tot1 = 0\n    local tot2 = 0\n    for _, str in ipairs(lst1)\
    \ do\n        tot1 = tot1 + #str\n    end\n    for _, str in ipairs(lst2) do\n\
    \        tot2 = tot2 + #str\n    end\n    if tot1 < tot2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend", "\treturn 0\nend", end,
  "  local sum_lst1 = 0\n  local sum_lst2 = 0\n  for _, value in ipairs(lst1) do\n\
    \    sum_lst1 = sum_lst1 + #value\n  end\n  for _, value in ipairs(lst2) do\n\
    \    sum_lst2 = sum_lst2 + #value\n  end\n  if sum_lst1 == sum_lst2 then\n   \
    \ return lst1\n  elseif sum_lst1 < sum_lst2 then\n    return lst1\n  else\n  \
    \  return lst2\n  end\nend", "  -- Your code here\nend", "    if #lst1 < #lst2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend", " \
    \   local function total_chars(lst)\n        local function to_char_count(acc,\
    \ x)\n            return acc + #x\n        end\n        return foldl(to_char_count,\
    \ 0, lst)\n    end\n    local count1 = total_chars(lst1)\n    local count2 = total_chars(lst2)\n\
    \    if count1 > count2 then\n        return lst2\n    else\n        return lst1\n\
    \    end\nend", "    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1\
    \ do\n        total1 = total1 + string.len(lst1[i])\n    end\n    for i = 1, #lst2\
    \ do\n        total2 = total2 + string.len(lst2[i])\n    end\n    if total1 <\
    \ total2 then\n        return lst1\n    else\n        return lst2\n    end\nend",
  "    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n \
    \       total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n     \
    \   total2 = total2 + #v\n    end\n    if total1 > total2 then\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend", "  -- your code here\nend\n\
    print(total_match({\"a\",\"b\"}, {\"ab\",\"cd\"})) -- returns {\"a\",\"b\"}\n\
    print(total_match({\"ab\",\"cd\"}, {\"a\",\"b\"})) -- returns {\"a\",\"b\"}\n\
    print(total_match({\"a\",\"b\"}, {\"abc\",\"a\"})) -- returns {\"a\",\"b\"}\n\
    ```", "    -- Write your code here\nend\nassert(total_match({\"hello\", \"world\"\
    }, {\"test\", \"case\"}) == {\"hello\", \"world\"})\nassert(total_match({\"test\"\
    , \"case\"}, {\"hello\", \"world\"}) == {\"test\", \"case\"})\nassert(total_match({\"\
    test\", \"case\"}, {\"test\", \"case\"}) == {\"test\", \"case\"})\nprint(\"Exercise\
    \ 8 Tests Passed!\")", end, "    local t1 = 0\n    local t2 = 0\n    for _, v\
    \ in ipairs(lst1) do\n        t1 = t1 + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        t2 = t2 + #v\n    end\n    if t1 < t2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "    local total1 = 0\n    local\
    \ total2 = 0\n    for _, str in ipairs(lst1) do\n        total1 = total1 + #str\n\
    \    end\n    for _, str in ipairs(lst2) do\n        total2 = total2 + #str\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend\nassert(total_match({'a', 'b', 'c'}, {'d', 'e'}) ==\
    \ {'a', 'b', 'c'})\nassert(total_match({'a', 'b', 'c'}, {'d', 'e', 'f'}) == {'d',\
    \ 'e', 'f'})\nassert(total_match({'a', 'b', 'c'}, {'d', 'e', 'f', 'g'}) == {'d',\
    \ 'e', 'f', 'g'})\nassert(total_match({'a', 'b', 'c'}, {'d', 'e', 'f', 'g', 'h'})\
    \ == {'d', 'e', 'f', 'g', 'h'})\nassert(total_match({'a', 'b', 'c'}, {'d', 'e',\
    \ 'f', 'g', 'h', 'i'}) == {'d', 'e', 'f', 'g', 'h', 'i'})", "  local function\
    \ helper(lst)\n    local sum = 0\n    for i = 1, #lst do\n      sum = sum + #lst[i]\n\
    \    end\n    return sum\n  end\n  local lst1sum = helper(lst1)\n  local lst2sum\
    \ = helper(lst2)\n  if lst1sum < lst2sum then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "  if #lst1 < #lst2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "\t-- body\nend", "    local sum1 = 0\n    local sum2 = 0\n\
    \    for _,v in ipairs(lst1) do\n        sum1 = sum1 + string.len(v)\n    end\n\
    \    for _,v in ipairs(lst2) do\n        sum2 = sum2 + string.len(v)\n    end\n\
    \    if sum1 == sum2 then\n        return lst1\n    elseif sum1 < sum2 then\n\
    \        return lst1\n    else\n        return lst2\n    end\nend", "\tlocal function\
    \ total(lst)\n\t\tlocal sum = 0\n\t\tfor i, str in ipairs(lst) do\n\t\t\tsum =\
    \ sum + #str\n\t\tend\n\t\treturn sum\n\tend\n\tif total(lst1) < total(lst2) then\n\
    \t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend", "\tlocal count1 = 0\n\t\
    local count2 = 0\n\tfor k,v in pairs(lst1) do\n\t\tfor i=1, #v do\n\t\t\tcount1\
    \ = count1 + 1\n\t\tend\n\tend\n\tfor k,v in pairs(lst2) do\n\t\tfor i=1, #v do\n\
    \t\t\tcount2 = count2 + 1\n\t\tend\n\tend\n\tif count1 < count2 then\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend\nprint(total_match({\"aa\", \"bbb\"\
    , \"cccc\"}, {\"a\", \"bb\", \"ccc\"}))", "    local total1 = 0\n    local total2\
    \ = 0\n    for i = 1, #lst1 do\n        total1 = total1 + #lst1[i]\n    end\n\
    \    for i = 1, #lst2 do\n        total2 = total2 + #lst2[i]\n    end\n    if\
    \ total1 > total2 then\n        return lst2\n    else\n        return lst1\n \
    \   end\nend", "    -- YOUR CODE HERE\n    sum1 = 0\n    sum2 = 0\n    for i,j\
    \ in ipairs(lst1) do\n        sum1 = sum1 + #j\n    end\n    for k,v in ipairs(lst2)\
    \ do\n        sum2 = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend", "\t-- body\nend", "\tlocal\
    \ sum1 = 0\n\tlocal sum2 = 0\n\tfor i, val in ipairs(lst1) do\n\t\tsum1 = sum1\
    \ + #val\n\tend\n\tfor i, val in ipairs(lst2) do\n\t\tsum2 = sum2 + #val\n\tend\n\
    \tif sum1 > sum2 then\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\tend\nend",
  "  local lst1_total = 0\n  local lst2_total = 0\n  for _, v in ipairs(lst1) do\n\
    \    lst1_total = lst1_total + #v\n  end\n  for _, v in ipairs(lst2) do\n    lst2_total\
    \ = lst2_total + #v\n  end\n  if lst1_total < lst2_total then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "    local sum1 = 0\n    local sum2 = 0\n\
    \    for _, word in ipairs(lst1) do\n        sum1 = sum1 + #word\n    end\n  \
    \  for _, word in ipairs(lst2) do\n        sum2 = sum2 + #word\n    end\n    if\
    \ sum1 <= sum2 then\n        return lst1\n    else\n        return lst2\n    end\n\
    end", "  -- Your code here\nend\nassert(total_match({\"aa\",\"bb\",\"cc\"}, {\"\
    dd\",\"ee\",\"ff\"}) == {\"aa\",\"bb\",\"cc\"})\nassert(total_match({\"aa\",\"\
    bb\",\"cc\"}, {\"dd\",\"ee\"}) == {\"dd\",\"ee\"})\nassert(total_match({\"aa\"\
    ,\"bb\",\"cc\"}, {\"dd\",\"ee\",\"ff\", \"ggg\"}) == {\"dd\",\"ee\",\"ff\", \"\
    ggg\"})\nassert(total_match({\"aa\",\"bb\",\"cc\"}, {\"dd\",\"ee\",\"ff\", \"\
    g\"}) == {\"aa\",\"bb\",\"cc\"})", "  local n1 = 0\n  local n2 = 0\n  for _, s\
    \ in ipairs(lst1) do\n    n1 = n1 + #s\n  end\n  for _, s in ipairs(lst2) do\n\
    \    n2 = n2 + #s\n  end\n  if n1 < n2 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "    local len1 = List.foldl(function(acc, s) return acc\
    \ + #s end, 0, lst1)\n    local len2 = List.foldl(function(acc, s) return acc\
    \ + #s end, 0, lst2)\n    if len1 < len2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nprint(List.tostring(total_match({\"abc\",\
    \ \"def\"}, {\"abc\", \"ghi\"})))", "    local tbl1 = {}\n    local tbl2 = {}\n\
    \    for i,v in ipairs(lst1) do\n        tbl1[i] = #v\n    end\n    for i,v in\
    \ ipairs(lst2) do\n        tbl2[i] = #v\n    end\n    local sum1 = 0\n    local\
    \ sum2 = 0\n    for i,v in ipairs(tbl1) do\n        sum1 = sum1 + v\n    end\n\
    \    for i,v in ipairs(tbl2) do\n        sum2 = sum2 + v\n    end\n    if sum1\
    \ < sum2 then\n        return lst1\n    elseif sum1 > sum2 then\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend", "    local total1 = 0\n\
    \    local total2 = 0\n    for _, str in ipairs(lst1) do\n        total1 = total1\
    \ + #str\n    end\n    for _, str in ipairs(lst2) do\n        total2 = total2\
    \ + #str\n    end\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "    local t1 = 0\n    local t2 = 0\n   \
    \ for i, v in ipairs(lst1) do\n        t1 = t1 + #v\n    end\n    for i, v in\
    \ ipairs(lst2) do\n        t2 = t2 + #v\n    end\n    if t1 > t2 then\n      \
    \  return lst2\n    elseif t1 < t2 then\n        return lst1\n    else\n     \
    \   return lst1\n    end\nend", "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tfor i,\
    \ v in ipairs(lst1) do\n\t\tsum1 = sum1 + #v\n\tend\n\tfor i, v in ipairs(lst2)\
    \ do\n\t\tsum2 = sum2 + #v\n\tend\n\tif sum1 > sum2 then\n\t\treturn lst2\n\t\
    else\n\t\treturn lst1\n\tend\nend", "  local sum_lst1 = 0\n  local sum_lst2 =\
    \ 0\n  for i,v in ipairs(lst1) do\n    sum_lst1 = sum_lst1 + string.len(v)\n \
    \ end\n  for i,v in ipairs(lst2) do\n    sum_lst2 = sum_lst2 + string.len(v)\n\
    \  end\n  if sum_lst1 < sum_lst2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\ntotal_match({ \"Hi\" }, { \"Hello\", \"Bye\" }) -- returns {\"Hi\"\
    }\ntotal_match({ \"Hi\", \"Hello\" }, { \"Bye\" }) -- returns {\"Bye\"}\ntotal_match({\
    \ \"Hi\", \"Hello\" }, { \"Bye\", \"Goodbye\" }) -- returns {\"Hi\", \"Hello\"\
    }\ntotal_match({ \"Hi\", \"Hello\", \"Hey\" }, { \"Bye\", \"Goodbye\" }) -- returns\
    \ {\"Bye\", \"Goodbye\"}\ntotal_match({ \"Hi\", \"Hello\", \"Hey\" }, { \"Bye\"\
    , \"Goodbye\", \"Bye Bye\" }) -- returns {\"Hi\", \"Hello\", \"Hey\"}\ntotal_match({\
    \ \"Hi\", \"Hello\", \"Hey\" }, { \"Bye\", \"Goodbye\", \"Bye Bye\", \"See ya\"\
    \ }) -- returns {\"Bye\", \"Goodbye\", \"Bye Bye\", \"See ya\"}\ntotal_match({\
    \ \"Hi\", \"Hello\", \"Hey\" }, { \"Bye\", \"Goodbye\", \"Bye Bye\", \"See ya\"\
    , \"later\" }) -- returns {\"Hi\", \"Hello\", \"Hey\"}\ntotal_match({ \"Hi\",\
    \ \"Hello\", \"Hey\" }, { \"Bye\", \"Goodbye\", \"Bye Bye\", \"See ya\", \"later\"\
    , \"longer\" }) -- returns {\"Bye\", \"Goodbye\", \"Bye Bye\", \"See ya\", \"\
    later\", \"longer\"}\ntotal_match({ \"Hi\", \"Hello\", \"Hey\" }, { \"Bye\", \"\
    Goodbye\", \"Bye Bye\", \"See ya\", \"later\", \"longer\", \"the longest string\"\
    \ }) -- returns {\"Hi\", \"Hello\", \"Hey\"}\ntotal_", "    local total1 = 0\n\
    \    local total2 = 0\n    for _, v in ipairs(lst1) do\n        total1 = total1\
    \ + #v\n    end\n    for _, v in ipairs(lst2) do\n        total2 = total2 + #v\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend", "    local total1 = 0\n    local total2 = 0\n  \
    \  for i, s in ipairs(lst1) do\n        total1 = total1 + string.len(s)\n    end\n\
    \    for i, s in ipairs(lst2) do\n        total2 = total2 + string.len(s)\n  \
    \  end\n    if total1 < total2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend", "  local t = 0\n  for _,v in ipairs(lst1) do\n    t = t\
    \ + #v\n  end\n  local t2 = 0\n  for _,v in ipairs(lst2) do\n    t2 = t2 + #v\n\
    \  end\n  if t < t2 then\n    return lst1\n  else\n    return lst2\n  end\nend\n\
    print(total_match({\"aa\", \"bb\", \"cc\"}, {\"a\", \"bbbb\"})) --> {\"aa\", \"\
    bb\", \"cc\"}\nprint(total_match({\"aaa\", \"bbb\", \"cc\"}, {\"a\", \"bbbb\"\
    })) --> {\"a\", \"bbbb\"}\nprint(total_match({\"aaa\", \"bbb\", \"cc\"}, {\"a\"\
    , \"bbb\"})) --> {\"aaa\", \"bbb\", \"cc\"}", "  local i1,i2,ch1,ch2 = 0,0,0,0\n\
    \  for k,v in pairs(lst1) do\n    i1 = i1 + 1\n    ch1 = ch1 + string.len(v)\n\
    \  end\n  for k,v in pairs(lst2) do\n    i2 = i2 + 1\n    ch2 = ch2 + string.len(v)\n\
    \  end\n  if ch1 == ch2 then\n    return lst1\n  elseif ch1 < ch2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "  -- body\nend\ntotal_match({\"\
    a\", \"bc\", \"c\"}, {\"a\", \"b\", \"efg\"})\ntotal_match({\"a\", \"bc\", \"\
    c\"}, {\"a\", \"bc\", \"c\"})\ntotal_match({\"a\", \"bc\", \"c\"}, {\"a\", \"\
    bc\", \"c\", \"d\"})", "  local sum1 = 0\n  local sum2 = 0\n  for _, s in ipairs(lst1)\
    \ do\n    sum1 = sum1 + #s\n  end\n  for _, s in ipairs(lst2) do\n    sum2 = sum2\
    \ + #s\n  end\n  if sum1 < sum2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "  local lst1Len = reduce(function(total, str) return total + string.len(str)\
    \ end, lst1, 0)\n  local lst2Len = reduce(function(total, str) return total +\
    \ string.len(str) end, lst2, 0)\n  if lst1Len < lst2Len then\n    return lst1\n\
    \  elseif lst2Len < lst1Len then\n    return lst2\n  else\n    return lst1\n \
    \ end\nend", "  -- code here\n  local total1 = 0\n  local total2 = 0\n  for i\
    \ = 1, #lst1 do\n    total1 = total1 + #lst1[i]\n  end\n  for i = 1, #lst2 do\n\
    \    total2 = total2 + #lst2[i]\n  end\n  if total1 < total2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "    local c1 = 0\n    local c2\
    \ = 0\n    for i, str in ipairs(lst1) do\n        c1 = c1 + #str\n    end\n  \
    \  for i, str in ipairs(lst2) do\n        c2 = c2 + #str\n    end\n    if c1 ==\
    \ c2 then\n        return lst1\n    elseif c1 < c2 then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend", "  -- TODO: your code here\n  local\
    \ sum1 = 0\n  local sum2 = 0\n  for i=1,#lst1 do\n    for j=1,#lst1[i] do\n  \
    \    sum1 = sum1 + 1\n    end\n  end\n  for i=1,#lst2 do\n    for j=1,#lst2[i]\
    \ do\n      sum2 = sum2 + 1\n    end\n  end\n  if sum1 < sum2 then\n    return\
    \ lst1\n  else\n    return lst2\n  end\nend", "  local lst1_sum = 0\n  local lst2_sum\
    \ = 0\n  for _, v in ipairs(lst1) do\n    lst1_sum = lst1_sum + #v\n  end\n  for\
    \ _, v in ipairs(lst2) do\n    lst2_sum = lst2_sum + #v\n  end\n  if lst1_sum\
    \ < lst2_sum then\n    return lst1\n  else\n    return lst2\n  end\nend", "\t\
    local total1 = 0\n\tlocal total2 = 0\n\tfor i, v in ipairs(lst1) do\n\t\ttotal1\
    \ = total1 + #v\n\tend\n\tfor i, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\
    \tend\n\tif total1 == total2 then\n\t\treturn lst1\n\telseif total1 < total2 then\n\
    \t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend", "\t--write your code here\n\
    \tlocal count1, count2 = 0, 0\n\tfor i = 1, #lst1 do\n\t\tcount1 = count1 + string.len(lst1[i])\n\
    \tend\n\tfor i = 1, #lst2 do\n\t\tcount2 = count2 + string.len(lst2[i])\n\tend\n\
    \tif count1 < count2 then\n\t\treturn lst1\n\telseif count1 > count2 then\n\t\t\
    return lst2\n\telse\n\t\treturn lst1\n\tend\nend", "    local total1 = 0\n   \
    \ local total2 = 0\n    for i,v in ipairs(lst1) do\n        total1 = total1 +\
    \ #v\n    end\n    for i,v in ipairs(lst2) do\n        total2 = total2 + #v\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend\nassert( total_match({\"one\", \"two\", \"three\"\
    }, {\"four\", \"five\", \"six\"}) == {\"one\", \"two\", \"three\"} )\nassert(\
    \ total_match({\"one\", \"two\", \"three\"}, {\"four\", \"five\"}) == {\"four\"\
    , \"five\"} )\nassert( total_match({\"one\", \"two\"}, {\"four\", \"five\", \"\
    six\"}) == {\"one\", \"two\"} )\nassert( total_match({\"one\", \"two\", \"three\"\
    }, {\"four\", \"five\", \"six\", \"seven\"}) == {\"four\", \"five\", \"six\",\
    \ \"seven\"} )\nassert( total_match({\"one\", \"two\", \"three\"}, {\"four\",\
    \ \"five\", \"six\", \"seven\", \"eight\"}) == {\"four\", \"five\", \"six\", \"\
    seven\", \"eight\"} )", "    if #lst1 < #lst2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "\tlocal t1 = 0\n\tlocal t2 = 0\n\tlocal\
    \ t\n\tfor _, v in ipairs(lst1) do\n\t\tt1 = t1 + #v\n\tend\n\tfor _, v in ipairs(lst2)\
    \ do\n\t\tt2 = t2 + #v\n\tend\n\tif t1 < t2 then\n\t\tt = lst1\n\telse\n\t\tt\
    \ = lst2\n\tend\n\treturn t\nend", "\tlocal total1 = 0\n\tlocal total2 = 0\n\t\
    for i = 1, #lst1 do\n\t\ttotal1 = total1 + #lst1[i]\n\tend\n\tfor i = 1, #lst2\
    \ do\n\t\ttotal2 = total2 + #lst2[i]\n\tend\n\tif total1 < total2 then\n\t\treturn\
    \ lst1\n\telse\n\t\treturn lst2\n\tend\nend", "\terror('not yet implemented')\n\
    end", "\tlocal a = 0\n\tlocal b = 0\n\tfor _, v in ipairs(lst1) do\n\t\ta = a\
    \ + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tb = b + #v\n\tend\n\tif a <\
    \ b then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\nassert(total_match({\"\
    a\", \"ab\", \"abc\"}, {\"a\", \"b\", \"c\"}) == {\"a\", \"b\", \"c\"})\nassert(total_match({\"\
    a\", \"ab\", \"abc\"}, {\"a\", \"bc\", \"c\"}) == {\"a\", \"ab\", \"abc\"})"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
