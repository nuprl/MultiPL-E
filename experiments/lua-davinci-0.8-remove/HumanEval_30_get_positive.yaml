name: HumanEval_30_get_positive
language: lua
prompt: "-- Return only positive numbers in the list.\nlocal function get_positive(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_positive\n\
  \    lu.assertEquals(candidate({-1, -2, 4, 5, 6}), {4, 5, 6})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), {5, 3, 2, 3, 3, 9, 123, 1})\n    lu.assertEquals(candidate({-1,\
  \ -2}), {})\n    lu.assertEquals(candidate({}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal new_list = {}\n\tfor _, i in ipairs(l) do\n\t\tif i > 0 then\n\
    \t\t\ttable.insert(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend", "  return\
    \ l:gmatch(\"(%d+)\")\nend", "    local res = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    return res\nend", "\tlocal out = {}\n\tfor _, v in ipairs(l) do\n\t\tif v\
    \ > 0 then\n\t\t\ttable.insert(out, v)\n\t\tend\n\tend\n\treturn out\nend", " \
    \ local r = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      r[#r + 1] = l[i]\n\
    \    end\n  end\n  return r\nend", "  local t = {}\n  for _,v in ipairs(l) do\n\
    \    if v > 0 then\n      table.insert(t, v)\n    end\n  end\n  return t\nend",
  "\tlocal pos = {}\n\tfor i, val in ipairs(l) do\n\t\tif val > 0 then\n\t\t\ttable.insert(pos,\
    \ val)\n\t\tend\n\tend\n\treturn pos\nend", "  local r = {}\n  for i,v in ipairs(l)\
    \ do\n    if v > 0 then\n      r[#r+1] = v\n    end\n  end\n  return r\nend",
  "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "    local ret = {}\n    for _,v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend", "    local t = {}\n    for i,v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend", "  local p = {}\n  for _, v in ipairs(l) do\n    if v > 0\
    \ then\n      table.insert(p, v)\n    end\n  end\n  return p\nend", "\treturn\
    \ filter(l, function(v) return v > 0 end)\nend", "\tlocal res = {}\n\tfor _, v\
    \ in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\tres[#res + 1] = v\n\t\tend\n\tend\n\
    \treturn res\nend", "  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      ret[#ret + 1] = l[i]\n    end\n  end\n  return ret\nend", "    return tfilter(function(x)\
    \ return x > 0 end, l)\nend", "  local res = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\n\
    end", "\tif #l > 0 then\n\t\treturn util.filter(l, function(i) return i > 0 end)\n\
    \telse\n\t\treturn l\n\tend\nend", "\tlocal new_list = {}\n\tfor _, i in ipairs(l)\
    \ do\n\t\tif i > 0 then\n\t\t\ttable.insert(new_list, i)\n\t\tend\n\tend\n\treturn\
    \ new_list\nend", "  return filter(function(x) return x > 0 end, l)\nend", "\t\
    local out = {}\n\tfor k, v in pairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend", "  local lout = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then lout[#lout + 1] = l[i] end\n  end\n  return lout\n\
    end", "  local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "\tlocal ret = {}\n\tfor i = 1, #l do\n\
    \t\tif l[i] > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\tend\n\treturn ret\n\
    end", "\tlocal res = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tres[#res\
    \ + 1] = l[i]\n\t\tend\n\tend\n\treturn res\nend", "  local res = {}\n  for i,\
    \ v in ipairs(l) do\n    if v > 0 then\n      res[#res+1] = v\n    end\n  end\n\
    \  return res\nend", "\tlocal result = {}\n\tfor i, v in ipairs(l) do\n\t\tif\
    \ v > 0 then\n\t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn result\n\
    end", "\tlocal results = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then table.insert(results,\
    \ v) end\n\tend\n\treturn results\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then r[#r+1] = v end\n  end\n  return r\nend", "    local ret\
    \ = {}\n    for _, n in ipairs(l) do\n        if n > 0 then\n            table.insert(ret,\
    \ n)\n        end\n    end\n    return ret\nend", "  local res = {}\n  for i,\
    \ v in ipairs(l) do\n    if v > 0 then\n      res[#res+1] = v\n    end\n  end\n\
    \  return res\nend", "  local out = {}\n  for _, v in ipairs(l) do\n    if v >\
    \ 0 then table.insert(out, v) end\n  end\n  return out\nend", "\tlocal ret = {}\n\
    \tfor i = 1, #l do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\
    \tend\n\treturn ret\nend", "    local positive = {}\n    for k,v in pairs(l) do\n\
    \        if v > 0 then table.insert(positive, v) end\n    end\n    return positive\n\
    end", "  local tmp = {}\n  for _,v in ipairs(l) do\n    if (v > 0) then\n    \
    \  table.insert(tmp, v)\n    end\n  end\n  return tmp\nend", "  return tablex.filter(function(v)\
    \ return v > 0 end, l)\nend", "\tlocal ll = {}\n\tfor i, v in ipairs(l) do\n\t\
    \tif v > 0 then\n\t\t\ttable.insert(ll, v)\n\t\tend\n\tend\n\treturn ll\nend",
  "  local ret = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n      ret[#ret + 1]\
    \ = l[i]\n    end\n  end\n  return ret\nend", "  local t = {}\n  for i = 1, #l\
    \ do\n    if l[i] > 0 then\n      t[#t + 1] = l[i]\n    end\n  end\n  return t\n\
    end", "  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1]\
    \ = v\n    end\n  end\n  return r\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then r[#r+1] = v end\n  end\n  return r\nend", "  local result\
    \ = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local res = {}\n    for i =\
    \ 1, #l do\n        if l[i] > 0 then\n            res[#res + 1] = l[i]\n     \
    \   end\n    end\n    return res\nend", "  local filtered = {}\n  for _, i in\
    \ ipairs(l) do\n    if i > 0 then\n      table.insert(filtered, i)\n    end\n\
    \  end\n  return filtered\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif v >= 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend",
  "\tlocal result = {}\n\tfor i = 1,#l do\n\t\tif l[i] > 0 then\n\t\t\tresult[#result+1]\
    \ = l[i]\n\t\tend\n\tend\n\treturn result\nend", "    local ret = {}\n    for\
    \ _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend", "    if #l == 0 then\n        return\
    \ l\n    end\n    local t = {}\n    for _, v in ipairs(l) do\n        if v > 0\
    \ then\n            table.insert(t, v)\n        end\n    end\n    return t\nend",
  "  return function(a, b) return a + (b > 0 and b or 0) end, 0, l\nend", "\treturn\
    \ l:map(function(v) return math.max(v, 0) end)\nend", "    local res = {}\n  \
    \  for _, el in ipairs(l) do\n        if el > 0 then\n            table.insert(res,\
    \ el)\n        end\n    end\n    return res\nend", "  local result = {}\n  for\
    \ k, v in pairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    return map(get_positive_a, l)\nend", "   \
    \ local result = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n   \
    \         table.insert(result, v)\n        end\n    end\n    return result\nend",
  "  local r = {}\n  for _, i in ipairs(l) do\n    if i > 0 then\n      r[#r+1] =\
    \ i\n    end\n  end\n  return r\nend", "\tlocal new = {}\n\tfor i,v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(new, v)\n\t\tend\n\tend\n\treturn\
    \ new\nend", "  local result = {}\n  for i = 1, #l do\n    if l[i] > 0 then\n\
    \      result[#result + 1] = l[i]\n    end\n  end\n  return result\nend", "  local\
    \ new_l = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(new_l,\
    \ v)\n    end\n  end\n  return new_l\nend", "\tlocal ret = {}\n\tfor i = 1, #l\
    \ do\n\t\tif l[i] > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\
    \ res[#res+1] = v end\n  end\n  return res\nend", "    local ret = {}\n    for\
    \ _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n\
    \        end\n    end\n    return ret\nend", "    local a = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(a, v)\n      \
    \  end\n    end\n    return a\nend", "\tlocal i = 1\n\tlocal r = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tr[i] = v\n\t\t\ti = i + 1\n\t\t\
    end\n\tend\n\treturn r\nend", "\tlocal ret = {}\n\tfor i = 1, #l do\n\t\tif l[i]\
    \ > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\tend\n\treturn ret\nend", " \
    \   local list = {}\n    for i, v in ipairs(l) do\n        if (v > 0) then\n \
    \           table.insert(list, v)\n        end\n    end\n    return list\nend",
  "  local ret = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "\tlocal output = {}\n\tfor i,v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(output, v)\n\t\tend\n\tend\n\treturn\
    \ output\nend", "    local ret = {}\n    for i, n in ipairs(l) do\n        if\
    \ n >= 0 then\n            table.insert(ret, n)\n        end\n    end\n    return\
    \ ret\nend", "  local positive = {}\n  for i, v in ipairs(l) do\n    if v > 0\
    \ then\n      table.insert(positive, v)\n    end\n  end\n  return positive\nend",
  "\tlocal res = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tres[#res+1]\
    \ = v\n\t\tend\n\tend\n\treturn res\nend", "  local res = {}\n  for i, v in ipairs(l)\
    \ do\n    if v > 0 then\n      res[#res+1] = v\n    end\n  end\n  return res\n\
    end", "    local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "\tlocal result = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tresult[#result\
    \ + 1] = v\n\t\tend\n\tend\n\treturn result\nend", "  local function predicate(item)\n\
    \    return item > 0\n  end\n  return l:filter(predicate)\nend", "  local out\
    \ = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      out[#out+1] = v\n\
    \    end\n  end\n  return out\nend", "\tlocal newl = {}\n\tfor i = 1, #l do\n\t\
    \tif l[i] > 0 then\n\t\t\tnewl[#newl + 1] = l[i]\n\t\tend\n\tend\n\treturn newl\n\
    end", "  local out = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(out, v)\n    end\n  end\n  return out\nend", "    local res = {}\n\
    \    for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "\tlocal r = {}\n\tfor _, n\
    \ in ipairs(l) do\n\t\tif n > 0 then\n\t\t\tr[#r+1] = n\n\t\tend\n\tend\n\treturn\
    \ r\nend", "    local r = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n\
    \            r[#r+1] = v\n        end\n    end\n    return r\nend", "\tlocal nl\
    \ = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(nl,\
    \ v)\n\t\tend\n\tend\n\treturn nl\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\n\
    end", "    local out = {}\n    for i = 1, #l do\n        if l[i] > 0 then table.insert(out,\
    \ l[i]) end\n    end\n    return out\nend", "\tlocal result = {}\n\tfor i,v in\
    \ ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\t\
    end\n\treturn result\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    if v >= 0 then\n\t\t\tt[#t+1] = v\n\t\tend\n\tend\n\treturn t\nend", "  local\
    \ result = {}\n  for _, x in ipairs(l) do\n    if x > 0 then\n      table.insert(result,\
    \ x)\n    end\n  end\n  return result\nend", "    -- first use pcall, in case\
    \ the list is not an array.\n    local res = {}\n    for i, v in pcall(ipairs,\
    \ l) do\n        if v > 0 then\n            table.insert(res, v)\n        end\n\
    \    end\n    return res\nend", "\tlocal pos = {}\n\tfor _, n in ipairs(l) do\n\
    \t\tif n > 0 then\n\t\t\tpos[#pos+1] = n\n\t\tend\n\tend\n\treturn pos\nend",
  "  local pos = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n      pos[#pos+1]\
    \ = v\n    end\n  end\n  return pos\nend", "\tlocal pos = {}\n\tfor _,v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\ttable.insert(pos, v)\n\t\tend\n\tend\n\treturn\
    \ pos\nend", "  local r = {}\n  for _,v in ipairs(l) do\n    if v > 0 then r[#r+1]\
    \ = v end\n  end\n  return r\nend", "  local res = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(res, v)\n    end\n  end\n  return\
    \ res\nend", "  local result = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "  local\
    \ t = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(t,\
    \ v)\n    end\n  end\n  return t\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if v > 0 then\n      r[#r+1] = v\n    end\n  end\n  return r\nend",
  "  local result = {}\n  for i,n in ipairs(l) do\n    if n > 0 then\n      table.insert(result,\
    \ n)\n    end\n  end\n  return result\nend", "  return l:filter(function(x) return\
    \ x > 0 end)\nend", "    local p = {}\n    for _, v in ipairs(l) do\n        if\
    \ v > 0 then\n            table.insert(p, v)\n        end\n    end\n    return\
    \ p\nend", "    return utils.filter(l, function(v) return v > 0 end)\nend", "\t\
    local r = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "  local rez = {}\n  for _, v in ipairs(l)\
    \ do\n    if v > 0 then\n      table.insert(rez, v)\n    end\n  end\n  return\
    \ rez\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\
    \t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local res = {}\n\
    \  for i, n in ipairs(l) do\n    if n > 0 then\n      res[#res + 1] = n\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    for i = 1, #l do\n      \
    \  if l[i] > 0 then\n            res[#res + 1] = l[i]\n        end\n    end\n\
    \    return res\nend", "    if l == nil then return nil end\n    local m = {}\n\
    \    for _,v in ipairs(l) do\n        if v >= 0 then\n            table.insert(m,\
    \ v)\n        end\n    end\n    return m\nend", "    local t = {}\n    for _,v\
    \ in ipairs(l) do\n        if v > 0 then\n            table.insert(t, v)\n   \
    \     end\n    end\n    return t\nend", "  local xs = {}\n  for i = 1, #l do\n\
    \    if l[i] > 0 then\n      xs[#xs + 1] = l[i]\n    end\n  end\n  return xs\n\
    end", "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n     \
    \ table.insert(res, v)\n    end\n  end\n  return res\nend", "  local positive\
    \ = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(positive,\
    \ v)\n    end\n  end\n  return positive\nend", "\tlocal t = {}\n\tlocal n = 1\n\
    \tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[n] = v\n\t\t\tn = n + 1\n\
    \t\tend\n\tend\n\treturn t\nend", "  local t = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      table.insert(t, v)\n    end\n  end\n  return t\nend",
  "  local ret = {}\n  for _, n in ipairs(l) do\n    if n > 0 then\n      table.insert(ret,\
    \ n)\n    end\n  end\n  return ret\nend", "    local r = {}\n    for _, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(r, v)\n        end\n   \
    \ end\n    return r\nend", "  local nl = {}\n  for i,v in ipairs(l) do\n    if\
    \ v > 0 then nl[#nl+1] = v end\n  end\n  return nl\nend", "  local r = {}\n  for\
    \ _,v in ipairs(l) do\n    if v > 0 then\n      r[#r+1] = v\n    end\n  end\n\
    \  return r\nend", "    local res = {}\n    for i = 1, #l do\n        if l[i]\
    \ > 0 then\n            res[#res + 1] = l[i]\n        end\n    end\n    return\
    \ res\nend", "    local r = {}\n    for i = 1, #l do\n        if l[i] > 0 then\n\
    \            r[#r + 1] = l[i]\n        end\n    end\n    return r\nend", "  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "\tlocal pos = {}\n\tfor _,x in ipairs(l)\
    \ do\n\t\tif x > 0 then\n\t\t\ttable.insert(pos, x)\n\t\tend\n\tend\n\treturn\
    \ pos\nend", "    local pos = {}\n    for _,v in ipairs(l) do\n        if v >\
    \ 0 then\n            table.insert(pos, v)\n        end\n    end\n    return pos\n\
    end", "    local o = {}\n    for _,v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(o, v)\n        end\n    end\n    return o\nend", " \
    \   local ret = {}\n    for k, v in pairs(l) do\n        if v > 0 then\n     \
    \       table.insert(ret, v)\n        end\n    end\n    return ret\nend", "\t\
    local r = {}\n\tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if v >= 0 then\n      r[#r+1] = v\n    end\n  end\n  return r\nend",
  "\tlocal r = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tr[#r+1] =\
    \ v\n\t\tend\n\tend\n\treturn r\nend", "    local r = {}\n    for i,v in ipairs(l)\
    \ do\n        if (v > 0) then r[#r+1] = v end\n    end\n    return r\nend", " \
    \   local k = {}\n    for _, v in ipairs(l) do\n        if (v >= 0) then\n   \
    \         table.insert(k, v)\n        end\n    end\n    return k\nend", "\tlocal\
    \ r = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then r[#r+1] = v end\n\tend\n\
    \treturn r\nend", "  local t = {}\n  for i, v in ipairs(l) do\n    if v > 0 then\n\
    \      t[#t+1] = v\n    end\n  end\n  return t\nend", "  local t = {}\n  for _,\
    \ v in ipairs(l) do\n    if v > 0 then\n      table.insert(t, v)\n    end\n  end\n\
    \  return t\nend", "  local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0\
    \ then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend", "    local\
    \ l2 = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(l2,\
    \ v)\n        end\n    end\n    return l2\nend", "\tlocal list = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(list, v)\n\t\tend\n\
    \tend\n\treturn list\nend", "    local ret = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend", "  local res = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", " \
    \ local ret = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "    local res = {}\n    for i, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "\tlocal t = {}\n\tfor i,v in ipairs(l)\
    \ do\n\t\tif v > 0 then\n\t\t\tt[#t+1] = v\n\t\tend\n\tend\n\treturn t\nend",
  "  local res = {}\n  for _, v in ipairs(l) do\n    if v > 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "  local result = {}\n  for _, v in\
    \ ipairs(l) do\n    if v > 0 then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "\tlocal positive = {}\n\tfor i = 1,#l do\n\t\tif (l[i]\
    \ > 0) then\n\t\t\ttable.insert(positive, l[i])\n\t\tend\n\tend\n\treturn positive\n\
    end", "    local res = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend",
  "  local o = {}\n  for _,v in ipairs(l) do\n    if v > 0 then\n      table.insert(o,\
    \ v)\n    end\n  end\n  return o\nend", "\tlocal ret = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v >= 0 then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "  local k, v, res = nil, nil, {}\n  for k, v in pairs(l) do\n  \
    \  if v > 0 then\n      res[k] = v\n    end\n  end\n  return res\nend", "    local\
    \ r = {}\n    for i, v in ipairs(l) do\n        if (v > 0) then\n            r[#r\
    \ + 1] = v\n        end\n    end\n    return r\nend", "\tlocal t = {}\n\tfor _,\
    \ v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[#t+1] = v\n\t\tend\n\tend\n\t\
    return t\nend", "  local ret = {}\n  for _,v in ipairs(l) do\n    if v >= 0 then\n\
    \      table.insert(ret, v)\n    end\n  end\n  return ret\nend", "    return juicer.filter(l,\
    \ juicer.is_positive)\nend", "    local new_list = {}\n    for i, v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(new_list, v)\n        end\n\
    \    end\n    return new_list\nend", "    local positive = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(positive, v)\n\
    \        end\n    end\n    return positive\nend", "\tlocal res = {}\n\tfor _,\
    \ n in ipairs(l) do\n\t\tif n > 0 then\n\t\t\ttable.insert(res, n)\n\t\tend\n\t\
    end\n\treturn res\nend", "    local pos = {}\n    for i, v in ipairs(l) do\n \
    \       if (v > 0) then\n            table.insert(pos, v)\n        end\n    end\n\
    \    return pos\nend", "    local positive = {}\n    for i,v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(positive, v)\n        end\n \
    \   end\n    return positive\nend", "  local n = {}\n  for _, v in ipairs(l) do\n\
    \    if v > 0 then\n      n[#n+1] = v\n    end\n  end\n  return n\nend", "\tlocal\
    \ p = {}\n\tfor i = 1, #l do\n\t\tif l[i] > 0 then p[#p + 1] = l[i] end\n\tend\n\
    \treturn p\nend", "    local ret = {}\n    for i = 1, #l do\n        if l[i] >\
    \ 0 then\n            ret[#ret + 1] = l[i]\n        end\n    end\n    return ret\n\
    end", "    local res = {}\n    for _, i in ipairs(l) do\n        if i > 0 then\n\
    \            table.insert(res, i)\n        end\n    end\n    return res\nend",
  "    if type(l) ~= \"table\" then\n        return\n    end\n    local ret = {}\n\
    \    for _,v in ipairs(l) do\n        if v >= 0 then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "  return extract(l, function(e)\
    \ return e > 0 end)\nend", "    local pos = {}\n    for _, v in ipairs(l) do\n\
    \        if v > 0 then\n            table.insert(pos, v)\n        end\n    end\n\
    \    return pos\nend", "  local ret = {}\n  for _, v in ipairs(l) do\n    if v\
    \ > 0 then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend", " \
    \   local res = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n    \
    \        table.insert(res, v)\n        end\n    end\n    return res\nend", " \
    \   local pos = {}\n    for i,v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(pos, v)\n        end\n    end\n    return pos\nend", "  \
    \  local ret = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n     \
    \       table.insert(ret, v)\n        end\n    end\n    return ret\nend", "  \
    \  local t = {}\n    for i, item in ipairs(l) do\n        if item > 0 then\n \
    \           table.insert(t, item)\n        end\n    end\n    return t\nend", " \
    \ local result = {}\n  for i,v in ipairs(l) do\n    if v > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local new_list = {}\n    for\
    \ i, v in ipairs(l) do\n        if v >= 0 then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    return new_list\nend", "    local res = {}\n \
    \   for _, v in ipairs(l) do\n        if v > 0 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local t = {}\n    for _,\
    \ v in ipairs(l) do\n        if v > 0 then\n            table.insert(t, v)\n \
    \       end\n    end\n    return t\nend", "\tlocal new = {}\n\tfor i = 1, #l do\n\
    \t\tif l[i] > 0 then\n\t\t\tnew[#new + 1] = l[i]\n\t\tend\n\tend\n\treturn new\n\
    end", "\tlocal result = {}\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\
    \ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend", "    local new_list\
    \ = {}\n    for i, v in ipairs(l) do\n        if v > 0 then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    return new_list\nend", "\tlocal ret = {}\n\tfor\
    \ i, v in ipairs(l) do\n\t\tif v > 0 then table.insert(ret, v) end\n\tend\n\t\
    return ret\nend", "    local pl = {}\n    for i, v in ipairs(l) do\n        if\
    \ v > 0 then\n            table.insert(pl, v)\n        end\n    end\n    return\
    \ pl\nend", "\t-- Find the first positive value.\n\tfor i = 1, #l do\n\t\tif l[i]\
    \ > 0 then\n\t\t\treturn l[i]\n\t\tend\n\tend\n\treturn 0\nend", "\tlocal r =\
    \ {}\n\tfor _, v in ipairs(l) do\n\t\tif v > 0 then r[#r+1] = v end\n\tend\n\t\
    return r\nend", "    local res = {}\n    for _, x in ipairs(l) do\n        if\
    \ x > 0 then\n            table.insert(res, x)\n        end\n    end\n    return\
    \ res\nend", "    if l == nil then return nil end\n    local t = {}\n    for _,v\
    \ in ipairs(l) do\n        if v > 0 then\n            table.insert(t, v)\n   \
    \     end\n    end\n    return t\nend", "    -- If a value is <= 0, don't include\
    \ it in the list that is returned.\n    return filter(function(v) return v > 0\
    \ end, l)\nend", "\tlocal r = {}\n\tfor i, e in ipairs(l) do\n\t\tif e > 0 then\n\
    \t\t\tr[#r+1] = e\n\t\tend\n\tend\n\treturn r\nend", "    local result = {}\n\
    \    for _,v in ipairs(l) do\n        if v > 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local t = {}\n    for\
    \ i, v in ipairs(l) do\n        if v >= 0 then\n            table.insert(t, v)\n\
    \        end\n    end\n    return t\nend", "    local ret = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(ret, v)\n    \
    \    end\n    end\n    return ret\nend", "    local res = {}\n    for _, v in\
    \ ipairs(l) do\n        if v > 0 then\n            table.insert(res, v)\n    \
    \    end\n    end\n    return res\nend", "    local ret = {}\n    for i,v in ipairs(l)\
    \ do\n        if v > 0 then\n            table.insert(ret, v)\n        end\n \
    \   end\n    return ret\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\
    \tif v > 0 then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", " \
    \ return list.filter(l, function(e) return e > 0 end)\nend", "\tlocal out = {}\n\
    \tfor _, v in ipairs(l) do\n\t\tif v >= 0 then\n\t\t\ttable.insert(out, v)\n\t\
    \tend\n\tend\n\treturn out\nend", "\tlocal ret = {}\n\tfor i = 1, #l do\n\t\t\
    if l[i] > 0 then\n\t\t\tret[#ret + 1] = l[i]\n\t\tend\n\tend\n\treturn ret\nend",
  "\tlocal t = {}\n\tfor i,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\tt[#t+1] = v\n\
    \t\tend\n\tend\n\treturn t\nend", "  local new_list = {}\n  for i,v in ipairs(l)\
    \ do\n    if v > 0 then new_list[#new_list+1] = v end\n  end\n  return new_list\n\
    end", "    local pos = {}\n    for _, v in ipairs(l) do\n        if v > 0 then\n\
    \            table.insert(pos, v)\n        end\n    end\n    return pos\nend",
  "\tlocal out = {}\n\tfor _,v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend", "  local _, numbers = l:foldl(function\
    \ (sum, n)\n    if n >= 0 then\n      return sum + 1, n\n    else\n      return\
    \ sum, nil\n    end\n  end, 0, nil)\n  return numbers\nend", "\tlocal _l = {}\n\
    \tlocal _i = 1\n\tfor i, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\t_l[_i] =\
    \ v\n\t\t\t_i = _i + 1\n\t\tend\n\tend\n\treturn _l\nend", "\tlocal result = {}\n\
    \tfor _, v in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(result, v)\n\
    \t\tend\n\tend\n\treturn result\nend", "\tlocal n = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif v >= 0 then\n\t\t\ttable.insert(n, v)\n\t\tend\n\tend\n\treturn n\n\
    end", "    return get_cond(l, is_positive)\nend", "\tlocal ret = {}\n\tfor i,v\
    \ in ipairs(l) do\n\t\tif v > 0 then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\t\
    end\n\treturn ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
