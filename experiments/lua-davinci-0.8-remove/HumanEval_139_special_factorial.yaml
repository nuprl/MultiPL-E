name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- The function will receive an\
  \ integer as input and should return the special\n-- factorial of this integer.\n\
  local function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prod = 1\n  local prod_aux = 1\n  for i = 1, n do\n    prod\
    \ = prod * i\n    prod_aux = prod_aux * prod\n  end\n  return prod_aux\nend",
  "    if n < 0 then\n        return nil\n    end\n    local factorial = 1\n    for\
    \ i = 1, n do\n        factorial = factorial * i\n    end\n    return factorial\n\
    end", "\tif n < 1 then\n\t\treturn 1\n\tend\n\treturn n * special_factorial(n\
    \ - 1)\nend", "  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "    local factorial = 1\n    for i = n, 1, -1 do\n        factorial = factorial\
    \ * i\n    end\n    return factorial\nend", "  local factorial = 1\n  local factorial_last\
    \ = factorial\n  local n_last = n\n  while n > 1 do\n    factorial = factorial\
    \ * n\n    factorial_last = factorial_last * (n_last - 1)\n    n = n - 1\n   \
    \ n_last = n_last - 1\n  end\n  return factorial * factorial_last\nend", "   \
    \ assert(n > 0)\n    local fact = 1\n    for i = n, 1, -1 do\n        fact = fact\
    \ * factorial(i)\n    end\n    return fact\nend", "    -- Return the special factorial\
    \ of n\n    local n_factorial = math.factorial(n)\n    for i = n-1, 1, -1 do\n\
    \        n_factorial = n_factorial * math.factorial(i)\n    end\n    return n_factorial\n\
    end", "  local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "    local result = 1\n    for i = 1,\
    \ n do\n        result = result * i\n    end\n    return result\nend", "  \nend",
  "    error(\"Not Implemented\")\nend", "  local product = 1\n  for i = 1, n do\n\
    \    product = product * factorial(i)\n  end\n  return product\nend", "  local\
    \ factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "  local r = 1\n  for i = n, 1, -1 do\n    r = r *\
    \ i\n  end\n  return r\nend", "  local result = 1\n  for i = n, 1, -1 do\n   \
    \ result = result * factorial(i)\n  end\n  return result\nend", "  local brazilian_factorial\
    \ = 1\n  for i = n, 1, -1 do\n    brazilian_factorial = brazilian_factorial *\
    \ i\n  end\n  return brazilian_factorial\nend", "  local special_factorial = 1\n\
    \  for i = 1, n do\n    special_factorial = special_factorial * i * i\n  end\n\
    \  return special_factorial\nend", "  local factorial = 1\n  local i = n\n  while\
    \ i > 0 do\n    factorial = factorial * i\n    i = i - 1\n  end\n  return factorial\n\
    end", "\tlocal prod = 1\n\tfor i = 1, n do\n\t\tprod = prod * math.factorial(i)\n\
    \tend\n\treturn prod\nend", "  local res = 1\n  for i = n, 1, -1 do\n    res =\
    \ res * i\n  end\n  return res\nend", "  if n == 0 then\n    return 1\n  else\n\
    \    local product = 1\n    for i = n, 1, -1 do\n      product = product * i\n\
    \    end\n    return product * special_factorial(n - 1)\n  end\nend", "  local\
    \ result = n\n  local current = n\n  while (current - 1) > 0 do\n    result =\
    \ result * (current - 1)\n    current = current - 1\n  end\n  return result\n\
    end", "  local total = 1\n  for i = n, 1, -1 do\n    total = total * i\n  end\n\
    \  return total\nend", "  if n < 0 then return 0 end\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * (i + 1)\n  end\n  return factorial\n\
    end", "\tlocal function factorial(n)\n\t\tlocal result = 1\n\t\tfor i = 1, n do\n\
    \t\t\tresult = result * i\n\t\tend\n\t\treturn result\n\tend", "    local factorial\
    \ = 1\n    for i = 1, n do\n        factorial = factorial * i\n    end\n    return\
    \ factorial\nend", "  local accumulator = 1\n  for i = n, 1, -1 do\n    accumulator\
    \ = accumulator * i\n  end\n  return accumulator\nend", "    return n\nend", " \
    \ if n <= 0 then\n    return 1\n  end\n  local mult = 1\n  for i = 1, n do\n \
    \   mult = mult * factorial(i)\n  end\n  return mult\nend", "    -- Your implementation\
    \ here.\n    -- check if n is not a number\n    if type(n) ~= \"number\" then\n\
    \        return \"error\"\n    end\n    -- check if n is less than 0\n    if n\
    \ < 0 then\n        return \"error\"\n    end\n    -- check if n is not an integer\n\
    \    if n % 1 ~= 0 then\n        return \"error\"\n    end\n    -- check if n\
    \ is equal to zero\n    if n == 0 then\n        return 1\n    end\n    -- check\
    \ if n is equal to one\n    if n == 1 then\n        return 1\n    end\n    --\
    \ check if n is greater than 1\n    if n > 1 then\n        return n * special_factorial(n\
    \ - 1)\n    end\nend", "  -- n! * (n-1)! * (n-2)! * ... * 1!\n  local total =\
    \ 1\n  for i = n, 1, -1 do\n    total = total * i\n  end\n  return total\nend",
  "    local function factorial(n)\n        if n == 0 then\n            return 1\n\
    \        else\n            return n * factorial(n - 1)\n        end\n    end",
  "  if n == 0 then\n    return 1\n  else\n    local m = 1\n    for i = 1, n do\n\
    \      m = m * i\n    end\n    return m * special_factorial(n - 1)\n  end\nend",
  "  local f = 1\n  for i = n, 1, -1 do\n    f = f * factorial(i)\n  end\n  return\
    \ f\nend", "  local factorials = {}\n  local result = 1\n  for i = n, 1, -1 do\n\
    \    factorials[i] = result\n    result = result * i\n  end\n  for i = 2, n do\n\
    \    result = result * factorials[i - 1]\n  end\n  return result\nend", "    local\
    \ product = 1\n    for i = n, 1, -1 do\n        product = product * i\n    end\n\
    \    return product\nend", "  -- your code here\n  local sf = 1\n  for i = n,1,-1\
    \ do\n    sf = sf * factorial(i)\n  end\n  return sf\nend", "  return tostring(n)\
    \ .. \"!\"\nend", "   -- FILL ME\nend", "\tlocal res = 1\n\tlocal i = 1\n\tfor\
    \ i = 1, n do\n\t\tres = res * (i * i - i)\n\tend\n\treturn res\nend", "\tlocal\
    \ f = 1\n\tfor i = 1, n do\n\t\tf = f * i\n\tend\n\treturn f\nend", "    local\
    \ result = 1\n    local n = n\n    while n >= 1 do\n        result = result *\
    \ n\n        n = n - 1\n    end\n    return result\nend", "    if n <= 0 then\n\
    \        return 1\n    end\n    local result = 1\n    for i = 1, n do\n      \
    \  result = result * i\n    end\n    for i = n - 1, 1, -1 do\n        result =\
    \ result * i\n    end\n    return result\nend", "  -- to be implemented\nend",
  "    local function factorial(x)\n        if x == 0 then\n            return 1\n\
    \        else\n            return x * factorial(x - 1)\n        end\n    end",
  "\tlocal fac = 1\n\tfor i = 1, n do\n\t\tfac = fac * i\n\tend\n\treturn fac\nend",
  "    local result = 1\n    for i = n, 1, -1 do\n        result = result * i\n  \
    \  end\n    return result\nend", "  if n <= 0 then return 1 end\n  local fact\
    \ = 1\n  while n > 0 do\n    fact = fact * n\n    n = n - 1\n  end\n  return fact\n\
    end", "    -- Write your code here.\n    local result = 1", "    local result\
    \ = 1\n    for i = 1, n do\n        result = result * factorial(i)\n    end\n\
    \    return result\nend", "  local fac = 1\n  for i = 1, n do\n    fac = fac *\
    \ (n - i + 1)\n  end\n  return fac\nend", "    if n < 0 then\n        return nil\n\
    \    end\n    local total = 1\n    local fact = 1\n    for i = 1, n do\n     \
    \   total = total * i\n        fact = fact * total\n    end\n    return fact\n\
    end", "  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  local res = 1\n  while n > 0 do\n    res = res * n * (n\
    \ - 1)\n    n = n - 2\n  end\n  return res\nend", "  local factorial = 1\n  for\
    \ i = n, 1, -1 do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "    local factorial = 1\n    for i = 1, n do\n        factorial = factorial\
    \ * n\n        n = n - 1\n    end\n    return factorial\nend", "  if (n <= 0)\
    \ then\n    return 1\n  end\n  local result = 1\n  for i = n, 1, -1 do\n    result\
    \ = result * factorial(i)\n  end\n  return result\nend", "   -- your code here\n\
    end", "    local f = 1\n    for i = n, 1, -1 do\n        f = f * i\n    end\n\
    \    return f\nend", "  local result = 1\n  for i = n, 1, -1 do\n    result =\
    \ result * i\n  end\n  return result\nend", "    local a = 1\n    local b = 1\n\
    \    local c = 1\n    for i = 1, n do\n        a = a * i\n    end\n    for i =\
    \ 1, n - 1 do\n        b = b * i\n    end\n    for i = 1, n - 2 do\n        c\
    \ = c * i\n    end\n    return a * b * c\nend", "\tlocal function factorial(n)\n\
    \t\tif n == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn n * factorial(n - 1)\n\
    \t\tend\n\tend", "    local answer = 1\n    for i = 1, n do\n        answer =\
    \ answer * factorial(i)\n    end\n    return answer\nend", "  local result = 1\n\
    \  for i = n, 1, -1 do\n    result = result * i\n  end\n  return result\nend",
  "    if n <= 0 then\n        return 1\n    end\n    local numbers = { }\n    for\
    \ i = 1, n do\n        numbers[i] = i\n    end\n    return reduce(numbers, mul)\n\
    end", "    local result = 1\n    local factorial = 1\n    for i = 1, n do\n  \
    \      factorial = factorial * i\n        result = result * factorial\n    end\n\
    \    return result\nend", "  local factorial = 1\n  for i = n, 1, -1 do\n    factorial\
    \ = factorial * factorial_recursive(i)\n  end\n  return factorial\nend", "  if\
    \ n <= 0 then return 1 end\n  local result = 1\n  for i = 1, n do\n    result\
    \ = result * factorial(i)\n  end\n  return result\nend", "    local ret = 1\n\
    \    for i = n, 1, -1 do\n        ret = ret * factorial(i)\n    end\n    return\
    \ ret\nend", "  if n == 0 then\n    return 1\n  else\n    local product = 1\n\
    \    for i = 1, n do\n      product = product * i\n    end\n    return product\
    \ * special_factorial(n - 1)\n  end\nend", "    local result = 1\n    while n\
    \ > 0 do\n        result = result * n * (n - 1)\n        n = n - 2\n    end\n\
    \    return result\nend", "  local result = 1\n  for i = 1, n do\n    result =\
    \ result * (i * factorial(i))\n  end\n  return result\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * factorial(i)\n  end\n  return\
    \ product\nend", "    if n == 0 then\n        return 1\n    else\n        return\
    \ n * special_factorial(n - 1)\n    end\nend", "  if (n == 0) then\n    return\
    \ 1\n  end\n  local result = 1\n  for i = n, 1, -1 do\n    result = result * factorial(i)\n\
    \  end\n  return result\nend", "  if n == 0 then\n    return 1\n  else\n    --\
    \ Use recursion to calculate the factorial for n-1.\n    local n_minus_1_factorial\
    \ = special_factorial(n - 1)\n    -- The factorial of n is the product of n and\
    \ the factorial of n-1.\n    return n * n_minus_1_factorial\n  end\nend", "  if\
    \ n == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend", "  -- your code here\n  local fakt = 1\n  for i = n, 1, -1 do\n\
    \    fakt = fakt * i\n  end\n  return fakt\nend", "    local i = 1\n    local\
    \ f = 1\n    while i <= n do\n        f = f * i\n        i = i + 1\n    end\n\
    \    return f\nend", "  local product = 1\n  for i = n, 1, -1 do\n    product\
    \ = product * i\n  end\n  return product\nend", "  -- return 0 if n <= 0\n  if\
    \ n <= 0 then\n    return 0\n  end", "  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend", "  return nil\n\
    end", "  local result = 1\n  local i\n  for i = 1, n do\n    result = result *\
    \ factorial(i)\n  end\n  return result\nend", "  local answer = 1\n  local factorial\
    \ = 1\n  local i = 1\n  while i <= n do\n    factorial = factorial * i\n    answer\
    \ = answer * factorial\n    i = i + 1\n  end\n  return answer\nend", "    local\
    \ result = 1\n    for i = 1, n do\n        result = result * i\n    end\n    return\
    \ result\nend", "  local prod = 1\n  local fact = math.factorial(n)\n  local m\
    \ = n\n  while m > 0 do\n    prod = prod * fact\n    m = m - 1\n    fact = fact\
    \ / m\n  end\n  return prod\nend", "  local res = 1\n  for i = 1, n do\n    res\
    \ = res * factorial(i)\n  end\n  return res\nend", "  local factorial = 1\n  for\
    \ i = 1, n, 1 do\n    factorial = factorial * i\n  end\n  for i = n - 1, 1, -1\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend", "    local\
    \ a = 1\n    for i = 1, n do\n        a = a * math.factorial(i)\n    end\n   \
    \ return a\nend", '    local result = 1', "  local prod = 1\n  for i = n,1,-1\
    \ do\n    prod = prod * i\n  end\n  return prod\nend", "    if n < 1 then\n  \
    \      return nil\n    end\n    local product = 1\n    for i = 1, n do\n     \
    \   product = product * i\n    end\n    return product\nend", "    local r = 1\n\
    \    for i = n, 1, -1 do\n        r = r * i\n    end\n    return r\nend", "  \
    \  local result = 1\n    for i = 1, n do\n        result = result * i\n    end\n\
    \    return result\nend", "  if n == 0 then\n    return 1\n  else\n    local f\
    \ = 1\n    for i = 1, n do\n      f = f * i\n    end\n    return special_factorial(n\
    \ - 1) * f\n  end\nend", "    local value = 1\n    for i = n, 1, -1 do\n     \
    \   value = value * factorial(i)\n    end\n    return value\nend", "\tlocal prod\
    \ = 1\n\tfor i = n, 1, -1 do\n\t\tprod = prod * factorial(i)\n\tend\n\treturn\
    \ prod\nend", "  local result = 1\n  for i = 1, n do\n    result = result * math.factorial(i)\n\
    \  end\n  return result\nend", "    if n == 0 then\n        return 1\n    else\n\
    \        return n * special_factorial(n - 1)\n    end\nend", "    if n < 0 then\n\
    \        return 0\n    end\n    local result = 1\n    for i = n, 1, -1 do\n  \
    \      result = result * i\n    end\n    return result\nend", "    local prod\
    \ = 1\n    for i = n, 1, -1 do\n        prod = prod * i\n    end\n    return prod\n\
    end", "\tlocal ret = 1", "    -- TODO: implement this function\n    local brazilian_factorial\
    \ = 1\n    local factorial = 1\n    local count = 1\n    while n > 0 do\n    \
    \    factorial = factorial * n\n        brazilian_factorial = brazilian_factorial\
    \ * factorial\n        n = n - count\n        count = count + 1\n    end\n   \
    \ return brazilian_factorial\nend", "    local prod = 1\n    for i = 1, n do\n\
    \        prod = prod * i\n    end\n    return prod\nend", "  local result = 1\n\
    \  for i = 1, n do\n    result = result * i\n  end\n  for i = 1, n - 1 do\n  \
    \  result = result * i\n  end\n  return result\nend", "  local r = 1\n  for i\
    \ = 1, n do\n    r = r * i\n  end\n  return r\nend", "  local sf = 1\n  local\
    \ i = 1\n  while n > 0 do\n    sf = sf * n * (n - 1)\n    n = n - 2\n  end\n \
    \ return sf\nend", "  -- Solution here\nend", "  return 0\nend", "  -- There are\
    \ two branches in the logic:\n  -- 1. n = 0 returns 1\n  -- 2. n > 0 returns n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n  if n == 0 then\n    return 1\n  else\n    --\
    \ The result of multiplying n-1, n-2, ..., 1 by n! is\n    -- n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    -- The logic of the recursion is:\n    -- 1. Handle the special\
    \ case when n = 1\n    -- 2. For all other cases, multiply n by n-1, n-2, ...,\
    \ 1\n    -- 3. The base case is when n-1, n-2, ..., 1 = 1\n    -- 4. The 1 is\
    \ reached by the recursive call\n    return n * special_factorial(n - 1)\n  end\n\
    end", "  local function factorial(n)\n    if n == 0 then\n      return 1\n   \
    \ else\n      return n * factorial(n - 1)\n    end\n  end", "\tif n < 1 then\n\
    \t\treturn 0\n\tend\n\t\n\tlocal factorial = 1\n\tfor i = 1, n do\n\t\tfactorial\
    \ = factorial * i\n\tend\n\t\n\tlocal result = 1\n\tfor i = 1, n do\n\t\tresult\
    \ = result * factorial\n\tend\n\t\n\treturn result\nend", "    -- Initialise factorial\
    \ as 1\n    local factorial = 1\n    -- initialise n as our number\n    n = tonumber(n)\n\
    \    -- if n is nil or a negative number, return nil.\n    if n == nil or n <\
    \ 0 then\n        return nil\n    end\n    -- loop through our number while it\
    \ is greater than 0\n    while n > 0 do\n        -- factorial is equal to the\
    \ previous factorial multiplied by our\n        -- number.\n        factorial\
    \ = factorial * n\n        -- decrease our number by 1.\n        n = n - 1\n \
    \   end\n    -- return our result.\n    return factorial\nend", "  -- YOUR CODE\
    \ HERE\n  local brazilian_factorial = 1", "\tlocal factorial = 1\n\tfor i = 1,\
    \ n do\n\t\tfactorial = factorial * i\n\tend\n\treturn factorial\nend", "  \n\
    end", "  local r = 1\n  while n > 0 do\n    r = r * n\n    n = n - 1\n  end\n\
    \  return r\nend", "    local fact = 1\n    for i = 1, n do\n        fact = fact\
    \ * i\n    end\n    return fact\nend", "  local res = 1\n  for i = n, 1, -1 do\n\
    \    res = res * i\n  end\n  return res\nend", "  if n == 0 then\n    return 1\n\
    \  else\n    return n * special_factorial(n - 1)\n  end\nend", "    local result\
    \ = 1\n    for i = n, 1, -1 do\n        result = result * i\n    end\n    return\
    \ result\nend", "    if n < 0 then return nil end\n    local f = 1\n    for i\
    \ = n, 1, -1 do\n        f = f * i\n    end\n    return f\nend", "\tlocal result\
    \ = 1\n\tfor i = 1, n do\n\t\tresult = result * factorial(i)\n\tend\n\treturn\
    \ result\nend", "    local product = 1\n    while n > 0 do\n        local factorial\
    \ = 1\n        for i = 1, n do\n            factorial = factorial * i\n      \
    \  end\n        product = product * factorial\n        n = n - 1\n    end\n  \
    \  return product\nend", "  if n == 0 then\n    return 1\n  else\n    return n\
    \ * special_factorial(n - 1)\n  end\nend", "\t-- Function for calculate factorial.\n\
    \tlocal function factorial(n)\n\t\t-- Base Case\n\t\tif n == 0 then\n\t\t\treturn\
    \ 1\n\t\tend\n\t\t-- Recursive case\n\t\treturn n * factorial(n - 1)\n\tend",
  "  return nil\nend", "  local factorial = 1\n  for i = n, 1, -1 do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", '    local result = 1', " \
    \   if n < 0 then\n        return nil\n    end\n    local result = 1\n    local\
    \ factorial = 1\n    for i = 1, n do\n        factorial = factorial * i\n    \
    \    result = result * factorial\n    end\n    return result\nend", "   if n ==\
    \ 0 then\n      return 1\n   else\n      local k = n - 1\n      local p = n\n\
    \      while k > 0 do\n         p = p * k\n         k = k - 1\n      end\n   \
    \   return p\n   end\nend", "  if n == 0 then\n    return 1\n  else\n    local\
    \ result = 1\n    for i = n, 1, -1 do\n      result = result * factorial(i)\n\
    \    end\n    return result\n  end\nend", "  local n_factorial,i=1,1\n  for i=n,1,-1\
    \ do\n    n_factorial=n_factorial*i\n  end\n  return n_factorial\nend", "  if\
    \ n == 0 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend", '    local s = 1', "  if n <= 0 then return 1 end\n  local sum =\
    \ n\n  for i = n - 1, 1, -1 do\n    sum = sum * i\n  end\n  return sum\nend",
  "    return (n > 0) and math.factorial(n) * special_factorial(n - 1) or 1\nend",
  "  if n <= 0 then return 0 end\n  return math.floor(factorial(n) / factorial(n -\
    \ 1))\nend", "    if n <= 0 then\n        return 0\n    end\n    if n == 1 then\n\
    \        return 1\n    end\n    local result = 1\n    for i = 1, n do\n      \
    \  result = result * factorial(i)\n    end\n    return result\nend", "  local\
    \ factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * factorial_basic(i)\n\
    \  end\n  return factorial\nend", "\tlocal function factorial(n)\n\t\tif n ==\
    \ 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn n * factorial(n - 1)\n\t\tend\n\
    \tend", "  local function factorial(m)\n    if m == 0 then\n      return 1\n \
    \   else\n      return m * factorial(m - 1)\n    end\n  end", "    local result\
    \ = 1\n    for i = 1, n do\n        result = result * i\n    end\n    return result\n\
    end", "  local n_factorial = 1\n  for i = 1, n do\n    n_factorial = n_factorial\
    \ * i\n  end\n  local n_minus_one_factorial = 1\n  for i = 1, n - 1 do\n    n_minus_one_factorial\
    \ = n_minus_one_factorial * i\n  end\n  local n_minus_two_factorial = 1\n  for\
    \ i = 1, n - 2 do\n    n_minus_two_factorial = n_minus_two_factorial * i\n  end\n\
    \  return n_factorial * n_minus_one_factorial * n_minus_two_factorial\nend", " \
    \   local factorial_n = math.factorial(n)\n    local factorial_n_minus_one = math.factorial(n\
    \ - 1)\n    local factorial_n_minus_two = math.factorial(n - 2)\n    local factorial_one\
    \ = math.factorial(1)\n    return factorial_n * factorial_n_minus_one * factorial_n_minus_two\
    \ * factorial_one\nend", "  return -1\nend", "    if n == 0 then\n        return\
    \ 1\n    else\n        return n * special_factorial(n - 1)\n    end\nend", " \
    \ local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * factorial_recursive(i)\n\
    \  end\n  return factorial\nend", "    assert(type(n) == \"number\" and n > 0,\
    \ \"argument must be a positive integer\")\n    local function factorial(n)\n\
    \        local result = 1\n        for i = 1, n do\n            result = result\
    \ * i\n        end\n        return result\n    end\n    local result = 1\n   \
    \ for i = n, 1, -1 do\n        result = result * factorial(i)\n    end\n    return\
    \ result\nend", "    if n == 0 then\n        return 1\n    else\n        return\
    \ n * special_factorial(n - 1)\n    end\nend", "    if n < 1 then\n        return\
    \ 1\n    end\n    local result = 1\n    for i = n, 1, -1 do\n        result =\
    \ result * i\n    end\n    return result\nend", "  -- 1! is defined as 0.\n  local\
    \ brazilian_factorial = 0\n  -- if n is > 0, proceed.\n  if n > 0 then\n    --\
    \ initialize a variable to store the cumulative products of all the\n    -- factorials.\n\
    \    local factorial_product = 1\n    -- loop over the factorials and multiply\
    \ them together.\n    for i = 1, n do\n      factorial_product = factorial_product\
    \ * i\n    end\n    -- we have the first factorial, multiply it by the number\
    \ of terms to get\n    -- the brazilian factorial.\n    brazilian_factorial =\
    \ factorial_product * n\n  end\n  -- return the brazilian factorial.\n  return\
    \ brazilian_factorial\nend", "\tlocal result = 1\n\tfor i = 1, n do\n\t\tresult\
    \ = result * i\n\tend\n\treturn result\nend", "  if n < 0 then\n    return -1\n\
    \  end\n  local res = 1\n  while n > 0 do\n    res = res * n * (n - 1)\n    n\
    \ = n - 2\n  end\n  return res\nend", "  local result = 1\n  while n > 0 do\n\
    \    result = result * n * (n - 1)\n    n = n - 2\n  end\n  return result\nend",
  "    local r = 1\n    for i = 1, n do\n        r = r * i\n    end\n    return r\n\
    end", "  -- Your code here\nend", "  local prod = 1\n  for i = n, 1, -1 do\n \
    \   prod = prod * i\n  end\n  return prod\nend", "  if (n < 1) then\n    return\
    \ nil\n  end\n  if (n == 1) then\n    return 1\n  end\n  return n * special_factorial(n\
    \ - 1)\nend", "    error(\"unimplemented\")\nend", "  local result = 1\n  for\
    \ i = 1, n do\n    result = result * (i + 1)\n  end\n  return result\nend", " \
    \ local result = 1\n  for i = 1, n do\n    result = result * factorial(i)\n  end\n\
    \  return result\nend", "    local acc = 1\n    for i = n, 1, -1 do\n        acc\
    \ = acc * factorial(i)\n    end\n    return acc\nend", "    if n == 0 then\n \
    \       return 1\n    else\n        return n * special_factorial(n - 1)\n    end\n\
    end", "  if n == 0 then\n    return 1\n  else\n    local ret = 1\n    for i =\
    \ n, 1, -1 do\n      ret = ret * i\n    end\n    for i = n - 1, 1, -1 do\n   \
    \   ret = ret * i\n    end\n    return ret\n  end\nend", "    local function factorial(n)\n\
    \        if n <= 1 then\n            return 1\n        else\n            return\
    \ n * factorial(n - 1)\n        end\n    end", "    local factorial = 1\n    if\
    \ n < 0 then\n        return nil\n    end\n    for i = n, 1, -1 do\n        factorial\
    \ = factorial * i\n    end\n    return factorial\nend", "  if n <= 0 then\n  \
    \  return 1\n  end\n  -- TODO: implement the function here\n  return 0\nend",
  "  -- TODO: replace print with the correct code\n  -- print(\"I think special_factorial(\"\
    \ .. n .. \") is \" .. n * (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7)\
    \ * (n-8) * (n-9) * (n-10) * (n-11) * (n-12) * (n-13) * (n-14) * (n-15) * (n-16)\
    \ * (n-17) * (n-18) * (n-19) * (n-20) * (n-21) * (n-22) * (n-23) * (n-24) * (n-25)\
    \ * (n-26) * (n-27) * (n-28) * (n-29) * (n-30) * (n-31) * (n-32) * (n-33) * (n-34)\
    \ * (n-35) * (n-36) * (n-37) * (n-38) * (n-39) * (n-40) * (n-41) * (n-42) * (n-43)\
    \ * (n-44) * (n-45) * (n-46) * (n-47) * (n-48) * (n-49) * (n-50) * (n-51) * (n-52)\
    \ * (n-53) * (n-54) * (n-55) * (n-56) * (n-57) * (n-58) * (n-59) * (n-60) * (n-61)\
    \ * (n-62) * (n-63) * (n-64) * (n-65) * (n-66) * (n-67) * (n-68) * (n-69) * (n-70)\
    \ * (n-71) * (n-72) * (n-73) * (n-74) * (n-75) * (n-76) * (n-77) * (n-78) * (n-79)\
    \ * (n-80", "    if n <= 0 then\n        return 1\n    end\n    return n * special_factorial(n\
    \ - 1)\nend", "   if n <= 0 then return 1\n   else return n * special_factorial(n-1)\n\
    \   end\nend", "  local result = 1\n  for i = 1, n do\n    result = result * i\n\
    \  end\n  return result\nend", "  if n < 1 then return nil end\n  local s = 1\n\
    \  for i = n, 1, -1 do\n    s = s * i\n  end\n  return s\nend", "  local acc =\
    \ 1\n  for i = n, 1, -1 do\n    acc = acc * i\n  end\n  return acc\nend", "  \
    \  local product = 1\n    while n > 0 do\n        product = product * n * (n -\
    \ 1)\n        n = n - 2\n    end\n    return product\nend", "    local total =\
    \ 1\n    for i = n, 1, -1 do\n        total = total * i\n    end\n    return total\n\
    end", "    -- your code goes here\n    local num = n\n    local fact = n\n   \
    \ while num > 1 do\n        num = num - 1\n        fact = fact * num\n    end\n\
    \    return fact\nend", "    local result = 1\n    for i = 1, n do\n        result\
    \ = result * factorial(i)\n    end\n    return result\nend", "    local factorial\
    \ = 1\n    for i = 1, n do\n        factorial = factorial * i\n    end\n    return\
    \ factorial\nend", "  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend", "  if n == 0 then\n    return\
    \ 1\n  else\n    local acc = 1\n    for i = 1, n do\n      acc = acc * factorial(i)\n\
    \    end\n    return acc\n  end\nend", "    if n < 1 then\n        return nil\n\
    \    end\n    local x = 1\n    for i = 1, n do\n        x = x * i\n    end\n \
    \   for i = n-1, 1, -1 do\n        x = x * i\n    end\n    return x\nend", " \
    \ local factorial = 1\n  for i = n, 1, -1 do\n    factorial = factorial * i\n\
    \  end\n  return factorial\nend", "  local result = 1\n  for i = n, 1, -1 do\n\
    \    result = result * i\n  end\n  return result\nend", "  local fact = 1\n  while\
    \ n > 0 do\n    fact = fact * n\n    n = n - 1\n  end\n  return fact\nend", " \
    \ local ret = 1\n  for i = n,1,-1 do\n    ret = ret * i\n  end\n  return ret\n\
    end", "\tlocal special_factorial = 1", "    local result = 1\n    for i = 1, n\
    \ do\n        result = result * (i - 1)\n    end\n    return result\nend", '   local
    product = 1', "  -- your code goes here\n  if n <= 0 then\n    return nil\n  end\n\
    \  local result = 1\n  for i = n, 1, -1 do\n    result = result * i\n  end\n \
    \ for i = n - 1, 1, -1 do\n    result = result * i\n  end\n  return result\nend",
  "  local r = 1\n  for i = n, 1, -1 do\n    r = r * i\n  end\n  return r\nend", "\t\
    local r = 1\n\tfor i = 1, n do\n\t\tr = r * factorial(i)\n\tend\n\treturn r\n\
    end", "    if n < 0 then\n        return nil\n    end\n    local total = 1\n \
    \   for i = n, 1, -1 do\n        total = total * i\n    end\n    return total\n\
    end", "    -- create a variable to act as an accumulator\n    local result = 1\n\
    \    -- loop through all of the numbers that we need to multiply\n    for i =\
    \ n, 1, -1 do\n        -- multiply our accumulator by the current number\n   \
    \     result = result * i\n    end\n    -- return the accumulator\n    return\
    \ result\nend", "    -- YOUR CODE GOES HERE\nend", '  local result = 1', "  local\
    \ prod = 1\n  for i = n,1,-1 do\n    prod = prod * i\n  end\n  return prod\nend",
  "    local ret = 1\n    for i = 1, n do\n        ret = ret * factorial(i)\n    end\n\
    \    return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
