name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given an array arr of integers and you need to return\n-- sum\
  \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
  \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
  -- >>> prod_signs([1, 2, 2, -4]) \n-- 9\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif #arr == 0 then return nil end\n\tlocal sum = 0\n\tlocal sign =\
    \ 1\n\tfor i = 1, #arr do\n\t\tsum = sum + math.abs(arr[i])\n\t\tif arr[i] < 0\
    \ then sign = sign * -1 end\n\tend\n\treturn sum * sign\nend", "    if not arr\
    \ or #arr == 0 then return nil end\n    local sign = 1\n    local sum = 0\n  \
    \  for _, v in ipairs(arr) do\n        if v > 0 then sign = sign * 1 end\n   \
    \     if v < 0 then sign = sign * -1 end\n        if v == 0 then sign = sign *\
    \ 0 end\n        sum = sum + math.abs(v)\n    end\n    return sum * sign\nend",
  "    local prod = 1;\n    local sum = 0;\n    for _, i in ipairs(arr) do\n     \
    \   prod = prod * (i > 0 and 1 or i < 0 and -1 or 0);\n        sum = sum + math.abs(i);\n\
    \    end\n    return prod * sum;\nend", "    local prod = 1\n    local sum = 0\n\
    \    for _, v in ipairs(arr) do\n        prod = prod * sign(v)\n        sum =\
    \ sum + math.abs(v)\n    end\n    return prod * sum\nend", "  local sum = 0\n\
    \  local prod = 1\n  for i, v in ipairs(arr) do\n    if v ~= 0 then\n      sum\
    \ = sum + math.abs(v)\n      prod = prod * math.sign(v)\n    end\n  end\n  return\
    \ sum * prod\nend", "  local product = 1\n  local sum = 0\n  if #arr == 0 then\
    \ return nil end\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      product\
    \ = product * 1\n      sum = sum + arr[i]\n    elseif arr[i] < 0 then\n      product\
    \ = product * -1\n      sum = sum + arr[i] * -1\n    else\n      product = product\
    \ * 0\n    end\n  end\n  return sum * product\nend", "    if #arr == 0 then return\
    \ nil end\n    local sign = 1\n    local sum = 0\n    for i = 1, #arr do\n   \
    \     if arr[i] < 0 then sign = sign * -1 end\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return sum * sign\nend", "    local prod = 1\n    local sum = 0\n\
    \    for _, v in ipairs(arr) do\n        prod = prod * (v == 0 and 1 or v / math.abs(v))\n\
    \        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend", "    if\
    \ arr == nil or #arr == 0 then\n        return nil\n    end\n    local prod, sum\
    \ = 1, 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            prod\
    \ = prod * 1\n        elseif arr[i] < 0 then\n            prod = prod * -1\n \
    \       else\n            prod = prod * 0\n        end\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return prod * sum\nend", "    local function prod(acc, x)\n    \
    \    return acc * x\n    end\n    local function sum(acc, x)\n        if x ==\
    \ 0 then\n            return acc\n        else\n            return acc + math.abs(x)\n\
    \        end\n    end\n    local signs = map(sgn, arr)\n    return foldl(sum,\
    \ 0, map(prod, signs))\nend", "    local sum, prod = 0, 1\n    for _, x in ipairs(arr)\
    \ do\n        if x == 0 then return nil end\n        sum = sum + math.abs(x)\n\
    \        prod = prod * (x < 0 and -1 or 1)\n    end\n    return sum * prod\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ local s = v == 0 and 0 or (v > 0 and 1 or -1)\n        sum = sum + math.abs(v)\n\
    \        prod = prod * s\n    end\n    return sum * prod\nend", "  local total\
    \ = 1\n  for _, n in ipairs(arr) do\n    local sign = n < 0 and -1 or n > 0 and\
    \ 1 or 0\n    local mag = sign ~= 0 and math.abs(n) or 0\n    total = total +\
    \ mag * sign\n  end\n  return total\nend", "    if #arr == 0 then return nil end\n\
    \    local prod = 1\n    for _, elem in ipairs(arr) do\n        if elem > 0 then\n\
    \            prod = prod * 1\n        elseif elem < 0 then\n            prod =\
    \ prod * -1\n        else\n            prod = prod * 0\n        end\n    end\n\
    \    local sum = 0\n    for _, elem in ipairs(arr) do\n        sum = sum + math.abs(elem)\n\
    \    end\n    return sum * prod\nend", "    if next(arr) == nil then return end\n\
    \    local sum = 0\n    local prod = 1\n    for _, n in ipairs(arr) do\n     \
    \   local curr = n\n        if curr < 0 then\n            curr = -curr\n     \
    \       prod = prod * -1\n        end\n        sum = sum + curr\n    end\n   \
    \ return sum * prod\nend", "\treturn reduce(arr, \n\t\tfunction(a, b) \n\t\t\t\
    return a * abs(b)\n\t\tend, \n\t\t1)\nend", "  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  for i, v in ipairs(arr) do\n    prod = prod * v / math.abs(v)\n\
    \  end\n  local sum = 0\n  for i, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for i = 1, #arr do\n        local num = arr[i]\n        if num == 0 then\n\
    \            sum = sum + 1\n        elseif num > 0 then\n            sum = sum\
    \ + num\n            prod = prod * 1\n        else\n            sum = sum - num\n\
    \            prod = prod * -1\n        end\n    end\n    return sum * prod\nend",
  "    local s = 1\n    local sum = 0\n    for i = 1, #arr do\n        local a = arr[i]\n\
    \        if a == 0 then\n            s = s - 1\n        elseif a < 0 then\n  \
    \          s = s * -1\n        end\n        sum = sum + math.abs(a)\n    end\n\
    \    return sum * s\nend", "    local prod = 1\n    local sum = 0\n    for _,\
    \ num in ipairs(arr) do\n        prod = prod * (num > 0 and 1 or num < 0 and -1\
    \ or 0)\n        sum = sum + math.abs(num)\n    end\n    return sum * prod\nend",
  "    if #arr == 0 then return nil end\n    local p, s = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            p = p * 1\n            s = s + v\n  \
    \      elseif v < 0 then\n            p = p * -1\n            s = s + -v\n   \
    \     end\n    end\n    return p * s\nend", "    -- check for empty array\n  \
    \  if #arr == 0 then return nil end\n    -- get the product of the signs\n   \
    \ local product = 1\n    for _, n in ipairs(arr) do\n        product = product\
    \ * sign(n)\n    end\n    -- get the sum of magnitudes\n    local sum = 0\n  \
    \  for _, n in ipairs(arr) do\n        sum = sum + math.abs(n)\n    end\n    --\
    \ return the result\n    return product * sum\nend", "    if not arr or #arr ==\
    \ 0 then return nil end\n    local p, s = 1, 0\n    for _, v in ipairs(arr) do\n\
    \        local n = math.abs(v)\n        p = p * n\n        s = s + (v >= 0 and\
    \ 1 or -1)\n    end\n    return p * s\nend", "  local prod = 1\n  local sum =\
    \ 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0 then\n     \
    \ prod = prod * 1\n    elseif num < 0 then\n      prod = prod * -1\n    else\n\
    \      prod = prod * 0\n    end\n    sum = sum + math.abs(num)\n  end\n  return\
    \ sum * prod\nend", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + v\n        elseif v < 0 then\n            prod = prod * -1\n            sum\
    \ = sum + v\n        else\n            prod = prod * 0\n        end\n    end\n\
    \    return prod * sum\nend", "    if isempty(arr) then return nil end\n    local\
    \ res = 0\n    for _, v in ipairs(arr) do\n        res = res + abs(v) * sign(v)\n\
    \    end\n    return res\nend", "  local s = 1\n  local sum = 0\n  for i, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      s = s * 1\n    elseif v < 0 then\n\
    \      s = s * -1\n    else\n      s = s * 0\n    end\n    sum = sum + math.abs(v)\n\
    \  end\n  return sum * s\nend", "    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \            sum = sum + v\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n            sum = sum + (-v)\n        else\n            prod = prod *\
    \ 0\n        end\n    end\n    return prod * sum\nend", "    local s = 1\n   \
    \ local p = 1\n    local sum = 0\n    if (#arr == 0) then\n        return nil\n\
    \    end\n    for i = 1, #arr do\n        if (arr[i] > 0) then\n            s\
    \ = 1\n        elseif (arr[i] < 0) then\n            s = -1\n        else\n  \
    \          s = 0\n        end\n        p = p * s\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return sum * p\nend", "  local sum, prod = 0, 1\n  for i, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    prod = prod * sign(v)\n  end\n  return\
    \ sum * prod\nend", "  -- define a product of signs function\n  local function\
    \ prod_signs(x)\n    local res = 1\n    for i = 1, #x do\n      res = res * x[i]\n\
    \    end\n    return res\n  end\n  -- define an absolute function\n  local function\
    \ abs(x)\n    if x < 0 then\n      return -x\n    else\n      return x\n    end\n\
    \  end\n  -- define a product of the absolute values multiplied by the product\
    \ of\n  -- signs function\n  local function prod_abs_times_prod_signs(x)\n   \
    \ local res = 1\n    for i = 1, #x do\n      res = res * (abs(x[i]) * x[i])\n\
    \    end\n    return res\n  end\n  -- return the result\n  if arr == nil then\n\
    \    return nil\n  else\n    return prod_abs_times_prod_signs(arr)\n  end\nend",
  "  -- fill in here\nend", "  if #arr == 0 then return nil end\n  local prod, sum\
    \ = 1, 0\n  for i, num in ipairs(arr) do\n    prod = prod * sign(num)\n    sum\
    \ = sum + abs(num)\n  end\n  return prod * sum\nend", "    local function sign(n)\n\
    \        return (n > 0 and 1) or (n < 0 and -1) or 0\n    end\n    local prod,\
    \ sum = 1, 0\n    for _, v in ipairs(arr) do\n        prod = prod * sign(v)\n\
    \        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend", "    --\
    \ print(\"input arr\", arr)\n    local sum_magnitude = 0\n    local product_signs\
    \ = 1\n    for _, value in ipairs(arr) do\n        -- print(\"value\", value)\n\
    \        sum_magnitude = sum_magnitude + math.abs(value)\n        if value > 0\
    \ then\n            product_signs = product_signs * 1\n        elseif value <\
    \ 0 then\n            product_signs = product_signs * -1\n        else\n     \
    \       product_signs = product_signs * 0\n        end\n    end\n    -- print(\"\
    sum_magnitude\", sum_magnitude)\n    -- print(\"product_signs\", product_signs)\n\
    \    return sum_magnitude * product_signs\nend", "    local prod, sum = 1, 0\n\
    \    for i = 1, #arr do\n        if arr[i] == 0 then\n            sum = sum +\
    \ 0\n        elseif arr[i] > 0 then\n            sum = sum + arr[i]\n        \
    \    prod = prod * 1\n        else\n            sum = sum + -arr[i]\n        \
    \    prod = prod * -1\n        end\n    end\n    return prod * sum\nend", "  \
    \  local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v == 0 then\n            sum = sum + 0\n            prod = prod * 1\n   \
    \     elseif v > 0 then\n            sum = sum + v\n            prod = prod *\
    \ 1\n        elseif v < 0 then\n            sum = sum + math.abs(v)\n        \
    \    prod = prod * -1\n        end\n    end\n    return sum * prod\nend", "\t\
    if not arr or #arr == 0 then return nil end\n\tlocal product, sum = 1, 0\n\tfor\
    \ i = 1, #arr do\n\t\tlocal n = arr[i]\n\t\tif n > 0 then product = product *\
    \ 1\n\t\telseif n < 0 then product = product * -1\n\t\telse product = product\
    \ * 0 end\n\t\tsum = sum + math.abs(n)\n\tend\n\treturn product * sum\nend", " \
    \   local sum = 0\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\
    \ * prod_signs_aux(arr[i])\n    end\n    return sum\nend", "  local prod = 1\n\
    \  local sum = 0\n  for i, v in ipairs(arr) do\n    prod = prod * (1 - 2 * (v\
    \ < 0 and 1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return prod * sum\n\
    end", "    if #arr == 0 then return None end\n    local product = 1\n    local\
    \ sum = 0\n    for i, v in ipairs(arr) do\n        if v < 0 then\n           \
    \ product = product * -1\n        elseif v == 0 then\n            product = product\
    \ * 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return sum *\
    \ product\nend", "  local res = 1\n  local x = 1\n  local ret = nil\n  while (arr[x]\
    \ ~= nil) do\n    if arr[x] > 0 then\n      res = res * arr[x]\n    elseif arr[x]\
    \ < 0 then\n      res = res * (arr[x] * -1)\n    end\n    x = x + 1\n  end\n \
    \ if res == 1 then\n    ret = nil\n  else\n    ret = res\n  end\n  return ret\n\
    end", "    if #arr == 0 then\n        return nil\n    end\n    local sum = 0\n\
    \    local mul = 1\n    for _, x in ipairs(arr) do\n        if x > 0 then\n  \
    \          sum = sum + x\n            mul = mul * 1\n        elseif x < 0 then\n\
    \            sum = sum - x\n            mul = mul * -1\n        else\n       \
    \     mul = mul * 0\n        end\n    end\n    return sum * mul\nend", "    local\
    \ sum = 0\n    local sign = 1\n    for _, v in ipairs(arr) do\n        if v ~=\
    \ 0 then\n            sum = sum + math.abs(v)\n            sign = sign * (v >\
    \ 0 and 1 or -1)\n        end\n    end\n    return sum * sign\nend", "    local\
    \ prod = 1\n    local sum = 0\n    for i, val in ipairs(arr) do\n        sum =\
    \ sum + math.abs(val)\n        prod = prod * sign(val)\n    end\n    return prod\
    \ * sum\nend", "  local prod, sign, sum = 1, 0, 0\n  for i = 1, #arr do\n    if\
    \ arr[i] < 0 then\n      sign = -1\n    elseif arr[i] > 0 then\n      sign = 1\n\
    \    else\n      sign = 0\n    end\n    prod = prod * sign\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return prod * sum\nend", "    local s = 1\n    local p = 1\n    for\
    \ i = 1, #arr do\n        s = s + math.abs(arr[i])\n        p = p * (arr[i] ==\
    \ 0 and 1 or arr[i]/math.abs(arr[i]))\n    end\n    return s * p\nend", "    local\
    \ prod = 1\n    local sum = 0\n    for i, val in ipairs(arr) do\n        local\
    \ val = math.abs(val)\n        if val ~= 0 then\n            if val % 2 == 0 then\n\
    \                prod = prod * 1\n            else\n                prod = prod\
    \ * -1\n            end\n            sum = sum + val\n        end\n    end\n \
    \   return prod * sum\nend", "    local sum = 0\n    for i = 1, #arr do\n    \
    \    sum = sum + math.abs(arr[i]) * math.sign(arr[i])\n    end\n    return sum\n\
    end", "  local prod = 1\n  local sum = 0\n  for i,v in ipairs(arr) do\n    if\
    \ v == 0 then\n      sum = sum + 1\n    elseif v > 0 then\n      prod = prod *\
    \ 1\n      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n    \
    \  sum = sum + v\n    end\n  end\n  if sum == 0 then\n    return None\n  else\n\
    \    return sum * prod\n  end\nend", "\tlocal sum = 0\n\tlocal prod = 1\n\tfor\
    \ i,v in ipairs(arr) do\n\t\tsum = sum + math.abs(v)\n\t\tprod = prod * (v > 0\
    \ and 1 or v < 0 and -1 or 0)\n\tend\n\treturn sum * prod\nend", "    if #arr\
    \ == 0 then\n        return nil\n    end\n    local prod = 1\n    local s = 0\n\
    \    for i = 1, #arr do\n        local tmp = arr[i]\n        if tmp == 0 then\n\
    \            prod = prod * 0\n        elseif tmp > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        s\
    \ = s + math.abs(tmp)\n    end\n    return s * prod\nend", "  local r = 1\n  for\
    \ _, v in ipairs(arr) do\n    if v < 0 then\n      r = r * -1\n    elseif v ==\
    \ 0 then\n      r = 0\n    end\n  end\n  local s = 0\n  for _, v in ipairs(arr)\
    \ do\n    s = s + math.abs(v)\n  end\n  return s * r\nend", "  if #arr == 0 then\
    \ return nil end\n  local mult_signs = 1\n  local sum_magns = 0\n  for i, v in\
    \ ipairs(arr) do\n    mult_signs = mult_signs * (v >= 0 and 1 or -1)\n    sum_magns\
    \ = sum_magns + math.abs(v)\n  end\n  return mult_signs * sum_magns\nend", " \
    \ local prod = 1\n  local sum = 0\n  for i,v in ipairs(arr) do\n    prod = prod\
    \ * v\n    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend", "    local\
    \ prod = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v == 0 then\n         \
    \   prod = 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "  local p1, p2 = 1, 1\n  for i = 1, #arr do\n    if arr[i] > 0 then p1 = p1 * arr[i]\
    \ end\n    if arr[i] < 0 then p2 = p2 * arr[i] end\n  end\n  return p1 + p2\n\
    end", "\treturn nil\nend", "  local sign, product = 1, 1\n  for _, n in ipairs(arr)\
    \ do\n    if n == 0 then sign = 0 break end\n    if n < 0 then sign = sign * -1\
    \ end\n    product = product * n\n  end\n  return sign * product\nend", "  if\
    \ #arr == 0 then return None end\n  local sum = 0\n  local p = 1\n  for i, n in\
    \ ipairs(arr) do\n    if n > 0 then\n      sum = sum + n\n    elseif n < 0 then\n\
    \      sum = sum - n\n      p = p * -1\n    end\n  end\n  return sum * p\nend",
  "    local sum = 0\n    local prod = 1\n    for _,v in ipairs(arr) do\n        local\
    \ mag = math.abs(v)\n        local sign = math.sign(v)\n        sum = sum + mag\n\
    \        prod = prod * sign\n    end\n    return sum * prod\nend", "\tlocal sign\
    \ = 1\n\tlocal mag = 0\n\tfor _, n in ipairs(arr) do\n\t\tif n < 0 then\n\t\t\t\
    sign = sign * -1\n\t\tend\n\t\tmag = mag + math.abs(n)\n\tend\n\treturn sign *\
    \ mag\nend", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        local s = v == 0 and 0 or (v < 0 and -1 or 1)\n        prod = prod\
    \ * s\n        sum = sum + v\n    end\n    return prod * sum\nend", "  -- your\
    \ code here\n  if #arr == 0 then\n    return nil\n  end\n  prod = 1\n  for i =\
    \ 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n    elseif arr[i]\
    \ < 0 then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n\
    \  return sum * prod\nend", "    local prod = 1\n    local sum = 0\n    for _,\
    \ v in ipairs(arr) do\n        local value = v\n        if v < 0 then\n      \
    \      value = -v\n            prod = prod * -1\n        elseif v == 0 then\n\
    \            prod = 0\n        end\n        sum = sum + value\n    end\n    return\
    \ prod * sum\nend", "    if #arr == 0 then return nil end\n    local prod = 1\n\
    \    for i = 1, #arr do\n        local n = arr[i]\n        if n > 0 then n = 1\n\
    \        elseif n < 0 then n = -1\n        else n = 0 end\n        prod = prod\
    \ * n\n    end\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum +\
    \ math.abs(arr[i])\n    end\n    return sum * prod\nend", "  local sum = 0\n \
    \ local product = 1\n  if not arr then return nil end\n  for _, n in ipairs(arr)\
    \ do\n    if n > 0 then\n      sum = sum + n\n      product = product * 1\n  \
    \  elseif n < 0 then\n      sum = sum + -n\n      product = product * -1\n   \
    \ else\n      product = product * 0\n    end\n  end\n  return sum * product\n\
    end", "  local p, s = 1, 0\n  for _, v in ipairs(arr) do\n    if v == 0 then s\
    \ = s + 1\n    else p = p * (v > 0 and 1 or -1) end\n  end\n  return s % 2 ==\
    \ 0 and p or -p\nend", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    local sign = math.sign(v)\n    if sign == nil then\n      sign = 0\n\
    \    end\n    sum = sum + math.abs(v)\n    prod = prod * sign\n  end\n  return\
    \ sum * prod\nend", "    local sum = 0\n    for _, v in ipairs(arr) do\n     \
    \   if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n    \
    \        sum = sum - v\n        end\n    end\n    local prod = 1\n    for _, v\
    \ in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n    \
    \    elseif v < 0 then\n            prod = prod * -1\n        else\n         \
    \   prod = prod * 0\n        end\n    end\n    return sum * prod\nend", "    local\
    \ prod = 1\n    local sum = 0\n    for _, x in ipairs(arr) do\n        prod =\
    \ prod * sign(x)\n        sum = sum + abs(x)\n    end\n    return prod * sum\n\
    end", "    local prod = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n\
    \        local sign = v > 0 and 1 or v < 0 and -1 or 0\n        prod = prod *\
    \ sign\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "    if #arr == 0 then return nil end\n    return sum(map(abs, arr)) * reduce(mul,\
    \ map(sign, arr))\nend", "    local prod = 1\n    local sum = 0\n    for _, v\
    \ in ipairs(arr) do\n        prod = prod * v / math.abs(v)\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod * sum\nend", "  local product, sign\
    \ = 1, 1\n  for _, i in ipairs(arr) do\n    if i < 0 then sign = -1 end\n    if\
    \ i == 0 then sign = 0 end\n    product = product * sign\n  end\n  return product\n\
    end", "  local sz = 0\n  for k, v in pairs(arr) do sz = sz + 1 end\n  if sz ==\
    \ 0 then return end\n  local prod = 1\n  local sum = 0\n  for k, v in pairs(arr)\
    \ do\n    prod = prod * (v >= 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + (v\
    \ < 0 and -v or v)\n  end\n  return sum * prod\nend", "    local prod, sum = 1,\
    \ 0\n    for i = 1, #arr do\n        local v = arr[i]\n        if v < 0 then\n\
    \            prod = prod * -1\n        elseif v == 0 then\n            prod =\
    \ 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return prod *\
    \ sum\nend", "  local function products(acc, n)\n    if n == 0 then\n      return\
    \ acc\n    elseif n > 0 then\n      return products(acc*1, n-1)\n    else\n  \
    \    return products(acc*-1, n+1)\n    end\n  end\n  if #arr == 0 then\n    return\
    \ nil\n  else\n    return sum_abs(arr) * products(1, #arr)\n  end\nend", "\tif\
    \ #arr == 0 then return end\n\tlocal function prod(a, b) return a * b end\n\t\
    local function map(f, arr)\n\t\tlocal ret = {}\n\t\tfor i, v in ipairs(arr) do\n\
    \t\t\tret[i] = f(v)\n\t\tend\n\t\treturn ret\n\tend\n\tlocal function sign(x)\n\
    \t\tif x > 0 then return 1\n\t\telseif x < 0 then return -1\n\t\telse return 0\
    \ end\n\tend\n\tlocal function abs(x)\n\t\tif x < 0 then return -x else return\
    \ x end\n\tend\n\tlocal function sum(a, b) return a + b end\n\treturn foldl(sum,\
    \ 0, map(abs, arr)) * foldl(prod, 1, map(sign, arr))\nend", "  local sum, prod\
    \ = 0, 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    prod\
    \ = prod * sign(v)\n  end\n  return sum * prod\nend", "    local sign = 1\n  \
    \  local res = 0\n    for _, v in ipairs(arr) do\n        local sig = (v == 0)\
    \ and 0 or (v < 0 and -1 or 1)\n        sign = sign * sig\n        res = res +\
    \ math.abs(v)\n    end\n    return res * sign\nend", "  local product, sum = 1,\
    \ 0\n  for i = 1, #arr do\n    product = product * (arr[i] > 0 and 1 or arr[i]\
    \ < 0 and -1 or 0)\n    sum = sum + math.abs(arr[i])\n  end\n  return product\
    \ * sum\nend", "    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + arr[i]\n        elseif arr[i] < 0 then\n            prod = prod * -1\n   \
    \         sum = sum + math.abs(arr[i])\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return prod * sum\nend", "    local sum = 0\n\
    \    local product = 1\n    if #arr == 0 then\n        return nil\n    end\n \
    \   for i, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        product\
    \ = product * v\n    end\n    return sum * product\nend", "    -- first, convert\
    \ array to signs\n    local signs = {}\n    for i, v in ipairs(arr) do\n     \
    \   if v > 0 then\n            signs[i] = 1\n        elseif v < 0 then\n     \
    \       signs[i] = -1\n        else\n            signs[i] = 0\n        end\n \
    \   end\n    -- then, multiply signs\n    local prod = 1\n    for i, v in ipairs(signs)\
    \ do\n        prod = prod * v\n    end\n    -- finally, multiply prod by magnitude\
    \ of each number in arr\n    local sum = 0\n    for i, v in ipairs(arr) do\n \
    \       sum = sum + math.abs(v)\n    end\n    return prod * sum\nend", "  local\
    \ magnitude = 0\n  local product = 1\n  for i, v in ipairs(arr) do\n    local\
    \ sign = 1\n    if v < 0 then\n      sign = -1\n    elseif v == 0 then\n     \
    \ sign = 0\n    end\n    product = product * sign\n    magnitude = magnitude +\
    \ math.abs(v)\n  end\n  return magnitude * product\nend", "    local res = 0\n\
    \    local sum = 0\n    local mult = 1\n    if #arr ~= 0 then\n        for i =\
    \ 1, #arr do\n            if arr[i] ~= 0 then\n                sum = sum + math.abs(arr[i])\n\
    \                mult = mult * math.sign(arr[i])\n            end\n        end\n\
    \        res = sum * mult\n    end\n    return res\nend", "  local product = 1\n\
    \  local sum = 0\n  for _, v in ipairs(arr) do\n    product = product * (v > 0\
    \ and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return sum\
    \ * product\nend", "    local total = 1\n    for i, v in ipairs(arr) do\n    \
    \    total = total * (v < 0 and -1 or v > 0 and 1 or 0)\n    end\n    return total\n\
    end", "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    if arr[i]\
    \ == 0 then\n      prod = prod * 0\n    elseif arr[i] > 0 then\n      prod = prod\
    \ * 1\n    else\n      prod = prod * -1\n    end\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    for i = 1, #arr do\n\
    \        sum = sum + math.abs(arr[i]) * csign(arr[i])\n    end\n    return sum\n\
    end", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            prod = prod * 1\n            sum = sum + v\n\
    \        elseif v < 0 then\n            prod = prod * -1\n            sum = sum\
    \ + math.abs(v)\n        else\n            prod = prod * 0\n        end\n    end\n\
    \    return prod * sum\nend", "  local sum, mul = 0, 1\n  for i, v in ipairs(arr)\
    \ do\n    if v < 0 then\n      mul = mul * -1\n    elseif v == 0 then\n      mul\
    \ = 0\n    end\n    sum = sum + math.abs(v)\n  end\n  return sum * mul\nend",
  "    if #arr == 0 then return nil end\n    local prod = 1\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 then\n            prod = prod * 1\n        elseif arr[i]\
    \ < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    local res = 0\n    for i = 1, #arr do\n     \
    \   res = res + math.abs(arr[i])\n    end\n    return res * prod\nend", "    local\
    \ t = {}\n    for i, v in ipairs(arr) do\n        if v < 0 then\n            table.insert(t,\
    \ -v)\n        else\n            table.insert(t, v)\n        end\n    end\n  \
    \  return sum(t) * prod(arr)\nend", "  -- TODO\nend", "    local s = 1\n    local\
    \ l = 0\n    if #arr == 0 then return nil end\n    for _,i in ipairs(arr) do\n\
    \        if i == 0 then\n            l = l + 1\n        else\n            s =\
    \ s * math.sign(i)\n        end\n    end\n    return s * l\nend", "    local len\
    \ = #arr\n    if len == 0 then return end\n    local res = 0\n    for i = 1, len\
    \ do\n        res = res + (arr[i] > 0 and 1 or arr[i] < 0 and -1 or 0)\n    end\n\
    \    return res * arr:prod()\nend", "    if #arr == 0 then\n        return nil\n\
    \    end\n    local sum, signs = 0, 1\n    for _, v in ipairs(arr) do\n      \
    \  if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n     \
    \       sum = sum - v\n            signs = signs * -1\n        end\n    end\n\
    \    return sum * signs\nend", "    if type(arr) ~= 'table' then\n        return\
    \ nil\n    end\n    if #arr == 0 then\n        return nil\n    end\n    local\
    \ i, res, sign = 0, 1, 1\n    while i < #arr do\n        if arr[i] < 0 then\n\
    \            sign = sign * -1\n        end\n        if arr[i] == 0 then\n    \
    \        sign = 0\n        end\n        res = res + math.abs(arr[i])\n       \
    \ i = i + 1\n    end\n    return res * sign\nend", "    local zeros = 0\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        if n == 0 then\n            zeros = zeros + 1\n        elseif n > 0 then\n\
    \            prod = prod * 1\n            sum = sum + n\n        else\n      \
    \      prod = prod * -1\n            sum = sum - n\n        end\n    end\n   \
    \ if zeros > 0 then\n        return nil\n    else\n        return prod * sum\n\
    \    end\nend", "  if #arr == 0 then return nil end\n  local mult = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    mult = mult * (v < 0 and -1 or v\
    \ > 0 and 1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return mult * sum\nend",
  "    local function prod(a, b) return a * b end\n    local function sum(a, b) return\
    \ a + b end\n    local function sign(a) return a > 0 and 1 or (a < 0 and -1 or\
    \ 0) end\n    return arr and arr ~= {} and (function(arr)\n        local prod_signs\
    \ = table.reduce(table.map(arr, sign), prod)\n        local sum_magnitudes = table.reduce(table.map(arr,\
    \ math.abs), sum)\n        return prod_signs * sum_magnitudes\n    end)(arr) or\
    \ nil\nend", "    local sum, mult = 0, 1\n    for _, v in ipairs(arr) do\n   \
    \     if v == 0 then\n            mult = 0\n        elseif v < 0 then\n      \
    \      mult = mult * -1\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    return sum * mult\nend", "    local prod = 1\n    local sum = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] < 0 then\n            prod = prod * -1\n \
    \       elseif arr[i] == 0 then\n            prod = 0\n        end\n        sum\
    \ = sum + math.abs(arr[i])\n    end\n    return prod * sum\nend", "  local function\
    \ prod(a, b) return a * b end\n  local function sign(a) return (a > 0 and 1) or\
    \ (a < 0 and -1) or 0 end\n  return sum(map(abs, arr)) * reduce(prod, map(sign,\
    \ arr))\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n        prod = prod * sign(v)\n    end\n\
    \    return sum * prod\nend", "    local product = 1\n    local sum = 0\n    for\
    \ k, v in pairs(arr) do\n        if v ~= 0 then\n            product = product\
    \ * (v / math.abs(v))\n            sum = sum + math.abs(v)\n        end\n    end\n\
    \    return product * sum\nend", "  local prod = 1\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    if arr[i] > 0 then\n      prod = prod * 1\n      sum = sum +\
    \ arr[i]\n    elseif arr[i] < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + math.abs(arr[i])\n    elseif arr[i] == 0 then\n      prod = prod * 0\n   \
    \ end\n  end\n  return prod * sum\nend", "\tlocal prod, mag = 1, 0\n\tfor i, v\
    \ in ipairs(arr) do\n\t\tlocal sign = v < 0 and -1 or v > 0 and 1 or 0\n\t\tprod\
    \ = prod * sign\n\t\tmag = mag + math.abs(v)\n\tend\n\treturn prod * mag\nend",
  "  local sum, psum = 0, 1\n  for _, i in ipairs(arr) do\n    sum = sum + math.abs(i)\n\
    \    if i > 0 then\n      psum = psum * 1\n    elseif i < 0 then\n      psum =\
    \ psum * -1\n    else\n      psum = psum * 0\n    end\n  end\n  return sum * psum\n\
    end", "  local sum = 0\n  local prd = 1\n  for _, x in ipairs(arr) do\n    if\
    \ x == 0 then\n      prd = 0\n    else\n      sum = sum + math.abs(x)\n      prd\
    \ = prd * math.sign(x)\n    end\n  end\n  return prd * sum\nend", "    local prod\
    \ = 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] == 0 then\n\
    \            prod = prod * 0\n        elseif arr[i] > 0 then\n            prod\
    \ = prod * 1\n            sum = sum + arr[i]\n        else\n            prod =\
    \ prod * -1\n            sum = sum + math.abs(arr[i])\n        end\n    end\n\
    \    return prod * sum\nend", "  local sum = 0\n  local prod = 1\n  for _, v in\
    \ ipairs(arr) do\n    local sign = v ~= 0 and v / math.abs(v) or 0\n    sum =\
    \ sum + math.abs(v)\n    prod = prod * sign\n  end\n  return sum * prod\nend",
  "  if #arr == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for _,\
    \ n in ipairs(arr) do\n    local sign = n / math.abs(n)\n    sum = sum + math.abs(n)\n\
    \    prod = prod * sign\n  end\n  return sum * prod\nend", "\tlocal prod = 1\n\
    \tfor _,v in ipairs(arr) do\n\t\tprod = prod * math.sign(v)\n\tend\n\tlocal sum\
    \ = 0\n\tfor _,v in ipairs(arr) do\n\t\tsum = sum + math.abs(v)\n\tend\n\treturn\
    \ prod * sum\nend", "  local mag_prod = 1\n  local sign_prod = 1\n  for i, n in\
    \ ipairs(arr) do\n    if n == 0 then\n      sign_prod = 0\n    else\n      mag_prod\
    \ = mag_prod * math.abs(n)\n      sign_prod = sign_prod * n\n    end\n  end\n\
    \  return mag_prod * sign_prod\nend", "    local res = 0\n    local mult = 1\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            res = res + arr[i]\n\
    \        elseif arr[i] < 0 then\n            res = res - arr[i]\n            mult\
    \ = mult * -1\n        end\n    end\n    return res * mult\nend", "  if #arr ==\
    \ 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for i = 1, #arr\
    \ do\n    if arr[i] == 0 then arr[i] = 1 end\n    prod = prod * (arr[i] / math.abs(arr[i]))\n\
    \    sum = sum + math.abs(arr[i])\n  end\n  return sum * prod\nend", "    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n\
    \            sum = sum + arr[i]\n            prod = prod * 1\n        elseif arr[i]\
    \ < 0 then\n            sum = sum + math.abs(arr[i])\n            prod = prod\
    \ * -1\n        else\n            sum = sum + arr[i]\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend", "  if arr == nil or\
    \ #arr == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for i =\
    \ 1, #arr do\n    local value = arr[i]\n    if value > 0 then\n      sum = sum\
    \ + value\n      prod = prod * 1\n    elseif value < 0 then\n      sum = sum +\
    \ value * -1\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend",
  "\tif #arr == 0 then\n\t\treturn nil\n\tend\n\tlocal sum, product = 0, 1\n\tfor\
    \ _, v in ipairs(arr) do\n\t\tif v == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tsum\
    \ = sum + math.abs(v)\n\t\tproduct = product * math.sign(v)\n\tend\n\treturn sum\
    \ * product\nend", "    if #arr == 0 then return nil end\n    local prod = 1\n\
    \    for _, v in ipairs(arr) do\n        prod = prod * (v ~= 0 and v > 0 and 1\
    \ or v < 0 and -1 or 0)\n    end\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + (v ~= 0 and math.abs(v) or 0)\n    end\n    return sum\
    \ * prod\nend", "  if #arr == 0 then return nil end\n  local p = 1\n  local s\
    \ = 0\n  for i,v in ipairs(arr) do\n    if v < 0 then\n      p = p * -1\n    elseif\
    \ v > 0 then\n      s = s + v\n    end\n  end\n  return p * s\nend", "    if not\
    \ arr or not #arr then return nil end\n    local sum = 0\n    local prod = 1\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then prod = prod * 1\n        elseif\
    \ arr[i] < 0 then prod = prod * -1\n        else prod = prod * 0 end\n       \
    \ sum = sum + math.abs(arr[i])\n    end\n    return sum * prod\nend", "  local\
    \ sum = 0\n  local product = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      product\
    \ = product * -1\n    end\n  end\n  return sum * product\nend", "    local product\
    \ = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        product = product\
    \ * sign(v)\n        sum = sum + math.abs(v)\n    end\n    return product * sum\n\
    end", "  local sum, product = 0, 1\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n\
    \    product = product * math.sign(arr[i])\n  end\n  return sum * product\nend",
  "  if #arr == 0 then return end\n  local sum = 0\n  local sign_prod = 1\n  for i\
    \ = 1, #arr do\n    local x = arr[i]\n    if x > 0 then\n      sum = sum + x\n\
    \    elseif x < 0 then\n      sum = sum - x\n      sign_prod = sign_prod * -1\n\
    \    end\n  end\n  return sum * sign_prod\nend", "  local sum, prod = 0, 1\n \
    \ for i, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    prod = prod * sign(v)\n\
    \  end\n  return sum * prod\nend", "\tif #arr == 0 then return nil end\n\tlocal\
    \ t = {}\n\tlocal s = 0\n\tfor _, v in ipairs(arr) do\n\t\tif v == 0 then\n\t\t\
    \ttable.insert(t, 0)\n\t\telseif v > 0 then\n\t\t\ttable.insert(t, 1)\n\t\telse\n\
    \t\t\ttable.insert(t, -1)\n\t\tend\n\t\ts = s + math.abs(v)\n\tend\n\tlocal m\
    \ = 1\n\tfor _, v in ipairs(t) do\n\t\tm = m * v\n\tend\n\treturn s * m\nend",
  "  if not arr then return nil end\n  local sum = 0\n  local prod = 1\n  for _, num\
    \ in ipairs(arr) do\n    sum = sum + math.abs(num)\n    prod = prod * (num < 0\
    \ and -1 or (num > 0 and 1 or 0))\n  end\n  return sum * prod\nend", "    local\
    \ sum, prd = 0, 1\n    for i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n\
    \        prd = prd * math.sign(arr[i])\n    end\n    return sum * prd\nend", "\t\
    if not arr then return nil end\n\tlocal sum = 0\n\tlocal prod = 1\n\tfor _, x\
    \ in ipairs(arr) do\n\t\tif x ~= 0 then\n\t\t\tif x > 0 then\n\t\t\t\tsum = sum\
    \ + x\n\t\t\telseif x < 0 then\n\t\t\t\tsum = sum - x\n\t\t\t\tprod = prod * -1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn sum * prod\nend", "    local sum = 0\n   \
    \ local prodsign = 1\n    for i, num in ipairs(arr) do\n        sum = sum + math.abs(num)\n\
    \        if num < 0 then\n            prodsign = prodsign * -1\n        elseif\
    \ num == 0 then\n            prodsign = 0\n        end\n    end\n    return sum\
    \ * prodsign\nend", "    if #arr == 0 then return nil end\n    local product =\
    \ 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        product = product\
    \ * math.abs(v) / v\n        sum = sum + math.abs(v)\n    end\n    return sum\
    \ * product\nend", "    local prod = 1\n    local sum = 0\n    for i = 1, #arr\
    \ do\n        local a = arr[i]\n        if a > 0 then\n            prod = prod\
    \ * 1\n        elseif a < 0 then\n            prod = prod * -1\n        else\n\
    \            prod = prod * 0\n        end\n        sum = sum + math.abs(a)\n \
    \   end\n    return prod * sum\nend", "    local sum = 0\n    local prod = 1\n\
    \    if #arr == 0 then return nil end\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n \
    \           sum = sum - arr[i]\n            prod = prod * -1\n        else\n \
    \           prod = 0\n        end\n    end\n    return sum * prod\nend", "  --\
    \ YOUR CODE HERE\n  local product = 1\n  local sum = 0\n  if arr == nil then\n\
    \    return nil\n  end\n  for _, v in ipairs(arr) do\n    if v > 0 then\n    \
    \  product = product * 1\n      sum = sum + v\n    elseif v < 0 then\n      product\
    \ = product * -1\n      sum = sum + (v * -1)\n    else\n      product = product\
    \ * 0\n    end\n  end\n  return product * sum\nend", "  local res = 1\n  for _,\
    \ n in ipairs(arr) do\n    res = res * (n > 0 and 1 or n < 0 and -1 or 0)\n  end\n\
    \  return res\nend", "    if not arr or #arr == 0 then return nil end\n    local\
    \ num = arr[1]\n    if not num then return nil end\n    local sum, prod = math.abs(num),\
    \ math.sign(num)\n    for i = 2, #arr do\n        local num = arr[i]\n       \
    \ if not num then return nil end\n        sum = sum + math.abs(num)\n        prod\
    \ = prod * math.sign(num)\n    end\n    return sum * prod\nend", "  if #arr ==\
    \ 0 then return end\n  local p = 1\n  local s = 0\n  for i = 1, #arr do\n    if\
    \ arr[i] > 0 then\n      p = p * 1\n      s = s + arr[i]\n    elseif arr[i] <\
    \ 0 then\n      p = p * -1\n      s = s + math.abs(arr[i])\n    else\n      p\
    \ = p * 0\n    end\n  end\n  return s * p\nend", "  local sum = 0\n  local prodsign\
    \ = 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      prodsign = 0\n\
    \    else\n      prodsign = prodsign * (v / math.abs(v))\n      sum = sum + math.abs(v)\n\
    \    end\n  end\n  return prodsign * sum\nend", "  local sum = 0\n  local prod\
    \ = 1\n  for _,v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n \
    \   elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n    end\n\
    \  end\n  return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  for i\
    \ = 1, #arr do\n    sum = sum + math.abs(arr[i])\n    prod = prod * (arr[i] <\
    \ 0 and -1 or arr[i] > 0 and 1 or 0)\n  end\n  return prod == 0 and nil or sum\
    \ * prod\nend", "    if #arr == 0 then return nil end\n    local r = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            r = r + v\n     \
    \   elseif v < 0 then\n            r = r - v\n        end\n    end\n    local\
    \ s = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            s\
    \ = s * 1\n        elseif v < 0 then\n            s = s * -1\n        else\n \
    \           s = s * 0\n        end\n    end\n    return r * s\nend", "  local\
    \ prod = 1\n  local sum = 0\n  if #arr == 0 then\n    return nil\n  end\n  for\
    \ i = 1, #arr do\n    if arr[i] < 0 then\n      prod = prod * -1\n    elseif arr[i]\
    \ == 0 then\n      prod = prod * 0\n    end\n    sum = sum + math.abs(arr[i])\n\
    \  end\n  return sum * prod\nend", "    local sum = 0\n    local prod = 1\n  \
    \  for _, value in ipairs(arr) do\n        if value == 0 then\n            sum\
    \ = sum + 1\n        elseif value > 0 then\n            sum = sum + value\n  \
    \          prod = prod * 1\n        elseif value < 0 then\n            sum = sum\
    \ + value * -1\n            prod = prod * -1\n        end\n    end\n    return\
    \ sum * prod\nend", "    if #arr == 0 then return nil end\n    local prod = 1\n\
    \    for i = 1, #arr do\n        local n = math.abs(arr[i])\n        if n ~= 0\
    \ then prod = prod * n end\n    end\n    local sum = 0\n    for i = 1, #arr do\n\
    \        local n = arr[i]\n        if n ~= 0 then sum = sum + n end\n    end\n\
    \    return prod * sum\nend", "    local prod = 1\n    local sum = 0\n    for\
    \ _, a in ipairs(arr) do\n        prod = prod * math.sign(a)\n        sum = sum\
    \ + math.abs(a)\n    end\n    return prod * sum\nend", "    if #arr == 0 then\
    \ return end\n    local prod = 1\n    local sum = 0\n    for i, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + v\n        elseif v < 0 then\n            prod = prod * -1\n            sum\
    \ = sum + math.abs(v)\n        else\n            prod = prod * 0\n        end\n\
    \    end\n    return sum * prod\nend", "    local sum, product = 0, 1\n    for\
    \ i = 1, #arr do\n        if arr[i] > 0 then\n            sum = sum + arr[i]\n\
    \        elseif arr[i] < 0 then\n            sum = sum - arr[i]\n            product\
    \ = product * -1\n        else\n            product = product * 0\n        end\n\
    \    end\n    return sum * product\nend", "    local sum = 0\n    local prod =\
    \ 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            sum = sum\
    \ + arr[i]\n            prod = prod * 1\n        elseif arr[i] < 0 then\n    \
    \        sum = sum + arr[i] * -1\n            prod = prod * -1\n        else\n\
    \            sum = sum + 0\n            prod = prod * 0\n        end\n    end\n\
    \    return sum * prod\nend", "  local res, prod = 0, 1\n  for i, val in ipairs(arr)\
    \ do\n    if val > 0 then\n      res = res + val\n    elseif val < 0 then\n  \
    \    res = res - val\n      prod = prod * -1\n    end\n  end\n  return res * prod\n\
    end", "  local prod = 1\n  local mag  = 0\n  for i = 1, #arr do\n    local x =\
    \ arr[i]\n    if x == 0 then\n      return 0\n    elseif x > 0 then\n      prod\
    \ = prod * 1\n    else\n      prod = prod * -1\n    end\n    mag = mag + math.abs(x)\n\
    \  end\n  return prod * mag\nend", "    local sum = 0\n    local signs = {}\n\
    \    for i, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v\
    \ > 0 then\n            signs[i] = 1\n        elseif v < 0 then\n            signs[i]\
    \ = -1\n        else\n            signs[i] = 0\n        end\n    end\n    return\
    \ sum * folds.reduce('*', signs)\nend", "    local res = 1\n    local sum = 0\n\
    \    if arr then\n        for _, a in ipairs(arr) do\n            local m = math.abs(a)\n\
    \            local s = 1\n            if a < 0 then\n                s = -1\n\
    \            elseif a == 0 then\n                s = 0\n            end\n    \
    \        res = res * s\n            sum = sum + m\n        end\n        return\
    \ res * sum\n    end\nend", "  if #arr == 0 then return nil end\n  local sum =\
    \ 0\n  local product = 1\n  for _,n in ipairs(arr) do\n    if n == 0 then\n  \
    \    product = product * 0\n    elseif n > 0 then\n      product = product * 1\n\
    \    else\n      product = product * -1\n    end\n    sum = sum + math.abs(n)\n\
    \  end\n  return sum * product\nend", "  local sum = 0\n  local prod = 1\n  for\
    \ _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n    if v == 0 then prod\
    \ = 0 end\n    if v > 0 then prod = prod * 1 end\n    if v < 0 then prod = prod\
    \ * -1 end\n  end\n  return sum * prod\nend", "    if #arr == 0 then return nil\
    \ end\n    local function prod(s, n)\n        if n > 0 then\n            return\
    \ s * 1\n        elseif n < 0 then\n            return s * -1\n        else\n\
    \            return s * 0\n        end\n    end\n    local function sign(n)\n\
    \        if n > 0 then\n            return 1\n        elseif n < 0 then\n    \
    \        return -1\n        else\n            return 0\n        end\n    end\n\
    \    local function abs(n)\n        if n < 0 then\n            return -n\n   \
    \     else\n            return n\n        end\n    end\n    local prod_signs =\
    \ 1\n    for i = 1, #arr do\n        prod_signs = prod(prod_signs, sign(arr[i]))\n\
    \    end\n    local sum_magnitudes = 0\n    for i = 1, #arr do\n        sum_magnitudes\
    \ = sum_magnitudes + abs(arr[i])\n    end\n    return sum_magnitudes * prod_signs\n\
    end", "  local p = 1\n  local s = 0\n  for _, v in ipairs(arr) do\n    if v ==\
    \ 0 then\n      p = 0\n    else\n      local m = math.abs(v)\n      s = s + m\n\
    \      if v < 0 then\n        p = p * -1\n      end\n    end\n  end\n  return\
    \ p * s\nend", "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = signum(v)\n        if sign == 0 then\n            prod\
    \ = 0\n            break\n        end\n        prod = prod * sign\n        sum\
    \ = sum + math.abs(v)\n    end\n    return sum * prod\nend", "    local sum, prod\
    \ = 0, 1\n    for i = 1, #arr do\n        local num = arr[i]\n        if num >\
    \ 0 then\n            sum = sum + num\n        elseif num < 0 then\n         \
    \   sum = sum - num\n            prod = prod * -1\n        end\n    end\n    return\
    \ sum * prod\nend", "  if type(arr) ~= 'table' then return nil end\n  local prod\
    \ = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n    \
    \  prod = prod * -1\n      sum = sum + v\n    elseif v > 0 then\n      sum = sum\
    \ + v\n    end\n  end\n  return prod * sum\nend", "  local prod = 1\n  local sum\
    \ = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v > 0 and 1 or v < 0 and\
    \ -1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return prod == 0 and nil or\
    \ prod * sum\nend", "  if #arr == 0 then return nil end\n  local function sign(x)\
    \ return x and (x / math.abs(x)) or 0 end\n  local function abs(x) return x and\
    \ math.abs(x) or 0 end\n  local s = 1\n  local a = 0\n  for i, v in ipairs(arr)\
    \ do\n    s = s * sign(v)\n    a = a + abs(v)\n  end\n  return s * a\nend", " \
    \ local func = function(acc, cur)\n    return acc + math.abs(cur) * (cur >= 0\
    \ and 1 or -1)\n  end\n  return arr and arr[1] and foldl(func, 0, arr) or nil\n\
    end", "    local i, k, sum, prod = 1, 1, 0, 1\n    while arr[i] do\n        local\
    \ t = arr[i]\n        if t > 0 then\n            sum = sum + t\n            prod\
    \ = prod * 1\n        elseif t < 0 then\n            sum = sum + t * -1\n    \
    \        prod = prod * -1\n        else\n            prod = prod * 0\n       \
    \ end\n        i = i + 1\n    end\n    return sum * prod\nend", "  local result\
    \ = 0\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      result = result\
    \ + v\n    elseif v < 0 then\n      result = result - v\n    end\n  end\n  return\
    \ result\nend", "    local prod = 1\n    local sum = 0\n    if arr == nil or #arr\
    \ == 0 then return end\n    for i = 1, #arr do\n        if arr[i] > 0 then\n \
    \           prod = prod * 1\n            sum = sum + arr[i]\n        elseif arr[i]\
    \ < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(arr[i])\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    return sum\
    \ * prod\nend", "    if #arr == 0 then\n        return nil\n    end\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v == 0 then\n         \
    \   prod = 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ sum * prod\nend", "    local sum = 0\n    local neg = 1\n    for i = 1, #arr\
    \ do\n        if arr[i] < 0 then\n            neg = neg * -1\n        end\n  \
    \      sum = sum + math.abs(arr[i])\n    end\n    return sum * neg\nend", "\t\
    local func = function(i,j)\n\t\tlocal m = 1\n\t\tlocal s = 1\n\t\tif (i > 0) then\n\
    \t\t\tm = i * i\n\t\telseif (i < 0) then\n\t\t\tm = i * i\n\t\t\ts = s * -1\n\t\
    \tend\n\t\tif (j > 0) then\n\t\t\tm = m * j * j\n\t\telseif (j < 0) then\n\t\t\
    \tm = m * j * j\n\t\t\ts = s * -1\n\t\tend\n\t\treturn m * s\n\tend\n\treturn\
    \ reduce(func, arr)\nend", "    local mult, summ = 1, 0\n    for _, a in ipairs(arr)\
    \ do\n        if a > 0 then\n            mult = mult * 1\n            summ = summ\
    \ + a\n        elseif a < 0 then\n            mult = mult * -1\n            summ\
    \ = summ + math.abs(a)\n        end\n    end\n    return summ * mult\nend", " \
    \   -- your code goes here\n    local sum = 0\n    local product = 1\n    for\
    \ i, x in ipairs(arr) do\n        sum = sum + math.abs(x)\n        product = product\
    \ * sign(x)\n    end\n    return sum * product\nend", "    local m = 1\n    local\
    \ s = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            s = s\
    \ + arr[i]\n        elseif arr[i] < 0 then\n            m = m * -1\n         \
    \   s = s + arr[i]\n        end\n    end\n    return m * s\nend", "    local prod\
    \ = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            prod = prod * 1\n            sum = sum + v\n        elseif v < 0\
    \ then\n            prod = prod * -1\n            sum = sum + (-v)\n        else\n\
    \            prod = prod * 0\n        end\n    end\n    return prod * sum\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ sum = sum + math.abs(v)\n        prod = prod * sign(v)\n    end\n    return\
    \ sum * prod\nend", "\tif #arr == 0 then\n\t\treturn nil\n\tend\n\tlocal prod\
    \ = 1\n\tlocal sum = 0\n\tfor _, x in ipairs(arr) do\n\t\tif x > 0 then\n\t\t\t\
    prod = prod * 1\n\t\telseif x < 0 then\n\t\t\tprod = prod * -1\n\t\telse\n\t\t\
    \tprod = prod * 0\n\t\tend\n\t\tsum = sum + math.abs(x)\n\tend\n\treturn sum *\
    \ prod\nend", "    if arr == nil or next(arr) == nil then return nil end\n   \
    \ local res = 0\n    local sign = 1\n    for _, v in ipairs(arr) do\n        res\
    \ = res + math.abs(v)\n        if v > 0 then sign = sign * 1 end\n        if v\
    \ < 0 then sign = sign * -1 end\n    end\n    return res * sign\nend", "    local\
    \ prod = 1\n    local mags = 0\n    for i = 1, #arr do\n        prod = prod *\
    \ math.sign(arr[i])\n        mags = mags + math.abs(arr[i])\n    end\n    return\
    \ prod * mags\nend", "  local sum = 0\n  local prod = 1\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 then sum = sum + arr[i]\n    elseif arr[i] < 0 then sum = sum\
    \ - arr[i] prod = prod * -1\n    else prod = prod * 0 end\n  end\n  return sum\
    \ * prod\nend", "  if #arr == 0 then return nil end\n  local prod = 1\n  for _,\
    \ i in ipairs(arr) do\n    prod = prod * (i > 0 and 1 or (i < 0 and -1 or 0))\n\
    \  end\n  local res = 0\n  for _, i in ipairs(arr) do\n    res = res + math.abs(i)\n\
    \  end\n  return res * prod\nend", "  local sum = 0\n  local prod = 1\n  if #arr\
    \ == 0 then return nil end\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum\
    \ = sum + math.abs(v)\n    end\n  end\n  return sum * prod\nend", "  local total\
    \ = 1\n  for i,x in ipairs(arr) do\n    if x ~= 0 then\n      total = total *\
    \ x\n    end\n  end\n  return total\nend", "    if not arr or #arr == 0 then return\
    \ end\n    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n       \
    \ local val = arr[i]\n        local sign = 0\n        if val > 0 then sign = 1\n\
    \        elseif val < 0 then sign = -1 end\n        prod = prod * sign\n     \
    \   sum = sum + math.abs(val)\n    end\n    return sum * prod\nend", "  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local magnitude = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v == 0 then sign = sign * 0\n    elseif v > 0 then\
    \ sign = sign * 1\n    else sign = sign * -1 end\n    magnitude = magnitude +\
    \ math.abs(v)\n  end\n  return magnitude * sign\nend", "  local res = 1\n  for\
    \ _, v in ipairs(arr) do\n    res = res * (v > 0 and 1 or v < 0 and -1 or 0)\n\
    \  end\n  return arr[1] and res * math.abs(arr[1]) or nil\nend", "  if #arr <\
    \ 1 then return nil end\n  local s,p = 0,1\n  for _,i in ipairs(arr) do\n    s\
    \ = s + math.abs(i)\n    p = p * (i > 0 and 1 or i < 0 and -1 or 0)\n  end\n \
    \ return s * p\nend", "    local prod = 1\n    local sum = 0\n    for _, v in\
    \ ipairs(arr) do\n        local sign = v < 0 and -1 or v > 0 and 1 or 0\n    \
    \    prod = prod * sign\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend", "    if not arr then return nil end\n    local signs = {}\n\
    \    local total = 0\n    for i, v in ipairs(arr) do\n        if v > 0 then\n\
    \            table.insert(signs, 1)\n        elseif v < 0 then\n            table.insert(signs,\
    \ -1)\n        else\n            table.insert(signs, 0)\n        end\n       \
    \ total = total + math.abs(v)\n    end\n    local sign_prod = 1\n    for i, v\
    \ in ipairs(signs) do\n        sign_prod = sign_prod * v\n    end\n    return\
    \ total * sign_prod\nend", "    if #arr < 1 then\n        return nil\n    end\n\
    \    local product = 1\n    local sum = 0\n    for i = 1, #arr do\n        local\
    \ val = arr[i]\n        if val < 0 then\n            product = product * -1\n\
    \            sum = sum + math.abs(val)\n        elseif val > 0 then\n        \
    \    sum = sum + val\n        end\n    end\n    return product * sum\nend", " \
    \ local total = 1\n  for i, val in ipairs(arr) do\n    if val < 0 then\n     \
    \ total = total * -1\n    elseif val == 0 then\n      total = total * 0\n    end\n\
    \  end\n  return total\nend", "    local sum = 0\n    local prod = 1\n    for\
    \ i = 1, #arr do\n        sum = sum + math.abs(arr[i])\n        prod = prod *\
    \ arr[i] / math.abs(arr[i])\n    end\n    return sum * prod\nend", "    if #arr\
    \ == 0 then return end\n    local res = 1\n    for _, e in ipairs(arr) do\n  \
    \      res = res * (e < 0 and -1 or e > 0 and 1 or 0)\n    end\n    return res\n\
    end", "    local product = 1\n    local sum = 0\n    for i = 1, #arr do\n    \
    \    if arr[i] < 0 then\n            product = product * -1\n        elseif arr[i]\
    \ == 0 then\n            product = 0\n        end\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return product * sum\nend", "    if #arr == 0 then return nil end\n\
    \    local sum, sign = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v < 0 then sign = sign * -1 end\n    end\n    return\
    \ sum * sign\nend", "  local prod = 0\n  local sum = 0\n  for i = 1, #arr do\n\
    \    prod = prod + (arr[i] < 0 and -1 or arr[i] > 0 and 1 or 0)\n    sum = sum\
    \ + math.abs(arr[i])\n  end\n  return prod * sum\nend", "  --TODO\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
