name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
  local function words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     if is_prime(#word) then\n            table.insert(res, word)\n        end\n\
    \    end\n    return table.concat(res, ' ')\nend", "    -- TODO: Implement\nend",
  "    local words = {}\n    for w in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ w)\n    end\n    local primes = {}\n    for k, v in pairs(words) do\n      \
    \  if is_prime(#v) then\n            table.insert(primes, v)\n        end\n  \
    \  end\n    return table.concat(primes, \" \")\nend", "    local words = {}\n\
    \    for word in sentence:gmatch(\"%S+\") do\n        table.insert(words, word)\n\
    \    end\n    local table1 = {}\n    for i, word in ipairs(words) do\n       \
    \ if is_prime(word:len()) then\n            table.insert(table1, word)\n     \
    \   end\n    end\n    local sentence = \"\"\n    for i, word in ipairs(table1)\
    \ do\n        sentence = sentence .. word .. \" \"\n    end\n    return sentence:sub(1,\
    \ -2)\nend", "    local words = sentence:gmatch(\"%w+\")\n    local results =\
    \ {}\n    for word in words do\n        if primes[#word] then\n            table.insert(results,\
    \ word)\n        end\n    end\n    return table.concat(results, \" \")\nend",
  "  local sentence = sentence\n  local words = {}\n  local prime_words = {}\n  local\
    \ add = true\n  for word in string.gmatch(sentence, \"%w+\") do\n    add = true\n\
    \    for i = 2, word:len() - 1 do\n      if word:len() % i == 0 then\n       \
    \ add = false\n        break\n      end\n    end\n    if add then\n      table.insert(prime_words,\
    \ word)\n    end\n  end\n  return table.concat(prime_words, \" \")\nend", "  \
    \  local primes = table.pack(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    local valid = {}\n    for _,\
    \ v in ipairs(primes) do\n        valid[v] = true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch(\"[^%s]+\") do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for _, word in ipairs(words) do\n\
    \        if valid[#word] then\n            table.insert(result, word)\n      \
    \  end\n    end\n    return table.concat(result, \" \")\nend", "  -- TODO\nend",
  "    local is_prime = function(n)\n        for i = 2, math.sqrt(n) do\n        \
    \    if n % i == 0 then\n                return false\n            end\n     \
    \   end\n        return true\n    end", "  local is_prime = {}\n  local primes\
    \ = {}\n  local n = 0\n  for i = 2, #sentence do\n    if not is_prime[i] then\n\
    \      primes[#primes + 1] = i\n      is_prime[i] = true\n      for j = i * 2,\
    \ #sentence, i do\n        is_prime[j] = false\n      end\n    end\n  end\n  local\
    \ words = {}\n  for word in sentence:gmatch(\"%w+\") do\n    if is_prime[#word]\
    \ then\n      words[#words + 1] = word\n    end\n  end\n  return table.concat(words,\
    \ \" \")\nend", "    local prime_words = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        local len = #word\n        local is_prime = true\n        for i\
    \ = 2, len - 1 do\n            if len % i == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(prime_words, word)\n        end\n    end\n  \
    \  return table.concat(prime_words, ' ')\nend", "    local prime_numbers = {\n\
    \        [1] = false,\n        [2] = true,\n        [3] = true,\n        [4] =\
    \ false,\n        [5] = true,\n        [6] = false,\n        [7] = true,\n   \
    \     [8] = false,\n        [9] = false,\n        [10] = false,\n        [11]\
    \ = true,\n        [12] = false,\n        [13] = true,\n        [14] = false,\n\
    \        [15] = false,\n        [16] = false,\n        [17] = true,\n        [18]\
    \ = false,\n        [19] = true,\n        [20] = false,\n        [21] = false,\n\
    \        [22] = false,\n        [23] = true,\n        [24] = false,\n        [25]\
    \ = false,\n        [26] = false,\n        [27] = false,\n        [28] = false,\n\
    \        [29] = true,\n        [30] = false,\n        [31] = true,\n        [32]\
    \ = false,\n        [33] = false,\n        [34] = false,\n        [35] = false,\n\
    \        [36] = false,\n        [37] = true,\n        [38] = false,\n        [39]\
    \ = false,\n        [40] = false,\n        [41] = true,\n        [42] = false,\n\
    \        [43] = true,\n        [44] = false,\n        [45] = false,\n        [46]\
    \ = false,\n        [47] = true,\n        [48] = false,\n        [49] = false,\n\
    \        [50] = false,\n        [51] = false,\n        [52] = false,\n       \
    \ [53] = true,\n        [54] = false,\n        [55] = false,\n        [56] = false,\n\
    \        [57] = false,\n        [58] = false,\n        [59] = true,\n        [60]\
    \ = false,\n        [61] = true,\n        [62] = false,\n        [63] = false",
  "  local words = {}\n  for w in sentence:gmatch(\"%S+\") do\n    words[#words +\
    \ 1] = w\n  end\n  local prime_words = {}\n  for _, w in ipairs(words) do\n  \
    \  if is_prime(#w) then\n      prime_words[#prime_words + 1] = w\n    end\n  end\n\
    \  return table.concat(prime_words, \" \")\nend", "  local result = {}\n  for\
    \ word in sentence:gmatch(\"%S+\") do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, \" \")\nend", "    -- your\
    \ code here\n    local t = string.split(sentence,\" \")\n    local l = {}\n  \
    \  for i,v in ipairs(t) do\n        if is_prime(string.len(v)) then\n        \
    \    table.insert(l,v)\n        end\n    end\n    return table.concat(l,\" \"\
    )\nend", "    -- check all words in sentence if they are primes\n    local prime_map\
    \ = {}\n    for word in sentence:gmatch(\"[^%s]+\") do\n        if is_prime(#word)\
    \ then\n            table.insert(prime_map, word)\n        end\n    end\n    --\
    \ return the sentence after removing the prime words\n    return table.concat(prime_map,\
    \ \" \")\nend", "    local words = {}\n    local is_prime = {}\n    local n =\
    \ 0\n    for word in sentence:gmatch(\"%w+\") do\n        n = n + 1\n        words[n]\
    \ = word\n        local l = #word\n        if not is_prime[l] then\n         \
    \   is_prime[l] = l\n            for k = 2, l//2 do\n                if l % k\
    \ == 0 then\n                    is_prime[l] = nil\n                    break\n\
    \                end\n            end\n        end\n    end\n    local res = {}\n\
    \    for i = 1, n do\n        if is_prime[#words[i]] then\n            res[#res\
    \ + 1] = words[i]\n        end\n    end\n    return table.concat(res, \" \")\n\
    end", "    if #sentence > 100 then\n        return \"input string length over\
    \ 100, the length of input string is \" .. #sentence\n    end\n    if not string.match(sentence,\
    \ \"^%a+$\") then\n        return \"input string contains symbols other than letters\"\
    \n    end\n    local words = sentence:split(\" \")\n    local is_prime = function(num)\n\
    \        if num < 2 then\n            return false\n        end\n        for i\
    \ = 2, num-1 do\n            if num % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local res = {}\n\
    \    for _, word in ipairs(words) do\n        if is_prime(#word) then\n      \
    \      table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend", "  local is_prime = function(n)\n    if n < 2 then\n      return\
    \ false\n    end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n \
    \       return false\n      end\n    end\n    return true\n  end\n  local is_prime_set\
    \ = {}\n  for i = 2, #sentence do\n    is_prime_set[i] = is_prime(i)\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch(\"%w+\") do\n    if is_prime_set[#word]\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ \" \")\nend", "  local function is_prime(n)\n    if n < 2 then\n      return\
    \ false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ local res = {}\n  for w in sentence:gmatch(\"%w+\") do\n    if is_prime(#w)\
    \ then\n      table.insert(res, w)\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend", "    -- Your code here.\nend", "    local words = {}\n    local\
    \ is_prime = {}\n    local res = {}\n    local arr = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        words[#words + 1] = word\n        local l = #word\n       \
    \ arr[l] = arr[l] or l\n        if not is_prime[l] then\n            local is_p\
    \ = true\n            for i = 2, math.sqrt(l) do\n                if l % i ==\
    \ 0 then\n                    is_p = false\n                    break\n      \
    \          end\n            end\n            is_prime[l] = is_p\n        end\n\
    \    end\n    table.sort(arr)\n    for _, l in ipairs(arr) do\n        if is_prime[l]\
    \ then\n            for _, word in ipairs(words) do\n                if #word\
    \ == l then\n                    res[#res + 1] = word\n                end\n \
    \           end\n        end\n    end\n    return table.concat(res, \" \")\nend",
  "    local words = split(sentence, ' ')\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local function is_prime(n)\n        if n <= 1 then\n            return false\n\
    \        end\n        for i = 2, math.floor(math.sqrt(n)) do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local words = {}\n    for w in sentence:gmatch(\"\
    %w+\") do\n        if is_prime(#w) then\n            table.insert(words, w)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend", "  local function\
    \ is_prime(n)\n    return n >= 2 and n - 1 == math.ldexp(n, -1)\n  end\n  local\
    \ words = {}\n  for w in sentence:gmatch(\"%S+\") do\n    if is_prime(#w) then\n\
    \      table.insert(words, w)\n    end\n  end\n  return table.concat(words, \"\
    \ \")\nend", "    local len = #sentence\n    local ret = {}\n    local words =\
    \ string.split(sentence, \" \")\n    for i = 1, len do\n        if is_prime(#words[i])\
    \ then\n            table.insert(ret, words[i])\n        end\n    end\n    return\
    \ table.concat(ret, \" \")\nend", "    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for word in sentence:gmatch(\"%S+\") do\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend", "  -- Get the words from the sentence\n  local words = {}\n  for\
    \ w in sentence:gmatch(\"%w+\") do\n    table.insert(words, w)\n  end", "  return\
    \ sentence:gsub(\"%S+\", function(w)\n    if w:len() > 1 and w:len() % 2 ~= 0\
    \ then\n      return w\n    end\n  end)\nend", "    local words = {}\n    for\
    \ i = 1, #sentence do\n        local char = sentence:sub(i, i)\n        if char\
    \ == ' ' then\n            table.insert(words, '')\n        else\n           \
    \ words[#words] = words[#words] .. char\n        end\n    end\n    local words_with_prime_length\
    \ = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word) then\n\
    \            table.insert(words_with_prime_length, word)\n        end\n    end\n\
    \    return table.concat(words_with_prime_length, ' ')\nend", "  return sentence:gsub('%w+',\
    \ function(w)\n    if w:len() % 2 == 1 and w:len() ~= 1 then\n      return w\n\
    \    end\n  end)\nend", "    if #sentence == 0 then\n        return \"\"\n   \
    \ end\n    if #sentence == 1 then\n        return sentence\n    end\n    local\
    \ sentence_words = split(sentence, \" \")\n    local t = {}\n    for i = 1, #sentence_words\
    \ do\n        if is_prime(#sentence_words[i]) then\n            t[#t + 1] = sentence_words[i]\n\
    \        end\n    end\n    if #t == 0 then\n        return \"\"\n    end\n   \
    \ return table.concat(t, \" \")\nend", "  local is_prime = function(n)\n    local\
    \ function is_prime(n, d)\n      if n < 2 then\n        return false\n      elseif\
    \ n == 2 then\n        return true\n      elseif n % d == 0 then\n        return\
    \ false\n      elseif d * d > n then\n        return true\n      else\n      \
    \  return is_prime(n, d + 1)\n      end\n    end\n    return is_prime(n, 2)\n\
    \  end", "    local primes = {}\n    for i = 2, 100 do\n        if is_prime(i)\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local words\
    \ = {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1]\
    \ = word\n    end\n    local result = {}\n    for _, prime in ipairs(primes) do\n\
    \        for _, word in ipairs(words) do\n            if #word == prime then\n\
    \                result[#result + 1] = word\n            end\n        end\n  \
    \  end\n    return table.concat(result, \" \")\nend", "\tlocal function is_prime(x)\n\
    \t\tif x < 2 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, math.sqrt(x) do\n\
    \t\t\tif x % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn\
    \ true\n\tend\n\tlocal words = {}\n\tfor w in sentence:gmatch(\"%S+\") do\n\t\t\
    if is_prime(#w) then\n\t\t\ttable.insert(words, w)\n\t\tend\n\tend\n\treturn table.concat(words,\
    \ \" \")\nend", "  local result = {}\n  for _, word in ipairs(string.split(sentence,\
    \ ' ')) do\n    if is_prime(#word) then\n      table.insert(result, word)\n  \
    \  end\n  end\n  return table.concat(result, ' ')\nend", "  local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch(\"%w+\")\
    \ do\n    if table.contains(primes, #word) then\n      table.insert(words, word)\n\
    \    end\n  end\n  return table.concat(words, \" \")\nend", "    local tbl = {}\n\
    \    local t = {}\n    local res = \"\"\n    tbl = split(sentence)\n    for i,v\
    \ in ipairs(tbl) do\n        if is_prime(v:len()) then\n            table.insert(t,v)\n\
    \        end\n    end\n    for _,s in ipairs(t) do\n        res = res .. \" \"\
    \ .. s\n    end\n    return res:sub(2,-1)\nend", "  if not sentence or #sentence\
    \ == 0 then\n    return sentence\n  end\n  local res = {}\n  for _, word in ipairs(string.split(sentence,\
    \ ' ')) do\n    if is_prime(#word) then\n      table.insert(res, word)\n    end\n\
    \  end\n  return table.concat(res, ' ')\nend", "\tlocal prime_words = {}\n\tfor\
    \ _, word in ipairs(sentence:split(' ')) do\n\t\tif word:is_prime() then\n\t\t\
    \ttable.insert(prime_words, word)\n\t\tend\n\tend\n\treturn table.concat(prime_words,\
    \ ' ')\nend", "    -- TODO: implement your solution here\n    -- DONE\n    return\
    \ \"clojure\"\nend", "    local function is_prime(num)\n        if num <= 1 then\n\
    \            return false\n        end\n        for i = 2, num - 1 do\n      \
    \      if num % i == 0 then\n                return false\n            end\n \
    \       end\n        return true\n    end", "  -- your code here\nend", "    local\
    \ words = {}\n    for w in sentence:gmatch(\"%S+\") do\n        table.insert(words,\
    \ w)\n    end\n    local is_prime = function(n)\n        local n = tonumber(n)\n\
    \        if n <= 1 then\n            return false\n        end\n        for i\
    \ = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local prime_words\
    \ = {}\n    for _, w in ipairs(words) do\n        if is_prime(#w) then\n     \
    \       table.insert(prime_words, w)\n        end\n    end\n    return table.concat(prime_words,\
    \ \" \")\nend", "    -- Returns a string containing the words from sentence whose\
    \ lengths are prime numbers.\n    -- >>> words_in_sentence(\"There are some prime\
    \ words hidden in this sentence\")\n    -- \"There prime words in sentence\"\n\
    \    -- >>> words_in_sentence(\"Hello my name is Adam\")\n    -- \"my is\"\n \
    \   -- >>> words_in_sentence(\"Hello\")\n    -- \"Hello\"\n    -- >>> words_in_sentence(\"\
    a a a\")\n    -- \"a a a\"\n    -- >>> words_in_sentence(\"\")\n    -- \"\"\n\
    \    -- >>> words_in_sentence(\"The quick brown fox jumps over the lazy dog\"\
    )\n    -- \"The quick fox the dog\"\n    -- >>> words_in_sentence(\"a ab abc abcd\
    \ abcde abcdef abcdefg abcdefgh abcdefghi abcdefghij\")\n    -- \"a ab abc abcd\
    \ abcde abcdef abcdefg abcdefgh abcdefghi abcdefghij\"\n    -- >>> words_in_sentence(\"\
    a ab abc abcd abcde abcdef abcdefg abcdefgh abcdefghi abcdefghij abcdefghijk\"\
    )\n    -- \"a ab abc abcd abcde abcdef abcdefg abcdefgh abcdefghi abcdefghij\"\
    \n    -- >>> words_in_sentence(\"ab\")\n    -- \"ab\"\n    -- >>> words_in_sentence(\"\
    abc\")\n    -- \"abc\"\n    -- >>> words_in_sentence(\"abcd\")\n    -- \"abcd\"\
    \n    -- >>> words_in_sentence(\"abcde\")\n    -- \"abcde\"\n    -- >>> words_in_sentence(\"\
    abcdef\")\n    -- \"abcdef\"\n    -- >>> words_in_sentence(\"abcdefg\")\n    --\
    \ \"abcdefg\"\n    -- >>> words_in_sentence(\"abcdefgh\")\n    -- \"abcdefgh\"\
    \n    -- >>> words_in_sentence(\"abcdefghi\")\n    -- \"abcdefghi\"\n    -- >>>\
    \ words_in_sentence(\"abcdefghij\")\n    -- \"", "    local words = {}\n    for\
    \ i, word in ipairs(string.split(sentence, ' ')) do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    local words = {}\n    local count = 0\n\
    \    for word in sentence:gmatch(\"[%a]+\") do\n        words[#words + 1] = word\n\
    \        count = count + 1\n    end\n    local res = {}\n    for i = 1, count\
    \ do\n        local prime = true\n        local w = words[i]\n        for j =\
    \ 2, #w - 1 do\n            if w:sub(j, j) == \"1\" or w:sub(j, j) == \"0\" then\n\
    \                prime = false\n                break\n            end\n     \
    \       if (w:sub(j, j) == \"2\" or w:sub(j, j) == \"3\" or w:sub(j, j) == \"\
    5\" or w:sub(j, j) == \"7\") and w:sub(j, j) == w:sub(#w, #w) then\n         \
    \       prime = true\n                break\n            end\n            if w:sub(j,\
    \ j) == w:sub(#w, #w) and w:sub(j, j) ~= \"2\" and w:sub(j, j) ~= \"3\" and w:sub(j,\
    \ j) ~= \"5\" and w:sub(j, j) ~= \"7\" then\n                prime = false\n \
    \               break\n            end\n            if w:sub(j, j) ~= \"2\" and\
    \ w:sub(j, j) ~= \"3\" and w:sub(j, j) ~= \"5\" and w:sub(j, j) ~= \"7\" and w:sub(j,\
    \ j) ~= w:sub(#w, #w) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            res[#res + 1]\
    \ = w\n        end\n    end\n    return table.concat(res, \" \")\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    local result = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend", "    local\
    \ res = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend", "    local words = {}\n    for w in sentence:gmatch('%S+')\
    \ do\n        table.insert(words, w)\n    end\n    local prime_word_count = 0\n\
    \    for i = 1, #words do\n        if is_prime(#words[i]) then\n            prime_word_count\
    \ = prime_word_count + 1\n        end\n    end\n    local prime_words = {}\n \
    \   for i = 1, #words do\n        if is_prime(#words[i]) then\n            table.insert(prime_words,\
    \ words[i])\n        end\n    end\n    return table.concat(prime_words, ' ')\n\
    end", "    local function is_prime(num)\n        if num <= 1 then\n          \
    \  return false\n        end\n        if num == 2 then\n            return true\n\
    \        end\n        for i = 2, math.sqrt(num) do\n            if num % i ==\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return true\n    end\n    local words = {}\n    for word in sentence:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    local result = {}\n\
    \    for _, word in ipairs(words) do\n        if is_prime(#word) then\n      \
    \      table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    return table.concat(util.filter(\n        util.words(sentence),\n\
    \        function(w)\n            return is_prime(#w)\n        end\n    ), ' ')\n\
    end", "    local words = {}\n    local l = 0\n    for word in sentence:gmatch('%S+')\
    \ do\n        l = l + 1\n        words[l] = word\n    end\n    for i = 1, l do\n\
    \        for j = 2, math.floor(math.sqrt(#words[i])) do\n            if #words[i]\
    \ % j == 0 then\n                words[i] = nil\n                break\n     \
    \       end\n        end\n    end\n    local res = {}\n    for i = 1, l do\n \
    \       if words[i] then\n            res[#res + 1] = words[i]\n        end\n\
    \    end\n    return table.concat(res, ' ')\nend", "    local words = {}\n   \
    \ for word in sentence:gmatch('[^%s]+') do\n        table.insert(words, word)\n\
    \    end\n    local prime_words = {}\n    for _, word in ipairs(words) do\n  \
    \      if is_prime(#word) then\n            table.insert(prime_words, word)\n\
    \        end\n    end\n    return table.concat(prime_words, ' ')\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result =\
    \ {}\n    for i, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n            end\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    -- is_prime_number :: Int -> Bool\n    local function is_prime_number(n)\n\
    \        -- is_prime_divisor :: Int -> Int -> Bool\n        local function is_prime_divisor(n,\
    \ m)\n            return n == m or n % m == 0\n        end", "  local words =\
    \ {}\n  for word in sentence:gmatch('%w+') do\n    table.insert(words, word)\n\
    \  end\n  local function is_prime(n)\n    for i = 2, math.sqrt(n) do\n      if\
    \ n % i == 0 then\n        return false\n      end\n    end\n    return true\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend", "  -- Your code here!\nend", "    local words = {}\n    local prime_words\
    \ = {}\n    local it = string.gmatch(sentence, \"%w+\")\n    for w in it do\n\
    \        local len = string.len(w)\n        if is_prime(len) then\n          \
    \  table.insert(prime_words, w)\n        end\n    end\n    return table.concat(prime_words,\
    \ \" \")\nend", "\tlocal result = {}\n\tfor w in sentence:gmatch('%w+') do\n\t\
    \tif is_prime(#w) then\n\t\t\ttable.insert(result, w)\n\t\tend\n\tend\n\treturn\
    \ table.concat(result, ' ')\nend", "    local function is_prime(num)\n       \
    \ for i = 2, num - 1 do\n            if num % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end", "    local\
    \ primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    local primes_set = {}\n    for i = 1, #primes\
    \ do\n        primes_set[primes[i]] = true\n    end\n    local words = {}\n  \
    \  for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    local result = {}\n    for i = 1, #words do\n        if primes_set[#words[i]]\
    \ then\n            table.insert(result, words[i])\n        end\n    end\n   \
    \ return table.concat(result, \" \")\nend", "  local is_prime = {}\n  for i =\
    \ 2, #sentence do\n    is_prime[i] = true\n  end\n  for i = 2, #sentence do\n\
    \    for j = 2 * i, #sentence, i do\n      is_prime[j] = false\n    end\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime[#word] then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend", "  local words = {}\n  local primes = {}\n\
    \  local current_prime = 2\n  while #words < #sentence do\n    if is_prime(current_prime)\
    \ then\n      primes[#primes + 1] = current_prime\n    end\n    current_prime\
    \ = current_prime + 1\n  end\n  -- Let's fill the words table\n  local current_prime_index\
    \ = 1\n  for word in sentence:gmatch(\"%w+\") do\n    -- The length of the current\
    \ word\n    local length = #word\n    -- If the length is a prime, add it to the\
    \ words table\n    if length == primes[current_prime_index] then\n      words[#words\
    \ + 1] = word\n      current_prime_index = current_prime_index + 1\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend", "    -- function to check if\
    \ a given number is prime\n    local function is_prime(n)\n        if n <= 1 then\n\
    \            return false\n        end\n        if n <= 3 then\n            return\
    \ true\n        end\n        if n % 2 == 0 or n % 3 == 0 then\n            return\
    \ false\n        end\n        local i = 5\n        while i * i <= n do\n     \
    \       if n % i == 0 or n % (i + 2) == 0 then\n                return false\n\
    \            end\n            i = i + 6\n        end\n        return true\n  \
    \  end", "  local words = {}\n  for word in sentence:gmatch('%w+') do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, ' ')\nend", "    local result = {}\n    for word in sentence:gmatch(\"\
    [^%s]+\") do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, \" \")\nend", "\t\
    local length, words = #sentence, {}\n\tlocal last, s, n = 0, string.sub(sentence,\
    \ 1, 1), 1\n\tfor i = 2, length do\n\t\tif string.sub(sentence, i, i) == ' ' then\n\
    \t\t\tif is_prime(n) then\n\t\t\t\ttable.insert(words, string.sub(sentence, last\
    \ + 1, i - 1))\n\t\t\tend\n\t\t\tlast, n = i, 1\n\t\telse\n\t\t\tn = n + 1\n\t\
    \tend\n\tend\n\tif is_prime(n) then\n\t\ttable.insert(words, string.sub(sentence,\
    \ last + 1, length))\n\tend\n\treturn table.concat(words, ' ')\nend", "  if sentence\
    \ == \"\" then\n    return \"\"\n  end\n  local arr = {}\n  for word in sentence:gmatch(\"\
    %S+\") do\n    table.insert(arr, word)\n  end\n  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ local new_arr = {}\n  for i = 1, #arr do\n    if is_prime(arr[i]:len()) then\n\
    \      table.insert(new_arr, arr[i])\n    end\n  end\n  return table.concat(new_arr,\
    \ \" \")\nend", "    local primes = {}\n    for i = 2, #sentence, 1 do\n     \
    \   if sentence:sub(i, i) == ' ' then\n            primes[#primes + 1] = i - 1\n\
    \        end\n    end\n    for i = #primes, 1, -1 do\n        local prime = true\n\
    \        for j = 2, math.sqrt(primes[i]), 1 do\n            if primes[i] % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if not prime then\n            table.remove(primes, i)\n\
    \        end\n    end\n    local result = ''\n    for i = 1, #primes, 1 do\n \
    \       result = result .. sentence:sub(1, primes[i]) .. ' '\n        sentence\
    \ = sentence:sub(primes[i] + 2)\n    end\n    return result\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(primes, word)\n   \
    \     end\n    end\n    return table.concat(primes, ' ')\nend", "    local primes\
    \ = {}\n    for n = 2, 100 do\n        local is_prime = true\n        for k =\
    \ 2, n - 1 do\n            if n % k == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            primes[#primes + 1] = n\n        end\n    end", "    local function\
    \ words()\n        local function prime(n)\n            for i = 2, math.sqrt(n)\
    \ do\n                if n % i == 0 then\n                    return false\n \
    \               end\n            end\n            return true\n        end\n \
    \       local function primes()\n            local n = 2\n            return function()\n\
    \                while true do\n                    if prime(n) then\n       \
    \                 n = n + 1\n                        return n - 1\n          \
    \          end\n                    n = n + 1\n                end\n         \
    \   end\n        end\n        local function gen()\n            local n = 1\n\
    \            local iter = primes()\n            return function()\n          \
    \      n = iter()\n                return n\n            end\n        end\n  \
    \      local prime_words = {}\n        for word in sentence:gmatch(\"%S+\") do\n\
    \            if #word == gen() then\n                table.insert(prime_words,\
    \ word)\n            end\n        end\n        return prime_words\n    end\n \
    \   return table.concat(words(), \" \")\nend", "    local function is_prime(n)\n\
    \        for i = 2, n - 1 do\n            if n % i == 0 then\n               \
    \ return false\n            end\n        end\n        return true\n    end", " \
    \   local words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local primes = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(primes, word)\n   \
    \     end\n    end\n    return table.concat(primes, ' ')\nend\nassert.same('the',\
    \ words_in_sentence('the'))\nassert.same('the', words_in_sentence('the word'))\n\
    assert.same('the is', words_in_sentence('the word is'))\nassert.same('is the',\
    \ words_in_sentence('word is the'))\nassert.same('to', words_in_sentence('try\
    \ to execute this kata'))\nassert.same('to', words_in_sentence('this is another\
    \ kata to execute'))\nassert.same('to kata', words_in_sentence('this is another\
    \ kata to execute'))\nassert.same('to execute', words_in_sentence('try to execute\
    \ this kata'))", "  local words = {}\n  local index = 1\n  for word in sentence:gmatch(\"\
    %w+\") do\n    local length = word:len()\n    local is_prime = true\n    for i\
    \ = 2, math.floor(math.sqrt(length)) do\n      if length % i == 0 then\n     \
    \   is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      words[index] = word\n      index = index + 1\n    end\n  end\n  return\
    \ table.concat(words, \" \")\nend", "  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local\
    \ words = {}\n  for w in sentence:gmatch(\"%w+\") do\n    words[#words + 1] =\
    \ w\n  end\n  local res = {}\n  for _, word in ipairs(words) do\n    if table.find(primes,\
    \ #word) then\n      res[#res + 1] = word\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend", "  local count = {}\n  for _, v in pairs(sentence:gmatch(\"%w+\"\
    )) do\n    count[v] = (count[v] or 0) + 1\n  end\n  local is_prime = {}\n  for\
    \ p = 2, #count do\n    is_prime[p] = true\n    for i = 2, p - 1 do\n      if\
    \ p % i == 0 then\n        is_prime[p] = false\n        break\n      end\n   \
    \ end\n  end\n  local result = {}\n  for k, v in pairs(count) do\n    if is_prime[v]\
    \ then\n      result[#result + 1] = k\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  local is_prime = function(number)\n    for i = 2, number -\
    \ 1 do\n      if number % i == 0 then\n        return false\n      end\n    end\n\
    \    return true\n  end", "    -- Your code here\nend", "  return table.concat(table.filter(\n\
    \    words_in_string(sentence),\n    is_prime),\n    \" \")\nend", "    local\
    \ words = {}\n    local longest = 0\n    local result = \"\"\n    local is_prime\
    \ = {[2] = true}\n    local primes = {2}\n    local is_already_checked = {}\n\
    \    local function is_prime_number(n)\n        if is_prime[n] then\n        \
    \    return true\n        end\n        if is_already_checked[n] then\n       \
    \     return false\n        end\n        is_already_checked[n] = true\n      \
    \  for _,p in ipairs(primes) do\n            if n % p == 0 then\n            \
    \    return false\n            end\n        end\n        for i = primes[#primes]\
    \ + 1, n do\n            if i == n then\n                is_prime[i] = true\n\
    \                primes[#primes + 1] = i\n                return true\n      \
    \      end\n            for _,p in ipairs(primes) do\n                if i % p\
    \ == 0 then\n                    break\n                end\n            end\n\
    \        end\n        return false\n    end\n    for w in sentence:gmatch(\"[%w']+\"\
    ) do\n        local l = #w\n        words[l] = words[l] or {}\n        words[l][#words[l]\
    \ + 1] = w\n        if longest < l then\n            longest = l\n        end\n\
    \    end\n    for i = longest, 1, -1 do\n        if is_prime_number(i) then\n\
    \            for _,w in ipairs(words[i] or {}) do\n                result = result\
    \ .. w .. \" \"\n            end\n        end\n    end\n    return result:sub(1,\
    \ -2)\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local words = {}\n\
    \    for word in sentence:gmatch(\"%S+\") do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                table.insert(words,\
    \ word)\n            end\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend", "  return sentence:gsub(\"%w+\", function(x)\n    if is_prime(#x)\
    \ then\n      return x\n    end\n  end)\nend", "  local words = {}\n  for word\
    \ in sentence:gmatch(\"%w+\") do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend", "    local\
    \ answer = {}\n    for word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word)\
    \ then\n            table.insert(answer, word)\n        end\n    end\n    return\
    \ table.concat(answer, \" \")\nend", "  local function split(str, sep)\n    local\
    \ sep, fields = sep or \" \", {}\n    local pattern = string.format(\"([^%s]+)\"\
    , sep)\n    str:gsub(pattern, function(c) fields[#fields+1] = c end)\n    return\
    \ fields\n  end", "    local words = {}\n    local primes = {2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \    local prime_seen = {}\n    for w in sentence:gmatch(\"%w+\") do\n       \
    \ local len = #w\n        if not prime_seen[len] then\n            prime_seen[len]\
    \ = true\n            local found = false\n            for _, v in ipairs(primes)\
    \ do\n                if v == len then\n                    found = true\n   \
    \                 break\n                end\n            end\n            if\
    \ found then\n                table.insert(words, w)\n            end\n      \
    \  end\n    end\n    return table.concat(words, \" \")\nend", "    local words\
    \ = {}\n    local positions = {}\n    local prime_words = {}\n    local prime_positions\
    \ = {}\n    local i = 1\n    for word in sentence:gmatch(\"%w+\") do\n       \
    \ table.insert(words, word)\n        table.insert(positions, i)\n        i = i\
    \ + 1\n    end\n    local function is_prime(number)\n        if number == 1 then\n\
    \            return false\n        end\n        if number == 2 then\n        \
    \    return true\n        end\n        if number % 2 == 0 then\n            return\
    \ false\n        end\n        for i = 3, math.sqrt(number), 2 do\n           \
    \ if number % i == 0 then\n                return false\n            end\n   \
    \     end\n        return true\n    end\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(prime_words, word)\n\
    \            table.insert(prime_positions, table.remove(positions, 1))\n     \
    \   else\n            table.remove(positions, 1)\n        end\n    end\n    local\
    \ result = {}\n    for _, position in ipairs(prime_positions) do\n        result[position]\
    \ = table.remove(prime_words, 1)\n    end\n    return table.concat(result, \"\
    \ \")\nend", "  local words = string.split(sentence, \" \")\n  local primes =\
    \ {}\n  for _, word in ipairs(words) do\n    if is_prime(string.len(word)) then\n\
    \      table.insert(primes, word)\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend", "  local prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local words = {}\n  for\
    \ w in sentence:gmatch(\"%w+\") do\n    if prime[#w] then\n      words[#words\
    \ + 1] = w\n    end\n  end\n  return table.concat(words, \" \")\nend", "  local\
    \ function is_prime(n)\n    for i = 2, n - 1 do\n      if n % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end", "    local words\
    \ = {}\n    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1]\
    \ = word\n    end\n    local function is_prime(n)\n        if n == 1 then\n  \
    \          return false\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local primes = {}\n  \
    \  for _, word in ipairs(words) do\n        if is_prime(#word) then\n        \
    \    primes[#primes + 1] = word\n        end\n    end\n    return table.concat(primes,\
    \ \" \")\nend", "   local words = {}\n   for word in sentence:gmatch(\"%w+\")\
    \ do\n      table.insert(words, word)\n   end\n   local function is_prime(n)\n\
    \      for i = 2, math.floor(math.sqrt(n)) do\n         if n % i == 0 then\n \
    \           return false\n         end\n      end\n      return true\n   end\n\
    \   local function length_is_prime(word)\n      return is_prime(#word)\n   end\n\
    \   local new_words = {}\n   for _, word in ipairs(words) do\n      if length_is_prime(word)\
    \ then\n         table.insert(new_words, word)\n      end\n   end\n   return table.concat(new_words,\
    \ \" \")\nend", "  local t = {}\n  for w in sentence:gmatch(\"%w+\") do\n    if\
    \ t[#t] == w then\n      t[#t] = w .. \" \" .. w\n    else\n      t[#t + 1] =\
    \ w\n    end\n  end\n  return table.concat(t, \" \")\nend", "    local res = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word) then\n\
    \            table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend", "  local words = {}\n  for word in sentence:gmatch('%w+') do\n\
    \    table.insert(words, word)\n  end\n  local is_prime = {}\n  for i = 2, math.huge\
    \ do\n    local prime = true\n    for j = 2, math.sqrt(i) do\n      if i % j ==\
    \ 0 then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ then\n      is_prime[i] = true\n    end\n  end\n  local res = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime[#word] then\n      table.insert(res, word)\n\
    \    end\n  end\n  return table.concat(res, ' ')\nend", "  -- your code here\n\
    \  --\n  -- return the result as string\n  local s = {}\n  for w in sentence:gmatch(\"\
    %w+\") do\n    local l = w:len()\n    for i = 2, l-1 do\n      if l % i == 0 then\
    \ l = 0 break end\n    end\n    if l > 0 then s[#s+1] = w end\n  end\n  return\
    \ table.concat(s, \" \")\nend", "  -- get all words\n  local words = {}\n  for\
    \ w in sentence:gmatch('%w+') do table.insert(words, w) end\n  -- build list of\
    \ primes\n  local primes = {}\n  for i = 1, #words do\n    if is_prime(#words[i])\
    \ then table.insert(primes, words[i]) end\n  end\n  -- return concatenated words\n\
    \  return table.concat(primes, ' ')\nend", '    -- Your code goes here', "  --\
    \ fill here\nend", "  local sentence = sentence:lower()\n  local words = {}\n\
    \  local word = \"\"\n  for c in sentence:gmatch(\".\") do\n    if c == \" \"\
    \ then\n      table.insert(words, word)\n      word = \"\"\n    else\n      word\
    \ = word .. c\n    end\n  end\n  table.insert(words, word)\n  word = \"\"\n  local\
    \ function is_prime(n)\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n\
    \ % i == 0 then\n        return false\n      end\n    end\n    return true\n \
    \ end\n  local result = {}\n  for i = 1, #words do\n    if is_prime(#words[i])\
    \ then\n      table.insert(result, words[i])\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "    -- For each word in the sentence, check if its length is\
    \ prime\n    -- and if so, store it in a table\n    local words = {}\n    for\
    \ word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word) then\n     \
    \       table.insert(words, word)\n        end\n    end", "  -- split the sentence\
    \ by space and store it in a table\n  local sentence_table = {}\n  for word in\
    \ sentence:gmatch(\"%w+\") do\n    table.insert(sentence_table, word)\n  end\n\
    \  -- iterate the sentence_table, delete the words which length is not prime,\n\
    \  -- and then concatenate the sentence with space\n  local sentence_prime = \"\
    \"\n  for _,v in ipairs(sentence_table) do\n    local word_len = v:len()\n   \
    \ if word_len == 1 or word_len == 2 then\n      sentence_prime = sentence_prime\
    \ .. v .. \" \"\n    else\n      for i = 2, word_len - 1 do\n        if word_len\
    \ % i == 0 then\n          goto CONTINUE\n        end\n      end\n      sentence_prime\
    \ = sentence_prime .. v .. \" \"\n    end\n    ::CONTINUE::\n  end\n  return sentence_prime:sub(1,\
    \ sentence_prime:len() - 1)\nend", "    -- TODO\nend", "\tlocal primes = {2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97}\n\tlocal words = {}\n\tfor w in sentence:gmatch(\"%w+\") do\n\t\t\
    if table.contains(primes, #w) then\n\t\t\ttable.insert(words, w)\n\t\tend\n\t\
    end\n\treturn table.concat(words, \" \")\nend", "    -- your code here\n    --[[\n\
    \    local primes = {[2] = true, [3] = true, [5] = true, [7] = true, [11] = true,\
    \ [13] = true, [17] = true, [19] = true, [23] = true, [29] = true, [31] = true,\
    \ [37] = true, [41] = true, [43] = true, [47] = true, [53] = true, [59] = true,\
    \ [61] = true, [67] = true, [71] = true, [73] = true, [79] = true, [83] = true,\
    \ [89] = true, [97] = true}\n    local words = {}\n    local currentWord = {}\n\
    \    for i = 1, string.len(sentence) do\n        if string.sub(sentence, i, i)\
    \ == \" \" then\n            if primes[#currentWord] then\n                table.insert(words,\
    \ table.concat(currentWord))\n            end\n            currentWord = {}\n\
    \        else\n            table.insert(currentWord, string.sub(sentence, i, i))\n\
    \        end\n    end\n    if primes[#currentWord] then\n        table.insert(words,\
    \ table.concat(currentWord))\n    end\n    return table.concat(words, \" \")\n\
    \    --]]\n    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local words = {}\n    local\
    \ currentWord = {}\n    for i = 1, string.len(sentence) do\n        if string.sub(sentence,\
    \ i, i) == \" \" then\n            if table.indexOf(primes, #currentWord) then\n\
    \                table.insert(words, table.concat(currentWord))\n            end\n\
    \            currentWord = {}\n        else\n            table.insert(currentWord,\
    \ string.sub(sentence, i, i))\n        end\n    end\n    if table.indexOf(primes,\
    \ #currentWord", "    local primes = {\n        [2] = true,\n        [3] = true,\n\
    \        [5] = true,\n        [7] = true,\n        [11] = true,\n        [13]\
    \ = true,\n        [17] = true,\n        [19] = true,\n        [23] = true,\n\
    \        [29] = true,\n        [31] = true,\n        [37] = true,\n        [41]\
    \ = true,\n        [43] = true,\n        [47] = true,\n        [53] = true,\n\
    \        [59] = true,\n        [61] = true,\n        [67] = true,\n        [71]\
    \ = true,\n        [73] = true,\n        [79] = true,\n        [83] = true,\n\
    \        [89] = true,\n        [97] = true,\n    }\n    local parts = {}\n   \
    \ for word in sentence:gmatch(\"%w+\") do\n        if primes[#word] then\n   \
    \         table.insert(parts, word)\n        end\n    end\n    return table.concat(parts,\
    \ \" \")\nend", "    local function is_prime(x)\n        if x == 2 then\n    \
    \        return true\n        end\n        for i = 2, math.floor(math.sqrt(x))\
    \ do\n            if x % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local res = {}\n    for\
    \ _, word in ipairs(utils.split(sentence, ' ')) do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend", "  local words = {}\n  for word in sentence:gmatch(\"\
    %S+\") do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, \" \")\nend", "    local words = {}\n   \
    \ for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, \" \")\nend", "    local result = {}\n\
    \    local words = {}\n    local current_word = \"\"\n    for i = 1, #sentence\
    \ do\n        local char = sentence:sub(i, i)\n        if char == \" \" then\n\
    \            if #current_word ~= 0 then\n                words[#words + 1] = current_word\n\
    \                current_word = \"\"\n            end\n        else\n        \
    \    current_word = current_word .. char\n        end\n    end\n    if #current_word\
    \ ~= 0 then\n        words[#words + 1] = current_word\n    end\n    local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local is_prime = false\n        for j = 1, #primes do\n            if\
    \ #word == primes[j] then\n                is_prime = true\n                break\n\
    \            end\n        end\n        if is_prime then\n            result[#result\
    \ + 1] = word\n        end\n    end\n    return table.concat(result, \" \")\n\
    end", "    local primes = {\n        [2] = true,\n        [3] = true,\n      \
    \  [5] = true,\n        [7] = true,\n        [11] = true,\n        [13] = true,\n\
    \        [17] = true,\n        [19] = true,\n        [23] = true,\n        [29]\
    \ = true,\n        [31] = true,\n        [37] = true,\n        [41] = true,\n\
    \        [43] = true,\n        [47] = true,\n        [53] = true,\n        [59]\
    \ = true,\n        [61] = true,\n        [67] = true,\n        [71] = true,\n\
    \        [73] = true,\n        [79] = true,\n        [83] = true,\n        [89]\
    \ = true,\n        [97] = true,\n    }\n    local words = {}\n    for word in\
    \ sentence:gmatch(\"%S+\") do\n        local w = word:lower()\n        local l\
    \ = #w\n        if primes[l] then\n            table.insert(words, word)\n   \
    \     end\n    end\n    return table.concat(words, \" \")\nend", "  -- your code\
    \ here\nend", "    local words = {}\n    for word in sentence:gmatch(\"%w+\")\
    \ do\n        table.insert(words, word)\n    end\n    local primes = {}\n    for\
    \ i = 2, math.floor(math.sqrt(#words)) do\n        local is_prime = true\n   \
    \     for j = 2, math.floor(math.sqrt(i)) do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    local new_words = {}\n    for _, prime in ipairs(primes)\
    \ do\n        table.insert(new_words, words[prime])\n    end\n    return table.concat(new_words,\
    \ \" \")\nend", "    local result = {}\n    for word in sentence:gmatch(\"%w+\"\
    ) do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend", "    -- TODO:\
    \ Implement it\nend", "  -- your code here\n  -- primes :: [Integer]\n  local\
    \ primes = {}\n  -- is_prime :: Integer -> Bool\n  local function is_prime(n)\n\
    \    if n <= 1 then\n      return false\n    elseif n <= 3 then\n      return\
    \ true\n    elseif n % 2 == 0 or n % 3 == 0 then\n      return false\n    else\n\
    \      local i = 5\n      while i * i <= n do\n        if n % i == 0 or n % (i\
    \ + 2) == 0 then\n          return false\n        end\n        i = i + 6\n   \
    \   end\n      return true\n    end\n  end\n  for i = 1, #sentence do\n    if\
    \ is_prime(i) then\n      table.insert(primes, i)\n    end\n  end\n  local res\
    \ = {}\n  for i = 1, #primes do\n    local idx = primes[i]\n    table.insert(res,\
    \ sentence:sub(idx, idx))\n  end\n  return table.concat(res)\nend", "    local\
    \ function is_prime(n)\n        for i = 2, n - 1 do\n            if n % i == 0\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end", "    -- is_prime_number(n) -> true | false\n    local function\
    \ is_prime_number(n)\n        for i = 2, n - 1 do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end", "  local primes = {}\n  local result = {}\n  local word\n  local min\
    \ = 1\n  local max = string.len(sentence)", "  local res = {}\n  for word in sentence:gmatch(\"\
    %w+\") do\n    if word:len() % 2 ~= 0 then\n      table.insert(res, word)\n  \
    \  end\n  end\n  return table.concat(res, \" \")\nend", "  -- Implement me\nend",
  "    --[[\n    :param sentence: string\n    :return: string\n    ]]--\n    -- Your\
    \ code here", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ p = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n    \
    \            p = false\n                break\n            end\n        end\n\
    \        if p then\n            primes[#primes + 1] = i\n        end\n    end\n\
    \    local result = {}\n    for word in sentence:gmatch('%w+') do\n        if\
    \ table.contains(primes, #word) then\n            result[#result + 1] = word\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "   -- get\
    \ words with prime len\n   local res = {}\n   for word in sentence:gmatch('%S+')\
    \ do\n      if prime(#word) then\n         table.insert(res, word)\n      end\n\
    \   end\n   -- return joined sentence\n   return table.concat(res, ' ')\nend",
  "    local function is_prime(n)\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then\n                return false\n            end\n        end\n  \
    \      return true\n    end", "    local function check_prime(n)\n        if n\
    \ < 2 then\n            return false\n        end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local result = {}\n  \
    \  for _, word in ipairs(sentence:split(\" \")) do\n        if check_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "  local words = sentence:split(\" \")\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(word:len())\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "    local s = \"\";\n    for v in string.gmatch(sentence, \"\
    %w+\") do\n        if is_prime(string.len(v)) then\n            s = s .. v ..\
    \ \" \";\n        end\n    end\n    return string.sub(s, 1, -2);\nend", "    local\
    \ primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    local words = {}\n    for w in sentence:gmatch(\"\
    %w+\") do\n        table.insert(words, w)\n    end\n    local result = {}\n  \
    \  for _,p in ipairs(primes) do\n        for _,w in ipairs(words) do\n       \
    \     if #w == p then\n                table.insert(result, w)\n            end\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend", "  local\
    \ n = ' '\n  local r = ''\n  for w in sentence:gmatch('%S+') do\n    if is_prime(#w)\
    \ then\n      r = r .. n .. w\n      n = ' '\n    end\n  end\n  return r:sub(2)\n\
    end", "    local ans = {}\n    for word in sentence:gmatch(\"%S+\") do\n     \
    \   if is_prime(#word) then\n            table.insert(ans, word)\n        end\n\
    \    end\n    return table.concat(ans, \" \")\nend", "    local prime_numbers\
    \ = {}\n    local is_prime = function(number)\n        if (number == 1) then\n\
    \            return false\n        end\n        for i = 2, number - 1 do\n   \
    \         if number % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    for i = 1, #sentence do\n    \
    \    if is_prime(i) then\n            table.insert(prime_numbers, i)\n       \
    \ end\n    end\n    local words = {}\n    for word in sentence:gmatch(\"%w+\"\
    ) do\n        table.insert(words, word)\n    end\n    local new_sentence = {}\n\
    \    for _, word in ipairs(words) do\n        if table_contains(prime_numbers,\
    \ #word) then\n            table.insert(new_sentence, word)\n        end\n   \
    \ end\n    return table.concat(new_sentence, \" \")\nend", "    local is_prime\
    \ = memoize(function(number)\n        if number == 1 then\n            return\
    \ false\n        end\n        for i = 2, math.floor(math.sqrt(number)) do\n  \
    \          if number % i == 0 then\n                return false\n           \
    \ end\n        end\n        return true\n    end)\n    local function collect_words(result,\
    \ w)\n        if is_prime(#w) then\n            table.insert(result, w)\n    \
    \    end\n        return result\n    end\n    return table.concat(sentence:gmatch(\"\
    %w+\"):foldl(collect_words, {}), \" \")\nend", "    local result = {}\n    for\
    \ word in sentence:gmatch('[^%s]+') do\n        if is_prime(#word) then\n    \
    \        table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    for word in sentence:gmatch(\"%w+\")\
    \ do\n        if is_prime(#word) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend", "  local words\
    \ = {}\n  for w in sentence:gmatch(\"%w+\") do table.insert(words, w) end\n  local\
    \ result = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w) then table.insert(result,\
    \ w) end\n  end\n  return table.concat(result, \" \")\nend", "  local function\
    \ is_prime(n)\n    if n == 1 then\n      return false\n    end\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local out = {}\n  for w in sentence:gmatch(\"\
    %w+\") do\n    if is_prime(#w) then\n      table.insert(out, w)\n    end\n  end\n\
    \  return table.concat(out, \" \")\nend", "  local primes = {}\n  local words\
    \ = {}\n  local index = 0\n  -- build list of prime numbers\n  for i = 2, 100\
    \ do\n    local is_prime = true\n    for j = 2, i - 1 do\n      if i % j == 0\
    \ then\n        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      primes[i] = true\n    end\n  end\n  -- build list of words with\
    \ length that is a prime number\n  for word in sentence:gmatch(\"%w+\") do\n \
    \   if primes[#word] then\n      index = index + 1\n      words[index] = word\n\
    \    end\n  end\n  -- join words with a space and return\n  return table.concat(words,\
    \ \" \")\nend", "  local words = {}\n  for word in sentence:gmatch(\"%w+\") do\n\
    \    words[#words + 1] = word\n  end\n  local primes = {}\n  for index, word in\
    \ ipairs(words) do\n    if is_prime(#word) then\n      primes[#primes + 1] = word\n\
    \    end\n  end\n  return table.concat(primes, \" \")\nend", "  local function\
    \ is_prime(i)\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end", "  local function is_prime(n)\n\
    \    for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end", "    local words = {}\n    local prime_words\
    \ = {}\n    for word in sentence:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            prime_words[#prime_words + 1] = word\n        end\n    end\n\
    \    return table.concat(prime_words, \" \")\nend", "    local function is_prime(x)\n\
    \        if x <= 1 then\n            return false\n        end\n        for i\
    \ = 2, math.sqrt(x) do\n            if x % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, \" \")\nend", "    local words = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        table.insert(words, word)\n    end\n    local prime_words =\
    \ {}\n    for _, word in ipairs(words) do\n        if is_prime(#word) then\n \
    \           table.insert(prime_words, word)\n        end\n    end\n    return\
    \ table.concat(prime_words, \" \")\nend", "    local str = {}\n    for i,word\
    \ in ipairs(sentence:split(\" \")) do\n        if is_prime(#word) then\n     \
    \       table.insert(str, word)\n        end\n    end\n    return table.concat(str,\
    \ \" \")\nend", "    local function is_prime(n)\n        if n < 2 then\n     \
    \       return false\n        end\n        if n == 2 then\n            return\
    \ true\n        end\n        for i = 2, math.floor(math.sqrt(n)) do\n        \
    \    if n % i == 0 then\n                return false\n            end\n     \
    \   end\n        return true\n    end\n    local function join(words)\n      \
    \  local result = ''\n        for i = 1, #words do\n            result = result\
    \ .. words[i]\n            if i < #words then\n                result = result\
    \ .. ' '\n            end\n        end\n        return result\n    end\n    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ join(words)\nend", "    local prime_word_sentence = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if is_prime(word:len()) then\n            table.insert(prime_word_sentence,\
    \ word)\n        end\n    end\n    return table.concat(prime_word_sentence, \"\
    \ \")\nend", "  return table.concat(tablex.filter(stringx.split(sentence), prime_word_length),\
    \ \" \")\nend", "    local words = {}\n    local prime_words = {}\n    for w in\
    \ sentence:gmatch(\"%S+\") do\n        table.insert(words, w)\n    end\n    for\
    \ i = 1, #words do\n        if is_prime(#words[i]) then\n            table.insert(prime_words,\
    \ words[i])\n        end\n    end\n    return table.concat(prime_words, \" \"\
    )\nend", "    -- your code here\n    local stringToReturn = \"\"\n    for word\
    \ in string.gmatch(sentence, \"%w+\") do\n        local len = string.len(word)\n\
    \        if isPrime(len) then\n            stringToReturn = stringToReturn ..\
    \ word .. \" \"\n        end\n    end\n    return stringToReturn\nend", "    local\
    \ function is_prime(n)\n        for i = 2, n - 1 do\n            if n % i == 0\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end", "  local function prime(num)\n    local function is_div(num,\
    \ div)\n      return num % div == 0\n    end\n    for i = 2, num - 1 do\n    \
    \  if is_div(num, i) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for word in sentence:gmatch(\"%w+\") do\n\
    \    if prime(#word) then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend", "    local primes = {1, 2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if primes[#word] then\n            table.insert(words, word)\n      \
    \  end\n    end\n    return table.concat(words, \" \")\nend", "    local function\
    \ is_prime(n)\n        for i = 2, n - 1 do\n            if n % i == 0 then\n \
    \               return false\n            end\n        end\n        return true\n\
    \    end", "  local sentence_words = sentence:split(\" \")\n  local words_prime_length\
    \ = {}\n  for _, word in ipairs(sentence_words) do\n    if is_prime(#word) then\n\
    \      table.insert(words_prime_length, word)\n    end\n  end\n  return table.concat(words_prime_length,\
    \ \" \")\nend", "  local function is_prime(n)\n    if n < 2 then\n      return\
    \ false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ local t = {}\n  for w in sentence:gmatch(\"%w+\") do\n    if is_prime(#w) then\n\
    \      table.insert(t, w)\n    end\n  end\n  return table.concat(t, \" \")\nend",
  "  local words = {}\n  local i = 1\n  while true do\n    local j = sentence:find(\"\
    \ \", i)\n    if j == nil then\n      table.insert(words, sentence:sub(i))\n \
    \     break\n    end\n    table.insert(words, sentence:sub(i, j - 1))\n    i =\
    \ j + 1\n  end\n  local res = {}\n  for _, v in ipairs(words) do\n    if is_prime(#v)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return table.concat(res,\
    \ \" \")\nend", "    local words = {}\n    for w in sentence:gmatch('%w+') do\n\
    \        table.insert(words, w)\n    end\n    local function is_prime(n)\n   \
    \     for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local new_words = {}\n    for _, w in ipairs(words) do\n        if is_prime(#w)\
    \ then\n            table.insert(new_words, w)\n        end\n    end\n    return\
    \ table.concat(new_words, ' ')\nend", "  local function is_prime(x)\n    for i\
    \ = 2, math.floor(math.sqrt(x)) do\n      if x % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end", "    local words = string.split(sentence,\
    \ ' ')\n    local result = {}\n    for _, word in ipairs(words) do\n        if\
    \ is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend", "    local primes = {2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97}\n    local result = {}\n    for word in sentence:gmatch(\"%w+\"\
    ) do\n        if primes[word:len()] then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend", "  sentence\
    \ = sentence:gsub(\"%s+\", \" \")\n  local output = {}\n  for word in sentence:gmatch(\"\
    %S+\") do\n    if is_prime(#word) then\n      table.insert(output, word)\n   \
    \ end\n  end\n  return table.concat(output, \" \")\nend", "  -- TODO\nend", " \
    \ local words = {}\n  for word in sentence:gmatch(\"[^%s]+\") do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for index, word in ipairs(words) do\n \
    \   if is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend", "    local function is_prime(n)\n\
    \        if n == 1 then\n            return false\n        end\n        for i\
    \ = 2, math.sqrt(n) do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ t = {}\n    for w in sentence:gmatch(\"%w+\") do\n        if is_prime(#w) then\n\
    \            table.insert(t, w)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend", "    local words = {}\n    local is_prime = {[2] = true}\n   \
    \ local current_index = 1\n    local current_word = \"\"\n    for char in sentence:gmatch('.')\
    \ do\n        if char == ' ' then\n            is_prime[#current_word] = is_prime[#current_word]\
    \ or is_prime_number(#current_word)\n            if is_prime[#current_word] then\n\
    \                words[current_index] = current_word\n                current_index\
    \ = current_index + 1\n            end\n            current_word = \"\"\n    \
    \    else\n            current_word = current_word .. char\n        end\n    end\n\
    \    is_prime[#current_word] = is_prime[#current_word] or is_prime_number(#current_word)\n\
    \    if is_prime[#current_word] then\n        words[current_index] = current_word\n\
    \    end\n    return table.concat(words, \" \")\nend", "\tlocal words = {}\n\t\
    for word in sentence:gmatch('[^%s]+') do\n\t\ttable.insert(words, word)\n\tend\n\
    \tlocal function is_prime(x)\n\t\tif x < 2 then\n\t\t\treturn false\n\t\tend\n\
    \t\tfor n = 2, math.sqrt(x) do\n\t\t\tif x % n == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor _, word\
    \ in ipairs(words) do\n\t\tif is_prime(#word) then\n\t\t\ttable.insert(result,\
    \ word)\n\t\tend\n\tend\n\treturn table.concat(result, ' ')\nend", "  local primes\
    \ = {}\n  for i = 2, 1000 do\n    local is_prime = true\n    for j = 2, i - 1\
    \ do\n      if i % j == 0 then\n        is_prime = false\n        break\n    \
    \  end\n    end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n\
    \  end", "  -- TODO: something\nend", "  -- WRITE YOUR CODE BELOW THIS LINE\n\
    \  local s = sentence\n  local o = ''\n  local test = true\n  local i = s:find('\
    \ ')\n  while i do\n    local w = s:sub(1, i-1)\n    local wl = w:len()\n    test\
    \ = true\n    for k = 2, wl-1 do\n      if wl % k == 0 then\n        test = false\n\
    \        break\n      end\n    end\n    if test then\n      o = o .. w .. ' '\n\
    \    end\n    s = s:sub(i+1)\n    i = s:find(' ')\n  end\n  w = s\n  wl = w:len()\n\
    \  test = true\n  for k = 2, wl-1 do\n    if wl % k == 0 then\n      test = false\n\
    \      break\n    end\n  end\n  if test then\n    o = o .. w\n  end\n  return\
    \ o\n  -- WRITE YOUR CODE ABOVE THIS LINE\nend", "    local is_prime = function(x)\n\
    \        for i = 2, x-1 do\n            if x % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ result = {}\n    for word in sentence:gmatch(\"%S+\") do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "    local ret = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        local count = 0\n        for i = 1, #word do\n            count\
    \ = count + 1\n        end\n        if is_prime(count) then\n            table.insert(ret,\
    \ word)\n        end\n    end\n    return table.concat(ret, \" \")\nend", "  \
    \  local function is_prime(num)\n        if num < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(num) do\n            if num % i ==\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return true\n    end\n    local words = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if is_prime(#word) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend", "    local\
    \ ws = {}\n    for w in sentence:gmatch('%w+') do\n        local l = #w\n    \
    \    if is_prime(l) then\n            table.insert(ws, w)\n        end\n    end\n\
    \    return table.concat(ws, ' ')\nend", "    local words = {}\n    for word in\
    \ sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n  \
    \  return table.concat(words:filter(is_prime_number), \" \")\nend", "    local\
    \ words = {}\n    for w in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ w)\n    end\n    local prime_words = {}\n    for _, w in ipairs(words) do\n\
    \        if not is_prime(#w) then\n            table.insert(prime_words, w)\n\
    \        end\n    end\n    return table.concat(prime_words, ' ')\nend", "\tlocal\
    \ prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n\tlocal result = {}\n\tfor word in sentence:gmatch(\"\
    %w+\") do\n\t\tlocal w = word:lower()\n\t\tlocal l = w:len()\n\t\tfor _, p in\
    \ ipairs(prime) do\n\t\t\tif p == l then\n\t\t\t\ttable.insert(result, w)\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(result, \" \")\nend",
  "    local words = {}\n    local word\n    for word in sentence:gmatch('%a+') do\n\
    \        table.insert(words, word)\n    end\n    local result = {}\n    for _,\
    \ word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \ local words = {}\n  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n  return\
    \ table.concat(result, \" \")\nend", "    local t = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if is_prime(#word) then\n            table.insert(t, word)\n\
    \        end\n    end\n    return table.concat(t, \" \")\nend", "    local function\
    \ is_prime(n)\n        for i = 2, n-1 do\n            if n % i == 0 then\n   \
    \             return false\n            end\n        end\n        return true\n\
    \    end", "    -- your code here\n    local words = {}\n    local new = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        words[#words + 1] = word\n\
    \    end\n    for i, w in ipairs(words) do\n        if is_prime(#w) then\n   \
    \         new[#new + 1] = w\n        end\n    end\n    return table.concat(new,\
    \ \" \")\nend", "    local w = {}\n    local word = \"\"\n    for c in sentence:gmatch(\"\
    .\") do\n        if c == \" \" then\n            if is_prime(#word) then\n   \
    \             table.insert(w, word)\n            end\n            word = \"\"\n\
    \        else\n            word = word .. c\n        end\n    end\n    if is_prime(#word)\
    \ then\n        table.insert(w, word)\n    end\n    return table.concat(w, \"\
    \ \")\nend", "    return -- TODO: implementation\nend", "    local t = {}\n  \
    \  for word in sentence:gmatch(\"%w+\") do\n        if is_prime(#word) then\n\
    \            table.insert(t, word)\n        end\n    end\n    return table.concat(t,\
    \ \" \")\nend", "  local res = {}\n  for w in sentence:gmatch(\"%w+\") do\n  \
    \  local l = #w\n    if is_prime(l) then\n      res[#res + 1] = w\n    end\n \
    \ end\n  return table.concat(res, \" \")\nend", "  local words = {}\n  for word\
    \ in sentence:gmatch(\"[^%s]+\") do\n    table.insert(words, word)\n  end\n  local\
    \ result = {}\n  for index, word in ipairs(words) do\n    if is_prime(#word) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "    local function is_prime(x)\n        if x < 2 then\n     \
    \       return false\n        end\n        for i = 2, math.sqrt(x) do\n      \
    \      if x % i == 0 then\n                return false\n            end\n   \
    \     end\n        return true\n    end\n    local words = {}\n    for word in\
    \ sentence:gmatch(\"%w+\") do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, \" \")\nend", " \
    \   -- your code here\n    local tb={}\n    local array={}\n    local s=string.gmatch(sentence,\"\
    %w+\")\n    for i in s do\n        table.insert(tb,i)\n    end\n    for i,v in\
    \ ipairs(tb) do\n        local sum=0\n        for j=1,#v do\n            sum=sum+string.byte(v,j)\n\
    \        end\n        if isPrime(sum) then\n            table.insert(array,v)\n\
    \        end\n    end\n    return table.concat(array,\" \")\nend", "    local\
    \ res = {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend", "  local res = {}\n  for w in sentence:gmatch('%S+')\
    \ do\n    if is_prime(#w) then\n      res[#res + 1] = w\n    end\n  end\n  return\
    \ table.concat(res, ' ')\nend", "    local words = sentence:split(\" \")\n   \
    \ local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "  -- return the words in `sentence` whose\
    \ lengths are prime numbers\n  local primes = {}\n  local words = {}\n  for word\
    \ in sentence:gmatch(\"%S+\") do\n    local w = word:gsub(\"%s\", \"\")\n    local\
    \ len = #w\n    if #primes == 0 then\n      table.insert(primes, 2)\n    end\n\
    \    if len > primes[#primes] then\n      while len > primes[#primes] do\n   \
    \     local x = primes[#primes] + 1\n        local is_prime = true\n        for\
    \ i = 2, x - 1 do\n          if x % i == 0 then\n            is_prime = false\n\
    \            break\n          end\n        end\n        if is_prime then\n   \
    \       table.insert(primes, x)\n        end\n      end\n    end\n    for i =\
    \ 1, #primes do\n      if len == primes[i] then\n        table.insert(words, w)\n\
    \        break\n      end\n    end\n  end\n  return table.concat(words, \" \"\
    )\nend", "  local words = {}\n  local count = 0\n  local i = 1\n  while i <= #sentence\
    \ do\n    local word, len = get_word(sentence, i)\n    if is_prime(len) then\n\
    \      count = count + 1\n      words[count] = word\n    end\n    i = i + len\
    \ + 1\n  end\n  return table.concat(words, ' ')\nend", "    local words = {}\n\
    \    for w in sentence:gmatch('[%w]+') do\n        words[#words + 1] = w\n   \
    \ end\n    local function is_prime(n)\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local res = {}\n    for\
    \ _, w in ipairs(words) do\n        if is_prime(#w) then\n            res[#res\
    \ + 1] = w\n        end\n    end\n    return table.concat(res, ' ')\nend", " \
    \ local function is_prime(n)\n    if n <= 1 then\n      return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local words = {}\n  for word in\
    \ sentence:gmatch(\"%w+\") do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, \" \")\nend", "  local words\
    \ = sentence:gmatch('[^%s]+')\n  local is_prime = { false, false, true, true,\
    \ false, true, false, true, false, false, false, true, false, true, false, false,\
    \ false, true, false, true, false, false, false, true, false, false, false, false,\
    \ false, true, false, true, false, false, false, false, false, true, false, false,\
    \ false, true, false, true, false, false, false, false, false, true, false, false,\
    \ false, false, false, true, false, true, false, false, false, false, false, false,\
    \ false, true, false, true, false, false, false, false, false, false, false, false,\
    \ false, true, false, false, false, true, false, true, false, false, false, false,\
    \ false, false, false, false, false, false, true, false, true, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, true, false,\
    \ false, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, true,\
    \ false, true, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, true, false,\
    \ true, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ true, false, false, false, true, false, true, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, true, false, true, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, true, false, true, false, false,"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
