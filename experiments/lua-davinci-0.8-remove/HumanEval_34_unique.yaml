name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal res = {}\n\tlocal seen = {}\n\tfor _,v in ipairs(l) do\n\t\t\
    if not seen[v] then\n\t\t\ttable.insert(res, v)\n\t\t\tseen[v] = true\n\t\tend\n\
    \tend\n\treturn res\nend", "\tlocal seen = {}\n\tlocal out = {}\n\tfor v in pairs(l)\
    \ do\n\t\tif not seen[v] then\n\t\t\ttable.insert(out, v)\n\t\t\tseen[v] = true\n\
    \t\tend\n\tend\n\treturn out\nend", "    local res = {}\n    local prev = nil\n\
    \    for _,v in ipairs(l) do\n        if v ~= prev then\n            res[#res+1]\
    \ = v\n            prev = v\n        end\n    end\n    return res\nend", "   \
    \ local unique = {}\n    for _, value in ipairs(l) do\n        if not unique[value]\
    \ then\n            unique[value] = true\n            table.insert(unique, value)\n\
    \        end\n    end\n    return unique\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not list.contains(r, v) then\n\t\t\ttable.insert(r, v)\n\
    \t\tend\n\tend\n\treturn r\nend", "    local ret = {}\n    for _, el in ipairs(l)\
    \ do\n        if not contains(ret, el) then table.insert(ret, el) end\n    end\n\
    \    return ret\nend", "    local t = {}\n    for _,v in ipairs(l) do\n      \
    \  if t[v] == nil then\n            t[v] = true\n            table.insert(t, v)\n\
    \        end\n    end\n    return t\nend", "  local u = {}\n  local i = 1\n  for\
    \ _,v in ipairs(l) do\n    if not u[v] then\n      u[v] = true\n      l[i] = v\n\
    \      i = i + 1\n    end\n  end\n  return setmetatable(l, getmetatable(l))\n\
    end", "  if l == nil then return nil end\n  table.sort(l)\n  local last = l[1]\n\
    \  local j = 1\n  for i = 2, #l do\n    if l[i] ~= last then\n      last = l[i]\n\
    \      j = j + 1\n      l[j] = last\n    end\n  end\n  for i = j + 1, #l do\n\
    \    l[i] = nil\n  end\n  return l\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    if not contains(t, v) then table.insert(t, v) end\n  end\n  return t\n\
    end", "    local res = {}\n    local function add(i)\n        if not res[i] then\n\
    \            res[i] = true\n            table.insert(res, i)\n        end\n  \
    \  end\n    for _, i in ipairs(l) do\n        add(i)\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local r = {}\n    for _, v in ipairs(l) do\n     \
    \   if not contains(r, v) then\n            table.insert(r, v)\n        end\n\
    \    end\n    return r\nend", "\tlocal set = {}\n\tlocal n = 0\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not set[v] then\n\t\t\tn = n + 1\n\t\t\tset[v] = n\n\t\t\
    end\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(set) do\n\t\tresult[v] =\
    \ k\n\tend\n\ttable.sort(result)\n\treturn result\nend", "    local res = {}\n\
    \    for _, x in ipairs(l) do\n        if not index(res, x) then\n           \
    \ res[#res+1] = x\n        end\n    end\n    table.sort(res)\n    return res\n\
    end", "  local res = {}\n  local seen = {}\n  for _, v in ipairs(l) do\n    if\
    \ not seen[v] then\n      table.insert(res, v)\n      seen[v] = true\n    end\n\
    \  end\n  return res\nend", "\tlocal res = {}\n\tlocal u = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not u[v] then\n\t\t\ttable.insert(res, v)\n\t\t\tu[v] = true\n\t\t\
    end\n\tend\n\treturn res\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\
    \tif r[v] == nil then\n\t\t\tr[v] = true\n\t\t\tr[#r+1] = v\n\t\tend\n\tend\n\t\
    return r\nend", "\tlocal ret = {}\n\tfor _, v in ipairs(l) do\n\t\tret[v] = true\n\
    \tend\n\tret = table.keys(ret)\n\ttable.sort(ret)\n\treturn ret\nend", "  local\
    \ s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local res = {}\n\
    \  for k,_ in pairs(s) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n\
    \  return res\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif r[v] ==\
    \ nil then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\ttable.sort(r)\n\
    \treturn r\nend", "\ttable.sort(l)\n\tlocal last = nil\n\tlocal ret = {}\n\tfor\
    \ _,v in ipairs(l) do\n\t\tif v ~= last then\n\t\t\ttable.insert(ret, v)\n\t\t\
    \tlast = v\n\t\tend\n\tend\n\treturn ret\nend", "  local r = {}\n  for _, v in\
    \ ipairs(l) do\n    if not find(r, v) then\n      insert(r, v)\n    end\n  end\n\
    \  sort(r)\n  return r\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\t\
    if r[v] == nil then\n\t\t\tr[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\t\
    end\n\treturn r\nend", "  local n = {}\n  for _, v in ipairs(l) do\n    n[v] =\
    \ true\n  end\n  local r = {}\n  for k, _ in pairs(n) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local result = {}\n  for _,v\
    \ in ipairs(l) do\n    if not result[v] then result[v] = true end\n  end\n  return\
    \ table.sortedkeys(result)\nend", "\tlocal set = {}\n\tlocal sorted = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\tif not set[v] then\n\t\t\tset[v] = true\n\t\t\tsorted[#sorted+1]\
    \ = v\n\t\tend\n\tend\n\treturn sorted\nend", "\tlocal t = {}\n\tlocal n = {}\n\
    \tfor k, v in pairs(l) do\n\t\tif (not t[v]) then\n\t\t\tt[v] = v\n\t\t\tn[#n+1]\
    \ = v\n\t\tend\n\tend\n\ttable.sort(n)\n\treturn n\nend", "    local a = {}\n\
    \    for _, v in ipairs(l) do\n        if not a[v] then\n            a[v] = true\n\
    \            a[#a + 1] = v\n        end\n    end\n    return a\nend", "  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return\
    \ r\nend", "  local a, i = {}, 1\n  for _, v in ipairs(l) do\n    a[i] = v\n \
    \   i = i + 1\n  end\n  table.sort(a)\n  for j = #a, 2, -1 do\n    if a[j] ==\
    \ a[j - 1] then\n      table.remove(a, j)\n    end\n  end\n  return a\nend", "\t\
    if type(l) ~= \"table\" then return l end\n\tlocal set = {}\n\tlocal u = {}\n\t\
    for _, v in ipairs(l) do\n\t\tif not set[v] then\n\t\t\tu[#u+1] = v\n\t\t\tset[v]\
    \ = true\n\t\tend\n\tend\n\treturn u\nend", "\tlocal n = {}\n\tfor i, v in ipairs(l)\
    \ do\n\t\tn[v] = true\n\tend\n\tlocal r = {}\n\tfor k, v in pairs(n) do\n\t\t\
    table.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local a = {}\n\
    \  for _,v in ipairs(l) do\n    if not a[v] then\n      a[v] = true\n      table.insert(a,\
    \ v)\n    end\n  end\n  return a\nend", "\tlocal r = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif (not table.contains(r, v)) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\
    \tend\n\ttable.sort(r)\n\treturn r\nend", "\tlocal s = {}\n\tlocal r = {}\n\t\
    for _, v in ipairs(l) do\n\t\tif not s[v] then\n\t\t\tr[#r+1] = v\n\t\t\ts[v]\
    \ = true\n\t\tend\n\tend\n\treturn r\nend", "  local r = {}\n  for _,v in ipairs(l)\
    \ do\n    if not r[v] then\n      table.insert(r, v)\n      r[v] = true\n    end\n\
    \  end\n  return r\nend", "    local set = {}\n    local res = {}\n    for _,\
    \ e in ipairs(l) do\n        if not set[e] then\n            res[#res+1] = e\n\
    \            set[e] = true\n        end\n    end\n    return res\nend", "  local\
    \ m = {}\n  for _, v in ipairs(l) do\n    m[v] = true\n  end\n  local l2 = {}\n\
    \  for k, _ in pairs(m) do\n    table.insert(l2, k)\n  end\n  table.sort(l2)\n\
    \  return l2\nend", "\tlocal vals = {}\n\tfor _, v in ipairs(l) do\n\t\tvals[v]\
    \ = true\n\tend\n\tlocal ret = {}\n\tfor k, _ in pairs(vals) do\n\t\ttable.insert(ret,\
    \ k)\n\tend\n\ttable.sort(ret)\n\treturn ret\nend", "\tlocal hash = {}\n\tlocal\
    \ res = {}\n\tfor _,v in ipairs(l) do\n\t\tif not hash[v] then\n\t\t\tres[#res+1]\
    \ = v\n\t\t\thash[v] = true\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn res\n\
    end", "  if not l then return {} end\n  --print(\"unique: \", l)\n  local res\
    \ = {}\n  local seen = {}\n  table.sort(l)\n  for _, v in ipairs(l) do\n    if\
    \ not seen[v] then\n      table.insert(res, v)\n      seen[v] = true\n    end\n\
    \  end\n  return res\nend", "    local map = {}\n    for _, v in ipairs(l) do\n\
    \        map[v] = true\n    end\n    local res = {}\n    for k, _ in pairs(map)\
    \ do\n        table.insert(res, k)\n    end\n    table.sort(res)\n    return res\n\
    end", "    local s = {}\n    for _,v in ipairs(l) do\n        s[v] = true\n  \
    \  end\n    local r = {}\n    for k,_ in pairs(s) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "\tlocal ret = {}\n\tlocal\
    \ ins = {}\n\tfor _, v in ipairs(l) do\n\t\tif not ins[v] then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\t\tins[v] = true\n\t\tend\n\tend\n\treturn ret\nend", "  local res =\
    \ {}\n  for _, v in ipairs(l) do\n    if not any(res, function(x) return x ==\
    \ v end) then\n      table.insert(res, v)\n    end\n  end\n  return res\nend",
  "    local _set = {}\n    local _unique = {}\n    for _, v in ipairs(l) do\n   \
    \     if (not _set[v]) then\n            _unique[#_unique+1] = v\n           \
    \ _set[v] = true\n        end\n    end\n    return _unique\nend", "  local m =\
    \ {}\n  for _,v in ipairs(l) do\n    m[v] = true\n  end\n  local r = {}\n  for\
    \ k,_ in pairs(m) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return\
    \ r\nend", "    local newList = {}\n    local i = 1\n    for k, v in pairs(l)\
    \ do\n        if not contains(newList, v) then\n            newList[i] = v\n \
    \           i = i + 1\n        end\n    end\n    return newList\nend", "  local\
    \ t = {}\n  for i, n in ipairs(l) do\n    if not t[n] then\n      t[n] = true\n\
    \      t[#t+1] = n\n    end\n  end\n  return t\nend", "    local res = {}\n  \
    \  for _, v in ipairs(l) do\n        if not includes(res, v) then\n          \
    \  table.insert(res, v)\n        end\n    end\n    return res\nend", "  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend", "    local nl =\
    \ {}\n    for _, v in ipairs(l) do\n        if not contains(nl, v) then\n    \
    \        nl[#nl+1] = v\n        end\n    end\n    return nl\nend", "    local\
    \ a = {}\n    for _,v in ipairs(l) do\n        if not a[v] then\n            a[v]\
    \ = true\n            insert(a, v)\n        end\n    end\n    return a\nend",
  "\t-- pass 1: build a table of all unique elements\n\tlocal t = {}\n\tfor i,v in\
    \ ipairs(l) do\n\t\tif not t[v] then\n\t\t\tt[v] = true\n\t\tend\n\tend\n\t--\
    \ pass 2: build sorted list\n\tlocal n = {}\n\tfor k in pairs(t) do\n\t\ttable.insert(n,\
    \ k)\n\tend\n\ttable.sort(n)\n\treturn n\nend", "  local res = {}\n  for _, v\
    \ in ipairs(l) do\n    if not lookup(res, v) then\n      res[#res+1] = v\n   \
    \ end\n  end\n  return res\nend", "  local hash = {}\n  local res = {}\n  for\
    \ _, v in ipairs(l) do\n    if not hash[v] then\n      res[#res+1] = v\n     \
    \ hash[v] = true\n    end\n  end\n  return res\nend", "  return  Set(l):totable()\n\
    end", "\tlocal uniq = {}\n\tfor _, v in ipairs(l) do\n\t\tif not uniq[v] then\n\
    \t\t\tuniq[v] = true\n\t\t\ttable.insert(uniq, v)\n\t\tend\n\tend\n\treturn uniq\n\
    end", "    local res = {}\n    local hash = {}\n    for _,v in ipairs(l) do\n\
    \        if not hash[v] then\n            res[#res+1] = v\n            hash[v]\
    \ = true\n        end\n    end\n    table.sort(res)\n    return res\nend", " \
    \ local s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local i =\
    \ 0\n  local r = {}\n  for k in pairs(s) do\n    i = i + 1\n    r[i] = k\n  end\n\
    \  table.sort(r)\n  return r\nend", "    local result = {}\n    for _, v in ipairs(l)\
    \ do\n        if not result[v] then\n            result[v] = true\n          \
    \  table.insert(result, v)\n        end\n    end\n    return result\nend", " \
    \ local u, i = {}, 0\n  for _,v in ipairs(l) do\n    if not util.table_has(u,\
    \ v) then\n      i = i + 1\n      u[i] = v\n    end\n  end\n  return u\nend",
  "    table.sort(l)\n    local u = {}\n    local j = 1\n    for i = 1, #l do\n  \
    \      if l[i] ~= l[i-1] then\n            u[j] = l[i]\n            j = j + 1\n\
    \        end\n    end\n    return u\nend", "    local hash = {}\n    local res\
    \ = {}\n    for _, v in ipairs(l) do\n        if (not hash[v]) then\n        \
    \    res[#res+1] = v\n            hash[v] = true\n        end\n    end\n    return\
    \ res\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  local last = nil\n  local uniq = {}\n  for\
    \ _, v in ipairs(sorted) do\n    if v ~= last then\n      table.insert(uniq, v)\n\
    \    end\n    last = v\n  end\n  return uniq\nend", "    local u = {}\n    for\
    \ _, v in ipairs(l) do\n        if not in(u, v) then\n            table.insert(u,\
    \ v)\n        end\n    end\n    return u\nend", "    local set = {}\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not set[v] then\n       \
    \     table.insert(res, v)\n            set[v] = true\n        end\n    end\n\
    \    return res\nend", "  local set = {}\n  for _, v in ipairs(l) do\n    set[v]\
    \ = true\n  end\n  local res = {}\n  for k in pairs(set) do\n    table.insert(res,\
    \ k)\n  end\n  table.sort(res)\n  return res\nend", "  local s = {}\n  for _,v\
    \ in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ result = {}\n    for k, _ in pairs(s) do\n        table.insert(result, k)\n\
    \    end\n    table.sort(result)\n    return result\nend", "    local i = {}\n\
    \    local r = {}\n    for v in pairs(l) do\n        if not i[v] then\n      \
    \      r[#r+1] = v\n            i[v] = true\n        end\n    end\n    table.sort(r)\n\
    \    return r\nend", "\tlocal r = {}\n\tlocal h = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not h[v] then\n\t\t\tr[#r+1] = v\n\t\t\th[v] = true\n\t\tend\n\t\
    end\n\treturn r\nend", "\tlocal a = {}\n\tfor i = 1, #l do\n\t\tlocal e = l[i]\n\
    \t\tif not a[e] then\n\t\t\ta[e] = e\n\t\tend\n\tend\n\treturn a\nend", "    local\
    \ res = {}\n    local v\n    for _, v in ipairs(l) do\n        if not v.deleted\
    \ then\n            if #res == 0 or res[#res] ~= v then\n                res[#res\
    \ + 1] = v\n            end\n        end\n    end\n    return res\nend", "   \
    \ local tbl = {}\n    for _,v in ipairs(l) do\n        tbl[v] = true\n    end\n\
    \    local l = {}\n    for k,_ in pairs(tbl) do\n        l[#l+1] = k\n    end\n\
    \    table.sort(l)\n    return l\nend", "    local r = {}\n    for i, e in ipairs(l)\
    \ do\n        r[e] = true\n    end\n    local k = {}\n    for e in pairs(r) do\n\
    \        k[#k+1] = e\n    end\n    table.sort(k)\n    return k\nend", "  local\
    \ u = {}\n  for i = 1, #l do\n    local n = l[i]\n    if not utils.list.contains(u,\
    \ n) then\n      table.insert(u, n)\n    end\n  end\n  return u\nend", "\tlocal\
    \ result = {}\n\tlocal seen = {}\n\tfor _,v in ipairs(l) do\n\t\tif seen[v] ==\
    \ nil then\n\t\t\ttable.insert(result, v)\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\
    \treturn result\nend", "\tlocal h = {}\n\tfor _,v in ipairs(l) do\n\t\th[v] =\
    \ true\n\tend\n\tlocal r = {}\n\tfor k,_ in pairs(h) do\n\t\ttable.insert(r, k)\n\
    \tend\n\ttable.sort(r)\n\treturn r\nend", "    local u = {}\n    for _,v in ipairs(l)\
    \ do\n        if not contains(u, v) then\n            u[#u+1] = v\n        end\n\
    \    end\n    return u\nend", "\tlocal elems = {}\n\tfor _, v in ipairs(l) do\n\
    \t\tif not elems[v] then elems[v] = true end\n\tend\n\tlocal out = {}\n\tfor k,\
    \ _ in pairs(elems) do\n\t\ttable.insert(out, k)\n\tend\n\ttable.sort(out)\n\t\
    return out\nend", "  local seen = {}\n  local ret = {}\n  for _,v in ipairs(l)\
    \ do\n    if not seen[v] then\n      ret[#ret+1] = v\n      seen[v] = true\n \
    \   end\n  end\n  return ret\nend", "  local s = {}\n  for _,v in ipairs(l) do\n\
    \    s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local keys = {}\n  local values\
    \ = {}\n  for _,v in ipairs(l) do\n    if not keys[v] then\n      table.insert(values,\
    \ v)\n      keys[v] = true\n    end\n  end\n  return values\nend", "  local res\
    \ = {}\n  local found = {}\n  for _,v in ipairs(l) do\n    if not found[v] then\n\
    \      res[#res+1] = v\n      found[v] = true\n    end\n  end\n  return res\n\
    end", "\tlocal p, i, t = {}, 1, {}\n\tfor _, v in ipairs(l) do\n\t\tif not p[v]\
    \ then\n\t\t\tt[i] = v\n\t\t\ti = i + 1\n\t\t\tp[v] = true\n\t\tend\n\tend\n\t\
    table.sort(t)\n\treturn t\nend", "  local a = {}\n  for i, v in ipairs(l) do a[v]\
    \ = true end\n  local ret = {}\n  for k, _ in pairs(a) do table.insert(ret, k)\
    \ end\n  table.sort(ret)\n  return ret\nend", "  local s = {}\n  for i = 1, #l\
    \ do\n    s[l[i]] = 1\n  end\n  local u = {}\n  for k, v in pairs(s) do\n    u[#u\
    \ + 1] = k\n  end\n  table.sort(u)\n  return u\nend", "    if #l == 0 then return\
    \ l end\n    table.sort(l)\n    local j = 1\n    for i = 2, #l do\n        if\
    \ l[i] ~= l[j] then\n            j = j + 1\n            l[j] = l[i]\n        end\n\
    \    end\n    for i = j + 1, #l do\n        l[i] = nil\n    end\n    return l\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        t[v] = true\n \
    \   end\n    local r = {}\n    for k, _ in pairs(t) do\n        table.insert(r,\
    \ k)\n    end\n    table.sort(r)\n    return r\nend", "\tlocal ret = {}\n\tfor\
    \ _,v in ipairs(l) do\n\t\tif not contains(ret, v) then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "\tlocal s = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "\tlocal set = {}\n\tlocal sorted\
    \ = {}\n\tlocal pos = 1\n\tfor k,v in pairs(l) do\n\t\ttable.insert(set,v)\n\t\
    end\n\ttable.sort(set)\n\tfor k,v in pairs(set) do\n\t\tsorted[pos] = v\n\t\t\
    pos = pos + 1\n\tend\n\treturn sorted\nend", "    local n = #l\n    local r =\
    \ {}\n    for i = 1, n do\n        local v = l[i]\n        local j = #r\n    \
    \    while j > 0 and v < r[j] do\n            j = j - 1\n        end\n       \
    \ if j == 0 or v ~= r[j] then\n            j = j + 1\n            r[j] = v\n \
    \       end\n    end\n    return r\nend", "  local s = {}\n  for _,v in ipairs(l)\
    \ do\n    s[v] = true\n  end\n  local result = {}\n  for v in pairs(s) do\n  \
    \  table.insert(result, v)\n  end\n  table.sort(result)\n  return result\nend",
  "\tlocal s = {}\n\tfor i, v in ipairs(l) do\n\t\ts[v] = true\n\tend\n\tlocal a =\
    \ {}\n\tfor k, v in pairs(s) do\n\t\ttable.insert(a, k)\n\tend\n\ttable.sort(a)\n\
    \treturn a\nend", "  if not l then return nil end\n  local hash = {}\n  local\
    \ res = {}\n  for _,v in ipairs(l) do\n    if not hash[v] then\n      res[#res+1]\
    \ = v\n      hash[v] = true\n    end\n  end\n  return res\nend", "\tlocal r =\
    \ {}\n\tlocal s = {}\n\tfor _, v in ipairs(l) do\n\t\tif not s[v] then\n\t\t\t\
    r[#r+1] = v\n\t\t\ts[v] = true\n\t\tend\n\tend\n\treturn r\nend", "  local ret\
    \ = {}\n  for _, v in ipairs(l) do\n    if not v.__in then\n      table.insert(ret,\
    \ v)\n      v.__in = true\n    end\n  end\n  for _, v in ipairs(ret) do\n    v.__in\
    \ = nil\n  end\n  return ret\nend", "  local s = {}\n  for _,v in ipairs(l) do\n\
    \    s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "  local r = {}\n  for _,v in\
    \ ipairs(l) do\n    if not r[v] then\n      r[v] = true\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend", "\tlocal a = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tif not a[v] then\n\t\t\ta[v] = true\n\t\t\ttable.insert(a, v)\n\t\t\
    end\n\tend\n\treturn a\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\t\
    r[v] = true\n\tend\n\tlocal u = {}\n\tfor k,_ in pairs(r) do\n\t\ttable.insert(u,\
    \ k)\n\tend\n\ttable.sort(u)\n\treturn u\nend", "\tlocal r = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif not table.contains(r, v) then\n\t\t\ttable.insert(r, v)\n\
    \t\tend\n\tend\n\treturn r\nend", "  local ret = {}\n  for _, v in ipairs(l) do\n\
    \    if not ret[v] then ret[v] = true end\n  end\n  table.sort(ret)\n  return\
    \ ret\nend", "  local r = {}\n  local prev = nil\n  for _, e in ipairs(l) do\n\
    \    if e ~= prev then\n      table.insert(r, e)\n      prev = e\n    end\n  end\n\
    \  return r\nend", "    local res = {}\n    for i, v in ipairs(l) do\n       \
    \ if not contains(res, v) then\n            res[#res + 1] = v\n        end\n \
    \   end\n    return res\nend", "\tlocal s = {}\n\tfor _, v in ipairs(l) do\n\t\
    \ts[v] = true\n\tend\n\tlocal r = {}\n\tfor k in pairs(s) do\n\t\ttable.insert(r,\
    \ k)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "    local hash = {}\n    local\
    \ result = {}\n    for _,v in ipairs(l) do\n        if (not hash[v]) then\n  \
    \          table.insert(result, v)\n            hash[v] = true\n        end\n\
    \    end\n    return result\nend", "    local t = {}\n    for i, v in ipairs(l)\
    \ do\n        if not inTable(t, v) then\n            table.insert(t, v)\n    \
    \    end\n    end\n    return t\nend", "    local res = {}\n    for _, v in ipairs(l)\
    \ do\n        if not contains(res, v) then\n            res[#res + 1] = v\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend", "    if l == nil\
    \ then return nil end\n    local seen = {}\n    local ret = {}\n    for _, v in\
    \ ipairs(l) do\n        if not seen[v] then\n            table.insert(ret, v)\n\
    \            seen[v] = true\n        end\n    end\n    return ret\nend", "\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif r[v] == nil then\n\t\t\ttable.insert(r,\
    \ v)\n\t\t\tr[v] = 1\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend", "\tif\
    \ not l then return end\n\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\tt[v] =\
    \ true\n\tend\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\treturn next(t,i)\n\
    \tend\nend", "\tif not l then return {} end\n\tlocal s = {}\n\tfor i = 1, #l do\n\
    \t\ts[tostring(l[i])] = l[i]\n\tend\n\tlocal r = {}\n\tfor _,v in pairs(s) do\n\
    \t\tr[#r+1] = v\n\tend\n\treturn r\nend", "    local res = {}\n    for _, v in\
    \ ipairs(l) do\n        if not contains(res, v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "  local s = {}\n  for _,v in\
    \ ipairs(l) do\n    s[v] = true\n  end\n  return keys(s)\nend", "\t-- sort\n\t\
    if #l == 0 then return {} end\n\ttable.sort(l)\n\t-- extract unique\n\tlocal res\
    \ = {l[1]}\n\tfor i=2,#l do\n\t\tif l[i] ~= l[i-1] then res[#res+1] = l[i] end\n\
    \tend\n\treturn res\nend", "    local a = {}\n    for _,v in ipairs(l) do\n  \
    \      if not a[v] then\n            a[v] = true\n            table.insert(a,\
    \ v)\n        end\n    end\n    return a\nend", "  local s = {}\n  for _,v in\
    \ ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n  for k,_ in pairs(s)\
    \ do\n    table.insert(r, k)\n  end\n  table.sort(r)\n  return r\nend", "  local\
    \ s = {}\n  for _,v in ipairs(l) do\n    s[v] = true\n  end\n  local n = {}\n\
    \  for k,_ in pairs(s) do\n    n[#n+1] = k\n  end\n  table.sort(n)\n  return n\n\
    end", "\tlocal t = {}\n\tfor _, n in ipairs(l) do\n\t\tif not t[n] then\n\t\t\t\
    t[n] = true\n\t\t\ttable.insert(t, n)\n\t\tend\n\tend\n\treturn t\nend", "\tlocal\
    \ u = {}\n\tlocal i = 0\n\tlocal s = table.sort(l)\n\tfor _,v in ipairs(s) do\n\
    \t\tif v ~= i then\n\t\t\ttable.insert(u, v)\n\t\t\ti = v\n\t\tend\n\tend\n\t\
    return u\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        u[v]\
    \ = true\n    end\n    return keys(u)\nend", "\tlocal sorted = {}\n\tfor _,v in\
    \ ipairs(l) do\n\t\tsorted[#sorted+1] = v\n\tend\n\ttable.sort(sorted)\n\tlocal\
    \ unique = {}\n\tlocal last = nil\n\tfor _,v in ipairs(sorted) do\n\t\tif v ~=\
    \ last then\n\t\t\tunique[#unique+1] = v\n\t\t\tlast = v\n\t\tend\n\tend\n\treturn\
    \ unique\nend", "    local r = {}\n    local s = {}\n    for _,v in ipairs(l)\
    \ do\n        if not s[v] then\n            table.insert(r, v)\n            s[v]\
    \ = true\n        end\n    end\n    return r\nend", "\tlocal out = {}\n\tfor i,v\
    \ in ipairs(l) do\n\t\tif not listContains(out, v) then\n\t\t\ttable.insert(out,\
    \ v)\n\t\tend\n\tend\n\treturn out\nend", "  local s = {}\n  for _, e in ipairs(l)\
    \ do\n    if not s[e] then\n      s[e] = true\n      table.insert(s, e)\n    end\n\
    \  end\n  return s\nend", "\tlocal r = {}\n\tlocal elem\n\tfor _,elem in ipairs(l)\
    \ do\n\t\tif not member(elem, r) then\n\t\t\ttable.insert(r, elem)\n\t\tend\n\t\
    end\n\treturn r\nend", "  local m = {}\n  for _, v in ipairs(l) do\n    m[v] =\
    \ true\n  end\n  local r = {}\n  for k, _ in pairs(m) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "\ttable.sort(l)\n\tlocal prev\n\
    \tlocal i = 1\n\twhile i <= #l do\n\t\tif l[i] == prev then\n\t\t\ttable.remove(l,\
    \ i)\n\t\telse\n\t\t\tprev = l[i]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn l\n\
    end", "  local res = {}\n  local added = {}\n  table.sort(l)\n  for _, v in ipairs(l)\
    \ do\n    if not added[v] then\n      table.insert(res, v)\n      added[v] = true\n\
    \    end\n  end\n  return res\nend", "    local t = {}\n    for _,v in ipairs(l)\
    \ do\n        t[v] = true\n    end\n    local res = {}\n    for k,_ in pairs(t)\
    \ do\n        table.insert(res, k)\n    end\n    table.sort(res)\n    return res\n\
    end", "\tassert(l,\"list is nil\")\n\tlocal uniqueList = {}\n\tlocal uniqueListIndex\
    \ = 0\n\tfor i,v in ipairs(l) do\n\t\tlocal uniqueValue = true\n\t\tfor j,u in\
    \ ipairs(uniqueList) do\n\t\t\tif u == v then\n\t\t\t\tuniqueValue = false\n\t\
    \t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif uniqueValue then\n\t\t\tuniqueListIndex\
    \ = uniqueListIndex + 1\n\t\t\tuniqueList[uniqueListIndex] = v\n\t\tend\n\tend\n\
    \tsort(uniqueList)\n\treturn uniqueList\nend", "\tlocal u = {}\n\tfor _, v in\
    \ ipairs(l) do\n\t\tu[v] = true\n\tend\n\tlocal r = {}\n\tfor v in pairs(u) do\n\
    \t\ttable.insert(r, v)\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local s =\
    \ {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local res = {}\n \
    \ for k, _ in pairs(s) do\n    table.insert(res, k)\n  end\n  table.sort(res)\n\
    \  return res\nend", "\tlocal result = {}\n\tfor i,v in ipairs(l) do\n\t\tif not\
    \ result[v] then result[v] = true end\n\tend\n\treturn result\nend", "\tif type(l)\
    \ ~= \"table\" then return end\n\tlocal s = {}\n\tfor _, e in ipairs(l) do\n\t\
    \ts[e] = true\n\tend\n\tlocal ret = {}\n\tfor k in pairs(s) do\n\t\ttable.insert(ret,\
    \ k)\n\tend\n\ttable.sort(ret)\n\treturn ret\nend", "  local unique_table = {}\n\
    \  for _,v in ipairs(l) do\n    if not unique_table[v] then\n      unique_table[v]\
    \ = v\n    end\n  end\n  return sorted_keys(unique_table)\nend", "    local s\
    \ = {}\n    for _,v in ipairs(l) do\n        s[v] = v\n    end\n    local r =\
    \ {}\n    for k,_ in pairs(s) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n\
    \    return r\nend", "\tlocal ret = {}\n\tlocal used = {}\n\tfor _, e in ipairs(l)\
    \ do\n\t\tif not used[e] then\n\t\t\ttable.insert(ret, e)\n\t\t\tused[e] = true\n\
    \t\tend\n\tend\n\treturn ret\nend", "    local seen = {}\n    local r = {}\n \
    \   for _, v in ipairs(l) do\n        if not seen[v] then\n            r[#r+1]\
    \ = v\n            seen[v] = true\n        end\n    end\n    return r\nend", " \
    \ local elems = {}\n  for _,v in ipairs(l) do\n    if not elems[v] then\n    \
    \  elems[v] = true\n      table.insert(elems, v)\n    end\n  end\n  return elems\n\
    end", "  local list = {}\n  for _, v in ipairs(l) do\n    if not contains(list,\
    \ v) then table.insert(list, v) end\n  end\n  return list\nend", "  local seen\
    \ = {}\n  local result = {}\n  for _,v in ipairs(l) do\n    if seen[v] ~= true\
    \ then\n      table.insert(result, v)\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend", "  local elements = {}\n  for _, v in ipairs(l) do\n \
    \   elements[v] = true\n  end\n  local n = {}\n  for e in pairs(elements) do\n\
    \    n[#n + 1] = e\n  end\n  table.sort(n)\n  return n\nend", "    local result\
    \ = {}\n    local hash = {}\n    for _, v in ipairs(l) do\n        if (not hash[v])\
    \ then\n            table.insert(result, v)\n            hash[v] = true\n    \
    \    end\n    end\n    return result\nend", "\ttable.sort(l)\n\treturn table.unique(l)\n\
    end", "\tlocal s = {}\n\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not\
    \ s[v] then\n\t\t\ts[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn\
    \ r\nend", "  local a = {}\n  for _, v in ipairs(l) do\n    a[v] = true\n  end\n\
    \  local b = {}\n  for k, _ in pairs(a) do\n    table.insert(b, k)\n  end\n  table.sort(b)\n\
    \  return b\nend", "\tlocal tbl = {}\n\tlocal o = {}\n\tfor _,v in ipairs(l) do\n\
    \t\tif not tbl[v] then\n\t\t\ttable.insert(o, v)\n\t\t\ttbl[v] = true\n\t\tend\n\
    \tend\n\treturn o\nend", "  local set = {}\n  for _,v in ipairs(l) do\n    set[v]\
    \ = true\n  end\n  local r = {}\n  for k,_ in pairs(set) do\n    table.insert(r,\
    \ k)\n  end\n  table.sort(r)\n  return r\nend", "    local t = {}\n    for _,v\
    \ in ipairs(l) do\n        t[v] = true\n    end\n    local r = {}\n    for k,_\
    \ in pairs(t) do\n        table.insert(r, k)\n    end\n    table.sort(r)\n   \
    \ return r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        t[v]\
    \ = true\n    end\n    local u = {}\n    for k, _ in pairs(t) do\n        table.insert(u,\
    \ k)\n    end\n    table.sort(u)\n    return u\nend", "  local r = {}\n  local\
    \ f = {}\n  for _,v in ipairs(l) do\n    if not f[v] then\n      table.insert(r,\
    \ v)\n      f[v] = true\n    end\n  end\n  return r\nend", "  local n = {}\n \
    \ for i = 1, #l do\n    n[l[i]] = true\n  end\n  local m = {}\n  for k in pairs(n)\
    \ do\n    m[#m + 1] = k\n  end\n  table.sort(m)\n  return m\nend", "  local sorted\
    \ = {}\n  for _,v in ipairs(l) do\n    sorted[#sorted+1] = v\n  end\n  table.sort(sorted)\n\
    \  local last_value\n  local position = 1\n  for i,v in ipairs(sorted) do\n  \
    \  if v ~= last_value then\n      sorted[position] = v\n      position = position\
    \ + 1\n    end\n    last_value = v\n  end\n  return sorted\nend", "\tlocal set\
    \ = {}\n\tlocal out = {}\n\tfor i, v in ipairs(l) do\n\t\tif not set[v] then\n\
    \t\t\ttable.insert(out, v)\n\t\t\tset[v] = true\n\t\tend\n\tend\n\treturn out\n\
    end", "    local t = {}\n    for _, v in ipairs(l) do\n        if not t[v] then\n\
    \            t[v] = true\n            table.insert(t, v)\n        end\n    end\n\
    \    return t\nend", "\tlocal seen = {}\n\tlocal ret = {}\n\tfor _, entry in ipairs(l)\
    \ do\n\t\tif not seen[entry] then\n\t\t\tret[#ret+1] = entry\n\t\t\tseen[entry]\
    \ = true\n\t\tend\n\tend\n\treturn ret\nend", "  local t = {}\n  for _,v in ipairs(l)\
    \ do\n    if not t[v] then t[v] = true end\n  end\n  local n = {}\n  for v in\
    \ pairs(t) do\n    n[#n+1] = v\n  end\n  table.sort(n)\n  return n\nend", "\t\
    local hash = {}\n\tlocal res = {}\n\tfor _,v in ipairs(l) do\n\t\tif not hash[v]\
    \ then\n\t\t\tres[#res+1] = v\n\t\t\thash[v] = true\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend", "\tlocal s = {}\n\tlocal n = 0\n\tfor k,v in ipairs(l) do\n\
    \t\tif not s[v] then\n\t\t\tn = n + 1\n\t\t\ts[v] = n\n\t\tend\n\tend\n\tlocal\
    \ iter = function (s, i)\n\t\ti = i + 1\n\t\tlocal v = s[i]\n\t\tif v then\n\t\
    \t\treturn i, v\n\t\tend\n\tend\n\tlocal t = {}\n\tfor i in iter, s, 0 do\n\t\t\
    t[#t+1] = s[i]\n\tend\n\ttable.sort(t)\n\treturn t\nend", "    assert(type(l)\
    \ == \"table\", \"unique() expects a table as input.\")\n    local seen = {}\n\
    \    local unique_list = {}\n    for _, elem in ipairs(l) do\n        if not seen[elem]\
    \ then\n            unique_list[#unique_list + 1] = elem\n            seen[elem]\
    \ = true\n        end\n    end\n    return unique_list\nend", "\tlocal unique\
    \ = {}\n\tlocal n = 1\n\tfor _, v in ipairs(l) do\n\t\tif unique[v] == nil then\n\
    \t\t\tunique[v] = true\n\t\t\tl[n] = v\n\t\t\tn = n + 1\n\t\tend\n\tend\n\tl[n]\
    \ = nil\n\ttable.sort(l)\n\treturn l\nend", "    local seen = {}\n    local out\
    \ = {}\n    for _,v in ipairs(l) do\n        if not seen[v] then\n           \
    \ out[#out+1] = v\n            seen[v] = true\n        end\n    end\n    return\
    \ out\nend", "\tlocal n = {}\n\tfor _, v in ipairs(l) do\n\t\tn[v] = true\n\t\
    end\n\tl = {}\n\tfor k in pairs(n) do\n\t\tl[#l+1] = k\n\tend\n\ttable.sort(l)\n\
    \treturn l\nend", "\tlocal hash = {}\n\tlocal res = {}\n\tfor _,v in ipairs(l)\
    \ do\n\t\tif not hash[v] then\n\t\t\tres[#res+1] = v\n\t\t\thash[v] = true\n\t\
    \tend\n\tend\n\treturn res\nend", "    local s = {}\n    for _, k in ipairs(l)\
    \ do\n        s[k] = true\n    end\n    local r = {}\n    for k in pairs(s) do\n\
    \        table.insert(r, k)\n    end\n    table.sort(r)\n    return r\nend", "\t\
    local r = {}\n\tlocal h = {}\n\tfor _, v in ipairs(l) do\n\t\tif not h[v] then\n\
    \t\t\tr[#r+1] = v\n\t\t\th[v] = true\n\t\tend\n\tend\n\treturn r\nend", "\tlocal\
    \ u = {}\n\tfor _, v in ipairs(l) do\n\t\tu[v] = true\n\tend\n\treturn u\nend",
  "  local uniq = {}\n  table.sort(l)\n  for _,e in ipairs(l) do\n    if #uniq ==\
    \ 0 or uniq[#uniq] ~= e then table.insert(uniq, e) end\n  end\n  return uniq\n\
    end", "\tlocal tbl = {}\n\tlocal out = {}\n\tfor _,v in ipairs(l) do\n\t\tif not\
    \ tbl[v] then\n\t\t\ttable.insert(out, v)\n\t\t\ttbl[v] = true\n\t\tend\n\tend\n\
    \treturn out\nend", "    local r = {}\n    for _,v in ipairs(l) do\n        if\
    \ not find(r, v) then table.insert(r, v) end\n    end\n    table.sort(r)\n   \
    \ return r\nend", "\tlocal r = {}\n\tlocal v\n\tlocal n = 0\n\tfor i, v in ipairs(l)\
    \ do\n\t\tn = n + 1\n\t\tr[n] = v\n\tend\n\ttable.sort(r)\n\tlocal i = 1\n\twhile\
    \ i < n do\n\t\tif r[i] == r[i+1] then\n\t\t\ttable.remove(r, i+1)\n\t\t\tn =\
    \ n - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn r\nend", "  local\
    \ ret = {}\n  for _,v in ipairs(l) do\n    if not ret[v] then ret[v] = true end\n\
    \  end\n  return orderedKeys(ret)\nend", "\tlocal uniq = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tuniq[v] = true\n\tend\n\treturn uniq\nend", "\tif not l then return\
    \ {} end\n\tlocal res = {}\n\tlocal n = 0\n\tfor _, v in ipairs(l) do\n\t\tif\
    \ not lookup(res, v) then\n\t\t\tn = n + 1\n\t\t\tres[n] = v\n\t\tend\n\tend\n\
    \ttable.sort(res)\n\treturn res\nend", "  local elems = {}\n  for _, e in ipairs(l)\
    \ do\n    elems[e] = true\n  end\n  return keys(elems)\nend", "\tlocal s = {}\n\
    \tfor _,i in ipairs(l) do\n\t\ts[i] = true\n\tend\n\treturn keys(s)\nend", "\t\
    local t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal u =\
    \ {}\n\tfor v in pairs(t) do\n\t\tu[#u+1] = v\n\tend\n\treturn u\nend", "\tlocal\
    \ r = {}\n\tfor _, e in ipairs(l) do\n\t\tif not r[e] then\n\t\t\tr[e] = true\n\
    \t\t\ttable.insert(r, e)\n\t\tend\n\tend\n\treturn r\nend", "    local u = {}\n\
    \    for i, v in ipairs(l) do\n        if not u[v] then\n            u[v] = true\n\
    \            table.insert(u, v)\n        end\n    end\n    return u\nend", " \
    \   local unique_l = {}\n    for _, x in ipairs(l) do\n        unique_l[x] = true\n\
    \    end\n    return sorted(table_keys(unique_l))\nend", "    local res = {}\n\
    \    for _, v in ipairs(l) do\n        if not list.contains(res, v) then\n   \
    \         res[#res+1] = v\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend", "  local a = {}\n  for _,v in ipairs(l) do\n    a[v] = true\n  end\n\
    \  local r = {}\n  for k,_ in pairs(a) do\n    r[#r+1] = k\n  end\n  table.sort(r)\n\
    \  return r\nend", "    local u = {}\n    for _, v in ipairs(l) do\n        if\
    \ not contains(u, v) then\n            insert(u, v)\n        end\n    end\n  \
    \  return u\nend", "    if not l then return nil end\n    local ret = {}\n   \
    \ for _,v in ipairs(l) do\n        if not ret[v] then ret[v] = true end\n    end\n\
    \    table.sort(ret)\n    return ret\nend", "\tlocal ul = {}\n\tfor _, v in ipairs(l)\
    \ do\n\t\tul[v] = true\n\tend\n\tlocal rl = {}\n\tfor k, _ in pairs(ul) do\n\t\
    \ttable.insert(rl, k)\n\tend\n\ttable.sort(rl)\n\treturn rl\nend", "  local set\
    \ = {}\n  for _, v in ipairs(l) do\n    set[v] = true\n  end\n  local result =\
    \ {}\n  for e in pairs(set) do\n    table.insert(result, e)\n  end\n  table.sort(result)\n\
    \  return result\nend", "\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\tt[v]\
    \ = true\n\tend\n\treturn keys(t)\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    if not list.contains(u, v) then\n      u[#u+1] = v\n    end\n  end\n\
    \  return u\nend", "  local seen = {}\n  local out = {}\n  for i, v in ipairs(l)\
    \ do\n    if not seen[v] then\n      table.insert(out, v)\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "    -- Get only the unique elements from\
    \ a list\n    local unique = {}\n    for _,v in ipairs(l) do\n        unique[v]\
    \ = true\n    end\n    -- Convert the unique elements back into a list\n    local\
    \ list = {}\n    for k,_ in pairs(unique) do\n        table.insert(list, k)\n\
    \    end\n    -- Sort the list\n    table.sort(list)\n    return list\nend", " \
    \   assert(is.list(l))\n    local res = {}\n    for _, v in ipairs(l) do\n   \
    \     res[v] = true\n    end\n    return sort(keys(res))\nend", "    local s =\
    \ {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    return keys(s)\n\
    end", "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not r[v] then\n\t\t\t\
    r[v] = true\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\treturn r\nend", "  local\
    \ set = {}\n  for _, v in ipairs(l) do\n    set[v] = true\n  end\n  local l =\
    \ {}\n  for k in pairs(set) do\n    l[#l+1] = k\n  end\n  table.sort(l)\n  return\
    \ l\nend", "\tlocal r = {}\n\tfor _,v in ipairs(l) do\n\t\tif not contains(r,\
    \ v) then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "    local t = {}\n    for _, v in ipairs(l) do\n        if not contains(t,\
    \ v) then\n            t[#t+1] = v\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
