name: HumanEval_140_fix_spaces
language: lua
prompt: "-- Given a string text, replace all spaces in it with underscores, \n-- and\
  \ if a string has more than 2 consecutive spaces, \n-- then replace all consecutive\
  \ spaces with -\nlocal function fix_spaces(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fix_spaces\n\
  \    lu.assertEquals(candidate('Example'), 'Example')\n    lu.assertEquals(candidate('Mudasir\
  \ Hanif '), 'Mudasir_Hanif_')\n    lu.assertEquals(candidate('Yellow Yellow  Dirty\
  \  Fellow'), 'Yellow_Yellow__Dirty__Fellow')\n    lu.assertEquals(candidate('Exa\
  \   mple'), 'Exa-mple')\n    lu.assertEquals(candidate('   Exa 1 2 2 mple'), '-Exa_1_2_2_mple')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if text then\n        -- Escape all spaces with 2 backslashes\n\
    \        local escaped = text:gsub(\" \", \"\\\\ \")\n        -- Replace all 1\
    \ or 2 consecutive escaped spaces with 1 space\n        escaped = escaped:gsub(\"\
    (\\\\ %s+)\", \" \")\n        -- Remove the escaping\n        return escaped:gsub(\"\
    \\\\ \", \" \")\n    end\nend", "\tlocal flag = false\n\twhile text:find(\"  \"\
    ) do\n\t\ttext = text:gsub(\"  \", flag and \"-\" or \"_\")\n\t\tflag = not flag\n\
    \tend\n\treturn text\nend", "  local len = string.len(text)\n  local buff = {}\n\
    \  local count = 0\n  for i = 1, len do\n    local c = string.sub(text, i, i)\n\
    \    if c == ' ' then\n      count = count + 1\n      if count < 3 then\n    \
    \    buff[#buff + 1] = '_'\n      else\n        buff[#buff + 1] = '-'\n      end\n\
    \    else\n      count = 0\n      buff[#buff + 1] = c\n    end\n  end\n  return\
    \ table.concat(buff)\nend", "    local spaces = -1\n    for i = 1, text:len()\
    \ do\n        if text:sub(i, i) == \" \" then\n            spaces = spaces + 1\n\
    \        else\n            spaces = 0\n        end\n        if spaces >= 2 then\n\
    \            text = text:sub(1, i - spaces - 1) .. \"-\" .. text:sub(i + 1)\n\
    \            spaces = 0\n        end\n    end\n    return text:gsub(\" \", \"\
    _\")\nend", "\treturn string.gsub(text, \"%-\", \"-\", 1)\nend", "  return string.gsub(text,\
    \ \" +\", function(s)\n    if #s > 2 then return \"-\" else return \"_\" end\n\
    \  end)\nend", "  if text:match(\"%s%s+\") then\n    return text:gsub(\"%s%s+\"\
    , \"-\")\n  else\n    return text:gsub(\"%s\", \"_\")\n  end\nend", "    text\
    \ = text:gsub(\" {2,}\", \"-\")\n    text = text:gsub(\" \", \"_\")\n    return\
    \ text\nend", "    return text:gsub(\" +\", function(m)\n        if #m < 3 then\n\
    \            return \"_\"\n        else\n            return \"-\"\n        end\n\
    \    end)\nend", "    return text:gsub(\"%s+\", function(spaces)\n        if spaces:len()\
    \ > 2 then\n            return '-'\n        else\n            return '_'\n   \
    \     end\n    end)\nend", "  local result = string.gsub(text, \"  +\", \"--\"\
    )\n  result = string.gsub(result, \" \", \"_\")\n  return result\nend", "    local\
    \ output = text:gsub(\"%s%s+\", \"-\"):gsub(\"%s\", \"_\")\n    return output\n\
    end", "    return string.gsub(text, \"([ ]+)\", function(w) \n        local s\
    \ = \"\"\n        for c in w:gmatch(\" \") do\n            s = s .. \"_\"\n  \
    \      end\n        return string.gsub(s, \"[_-]+\", \"-\")\n    end)\nend", "\t\
    if not text then return end\n\tif text:find('%s') then\n\t\ttext = text:gsub('%s+',\
    \ '_')\n\t\ttext = text:gsub('_+', '-')\n\tend\n\treturn text\nend", "    local\
    \ str = text\n    str = string.gsub(str, ' ', '_')\n    str = string.gsub(str,\
    \ '_+', '-')\n    return str\nend", "\tlocal result = text:gsub(\"%s\", \"_\"\
    )\n\tresult = result:gsub(\"__+\", \"-\"):gsub(\"%-%-\", \"-\"):gsub(\"$-\", \"\
    \")\n\tresult = result:gsub(\"^-\", \"\")\n\treturn result\nend", "    local res\
    \ = text:gsub(\"%s+\", \" \")\n    res = res:gsub(\" \", \"_\")\n    return res\n\
    end", "  text = text:gsub(\"^ +\", \"\"):gsub(\" +$\", \"\")\n  text = text:gsub(\"\
    \ \", \"_\")\n  text = text:gsub(\"_+\", \"-\")\n  return text\nend", "\treturn\
    \ string.gsub(text, \"%s+\", \"_\")\nend", "    text = string.gsub(text, \" +\"\
    , \"_\")\n    text = string.gsub(text, \"_-\", \"_\")\n    return text\nend",
  "  local t\n  t = text:gsub(\"  \", \" \")\n  t = t:gsub(\"  \", \" \")\n  t = t:gsub(\"\
    \ \", \"_\")\n  t = t:gsub(\"  \", \"-\")\n  t = t:gsub(\"  \", \"-\")\n  return\
    \ t\nend", "\tif type(text) ~= \"string\" then\n\t\ttext = tostring(text)\n\t\
    end\n\treturn text:gsub(\"%s+\", function(spaces)\n\t\tif #spaces == 1 then\n\t\
    \t\treturn \"_\"\n\t\telse\n\t\t\treturn string.rep(\"-\", #spaces - 1) .. \"\
    _\"\n\t\tend\n\tend)\nend", "\tlocal result = text:gsub(\"[ ]+\", \"_\")\n\tresult\
    \ = result:gsub(\"(%s+)\", \"-\")\n\treturn result\nend", "  return text:gsub(\"\
    %s+\", function(spaces)\n    if #spaces > 2 then\n      return \"-\"\n    else\n\
    \      return \"_\"\n    end\n  end)\nend", "    text = string.gsub(text, ' +',\
    \ '-')\n    text = string.gsub(text, ' ', '_')\n    return text\nend", "\tif not\
    \ text or text == \"\" then\n\t\treturn text\n\tend\n\t\n\ttext = string.gsub(text,\
    \ \"  \", \" \")\n\ttext = string.gsub(text, \"  \", \" \")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub(text,\
    \ \" \", \"_\")\n\ttext = string.gsub(text, \" \", \"_\")\n\ttext = string.gsub",
  "    return text:gsub(\"%s%s+\", \"-\"):gsub(\"%s\", \"_\")\nend", "    return (string.gsub(text,\
    \ \"^%s*(.-)%s*$\", \"%1\"))\nend", "\tif not text then return end\n\ttext = text:gsub(\"\
    \  \", \" \")\n\ttext = text:gsub(\"  \", \" \")\n\ttext = text:gsub(\" \", \"\
    _\")\n\ttext = text:gsub(\" \", \"-\")\n\treturn text\nend", "    text = string.gsub(text,\
    \ '[%s+]', ' ')\n    text = string.gsub(text, '[%s]', '_')\n    return text\n\
    end", "\tlocal res = string.gsub(text, \"^%s+\", \"\") -- remove heading spaces\n\
    \tres = string.gsub(res, \"%s+$\", \"\") -- remove tailing spaces\n\tres = string.gsub(res,\
    \ \" %s*\", \"_\") -- replace space with _\n\tres = string.gsub(res, \"_+\", \"\
    _\") -- replace consecutive _ with one _\n\tres = string.gsub(res, \"__\", \"\
    _\") -- replace consecutive _ with one _\n\tres = string.gsub(res, \"_%s\", \"\
    _\") -- replace space with _\n\tres = string.gsub(res, \"%s_\", \"_\") -- replace\
    \ space with _\n\tres = string.gsub(res, \"%s+\", \"-\") -- replace multiple space\
    \ with -\n\tres = string.gsub(res, \"-+\", \"-\") -- replace multiple - with one\
    \ -\n\treturn res\nend", "    local fixed = string.gsub(text, \"[ ]+\", \" \"\
    )\n    fixed = string.gsub(fixed, \" +\", \"_\")\n    fixed = string.gsub(fixed,\
    \ \"^_\", \"\")\n    fixed = string.gsub(fixed, \" _\", \"_\")\n    fixed = string.gsub(fixed,\
    \ \"_$\", \"\")\n    return fixed\nend", "    local t = {}\n    for word in gmatch(text,\
    \ \"[^%s]+\") do\n        t[#t+1] = word\n    end\n    return gsub(gsub(concat(t,\"\
    _\"),\"_+\",\"-\"),\"_\",\" \")\nend", "    local fixed = string.gsub(text, \"\
    \ +\", \"_\")\n    fixed = string.gsub(fixed, \"_+\", \"-\")\n    return fixed\n\
    end", "    return text:gsub(\"  \", \" - \"):gsub(\" \", \"_\")\nend", "    return\
    \ text:gsub(\"  +\", \"-\"):gsub(\" \", \"_\")\nend", "  local res = text:gsub(\"\
    %s+\", \"_\")\n  return res\nend", "    text = text:gsub(\"%s+\", \"__\")\n  \
    \  text = text:gsub(\"%s\", \"_\")\n    return text\nend", "\tlocal first = string.gsub(text,\
    \ \"^%s+\", \"\")\n\tlocal returner = string.gsub(first, \"  +\", \" \")\n\treturner\
    \ = string.gsub(returner, \" \", \"_\")\n\treturner = string.gsub(returner, \"\
    \ \", \"_\")\n\treturner = string.gsub(returner, \" \", \"_\")\n\treturn returner\n\
    end", "    local text = string.gsub(text, \" +\", \" \")\n    local text = string.gsub(text,\
    \ \" \", \"_\")\n    local text = string.gsub(text, \"_-_-_-\", \"---\")\n   \
    \ local text = string.gsub(text, \"_-_-\", \"--\")\n    return text\nend", " \
    \ local pos = 0\n  local new_text = \"\"\n  for space in text:gmatch(\"%s\") do\n\
    \    pos = pos + 1\n    if pos == 1 then\n      new_text = new_text .. space\n\
    \    else\n      new_text = new_text .. \"_\"\n    end\n  end\n  new_text = new_text:gsub(\"\
    _-\", \"-\"):gsub(\"_\", \" \")\n  return new_text\nend", "    if type(text) ~=\
    \ \"string\" then return nil end\n    if text:match(\"%s\") == nil then return\
    \ text end", "    local new_text = string.gsub(text, \" +\", \"_\")\n    new_text\
    \ = string.gsub(new_text, \"__+\", \"-\")\n    return new_text\nend", "    return\
    \ tostring(text):gsub(\"(%s+)\", function(spaces)\n        if #spaces == 1 then\n\
    \            return \"_\"\n        else\n            return \"-\"\n        end\n\
    \    end)\nend", "    text = text:gsub(\"%s+\", \"-\")\n    text = text:gsub(\"\
    %-%-\", \"-\")\n    text = text:gsub(\"%-\", \"_\")\n    return text\nend", "\t\
    local result = string.gsub(text, \" \", \"_\")\n\tresult = string.gsub(result,\
    \ \"%s%s%s+\", \"-\")\n\treturn result\nend", "    text = text:gsub(\"%s%s+\"\
    , \"___\")\n    text = text:gsub(\"%s\", \"_\")\n    text = text:gsub(\"___\"\
    , \"-\")\n    return text\nend", "\tlocal ret = text:gsub(\"(%s%s+)\", function(a)\
    \ return a:len() - 1 + a:sub(1,1) end)\n\treturn ret:gsub(\"%s\", \"_\")\nend",
  "    text = text:gsub(\"  +\", \"-\")\n    text = text:gsub(\" \", \"_\")\n    return\
    \ text\nend", "    text = string.gsub(text, \"  \", \"-\")\n    text = string.gsub(text,\
    \ \" \", \"_\")\n    return text\nend", "\ttext = text:gsub(\"%s+\", \" \")\n\t\
    text = text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"%-+\", \"-\")\n\treturn text\n\
    end", "\treturn text:gsub(\" +\", function(s)\n\t\tif #s > 2 then\n\t\t\treturn\
    \ \"-\";\n\t\telse\n\t\t\treturn \"_\";\n\t\tend\n\tend)\nend", "  local count\
    \ = 0\n  local output = \"\"\n  for ch in text:gmatch(\".\") do\n    if ch ~=\
    \ \" \" then\n      count = 0\n      output = output .. ch\n    else\n      count\
    \ = count + 1\n      if count > 2 then\n        output = output .. \"-\"\n   \
    \   else\n        output = output .. \"_\"\n      end\n    end\n  end\n  return\
    \ output\nend", "    if not text then return end\n    text = string.gsub(text,\
    \ \" +\", \" \")\n    text = string.gsub(text, \" \", \"_\")\n    text = string.gsub(text,\
    \ \"_-_-_-\", \"-\")\n    text = string.gsub(text, \"_-_-\", \"-\")\n    text\
    \ = string.gsub(text, \"_-_\", \"-\")\n    return text\nend", "\ttext = text:gsub(\"\
    %s+\", function(s)\n\t\tif #s <= 2 then\n\t\t\treturn s:gsub(\"%s+\", \"_\")\n\
    \t\telse\n\t\t\treturn \"_\"\n\t\tend\n\tend)\n\treturn text\nend", "    return\
    \ text:gsub(\"%s+\", function(c)\n        return c:len() > 2 and \"-\" or \"_\"\
    \n    end)\nend", "    text = string.gsub(text, \" \", \"_\")\n    text = string.gsub(text,\
    \ \"_+\", \"-\")\n    return text\nend", "    return string.gsub(text, \"  +\"\
    , \"--\")\n        :gsub(\" \", \"_\")\nend", "  return text:gsub(\"%s+\", function(spaces)\n\
    \    if string.len(spaces) > 2 then\n      return \"-\"\n    else\n      return\
    \ \"_\"\n    end\n  end)\nend", "\tlocal t = {}\n\tfor s in text:gmatch(\"[^%s]+\"\
    ) do\n\t\ttable.insert(t, s)\n\tend\n\treturn table.concat(t, \"_\")\nend", " \
    \   text = string.gsub(text, \"%s+\", \" \")\n    text = string.gsub(text, \"\
    \ \", \"_\")\n    text = string.gsub(text, \"_-_\", \"-\")\n    return text\n\
    end", "\treturn string.gsub(text, '%s', '_')\nend", "    local new_text = \"\"\
    \n    local consecutive_space = false\n    for i = 1, #text do\n        local\
    \ c = text:sub(i, i)\n        if c == \" \" then\n            if consecutive_space\
    \ then\n                new_text = new_text .. \"-\"\n            else\n     \
    \           new_text = new_text .. \"_\"\n                consecutive_space =\
    \ true\n            end\n        else\n            new_text = new_text .. c\n\
    \            consecutive_space = false\n        end\n    end\n    return new_text\n\
    end", "    local result = text:gsub(\" \", \"_\")\n    result = result:gsub(\"\
    (%s+)\", \"-\")\n    return result\nend", "\tif text:match(\"  \") then\n\t\t\
    text = text:gsub(\"  \", \"-\")\n\tend\n\ttext = text:gsub(\" \", \"_\")\n\treturn\
    \ text\nend", "  if not text then return end\n  local _, n = string.gsub(text,\
    \ \" \", \"_\")\n  if n > 1 then\n    _, n = string.gsub(text, \"    \", \"  \
    \  \")\n    if n > 1 then\n      text = string.gsub(text, \" +\", \"-\")\n   \
    \ end\n  end\n  return text\nend", "  text = string.gsub(text, \"%s%s+\", \"-\"\
    )\n  text = string.gsub(text, \"%s\", \"_\")\n  return text\nend", "\tlocal fixed\
    \ = string.gsub(text, \" \", \"_\")\n\tif string.find(fixed, \"__\") then\n\t\t\
    fixed = string.gsub(fixed, \"__\", \"-\")\n\tend\n\treturn fixed\nend", "    text\
    \ = string.gsub(text, \"[^%s]+\", \"%1_\")\n    text = string.gsub(text, \"%s+\"\
    , \"-\")\n    return text\nend", "\treturn text:gsub(\"(%s%s+)\", \"-\"):gsub(\"\
    %s\", \"_\")\nend", "    local r, c = text:gsub(\"%s+\", \" \")\n    return c\
    \ > 1 and text:gsub(\" \", \"_\") or text:gsub(\"%s+\", \"-\")\nend", "\tlocal\
    \ last_space = false\n\tlocal is_long_space = false\n\tlocal char_list = {}\n\t\
    for char in text:gmatch('[^%s]') do\n\t\tchar_list[#char_list + 1] = char\n\t\
    end\n\tfor i, char in ipairs(char_list) do\n\t\tif char == ' ' then\n\t\t\tif\
    \ not last_space then\n\t\t\t\tchar_list[i] = '_'\n\t\t\telse\n\t\t\t\tis_long_space\
    \ = true\n\t\t\tend\n\t\t\tlast_space = true\n\t\telse\n\t\t\tif is_long_space\
    \ then\n\t\t\t\tchar_list[i - 1] = '-'\n\t\t\t\tis_long_space = false\n\t\t\t\
    end\n\t\t\tlast_space = false\n\t\tend\n\tend\n\tif is_long_space then\n\t\tchar_list[#char_list]\
    \ = '-'\n\tend\n\treturn table.concat(char_list)\nend", "  local last = 0\n  local\
    \ ret = {}\n  for s,e in text:gmatch(\"()%s()\") do\n    if s == 1 or last ==\
    \ 1 then\n      ret[#ret+1] = text:sub(last+1, s-1)\n      ret[#ret+1] = '-'\n\
    \    else\n      ret[#ret+1] = text:sub(last+1, s-1)\n      ret[#ret+1] = '_'\n\
    \    end\n    last = e\n  end\n  ret[#ret+1] = text:sub(last+1)\n  return table.concat(ret)\n\
    end", "\tlocal pattern = '%s+'\n\tlocal replacement = '_'\n\t\n\t-- return text:gsub('%s+',\
    \ '_')\n\t\n\t-- if a string has more than 2 consecutive spaces, \n\t-- then replace\
    \ all consecutive spaces with -\n\treturn text:gsub(pattern, function(s)\n\t\t\
    if #s > 2 then return replacement else return '-' end\n\tend)\nend", "    if text\
    \ == nil then return text end\n    return (text:gsub(\"%s+\", function(sp)\n \
    \               if #sp == 1 then\n                    return \"_\"\n         \
    \       else\n                    return \"-%.%.\"\n                end\n    \
    \        end))\nend", "\ttext = text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"\
    _%s+\", \"_\")\n\ttext = text:gsub(\"%s+\", \"-\")\n\treturn text\nend", "   \
    \ if type(text) ~= \"string\" then\n        return\n    end\n    text = text:gsub(\"\
    \ +\", \" \")\n    text = text:gsub(\" \", \"_\")\n    text = text:gsub(\"_+\"\
    , \"-\")\n    return text\nend", "    text = text:gsub(\"%s+\", \"_\")\n    text\
    \ = text:gsub(\"%-\", \"_\")\n    return text\nend", "  local t_text = split(text)\n\
    \  local len = table.getn(t_text)\n  for i = 1, len do\n    if t_text[i] == ''\
    \ then\n      table.remove(t_text, i)\n      len = len - 1\n    end\n  end\n \
    \ len = table.getn(t_text)\n  if len == 1 then\n    return t_text[1]\n  end\n\
    \  local res = t_text[1]\n  for i = 2, len - 1 do\n    if string.find(t_text[i],\
    \ \"  \") then\n      res = res .. '-' .. t_text[i]\n    else\n      res = res\
    \ .. '_' .. t_text[i]\n    end\n  end\n  res = res .. '_' .. t_text[len]\n  return\
    \ res\nend", "  return string.gsub(text, \"  \", \"-\")\nend", "\ttext = text:gsub(\"\
    %s%s+\", \" \")\n\ttext = text:gsub(\" \", \"_\")\n\treturn text\nend", "\treturn\
    \ text:gsub(\"  +\", \"-\")\n\t\t:gsub(\" \", \"_\")\nend", "    if not text then\
    \ return end\n    local cspaces = 0\n    return text:gsub(\" \", function()\n\
    \        cspaces = cspaces + 1\n        if cspaces > 2 then\n            return\
    \ \"-\"\n        else\n            return \"_\"\n        end\n    end):gsub(\"\
    -\", \"_-_\")\nend", "  if text == nil then return nil end\n  local t = \"\"\n\
    \  for s in string.gmatch(text, \"[^%s]+\") do\n    t = t .. \"_\" .. s\n  end\n\
    \  if text:match(\"%s\") then\n    t = t:gsub(\"__\", \"_\")\n    t = t:gsub(\"\
    _-\", \"-\")\n    t = t:gsub(\"_$\", \"\")\n    t = t:gsub(\"^_\", \"\")\n  end\n\
    \  return t\nend", "\tlocal fixed = string.gsub(text, \" \", \"_\")\n\tlocal fixed\
    \ = string.gsub(fixed, \"  \", \"-\")\n\treturn fixed\nend", "\tlocal subbed =\
    \ text:gsub(\" {2,}\", \" - \")\n\tlocal replaced = subbed:gsub(\" \", \"_\")\n\
    \treturn replaced\nend", "    if not text then\n        return\n    end\n    text\
    \ = text:gsub(\"%s+\", \" \")\n    text = text:gsub(\"%-%-%-%-%-%-\", \"______\"\
    )\n    text = text:gsub(\"%-%-%-%-%-\", \"_____\")\n    text = text:gsub(\"%-%-%-%-\"\
    , \"____\")\n    text = text:gsub(\"%-%-%-\", \"___\")\n    text = text:gsub(\"\
    %-%-\", \"__\")\n    text = text:gsub(\" \", \"_\")\n    text = text:gsub(\"______\"\
    , \"-----\")\n    text = text:gsub(\"_____\", \"----\")\n    text = text:gsub(\"\
    ____\", \"---\")\n    text = text:gsub(\"___\", \"--\")\n    text = text:gsub(\"\
    __\", \"-\")\n    return text\nend", "\tlocal pattern = \"%s+\"\n\tlocal result\
    \ = string.gsub(text, pattern, function(m)\n\t\tif (string.len(m) > 2) then\n\t\
    \t\treturn \"-\"\n\t\telse\n\t\t\treturn \"_\"\n\t\tend\n\tend)\n\treturn result\n\
    end", "  return text:gsub(\" \", \"_\"):gsub(\"_+\", \"-\")\nend", "    return\
    \ text:gsub(\" +\", \"_\")\nend", "    if text == nil then return nil end\n  \
    \  return string.gsub(text, \"%s+\", function(s)\n        if #s > 2 then\n   \
    \         return \"-\"\n        else\n            return \"_\"\n        end\n\
    \    end)\nend", "    return text:gsub(\"%s+\", function(word)\n        if word:len()\
    \ > 2 then\n            return \"-\"\n        else\n            return \"_\"\n\
    \        end\n    end)\nend", "\treturn (string.gsub(text, \" +\", \"_\"))\nend",
  "\ttext = text:gsub(\"  \", \" \")\n\ttext = text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"\
    __\", \"_\")\n\ttext = text:gsub(\"_+\", \"-\")\n\treturn text\nend", "    text\
    \ = text:gsub(\" \", \"_\")\n    text = text:gsub(\"%s+\", \"-\")\n    return\
    \ text\nend", "    return replace_all(text, \"  \", \" _ \")\nend", "\treturn\
    \ (text:gsub(\"^[%s]*\", \"\"):gsub(\"[%s]*$\", \"\"):gsub(\"[%s]+\", \"_\"):gsub(\"\
    [%s]*[-][%s]*\", \"-\"))\nend", "    return text:gsub(\"%s\", \"_\"):gsub(\"%s%-%s\"\
    , \"-\"):gsub(\"^%s\", \"-\"):gsub(\"%s$\", \"-\")\nend", "\tif text:find(\"%s\"\
    ) then\n\t\ttext = text:gsub(\"%s+\", \"_\")\n\t\ttext = text:gsub(\"_-\", \"\
    -\")\n\tend\n\treturn text\nend", "  local underscore = text:gsub(\" +\", \"_\"\
    )\n  local dash = underscore:gsub(\"_+\", \"-\")\n  return dash\nend", "  local\
    \ res = text:gsub(\"  +\", \" \")\n  res = res:gsub(\" \", \"_\")\n  return res\n\
    end", "    local new = text:gsub(\"%s+\", ' ')\n    new = new:gsub(\"%s\", '_')\n\
    \    return new\nend", "    text = string.gsub(text, \"^%s+\", \"\") -- strip\
    \ leading spaces\n    text = string.gsub(text, \"%s+$\", \"\") -- strip trailing\
    \ spaces\n    text = string.gsub(text, \"%s+\", \"_\") -- replace spaces with\
    \ _\n    text = string.gsub(text, \"_{2,}\", \"-\") -- replace more than 2 space\
    \ with -\n    return text\nend", "  text = gsub(text, \"  \", \" \")\n  text =\
    \ gsub(text, \"  \", \" \")\n  text = gsub(text, \" \", \"_\")\n  text = gsub(text,\
    \ \"  \", \"-\")\n  text = gsub(text, \"  \", \"-\")\n  return text\nend", " \
    \   if not text then return end\n    text = text:gsub(\"  +\", \"-\")\n    text\
    \ = text:gsub(\" \", \"_\")\n    return text\nend", "\tlocal res = text:gsub(\"\
    \  \", \" \")\n\tres = res:gsub(\" \", \"_\")\n\tres = res:gsub(\"_-\", \"-\"\
    )\n\treturn res\nend", "\treturn utils.srep(utils.srep(text, \" \", \"_\"), \"\
    \  \", \"--\")\nend", "    local result = string.gsub(text, \" +\", function(spaces)\n\
    \        if (#spaces > 2) then\n            return \"-\"\n        else\n     \
    \       return \"_\"\n        end\n    end)\n    return result\nend", "\t-- First,\
    \ replace all spaces with underscores\n\ttext = text:gsub(\"%s\", \"_\")\n\t--\
    \ Then, replace all sets of 3 or more underscores with 2.\n\ttext = text:gsub(\"\
    %_%_%_+\", \"__\")\n\t-- Finally, replace all sets of 2 underscores with a single\
    \ -\n\ttext = text:gsub(\"%_%_\", \"-\")\n\treturn text\nend", "    return string.gsub(text,\
    \ \"  +\", \" \"):gsub(\" \", \"_\")\nend", "\tlocal i, n = 0, #text\n\tlocal\
    \ tmp = {}\n\twhile i < n do\n\t\tif text:sub(i, i) == ' ' then\n\t\t\ttmp[#tmp\
    \ + 1] = '_'\n\t\t\twhile text:sub(i, i) == ' ' do\n\t\t\t\ttmp[#tmp + 1] = '-'\n\
    \t\t\t\ti = i + 1\n\t\t\tend\n\t\telse\n\t\t\ttmp[#tmp + 1] = text:sub(i, i)\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn table.concat(tmp)\nend", "\tif string.find(text,\
    \ \"[%s\\n]+\") then\n\t\ttext = string.gsub(text, \"[%s\\n]+\", \"_\")\n\t\t\
    if string.find(text, \"__\") then\n\t\t\ttext = string.gsub(text, \"__\", \"-\"\
    )\n\t\tend\n\tend\n\treturn text\nend", "  return (text:gsub(\"^%s+\", \"\"):gsub(\"\
    %s+$\", \"\"):gsub(\"%s+\", \"_\"):gsub(\"[ ]+\", \"-\"))\nend", "\ttext = text:gsub(\"\
    %s+\", \"_\")\n\treturn text\nend", "\tif type(text) ~= \"string\" then\n\t\t\
    return nil\n\tend\n\tlocal text = text:gsub(\"\\n\", \" \")\n\tlocal text = text:gsub(\"\
    \\t\", \" \")\n\tlocal text = text:gsub(\"^%s+\", \"\")\n\tlocal text = text:gsub(\"\
    %s+$\", \"\")\n\ttext = text:gsub(\"%s+\", \" \")\n\ttext = text:gsub(\" \", \"\
    _\")\n\treturn text\nend", "\ttext = string.gsub(text, \"^%s+\", \"\")\n\ttext\
    \ = string.gsub(text, \"%s+$\", \"\")\n\ttext = string.gsub(text, \" +\", \"_\"\
    )\n\ttext = string.gsub(text, \"%-%-%-\", \"___\")\n\ttext = string.gsub(text,\
    \ \"%-%-\", \"__\")\n\treturn text\nend", "\tlocal modtext = text:gsub(\"%s+\"\
    , \"_\")\n\tmodtext = modtext:gsub(\"%_+\", \"-\")\n\treturn modtext\nend", "\t\
    local t = {}\n\tfor v in text:gmatch(\"%S+\") do\n\t\ttable.insert(t, v)\n\tend\n\
    \treturn table.concat(t, \"_\")\nend", "    if text then\n        return string.gsub(text,\
    \ \" +\", \"_\")\n    end\n    return text\nend", "    return string.gsub(text,\
    \ \"  +\", \" \"):gsub(\" \", \"_\")\nend", "  local _, count = string.gsub(text,\
    \ \"%s+\", \"_\")\n  if count > 2 then\n    return string.gsub(text, \"%s+\",\
    \ \"-\")\n  else\n    return string.gsub(text, \"%s+\", \"_\")\n  end\nend", " \
    \   local result = string.gsub(text, \"[%s]+\", function(s)\n        local len\
    \ = string.len(s)\n        if len > 2 then\n            return \"-\";\n      \
    \  else\n            return \"_\";\n        end\n    end)\n    return result\n\
    end", "\tif text then\n\t\ttext = text:gsub(\"%s+\", \" \")\n\t\ttext = text:gsub(\"\
    \ \", \"_\")\n\t\ttext = text:gsub(\"%-%-+\", \"-\")\n\t\ttext = text:gsub(\"\
    %_%_+\", \"_\")\n\tend\n\treturn text\nend", "    local fixed = text:gsub(\"%s\"\
    , \"_\")\n    fixed = fixed:gsub(\"_+\", \"-\")\n    return fixed\nend", "   \
    \ text = text:gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\n    local text2 = text:gsub(\"\
    [\\t%s]+\", \"_\")\n    if text ~= text2 then\n        text = text2:gsub(\"_+\"\
    , \"-\")\n    end\n    return text\nend", "  local s, c = string.gsub(text, \"\
    \  \", \" \")\n  while (c > 0) do\n    s, c = string.gsub(s, \"  \", \" \")\n\
    \  end\n  s = string.gsub(s, \" \", \"_\")\n  return s\nend", "  text = string.gsub(text,\
    \ \"%. \", \" \")\n  text = string.gsub(text, \"%. \", \" \")\n  text = string.gsub(text,\
    \ \" \", \"_\")\n  text = string.gsub(text, \"%s%s+\", \"-\")\n  return text\n\
    end", "\t-- Spaces\n\ttext = text:gsub(\"%s+\", function(m)\n\t\tif #m > 2 then\n\
    \t\t\treturn \"-\"\n\t\telse\n\t\t\treturn \"_\"\n\t\tend\n\tend)\n\treturn text\n\
    end", "\t-- If there is no space character in the text, \n\t-- then we can return\
    \ the text in its current form\n\tif text:find('%s') == nil then\n\t\treturn text\n\
    \tend\n\t-- We can't just do a split, since we want to keep the consecutive dashes\n\
    \tlocal result = ''\n\tlocal word = ''\n\tlocal count = 0\n\tfor i = 1, #text\
    \ do\n\t\tlocal char = text:sub(i, i)\n\t\tif char == ' ' then\n\t\t\tcount =\
    \ count + 1\n\t\t\tif count == 1 then\n\t\t\t\tresult = result .. word .. '_'\n\
    \t\t\t\tword = ''\n\t\t\telseif count == 2 then\n\t\t\t\tresult = result .. '-'\n\
    \t\t\t\tcount = 0\n\t\t\tend\n\t\telse\n\t\t\tword = word .. char\n\t\t\tcount\
    \ = 0\n\t\tend\n\tend\n\treturn result .. word\nend", "    local c_space = string.byte('\
    \ ')\n    local c_u = string.byte('_')\n    local c_hyphen = string.byte('-')\n\
    \    local prev_c\n    local i = 1\n    while i <= #text do\n        local c =\
    \ string.byte(text, i)\n        if c == c_space then\n            local next_c\
    \ = string.byte(text, i + 1)\n            if prev_c == c_space then\n        \
    \        if next_c == c_space then\n                    text = text:sub(1, i -\
    \ 1) .. \"-\" .. text:sub(i + 1)\n                else\n                    text\
    \ = text:sub(1, i - 1) .. \"_\" .. text:sub(i + 1)\n                end\n    \
    \        else\n                text = text:sub(1, i - 1) .. \"_\" .. text:sub(i\
    \ + 1)\n            end\n        end\n        prev_c = c\n        i = i + 1\n\
    \    end\n    return text\nend", "    text = text:gsub(\" +\", \" \")\n    text\
    \ = text:gsub(\"%-\", \"%%-\")\n    text = text:gsub(\" \", \"_\")\n    text =\
    \ text:gsub(\"%%%-\", \"-\")\n    return text\nend", "    if not text then return\
    \ end\n    if not string.find(text, \" \") then return text end", "    local fixed\
    \ = text:gsub(\"%s+\", \"_\")\n    return fixed\nend", "    text = text:gsub(\"\
    %s{1,}\", \"_\")\n    text = text:gsub(\"_+\", \"-\")\n    return text\nend",
  "    if not text then return \"\" end\n    return text:gsub(\" +\", function(spaces)\n\
    \        if #spaces > 2 then\n            return \"-\"\n        else\n       \
    \     return \"_\"\n        end\n    end)\nend", "    text = text:gsub(\"%s+\"\
    , \" \")\n    text = text:gsub(\"%s\", \"_\")\n    return text\nend", "\t-- replace\
    \ all spaces with underscores\n\tlocal new_text = text:gsub(\"%s\", \"_\")\n\t\
    \n\t-- replace all consecutive spaces with -\n\tnew_text = new_text:gsub(\"%_%_+\"\
    , \"-\")\n\t\n\treturn new_text\nend", "\ttext = string.gsub(text, \"  \", \"\
    \ - \")\n\ttext = string.gsub(text, \" \", \"_\")\n\treturn text\nend", "    text\
    \ = string.gsub(text, '%s', '_')\n    text = string.gsub(text, '%s-', '-')\n \
    \   return text\nend", "    return text:gsub(\"  +\", \"-\"):gsub(\" \", \"_\"\
    )\nend", "    text = text:gsub(\" +\", function(s)\n        if #s > 2 then return\
    \ \"-\" else return \"_\" end\n    end)\n    return text\nend", "\t--return text:gsub(\"\
    \ +\", function(s) return #s > 2 and \"-\" or \" \" end)\n\treturn text:gsub(\"\
    \ +\", function(s) return \" \" end)\nend", "    return text:gsub(\"%s+\", \"\
    -\")\nend", "  text = text:gsub(\"%s\", \"_\")\n  text = text:gsub(\"%-%-%-%-%-\"\
    , \"-----\")\n  text = text:gsub(\"%-%-%-%-\", \"----\")\n  text = text:gsub(\"\
    %-%-%-\", \"---\")\n  text = text:gsub(\"%-%-\", \"--\")\n  return text\nend",
  "\tlocal output = \"\"\n\tfor i = 1, #text do\n\t\tif text:sub(i, i) == \" \" then\n\
    \t\t\tif #output > 0 and output:sub(-1) == \" \" then\n\t\t\t\toutput = output\
    \ .. \"-\"\n\t\t\telse\n\t\t\t\toutput = output .. \"_\"\n\t\t\tend\n\t\telse\n\
    \t\t\toutput = output .. text:sub(i, i)\n\t\tend\n\tend\n\treturn output\nend",
  "    text = text:gsub(\"%s\", \"_\")\n    text = text:gsub(\"%_%_%_+\", \"-\")\n\
    \    return text\nend", "\tlocal fixed = text:gsub(\" +\", \" \")\n\tfixed = fixed:gsub(\"\
    \ \", \"_\")\n\tfixed = fixed:gsub(\"-\", \" \")\n\tfixed = fixed:gsub(\"_\",\
    \ \"-\")\n\treturn fixed\nend", "    local _, count = text:gsub(\" \", \"_\")\n\
    \    if count > 1 then\n        text = text:gsub(\" \", \"_\")\n    end\n    text\
    \ = text:gsub(\"_+\", \"-\")\n    return text\nend", "    if not text then\n \
    \       return text\n    end\n    -- first case: consecutive spaces\n    text\
    \ = text:gsub(\"%s%s+\", function(s)\n        local replacement = \"\"\n     \
    \   for i = 1, #s do\n            replacement = replacement .. \"-\"\n       \
    \ end\n        return replacement\n    end)\n    -- second case: simple spaces\n\
    \    text = text:gsub(\"%s\", \"_\")\n    return text\nend", "  if not text then\
    \ return nil end\n  local fixed = text:gsub(\"%s+\", \" \")\n  fixed = fixed:gsub(\"\
    \ \", \"_\")\n  return fixed\nend", "    text = text:gsub(\"%s+\", \" \")\n  \
    \  text = text:gsub(\" \", \"_\")\n    text = text:gsub(\"%s+\", \"-\")\n    return\
    \ text\nend", "\ttext = text:gsub(\"%s\", \"_\")\n\ttext = text:gsub(\"%_%_+\"\
    , \"-\")\n\treturn text\nend", "    text = string.gsub(text, \"%s+\", \"_\")\n\
    \    return string.gsub(text, \"_+\", \"-\")\nend", "    local new_text = string.gsub(text,\
    \ \" \", \"_\")\n    new_text = string.gsub(new_text, \"%-%-%-\", \"-\"):gsub(\"\
    %-%-\", \"-\")\n    return new_text\nend", "    return text:gsub(\"%s+\", \" \"\
    ):gsub(\"%s\", \"_\")\nend", "    text = string.gsub(text, \" \", \"_\")\n   \
    \ text = string.gsub(text, \"%-%-%-\", \"-\")\n    text = string.gsub(text, \"\
    %-%-\", \"-\")\n    return text\nend", "\tif text:match(\"^%s+$\") then\n\t\t\
    return \"_\"\n\telse\n\t\ttext = text:gsub(\"%s%s+\", \"-\")\n\t\treturn text:gsub(\"\
    %s\", \"_\")\n\tend\nend", "\t-- remove spaces at the end\n\ttext = text:gsub(\"\
    \ *$\", \"\")\n\t-- replace spaces with underscores\n\ttext = text:gsub(\" \"\
    , \"_\")\n\t-- replace 2 or more spaces with -\n\ttext = text:gsub(\"[ \\t]+\"\
    , \"-\")\n\t-- replace three or more underscores with two underscores\n\ttext\
    \ = text:gsub(\"[_-]{3,}\", \"__\")\n\treturn text\nend", "\treturn text:gsub(\"\
    %s\", \"_\"):gsub(\"%s%s%s+\", \"-\"):gsub(\"__\", \"_\")\nend", "\ttext = text:gsub(\"\
    %s+\", \" \")\n\ttext = text:gsub(\"%s\", \"_\")\n\treturn text\nend", "    text\
    \ = string.gsub(text, ' +', '_')\n    text = string.gsub(text, '_+', '-')\n  \
    \  return text\nend", "\tlocal no_spaces_text = text:gsub(\"%s+\", \"_\")\n\t\
    return no_spaces_text:gsub(\"_+\", \"-\")\nend", "    return text:gsub(\"^%s+\"\
    , \"\"):gsub(\"%s+$\", \"\"):gsub(\"%s+\", \"_\"):gsub(\"_+\", \"-\")\nend", '  return
    text:gsub("%s", "_"):gsub("%s%s+", "-"):gsub
  "    if text == nil then return end\n    text = text:gsub(\"\\r\",\"\")\n    text\
    \ = text:gsub(\"\\n\",\"\")\n    text = text:gsub(\"\\t\",\"\")\n    text = text:gsub(\"\
    \ +\",\" \")\n    text = text:gsub(\" \",\"_\")\n    text = text:gsub(\"__+\"\
    ,\"-\")\n    return text\nend", "\ttext = text:gsub(\"%s+\", \" \")\n\ttext =\
    \ text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"_+\", \"-\")\n\treturn text\n\
    end", "    local len = #text\n    local i = 1\n    local result = ''\n    local\
    \ num_consec_spaces = 0\n    while i <= len do\n        if string.sub(text, i,\
    \ i) == ' ' then\n            num_consec_spaces = num_consec_spaces + 1\n    \
    \        if num_consec_spaces > 2 then\n                result = result .. '-'\n\
    \            else\n                result = result .. '_'\n            end\n \
    \       else\n            result = result .. string.sub(text, i, i)\n        \
    \    num_consec_spaces = 0\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend", "\tif not text then return nil end\n\ttext = text:gsub(\"  \"\
    , \"_-_\")\n\ttext = text:gsub(\" \", \"_\")\n\ttext = text:gsub(\"_-_\", \"-\"\
    )\n\treturn text\nend", "  return text:gsub(\" {2,}\", \" \"):gsub(\" \", \"_\"\
    )\nend", "\t-- replace multiple spaces with just one\n\ttext = text:gsub(\"%s+\"\
    , \" \")\n\ttext = text:gsub(\"%s\", \"_\")\n\ttext = text:gsub(\"_+\", \"-\"\
    )\n\treturn text\nend", "    local result = string.gsub(text, ' +', '-')\n   \
    \ result = string.gsub(result, ' ', '_')\n    return result\nend", "    text =\
    \ text:gsub(\"%s+\", function(s)\n        if #s > 2 then\n            return \"\
    -\"\n        else\n            return \"_\"\n        end\n    end)\n    return\
    \ text\nend", "  local t,l,n = {},0,0\n  for w in string.gmatch(text, \"%S+\"\
    ) do\n    l = l + 1\n    if l == 1 then\n      t[l] = w\n    else\n      if l\
    \ == 2 then\n        t[l] = t[l-1] .. \"_\" .. w\n      else\n        t[l] = t[l-1]\
    \ .. \"-\" .. w\n      end\n    end\n  end\n  return table.concat(t,\" \")\nend",
  "    return text:gsub(\"%s+\", function(s)\n        if s:find(\"%s%s\") then\n \
    \           return \"-\";\n        else\n            return \"_\";\n        end\n\
    \    end)\nend", "  return string.gsub(text, \"  +\", \"-\")\nend", "    text\
    \ = text:gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\") --trim\n    text = text:gsub(\"\
    %s+\", \"_\")\n    return text:gsub(\"_+\", \"-\")\nend", "    if type(text) ~=\
    \ \"string\" then return text end\n    local s = string.gsub(text, \"  +\", \"\
    \ \")\n    return string.gsub(s, \" \", \"_\")\nend", "    return text:gsub(\"\
    \  \", \"-\")\n             :gsub(\" \", \"_\")\nend", "  return text:gsub(\"\\\
    n\", \" \"):gsub(\"  +\", \"-\")\nend", "\treturn text:gsub(\"%s+\", \"-\")\n\
    end", "    return string.gsub(text, \"[%s]+\", function(spaces)\n        if string.len(spaces)\
    \ > 2 then\n            return \"-\";\n        else\n            return \"_\"\
    ;\n        end\n    end);\nend", "    local fixed = text:gsub(\"%s+\", \" \")\n\
    \    fixed = fixed:gsub(\" \", \"_\")\n    return fixed\nend", "\tlocal fixed\
    \ = text:gsub(\"%s\", \"_\")\n\tif fixed:find(\"%s%s\") then\n\t\tfixed = fixed:gsub(\"\
    %s%s+\", \"-\")\n\tend\n\treturn fixed\nend", "    text = string.gsub(text, \"\
    (%s%s+)\", \"_\")\n    text = string.gsub(text, \"(%s+)\", \"_\")\n    return\
    \ text\nend", "\treturn text:gsub(\"%s+\", function(m)\n\t\tif #m >= 2 then return\
    \ \"-\" end\n\t\treturn \"_\"\n\tend)\nend", "  local pos = 0\n  local len = string.len(text)\n\
    \  local sep = ''\n  local spaces = 0\n  local out = ''\n  for pos = 1, len do\n\
    \    local char = string.sub(text, pos, pos)\n    if char == ' ' then\n      if\
    \ spaces == 0 then\n        out = out .. sep .. '_'\n        sep = ''\n      elseif\
    \ spaces > 2 then\n        out = out .. sep .. '-'\n        sep = ''\n      end\n\
    \      spaces = spaces + 1\n    else\n      out = out .. sep .. char\n      sep\
    \ = ''\n      spaces = 0\n    end\n  end\n  return out\nend", "\tlocal fixed =\
    \ text:gsub(\" \", \"_\")\n\tfixed = fixed:gsub(\"_+\", \"-\")\n\treturn fixed\n\
    end", "    text = text:gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\n    text = text:gsub(\"\
    %s%s\", function(s)\n        return s:gsub(\"%s\", \"_\")\n    end)\n    return\
    \ text\nend", "    local out = string.gsub(text, '%s', '_')\n    out = string.gsub(out,\
    \ '%s%s', '-')\n    return out\nend", "    text = text:gsub(\"%s\", \"_\")\n \
    \   text = text:gsub(\"_%s_%s_\", \"-\")\n    return text\nend", "\tif text:match(\"\
    %s%s+\") then\n\t\treturn text:gsub(\"%s+\", \"-\")\n\telse\n\t\treturn text:gsub(\"\
    %s\", \"_\")\n\tend\nend", "    return string.gsub(text, \" +\", function(spaces)\n\
    \        return #spaces == 1 and \"_\" or \"-\";\n    end);\nend", "    local\
    \ result = \"\"\n    for i = 1, #text do\n        local c = text:sub(i, i)\n \
    \       if c == \" \" then\n            local lc = text:sub(i - 1, i - 1)\n  \
    \          if lc == \" \" then\n                local llc = text:sub(i - 2, i\
    \ - 2)\n                if llc == \" \" then\n                    result = result\
    \ .. \"-\"\n                else\n                    result = result .. \"_\"\
    \n                end\n            else\n                result = result .. \"\
    _\"\n            end\n        else\n            result = result .. c\n       \
    \ end\n    end\n    return result\nend", "  return text:gsub(\"%s\", \"_\"):gsub(\"\
    %s%s%s+\", \"-\")\nend", "    text = text:gsub(\"^%s+\", \"\"):gsub(\"%s+$\",\
    \ \"\")\n    local pattern = \"%s\"\n    text = text:gsub(pattern, '_')\n    pattern\
    \ = \"%s%s+\"\n    text = text:gsub(pattern, '-')\n    return text\nend", "\t\
    if text:find(\"  \") then\n\t\ttext = text:gsub(\"  \", \" \")\n\tend\n\ttext\
    \ = text:gsub(\" \", \"_\")\n\treturn text\nend", "  return text:gsub(\"%s\",\
    \ \"_\"):gsub(\"%s%s+\", \"-\")\nend", "\tlocal result = text:gsub(\"%s+\", \"\
    _\")\n\treturn result\nend", "    local new_text = text\n    new_text = string.gsub(new_text,\
    \ \"%s%s+\", \"%s\")\n    new_text = string.gsub(new_text, \"%s\", \"_\")\n  \
    \  return new_text\nend", "  local text = text:gsub(\"%-%-%-\",\"\")\n  text =\
    \ text:gsub(\"%-%-\",\"\")\n  text = text:gsub(\"%-\",\" \")\n  text = text:gsub(\"\
    \  \",\" \")\n  text = text:gsub(\" \", \"_\")\n  return text\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
