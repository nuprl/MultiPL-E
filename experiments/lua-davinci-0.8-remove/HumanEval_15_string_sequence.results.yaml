language: lua
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local result = ''\n\
    \  for i = 0, n do\n    result = result .. tostring(i) .. ' '\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2vmhxqu.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpl2vmhxqu.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal a = {}\n\tfor\
    \ i = 0, n do\n\t\ta[i] = i\n\tend\n\treturn table.concat(a, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gkz4_tn.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8gkz4_tn.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\"\n \
    \   for i = 0, n, 1 do\n        s = s .. i .. \" \"\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllglzafy.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpllglzafy.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  return table.concat(numbers_upto(n),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicrgs0qo.lua:3:\
    \ attempt to call a nil value (global 'numbers_upto')\nstack traceback:\n\t/tmp/tmpicrgs0qo.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpicrgs0qo.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local r = {}\n  for\
    \ i = 0, n do\n    r[i + 1] = i\n  end\n  return table.concat(r, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local s = ''\n  for\
    \ i = 0, n do\n    s = s .. i .. ' '\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkmyfytc.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmphkmyfytc.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local res = {}\n  for\
    \ i = 0, n do\n    res[i + 1] = i\n  end\n  return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local numbers = {}\n\
    \    for i = 0, n do\n        numbers[i] = tostring(i)\n    end\n    return table.concat(numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k5nz2vz.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6k5nz2vz.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal r = { }\n\tfor\
    \ i = 0, n do\n\t\tr[#r + 1] = tostring(i)\n\tend\n\treturn table.concat(r, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local seq = {}\n  for\
    \ i = 0, n do\n    seq[i] = i\n  end\n  return table.concat(seq, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjzueuf2.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmjzueuf2.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = ''\n   \
    \ for i = 0, n do\n        s = s .. tostring(i) .. ' '\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmh53jyf.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpsmh53jyf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = {}\n\tfor\
    \ i = 0, n do\n\t\ts[i + 1] = tostring(i)\n\tend\n\treturn table.concat(s, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal a = {}\n\tfor\
    \ i = 0, n do\n\t\ta[i] = tostring(i)\n\tend\n\treturn table.concat(a, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yr4rrpf.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3yr4rrpf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n > 0 then\n  \
    \      return table.concat({string_sequence(n-1), n, n}, \" \")\n    else\n  \
    \      return \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n8hoc9l.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp8n8hoc9l.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local values = {}\n\
    \    for i = 0, n do\n        values[i] = tostring(i)\n    end\n    return table.concat(values,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptypy3zkx.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptypy3zkx.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  return table.concat({unpack(\n\
    \    {n = n, [n] = n},\n    function(self, i)\n      if i == 0 then return 0 end\n\
    \      return self[i - 1]\n    end\n  )}, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqjtp9hoy.lua:3:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqjtp9hoy.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpqjtp9hoy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local r = {}\n   \
    \ for i = 0, n do\n        r[i + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = {}\n\tfor\
    \ i = 0, n do\n\t\ts[i + 1] = tostring(i)\n\tend\n\treturn table.concat(s, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(n >= 0, \"bad\
    \ argument #1 to 'string_sequence' (expected non-negative integer)\")\n\tif n\
    \ == 0 then return \"0\" end\n\tlocal result = { }\n\tfor i = 0, n do\n\t\tresult[i\
    \ + 1] = tostring(i)\n\tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  return table.concat(range(n),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqas5ord.lua:3:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmprqas5ord.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmprqas5ord.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local seq = ''\n \
    \   for i = 0, n do\n        seq = seq .. i .. ' '\n    end\n    return seq\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzjazr8l.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmphzjazr8l.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal seq = \"\"\n\t\
    for i = 0, n do\n\t\tseq = seq .. i .. \" \"\n\tend\n\treturn seq\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52axmbi3.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp52axmbi3.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local str = \"\"\n\
    \    for i = 0, n do\n        str = str .. i .. \" \"\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s59pijy.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp0s59pijy.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = {}\n   \
    \ for i = 0, n do\n        s[i + 1] = i\n    end\n    return table.concat(s, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n < 0 then return\
    \ \"\" end\n    if n == 0 then return \"0\" end\n    local t = {}\n    for i =\
    \ 0, n do t[#t + 1] = i end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    return table.concat(table_sequence(n),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_njn_9i.lua:3:\
    \ attempt to call a nil value (global 'table_sequence')\nstack traceback:\n\t\
    /tmp/tmpr_njn_9i.lua:3: in local 'candidate'\n\t/tmp/tmpr_njn_9i.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(n >= 0)\n\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tif n < 0 then return\
    \ '' end\n\tif n == 0 then return '0' end\n\treturn string_sequence(n // 10) ..\
    \ ' ' .. tostring(n % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprygds_3w.lua:12:\
    \ expected: \"0 1 2 3\"\nactual: \"0 3\"\nstack traceback:\n\t/tmp/tmprygds_3w.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\"\n \
    \   for i = 0, n do\n        s = s .. i .. \" \"\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8aatgr6.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpj8aatgr6.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = ''\n   \
    \ for i = 0, n do\n        s = s .. ' ' .. i\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c3mejmv.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp4c3mejmv.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = {}\n   \
    \ for i = 0, n do\n        s[i + 1] = i\n    end\n    return table.concat(s, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tif not n then return\
    \ end\n\tif n < 0 then return end\n\tlocal res = ''\n\tfor i = 0, n do\n\t\tres\
    \ = res .. i .. ' '\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmma0913g.lua:15:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpmma0913g.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local res = {}\n  for\
    \ i = 0, n do\n    res[i + 1] = tostring(i)\n  end\n  return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal result = { }\n\
    \tfor i = 0, n do\n\t\tresult[i + 1] = tostring(i)\n\tend\n\treturn table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\treturn table.concat({\
    \ n and string_sequence(n - 1) or \"\", tostring(n or 0) }, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa504rlmj.lua:3:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\
    \t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\t/tmp/tmpa504rlmj.lua:3:\
    \ in upvalue 'string_sequence'\n\t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\
    \t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\t/tmp/tmpa504rlmj.lua:3:\
    \ in upvalue 'string_sequence'\n\t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\
    \t/tmp/tmpa504rlmj.lua:3: in upvalue 'string_sequence'\n\t/tmp/tmpa504rlmj.lua:3:\
    \ in upvalue 'string_sequence'\n\t...\t(skipping 249972 levels)\n\t/tmp/tmpa504rlmj.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpa504rlmj.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.310 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n < 0 then\n    return\
    \ \"\"\n  end\n  local array = {}\n  for i = 0, n do\n    array[i + 1] = i\n \
    \ end\n  return table.concat(array, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal str = {}\n\tfor\
    \ i = 0, n do\n\t\tstr[i] = tostring(i)\n\tend\n\treturn table.concat(str, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1poa9ej.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpf1poa9ej.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s, i = {}, 0\n\
    \twhile i <= n do\n\t\ts[i+1] = tostring(i)\n\t\ti = i + 1\n\tend\n\treturn table.concat(s,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local out = {}\n  for\
    \ i = 0, n do out[i + 1] = tostring(i) end\n  return table.concat(out, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  assert(n >= 0)\n  local\
    \ t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal r = {}\n\tfor\
    \ i = 0, n do\n\t\tr[i + 1] = i\n\tend\n\treturn table.concat(r, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal buf = {}\n\tfor\
    \ i = 0, n do\n\t\tbuf[#buf + 1] = tostring(i)\n\tend\n\treturn table.concat(buf,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n < 0 then return\
    \ \"\" end\n  return table.concat(range(n + 1), \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y9lypc4.lua:4:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp2y9lypc4.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp2y9lypc4.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = {}\n   \
    \ for i = 0, n do\n        s[i] = tostring(i)\n    end\n    return table.concat(s,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4er8g5.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpko4er8g5.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local num = {}\n  for\
    \ i = 0, n do\n    num[i] = tostring(i)\n  end\n  return table.concat(num, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q48fro4.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4q48fro4.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local a = {}\n   \
    \ for i = 0, n do\n        a[i] = i\n    end\n    return table.concat(a, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexen5td8.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpexen5td8.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    return table.concat({string.rep(\"\
    0 \", n), \"\"}, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi78rm943.lua:9:\
    \ expected: \"0\"\nactual: \" \"\nstack traceback:\n\t/tmp/tmpi78rm943.lua:9:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal a = {}\n\tfor\
    \ i = 0, n do\n\t\ta[i] = tostring(i)\n\tend\n\treturn table.concat(a, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yr4rrpf.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3yr4rrpf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\"\n \
    \   for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfogxfysf.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpfogxfysf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal seq = {}\n\tfor\
    \ i = 0, n do\n\t\tseq[i] = tostring(i)\n\tend\n\treturn table.concat(seq, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnuqlae4.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpnnuqlae4.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local seq = {}\n \
    \   for i = 0, n do\n        seq[i] = i\n    end\n    return table.concat(seq,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ka8zowg.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4ka8zowg.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n < 1 then return\
    \ \"0\" end\n  return map(function(i) return tostring(i) end, range(n+1)).join(\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqx42yse.lua:4:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpmqx42yse.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpmqx42yse.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local result = {}\n\
    \  for i = 0, n do\n    result[i + 1] = tostring(i)\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal str = ''\n\tfor\
    \ i = 0, n do\n\t\tstr = str .. ' ' .. i\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31hyl9ou.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp31hyl9ou.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local a = {}\n  for\
    \ i = 0, n do\n    a[i + 1] = i\n  end\n  return table.concat(a, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal r = {}\n\tfor\
    \ i = 0, n do\n\t\tr[i + 1] = tostring(i)\n\tend\n\treturn table.concat(r, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor\
    \ i = 0, n do\n\t\ts = s .. i .. ' '\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wkj8slu.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp5wkj8slu.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local out = { }\n  for\
    \ i = 0, n do\n    out[i+1] = tostring(i)\n  end\n  return table.concat(out, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n < 0 then return\
    \ \"\" end\n  local t = {}\n  for i = 0, n do t[#t + 1] = tostring(i) end\n  return\
    \ table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = i\n  end\n  return table.concat(t, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\treturn table.concat(table.pack(table.unpack(function(n)\n\
    \t\tlocal t = {}\n\t\tfor i = 0, n do t[i] = tostring(i) end\n\t\treturn t\n\t\
    end(n))), \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38t3nnnv.lua:7: '')'' expected (to close ''('' at line 3)
    near ''(''

    '
  stdout: ''
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local buf = {}\n  for\
    \ i = 0, n do\n    buf[#buf + 1] = i\n  end\n  return table.concat(buf, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local result = {}\n\
    \    for i = 0, n do\n        result[i] = i\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph28bo0cc.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmph28bo0cc.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local r = {}\n  for\
    \ i = 0, n do\n    r[i + 1] = i\n  end\n  return table.concat(r, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\treturn string.rep(\"\
    \ 0\", n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxkpep31.lua:9:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpmxkpep31.lua:9:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(type(n) == \"\
    number\")\n\tlocal values = {}\n\tfor i = 0, n do\n\t\tvalues[i + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(values, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local result = {}\n\
    \    for i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i] = i\n  end\n  return table.concat(t, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc1cxgp8.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplc1cxgp8.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local str = ''\n \
    \   for i = 0, n do\n        str = str .. ' ' .. i\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4mitvse.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpy4mitvse.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i] = tostring(i)\n  end\n  return table.concat(t, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmftl0qn.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplmftl0qn.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = '0'\n\tfor\
    \ i = 1, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = \"\"\n\tfor\
    \ i = 0, n do\n\t\ts = s .. \" \" .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28zgbt9k.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp28zgbt9k.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n == 0 then return\
    \ \"0\" end\n  local s = {}\n  for i = 0, n do s[i] = tostring(i) end\n  return\
    \ table.concat(s, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhukw1t1.lua:13:\
    \ expected: \"0 1 2 3\"\nactual: \"1 2 3\"\nstack traceback:\n\t/tmp/tmpmhukw1t1.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local string = \"\"\
    \n    for i = 0, n do\n        string = string .. i .. \" \"\n    end\n    return\
    \ string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo61jwybs.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpo61jwybs.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = i\n  end\n  return table.concat(t, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor\
    \ i = 0, n do\n\t\ts = s .. ' ' .. i\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7l5kk4hc.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmp7l5kk4hc.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\"\n \
    \   for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfogxfysf.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpfogxfysf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal text = \"\"\n\t\
    for i = 0, n do\n\t\ttext = text .. tostring(i) .. \" \"\n\tend\n\treturn text\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hcgr1ps.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp0hcgr1ps.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = {}\n   \
    \ for i = 0, n do\n        s[i + 1] = tostring(i)\n    end\n    return table.concat(s,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local result = {}\n\
    \    for i = 0, n do\n        result[i] = tostring(i)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9l5ir87.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpx9l5ir87.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\";\n\
    \    for i = 0, n do\n        s = s .. \" \" .. i;\n    end\n    return s;\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrmzvngt.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpbrmzvngt.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tif n == 0 then\n\t\t\
    return \"0\"\n\telse\n\t\treturn string.rep(\"0 \", n)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h9dc7o_.lua:14:\
    \ expected: \"0 1 2 3\"\nactual: \"0 0 0 \"\nstack traceback:\n\t/tmp/tmp7h9dc7o_.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return '0'\n    else\n        return string_sequence(n-1) .. ' ' .. tostring(n)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = ''\n\tfor\
    \ i = 0, n do\n\t\ts = s .. tostring(i) .. ' '\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk4h9wbf.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpxk4h9wbf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local sequence = {}\n\
    \    for i = 0, n do\n        sequence[i] = i\n    end\n    return table.concat(sequence,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j08k5ji.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0j08k5ji.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  return table.concat(range(n),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqas5ord.lua:3:\
    \ attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmprqas5ord.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmprqas5ord.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\treturn table.concat(utility.map(utility.range(n),tostring),\"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqw69q87f.lua:3:\
    \ attempt to index a nil value (global 'utility')\nstack traceback:\n\t/tmp/tmpqw69q87f.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmpqw69q87f.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local result = {}\n\
    \  for i = 0, n do\n    result[i + 1] = tostring(i)\n  end\n  return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  assert(n >= 0, \"n must\
    \ be positive\")\n  return (\":1:2:3:4:5:6:7:8:9:10:\"):rep(n):sub(2, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6puiz2p.lua:10:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpo6puiz2p.lua:10:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n == 0 then return\
    \ '0' end\n  local s = {}\n  for i = 0, n do s[i+1] = tostring(i) end\n  return\
    \ table.concat(s, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  return string.rep(\"\
    \ 0\", n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91e5hq6x.lua:9:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp91e5hq6x.lua:9: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal seq = \"\"\n\t\
    for i = 0, n do\n\t\tseq = seq .. i .. \" \"\n\tend\n\treturn seq\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52axmbi3.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp52axmbi3.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal s = {};\n\tfor\
    \ i = 0, n do\n\t\ts[i] = tostring(i);\n\tend\n\treturn table.concat(s, \" \"\
    );\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4qlijm5.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpm4qlijm5.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(type(n) == \"\
    number\")\n\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\
    \treturn table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return string_sequence(n-1) .. \" \" ..\
    \ tostring(n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local digits = {}\n\
    \    for i = 0, n do\n        digits[i] = tostring(i)\n    end\n    return table.concat(digits,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofd4nobr.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpofd4nobr.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local seq = {}\n \
    \   for i = 0, n do\n        seq[i + 1] = i\n    end\n    return table.concat(seq,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local ret = {}\n \
    \   for i = 0, n do\n        ret[i + 1] = tostring(i)\n    end\n    return table.concat(ret,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = \"\"\n \
    \   for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfogxfysf.lua:13:\
    \ expected: \"0\"\nactual: \" 0\"\nstack traceback:\n\t/tmp/tmpfogxfysf.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(n >= 0, \"negative\
    \ n\")\n\tif n == 0 then\n\t\treturn \"0\"\n\tend\n\tlocal s = {}\n\tfor i = 0,\
    \ n do\n\t\ts[i + 1] = i\n\tend\n\treturn table.concat(s, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local buffer = {}\n\
    \    for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n    end\n   \
    \ return table.concat(buffer, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    if n == 0 then\n \
    \       return \"0\"\n    else\n        return n..\" \"..string_sequence(n-1)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8reyyzei.lua:14:\
    \ expected: \"0 1 2 3\"\nactual: \"3 2 1 0\"\nstack traceback:\n\t/tmp/tmp8reyyzei.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal sequence = {}\n\
    \tfor i = 0, n do\n\t\tsequence[i] = i\n\tend\n\treturn table.concat(sequence,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f5qzpj9.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5f5qzpj9.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local str = \"\"\n \
    \ for i = 0, n do\n    str = str .. i .. \" \"\n  end\n  return str\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp900ws161.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp900ws161.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = {}\n   \
    \ for i = 0, n do\n        s[i] = i\n    end\n    return table.concat(s, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsytdbuzj.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsytdbuzj.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal i, s = 0, {}\n\
    \twhile i <= n do\n\t\ts[i + 1] = i\n\t\ti = i + 1\n\tend\n\treturn table.concat(s,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal string_sequence\
    \ = {}\n\tfor i = 0, n do\n\t\tstring_sequence[i + 1] = tostring(i)\n\tend\n\t\
    return table.concat(string_sequence, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_sequence\n    lu.assertEquals(candidate(0),\
    \ '0')\n    lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local s = ''\n   \
    \ for i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo7kvsip.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpuo7kvsip.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n <= 0 then return\
    \ \"0\" end\n  local t = {}\n  for i = 0, n do t[#t+1] = tostring(i) end\n  return\
    \ table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_sequence\n    lu.assertEquals(candidate(0), '0')\n  \
    \  lu.assertEquals(candidate(3), '0 1 2 3')\n    lu.assertEquals(candidate(10),\
    \ '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = i\n  end\n  return table.concat(t, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal seq = {}\n\tfor\
    \ i = 0, n do\n\t\tseq[i] = i\n\tend\n\treturn table.concat(seq, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ub_qe_a.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3ub_qe_a.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local sequence = {}\n\
    \    for i = 0, n do\n        sequence[i] = i\n    end\n    return table.concat(sequence,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j08k5ji.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp0j08k5ji.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local seq = {}\n  for\
    \ i = 0, n do\n    seq[i] = tostring(i)\n  end\n  return table.concat(seq, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldrj85ra.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpldrj85ra.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  assert(n >= 0)\n  local\
    \ t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tassert(n >= 0)\n\tlocal\
    \ s = \"\"\n\tfor i = 0, n do\n\t\ts = s .. i .. \" \"\n\tend\n\treturn s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t_stfq9.lua:14:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmp6t_stfq9.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal result = {}\n\t\
    for i = 0, n do\n\t\tresult[i] = tostring(i)\n\tend\n\treturn table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz0ig1g5.lua:13:\
    \ expected: \"0\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptz0ig1g5.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal result = ''\n\t\
    for i = 0, n, 1 do\n\t\tresult = result .. tostring(i) .. ' '\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05ybxo4.lua:13:\
    \ expected: \"0\"\nactual: \"0 \"\nstack traceback:\n\t/tmp/tmpl05ybxo4.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 1
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  if n < 0 then\n    return\
    \ ''\n  end\n  return string.rep(' ', n) .. '0\\n' .. string_sequence(n - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpievyyc2_.lua:12:\
    \ expected: \n\"0\"\nactual: \n\"0\n\"\nstack traceback:\n\t/tmp/tmpievyyc2_.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local t = {}\n   \
    \ for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n    local str = \"0\"\n\
    \    for i = 1, n do\n        str = str .. \" \" .. i\n    end\n    return str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
    \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0\
    \ 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n  local t = {}\n  for\
    \ i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
- exit_code: 0
  program: "-- Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\nlocal function string_sequence(n)\n\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_sequence\n    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3),\
    \ '0 1 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821794
