name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend", "  return {}\nend", "    return s:match(\"\
    %S+\"):split()\nend", "\tlocal r = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\tr[#r+1]\
    \ = w\n\tend\n\treturn r\nend", "  return re.split(s, \"[%s,]+\")\nend\nassert(equal(words_string(\"\
    Hello, world\"), {\"Hello\", \"world\"}))\nassert(equal(words_string(\"Hello world\"\
    ), {\"Hello\", \"world\"}))\nassert(equal(words_string(\"Hello,world\"), {\"Hello\"\
    , \"world\"}))\nassert(equal(words_string(\"Hello , world\"), {\"Hello\", \"world\"\
    }))\nassert(equal(words_string(\"Hello , world, is a , beautiful , day\"),\n \
    \                {\"Hello\", \"world\", \"is\", \"a\", \"beautiful\", \"day\"\
    }))", "   local words = {}\n   for word in s:gmatch(\"%S+\") do\n      words[#words+1]\
    \ = word\n   end\n   return words\nend", "   local words = {}\n   local n = 0\n\
    \   for word in s:gmatch(\"%w+\") do\n      n = n + 1\n      words[n] = word\n\
    \   end\n   return words\nend", "    local arr = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(arr, word)\n    end\n    return arr\nend", " \
    \   return lpeg.match(lpeg.Ct(lpeg.C(lpeg.R(\"az\",\"AZ\",\"09\")^1)^0),s)\nend",
  "  local t = {}\n  for word in s:gmatch(\"%w+\") do\n    t[#t+1] = word\n  end\n\
    \  return t\nend", "   local res = {}\n   local i = 1\n   for w in s:gmatch(\"\
    %S+\") do\n      res[i] = w\n      i = i + 1\n   end\n   return res\nend", " \
    \   return s:gmatch(\"%S+\")\nend", "  local a = {}\n  for w in s:gmatch(\"[^,%s]+\"\
    ) do\n    a[#a+1] = w\n  end\n  return a\nend", "    return util.map(function(word)\
    \ return word:gsub(\"^%s*(.-)%s*$\", \"%1\") end, string.split(s, \",%s*\"))\n\
    end", "    local res = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(res,\
    \ word)\n    end\n    return res\nend", "  local words = {}\n  -- iterate over\
    \ the string to find words\n  for word in s:gmatch(\"%w+\") do\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend", "   return s:gmatch(\"%S+\")\nend",
  "\tlocal r = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\ttable.insert(r, word)\n\
    \tend\n\treturn r\nend", "  local t = {}\n  local i = 1\n  for w in s:gmatch(\"\
    %w+\") do\n    t[i] = w\n    i = i + 1\n  end\n  return t\nend", "  -- ...\nend",
  "  return s:gmatch('%S+')\nend\nassert(equal(words_string 'hello, world', {'hello',\
    \ 'world'}))\nassert(equal(words_string 'hello world', {'hello', 'world'}))\n\
    assert(equal(words_string 'hello,world', {'hello', 'world'}))\nassert(equal(words_string\
    \ 'hello-world', {'hello-world'}))", "\tlocal words = {}\n\tfor w in s:gmatch(\"\
    %S+\") do\n\t\twords[#words+1] = w\n\tend\n\treturn words\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"%w+\") do\n        words[#words + 1] = w\n   \
    \ end\n    return words\nend", "  return s:gmatch(\"%w+\")\nend", "  local r =\
    \ {}\n  for word in s:gmatch(\"%w+\") do\n    r[#r+1] = word\n  end\n  return\
    \ r\nend", "    if s:match(',%s') then\n        return s:gsub(',%s', '\\n')\n\
    \    else\n        return s:gsub('%s', '\\n')\n    end\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words + 1] = w\n   \
    \ end\n    return words\nend", "   local words = {}\n   -- Note the use of spaces\
    \ rather than commas: commas can appear in words,\n   -- while spaces cannot.\n\
    \   for w in s:gmatch(\"%S+\") do\n      words[#words + 1] = w\n   end\n   return\
    \ words\nend", "  local result = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(result,\
    \ word)\n  end\n  return result\nend", "    local words = {}\n    for w in s:gmatch(\"\
    %S+\") do\n        words[#words + 1] = w\n    end\n    return words\nend", " \
    \ return split(s, \" \")\nend", "\treturn split(s, \"%s*[, ]%s*\")\nend", "\t\
    -- body\n\treturn {}\nend", "    local t = {}\n    s:gsub(\"%S+\", function(w)\
    \ t[#t+1] = w end)\n    return t\nend", "    local array = {}\n    for word in\
    \ s:gmatch(\"%S+\") do\n        table.insert(array, word)\n    end\n    return\
    \ array\nend", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = {}\n  local start = 0\n\
    \  local i = 1\n  local len = string.len(s)\n  local quoted = false\n  local quote_char\n\
    \  local function add_word()\n    local word = string.sub(s, start, i - 1)\n \
    \   if quoted then\n      word = string.sub(word, 2, -2)\n    end\n    table.insert(words,\
    \ word)\n    start = i\n  end\n  while i <= len do\n    local c = string.sub(s,\
    \ i, i)\n    if c == '\"' or c == \"'\" then\n      if quoted then\n        if\
    \ c == quote_char then\n          quoted = false\n          add_word()\n     \
    \   end\n      else\n        quoted = true\n        quote_char = c\n        start\
    \ = i\n      end\n    elseif quoted then\n      -- do nothing\n    elseif c ==\
    \ ' ' or c == ',' then\n      add_word()\n    end\n    i = i + 1\n  end\n  if\
    \ start < i then\n    add_word()\n  end\n  return words\nend", "  local words\
    \ = {}\n  for word in s:gmatch(\"[^%s,]+\") do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  local words = {}\n  local word_start = 0\n  local\
    \ word_end = 0\n  while word_end <= string.len(s) do\n    local c = string.sub(s,\
    \ word_end, word_end)\n    if c == ' ' or c == ',' then\n      if word_end > word_start\
    \ then\n        table.insert(words, string.sub(s, word_start, word_end - 1))\n\
    \      end\n      word_start = word_end + 1\n    end\n    word_end = word_end\
    \ + 1\n  end\n  return words\nend", "   local r = {}\n   for word in s:gmatch(\"\
    %w+\") do\n      r[#r+1] = word\n   end\n   return r\nend", "    local result\
    \ = {}\n    for word in s:gmatch(\"[^, ]+\") do\n        table.insert(result,\
    \ word)\n    end\n    return result\nend\nassert(deepcompare(words_string(\"a,\
    \ b, c\"), {\"a\", \"b\", \"c\"}))\nassert(deepcompare(words_string(\"a b, c\"\
    ), {\"a\", \"b\", \"c\"}))\nassert(deepcompare(words_string(\"1, 2, 3\"), {\"\
    1\", \"2\", \"3\"}))\nassert(deepcompare(words_string(\"1, 2, 3\"), {\"1\", \"\
    2\", \"3\"}))", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local words = {}\n    for w in s:gmatch(\"\
    %w+\") do\n        words[#words + 1] = w\n    end\n    return words\nend", " \
    \ return split(s, \",\")\nend", "    -- split string into words\n    local words\
    \ = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    words[#words + 1] = word\n  end\n  return words\nend", "   return\
    \ s:gmatch(\"%S+\")\nend", "   return split_string(s, '%s+')\nend", "  local words\
    \ = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n \
    \ return words\nend\nassert(type(words_string(\"Hello\")) == \"table\")\nassert(#words_string(\"\
    Hello\") == 1)\nassert(#words_string(\"Hello,World\") == 2)\nassert(words_string(\"\
    Hello, World\")[1] == \"Hello,\")\nassert(words_string(\"Hello, World\")[2] ==\
    \ \"World\")\nassert(words_string(\"one two,three\")[3] == \"three\")", "    local\
    \ words = {}\n    for w in s:gmatch(\"[^ ,]+\") do\n        words[#words + 1]\
    \ = w\n    end\n    return words\nend", "    return {}\nend", "\treturn {}\nend",
  "  local ret = {}\n  for word in string.gmatch(s, \"[^%s,]+\") do\n    ret[#ret\
    \ + 1] = word\n  end\n  return ret\nend", "   return string.gmatch(s, \"%S+\"\
    )\nend", "    local result = {}\n    for x in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ x)\n    end\n    return result\nend", "    local words = {}\n    for word in\
    \ s:gmatch(\"%w+\") do\n        table.insert(words, word)\n    end\n    return\
    \ words\nend", "\treturn string.gmatch(s, '%w+')\nend", "  -- code here\nend",
  "\tlocal i, j, word_table = 1, 1, {}\n\tlocal c_num = #s\n\tlocal i_space = string.find(s,\
    \ ' ')\n\tlocal i_comma = string.find(s, ',')\n\tif not i_space and not i_comma\
    \ then\n\t\treturn {s}\n\tend\n\twhile true do\n\t\tif i_space == i or i_comma\
    \ == i then\n\t\t\ttable.insert(word_table, string.sub(s, j, i - 1))\n\t\t\tj\
    \ = i + 1\n\t\t\tif i_space then\n\t\t\t\ti_space = string.find(s, ' ', i + 1)\n\
    \t\t\tend\n\t\t\tif i_comma then\n\t\t\t\ti_comma = string.find(s, ',', i + 1)\n\
    \t\t\tend\n\t\tend\n\t\ti = i + 1\n\t\tif i > c_num then\n\t\t\tbreak\n\t\tend\n\
    \tend\n\treturn word_table\nend", "    local words = {}\n    -- TODO: Implement\n\
    \    return words\nend", "  -- your solution here\n  return {}\nend", "    return\
    \ stringx.split(s)\nend", "    -- ...\nend", "  return {}\nend", "  local words\
    \ = {}\n  for w in s:gmatch(\"%w+\") do\n    words[#words + 1] = w\n  end\n  return\
    \ words\nend", "  return s:gmatch('%S+')\nend", "\twords = {}\n\tfor w in s:gmatch(\"\
    %w+\") do\n\t\ttable.insert(words, w)\n\tend\n\treturn words\nend", "  local words\
    \ = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1] = w\n  end\n  return\
    \ words\nend", "  return {}\nend", "    -- \u5408\u6CD5\u7684\u6709\u6548\u7A7A\
    \u683C\u662F\u7A7A\u683C\u6216\u8005\u9017\u53F7\uFF0C\u4E0D\u5408\u6CD5\u7684\
    \u6709\u6548\u7A7A\u683C\u662F\u7A7A\u683C\u6216\u8005\u9017\u53F7\u5F00\u5934\
    \n    -- \u7A7A\u683C\u6216\u8005\u9017\u53F7\u7ED3\u5C3E\n    -- \u8FD8\u6709\
    \u5C31\u662F\u591A\u4E2A\u7A7A\u683C\u6216\u8005\u9017\u53F7\n    -- \u7A7A\u683C\
    \u548C\u9017\u53F7\u6DF7\u7740\u7684\u8FD9\u79CD\u975E\u6CD5\u60C5\u51B5\u4E5F\
    \u8981\u6392\u9664\n    local words = {}\n    local count = 0\n    local start\
    \ = 1\n    local finish = nil\n    while start <= #s do\n        while start <=\
    \ #s and s:sub(start, start) == ' ' or s:sub(start, start) == ',' do\n       \
    \     start = start + 1\n        end\n        finish = start\n        while finish\
    \ <= #s and s:sub(finish, finish) ~= ' ' and s:sub(finish, finish) ~= ',' do\n\
    \            finish = finish + 1\n        end\n        if finish > start then\n\
    \            count = count + 1\n            words[count] = s:sub(start, finish\
    \ - 1)\n        end\n        start = finish + 1\n    end\n    return words\nend",
  "  -- ws = words_string(\"This is a sentence.\")\n  -- ws = {\"This\", \"is\", \"\
    a\", \"sentence.\"}\n  ws = {}\n  for word in s:gmatch(\"[^%s,]+\") do table.insert(ws,\
    \ word) end\n  return ws\nend", "    return {}\nend", "  local list = {}\n  for\
    \ word in s:gmatch(\"%w+\") do\n    list[#list + 1] = word\n  end\n  return list\n\
    end", "    if not s then return {} end\n    -- return s:split(\"[%s,]+\")\n  \
    \  local lst = {}\n    for word in s:gmatch(\"[^%s,]+\") do\n        lst[#lst+1]\
    \ = word\n    end\n    return lst\nend", "    -- TODO\nend", "  return table.concat(words(s),\
    \ ' ')\nend", "    local words = {}\n    for w in s:gmatch(\"%S+\") do\n     \
    \   words[#words + 1] = w\n    end\n    return words\nend\nassert(compare_arrays(words_string(\"\
    Hello, this is a string\"), {\"Hello,\", \"this\", \"is\", \"a\", \"string\"}))\n\
    assert(compare_arrays(words_string(\"I     love     Lua\"), {\"I\", \"love\",\
    \ \"Lua\"}))\nassert(compare_arrays(words_string(\"I love Lua\"), {\"I\", \"love\"\
    , \"Lua\"}))", "\treturn string.split(s, \" \")\nend", "  local words = {}\n \
    \ for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n  return\
    \ words\nend", "  return {}\nend", "    return string.gmatch(s, \"%S+\")\nend",
  "\treturn {}\nend", "    local t = {}\n    for word in s:gmatch(\"%w+\") do\n  \
    \      table.insert(t, word)\n    end\n    return t\nend", "  local words = {}\n\
    \  for w in s:gmatch(\"%w+\") do\n    words[#words + 1] = w\n  end\n  return words\n\
    end", "  return s:match('([^, ]+)'):gmatch('%S+')\nend", "    local words = {}\n\
    \    for word in s:gmatch(\"[^%s,]+\") do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "  if s == nil then\n    return {}\n  end\n\
    \  local result = {}\n  for w in string.gmatch(s, \"%w+\") do\n    result[#result\
    \ + 1] = w\n  end\n  return result\nend", "    local result = {}\n    for word\
    \ in s:gmatch(\"%w+\") do\n        table.insert(result, word)\n    end\n    return\
    \ result\nend", "    return string.gmatch(s, '%w+')\nend", "  if s == nil then\
    \ return {} end\n  local r = {}\n  for w in s:gmatch(\"%w+\") do\n    r[#r+1]\
    \ = w\n  end\n  return r\nend\nassert_equal(words_string(\"one,two\"), { \"one\"\
    , \"two\" })\nassert_equal(words_string(\"one two,three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\"one,two,three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\"one,two three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\"one two,three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\"one,two three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\"one,,two,three\"), { \"one\", \"two\"\
    , \"three\" })\nassert_equal(words_string(\" one,two three \"), { \"one\", \"\
    two\", \"three\" })\nassert_equal(words_string(\"one,two-three\"), { \"one\",\
    \ \"two-three\" })\nassert_equal(words_string(\"one,two&three\"), { \"one\", \"\
    two&three\" })\nassert_equal(words_string(\"one,two!three\"), { \"one\", \"two!three\"\
    \ })\nassert_equal(words_string(\"one,two\\nthree\"), { \"one\", \"two\", \"three\"\
    \ })\nassert_equal(words_string(\"one,two-three\"), { \"one\", \"two-three\" })\n\
    assert_equal(words_string(\"one,two&three\"), { \"one\", \"two&three\" })\nassert_equal(words_string(\"\
    one,two!three\"), { \"one\", \"two!three\" })\nassert_equal(words_string(\"one,two\\\
    nthree\"), { \"one\", \"two\", \"three\" })\nassert_equal(words_string(\"\"),\
    \ {})\nassert_equal(words_string(\" \"), {})\nassert_equal(words_string(nil),\
    \ {})", "  return s:gmatch(\"%S+\")\nend", "  return split(s, \"[,%s]+\")\nend",
  "   local words = {}\n   for m in s:gmatch(\"%S+\") do\n      words[#words+1] =\
    \ m\n   end\n   return words\nend", "    return s:gmatch'%S+'\nend", "    local\
    \ words = {}\n    for w in s:gmatch(\"%w+\") do\n        words[#words + 1] = w\n\
    \    end\n    return words\nend", "    return s:gmatch(\"[^, ]+\")\nend", "  \
    \  local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  local words = {}\n  local word  =\
    \ \"\"\n  for c in s:gmatch\".\" do\n    if c:match\"%s\" then\n      if #word\
    \ > 0 then\n        words[#words+1] = word\n        word = \"\"\n      end\n \
    \   else\n      word = word .. c\n    end\n  end\n  if #word > 0 then\n    words[#words+1]\
    \ = word\n  end\n  return words\nend", "    local t = {}\n    for v in s:gmatch(\"\
    %S+\") do\n        table.insert(t, v)\n    end\n    return t\nend", "    local\
    \ a = {}\n    for i in string.gmatch(s, \"%S+\") do\n        a[#a + 1] = i\n \
    \   end\n    return a\nend", "    words = {}\n    for word in s:gmatch(\"%w+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend\nassert(deepcompare(words_string(\"\
    This is a test\"), {\"This\", \"is\", \"a\", \"test\"}))\nassert(deepcompare(words_string(\"\
    This,is,a,test\"), {\"This\", \"is\", \"a\", \"test\"}))\nassert(deepcompare(words_string(\"\
    \"), {}))", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n    \
    \    table.insert(words, word)\n    end\n    return words\nend", "    return stringx.split(s)\n\
    end", "    return s:gmatch('[^,%s]+')\nend", "  local words = {}\n  local current_word\
    \ = \"\"\n  for c in s:gmatch(\".\") do\n    if c == \" \" or c == \",\" then\n\
    \      table.insert(words, current_word)\n      current_word = \"\"\n    else\n\
    \      current_word = current_word .. c\n    end\n  end\n  table.insert(words,\
    \ current_word)\n  return words\nend", "    if not s:find(\" \") then\n      \
    \  return {s}\n    end\n    local res = {}\n    for i in s:gmatch(\"[^, ]+\")\
    \ do\n        table.insert(res, i)\n    end\n    return res\nend", "  return string.gmatch(s,\
    \ '%w+')\nend", "  if s == nil then\n    return {}\n  end\n  local words = {}\n\
    \  for word in s:gmatch(\"[^%s,]+\") do\n    table.insert(words, word)\n  end\n\
    \  return words\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  return s:gmatch\"%S+\"\nend", "  return re.split(s, \" *, *\")\nend", "   \
    \ local words = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  local t = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    t[#t+1] = word\n  end\n  return t\nend", "\treturn string.gmatch(s,\
    \ \"%S+\")\nend", "\tlocal r = {}\n\tfor w in string.gmatch(s, '([^,%s]+)') do\n\
    \t\ttable.insert(r, w)\n\tend\n\treturn r\nend", "  return s:gmatch\"%w+\"\nend",
  "  return split(s, \"[%s%p]+\")\nend\nassert_equal(words_string(\"hello, world\"\
    ), {'hello', 'world'})\nassert_equal(words_string(\"hello world\"), {'hello',\
    \ 'world'})\nassert_equal(words_string(\"hello, ,,world\"), {'hello', 'world'})",
  "\tlocal words = {}\n\tlocal word = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\tif c == ' ' or c == ',' then\n\t\t\ttable.insert(words, word)\n\t\t\t\
    word = ''\n\t\telse\n\t\t\tword = word .. c\n\t\tend\n\tend\n\tif word ~= '' then\n\
    \t\ttable.insert(words, word)\n\tend\n\treturn words\nend", "  return s:gmatch(\"\
    %w+\")\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\") do\n  \
    \      table.insert(words, word)\n    end\n    return words\nend", "    local\
    \ words = {}\n    for w in s:gmatch(\"%S+\") do\n        words[#words + 1] = w\n\
    \    end\n    return words\nend", "    local words = {}\n    local i = 1\n   \
    \ local in_word = false\n    for c in s:gmatch(\".\") do\n        if c:match(\"\
    %s\") or c:match(\",\") then\n            if in_word then\n                words[i]\
    \ = words[i] .. c\n                in_word = false\n                i = i + 1\n\
    \            end\n        else\n            if not in_word then\n            \
    \    words[i] = c\n                in_word = true\n            else\n        \
    \        words[i] = words[i] .. c\n            end\n        end\n    end\n   \
    \ return words\nend", "  if type(s) ~= 'string' then\n    print('Error: the argument\
    \ must be a string.')\n    return nil\n  end\n  local t = {}\n  local i = 1\n\
    \  for word in string.gmatch(s, '%S+') do\n    t[i] = word\n    i = i + 1\n  end\n\
    \  return t\nend", "  local words = {}\n  for word in s:gmatch(\"%S+\") do\n \
    \   table.insert(words, word)\n  end\n  return words\nend", "   -- Split by spaces\
    \ and punctuation\n   local words = s:split(\"[^a-zA-Z0-9]+\")\n   -- Eliminate\
    \ spaces at the beginning and end\n   for i = 1, #words do\n      words[i] = words[i]:trim()\n\
    \   end\n   return words\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    return words\nend",
  "   local l = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\",\n               \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    ,\n               \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n               \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\",\n               \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n               \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\",\n               \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n               \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\",\n               \"\", \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n              \
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\",\n               \"\", \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n        \
    \       \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\",\n               \"\", \"\", \"\", \"\", \"\",\
    \ \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n  \
    \             \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\
    , \"\", \"\", \"\", \"\", \"\", \"\",\n               \"\",", "  if type(s) ~=\
    \ 'string' then\n    return s\n  end\n  local words = {}\n  for w in s:gmatch(\"\
    [^,%s]+\") do\n    table.insert(words, w)\n  end\n  return words\nend", "  local\
    \ words = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words, w)\n  end\n\
    \  return words\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\"\
    ) do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  if (type(s) ~= \"string\") then\n        return nil\n    end\n    local t =\
    \ {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(t, word)\n\
    \    end\n    return t\nend", "  local t = {}\n  for s in s:gmatch(\"%S+\") do\n\
    \    t[#t+1] = s\n  end\n  return t\nend", "  local words = {}\n  local word =\
    \ ''\n  for char in s:gmatch(\"%w\") do\n    word = word .. char\n  end\n  if\
    \ #word > 0 then\n    table.insert(words, word)\n  end\n  return words\nend",
  "\tlocal arr = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\ttable.insert(arr, word)\n\
    \tend\n\treturn arr\nend", "    local array = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(array, word)\n    end\n    return array\nend\n\
    assert(words_string(\"one,two three, four,five\") ==\n        {\"one\", \"two\"\
    , \"three\", \"four\", \"five\"})\nassert(words_string(\"one,two three,four,five\"\
    ) ==\n        {\"one\", \"two\", \"three\", \"four\", \"five\"})\nassert(words_string(\"\
    \ one,two three,four,five\") ==\n        {\"one\", \"two\", \"three\", \"four\"\
    , \"five\"})\nassert(words_string(\" one,two three,four,five \") ==\n        {\"\
    one\", \"two\", \"three\", \"four\", \"five\"})\nassert(words_string(\"one,two\
    \ three,four,five \") ==\n        {\"one\", \"two\", \"three\", \"four\", \"five\"\
    })\nassert(words_string(\"\") == {})\nassert(words_string(\" \") == {})\nassert(words_string(\"\
    \  \") == {})\nassert(words_string(\" , \") == {})\nassert(words_string(\" ,,\
    \ \") == {})\nassert(words_string(\" ,,, \") == {})\nassert(words_string(\" ,,,,\
    \ \") == {})\nassert(words_string(\" ,,,,, \") == {})\nassert(words_string(\"\
    \ ,,,,,, \") == {})\nassert(words_string(\" ,,,,,,, \") == {})\nassert(words_string(\"\
    \ ,,,,,,,, \") == {})\nassert(words_string(\" ,,,,,,,,, \") == {})\nassert(words_string(\"\
    \ ,,,,,,,,,, \") == {})\nassert(words_string(\" ,,,,,,,,,,, \") == {})\nassert(words_string(\"\
    \ ,,,,,,,,,,,, \") == {})\nassert(words_string(\" ,,,,,,,,,,,,, \") == {})\nassert(words_string(\"\
    \ ,,,,,,,,,,,,,, \") == {})\nassert(words_string(\" ,,,,,,,,,,,,,,, \") == {})\n\
    assert(words_string(\" ,,,,,,,,,,,,,,,, \") == {})\nassert(words_string(\" ,,,,,,,,,,,,,,,,,\
    \ \") == {})\nassert(words", "   local words = {}\n   for word in s:gmatch(\"\
    %S+\") do\n      table.insert(words, word)\n   end\n   return words\nend", " \
    \   return s:gmatch(\"%w+\")\nend", "    local tbl = {}\n    local word = \"\"\
    \n    for c in s:gmatch(\".\") do\n        if c == \" \" or c == \",\" then\n\
    \            table.insert(tbl, word)\n            word = \"\"\n        else\n\
    \            word = word .. c\n        end\n    end\n    table.insert(tbl, word)\n\
    \    return tbl\nend\nprint(table.concat(words_string(\"Hello World, I love Lua!\"\
    ), \" \"))", "  local result = {}\n  for word in s:gmatch(\"[^%s,]+\") do\n  \
    \  table.insert(result, word)\n  end\n  return result\nend", "  local res = {}\n\
    \  local k = 1\n  for m in string.gmatch(s, \"%w+\") do\n    res[k] = m\n    k\
    \ = k + 1\n  end\n  return res\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    words[#words + 1] = word\n  end\n  return words\nend", "    return\
    \ string.split(s, \",\")\nend", "  local words = {}\n  for w in s:gmatch(\"%w+\"\
    ) do\n    words[#words + 1] = w\n  end\n  return words\nend\nassert(words_string(\"\
    Hello, world!\") == {\"Hello\", \"world\"})\nassert(words_string(\"Hello, World!\"\
    ) == {\"Hello\", \"World\"})\nassert(words_string(\"I love Lua!\") == {\"I\",\
    \ \"love\", \"Lua\"})\nassert(words_string(\"The quick brown fox jumps over the\
    \ lazy dog.\") == {\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\"\
    , \"the\", \"lazy\", \"dog\"})", "   return table.concat(s, ' ')\nend", "    local\
    \ words = {}\n    for w in s:gmatch(\"%w+\") do\n        words[#words + 1] = w\n\
    \    end\n    return words\nend", "  local words = {}\n  local i = 1\n  local\
    \ sz = string.len(s)\n  local word_start\n  while i <= sz do\n    while string.sub(s,\
    \ i, i) == ' ' or string.sub(s, i, i) == ',' do\n      i = i + 1\n    end\n  \
    \  word_start = i\n    while string.sub(s, i, i) ~= ' ' and string.sub(s, i, i)\
    \ ~= ',' and i <= sz do\n      i = i + 1\n    end\n    if i <= sz then\n     \
    \ words[#words + 1] = string.sub(s, word_start, i - 1)\n    end\n  end\n  return\
    \ words\nend", "    local words = {}\n    for w in s:gmatch(\"[^%s,]+\") do table.insert(words,\
    \ w) end\n    return words\nend\nassert(same_set(words_string(\"one,two,three\"\
    ), {\"one\", \"two\", \"three\"}))\nassert(same_set(words_string(\"one two three\"\
    ), {\"one\", \"two\", \"three\"}))\nassert(same_set(words_string(\"one,two three\"\
    ), {\"one\", \"two\", \"three\"}))\nassert(same_set(words_string(\"one , two,\
    \ ,three\"), {\"one\", \"two\", \"three\"}))", "  local result = {}\n  for word\
    \ in s:gmatch(\"%w+\") do\n    table.insert(result, word)\n  end\n  return result\n\
    end\nassert(deepcompare(words_string(\"hello world\"), {\"hello\", \"world\"}))\n\
    assert(deepcompare(words_string(\"hello world, my name is moon\"),\n  {\"hello\"\
    , \"world\", \"my\", \"name\", \"is\", \"moon\"}))\nassert(deepcompare(words_string(\"\
    hello  world  my  name  is  moon\"),\n  {\"hello\", \"world\", \"my\", \"name\"\
    , \"is\", \"moon\"}))", "    local t = {}\n    for word in s:gmatch(\"%w+\") do\n\
    \        table.insert(t, word)\n    end\n    return t\nend", "   return s:gmatch(\"\
    %S+\")\nend", "    return (s:gsub(\"%s+\", \" \"):gsub(\"^%s*(.-)%s*$\", \"%1\"\
    ):gsub(\",\", \" \"):gsub(\"%s+\", \",\"))\nend", "  return {}\nend", "    return\
    \ split_string(s, '[^%s]*')\nend", "  return { }\nend", "    return split(s, \"\
    \ \")\nend", "  -- ...\nend", "  local t = {}\n  for w in s:gmatch(\"%w+\") do\n\
    \    t[#t+1] = w\n  end\n  return t\nend", "   local start = 1\n   local words\
    \ = {}\n   local word\n   while start <= #s do\n      local first, last = string.find(s,\
    \ \"[^%s,]+\", start)\n      if first then\n         word = string.sub(s, first,\
    \ last)\n         table.insert(words, word)\n         start = last + 1\n     \
    \ else\n         break\n      end\n   end\n   return words\nend", "\tlocal words\
    \ = {}\n\tfor word in s:gmatch(\"%S+\") do\n\t\twords[#words + 1] = word\n\tend\n\
    \treturn words\nend", "    return {}\nend", "  local t = {}\n  for w in s:gmatch('[^%s,]+')\
    \ do\n    t[#t+1] = w\n  end\n  return t\nend", "\tlocal array = {}\n\tfor word\
    \ in s:gmatch(\"%w+\") do\n\t\ttable.insert(array, word)\n\tend\n\treturn array\n\
    end\nassert_equal(\n\t{'hello', 'world'},\n\twords_string('hello, world')\n)\n\
    assert_equal(\n\t{'hello', 'world'},\n\twords_string('hello world')\n)", "   \
    \ local function gen()\n        for w in s:gmatch(\"%S+\") do\n            coroutine.yield(w)\n\
    \        end\n    end\n    return coroutine.wrap(gen)\nend", "    return s:gmatch(\"\
    [^,%s]+\")\nend", "  return s:gmatch('%w+')\nend", "  local t = {}\n  for word\
    \ in s:gmatch(\"%S+\") do\n    t[#t+1] = word\n  end\n  return t\nend\nassert(words_string(\"\
    \") == {})\nassert(words_string(\"test\") == {\"test\"})\nassert(words_string(\"\
    test one\") == {\"test\", \"one\"})\nassert(words_string(\"test,one\") == {\"\
    test\", \"one\"})\nassert(words_string(\"test one two\") == {\"test\", \"one\"\
    , \"two\"})\nassert(words_string(\"test,one,two\") == {\"test\", \"one\", \"two\"\
    })", "   return split(s, \"[%s,]+\")\nend", "  return s:gmatch(\"%S+\")\nend",
  "    local result = {}\n    for w in s:gmatch(\"[^ ,]+\") do\n        table.insert(result,\
    \ w)\n    end\n    return result\nend", "  local r = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    r[#r+1] = word\n  end\n  return r\nend\nassert(words_string(\"\
    a, b, c\") == {\"a\", \"b\", \"c\"})\nassert(words_string(\"a, b, c\") == {\"\
    a\", \"b\", \"c\"})\nassert(words_string(\"a, b, c\") == {\"a\", \"b\", \"c\"\
    })\nassert(words_string(\"a, b, c\") == {\"a\", \"b\", \"c\"})\nassert(words_string(\"\
    a, b, c\") == {\"a\", \"b\", \"c\"})", "\tlocal t = {}\n\tfor w in s:gmatch(\"\
    [^,%s]+\") do\n\t\tt[#t+1] = w\n\tend\n\treturn t\nend", "\tlocal function strip(s)\n\
    \t\treturn string.gsub(s, \"^%s*(.-)%s*$\", \"%1\")\n\tend\n\treturn split(strip(s),\
    \ \"%s*,?%s*\")\nend", "  return s:gmatch(\"%w+\")\nend", "    return {}\nend",
  "    return s:match'(.-)[^%s,]+$'\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    words[#words + 1] = word\n  end\n  return words\nend", "  if type(s)\
    \ ~= 'string' then return {} end\n  local w = {}\n  for word in s:gmatch('%w+')\
    \ do w[#w+1] = word end\n  return w\nend", "  local words = {}\n  for w in s:gmatch(\"\
    %w+\") do table.insert(words, w) end\n  return words\nend", "   return {}\nend",
  "  return utils.split(s, \"[ ,]+\")\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    words[#words + 1] = word\n  end\n  return words\nend", "   local\
    \ words = {}\n   for w in s:gmatch('%w+') do\n      words[#words+1] = w\n   end\n\
    \   return words\nend", "\tlocal s_table = {}\n\tlocal word = \"\"\n\t\n\tfor\
    \ char in s:gmatch(\".\") do\n\t\tif char == \" \" or char == \",\" then\n\t\t\
    \ttable.insert(s_table, word)\n\t\t\tword = \"\"\n\t\telse\n\t\t\tword = word\
    \ .. char\n\t\tend\n\tend\n\t\n\tif word ~= \"\" then\n\t\ttable.insert(s_table,\
    \ word)\n\tend\n\t\n\treturn s_table\nend", "\tif type(s) ~= \"string\" then\n\
    \t\treturn nil\n\tend\n\treturn split(s, \",\")\nend", "  local p = s:gmatch(\"\
    %w+\")\n  local r = {}\n  for v in p do\n    r[#r+1] = v\n  end\n  return r\n\
    end", "  local words = {}\n  for w in s:gmatch(\"%S+\") do\n    words[#words+1]\
    \ = w\n  end\n  return words\nend", "  return {}\nend", "    if s == \"\" then\n\
    \        return {}\n    end\n    local words = {}\n    local pos = 1\n    while\
    \ pos do\n        local i = string.find(s, \"[%s,]+\", pos)\n        if i then\n\
    \            table.insert(words, string.sub(s, pos, i - 1))\n            pos =\
    \ i + 1\n        else\n            table.insert(words, string.sub(s, pos))\n \
    \           pos = nil\n        end\n    end\n    return words\nend", "    return\
    \ split(s, \"%s*[, ]%s*\")\nend", "  return util.split(s, \"[, ]+\")\nend", " \
    \   local words = {}\n    for w in s:gmatch(\"%w+\") do\n        words[#words\
    \ + 1] = w\n    end\n    return words\nend", "    local t = {}\n    local function\
    \ helper(line)\n        for word in string.gmatch(line, \"[^ \\n\\t,]+\") do\n\
    \            table.insert(t, word)\n        end\n    end\n    if string.match(s,\
    \ \"\\n\") then\n        for line in string.gmatch(s, \"[^\\n]+\") do\n      \
    \      helper(line)\n        end\n    else\n        helper(s)\n    end\n    return\
    \ t\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\") do\n     \
    \   table.insert(words, word)\n    end\n    return words\nend", "  local words\
    \ = {}\n  for word in s:gmatch(\"%S+\") do\n    words[#words + 1] = word\n  end\n\
    \  return words\nend", "  local a = {}\n  for word in s:gmatch(\"%w+\") do\n \
    \   a[#a+1] = word\n  end\n  return a\nend", "  local words = {}\n  for w in s:gmatch(\"\
    %w+\") do\n    words[#words + 1] = w\n  end\n  return words\nend", "    local\
    \ words = {}\n    for word in s:gmatch(\"[^%s,]+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nassert(words_string(\"one,two,three\"\
    )[1] == \"one\")\nassert(words_string(\"one,two,three\")[2] == \"two\")\nassert(words_string(\"\
    one,two,three\")[3] == \"three\")\nassert(words_string(\"one,two,three\")[4] ==\
    \ nil)\nassert(words_string(\"one two three\")[1] == \"one\")\nassert(words_string(\"\
    one two three\")[2] == \"two\")\nassert(words_string(\"one two three\")[3] ==\
    \ \"three\")\nassert(words_string(\"one two three\")[4] == nil)", "    return\
    \ s:gmatch(\"%w+\")\nend", "\tlocal arr = {}\n\tfor i in string.gmatch(s, \"%S+\"\
    ) do\n\t\ttable.insert(arr, i)\n\tend\n\treturn arr\nend", "    return string.gmatch(s,\
    \ \"%S+\")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
