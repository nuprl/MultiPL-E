name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a list of strings.\n-- The list contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn table.concat(words, \" \")\nend", "  assert(words)\n  local\
    \ max_word, max_len\n  for _, word in ipairs(words) do\n    assert(word)\n   \
    \ local len = #word\n    if not max_len or len > max_len then\n      max_word,\
    \ max_len = word, len\n    end\n  end\n  return max_word\nend", "\tlocal max_word,\
    \ max_unique = words[1], string.unique_chars(words[1])\n\tfor i = 2, #words do\n\
    \t\tlocal word, unique = words[i], string.unique_chars(words[i])\n\t\tif unique\
    \ > max_unique then\n\t\t\tmax_word, max_unique = word, unique\n\t\telseif unique\
    \ == max_unique and word < max_word then\n\t\t\tmax_word, max_unique = word, unique\n\
    \t\tend\n\tend\n\treturn max_word\nend", "  local max = 1\n  local max_string\
    \ = words[1]\n  for i = 2, #words do\n    local tmp = table.pack(words[i]:gmatch('.'))\n\
    \    if #tmp > max then\n      max = #tmp\n      max_string = words[i]\n    end\n\
    \  end\n  return max_string\nend", "    local max_word = words[1]\n    local max_len\
    \ = 0\n    for _, w in ipairs(words) do\n        local len = 0\n        for c\
    \ in string.gmatch(w, \".\") do\n            if string.find(max_word, c) == nil\
    \ then\n                len = len + 1\n            end\n        end\n        if\
    \ len > max_len then\n            max_word = w\n            max_len = len\n  \
    \      end\n    end\n    return max_word\nend", "    local max = 0\n    local\
    \ maxword = \"\"\n    for _,word in ipairs(words) do\n        local count = {}\n\
    \        for _,char in ipairs(word) do\n            count[char] = true\n     \
    \   end\n        if #count > max then\n            max = #count\n            maxword\
    \ = word\n        end\n    end\n    return maxword\nend", "  local max_len = -1\n\
    \  local max_word = nil\n  for i = 1, #words do\n    local len = count_unique_chars(words[i])\n\
    \    if len > max_len then\n      max_len = len\n      max_word = words[i]\n \
    \   end\n  end\n  return max_word\nend", "    local max_word = words[1]\n    local\
    \ max_chars = util.string_uniq_chars(max_word)\n    for _, word in ipairs(words)\
    \ do\n        local num_chars = util.string_uniq_chars(word)\n        if num_chars\
    \ > max_chars then\n            max_word = word\n            max_chars = num_chars\n\
    \        end\n    end\n    return max_word\nend", "  -- TODO: Your code here\n\
    end", "    local uniques = {}\n    for _, v in ipairs(words) do\n        local\
    \ seen = {}\n        for i = 1, v:len() do\n            local char = v:sub(i,\
    \ i)\n            if not seen[char] then\n                seen[char] = true\n\
    \            end\n        end\n        uniques[v] = seen\n    end", "  if #words\
    \ == 0 then\n    return nil\n  end", "  -- TODO: your code here\nend", "    local\
    \ max_chars_n = 0\n    local max_str = nil\n    for _, word in ipairs(words) do\n\
    \        local chars_n = count_unique_chars(word)\n        if chars_n > max_chars_n\
    \ then\n            max_chars_n = chars_n\n            max_str = word\n      \
    \  end\n    end\n    return max_str\nend", "    local max_count = 0\n    local\
    \ max_word = ''\n    for _, word in ipairs(words) do\n        local chars = {}\n\
    \        for c in word:gmatch('.') do\n            chars[c] = true\n        end\n\
    \        local count = table.maxn(chars)\n        if max_count < count then\n\
    \            max_count = count\n            max_word = word\n        elseif max_count\
    \ == count and word < max_word then\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    local max = 0\n    local res = words[1]\n\
    \    for _, word in ipairs(words) do\n        local cnt = 0\n        for _, _\
    \ in pairs(unique_chars(word)) do\n            cnt = cnt + 1\n        end\n  \
    \      if cnt > max then\n            max = cnt\n            res = word\n    \
    \    end\n    end\n    return res\nend", "  local max_cnt = 0\n  local max_word\
    \ = ''\n  for _, word in ipairs(words) do\n    local cnt = count_unique_chars(word)\n\
    \    if cnt > max_cnt then\n      max_cnt = cnt\n      max_word = word\n    elseif\
    \ cnt == max_cnt and string.byte(word) < string.byte(max_word) then\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local word\n  local max\
    \ = 0\n  for i, w in ipairs(words) do\n    local seen = {}\n    for _, letter\
    \ in ipairs(w) do\n      seen[letter] = true\n    end\n    local n = next(seen)\n\
    \    if not n then goto continue end -- empty string\n    local len = 0\n    while\
    \ n do\n      len = len + 1\n      n = next(seen, n)\n    end\n    if len > max\
    \ then\n      max = len\n      word = w\n    end\n    ::continue::\n  end\n  return\
    \ word\nend", "  if not words or #words == 0 then\n    return nil\n  end", " \
    \   local words_char_map = {}\n    local max_word = nil\n    local max_unique_chars\
    \ = 0\n    for i, word in ipairs(words) do\n        local unique_chars = 0\n \
    \       local chars = {}\n        for j, char in ipairs(word) do\n           \
    \ if chars[char] == nil then\n                unique_chars = unique_chars + 1\n\
    \                chars[char] = true\n            end\n        end\n        words_char_map[word]\
    \ = unique_chars\n        if unique_chars > max_unique_chars then\n          \
    \  max_unique_chars = unique_chars\n            max_word = word\n        elseif\
    \ unique_chars == max_unique_chars then\n            if word < max_word then\n\
    \                max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend", "   local max_str, max_num = words[1], 0\n   for _, word in\
    \ ipairs(words) do\n      local seen = {}\n      for i = 1, #word do\n       \
    \  seen[word:sub(i, i)] = true\n      end\n      local num = 0\n      for _ in\
    \ pairs(seen) do\n         num = num + 1\n      end\n      if num > max_num then\n\
    \         max_str, max_num = word, num\n      end\n   end\n   return max_str\n\
    end", "    local max_word = nil\n    local max_word_char_count = 0\n    for _,\
    \ word in ipairs(words) do\n        -- create a table of characters in the current\
    \ word\n        local char_map = {}\n        for char in word:gmatch('.') do\n\
    \            char_map[char] = true\n        end\n        -- count the number of\
    \ unique characters in the current word\n        local char_count = 0\n      \
    \  for _ in pairs(char_map) do\n            char_count = char_count + 1\n    \
    \    end\n        -- check if the current word is the one with maximum number\
    \ of unique\n        -- characters\n        if char_count > max_word_char_count\
    \ then\n            max_word = word\n            max_word_char_count = char_count\n\
    \        end\n    end\n    return max_word\nend", "\tlocal word = nil\n\tlocal\
    \ unique_chars = {}\n\tlocal max_unique_chars = 0\n\tfor i, v in ipairs(words)\
    \ do\n\t\tunique_chars[v] = get_unique_chars(v)\n\t\tif #unique_chars[v] > max_unique_chars\
    \ then\n\t\t\tmax_unique_chars = #unique_chars[v]\n\t\t\tword = v\n\t\tend\n\t\
    end\n\treturn word\nend", "    -- your code here\n    local max = 0\n    local\
    \ index = 0\n    for i,word in ipairs(words) do\n        local dic = {}\n    \
    \    for w in word:gmatch(\".\") do\n            dic[w] = true\n        end\n\
    \        if max < #dic then\n            max = #dic\n            index = i\n \
    \       end\n    end\n    return words[index]\nend", "    local max_word, max_len\
    \ = words[1], 1\n    for _, word in ipairs(words) do\n        local uniq_chars\
    \ = {}\n        for i = 1, #word do\n            uniq_chars[word:sub(i, i)] =\
    \ true\n        end\n        local cur_len = table.len(uniq_chars)\n        if\
    \ cur_len > max_len then\n            max_word, max_len = word, cur_len\n    \
    \    end\n    end\n    return max_word\nend", "   local chars = {}\n   local max_word\
    \ = \"\"\n   local max_count = 0\n   for _, word in ipairs(words) do\n      for\
    \ _, c in utf8.codes(word) do\n         chars[c] = true\n      end\n      local\
    \ count = 0\n      for _ in pairs(chars) do\n         count = count + 1\n    \
    \  end\n      if count > max_count then\n         max_count = count\n        \
    \ max_word = word\n      end\n      chars = {}\n   end\n   return max_word\nend",
  "    local res = words[1]\n    local most_uniq_chars = #(res:gsub(\"[^%z]\", \"\"\
    ))", "  -- Write your solution here\n  local words_count = {}\n  for _, word in\
    \ ipairs(words) do\n    local unique_count = 0\n    for i = 1, #word do\n    \
    \  if not string.find(word, word:sub(i, i), i + 1) then\n        unique_count\
    \ = unique_count + 1\n      end\n    end\n    words_count[word] = unique_count\n\
    \  end\n  local sorted_words = {}\n  for word, _ in pairs(words_count) do\n  \
    \  table.insert(sorted_words, word)\n  end\n  table.sort(sorted_words, function(w1,\
    \ w2)\n    if words_count[w1] == words_count[w2] then\n      return w1 < w2\n\
    \    else\n      return words_count[w1] > words_count[w2]\n    end\n  end)\n \
    \ return sorted_words[1]\nend", "  local max = 0\n  local max_str = \"\"\n  for\
    \ _, word in ipairs(words) do\n    if unique_chars(word) > max then\n      max\
    \ = unique_chars(word)\n      max_str = word\n    end\n  end\n  return max_str\n\
    end", "  local max_count = 0\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local unique_chars = set.create(string.split(word))\n    local unique_chars_count\
    \ = set.size(unique_chars)\n    if unique_chars_count > max_count then\n     \
    \ max_count = unique_chars_count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local maxword = words[1]\n  local maxchars = 0\n  for _,\
    \ word in ipairs(words) do\n    local chars = get_unique_chars(word)\n    if #chars\
    \ > maxchars then\n      maxchars = #chars\n      maxword = word\n    end\n  end\n\
    \  return maxword\nend", "\t-- TODO: You are free to change the function definition\n\
    \t-- or remove this function completely.\n\treturn \"\"\nend", "\tlocal max_index\
    \ = 0\n\tlocal max_chars = 0\n\tfor i, word in ipairs(words) do\n\t\tlocal chars\
    \ = {}\n\t\tfor char in word:gmatch(\".\") do\n\t\t\tchars[char] = true\n\t\t\
    end\n\t\tlocal n = 0\n\t\tfor _ in pairs(chars) do\n\t\t\tn = n + 1\n\t\tend\n\
    \t\tif n > max_chars then\n\t\t\tmax_index = i\n\t\t\tmax_chars = n\n\t\tend\n\
    \tend\n\treturn words[max_index]\nend", "  local max_length, max_word = 0, ''\n\
    \  for _, word in ipairs(words) do\n    local length = string.len(word)\n    if\
    \ length > max_length then\n      max_length = length\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_word = words[1]\n  local\
    \ max_uniq = -1\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ uniq = 0\n    for j = 1, #word do\n      local c = word:sub(j, j)\n      if\
    \ not word:find(c, j + 1) then\n        uniq = uniq + 1\n      end\n    end\n\
    \    if uniq > max_uniq then\n      max_uniq = uniq\n      max_word = word\n \
    \   end\n  end\n  return max_word\nend", "    local word_counts = {}\n    local\
    \ current_max = 0\n    local current_max_word = nil\n    for _, word in ipairs(words)\
    \ do\n        local word_count = {}\n        for _, char in ipairs(word:split('',\
    \ true)) do\n            word_count[char] = true\n        end\n        if #word_count\
    \ > current_max then\n            current_max = #word_count\n            current_max_word\
    \ = word\n        end\n    end\n    return current_max_word\nend", "  local max_len\
    \ = 0\n  local max_ind = 0\n  for i, word in ipairs(words) do\n    local len =\
    \ 0\n    for c in string.gmatch(word, '.') do\n      if string.find(word, c, 1,\
    \ true) == i then\n        len = len + 1\n      end\n    end\n    if len > max_len\
    \ then\n      max_len = len\n      max_ind = i\n    end\n  end\n  return words[max_ind]\n\
    end", "\tlocal max = 0\n\tlocal max_word = nil\n\tfor _, word in ipairs(words)\
    \ do\n\t\tlocal num_uniq = 0\n\t\tfor i = 1, #word do\n\t\t\tlocal char = word:sub(i,\
    \ i)\n\t\t\tif word:find(char, i + 1) == nil then\n\t\t\t\tnum_uniq = num_uniq\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif num_uniq > max then\n\t\t\tmax = num_uniq\n\t\
    \t\tmax_word = word\n\t\tend\n\tend\n\treturn max_word\nend", "    -- TODO: Implement\n\
    end", "  local max_unique_chars = 0\n  local max_word = nil\n  for _, word in\
    \ ipairs(words) do\n    local unique_chars = count_unique_chars(word)\n    if\
    \ unique_chars > max_unique_chars then\n      max_unique_chars = unique_chars\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "\tif #words\
    \ == 0 then\n\t\treturn nil\n\tend\n\tlocal max_word = words[1]\n\tlocal max_n\
    \ = 0\n\tfor _, w in ipairs(words) do\n\t\tlocal n = num_unique_chars(w)\n\t\t\
    if n > max_n then\n\t\t\tmax_word = w\n\t\t\tmax_n = n\n\t\tend\n\tend\n\treturn\
    \ max_word\nend", "  local max = 0\n  local res = ''\n  for _, word in ipairs(words)\
    \ do\n    if max < count_unique(word) then\n      max = count_unique(word)\n \
    \     res = word\n    end\n  end\n  return res\nend", "    local max_count = 0\n\
    \    local max_word\n    for _, w in ipairs(words) do\n        local count = 0\n\
    \        for _ in utf8.codes(w) do\n            count = count + 1\n        end\n\
    \        if max_count < count then\n            max_count = count\n          \
    \  max_word = w\n        end\n    end\n    return max_word\nend", "    -- TODO:\
    \ Read task description.\n    local max = 0\n    local max_word = ''\n    for\
    \ _, word in ipairs(words) do\n        local unique_chars = 0\n        for c in\
    \ word:gmatch('.') do\n            unique_chars = unique_chars + 1\n        end\n\
    \        if unique_chars > max then\n            max = unique_chars\n        \
    \    max_word = word\n        end\n    end\n    return max_word\nend", "  local\
    \ max = 0\n  local maxword = \"\"\n  for _, word in ipairs(words) do\n    local\
    \ letters = {}\n    for c in word:gmatch(\".\") do\n      letters[c] = true\n\
    \    end\n    local count = 0\n    for _ in pairs(letters) do\n      count = count\
    \ + 1\n    end\n    if count > max then\n      max = count\n      maxword = word\n\
    \    elseif count == max and word < maxword then\n      maxword = word\n    end\n\
    \  end\n  return maxword\nend", "   local max_char_count = 0\n   local max_char_word\
    \ = nil\n   for _, word in ipairs(words) do\n      local unique_chars = {}\n \
    \     for i = 1, #word do\n         unique_chars[word:sub(i, i)] = true\n    \
    \  end\n      if #unique_chars > max_char_count then\n         max_char_count\
    \ = #unique_chars\n         max_char_word = word\n      end\n   end\n   return\
    \ max_char_word\nend", "    local word = words[1]\n    local max_cnt = word:len()\n\
    \    for i = 2, #words do\n        local cnt = words[i]:len()\n        if cnt\
    \ > max_cnt then\n            word = words[i]\n            max_cnt = cnt\n   \
    \     end\n    end\n    return word\nend", "  local max_word = words[1]\n  local\
    \ max_num = 0\n  for i, word in ipairs(words) do\n    local num = count_unique_chars(word)\n\
    \    if num > max_num then\n      max_num = num\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max_word = nil\n  local max_count =\
    \ 0\n  for _, w in ipairs(words) do\n    local count = table.count_unique(w:gmatch('%a'))\n\
    \    if count > max_count then\n      max_count = count\n      max_word = w\n\
    \    end\n  end\n  return max_word\nend", "  --[[\n  local max_unique = 0\n  local\
    \ max_unique_word = nil\n  for _, w in ipairs(words) do\n    local unique = 0\n\
    \    for c in w:gmatch(\".\") do\n      if w:find(c, 1, true) == w:find(c, 2,\
    \ true) then\n        unique = unique + 1\n      end\n    end\n    if unique >\
    \ max_unique then\n      max_unique = unique\n      max_unique_word = w\n    end\n\
    \  end\n  return max_unique_word\n  --]]\n  local max_unique = 0\n  local max_unique_word\
    \ = nil\n  for _, w in ipairs(words) do\n    local unique = 0\n    for c in w:gmatch(\"\
    .\") do\n      if w:find(c, 1, true) == w:find(c, 2, true) then\n        unique\
    \ = unique + 1\n      end\n    end\n    if unique > max_unique then\n      max_unique\
    \ = unique\n      max_unique_word = w\n    end\n  end\n  return max_unique_word\n\
    end", "  local max = 0\n  local max_word = ''\n  for _, word in ipairs(words)\
    \ do\n    local count = unique_chars(word)\n    if count > max then\n      max\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \   return reduce(\n        words,\n        function(max, w)\n            local\
    \ n_chars = n_unique_chars(w)\n            if n_chars > max[1] then\n        \
    \        return {n_chars, w}\n            elseif n_chars == max[1] then\n    \
    \            if w < max[2] then\n                    return {n_chars, w}\n   \
    \             else\n                    return max\n                end\n    \
    \        else\n                return max\n            end\n        end,\n   \
    \     {0, words[1]}\n    )[2]\nend", "    local curr_max = {0, ''}\n    for _,\
    \ word in ipairs(words) do\n        if utils.unique_count(word) > curr_max[1]\
    \ then\n            curr_max = {utils.unique_count(word), word}\n        end\n\
    \    end\n    return curr_max[2]\nend", "    local max_count, max_word = 0, nil\n\
    \    for i, word in ipairs(words) do\n        local count = 0\n        for j =\
    \ 1, #word do\n            if j == 1 or string.find(word, word:sub(j, j), 1, true)\
    \ == j then\n                count = count + 1\n            end\n        end\n\
    \        if count > max_count then\n            max_count, max_word = count, word\n\
    \        end\n    end\n    return max_word\nend", "    local max_count = 0\n \
    \   local max_word = nil\n    for i, w in ipairs(words) do\n        local count\
    \ = 0\n        for j = 1, #w do\n            if not string.find(w, w:sub(j, j),\
    \ j + 1) then\n                count = count + 1\n            end\n        end\n\
    \        if count > max_count then\n            max_count = count\n          \
    \  max_word = w\n        end\n    end\n    return max_word\nend", "  -- Write\
    \ your code here.\n  return ''\nend", "    local max_word = nil\n    local max_count\
    \ = 0\n    for _, word in ipairs(words) do\n        local uniq = {}\n        for\
    \ i = 1, #word do\n            uniq[word:sub(i, i)] = true\n        end\n    \
    \    local count = 0\n        for _ in pairs(uniq) do\n            count = count\
    \ + 1\n        end\n        if count > max_count then\n            max_count =\
    \ count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local max_word = words[1]\n    local max_chars = count_unique_chars(max_word)\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local n = count_unique_chars(word)\n\
    \        if n > max_chars then\n            max_word = word\n            max_chars\
    \ = n\n        end\n    end\n    return max_word\nend", "  local max = 0\n  local\
    \ word = nil\n  for _, w in ipairs(words) do\n    local count = 0\n    for i =\
    \ 1, #w do\n      if not w:find(w:sub(i, i), i + 1) then\n        count = count\
    \ + 1\n      end\n    end\n    if (not word or word > w) and count > max then\n\
    \      max = count\n      word = w\n    end\n  end\n  return word\nend", "\t--\
    \ TODO\nend", "  local max_word = words[1]\n  local max_unique = count_unique(max_word)\n\
    \  for _, word in ipairs(words) do\n    local unique = count_unique(word)\n  \
    \  if unique > max_unique then\n      max_word = word\n      max_unique = unique\n\
    \    end\n  end\n  return max_word\nend", "    local max_count = 0\n    local\
    \ max_word = \"\"\n    for i = 1, #words do\n        local word = words[i]\n \
    \       local set = {}\n        for j = 1, #word do\n            local char =\
    \ word:sub(j, j)\n            set[char] = true\n        end\n        local unique_count\
    \ = 0\n        for _ in pairs(set) do\n            unique_count = unique_count\
    \ + 1\n        end\n        if unique_count > max_count then\n            max_count\
    \ = unique_count\n            max_word = word\n        elseif unique_count ==\
    \ max_count then\n            if word < max_word then\n                max_word\
    \ = word\n            end\n        end\n    end\n    return max_word\nend", " \
    \   local max = words[1]\n    local max_unique = find_unique(max)\n    for _,\
    \ word in ipairs(words) do\n        local unique = find_unique(word)\n       \
    \ if #unique > #max_unique then\n            max = word\n            max_unique\
    \ = unique\n        end\n    end\n    return max\nend", '    local max = words[1]',
  "  local max_word, max_set, max_len = nil, {}, 0\n  for _, w in ipairs(words) do\n\
    \    local set = {}\n    for _, c in utf8.codes(w) do\n      set[c] = true\n \
    \   end\n    local len = table.length(set)\n    if max_word == nil or len > max_len\
    \ or (len == max_len and w < max_word) then\n      max_word, max_set, max_len\
    \ = w, set, len\n    end\n  end\n  return max_word\nend", "  local max_word, max_cnt\
    \ = nil, 0\n  for i = 1, #words do\n    local cnt = count_unique_chars(words[i])\n\
    \    if cnt > max_cnt then\n      max_word, max_cnt = words[i], cnt\n    end\n\
    \  end\n  return max_word\nend", "  local max_length = 0\n  local max_word = nil\n\
    \  for _, word in ipairs(words) do\n    local char_set = {}\n    for char in word:gmatch(\"\
    .\") do\n      char_set[char] = true\n    end\n    local length = 0\n    for _\
    \ in pairs(char_set) do\n      length = length + 1\n    end\n    if length > max_length\
    \ then\n      max_length = length\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_word, max_len = nil, 0\n  for _, word in ipairs(words)\
    \ do\n    local len = #util.unique(word)\n    if len > max_len then\n      max_word,\
    \ max_len = word, len\n    end\n  end\n  return max_word\nend", "    local max,\
    \ max_word = 0, ''\n    for _, word in ipairs(words) do\n        local uchar =\
    \ {}\n        for c in word:gmatch('.') do\n            uchar[c] = true\n    \
    \    end\n        local ulen = 0\n        for _ in pairs(uchar) do\n         \
    \   ulen = ulen + 1\n        end\n        if ulen > max then\n            max,\
    \ max_word = ulen, word\n        end\n    end\n    return max_word\nend", "  local\
    \ word_by_uniq = {}\n  local max_uniq = 0\n  local winner\n  for _, word in ipairs(words)\
    \ do\n    local uniq = unique_characters(word)\n    if uniq > max_uniq then\n\
    \      max_uniq = uniq\n      winner = word\n    elseif uniq == max_uniq then\n\
    \      if word < winner then\n        winner = word\n      end\n    end\n  end\n\
    \  return winner\nend", "   local max_string = nil\n   local max_length = 0\n\
    \   for i, word in ipairs(words) do\n      local char_map = {}\n      for i =\
    \ 1, #word do\n         char_map[word:sub(i, i)] = true\n      end\n      local\
    \ length = 0\n      for k, v in pairs(char_map) do\n         length = length +\
    \ 1\n      end\n      if length > max_length then\n         max_length = length\n\
    \         max_string = word\n      end\n   end\n   return max_string\nend", " \
    \ local max_len, max_word = 0, \"\"\n  for _, word in ipairs(words) do\n    local\
    \ len = count_unique_chars(word)\n    if len > max_len then\n      max_len, max_word\
    \ = len, word\n    elseif len == max_len and word < max_word then\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "\t-- TODO: Your code here!\n\
    end", "    local max_word, max_count = nil, 0\n    for i = 1, #words do\n    \
    \    local word = words[i]\n        local count = 0\n        for j = 1, #word\
    \ do\n            local ch = word:sub(j, j)\n            if word:find(ch, j +\
    \ 1) == nil then\n                count = count + 1\n            end\n       \
    \ end\n        if count > max_count then\n            max_word, max_count = word,\
    \ count\n        end\n    end\n    return max_word\nend\nprint(find_max({ \"aabcd\"\
    , \"abc\", \"hello\" }))   -- aabcd\nprint(find_max({ \"aabcd\", \"abcd\", \"\
    hello\" }))  -- abcd", "  local max_count, max_word\n  for _, word in ipairs(words)\
    \ do\n    local unique_count = unique_chars(word)\n    if max_count == nil or\
    \ unique_count > max_count then\n      max_count = unique_count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "    local max = 0\n    local\
    \ max_word = \"\"\n    for _, word in ipairs(words) do\n        local unique =\
    \ 0\n        for i = 1, #word do\n            unique = unique + 2 ^ (word:byte(i)\
    \ - 97)\n        end\n        if unique > max then\n            max = unique\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "\tassert(type(words) == \"table\")\n\tassert(#words > 0)", "    local max_word\
    \ = ''\n    local max_count = 0\n    for _, word in ipairs(words) do\n       \
    \ local count = {}\n        for ch in word:gmatch '.' do\n            count[ch]\
    \ = true\n        end\n        if max_count < #count then\n            max_count\
    \ = #count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local max = {word = nil, count = 0}\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for i = 1, #word do\n            local\
    \ c = word:sub(i, i)\n            if c ~= ' ' and not word:find(c, i + 1) then\n\
    \                count = count + 1\n            end\n        end\n        if max.count\
    \ < count then\n            max.count = count\n            max.word = word\n \
    \       end\n    end\n    return max.word\nend", "\t-- TODO: Implement this function\n\
    end", "  local max_num = 0\n  local max_word = ''\n  for i, word in ipairs(words)\
    \ do\n    local word_table = word:chars()\n    local num = #word_table\n    if\
    \ num > max_num then\n      max_num = num\n      max_word = word\n    end\n  end\n\
    \  return max_word\nend", "    -- error handling\n    assert(type(words) == \"\
    table\", \"bad argument #1 to find_max()\")\n    assert(#words > 0, \"bad argument\
    \ #1 to find_max()\")\n    assert(all_strings(words), \"bad argument #1 to find_max()\"\
    )", "  local res_word, res_uniq = nil, 0\n  for _, word in ipairs(words) do\n\
    \    local uniq_chars = {}\n    for i = 1, #word do\n      uniq_chars[word:sub(i,\
    \ i)] = true\n    end\n    if not res_word or #uniq_chars > res_uniq then\n  \
    \    res_word, res_uniq = word, #uniq_chars\n    end\n  end\n  return res_word\n\
    end", "  local function is_unique(w)\n    for i=1, #w do\n      for j=i+1, #w\
    \ do\n        if w:sub(i,i) == w:sub(j,j) then\n          return false\n     \
    \   end\n      end\n    end\n    return true\n  end", "    local max = {count\
    \ = 0, word = \"\"}\n    for _, word in ipairs(words) do\n        local count\
    \ = 0\n        for i = 1, #word do\n            if word:find(word:sub(i, i), i\
    \ + 1) == nil then\n                count = count + 1\n            end\n     \
    \   end\n        if count > max.count then\n            max.count = count\n  \
    \          max.word = word\n        elseif count == max.count and word < max.word\
    \ then\n            max.word = word\n        end\n    end\n    return max.word\n\
    end", "  local max = 0\n  local max_word = ''\n  for _, word in ipairs(words)\
    \ do\n    local length = len(unique(word))\n    if length > max then\n      max\
    \ = length\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ if not words or #words == 0 then\n    return nil\n  end", "  local max_count\
    \ = 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local ucount\
    \ = get_unique_count(word)\n    if ucount > max_count then\n      max_count =\
    \ ucount\n      max_word = word\n    elseif ucount == max_count then\n      if\
    \ word < max_word then\n        max_word = word\n      end\n    end\n  end\n \
    \ return max_word\nend", "    local max = {}\n    for _, word in ipairs(words)\
    \ do\n        local c = {}\n        for i = 1, string.len(word) do\n         \
    \   local char = string.sub(word, i, i)\n            if not c[char] then\n   \
    \             c[char] = 1\n            end\n        end\n        if #max == 0\
    \ or #c > #max then\n            max = c\n        end\n    end\n    return max\n\
    end", "   local max = 0\n   local unique = 0\n   local word = ''\n   for i = 1,\
    \ #words do\n      unique = #get_uniques(words[i])\n      if unique > max then\n\
    \         max = unique\n         word = words[i]\n      end\n   end\n   return\
    \ word\nend", "  local max = 0\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local num_unique = count_unique(word)\n    if num_unique > max then\n\
    \      max = num_unique\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "  local max_word, max_word_letters, max_word_len = nil, {}, 0\n  for _,\
    \ word in ipairs(words) do\n    local letters = {}\n    for _, letter in ipairs(word)\
    \ do\n      letters[letter] = true\n    end\n    local num_letters = table.getn(letters)\n\
    \    if num_letters > max_word_len then\n      max_word, max_word_letters, max_word_len\
    \ = word, letters, num_letters\n    end\n  end\n  return max_word\nend\nassert(find_max({\"\
    apple\", \"banana\", \"orange\"}) == \"banana\")\nassert(find_max({\"python\"\
    , \"perl\", \"java\"}) == \"java\")\nassert(find_max({\"a\", \"aa\", \"aaa\"})\
    \ == \"a\")\nassert(find_max({\"a\", \"Aa\", \"aaa\"}) == \"a\")", "    local\
    \ function map_unique_chars(word)\n        local counts = {}\n        for c in\
    \ utf8.gmatch(word, \".\") do\n            counts[c] = true\n        end\n   \
    \     return #counts\n    end", "  local max = 0\n  local max_word = \"\"\n  for\
    \ _,word in ipairs(words) do\n    local cnt = {}\n    for i = 1,#word do\n   \
    \   cnt[word:sub(i,i)] = true\n    end\n    local num = 0\n    for c in pairs(cnt)\
    \ do\n      num = num + 1\n    end\n    if num > max then\n      max = num\n \
    \     max_word = word\n    elseif num == max and max_word > word then\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "\tlocal maxWord = \"\"\n\t\
    local maxNum = 0\n\tfor i, word in ipairs(words) do\n\t\tlocal unique = {}\n\t\
    \tfor j = 1, #word do\n\t\t\tunique[word:sub(j, j)] = true\n\t\tend\n\t\tlocal\
    \ count = 0\n\t\tfor k, _ in pairs(unique) do\n\t\t\tcount = count + 1\n\t\tend\n\
    \t\tif count > maxNum then\n\t\t\tmaxNum = count\n\t\t\tmaxWord = word\n\t\tend\n\
    \tend\n\treturn maxWord\nend", "    local best = words[1]\n    local best_score\
    \ = uniq(best)\n    for i=2,#words do\n        local word = words[i]\n       \
    \ local score = uniq(word)\n        if score > best_score then\n            best\
    \ = word\n            best_score = score\n        end\n    end\n    return best\n\
    end", "\t-- local cur_max, cur_max_char = words[1], count_unique_chars(words[1])\n\
    \t-- for i = 2, #words do\n\t-- \tlocal cur_word = words[i]\n\t-- \tlocal cur_char\
    \ = count_unique_chars(cur_word)\n\t-- \tif cur_char > cur_max_char then\n\t--\
    \ \t\tcur_max, cur_max_char = cur_word, cur_char\n\t-- \tend\n\t-- end\n\t-- return\
    \ cur_max", "   local max_chars = {}\n   local max_word = nil\n   for _, word\
    \ in ipairs(words) do\n      local has = {}\n      for i = 1, #word do\n     \
    \    has[word:sub(i, i)] = true\n      end\n      if #has > #max_chars then\n\
    \         max_chars = has\n         max_word = word\n      end\n   end\n   return\
    \ max_word\nend", "  -- TODO: implement function\nend", "  local max, word = 0,\
    \ nil\n  for _, w in ipairs(words) do\n    local count = 0\n    for _ in pairs(char_set(w))\
    \ do\n      count = count + 1\n    end\n    if count > max then\n      max, word\
    \ = count, w\n    end\n  end\n  return word\nend", "    local max = 0\n    local\
    \ cur = nil\n    for i = 1, #words do\n        local v = words[i]\n        local\
    \ count = 0\n        for j = 1, #v do\n            if (cur == nil or cur == v[j])\
    \ then\n                cur = v[j]\n                count = count + 1\n      \
    \      end\n        end\n        if (count > max) then\n            max = count\n\
    \            cur = v\n        end\n    end\n    return cur\nend", "    local length\
    \ = 0\n    local word\n    for _, v in ipairs(words) do\n        if #v > length\
    \ then\n            length = #v\n            word = v\n        end\n    end\n\
    \    return word\nend", "  local max_str = \"\"\n  local max_num = 0\n  for i,\
    \ word in ipairs(words) do\n    local len = #unique_chars(word)\n    if len >\
    \ max_num then\n      max_num = len\n      max_str = word\n    end\n  end\n  return\
    \ max_str\nend", "    -- TODO: Implement me\nend", "    assert(words)\n    assert(#words\
    \ > 0)", "\tlocal max_word, max_chars, max_count = '', 0, 0\n\tfor _, word in\
    \ ipairs(words) do\n\t\tlocal count = get_count(word)\n\t\tif count > max_count\
    \ then\n\t\t\tmax_count = count\n\t\t\tmax_word = word\n\t\telseif count == max_count\
    \ then\n\t\t\tif max_word > word then\n\t\t\t\tmax_word = word\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn max_word\nend", "    if #words == 0 then\n        return\
    \ nil\n    end", "  local max_word = words[1]\n  local max_uniq = count_uniq(max_word)\n\
    \  for _, word in ipairs(words) do\n    local uniq = count_uniq(word)\n    if\
    \ uniq > max_uniq then\n      max_word = word\n      max_uniq = uniq\n    end\n\
    \  end\n  return max_word\nend", "    if not words then\n        return nil\n\
    \    end", "    local max = 0\n    local max_word = nil\n    for _, word in ipairs(words)\
    \ do\n        local s = Set.new(string.split(word, ''))\n        if s:len() >\
    \ max then\n            max = s:len()\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend", "    local length = #words\n    local max\
    \ = 1\n    local max_char = {}\n    local char = {}\n    local index = 1\n   \
    \ while max <= length do\n        max_char[max] = words[max]\n        char[max]\
    \ = {}\n        for c in words[max]:gmatch('%a') do\n            char[max][c]\
    \ = true\n        end\n        max = max + 1\n    end\n    for i = 1, #max_char\
    \ do\n        for j = i + 1, #max_char do\n            if #char[i] < #char[j]\
    \ then\n                max_char[i], max_char[j] = max_char[j], max_char[i]\n\
    \                char[i], char[j] = char[j], char[i]\n            end\n      \
    \  end\n    end\n    return max_char[1]\nend", "  local max_unique_chars = 0\n\
    \  local max_word = ''\n  for _, word in ipairs(words) do\n    local unique_chars\
    \ = make_set(word)\n    if #unique_chars > max_unique_chars then\n      max_unique_chars\
    \ = #unique_chars\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "    local t = {}\n    for _,w in ipairs(words) do\n        local unique\
    \ = {}\n        for c in w:gmatch('.') do\n            unique[c] = true\n    \
    \    end\n        t[#t+1] = { w, unique }\n    end\n    local max = 0\n    local\
    \ res = ''\n    for _,p in ipairs(t) do\n        local num = 0\n        for _\
    \ in pairs(p[2]) do\n            num = num + 1\n        end\n        if num >\
    \ max then\n            max = num\n            res = p[1]\n        elseif num\
    \ == max and p[1] < res then\n            res = p[1]\n        end\n    end\n \
    \   return res\nend", "  if #words == 0 then\n    return nil\n  end", "    local\
    \ max_words = {}\n    local max_uniq = 0\n    for _, word in ipairs(words) do\n\
    \        local uniq = 0\n        for i = 1, #word do\n            local c = word:sub(i,\
    \ i)\n            if word:find(c, i + 1) == nil then\n                uniq = uniq\
    \ + 1\n            end\n        end\n        if uniq > max_uniq then\n       \
    \     max_uniq = uniq\n            max_words = {word}\n        elseif uniq ==\
    \ max_uniq then\n            table.insert(max_words, word)\n        end\n    end\n\
    \    table.sort(max_words)\n    return max_words[1]\nend", "  return {}\nend",
  "  local max_word, max_chars = nil, 0\n  for _, word in ipairs(words) do\n    local\
    \ chars = {}\n    for i = 1, word:len() do\n      local char = word:sub(i, i)\n\
    \      if not chars[char] then\n        chars[char] = true\n      end\n    end\n\
    \    local num_chars = 0\n    for _ in pairs(chars) do\n      num_chars = num_chars\
    \ + 1\n    end\n    if num_chars > max_chars then\n      max_word, max_chars =\
    \ word, num_chars\n    end\n  end\n  return max_word\nend", "    local max = 0\n\
    \    local max_word = \"\"\n    for word in all(words) do\n        local word_chars\
    \ = {}\n        for char in all(word) do\n            word_chars[char] = true\n\
    \        end\n        local num_unique_chars = len(word_chars)\n        if num_unique_chars\
    \ > max then\n            max = num_unique_chars\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "    if #words == 0 then\n \
    \       return \"\"\n    end", "  local longest, max = nil, 0\n  for _, word in\
    \ ipairs(words) do\n    local n = nub(string.gmatch(word, \"%a\"))\n    if n >\
    \ max then\n      longest, max = word, n\n    end\n  end\n  return longest\nend",
  "  local winner, max_unique = '', 0\n  for word in iter(words) do\n    local unique\
    \ = 0\n    for char in iter(word) do\n      if not char_has_been_seen(char) then\n\
    \        unique = unique + 1\n        remember_char(char)\n      end\n    end\n\
    \    if unique > max_unique then\n      winner, max_unique = word, unique\n  \
    \  end\n    clear_char_seen()\n  end\n  return winner\nend", "\tlocal max\n\t\
    for _, v in ipairs(words) do\n\t\tif not max or max.length < v.length then\n\t\
    \t\tmax = v\n\t\tend\n\tend\n\treturn max.word\nend", "    local maxLen = 0\n\
    \    local maxWord = nil\n    for _, word in ipairs(words) do\n        local len\
    \ = 0\n        for c in word:gmatch(\".\") do\n            len = len + (c:len()\
    \ == 1 and 1 or 0)\n        end\n        if len > maxLen then\n            maxLen\
    \ = len\n            maxWord = word\n        end\n    end\n    return maxWord\n\
    end", "  local stats = {}\n  local res, max_len = nil, 0\n  for _, word in ipairs(words)\
    \ do\n    local len = #util.unique(word)\n    if len > max_len then\n      res,\
    \ max_len = word, len\n    end\n  end\n  return res\nend", "    -- YOUR CODE HERE\n\
    end", "    local max_word, max_count = nil, 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _ in word:gmatch\".\" do\n        \
    \    count = count + 1\n        end\n        if count > max_count then\n     \
    \       max_word, max_count = word, count\n        end\n    end\n    return max_word\n\
    end", "  local max = 0\n  local result = nil\n  for _, word in ipairs(words) do\n\
    \    if #set(word) > max then\n      max = #set(word)\n      result = word\n \
    \   end\n  end\n  return result\nend", "  local max_count = 0\n  local max_word\
    \ = \"\"\n  for i = 1, #words do\n    local word = words[i]\n    local characters\
    \ = {}\n    for j = 1, #word do\n      local char = word:sub(j, j)\n      characters[char]\
    \ = true\n    end\n    local count = 0\n    for char, _ in pairs(characters) do\n\
    \      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    elseif count == max_count and word < max_word\
    \ then\n      max_word = word\n    end\n  end\n  return max_word\nend", "    local\
    \ res = words[1]\n    local max = #u.unique(words[1])\n    for _, word in ipairs(words)\
    \ do\n        local cnt = #u.unique(word)\n        if cnt > max then\n       \
    \     max = cnt\n            res = word\n        end\n    end\n    return res\n\
    end", "  local max_word = words[1]\n  local max_uniq = 0\n  for _, word in ipairs(words)\
    \ do\n    local num_uniq = find_uniq(word)\n    if num_uniq > max_uniq then\n\
    \      max_uniq = num_uniq\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "    return table.max(words, function(a, b)\n        if #unique_chars(a)\
    \ == #unique_chars(b) then\n            return a < b\n        else\n         \
    \   return #unique_chars(a) > #unique_chars(b)\n        end\n    end)\nend", " \
    \   local max, max_word = 0, nil\n    for i, word in ipairs(words) do\n      \
    \  local c = count_unique_chars(word)\n        if c > max then\n            max,\
    \ max_word = c, word\n        end\n    end\n    return max_word\nend", "    local\
    \ max = 0\n    local index = 1\n    for i = 1, #words do\n        local word =\
    \ words[i]\n        local num = count_unique(word)\n        if num > max then\n\
    \            max = num\n            index = i\n        end\n    end\n    return\
    \ words[index]\nend", "    local max_word = nil\n    local max_len = 0\n    for\
    \ _, w in ipairs(words) do\n        local len = #uniq(w)\n        if len > max_len\
    \ then\n            max_word = w\n            max_len = len\n        end\n   \
    \ end\n    return max_word\nend", "  -- <your code here>\nend", "\tlocal maxLen,\
    \ maxStr = 0, \"\"\n\tfor i = 1, #words do\n\t\tlocal word = words[i]\n\t\tlocal\
    \ chars = {}\n\t\tfor i = 1, #word do\n\t\t\tchars[word:sub(i, i)] = true\n\t\t\
    end\n\t\tlocal len = 0\n\t\tfor k, _ in pairs(chars) do\n\t\t\tlen = len + 1\n\
    \t\tend\n\t\tif len > maxLen then\n\t\t\tmaxLen = len\n\t\t\tmaxStr = word\n\t\
    \tend\n\tend\n\treturn maxStr\nend", "   local max = 0\n   local max_word = \"\
    \"\n   for _, word in ipairs(words) do\n      local count = 0\n      for char\
    \ in string.gmatch(word, \"%a\") do\n         if string.find(word, char, 1, true)\
    \ == string.find(word, char, 2, true) then\n            count = count + 1\n  \
    \       end\n      end\n      if count > max then\n         max = count\n    \
    \     max_word = word\n      end\n   end\n   return max_word\nend", "  local counts\
    \ = {}\n  for _, word in ipairs(words) do\n    -- Remove repeating characters\n\
    \    local chars = {}\n    for _, c in ipairs(word:lower():gmatch('.')) do\n \
    \     chars[c] = true\n    end\n    -- Count unique characters\n    local count\
    \ = 0\n    for _ in pairs(chars) do\n      count = count + 1\n    end\n    --\
    \ Mark the word and its count\n    counts[word] = count\n  end\n  -- Find the\
    \ word with maximum count\n  local max_count = 0\n  local max_word = nil\n  for\
    \ word, count in pairs(counts) do\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \   local max_word = ''\n    local max_chars = 0\n    for _, w in ipairs(words)\
    \ do\n        local chars = {}\n        for c in w:gmatch('.') do\n          \
    \  chars[c] = true\n        end\n        local num_chars = #chars\n        if\
    \ num_chars > max_chars then\n            max_chars = num_chars\n            max_word\
    \ = w\n        end\n    end\n    return max_word\nend", "  local max = 1\n  local\
    \ max_word = words[1]\n  for i = 2, #words do\n    local current = words[i]\n\
    \    local current_chars = {}\n    for j = 1, #current do\n      local char =\
    \ current:sub(j, j)\n      current_chars[char] = 1\n    end\n    local num_current_chars\
    \ = 0\n    for _ in pairs(current_chars) do\n      num_current_chars = num_current_chars\
    \ + 1\n    end\n    if num_current_chars > max then\n      max = num_current_chars\n\
    \      max_word = current\n    end\n  end\n  return max_word\nend", "\tif #words\
    \ == 0 then\n\t\treturn ''\n\tend", "    local max = {}\n    for i, word in ipairs(words)\
    \ do\n        local found = {}\n        for j, c in ipairs(word) do\n        \
    \    found[c] = true\n        end\n        local char_count = 0\n        for k,\
    \ v in pairs(found) do\n            char_count = char_count + 1\n        end\n\
    \        if char_count > #max then\n            max = word\n        end\n    end\n\
    \    return max\nend", "\tlocal max_ind = 1\n\tlocal max_uniq = 0\n\tlocal max_word\
    \ = words[1]\n\tfor i,w in ipairs(words) do\n\t\tlocal count = 0\n\t\tfor j =\
    \ 1, string.len(w) do\n\t\t\tlocal c = string.sub(w, j, j)\n\t\t\tif not string.find(max_word,\
    \ c) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count > max_uniq\
    \ then\n\t\t\tmax_ind = i\n\t\t\tmax_uniq = count\n\t\t\tmax_word = w\n\t\tend\n\
    \tend\n\treturn max_ind, max_word\nend", "  local max_count, max_index = 0, 0\n\
    \  for i, word in ipairs(words) do\n    local unique_count = unique_char_count(word)\n\
    \    if unique_count > max_count then\n      max_count = unique_count\n      max_index\
    \ = i\n    end\n  end\n  return words[max_index]\nend", "    local max = 0\n \
    \   local result = nil\n    for i = 1, #words do\n        local chars = {}\n \
    \       for c in words[i]:gmatch(\".\") do\n            chars[c] = true\n    \
    \    end\n        local count = 0\n        for k, v in pairs(chars) do\n     \
    \       count = count + 1\n        end\n        if count > max then\n        \
    \    max = count\n            result = words[i]\n        end\n    end\n    return\
    \ result\nend", "    local max = 0\n    local candidate = words[1]\n    for i\
    \ = 1, #words do\n        local word = words[i]\n        local unique = {}\n \
    \       for c in word:gmatch('.') do\n            unique[c] = true\n        end\n\
    \        if #unique > max then\n            max = #unique\n            candidate\
    \ = word\n        end\n    end\n    return candidate\nend", "  local max_word\
    \ = nil\n  local max_unique = 0\n  for _, w in ipairs(words) do\n    local unique\
    \ = num_unique_chars(w)\n    if unique > max_unique then\n      max_unique = unique\n\
    \      max_word = w\n    end\n  end\n  return max_word\nend", "    local find_unique\
    \ = function(word)\n        local unique = {}\n        for i = 1, #word do\n \
    \           local char = word:sub(i, i)\n            if unique[char] == nil then\n\
    \                unique[char] = true\n            end\n        end\n        return\
    \ #unique\n    end", "    local word_max = words[1]\n    local max_unique = #unique_characters(word_max)\n\
    \    for _, word in ipairs(words) do\n        local unique = #unique_characters(word)\n\
    \        if unique > max_unique or\n                (unique == max_unique and\
    \ word < word_max) then\n            word_max = word\n            max_unique =\
    \ unique\n        end\n    end\n    return word_max\nend", "  assert(type(words)\
    \ == 'table')\n  local max_word, max_count = '', 0\n  for _, word in ipairs(words)\
    \ do\n    assert(type(word) == 'string')\n    local word_count = {}\n    for c\
    \ in word:gmatch('.') do\n      word_count[c] = true\n    end\n    local count\
    \ = 0\n    for _ in pairs(word_count) do\n      count = count + 1\n    end\n \
    \   if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    elseif count == max_count and max_word > word then\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_characters = 0\n  local\
    \ result = nil\n  for _, word in ipairs(words) do\n    local characters = get_unique_characters(word)\n\
    \    if #characters > max_characters then\n      max_characters = #characters\n\
    \      result = word\n    end\n  end\n  return result\nend", "    if #words ==\
    \ 0 then\n        return nil\n    end", "  local max_word, max_chars = words[1],\
    \ unique_chars(words[1])\n  for i = 2, #words do\n    local word, chars = words[i],\
    \ unique_chars(words[i])\n    if chars > max_chars then\n      max_word, max_chars\
    \ = word, chars\n    elseif chars == max_chars and word < max_word then\n    \
    \  max_word = word\n    end\n  end\n  return max_word\nend", "\tlocal max_len\
    \ = 0\n\tlocal max_str = \"\"\n\tfor _, word in ipairs(words) do\n\t\tlocal len\
    \ = word:len()\n\t\tlocal letter_set = {}\n\t\tfor c in word:gmatch(\".\") do\n\
    \t\t\tletter_set[c] = true\n\t\tend\n\t\tif len > max_len then\n\t\t\tmax_len\
    \ = len\n\t\t\tmax_str = word\n\t\telseif len == max_len then\n\t\t\tif word <\
    \ max_str then\n\t\t\t\tmax_str = word\n\t\t\tend\n\t\tend\n\tend\n\treturn max_str\n\
    end", "\t-- local function aux function\n\tlocal function find_max_aux(max, words)\n\
    \t\tif #words == 0 then\n\t\t\treturn max\n\t\telse\n\t\t\tlocal max_word, max_chars\
    \ = max.word, max.chars\n\t\t\tlocal word, chars = words[1], { }\n\t\t\tfor i\
    \ = 1, #word do\n\t\t\t\tlocal c = word:sub(i, i)\n\t\t\t\tif not chars[c] then\n\
    \t\t\t\t\tchars[c] = true\n\t\t\t\tend\n\t\t\tend\n\t\t\tif #chars > max_chars\
    \ then\n\t\t\t\tmax_word, max_chars = word, #chars\n\t\t\telseif #chars == max_chars\
    \ and word < max_word then\n\t\t\t\tmax_word, max_chars = word, #chars\n\t\t\t\
    end\n\t\t\treturn find_max_aux({ word = max_word, chars = max_chars },\n\t\t\t\
    \t{ unpack(words, 2) })\n\t\tend\n\tend\n\treturn find_max_aux({ word = '', chars\
    \ = 0 }, words).word\nend", "  local word\n  local max_char = 0\n  for i = 1,\
    \ #words do\n    local current_char = #words[i]:gsub(\".\", \"\"):gsub(\"^()*$\"\
    , \"\"):gsub(\"(.)()*\", \"%1\")\n    if current_char > max_char then\n      max_char\
    \ = current_char\n      word = words[i]\n    end\n  end\n  return word\nend",
  "  local max = 0\n  local max_word = ''\n  for i = 1, #words do\n    local word\
    \ = words[i]\n    local unique = {}\n    for j = 1, #word do\n      local char\
    \ = word:sub(j, j)\n      unique[char] = true\n    end\n    local count = 0\n\
    \    for k, v in pairs(unique) do\n      count = count + 1\n    end\n    if count\
    \ > max then\n      max = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "    local max, max_len, max_word\n    for _, word in ipairs(words)\
    \ do\n        local n = nunique(word)\n        if not max or n > max_len then\n\
    \            max, max_len, max_word = n, n, word\n        elseif n == max_len\
    \ then\n            if word < max_word then\n                max_word = word\n\
    \            end\n        end\n    end\n    return max_word\nend", "  local max_word,\
    \ max_count = nil, 0\n  for _,word in ipairs(words) do\n    local count = #word:gsub('(.)([^%1])',\
    \ '%1')\n    if count > max_count then\n      max_word, max_count = word, count\n\
    \    end\n  end\n  return max_word\nend", "    if #words == 0 then\n        return\
    \ \"\"\n    end", "    local max_len = 0\n    local max_word\n    for _, word\
    \ in ipairs(words) do\n        local len = #(table.unique(word:chars()))\n   \
    \     if len > max_len then\n            max_len = len\n            max_word =\
    \ word\n        end\n    end\n    return max_word\nend", "\t-- body\n\tlocal max\
    \ = 0\n\tlocal curr = {}\n\tlocal max_word = ''\n\tfor i = 1, #words do\n\t\t\
    for j = 1, #words[i] do\n\t\t\tcurr[words[i]:sub(j, j)] = 1\n\t\tend\n\t\tif next(curr)\
    \ > max then\n\t\t\tmax = next(curr)\n\t\t\tmax_word = words[i]\n\t\tend\n\t\t\
    curr = {}\n\tend\n\treturn max_word\nend", "\tlocal max = { word = words[1], count\
    \ = 0 }\n\tfor _, word in ipairs(words) do\n\t\tlocal count = {}\n\t\tfor c in\
    \ word:gmatch('.') do\n\t\t\tcount[c] = true\n\t\tend\n\t\tif #count > max.count\
    \ then\n\t\t\tmax.word = word\n\t\t\tmax.count = #count\n\t\tend\n\tend\n\treturn\
    \ max.word\nend", "\t-- Convert words to pairs of words and their set of chars.\n\
    \tlocal pairs = {}\n\tfor _, word in ipairs(words) do\n\t\ttable.insert(pairs,\
    \ {word, string_chars(word)})\n\tend", "    local alphabet = {}\n    local count\
    \ = {}\n    local max_word, max_chars = words[1], 1\n    for _, word in ipairs(words)\
    \ do\n        local chars = 0\n        for _, char in ipairs(utf8.characters(word))\
    \ do\n            if not alphabet[char] then\n                alphabet[char] =\
    \ true\n                chars = chars + 1\n            end\n        end\n    \
    \    if chars > max_chars then\n            max_word, max_chars = word, chars\n\
    \        end\n    end\n    return max_word\nend", "\t-- TODO.\nend", "   local\
    \ max = 0\n   local max_word = ''\n   for _, word in ipairs(words) do\n      local\
    \ unique = {}\n      for i = 1, word:len() do\n         unique[word:sub(i, i)]\
    \ = true\n      end\n      if table.len(unique) > max then\n         max = table.len(unique)\n\
    \         max_word = word\n      end\n   end\n   return max_word\nend", "    local\
    \ max_count = 0\n    local max_word = ''\n    for _, word in ipairs(words) do\n\
    \        local count = count_uniq(word)\n        if count > max_count then\n \
    \           max_count = count\n            max_word = word\n        elseif count\
    \ == max_count and word < max_word then\n            max_word = word\n       \
    \ end\n    end\n    return max_word\nend", "\tlocal max = 0\n\tlocal i = 1\n\t\
    local m_index = 0\n\tfor _, word in ipairs(words) do\n\t\tlocal set = {}\n\t\t\
    for i = 1, #word do\n\t\t\tset[word:sub(i, i)] = true\n\t\tend\n\t\tlocal n =\
    \ 0\n\t\tfor _ in pairs(set) do\n\t\t\tn = n + 1\n\t\tend\n\t\tif n > max then\n\
    \t\t\tmax = n\n\t\t\tm_index = i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn words[m_index]\n\
    end", "\t-- TODO: Write me\nend", "  local max = 0\n  local ret = words[1]\n \
    \ for i = 1, #words do\n    local word = words[i]\n    local freq = {}\n    for\
    \ i = 1, #word do\n      local ch = word:sub(i, i)\n      freq[ch] = true\n  \
    \  end\n    local count = 0\n    for k, _ in pairs(freq) do\n      count = count\
    \ + 1\n    end\n    if count > max then\n      max = count\n      ret = word\n\
    \    end\n  end\n  return ret\nend", "   local max_index = 1\n   local max_count\
    \ = count_uniques(words[1])\n   for i = 2, #words do\n      local count = count_uniques(words[i])\n\
    \      if count > max_count then\n         max_index = i\n         max_count =\
    \ count\n      end\n   end\n   return words[max_index]\nend", "  -- TODO: implement\
    \ this.\nend", "    if #words == 0 then\n        return nil\n    end", "  local\
    \ max = nil\n  local max_len = 0\n  for _, w in ipairs(words) do\n    local len\
    \ = #set.new(w:gmatch('.'))\n    if len > max_len then\n      max = w\n      max_len\
    \ = len\n    end\n  end\n  return max\nend", "    local max_word = words[1]\n\
    \    local max_count = 0\n    for _, word in ipairs(words) do\n        local count\
    \ = 0\n        for i = 1, #word do\n            local char = word:sub(i, i)\n\
    \            if word:find(char, i + 1) == nil then\n                count = count\
    \ + 1\n            end\n        end\n        if count > max_count then\n     \
    \       max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "  local max = 0\n  local result = nil\n  for _, word\
    \ in ipairs(words) do\n    local unique = {}\n    for c in word:gmatch('.') do\n\
    \      unique[c] = true\n    end\n    local n = 0\n    for _ in pairs(unique)\
    \ do\n      n = n + 1\n    end\n    if n > max then\n      max = n\n      result\
    \ = word\n    end\n  end\n  return result\nend", "    -- TODO: Implement this.\n\
    \    local maxword = \"\"\n    local char_count = 0\n    for k,v in pairs(words)\
    \ do\n        local x = string.len(v)\n        if x > char_count then\n      \
    \      maxword = v\n            char_count = x\n        end\n    end\n    return\
    \ maxword\nend", "\tlocal order = {}\n\tlocal max = 0\n\tfor i, word in ipairs(words)\
    \ do\n\t\tlocal t = {}\n\t\tfor i = 1, word:len() do\n\t\t\tlocal c = word:sub(i,\
    \ i)\n\t\t\tt[c] = true\n\t\tend\n\t\tlocal c = 0\n\t\tfor k, v in pairs(t) do\n\
    \t\t\tc = c + 1\n\t\tend\n\t\tif c > max then\n\t\t\tmax = c\n\t\t\torder = {word}\n\
    \t\telseif c == max then\n\t\t\ttable.insert(order, word)\n\t\tend\n\tend\n\t\
    table.sort(order)\n\treturn order[1]\nend", "    -- TODO: implement this function\n\
    \    -- uses helper function 'unique_chars'\n    local ret = \"\"\n    local most_unique\
    \ = 0\n    for _,v in ipairs(words) do\n        local num_unique = unique_chars(v)\n\
    \        if num_unique > most_unique then\n            most_unique = num_unique\n\
    \            ret = v\n        end\n    end\n    return ret\nend", "    local word\
    \ = nil\n    local count = -1\n    for _, s in ipairs(words) do\n        local\
    \ u = 0\n        for c in s:gmatch(\".\") do\n            u = bit.bxor(u, bit.lshift(1,\
    \ c:byte()))\n        end\n        if count < u then\n            count = u\n\
    \            word = s\n        end\n    end\n    return word\nend", "    if type(words)\
    \ ~= 'table' then\n        return nil\n    end", "    local n = #words\n    local\
    \ max_num_of_uniq_chars = 0\n    local max_num_of_uniq_chars_idx = -1\n    for\
    \ i = 1, n do\n        local word = words[i]\n        local uniq_chars = {}\n\
    \        for _, ch in ipairs(word) do\n            uniq_chars[ch] = true\n   \
    \     end\n        local num_of_uniq_chars = 0\n        for _ in pairs(uniq_chars)\
    \ do\n            num_of_uniq_chars = num_of_uniq_chars + 1\n        end\n   \
    \     if num_of_uniq_chars > max_num_of_uniq_chars then\n            max_num_of_uniq_chars\
    \ = num_of_uniq_chars\n            max_num_of_uniq_chars_idx = i\n        end\n\
    \    end\n    return words[max_num_of_uniq_chars_idx]\nend", "   local max_word\
    \ = words[1]\n   local max_len = #utils.unique_chars(max_word)\n   for _, word\
    \ in ipairs(words) do\n      local len = #utils.unique_chars(word)\n      if len\
    \ > max_len then\n         max_word = word\n         max_len = len\n      end\n\
    \   end\n   return max_word\nend", "  local max = \"\"\n  local max_count = 0\n\
    \  for _, word in ipairs(words) do\n    local length = 0\n    for i = 1, string.len(word)\
    \ do\n      if (not string.find(max, string.sub(word, i, i))) then\n        length\
    \ = length + 1\n      end\n    end\n    if (length > max_count) then\n      max\
    \ = word\n      max_count = length\n    end\n  end\n  return max\nend", "   local\
    \ best_count = 0\n   local best_word = nil\n   for i, word in ipairs(words) do\n\
    \      local count = count_unique_chars(word)\n      if count > best_count then\n\
    \         best_count = count\n         best_word = word\n      elseif count ==\
    \ best_count then\n         if word < best_word then\n            best_word =\
    \ word\n         end\n      end\n   end\n   return best_word\nend", "  local max\
    \ = nil\n  local max_count = 0\n  for _, word in ipairs(words) do\n    local counts\
    \ = {}\n    for char in word:gmatch(\".\") do\n      if not counts[char] then\n\
    \        counts[char] = true\n      end\n    end\n    local count = 0\n    for\
    \ _ in pairs(counts) do\n      count = count + 1\n    end\n    if count > max_count\
    \ then\n      max = word\n      max_count = count\n    end\n  end\n  return max\n\
    end", "    if not words or #words == 0 then\n        return\n    end", "   return\
    \ nil\nend", "  local max_word = words[1]\n  local max_n = count_unique(max_word)\n\
    \  for i = 2, #words do\n    local n = count_unique(words[i])\n    if n > max_n\
    \ then\n      max_word = words[i]\n      max_n = n\n    end\n  end\n  return max_word\n\
    end", "  local max_len = 0\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local chars = {}\n    for i = 1, #word do\n      chars[word:sub(i, i)]\
    \ = true\n    end\n    local char_count = 0\n    for _ in pairs(chars) do\n  \
    \    char_count = char_count + 1\n    end\n    if max_len < char_count then\n\
    \      max_len = char_count\n      max_word = word\n    elseif max_len == char_count\
    \ and max_word > word then\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "   local max_word = nil\n   local max_chars = 0\n   for _, word in ipairs(words)\
    \ do\n      local chars = {}\n      for c in word:gmatch(\".\") do\n         chars[c]\
    \ = true\n      end\n      local n = #chars\n      if n > max_chars then\n   \
    \      max_chars = n\n         max_word = word\n      end\n   end\n   return max_word\n\
    end", "\tlocal max_word, max_char_count = words[1], nil\n\tfor _, word in ipairs(words)\
    \ do\n\t\tlocal char_count = count_unique_chars(word)\n\t\tif not max_char_count\
    \ or char_count > max_char_count then\n\t\t\tmax_word, max_char_count = word,\
    \ char_count\n\t\tend\n\tend\n\treturn max_word\nend", "  local max_len = -1\n\
    \  local max_word\n  for i, word in ipairs(words) do\n    local chars = {}\n \
    \   for j = 1, #word do\n      chars[word:sub(j, j)] = true\n    end\n    local\
    \ len = count_keys(chars)\n    if len > max_len then\n      max_len = len\n  \
    \    max_word = word\n    end\n  end\n  return max_word\nend", "    local max_word\
    \ = nil\n    local max_cnt = 0\n    for _, word in ipairs(words) do\n        local\
    \ s = {}\n        for i = 1, word:len() do\n            s[word:sub(i, i)] = true\n\
    \        end\n        local cnt = 0\n        for _ in pairs(s) do\n          \
    \  cnt = cnt + 1\n        end\n        if cnt > max_cnt then\n            max_cnt\
    \ = cnt\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "\tlocal maxLen = 0\n\tlocal maxWord\n\tfor i, word in ipairs(words) do\n\
    \t\tlocal len = #word:gsub(\"(.)\", \"\")\n\t\tif len > maxLen then\n\t\t\tmaxLen\
    \ = len\n\t\t\tmaxWord = word\n\t\tend\n\tend\n\treturn maxWord\nend", "    --\
    \ YOUR CODE HERE\n    if #words == 0 then\n        return nil\n    end\n    local\
    \ max = words[1]\n    local max_count = get_unique_char_count(max)\n    for i\
    \ = 2, #words do\n        local unique_count = get_unique_char_count(words[i])\n\
    \        if unique_count > max_count then\n            max = words[i]\n      \
    \      max_count = unique_count\n        end\n    end\n    return max\nend", " \
    \   if #words == 0 then\n        return nil\n    end", "  local max_chars_unique,\
    \ word = -1\n  for _, w in ipairs(words) do\n    local chars_unique = number_of_unique_chars(w)\n\
    \    if chars_unique > max_chars_unique then\n      max_chars_unique = chars_unique\n\
    \      word = w\n    end\n  end\n  return word\nend", "   local max_word = ''\n\
    \   local max_count = 0\n   for _, word in ipairs(words) do\n      local count\
    \ = #u.unique(word:chars())\n      if count > max_count then\n         max_count\
    \ = count\n         max_word = word\n      end\n   end\n   return max_word\nend",
  "    local max_word = \"\"\n    local max_len = 0\n    for _, word in ipairs(words)\
    \ do\n        local len = #unique_chars(word)\n        if len > max_len then\n\
    \            max_len = len\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
