name: HumanEval_147_get_max_triples
language: lua
prompt: "-- You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\nlocal function\
  \ get_max_triples(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
  \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n  \
  \  lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = 0\n    local arr = {}\n    for i = 1, n do\n      \
    \  local elem = i * i - i + 1\n        arr[i] = elem\n        if elem % 3 == 0\
    \ then\n            res = res + (i - 1)\n        end\n    end\n    for i = 1,\
    \ n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if arr[i] + arr[j] + arr[k] % 3 == 0 then\n                 \
    \   res = res + 1\n                end\n            end\n        end\n    end\n\
    \    return res\nend", "    local a, res = {}, 0\n    for i = 1, n do\n      \
    \  a[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i +\
    \ 1, n - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 then\n                    res = res + 1\n                end\n\
    \            end\n        end\n    end\n    return res\nend", "    local function\
    \ get_tr(a, b, c)\n        if b and a == b then\n            b = nil\n       \
    \ end\n        if c and a == c then\n            c = nil\n        end\n      \
    \  if b and c and b == c then\n            c = nil\n        end\n        return\
    \ a, b, c\n    end\n    local counter = 0\n    local a = {}\n    for i = 1, n\
    \ do\n        a[i] = i * i - i + 1\n    end\n    for i = 1, n do\n        for\
    \ j = i + 1, n do\n            for k = j + 1, n do\n                local x, y,\
    \ z = get_tr(a[i], a[j], a[k])\n                if x and y and z and (x + y +\
    \ z) % 3 == 0 then\n                    counter = counter + 1\n              \
    \  end\n            end\n        end\n    end\n    return counter\nend", "\tlocal\
    \ function get_triples(n)\n\t\tlocal t = {}\n\t\tfor i = 1, n - 2 do\n\t\t\tfor\
    \ j = i + 1, n - 1 do\n\t\t\t\tfor k = j + 1, n do\n\t\t\t\t\tif (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\t\tt[#t + 1] = {i,\
    \ j, k}\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn t\n\tend\n\
    \tlocal function get_sum(t)\n\t\tlocal sum = 0\n\t\tfor _, v in ipairs(t) do\n\
    \t\t\tsum = sum + v[1] * v[1] - v[1] + 1 + v[2] * v[2] - v[2] + 1 + v[3] * v[3]\
    \ - v[3] + 1\n\t\tend\n\t\treturn sum\n\tend\n\tlocal t = get_triples(n)\n\tif\
    \ #t == 0 then\n\t\treturn 0\n\tend\n\tlocal sum = get_sum(t)\n\tfor _, v in ipairs(t)\
    \ do\n\t\tlocal sum1 = sum - v[1] * v[1] - v[1] + 1 - v[2] * v[2] - v[2] + 1 -\
    \ v[3] * v[3] - v[3] + 1\n\t\tlocal sum2 = sum - v[1] * v[1] - v[1] + 1 - v[2]\
    \ * v[2] - v[2] + 1\n\t\tlocal sum3 = sum - v[1] * v[1] - v[1] + 1 - v[3] * v[3]\
    \ - v[3] + 1\n\t\tlocal sum4 = sum - v[2] * v[2] - v[2] + 1 - v[3] * v[3] - v[3]\
    \ + 1\n\t\tif sum1 % 3 == 0 and sum2 % 3 == 0 and sum3 % 3 == 0 and sum", "  \
    \  local s = {}\n    for i = 1, n do\n        s[i] = {}\n        for j = 1, n\
    \ do\n            s[i][j] = {}\n            for k = 1, n do\n                local\
    \ x = (i - 1) * (i - 1) - (i - 1) + 1\n                local y = (j - 1) * (j\
    \ - 1) - (j - 1) + 1\n                local z = (k - 1) * (k - 1) - (k - 1) +\
    \ 1\n                s[i][j][k] = (x + y + z) % 3 == 0\n            end\n    \
    \    end\n    end\n    local ret = 0\n    for i = 1, n do\n        for j = 1,\
    \ n do\n            for k = 1, n do\n                if i < j and j < k and s[i][j][k]\
    \ then\n                    ret = ret + 1\n                end\n            end\n\
    \        end\n    end\n    return ret\nend\nprint(get_max_triples(2)) --> 2\n\
    print(get_max_triples(3)) --> 9\nprint(get_max_triples(4)) --> 39\nprint(get_max_triples(5))\
    \ --> 182\nprint(get_max_triples(6)) --> 936\nprint(get_max_triples(7)) --> 4923\n\
    print(get_max_triples(8)) --> 27243\nprint(get_max_triples(9)) --> 156451\nprint(get_max_triples(10))\
    \ --> 925235\nprint(get_max_triples(100)) --> 164003255776836058257074034798385398675\n\
    print(get_max_triples(1000)) --> 92523502349602958753853910140091939059560366815708918109",
  "    local c = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n   \
    \         for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 then\n                    c = c + 1\n          \
    \      end\n            end\n        end\n    end\n    return c\nend", "    local\
    \ rs = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k\
    \ = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0 then\n                    rs = rs + 1\n                end\n \
    \           end\n        end\n    end\n    return rs\nend", "  local triples =\
    \ {}\n  local count = 0\n  for i = 1, n do\n    local v = i * i - i + 1\n    triples[i]\
    \ = v\n    if v % 3 == 0 then\n      count = count + i - 1\n    end\n  end\n \
    \ for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n      \
    \  if triples[i] + triples[j] + triples[k] % 3 == 0 then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  return count\nend", "    local\
    \ arr = {}\n    for i = 1, n do\n        arr[i] = i * i - i + 1\n    end\n   \
    \ return arr\nend", "  local count = 0\n  local a = {}\n  for i = 1, n do\n  \
    \  a[i] = i * i - i + 1\n  end\n  for i = 1, n do\n    for j = i + 1, n do\n \
    \     for k = j + 1, n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n   \
    \       count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "    if n < 3 then\n        return 0\n    end\n    local count = 0\n   \
    \ local b1 = 3\n    local b2 = 6\n    for i = 1, n - 2 do\n        count = count\
    \ + i\n        if b1 < n then\n            count = count + b1 - 1\n          \
    \  b1 = b1 + 3\n        end\n        if b2 < n then\n            count = count\
    \ + b2 - 1\n            b2 = b2 + 3\n        end\n    end\n    return count\n\
    end", "  if n < 3 then return 0 end\n  local cur, res = 0, 0\n  local a,b,c =\
    \ {0,0,0}\n  for i = 1, n do\n    for j = i+1, n do\n      for k = j+1, n do\n\
    \        a[1],a[2],a[3] = i*i-i+1, j*j-j+1, k*k-k+1\n        if a[1] + a[2] +\
    \ a[3] % 3 == 0 then res = res + 1 end\n      end\n    end\n  end\n  return res\n\
    end", "\tlocal max_triples = 0\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\tlocal\
    \ a = i * i - i + 1\n\t\tfor j = i + 1, n do\n\t\t\tlocal b = j * j - j + 1\n\t\
    \t\tfor k = j + 1, n do\n\t\t\t\tlocal c = k * k - k + 1\n\t\t\t\tsum = a + b\
    \ + c\n\t\t\t\tif sum % 3 == 0 then\n\t\t\t\t\tmax_triples = max_triples + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_triples\nend", "    local\
    \ c = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n          \
    \  for k = j + 1, n do\n                if ((i * i - i + 1) + (j * j - j + 1)\
    \ + (k * k - k + 1)) % 3 == 0 then\n                    c = c + 1\n          \
    \      end\n            end\n        end\n    end\n    return c\nend", "    local\
    \ count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for\
    \ k = j + 1, n do\n                if ((i * i - i + 1) + (j * j - j + 1) + (k\
    \ * k - k + 1)) % 3 == 0 then\n                    count = count + 1\n       \
    \         end\n            end\n        end\n    end\n    return count\nend",
  "\t-- your code goes here\n\tif n<3 then return 0 end\n\tlocal sums = {}\n\tfor\
    \ i=1,n do\n\t\tlocal ai = i*i-i+1\n\t\tfor j=i+1,n do\n\t\t\tlocal aj = j*j-j+1\n\
    \t\t\tlocal s = ai+aj\n\t\t\tfor k=j+1,n do\n\t\t\t\tlocal ak = k*k-k+1\n\t\t\t\
    \tif (s+ak)%3==0 then\n\t\t\t\t\tsums[s+ak] = (sums[s+ak] or 0) + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\tlocal res = 0\n\tfor _,v in pairs(sums) do\n\
    \t\tres = res + v\n\tend\n\treturn res\nend", "    local cnt = 0\n    for i =\
    \ 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \     end\n    end\n    return cnt\nend", "\tlocal count = 0\n\tlocal a = {}\n\
    \tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\t\
    for j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend", "  local max_triples = 0\n  local sum = 0\n\
    \  local i = 1\n  while i <= n do\n    local a = i * i - i + 1\n    local j =\
    \ i + 1\n    while j <= n do\n      local b = j * j - j + 1\n      local k = j\
    \ + 1\n      while k <= n do\n        local c = k * k - k + 1\n        sum = a\
    \ + b + c\n        if sum % 3 == 0 then\n          max_triples = max_triples +\
    \ 1\n        end\n        k = k + 1\n      end\n      j = j + 1\n    end\n   \
    \ i = i + 1\n  end\n  return max_triples\nend", "  local res = 0\n  for i = 1,\
    \ n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if\
    \ (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n          res\
    \ = res + 1\n        end\n      end\n    end\n  end\n  return res\nend", "   \
    \ local ans = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n  \
    \          for k = j + 1, n do\n                if ((i * i - i + 1) + (j * j -\
    \ j + 1) + (k * k - k + 1)) % 3 == 0 then\n                    ans = ans + 1\n\
    \                end\n            end\n        end\n    end\n    return ans\n\
    end", "\tlocal c = 0\n\tlocal mp = {}\n\tfor i = 1, n do\n\t\tlocal a = i * i\
    \ - i + 1\n\t\tmp[a] = (mp[a] or 0) + 1\n\tend\n\tfor i = 1, n do\n\t\tlocal a\
    \ = i * i - i + 1\n\t\tfor j = i + 1, n do\n\t\t\tlocal b = j * j - j + 1\n\t\t\
    \tfor k = j + 1, n do\n\t\t\t\tlocal c = k * k - k + 1\n\t\t\t\tif (a + b + c)\
    \ % 3 == 0 then\n\t\t\t\t\tc = c + mp[a] * mp[b] * mp[c]\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn c\nend", "\tlocal r = 0\n\tlocal t = {}\n\tfor i\
    \ = 1, n do\n\t\tt[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j\
    \ = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (t[i] + t[j] + t[k])\
    \ % 3 == 0 then\n\t\t\t\t\tr = r + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn r\nend", "\tif n <= 3 then\n\t\treturn 0\n\tend\n\tlocal y = n\n\tlocal\
    \ x = y - 1\n\tlocal z = y - 2\n\tlocal r = 0\n\twhile z > 1 do\n\t\tlocal yy\
    \ = y * y - y + 1\n\t\tlocal xx = x * x - x + 1\n\t\tlocal zz = z * z - z + 1\n\
    \t\tif (yy + xx + zz) % 3 == 0 then\n\t\t\tr = r + 1\n\t\tend\n\t\tz = z - 1\n\
    \t\tx = x - 1\n\t\ty = y - 1\n\tend\n\treturn r\nend", "\tlocal triples = {}\n\
    \tfor i = 1, n do\n\t\tlocal ai = i * i - i + 1\n\t\tif ai % 3 == 0 then\n\t\t\
    \ttable.insert(triples, {ai, i})\n\t\tend\n\tend\n\tlocal result = 0\n\tfor i\
    \ = 1, #triples do\n\t\tfor j = i + 1, #triples do\n\t\t\tlocal ai, i = unpack(triples[i])\n\
    \t\t\tlocal aj, j = unpack(triples[j])\n\t\t\tif (ai + aj) % 3 == 0 then\n\t\t\
    \t\tfor k = j + 1, n do\n\t\t\t\t\tlocal ak = k * k - k + 1\n\t\t\t\t\tif (ai\
    \ + aj + ak) % 3 == 0 then\n\t\t\t\t\t\tresult = result + 1\n\t\t\t\t\tend\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", "  local p3 = n //\
    \ 3\n  local p6 = 2 * p3\n  local m3 = n - p3\n  local m6 = 2 * m3\n  return n\
    \ - p3 - m3 - 2 * p6 - 2 * m6\nend", "    local t = {};\n    for i = 1, n do\n\
    \        t[i] = i * i - i + 1;\n    end\n    local count = 0;\n    for i = 1,\
    \ n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n\
    \                if (t[i] + t[j] + t[k]) % 3 == 0 then\n                    count\
    \ = count + 1;\n                end\n            end\n        end\n    end\n \
    \   return count;\nend", "  local triples = 0\n  local sum = 0\n  local a = {}\n\
    \  local b = {}\n  local c = {}\n  local m = 3\n  for i = 1, n do\n    a[i] =\
    \ i * i - i + 1\n    -- print(i, a[i])\n  end\n  for i = 1, n do\n    b[i] = 0\n\
    \    c[i] = 0\n  end\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n   \
    \   for k = j + 1, n do\n        if a[i] + a[j] + a[k] % m == 0 then\n       \
    \   triples = triples + 1\n          -- print(i, j, k, a[i], a[j], a[k])\n   \
    \     end\n      end\n    end\n  end\n  return triples\nend", "    local arr =\
    \ {}\n    for i = 1, n do\n        arr[i] = i * i - i + 1\n    end\n    local\
    \ result = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n     \
    \       for k = j + 1, n do\n                if (arr[i] + arr[j] + arr[k]) % 3\
    \ == 0 then\n                    result = result + 1\n                end\n  \
    \          end\n        end\n    end\n    return result\nend", "\t--[[\n\tfor\
    \ i = 1, n do\n\t\tprint(i * i - i + 1)\n\tend\n\t--]]\n\tlocal a = {}\n\tfor\
    \ i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\t--[[\n\tprint()\n\tfor i = 1,\
    \ n do\n\t\tprint(a[i])\n\tend\n\t--]]\n\tlocal counter = 0\n\tfor i = 1, n do\n\
    \t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n\t\t\t\t\tcounter = counter + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn counter\nend", "\tlocal a = {}\n\tlocal count = 0\n\t\
    for i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\t\
    for j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend", "    local t = {};\n    for i = 1, n do\n\
    \        t[i] = i * i - i + 1;\n    end\n    local count = 0;\n    for i = 1,\
    \ n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n       \
    \         if (t[i] + t[j] + t[k]) % 3 == 0 then\n                    count = count\
    \ + 1;\n                end\n            end\n        end\n    end\n    return\
    \ count;\nend", "\tlocal total, triple_count = 0, 0\n\tlocal t, index = {}, 1\n\
    \twhile index <= n do\n\t\tt[index] = index * index - index + 1\n\t\tindex = index\
    \ + 1\n\tend\n\tindex = 2\n\twhile index <= n - 1 do\n\t\tif (t[index] + t[index\
    \ - 1] + t[index + 1]) % 3 == 0 then\n\t\t\ttriple_count = triple_count + 1\n\t\
    \tend\n\t\tindex = index + 1\n\tend\n\tprint(triple_count)\nend\nget_max_triples(5)",
  "\tlocal triples = 0;\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\t\
    for k = j + 1, n do\n\t\t\t\tlocal sum = i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1;\n\t\t\t\tif sum % 3 == 0 then\n\t\t\t\t\ttriples = triples + 1;\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn triples;\nend", "    return math.floor(n\
    \ * (n - 1) * (n - 2) / 6)\nend", "  local res = 0\n  for i = 1, n do\n    for\
    \ j = i + 1, n do\n      for k = j + 1, n do\n        if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 then\n          res = res + 1\n        end\n\
    \      end\n    end\n  end\n  return res\nend", "    local total = 0\n    local\
    \ i, j, k\n    local sum\n    for i = 1, n - 2 do\n        for j = i + 1, n -\
    \ 1 do\n            for k = j + 1, n do\n                sum = a[i] + a[j] + a[k]\n\
    \                if sum % 3 == 0 then\n                    total = total + 1\n\
    \                end\n            end\n        end\n    end\n    return total\n\
    end", "\tlocal triple_count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n -\
    \ 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif ((i * i - i + 1) + (j * j - j +\
    \ 1) + (k * k - k + 1)) % 3 == 0 then\n\t\t\t\t\ttriple_count = triple_count +\
    \ 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn triple_count\nend", "\t\
    local cnt = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k\
    \ = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) %\
    \ 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn cnt\nend", "    local cnt = 0\n    for i = 1, n do\n        for j = i\
    \ + 1, n do\n            for k = j + 1, n do\n                if ((i * i - i +\
    \ 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 then\n                    cnt\
    \ = cnt + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend", "  local s, f, a, t = 0, 0, {}, 0\n  for i = 1, n do a[i] = i * i\
    \ - i + 1 end\n  for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1,\
    \ n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then t = t + 1 end\n      end\n\
    \    end\n  end\n  return t\nend", "\tif n < 3 then return 0 end\n\tlocal rv =\
    \ 0\n\tlocal nn = math.floor(n / 3)\n\tlocal nx = n % 3\n\tif nx == 0 then rv\
    \ = (nn - 1) * nn / 2 + nn * (nn - 1) * (nn - 2) / 6\n\telseif nx == 1 then rv\
    \ = nn * (nn - 1) * (nn - 2) / 6\n\telse rv = nn * (nn - 1) / 2 + nn * (nn - 1)\
    \ * (nn - 2) / 6\n\tend\n\treturn rv\nend", "\tlocal r = {}\n\tfor i = 1, n do\n\
    \t\tr[i] = i * i - i + 1\n\tend\n\t--print(unpack(r))\n\tlocal s = 0\n\tfor i\
    \ = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal\
    \ sum = r[i] + r[j] + r[k]\n\t\t\t\t--print(r[i], r[j], r[k], sum)\n\t\t\t\tif\
    \ sum % 3 == 0 then\n\t\t\t\t\ts = s + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn s\nend", "    -- n is a positive integer\n    local a = {}\n   \
    \ local result = 0\n    local mod = 3\n    local max = math.floor(n / mod)\n \
    \   local sum = 0\n    for i = 1, n do\n        a[i] = i * i - i + 1\n       \
    \ result = result + i - 1\n    end\n    for i = 1, max do\n        for j = i +\
    \ 1, max do\n            for k = j + 1, max do\n                sum = a[i] + a[j]\
    \ + a[k]\n                if sum % mod == 0 then\n                    result =\
    \ result + 1\n                end\n            end\n        end\n    end\n   \
    \ return result\nend", "\tlocal result = 0\n\tlocal arr = {}\n\tfor i = 1, n do\n\
    \t\tarr[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n\
    \ - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (arr[i] + arr[j] + arr[k]) % 3\
    \ == 0 then\n\t\t\t\t\tresult = result + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn result\nend", "    local count = 0\n    local arr = {}\n    for\
    \ i = 1, n do\n        arr[i] = i * i - i + 1\n    end\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            for k = j + 1, n do\n              \
    \  if (arr[i] + arr[j] + arr[k]) % 3 == 0 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "\tlocal a = {}\n\tlocal count = 0\n\tfor i = 1, n do\n\t\ta[i]\
    \ = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\
    \t\t\tfor k = j + 1, n do\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3) == 0 then\n\t\
    \t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "    local res = 0\n    for i = 1, n do\n        for j = i + 1, n do\n \
    \           for k = j + 1, n do\n                if (i + j + k) % 3 == 0 then\n\
    \                    res = res + 1\n                end\n            end\n   \
    \     end\n    end\n    return res\nend", "    local triples = 0\n    local s\
    \ = {}\n    for i = 1, n do\n        s[i] = i * i - i + 1\n    end\n    for i\
    \ = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n\
    \ do\n                if (s[i] + s[j] + s[k]) % 3 == 0 then\n                \
    \    triples = triples + 1\n                end\n            end\n        end\n\
    \    end\n    return triples\nend", "    local count = 0\n    local result = {}\n\
    \    for i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1,\
    \ n do\n                local sum = i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1\n                if sum % 3 == 0 then\n                    count = count\
    \ + 1\n                    table.insert(result, {i, j, k})\n                end\n\
    \            end\n        end\n    end\n    return count, result\nend", "    local\
    \ a = {};\n    for i = 1, n do\n        a[i] = i * i - i + 1;\n    end\n    local\
    \ cnt = 0;\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n       \
    \     for k = j + 1, n do\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ then\n                    cnt = cnt + 1;\n                end\n            end\n\
    \        end\n    end\n    return cnt;\nend", "    local a = {}\n    for i = 1,\
    \ n do\n        a[i] = i * i - i + 1\n    end\n    local counter = 0\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n              \
    \      counter = counter + 1\n                end\n            end\n        end\n\
    \    end\n    return counter\nend", "\tlocal count = 0\n\tlocal sum_mod3 = 0\n\
    \tlocal max_i = 0\n\tlocal max_j = 0\n\tlocal max_k = 0\n\tfor i = 1, n - 2 do\n\
    \t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal sum = i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1\n\t\t\t\tlocal sum_mod3 = sum %\
    \ 3\n\t\t\t\tif (sum_mod3 == 0) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\t\
    if (sum > max_i + max_j + max_k) then\n\t\t\t\t\t\tmax_i = i\n\t\t\t\t\t\tmax_j\
    \ = j\n\t\t\t\t\t\tmax_k = k\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count, max_i, max_j, max_k\nend", "  local a = {1}\n  for i =\
    \ 2, n do\n    local val = i * i - i + 1\n    table.insert(a, val)\n  end\n  local\
    \ count = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k =\
    \ j + 1, n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          count\
    \ = count + 1\n        end\n      end\n    end\n  end\n  return count\nend", " \
    \ local sum = n * (n + 1) // 2 -- sum(1 to n)\n  local mod3 = sum % 3\n  local\
    \ n1, n2, n3 = 0, 0, 0 -- number of values that give 1, 2, 3 modulo 3\n  for i\
    \ = 1, n do\n    local a = i * i - i + 1\n    if a % 3 == 1 then\n      n1 = n1\
    \ + 1\n    elseif a % 3 == 2 then\n      n2 = n2 + 1\n    else\n      n3 = n3\
    \ + 1\n    end\n  end\n  if mod3 == 0 then\n    return n1 * n2 * n3\n  elseif\
    \ mod3 == 1 then\n    return n1 * n2 * n3 + n1 * n3 * (n1 - 1) // 2\n  else\n\
    \    return n1 * n2 * n3 + n2 * n3 * (n2 - 1) // 2\n  end\nend", "    local nn\
    \ = n * n\n    local count = 0\n    local function get_num(i)\n        return\
    \ i * i - i + 1\n    end\n    local function is_triple(i, j, k)\n        local\
    \ num_i = get_num(i)\n        local num_j = get_num(j)\n        local num_k =\
    \ get_num(k)\n        if num_i + num_j + num_k == 0 then\n            print(\"\
    triple : \", i, j, k)\n            count = count + 1\n        end\n    end\n \
    \   for i = 1, nn do\n        for j = 1, nn do\n            for k = 1, nn do\n\
    \                is_triple(i, j, k)\n            end\n        end\n    end\n \
    \   return count\nend", "    local a = {}\n    for i = 1, n do\n        a[i] =\
    \ i * i - i + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n     \
    \   for j = i + 1, n - 1 do\n            for k = j + 1, n do\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n\
    \                end\n            end\n        end\n    end\n    return count\n\
    end", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n                    count = count + 1\n               \
    \ end\n            end\n        end\n    end\n    return count\nend", "    local\
    \ triples = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i\
    \ + 1\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n           \
    \ for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    triples = triples + 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "    if n < 3 then\n        return\
    \ 0\n    end\n    -- a[i] is a multipe of 3 iff i is a multipe of 3.\n    -- a[i]\
    \ + a[j] + a[k] is a multiple of 3 iff \n    -- a[i] % 3 + a[j] % 3 + a[k] % 3\
    \ is a multiple of 3.\n    -- Thus, the result is the number of triples (a, b,\
    \ c) \n    -- where 0 \u2264 a < b < c < n, and a + b + c is a multiple of 3.\n\
    \    -- There are (c / 3) possible values for a, and (c / 3) possible \n    --\
    \ values for b. So the result is (c / 3) * (c / 3) * (n - c).\n    local res =\
    \ 0\n    for c = 3, n do\n        res = res + math.floor(c / 3) * math.floor(c\
    \ / 3) * (n - c)\n    end\n    return res\nend", "    -- a[i] + a[j] + a[k] (mod\
    \ 3) = a[i] (mod 3) + a[j] (mod 3) + a[k] (mod 3)\n    -- a[i] (mod 3) = (i *\
    \ i - i + 1) (mod 3)\n    -- = (i - 1) * (i - 1) + (i - 1) (mod 3)\n    -- = (i\
    \ - 1) * (2 * i - 1) (mod 3)\n    -- We have 9 possibilities for a[i] (mod 3)\
    \ \n    -- (0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 1, 1), (0, 1, 2), (0, 2, 2), (1,\
    \ 1, 1), (1, 1, 2), (1, 2, 2)\n    -- the first 3 doesn't matter, so we can have\
    \ 3^3 = 27 combinations for the last 6 possibilities\n    -- for kth value, we\
    \ choose 1, 2, ..., n and check the sum with values a[i] (mod 3) has existed or\
    \ not\n    -- as long as the answer has 2 times for the same sum, it means we\
    \ can have a triple\n    local a, b, c, d, e, f, g, h, i = 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0\n    for j = 1, n do\n        local c = (j - 1) * (2 * j - 1) % 3\n   \
    \     if c == 0 then\n            a = a + 1\n        elseif c == 1 then\n    \
    \        b = b + 1\n        else\n            c = c + 1\n        end\n    end\n\
    \    local res = a * (a - 1) * (a - 2) / 6 + b * (b - 1) * (b - 2) / 6 + c * (c\
    \ - 1) * (c - 2) / 6\n    for j = 1, n do\n        local c = (j - 1) * (2 * j\
    \ - 1) % 3\n        if c == 0 then\n            a = a - 1\n        elseif c ==\
    \ 1 then\n            b = b - 1\n        else\n           ", "    local tab, t,\
    \ i, j, k = {1}, 1, 1, 2, 3\n    while t <= n do\n        tab[t] = i * i - i +\
    \ 1\n        i = i + 1\n        t = t + 1\n    end\n    local count = 0\n    for\
    \ i = 1, n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n\
    \                if (tab[i] + tab[j] + tab[k]) % 3 == 0 then\n               \
    \     count = count + 1\n                end\n            end\n        end\n \
    \   end\n    return count\nend", "    -- body\n    local cnt = 0\n    local a\
    \ = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    for i\
    \ = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n\
    \ do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n                \
    \    cnt = cnt + 1\n                end\n            end\n        end\n    end\n\
    \    return cnt\nend", "    local count = 0\n    for i = 1, n do\n        local\
    \ i2 = i * i\n        for j = i + 1, n do\n            local j2 = j * j\n    \
    \        for k = j + 1, n do\n                local k2 = k * k\n             \
    \   if (i2 + j2 + k2) % 3 == 0 then\n                    count = count + 1\n \
    \               end\n            end\n        end\n    end\n    return count\n\
    end", "    if n < 3 then return 0 end\n    local a = {}\n    for i = 1, n do a[i]\
    \ = i * i - i + 1 end\n    local sum = 0\n    for i = 1, n - 2 do\n        for\
    \ j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 then\n                    sum = sum + 1\n           \
    \     end\n            end\n        end\n    end\n    return sum\nend", "\tlocal\
    \ function sum(a, b, c)\n\t\treturn a + b + c\n\tend\n\tlocal function mul_3(x)\n\
    \t\treturn x % 3 == 0\n\tend\n\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i\
    \ * i - i + 1\n\tend\n\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif mul_3(sum(a[i], a[j], a[k]))\
    \ then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\
    return count\nend", "    local count = 0\n    local row = 0\n    for i = 1, n\
    \ do\n        local a = i * i - i + 1\n        row = row + a\n        if row %\
    \ 3 == 0 then\n            count = count + (i - 1) * (i - 2) / 2\n        end\n\
    \    end\n    return count\nend", "    local sum = 0\n    local mod3_count = {\
    \ 0, 0, 0 }\n    for i = 1, n do\n        local mod3 = (i * i - i + 1) % 3\n \
    \       mod3_count[mod3] = mod3_count[mod3] + 1\n    end\n    local m1 = mod3_count[1]\n\
    \    local m2 = mod3_count[2]\n    if m1 > m2 then\n        sum = sum + m1 * (m1\
    \ - 1) * (m1 - 2) / 6 + m2 * (m2 - 1) * (m2 - 2) / 6\n    else\n        sum =\
    \ sum + m1 * (m1 - 1) * (m1 - 2) / 6 + m2 * (m2 - 1) * (m2 - 2) / 6\n    end\n\
    \    return sum\nend", "    local mult = n*n - n + 1\n    if mult % 3 == 0 then\n\
    \        return n * (n-1) * (n-2) / 6\n    elseif mult % 3 == 1 then\n       \
    \ return (n*(n-1)*(n-2) - (n-1)*(n-2)) / 6\n    else\n        return (n*(n-1)*(n-2)\
    \ - 2*(n-1)*(n-2)) / 6\n    end\nend", "    local res = 0\n    local a = Array(n)\n\
    \    local sum = 0\n    local index = 0\n    local triple = 0\n    local d = 0\n\
    \    local e = 0\n    local f = 0\n    local limit = n - 2\n    for i = 1, n do\n\
    \        a[i] = i * i - i + 1\n    end\n    for i = 1, limit do\n        for j\
    \ = i + 1, limit + 1 do\n            for k = j + 1, limit + 2 do\n           \
    \     sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0 then\n       \
    \             res = res + 1\n                end\n            end\n        end\n\
    \    end\n    return res\nend", "    local triples = 0\n    local last = 0\n \
    \   local i = 1\n    while i <= n do\n        -- If the i-th value is the same\
    \ as the last value, then the\n        -- triple count since last time is n -\
    \ i + 1\n        if a[i] == last then\n            triples = triples + n - i +\
    \ 1\n        else\n            triples = triples + n - i\n        end\n      \
    \  last = a[i]\n        i = i + 1\n    end\n    return triples\nend", "    local\
    \ max_triples = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i\
    \ - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 then\n                    max_triples = max_triples + 1\n             \
    \   end\n            end\n        end\n    end\n    return max_triples\nend\n\
    assert(get_max_triples(1) == 0)\nassert(get_max_triples(2) == 0)\nassert(get_max_triples(3)\
    \ == 1)\nassert(get_max_triples(4) == 1)\nassert(get_max_triples(6) == 2)\nassert(get_max_triples(9)\
    \ == 4)", "    local triples = 0\n    for i = 1, n do\n        for j = i + 1,\
    \ n do\n            for k = j + 1, n do\n                local tri = i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1\n                if tri % 3 == 0 then\n\
    \                    triples = triples + 1\n                end\n            end\n\
    \        end\n    end\n    return triples\nend", "\tlocal res = 0\n\tfor i = 1,\
    \ n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal\
    \ a = i * i - i + 1\n\t\t\t\tlocal b = j * j - j + 1\n\t\t\t\tlocal c = k * k\
    \ - k + 1\n\t\t\t\tif (a + b + c) % 3 == 0 then\n\t\t\t\t\tres = res + 1\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "  local count = 0\n \
    \ for i = 1, n do\n    for j = i + 1, n do\n      for k = j + 1, n do\n      \
    \  if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n        \
    \  count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end\nassert(get_max_triples(10) == 5)\nassert(get_max_triples(50) == 548)", " \
    \   local found = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                local n1 = i * i - i + 1\n \
    \               local n2 = j * j - j + 1\n                local n3 = k * k - k\
    \ + 1\n                if (n1 + n2 + n3) % 3 == 0 then\n                    found\
    \ = found + 1\n                end\n            end\n        end\n    end\n  \
    \  return found\nend", "  -- {1,2,3,4,5,6,7,8,9,10}\n  -- {1,3,7,13,21,31,43,57,73,91}\n\
    \  -- {31,21,13,7,3,1}\n  local res, a, b, c = 0, {}, {}, {}\n  for i = 1, n do\n\
    \    table.insert(a, i * i - i + 1)\n  end\n  for i = 1, #a do\n    for j = i\
    \ + 1, #a do\n      if (a[i] + a[j]) % 3 == 0 then\n        table.insert(b, {a[i],\
    \ a[j]})\n      end\n    end\n  end\n  for i = 1, #b do\n    for j = i + 1, #b\
    \ do\n      if (b[i][1] + b[j][1]) % 3 == 0 and (b[i][2] + b[j][2]) % 3 == 0 then\n\
    \        res = res + 1\n      end\n    end\n  end\n  return res\nend", "\tlocal\
    \ cnt = 0\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n\
    \ do\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\
    \t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\n\
    end", "    local max_triples = 0\n    for i = 1, n do\n        for j = 1, n do\n\
    \            for k = 1, n do\n                local d = (i * i - i + 1) + (j *\
    \ j - j + 1) + (k * k - k + 1)\n                if d % 3 == 0 and i < j and j\
    \ < k then\n                    max_triples = max_triples + 1\n              \
    \  end\n            end\n        end\n    end\n    return max_triples\nend", " \
    \   local mem = {}\n    for i = 1, n do\n        mem[i] = i * i - i + 1\n    end\n\
    \    local cnt = 0\n    for i = 1, n do\n        for j = i + 1, n do\n       \
    \     for k = j + 1, n do\n                if (mem[i] + mem[j] + mem[k]) % 3 ==\
    \ 0 then\n                    cnt = cnt + 1\n                end\n           \
    \ end\n        end\n    end\n    return cnt\nend", "\tif n < 3 then\n\t\treturn\
    \ 0\n\tend\n\tlocal cnt = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\
    \t\t\tfor k = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn cnt\nend", "  local ret = 0\n  local i, j, k = 1, 2, 3\n\
    \  while i < n do\n    while j < n do\n      while k < n do\n        if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n          ret = ret + 1\n        end\n       \
    \ k = k + 1\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return\
    \ ret\nend", "  if n < 3 then return 0 end\n  local count, rest = 0, 1\n  while\
    \ rest <= n do\n    count = count + (n - rest) * (n - rest - 1)\n    rest = rest\
    \ + 3\n  end\n  return count\nend", "\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i]\
    \ = (i*i) - i + 1\n\tend\n\tlocal c = 0\n\tfor i = 1, n-2 do\n\t\tfor j = i+1,\
    \ n-1 do\n\t\t\tfor k = j+1, n do\n\t\t\t\tif ((t[i] + t[j] + t[k]) % 3) == 0\
    \ then\n\t\t\t\t\tc = c + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ c\nend", "    return (n - 1) * (n - 2) * (n - 3) / 6\nend", "    local res =\
    \ 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n   \
    \ end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n   \
    \                 res = res + 1\n                end\n            end\n      \
    \  end\n    end\n    return res\nend", "    -- Write your code here.\n    local\
    \ num_triples = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if ((i * i - i + 1) + (j * j\
    \ - j + 1) + (k * k - k + 1)) % 3 == 0 then\n                    num_triples =\
    \ num_triples + 1\n                end\n            end\n        end\n    end\n\
    \    return num_triples\nend", "  local triplets = 0\n  for i = 1, n do\n    for\
    \ j = i + 1, n do\n      for k = j + 1, n do\n        local ai = i * i - i + 1\n\
    \        local aj = j * j - j + 1\n        local ak = k * k - k + 1\n        if\
    \ (ai + aj + ak) % 3 == 0 then\n          triplets = triplets + 1\n        end\n\
    \      end\n    end\n  end\n  return triplets\nend", "\tlocal sum, count = 0,\
    \ 0\n\tfor i = 1, n do\n\t\tlocal a = i * i - i + 1\n\t\tsum = sum + a\n\t\tif\
    \ a % 3 == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tlocal result = 0\n\
    \tfor i = 1, n - 2 do\n\t\tlocal a = i * i - i + 1\n\t\tlocal s = sum - a\n\t\t\
    if a % 3 == 0 then\n\t\t\tresult = result + count - 1\n\t\telse\n\t\t\tresult\
    \ = result + s % 3 == 0 and count or 0\n\t\tend\n\tend\n\treturn result\nend",
  "    local vals = {}\n    for i = 1, n do\n        vals[i] = i * i - i + 1\n   \
    \ end\n    return vals\nend", "  local sum = 0;\n  local num_triples = 0;\n  for\
    \ i = 1, n do\n    sum = sum + i * i - i + 1;\n    if (sum % 3 == 0) then\n  \
    \    num_triples = num_triples + 1;\n    end\n  end\n  return num_triples;\nend",
  "  local count = 0\n  local i = 1\n  local j = i + 1\n  local k = j + 1\n  while\
    \ i < n do\n    while j < n do\n      while k < n do\n        if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n          count = count +\
    \ 1\n        end\n        k = k + 1\n      end\n      j = j + 1\n      k = j +\
    \ 1\n    end\n    i = i + 1\n    j = i + 1\n    k = j + 1\n  end\n  return count\n\
    end", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n \
    \   end\n    local count = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if a[i] + a[j] +\
    \ a[k] % 3 == 0 then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    -- \u041F\
    \u043E\u0434\u0441\u0447\u0435\u0442 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\
    \u0442\u0432\u0430 \u0447\u0438\u0441\u0435\u043B, \u043A\u0440\u0430\u0442\u043D\
    \u044B\u0445 3\n    local cnt = 0;\n    for i = 1, n do\n        if (i * i - i\
    \ + 1) % 3 == 0 then\n            cnt = cnt + 1;\n        end\n    end\n    return\
    \ cnt;\nend", "\tif n < 3 then return 0 end\n\tlocal t, count = {}, 0\n\tt[1],\
    \ t[2] = 1, 5\n\tfor i = 3, n do\n\t\tt[i] = (3 * i - 1) * i\n\tend\n\tfor i =\
    \ 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\t\
    if (t[i] + t[j] + t[k]) % 3 == 0 then count = count + 1 end\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend", "    local r = {}\n    local z = 0\n    for i = 1,\
    \ n do\n        r[i] = i * i - i + 1\n        if r[i] % 3 == 0 then\n        \
    \    z = z + 1\n        end\n    end\n    return z * (z - 1) * (z - 2) / 6\nend",
  "    local cnt = 0\n    for i = 1, n do\n        for j = i + 1, n do\n         \
    \   for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1 + k\
    \ * k - k + 1) % 3 == 0 then\n                    cnt = cnt + 1\n            \
    \    end\n            end\n        end\n    end\n    return cnt\nend", "  local\
    \ arr = {}\n  for i = 1, n do\n    arr[i] = i * i - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (arr[i] + arr[j] + arr[k]) % 3 == 0 then\n          count =\
    \ count + 1\n        end\n      end\n    end\n  end\n  return count\nend", " \
    \   local triples = {}\n    local max_triples = 0\n    for i = 1, n do\n     \
    \   local ai = i * i - i + 1\n        for j = i + 1, n do\n            local aj\
    \ = j * j - j + 1\n            for k = j + 1, n do\n                local ak =\
    \ k * k - k + 1\n                if (ai + aj + ak) % 3 == 0 then\n           \
    \         max_triples = max_triples + 1\n                end\n            end\n\
    \        end\n    end\n    return max_triples\nend", "  local a = {}\n  for i\
    \ = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local cnt = 0\n  for i = 1, n\
    \ - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if a[i]\
    \ + a[j] + a[k] % 3 == 0 then\n          cnt = cnt + 1\n        end\n      end\n\
    \    end\n  end\n  return cnt\nend\nget_max_triples(10) -- 16\nget_max_triples(15)\
    \ -- 60\nget_max_triples(20) -- 160\nget_max_triples(100) -- 12436\nget_max_triples(200)\
    \ -- 72598\nget_max_triples(10000) -- 63264598", "    local count = 0\n    for\
    \ i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1,\
    \ n do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0 then\n                    count = count + 1\n                end\n    \
    \        end\n        end\n    end\n    return count\nend", "    local function\
    \ is_mul3(x)\n        return x % 3 == 0\n    end\n    local function is_mul3_2(x)\n\
    \        return x % 3 == 2\n    end\n    local a = {}\n    for i = 1, n do\n \
    \       a[i] = i * i - i + 1\n    end\n    local cnt = 0\n    local sum, x, y\n\
    \    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            sum = a[i]\
    \ + a[j]\n            for k = j + 1, n do\n                if is_mul3(sum + a[k])\
    \ then\n                    cnt = cnt + 1\n                end\n            end\n\
    \        end\n    end\n    return cnt\nend", "\tlocal function is_triple(i, j,\
    \ k)\n\t\tlocal sum = i + j + k\n\t\treturn (sum % 3 == 0)\n\tend\n\tlocal a =\
    \ { }\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal function test(s,\
    \ i, j, k)\n\t\tprint(s, i, j, k)\n\t\tif i > j or j > k then\n\t\t\treturn 0\n\
    \t\tend\n\t\tlocal x = 1\n\t\twhile i + x <= j do\n\t\t\tif is_triple(a[i], a[j],\
    \ a[k]) then\n\t\t\t\treturn x\n\t\t\tend\n\t\t\tx = x + 1\n\t\tend\n\t\treturn\
    \ 0\n\tend\n\tlocal sum = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\
    \t\t\tfor k = j + 1, n do\n\t\t\t\tsum = sum + test('a', i, j, k)\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn sum\nend", "    local a, count = {}, 0\n    for i = 1,\
    \ n do\n        a[i] = i * i - i + 1\n    end\n    for i = 1, n do\n        for\
    \ j = i + 1, n do\n            for k = j + 1, n do\n                if (a[i] +\
    \ a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n        \
    \        end\n            end\n        end\n    end\n    return count\nend", " \
    \ -- your solution here\n  if n < 3 then\n    return 0\n  end\n  local res = 0\n\
    \  local mod_6 = 3\n  local mod_6_10 = 6\n  local mod_6_10_15 = 9\n  local mod_6_10_15_21\
    \ = 12\n  for i = 3, n - 2 do\n    if i % 3 == 0 then\n      res = res + (i -\
    \ 2)\n    elseif i % 3 == 1 then\n      res = res + mod_6_10 + (i - mod_6_10_15\
    \ - 1) * 2\n      mod_6_10 = mod_6_10 + i - 2\n      mod_6_10_15 = mod_6_10_15\
    \ + i - 1\n      mod_6_10_15_21 = mod_6_10_15_21 + i\n    else\n      res = res\
    \ + mod_6 + (i - mod_6_10 - 1) * 2\n      mod_6 = mod_6 + i - 2\n      mod_6_10\
    \ = mod_6_10 + i - 1\n      mod_6_10_15 = mod_6_10_15 + i\n    end\n  end\n  return\
    \ res\nend", "    local function to_ind(x)\n        return ((x + 1) * (x + 2))\
    \ // 6\n    end\n    local function to_val(x)\n        return (x * (3 * x - 1))\
    \ // 2\n    end\n    local limit = to_val(n)\n    local dp = { [0] = 1 }\n   \
    \ local sum = 0\n    for i = 1, n do\n        local x = to_val(i)\n        for\
    \ j = sum, 0, -1 do\n            if j + x <= limit then\n                dp[j\
    \ + x] = (dp[j + x] or 0) + dp[j]\n            end\n        end\n        sum =\
    \ sum + x\n    end\n    local res = 0\n    for i = 1, n do\n        local x =\
    \ to_ind(i)\n        for j = x + 1, n do\n            local y = to_ind(j)\n  \
    \          local z = x + y\n            if z <= n then\n                res =\
    \ res + dp[to_val(x)] * dp[to_val(y)] * dp[to_val(z)]\n            end\n     \
    \   end\n    end\n    return res\nend", "  local count = 0\n  for i = 1, n do\n\
    \    for j = i + 1, n do\n      for k = j + 1, n do\n        local a = i * i -\
    \ i + 1\n        local b = j * j - j + 1\n        local c = k * k - k + 1\n  \
    \      if a + b + c % 3 == 0 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  return n * (n - 1) * (n -\
    \ 2) / 6\nend", "    if n < 3 then return 0 end\n    local res = 0\n    for i\
    \ = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n\
    \ do\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0 then\n                    res = res + 1\n                end\n           \
    \ end\n        end\n    end\n    return res\nend", "\tlocal count = 0\n\tlocal\
    \ a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n -\
    \ 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn count\nend", "    local count = 0\n    for i =\
    \ 1, n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n    \
    \            local sum = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n     \
    \           if sum % 3 == 0 then\n                    count = count + 1\n    \
    \            end\n            end\n        end\n    end\n    return count\nend",
  "\t--return __get_max_triples(n)\n\treturn __get_max_triples2(n)\nend", "\tif n\
    \ < 3 then return 0 end\n\tlocal r = {}\n\tfor i = 1, n do\n\t\tlocal v = i *\
    \ i - i + 1\n\t\tr[i] = v\n\tend\n\tlocal result = 0\n\tfor i = 1, n - 2 do\n\t\
    \tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (r[i] + r[j]\
    \ + r[k]) % 3 == 0 then\n\t\t\t\t\tresult = result + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend", "    local res = 0\n    for i = 1, n do\n\
    \        for j = i + 1, n do\n            for k = j + 1, n do\n              \
    \  if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n        \
    \            res = res + 1\n                end\n            end\n        end\n\
    \    end\n    return res\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] =\
    \ i * i - i + 1\n\tend\n\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j =\
    \ i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend", "\tlocal triples = 0\n\tfor i = 1, n do\n\t\tlocal\
    \ a_i = i * i - i + 1\n\t\tfor j = i + 1, n do\n\t\t\tlocal a_j = j * j - j +\
    \ 1\n\t\t\tfor k = j + 1, n do\n\t\t\t\tlocal a_k = k * k - k + 1\n\t\t\t\tif\
    \ (a_i + a_j + a_k) % 3 == 0 then\n\t\t\t\t\ttriples = triples + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn triples\nend", "\tif n < 3 then\n\t\treturn\
    \ 0\n\tend\n\treturn n * (n - 1) * (n - 2) / 6\nend", "  local a = {}\n  for i\
    \ = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for i = 1,\
    \ n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n        if\
    \ a[i] + a[j] + a[k] % 3 == 0 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  -- 1, 4, 10, 19, 31, 46,\
    \ 64, 84, 107, 133, 162, 194, 229, 267, 308, 352, 399, \n  -- 450, 504, 561, 622,\
    \ 686, 753, 823, 896, 972, 1051, 1133, 1218, 1306, 1397, \n  -- 1491, 1588, 1688,\
    \ 1791, 1897, 2005, 2116, 2231, 2349, 2470, 2594, 2721, \n  -- 2851, 2984, 3120,\
    \ 3259, 3401, 3546, 3694, 3845, 3999, 4156, 4316, 4479, \n  -- 4645, 4814, 4986,\
    \ 5161, 5339, 5520, 5704, 5891, 6081, 6274, 6470, 6669, \n  -- 6871, 7076, 7284,\
    \ 7495, 7709, 7926, 8146, 8369, 8595, 8824, 9056, 9291, \n  -- 9529, 9770, 10014,\
    \ 10261, 10511, 10764, 11019, 11278, 11540, 11805, 12073, \n  -- 12343, 12617,\
    \ 12894, 13174, 13457, 13743, 14032, 14324, 14619, 14917, 15218, \n  -- 15522,\
    \ 15829, 16139, 16452, 16768, 17087, 17409, 17734, 18062, 18393, 18727, \n  --\
    \ 19064, 19404, 19747, 20093, 20442, 20794, 21149, 21507, 21868, 22232, 22599,\
    \ \n  -- 22969, 23342, 23718, 24097, 24479, 24864, 25252, 25643, 26037, 26434,\
    \ 26834, \n  -- 27237, 27643, 28052, 28464, 28879, 29297, 29718, 30142, 30569,\
    \ 30999, 31432, \n  -- 31868, 32307, 32749, 33194, 33642, 34093, 34547, 35004,\
    \ 35464, 35927, 36393, \n  -- 36862,", "  local arr = {}\n  for i = 1, n do\n\
    \    arr[i] = i * i - i + 1\n  end\n  local count = 0\n  for i = 1, n do\n   \
    \ for j = i + 1, n do\n      for k = j + 1, n do\n        if (arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0 then\n          count = count + 1\n        end\n      end\n\
    \    end\n  end\n  return count\nend", "\tlocal a = {};\n\tfor i = 1, n do\n\t\
    \ta[i] = i * i - i + 1;\n\tend\n\treturn a;\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 0 end\n    if n == 2 then return 0 end\n  \
    \  local count = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i *\
    \ i - i + 1\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n     \
    \       for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend", "    local a = {};\n  \
    \  for i = 1, n do\n        a[i] = i * i - i + 1;\n    end", "    -- your code\
    \ here\n    local count = 0\n    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n\
    \ - 1 do\n            for k = j + 1, n do\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    return count\nend", "    local a =\
    \ {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local r\
    \ = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for k = j\
    \ + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n         \
    \           r = r + 1\n                end\n            end\n        end\n   \
    \ end\n    return r\nend", "    local r = 0\n    local p = 3\n    local a = {}\n\
    \    local function f(i)\n        a[i] = i * i - i + 1\n        if i == n then\n\
    \            local m = {}\n            for i = 1, n do\n                local\
    \ k = a[i] % p\n                if m[k] then\n                    m[k] = m[k]\
    \ + 1\n                else\n                    m[k] = 1\n                end\n\
    \            end\n            if m[0] and m[0] > 2 then\n                r = r\
    \ + m[0] * (m[0] - 1) * (m[0] - 2) / 6\n            end\n            for i = 1,\
    \ 2 do\n                if m[i] and m[p - i] then\n                    r = r +\
    \ m[i] * m[p - i] * (m[p - i] - 1) / 2\n                end\n            end\n\
    \        else\n            f(i + 1)\n        end\n    end\n    f(1)\n    return\
    \ r\nend", "    local sum = 0\n    for i = 1, n do\n        sum = sum + math.floor(i\
    \ * i - i + 1 / 3)\n    end\n    return sum\nend", "  local triples = {}\n  local\
    \ count = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k =\
    \ j + 1, n do\n        local a = i * i - i + 1\n        local b = j * j - j +\
    \ 1\n        local c = k * k - k + 1\n        if (a + b + c) % 3 == 0 then\n \
    \         count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "    local a = {}\n    for i = 1, n do\n        a[i] = i * i -\
    \ i + 1\n    end\n    local count = 0\n    for i = 1, n - 2 do\n        for j\
    \ = i + 1, n - 1 do\n            for k = j + 1, n do\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 then\n                    count = count + 1\n      \
    \          end\n            end\n        end\n    end\n    return count\nend",
  "  local a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          count = count\
    \ + 1\n        end\n      end\n    end\n  end\n  return count\nend", "\tlocal\
    \ count = 0\n\tlocal max_triples = 0\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal\
    \ v = i * i - i + 1\n\t\tif v % 3 == 0 then count = count + 1 end\n\t\tif count\
    \ > max_triples then max_triples = count end\n\t\tif v % 3 == 1 then count = 0\
    \ end\n\t\ti = i + 1\n\tend\n\treturn max_triples\nend", "    local sum = 0\n\
    \    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k =\
    \ j + 1, n do\n                if ((i * i - i + 1) + (j * j - j + 1) + (k * k\
    \ - k + 1)) % 3 == 0 then\n                    sum = sum + 1\n               \
    \ end\n            end\n        end\n    end\n    return sum\nend", "\tlocal a\
    \ = {}\n\tfor i = 1, n do a[i] = i * i - i + 1 end\n\treturn get_triples(a)\n\
    end", "    -- Write your code here\nend", "\t-- n = 4:\n\t-- i\t1\t2\t3\t4\n\t\
    -- a[i]\t1\t2\t4\t7\n\t-- \n\t-- i\tj\tk\ta[i]\ta[j]\ta[k]\ta[i] + a[j] + a[k]\t\
    \ta[i] + a[j] + a[k] % 3\ttriple\t\n\t-- 1\t2\t3\t1\t\t2\t\t4\t\t7\t\t\t\t\t\t\
    \t1\t\t\t\t\t\tno\n\t-- 1\t2\t4\t1\t\t2\t\t7\t\t10\t\t\t\t\t\t\t1\t\t\t\t\t\t\
    no\n\t-- 1\t3\t4\t1\t\t4\t\t7\t\t12\t\t\t\t\t\t\t0\t\t\t\t\t\tyes\n\t-- 2\t3\t\
    4\t2\t\t4\t\t7\t\t13\t\t\t\t\t\t\t1\t\t\t\t\t\tno\n\t\n\t-- n = 5:\n\t-- i\t1\t\
    2\t3\t4\t5\n\t-- a[i]\t1\t2\t4\t7\t11\n\t-- \n\t-- i\tj\tk\ta[i]\ta[j]\ta[k]\t\
    a[i] + a[j] + a[k]\t\ta[i] + a[j] + a[k] % 3\ttriple\t\n\t-- 1\t2\t3\t1\t\t2\t\
    \t4\t\t7\t\t\t\t\t\t\t1\t\t\t\t\t\tno\n\t-- 1\t2\t4\t1\t\t2\t\t7\t\t10\t\t\t\t\
    \t\t\t1\t\t\t\t\t\tno\n\t-- 1\t2\t5\t1\t\t2\t\t11\t\t14\t\t\t\t\t\t\t2\t\t\t\t\
    \t\tno\n\t-- 1\t3\t4\t1\t\t4\t\t7\t\t12\t\t\t\t\t\t\t0\t\t\t\t\t\tyes\n\t-- 1\t\
    3\t5\t1\t\t4\t\t11\t\t16\t\t\t\t\t\t\t1\t\t\t\t\t\tno\n\t-- 1", "  local a = {}\n\
    \  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local count = 0\n  for\
    \ i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n  \
    \      if a[i] + a[j] + a[k] % 3 == 0 then\n          count = count + 1\n    \
    \    end\n      end\n    end\n  end\n  return count\nend", "    local a = {}\n\
    \    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local count =\
    \ 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n   \
    \                 count = count + 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend", "\tlocal function get_triples(a,\
    \ i, n)\n\t\tlocal function get_comb(start, n)\n\t\t\tif n == 1 then\n\t\t\t\t\
    local ret = {}\n\t\t\t\tfor i = start, #a do\n\t\t\t\t\ttable.insert(ret, {a[i]})\n\
    \t\t\t\tend\n\t\t\t\treturn ret\n\t\t\tend\n\t\t\tlocal ret = {}\n\t\t\tfor i\
    \ = start, #a - n + 1 do\n\t\t\t\tlocal cmb = get_comb(i + 1, n - 1)\n\t\t\t\t\
    for j = 1, #cmb do\n\t\t\t\t\ttable.insert(cmb[j], 1, a[i])\n\t\t\t\t\ttable.insert(ret,\
    \ cmb[j])\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn ret\n\t\tend\n\t\treturn get_comb(i,\
    \ n)\n\tend\n\tlocal function is_div3(a)\n\t\tlocal sum = 0\n\t\tfor i = 1, #a\
    \ do\n\t\t\tsum = sum + a[i]\n\t\tend\n\t\treturn sum % 3 == 0\n\tend\n\tlocal\
    \ a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal ans = 0\n\
    \tfor i = 1, n - 2 do\n\t\tlocal triples = get_triples(a, i + 1, 3)\n\t\tfor j\
    \ = 1, #triples do\n\t\t\tif is_div3(triples[j]) then\n\t\t\t\tans = ans + 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "    -- 1 \u2264 n \u2264 100\n\
    \    if n < 1 or n > 100 then\n        return nil\n    end\n    local tot = 0\n\
    \    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k =\
    \ j + 1, n do\n                if a[i] + a[j] + a[k] % 3 == 0 then\n         \
    \           tot = tot + 1\n                end\n            end\n        end\n\
    \    end\n    return tot\nend", "\tlocal triples = 0\n\tlocal i = 1\n\tlocal j\
    \ = 2\n\tlocal k = 3\n\twhile i < n do\n\t\tlocal a_i = i * i - i + 1\n\t\tlocal\
    \ a_j = j * j - j + 1\n\t\tlocal a_k = k * k - k + 1\n\t\t--print(\"a[\"..i..\"\
    ]:\"..a_i..\" a[\"..j..\"]:\"..a_j..\" a[\"..k..\"]:\"..a_k)\n\t\tif a_i + a_j\
    \ + a_k == 0 then\n\t\t\ttriples = triples + 1\n\t\t\t--print(\"a[\"..i..\"]:\"\
    ..a_i..\" a[\"..j..\"]:\"..a_j..\" a[\"..k..\"]:\"..a_k)\n\t\tend\n\t\tif k <\
    \ n then\n\t\t\tk = k + 1\n\t\telseif j < n - 1 then\n\t\t\tk = j + 2\n\t\t\t\
    j = j + 1\n\t\telseif i < n - 2 then\n\t\t\tj = i + 2\n\t\t\tk = j + 1\n\t\t\t\
    i = i + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn triples\nend", "  \
    \  local result = 0\n    for i = 1, n do\n        for j = i + 1, n do\n      \
    \      for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0 then\n                    result = result + 1\n  \
    \              end\n            end\n        end\n    end\n    return result\n\
    end", "    local res = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n -\
    \ 1 do\n            for k = j + 1, n do\n                local m = i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1\n                if (m % 3 == 0) then\n  \
    \                  res = res + 1\n                end\n            end\n     \
    \   end\n    end\n    return res\nend", "    local a = {}\n    for i = 1, n do\n\
    \        a[i] = i * i - i + 1\n    end\n    local s = 0\n    for i = 1, n - 2\
    \ do\n        for j = i + 1, n - 1 do\n            if (a[i] + a[j]) % 3 == 0 then\n\
    \                s = s + n - j\n            end\n        end\n    end\n    return\
    \ s\nend", "    local res = 0\n    for i = 1, n do\n        for j = i + 1, n do\n\
    \            for k = j + 1, n do\n                local sum = i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1\n                if sum % 3 == 0 then\n      \
    \              res = res + 1\n                end\n            end\n        end\n\
    \    end\n    return res\nend\nprint(get_max_triples(5))\nprint(get_max_triples(7))\n\
    print(get_max_triples(10))\nprint(get_max_triples(15))", "  local count = 0\n\
    \  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n\
    \        if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n  \
    \        count = count + 1\n        end\n      end\n    end\n  end\n  return count\n\
    end", "\tlocal i, j, k, s = 1, 2, 3, 0\n\twhile i < n do\n\t\tj = i + 1\n\t\t\
    while j < n do\n\t\t\tk = j + 1\n\t\t\twhile k < n do\n\t\t\t\ts = i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1\n\t\t\t\tif s % 3 == 0 then\n\t\t\t\t\tprint(i,\
    \ j, k)\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\nend", "    -- a = {a[i] = i * i - i + 1}\n    local a =\
    \ {}\n    local count = 0\n    for i = 1, n do\n        a[i] = i * i - i + 1\n\
    \    end\n    -- (a[i], a[j], a[k]) of a where i < j < k\n    for i = 1, n - 2\
    \ do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count =\
    \ count + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "    if n < 3 then return 0 end\n    local rem = {[0]=0,0,0}\n\
    \    for i=1,n do\n        rem[(i*i-i+1)%3] = rem[(i*i-i+1)%3] + 1\n    end\n\
    \    return rem[0]*(rem[0]-1)*(rem[0]-2)/6 + rem[1]*rem[2]*(rem[1]-1)/2 + rem[2]*rem[1]*(rem[2]-1)/2\n\
    end", "\tlocal max_triples = 0\n\tlocal max_number = n * n - n + 1\n\t-- make\
    \ all possible combinations (i, j, k)\n\tfor i = 1, n do\n\t\tfor j = i+1, n do\n\
    \t\t\tfor k = j+1, n do\n\t\t\t\t-- check if the sum is a multiple of 3 and increase\
    \ the counter\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0 then\n\t\t\t\t\tmax_triples = max_triples + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn max_triples\nend", "    -- print(n)\n    local sum =\
    \ 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for\
    \ k = j + 1, n do\n                local a = i * i - i + 1\n                local\
    \ b = j * j - j + 1\n                local c = k * k - k + 1\n               \
    \ if (a + b + c) % 3 == 0 then\n                    -- print(i, j, k, a, b, c)\n\
    \                    sum = sum + 1\n                end\n            end\n   \
    \     end\n    end\n    return sum\nend", "  local triples = 0\n  local bitmap\
    \ = {}\n  for i = 1, n do\n    bitmap[i] = (i * i - i + 1) % 3\n  end\n  for i\
    \ = 1, n - 2 do\n    local r = bitmap[i]\n    for j = i + 1, n - 1 do\n      local\
    \ r1 = r + bitmap[j]\n      for k = j + 1, n do\n        local r2 = r1 + bitmap[k]\n\
    \        if r2 == 0 then\n          triples = triples + 1\n        end\n     \
    \ end\n    end\n  end\n  return triples\nend", "    if n < 3 then return 0 end\n\
    \    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    local max = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            if (a[i] + a[j]) % 3 == 0 then\n                for k = j + 1, n\
    \ do\n                    if (a[i] + a[j] + a[k]) % 3 == 0 then\n            \
    \            max = max + 1\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return max\nend\nassert(get_max_triples(5)\
    \ == 3)\nassert(get_max_triples(7) == 11)\nassert(get_max_triples(1) == 0)\nassert(get_max_triples(2)\
    \ == 0)\nassert(get_max_triples(3) == 0)\nassert(get_max_triples(10) == 29)\n\
    assert(get_max_triples(25) == 321)\nassert(get_max_triples(100) == 5118)", " \
    \   local arr = {};\n    for i = 1, n do\n        arr[i] = i * i - i + 1;\n  \
    \  end\n    -- print(\"arr = \", table.concat(arr, \", \"));\n    local triples\
    \ = 0;\n    for i = 1, n do\n        for j = i + 1, n do\n            for k =\
    \ j + 1, n do\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 then\n \
    \                   triples = triples + 1;\n                end\n            end\n\
    \        end\n    end\n    return triples;\nend\nprint(get_max_triples(5));",
  "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal cnt\
    \ = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1,\
    \ n do\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend", "  if n < 3 then return\
    \ 0 end\n  local sum = 0\n  local t = {}\n  local coeff = {}\n  for i = 1, n do\
    \ t[i] = i * i - i + 1 end\n  for i = 1, n do\n    for j = i + 1, n do\n     \
    \ for k = j + 1, n do\n        if t[i] + t[j] + t[k] % 3 == 0 then\n         \
    \ sum = sum + 1\n        end\n      end\n    end\n  end\n  return sum\nend", " \
    \   local function get_triples(arr)\n        local function mod_3(num)\n     \
    \       return num % 3 == 0\n        end\n        local function add(a, b)\n \
    \           return a + b\n        end\n        local function is_multiple_of_3(t)\n\
    \            return mod_3(t[1] + t[2] + t[3])\n        end\n        local function\
    \ gen_triples(set)\n            local triples = {}\n            for i = 1, #set\
    \ do\n                for j = i + 1, #set do\n                    for k = j +\
    \ 1, #set do\n                        local triple = { set[i], set[j], set[k]\
    \ }\n                        if is_multiple_of_3(triple) then\n              \
    \              table.insert(triples, triple)\n                        end\n  \
    \                  end\n                end\n            end\n            return\
    \ triples\n        end\n        return gen_triples(arr)\n    end\n    local function\
    \ gen_array(n)\n        local arr = {}\n        for i = 1, n do\n            table.insert(arr,\
    \ i * i - i + 1)\n        end\n        return arr\n    end\n    local arr = gen_array(n)\n\
    \    local triples = get_triples(arr)\n    return #triples\nend", "  local triples\
    \ = 0\n  local j, k\n  for i = 1, n do\n    j = i * i - i + 1\n    for k = i +\
    \ 1, n do\n      local c = k * k - k + 1\n      if ((j + c) % 3 == 0) then\n \
    \       triples = triples + 1\n      end\n    end\n  end\n  return triples\nend",
  "\tlocal a, sum, res = {}, 0, 0\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\t\
    \tsum = sum + a[i]\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\
    \t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\
    \t\t\tres = res + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend\n\
    print(get_max_triples(5))", "    local x = 1\n    local y = 2\n    local z = 3\n\
    \    local count = 0\n    local a = {}\n    for i = 1, n do\n        a[i] = i\
    \ * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1\
    \ do\n            for k = j + 1, n do\n                x = a[i]\n            \
    \    y = a[j]\n                z = a[k]\n                if (x + y + z) % 3 ==\
    \ 0 then\n                    count = count + 1\n                end\n       \
    \     end\n        end\n    end\n    return count\nend", "\tlocal a = {}\n\tfor\
    \ i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tlocal count = 0\n\tfor i = 1,\
    \ n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif\
    \ (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nassert(get_max_triples(5) == 3)\n\
    assert(get_max_triples(6) == 4)\nassert(get_max_triples(100) == 4233)", "\tlocal\
    \ count = 0\n\tlocal max_i, max_j, max_k = 0, 0, 0\n\tfor i = 1, n do\n\t\tfor\
    \ j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\
    \t\tif (i + j + k) > (max_i + max_j + max_k) then\n\t\t\t\t\t\tmax_i, max_j, max_k\
    \ = i, j, k\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count,\
    \ max_i, max_j, max_k\nend", "  local max_triples = 0\n  for i = 1, n do\n   \
    \ for j = i + 1, n do\n      for k = j + 1, n do\n        if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n          max_triples = max_triples\
    \ + 1\n        end\n      end\n    end\n  end\n  return max_triples\nend", "\t\
    local function get_triples(n)\n\t\tlocal t, i, j, k = {}, 0, 0, 0\n\t\tfor i =\
    \ 1, n do\n\t\t\tt[i] = i * i - i + 1\n\t\tend\n\t\tfor i = 1, n - 2 do\n\t\t\t\
    for j = i + 1, n - 1 do\n\t\t\t\tfor k = j + 1, n do\n\t\t\t\t\tif t[i] + t[j]\
    \ + t[k] % 3 == 0 then\n\t\t\t\t\t\tcoroutine.yield(i, j, k)\n\t\t\t\t\tend\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal c = coroutine.create(get_triples)\n\
    \tlocal count = 0\n\twhile coroutine.status(c) ~= 'dead' do\n\t\tcoroutine.resume(c,\
    \ n)\n\t\tcount = count + 1\n\tend\n\treturn count\nend", "\tlocal num_triples\
    \ = 0\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\tlocal triple_sum = i * i - i +\
    \ 1\n\t\tif triple_sum % 3 == 0 then\n\t\t\tnum_triples = num_triples + 1\n\t\t\
    \tsum = sum + triple_sum\n\t\tend\n\tend\n\treturn num_triples, sum\nend", "\t\
    local function get_sum(a, b, c)\n\t\treturn a + b + c\n\tend\n\tlocal result =\
    \ 0\n\tlocal sum = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\
    \tfor k = j + 1, n do\n\t\t\t\tlocal a = i * i - i + 1\n\t\t\t\tlocal b = j *\
    \ j - j + 1\n\t\t\t\tlocal c = k * k - k + 1\n\t\t\t\tsum = get_sum(a, b, c)\n\
    \t\t\t\tif sum % 3 == 0 then\n\t\t\t\t\tresult = result + 1\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn result\nend", "  local triples = {}\n  for i =\
    \ 1, n do\n    local x = i * i - i + 1\n    local re = x % 3\n    local o = triples[re]\
    \ or {}\n    o[#o + 1] = x\n    triples[re] = o\n  end\n  local max_triples =\
    \ 0\n  for r = 0, 2 do\n    local s = triples[r]\n    if s then\n      for i =\
    \ 1, #s do\n        for j = i + 1, #s do\n          for k = j + 1, #s do\n   \
    \         max_triples = max_triples + 1\n          end\n        end\n      end\n\
    \    end\n  end\n  return max_triples\nend", "    local triples = 0\n    local\
    \ a = Array.new(n)\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n            for k =\
    \ j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n       \
    \             triples = triples + 1\n                end\n            end\n  \
    \      end\n    end\n    return triples\nend", "    local cnt = 0\n    for i =\
    \ 1, n do\n        for j = i + 1, n do\n            for k = j + 1, n do\n    \
    \            if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n\
    \                    cnt = cnt + 1\n                end\n            end\n   \
    \     end\n    end\n    return cnt\nend", "\t-- body\n\tlocal counter = 0\n\t\
    local first = 1\n\tlocal second = 2\n\tlocal third = 3\n\tfor i = first, n do\n\
    \t\tfor j = second, n do\n\t\t\tfor k = third, n do\n\t\t\t\tif (i < j) and (j\
    \ < k) and (i + j + k) % 3 == 0 then\n\t\t\t\t\tcounter = counter + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn counter\nend", "    local triple_count\
    \ = 0\n    for i = 1, n do\n        local a = i * i - i + 1\n        for j = i\
    \ + 1, n do\n            local b = j * j - j + 1\n            for k = j + 1, n\
    \ do\n                local c = k * k - k + 1\n                if a + b + c %\
    \ 3 == 0 then\n                    triple_count = triple_count + 1\n         \
    \       end\n            end\n        end\n    end\n    return triple_count\n\
    end", "\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = i * i - i + 1\n\tend\n\t\
    local count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor\
    \ k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k]) % 3 == 0 then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local res = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n\
    \            for k = j + 1, n do\n                if (i * i - i + 1 + j * j -\
    \ j + 1 + k * k - k + 1) % 3 == 0 then\n                    res = res + 1\n  \
    \              end\n            end\n        end\n    end\n    return res\nend",
  "\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor\
    \ k = j + 1, n do\n\t\t\t\tif ((i * i - i + 1) + (j * j - j + 1) + (k * k - k\
    \ + 1)) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend\nassert(get_max_triples(0) == 0)\nassert(get_max_triples(1)\
    \ == 0)\nassert(get_max_triples(2) == 0)\nassert(get_max_triples(3) == 0)\nassert(get_max_triples(4)\
    \ == 1)\nassert(get_max_triples(5) == 2)\nassert(get_max_triples(6) == 3)\nassert(get_max_triples(7)\
    \ == 4)\nassert(get_max_triples(8) == 5)\nassert(get_max_triples(9) == 6)\nassert(get_max_triples(10)\
    \ == 8)\nassert(get_max_triples(11) == 10)\nassert(get_max_triples(12) == 12)\n\
    assert(get_max_triples(13) == 14)\nassert(get_max_triples(14) == 16)\nassert(get_max_triples(15)\
    \ == 18)\nassert(get_max_triples(16) == 20)\nassert(get_max_triples(17) == 22)\n\
    assert(get_max_triples(18) == 24)\nassert(get_max_triples(19) == 26)\nassert(get_max_triples(20)\
    \ == 28)\nassert(get_max_triples(21) == 30)\nassert(get_max_triples(22) == 32)\n\
    assert(get_max_triples(23) == 34)\nassert(get_max_triples(24) == 36)\nassert(get_max_triples(25)\
    \ == 38)\nassert(", "    local count = 0\n    local value\n    for i = 1, n -\
    \ 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n   \
    \             value = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n        \
    \        if value % 3 == 0 then\n                    count = count + 1\n     \
    \           end\n            end\n        end\n    end\n    return count\nend",
  "    local function is_multiple_of_3(a, b, c)\n        return (a + b + c) % 3 ==\
    \ 0\n    end\n    local function is_increasing(a, b, c)\n        return a < b\
    \ and b < c\n    end\n    local a = {}\n    for i = 1, n do\n        a[i] = i\
    \ * i - i + 1\n    end\n    local max_triples = 0\n    for i = 1, n - 2 do\n \
    \       for j = i + 1, n - 1 do\n            for k = j + 1, n do\n           \
    \     if is_increasing(a[i], a[j], a[k]) and is_multiple_of_3(a[i], a[j], a[k])\
    \ then\n                    max_triples = max_triples + 1\n                end\n\
    \            end\n        end\n    end\n    return max_triples\nend", "\tlocal\
    \ count = 0\n\tlocal i = 1\n\twhile i <= n - 2 do\n\t\tlocal j = i + 1\n\t\twhile\
    \ j <= n - 1 do\n\t\t\tlocal k = j + 1\n\t\t\twhile k <= n do\n\t\t\t\tlocal ai\
    \ = i * i - i + 1\n\t\t\t\tlocal aj = j * j - j + 1\n\t\t\t\tlocal ak = k * k\
    \ - k + 1\n\t\t\t\tif (ai + aj + ak) % 3 == 0 then\n\t\t\t\t\tcount = count +\
    \ 1\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\t\
    i = i + 1\n\tend\n\treturn count\nend", "\tlocal a = {}\n\tfor i = 1, n do\n\t\
    \ta[i] = i * i - i + 1\n\tend\n\tlocal found = 0\n\tfor i = 1, n do\n\t\tfor j\
    \ = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k]) %\
    \ 3 == 0 then\n\t\t\t\t\tfound = found + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn found\nend\nassert(get_max_triples(10) == 22)\nassert(get_max_triples(5)\
    \ == 5)\nassert(get_max_triples(100) == 524)\nassert(get_max_triples(20) == 122)\n\
    assert(get_max_triples(100000) == 524)", "  return math.floor(n * (n - 1) * (n\
    \ - 2) / 24)\nend", "    local res = 0\n    for i = 1, n - 2 do\n        local\
    \ cnt = 0\n        local sum = i * i - i + 1\n        for j = i + 1, n - 1 do\n\
    \            local sum1 = sum + j * j - j + 1\n            for k = j + 1, n do\n\
    \                if ((sum1 + k * k - k + 1) % 3) == 0 then\n                 \
    \   cnt = cnt + 1\n                end\n            end\n        end\n       \
    \ res = res + cnt\n    end\n    return res\nend", "    -- Create a of length n\n\
    \    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n\
    \    -- Count triples (a[i], a[j], a[k]) where i < j < k, and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n    local total = 0\n    for i = 1, n do\n        for j\
    \ = i + 1, n do\n            for k = j + 1, n do\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 then\n                    total = total + 1\n             \
    \   end\n            end\n        end\n    end\n    return total\nend", "  return\
    \ n * (n-1) * (n-2) / 6\nend", "    local res = 0\n    local a = {}\n    for i\
    \ = 1, n do\n        a[i] = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n\
    \        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n          \
    \      if a[i] + a[j] + a[k] % 3 == 0 then\n                    res = res + 1\n\
    \                end\n            end\n        end\n    end\n    return res\n\
    end", "    local cnt = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n -\
    \ 1 do\n            for k = j + 1, n do\n                if (i * i - i + 1 + j\
    \ * j - j + 1 + k * k - k + 1) % 3 == 0 then\n                    cnt = cnt +\
    \ 1\n                end\n            end\n        end\n    end\n    return cnt\n\
    end", "\tif n < 3 then\n\t\treturn 0\n\tend\n\tlocal tt = {}\n\tfor i = 1, n do\n\
    \t\ttt[i] = i * i - i + 1\n\tend\n\tlocal sum = 0\n\tfor i = 1, n - 2 do\n\t\t\
    for j = i + 1, n - 1 do\n\t\t\tif (tt[i] + tt[j]) % 3 == 0 then\n\t\t\t\tfor k\
    \ = j + 1, n do\n\t\t\t\t\tif (tt[i] + tt[j] + tt[k]) % 3 == 0 then\n\t\t\t\t\t\
    \tsum = sum + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "  local total = 0\n  for i = 1, n do\n    for j = i + 1, n do\n\
    \      for k = j + 1, n do\n        if (i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1) % 3 == 0 then\n          total = total + 1\n        end\n      end\n\
    \    end\n  end\n  return total\nend", "    local num_triples = 0\n    local sums\
    \ = {[0] = 0, [1] = 0, [2] = 0}\n    for i = 1, n do\n        local rem = (i *\
    \ i - i + 1) % 3\n        sums[rem] = sums[rem] + 1\n    end\n    num_triples\
    \ = num_triples + (sums[0] * (sums[0] - 1) * (sums[0] - 2)) / 6\n    num_triples\
    \ = num_triples + (sums[1] * (sums[1] - 1) * (sums[2])) / 2\n    num_triples =\
    \ num_triples + (sums[2] * (sums[2] - 1) * (sums[1])) / 2\n    return num_triples\n\
    end\nassert(get_max_triples(2) == 0)\nassert(get_max_triples(3) == 1)\nassert(get_max_triples(5)\
    \ == 4)\nassert(get_max_triples(100) == 1515153)\nassert(get_max_triples(99999)\
    \ == 386689091290)", "  local cnt = 0\n  local mem = {}\n  local a = {}\n  for\
    \ i = 1, n do\n    a[i] = i * i - i + 1\n    mem[a[i]] = i\n  end\n  for i = 1,\
    \ n do\n    for j = i + 1, n do\n      local t = a[i] + a[j]\n      if mem[t]\
    \ then\n        cnt = cnt + 1\n      end\n    end\n  end\n  return cnt\nend",
  "  local triples = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n     \
    \ for k = j + 1, n do\n        if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) %\
    \ 3 == 0 then\n          triples = triples + 1\n        end\n      end\n    end\n\
    \  end\n  return triples\nend", "\tlocal sum = 0\n\tlocal arr = {}\n\tfor i =\
    \ 1, n do\n\t\tlocal v = i * i - i + 1\n\t\tarr[i] = v\n\t\tsum = sum + v\n\t\
    end\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\tlocal res = 0\n\twhile i <\
    \ n - 2 do\n\t\tlocal v = arr[i]\n\t\tj = i + 1\n\t\twhile j < n - 1 do\n\t\t\t\
    local v2 = v + arr[j]\n\t\t\tk = j + 1\n\t\t\twhile k < n do\n\t\t\t\tlocal v3\
    \ = v2 + arr[k]\n\t\t\t\tif v3 % 3 == 0 then\n\t\t\t\t\tres = res + 1\n\t\t\t\t\
    end\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn res\nend", "\tif n < 3 then return 0 end\n\tlocal sum_mod3 = {[0]=0,0,0}\n\
    \tfor i=1,n do\n\t\tsum_mod3[1+((i*i-i+1)%3)] = sum_mod3[1+((i*i-i+1)%3)] + 1\n\
    \tend\n\treturn (sum_mod3[0]*(sum_mod3[0]-1)*(sum_mod3[0]-2)\n\t\t\t+ 3*sum_mod3[1]*sum_mod3[2]*(sum_mod3[0]-1)\n\
    \t\t\t+ 3*sum_mod3[1]*(sum_mod3[1]-1)*(sum_mod3[1]-2))/6\nend", "\tlocal t = {}\n\
    \tlocal n = n\n\tfor i = 1, n do\n\t\tt[i] = i * i - i + 1\n\tend\n\tlocal ans\
    \ = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tif t[i] + t[j]\
    \ % 3 == 0 then\n\t\t\t\tfor k = j + 1, n do\n\t\t\t\t\tif t[i] + t[j] + t[k]\
    \ % 3 == 0 then\n\t\t\t\t\t\tans = ans + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn ans\nend", "    local a = {}\n    for i = 1, n do\n\
    \        a[i] = i * i - i + 1\n    end\n    local count = 0\n    for i = 1, n\
    \ do\n        for j = i + 1, n do\n            for k = j + 1, n do\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "\tlocal cnt = 0\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\
    \t\tfor k = j + 1, n do\n\t\t\t\tif (i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn cnt\nend", "\tlocal triples = 0\n\tlocal a = {}\n\tfor i = 1,\
    \ n do\n\t\ta[i] = i * i - i + 1\n\tend\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] + a[k]) %\
    \ 3 == 0 then\n\t\t\t\t\ttriples = triples + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn triples\nend", "    local count = 0\n    for i = 1, n do\n   \
    \     for j = i + 1, n do\n            for k = j + 1, n do\n                if\
    \ (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n            \
    \        count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend\nassert(get_max_triples(3) == 4)\nassert(get_max_triples(6)\
    \ == 21)", "    local triples = {}\n    for i = 1, n - 2 do\n        for j = i\
    \ + 1, n - 1 do\n            for k = j + 1, n do\n                if ((i*i - i\
    \ + 1) + (j*j - j + 1) + (k*k - k + 1)) % 3 == 0 then\n                    triples[#triples\
    \ + 1] = {i, j, k}\n                end\n            end\n        end\n    end\n\
    \    return triples\nend\nassert(get_max_triples(3) == {{1, 2, 3}})\nassert(get_max_triples(4)\
    \ == {{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}})\nassert(get_max_triples(5)\
    \ == {{1, 2, 3}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3,\
    \ 4}, {2, 3, 5}, {2, 4, 5}, {3, 4, 5}})", "    local cnt = 0\n    for i = 1, n\
    \ do\n        for j = i + 1, n do\n            for k = j + 1, n do\n         \
    \       if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n   \
    \                 cnt = cnt + 1\n                end\n            end\n      \
    \  end\n    end\n    return cnt\nend", "    local cnt = 0\n    local s = {}\n\
    \    for i = 1, n do\n        s[i] = i * i - i + 1\n    end\n    for i = 1, n\
    \ - 2 do\n        for j = i + 1, n - 1 do\n            for k = j + 1, n do\n \
    \               if (s[i] + s[j] + s[k]) % 3 == 0 then\n                    cnt\
    \ = cnt + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend", "\tif n < 3 then return 0 end\n\tlocal a = {}\n\tfor i = 1, n do\n\
    \t\ta[i] = i * i - i + 1\n\tend\n\tlocal count = 0\n\tfor i = 1, n - 2 do\n\t\t\
    for j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (a[i] + a[j] +\
    \ a[k]) % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn count\nend", "  local a = {}\n  for i = 1, n do\n    a[i]\
    \ = i * i - i + 1\n  end\n  local cnt = 0\n  for i = 1, n - 2 do\n    for j =\
    \ i + 1, n - 1 do\n      for k = j + 1, n do\n        if (a[i] + a[j] + a[k])\
    \ % 3 == 0 then\n          cnt = cnt + 1\n        end\n      end\n    end\n  end\n\
    \  return cnt\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
