name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length([2, 1,\
  \ 1, 4, 5, 8, 2, 3])   \n-- [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\",\
  \ \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty array:\n\
  -- If the array has any strange number ignore it:\n-- >>> by_length([1, -1 , 55])\
  \ \n-- ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    assert(type(arr) == \"table\", \"by_length must have a table as\
    \ input\")\n    local order = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    local reverse =\
    \ {}\n    local result = {}\n    for i = 1, #order do\n        local num = order[i]\n\
    \        for j = 1, #arr do\n            if arr[j] == num then\n             \
    \   table.insert(reverse, num)\n            end\n        end\n    end\n    for\
    \ k = #reverse, 1, -1 do\n        local name = {\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n        result[#result\
    \ + 1] = name[reverse[k]]\n    end\n    return result\nend", "    local _ = {}\n\
    \    local get_word = function(i)\n        _[1] = \"One\"\n        _[2] = \"Two\"\
    \n        _[3] = \"Three\"\n        _[4] = \"Four\"\n        _[5] = \"Five\"\n\
    \        _[6] = \"Six\"\n        _[7] = \"Seven\"\n        _[8] = \"Eight\"\n\
    \        _[9] = \"Nine\"\n        return _[i]\n    end\n    local function is_ok(x)\n\
    \        if x >= 1 and x <= 9 then\n            return true\n        end\n   \
    \     return false\n    end\n    local function ok_arr(arr)\n        local _ =\
    \ {}\n        for _, v in ipairs(arr) do\n            if is_ok(v) then\n     \
    \           table.insert(_, v)\n            end\n        end\n        return _\n\
    \    end\n    local function sorted(arr)\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local function reversed(arr)\n        local _ = {}\n     \
    \   for i = #arr, 1, -1 do\n            table.insert(_, arr[i])\n        end\n\
    \        return _\n    end\n    local function words(arr)\n        local _ = {}\n\
    \        for _, v in ipairs(arr) do\n            table.insert(_, get_word(v))\n\
    \        end\n        return _\n    end\n    return words(reversed(sorted(ok_arr(arr))))\n\
    end", "    local temp = {}\n    local tempResult = {}\n    local result = {}\n\
    \    for k, v in pairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(temp, v)\n        end\n    end\n    table.sort(temp)\n    for\
    \ k, v in pairs(temp) do\n        table.insert(tempResult, tonumber(v), 0)\n \
    \   end\n    for k, v in pairs(tempResult) do\n        table.insert(result, tonumber(k),\
    \ 0)\n    end\n    return result\nend", "\tif not arr or #arr == 0 then\n\t\t\
    return arr\n\tend\n\tlocal final = {}\n\tlocal hash = {\n\t\t[1] = \"One\",\n\t\
    \t[2] = \"Two\",\n\t\t[3] = \"Three\",\n\t\t[4] = \"Four\",\n\t\t[5] = \"Five\"\
    ,\n\t\t[6] = \"Six\",\n\t\t[7] = \"Seven\",\n\t\t[8] = \"Eight\",\n\t\t[9] = \"\
    Nine\"\n\t}\n\tfor i = 1, #arr do\n\t\tif arr[i] > 0 and arr[i] < 10 then\n\t\t\
    \ttable.insert(final, arr[i])\n\t\tend\n\tend\n\ttable.sort(final)\n\tfor i =\
    \ 1, #final do\n\t\tfinal[i] = hash[final[i]]\n\tend\n\treturn final\nend", "\t\
    table.sort(arr)\n\tlocal res = {}\n\tlocal names = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tfor i = 1, #arr\
    \ do\n\t\tif arr[i] >= 1 and arr[i] <= 9 then\n\t\t\tres[#res + 1] = names[arr[i]]\n\
    \t\tend\n\tend\n\tres = array.reverse(res)\n\treturn res\nend", "    if table.getn(arr)\
    \ < 1 then\n        return {}\n    end\n    local l = {}\n    for _,v in pairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(l, v)\n    \
    \    end\n    end\n    table.sort(l)\n    reverse(l)\n    local n = {\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i, v in pairs(l) do\n        l[i] = n[v]\n    end\n    return l\nend",
  "   local res = {}\n   for _, v in ipairs(arr) do\n      if v == 1 then\n      \
    \   table.insert(res, \"One\")\n      elseif v == 2 then\n         table.insert(res,\
    \ \"Two\")\n      elseif v == 3 then\n         table.insert(res, \"Three\")\n\
    \      elseif v == 4 then\n         table.insert(res, \"Four\")\n      elseif\
    \ v == 5 then\n         table.insert(res, \"Five\")\n      elseif v == 6 then\n\
    \         table.insert(res, \"Six\")\n      elseif v == 7 then\n         table.insert(res,\
    \ \"Seven\")\n      elseif v == 8 then\n         table.insert(res, \"Eight\")\n\
    \      elseif v == 9 then\n         table.insert(res, \"Nine\")\n      end\n \
    \  end\n   for i = 1, math.floor(#res / 2) do\n      res[i], res[#res - i + 1]\
    \ = res[#res - i + 1], res[i]\n   end\n   return res\nend", "  -- Your Code Here\n\
    \  local function f(a, b)\n    if a > b then\n      return 1\n    elseif a < b\
    \ then\n      return -1\n    else\n      return 0\n    end\n  end\n  local new_arr\
    \ = {}\n  for _,v in ipairs(arr) do\n    if v < 10 and v > 0 then\n      table.insert(new_arr,\
    \ v)\n    end\n  end\n  table.sort(new_arr, f)\n  local function f2(n)\n    local\
    \ str = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"}\n    return str[n]\n  end\n  local new_arr1 = {}\n  for\
    \ i,v in ipairs(new_arr) do\n    table.insert(new_arr1, f2(v))\n  end\n  return\
    \ new_arr1\nend", "  if #arr == 0 then\n    return {}\n  end\n  return map(tostring,\n\
    \    sort(\n      filter(function(v) return (v>=1 and v<=9) end, arr)))\nend",
  "    return reverse(sort(arr))\nend", "  local result = {}\n  if (#arr > 0) then\n\
    \    local strArr = {}\n    for k, v in pairs(arr) do\n      table.insert(strArr,\
    \ tostring(v))\n    end\n    table.sort(strArr)\n    for i = #strArr, 1, -1 do\n\
    \      if (strArr[i] == \"1\") then\n        table.insert(result, \"One\")\n \
    \     elseif (strArr[i] == \"2\") then\n        table.insert(result, \"Two\")\n\
    \      elseif (strArr[i] == \"3\") then\n        table.insert(result, \"Three\"\
    )\n      elseif (strArr[i] == \"4\") then\n        table.insert(result, \"Four\"\
    )\n      elseif (strArr[i] == \"5\") then\n        table.insert(result, \"Five\"\
    )\n      elseif (strArr[i] == \"6\") then\n        table.insert(result, \"Six\"\
    )\n      elseif (strArr[i] == \"7\") then\n        table.insert(result, \"Seven\"\
    )\n      elseif (strArr[i] == \"8\") then\n        table.insert(result, \"Eight\"\
    )\n      elseif (strArr[i] == \"9\") then\n        table.insert(result, \"Nine\"\
    )\n      end\n    end\n  end\n  return result\nend", "    local res = {}\n   \
    \ for _, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    local strs = {\"\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i = 1, #res do\n        res[i] = strs[res[i] + 1]\n    end\n    return\
    \ res\nend", "    -- YOUR CODE HERE\nend", "    local indexes = {}\n    local\
    \ result = {}\n    for i = 1, #arr do\n        if arr[i] < 10 and arr[i] > 0 then\n\
    \            table.insert(indexes, i)\n        end\n    end\n    local sorted\
    \ = {}\n    for i = 1, #indexes do\n        table.insert(sorted, arr[indexes[i]])\n\
    \    end\n    table.sort(sorted)\n    local out = {}\n    for i = 1, #sorted do\n\
    \        local word = word_from_digit(sorted[i])\n        table.insert(out, word)\n\
    \    end\n    return out\nend", "\tlocal function rev(arr)\n\t\tlocal res = {}\n\
    \t\tfor i = #arr, 1, -1 do\n\t\t\tres[#res + 1] = arr[i]\n\t\tend\n\t\treturn\
    \ res\n\tend\n\t\n\tlocal t = {\n\t\t[1] = \"One\",\n\t\t[2] = \"Two\",\n\t\t\
    [3] = \"Three\",\n\t\t[4] = \"Four\",\n\t\t[5] = \"Five\",\n\t\t[6] = \"Six\"\
    ,\n\t\t[7] = \"Seven\",\n\t\t[8] = \"Eight\",\n\t\t[9] = \"Nine\"\n\t}\n\t\n\t\
    local function compare(a, b)\n\t\treturn a < b\n\tend\n\t\n\tlocal function to_str(arr)\n\
    \t\tlocal res = {}\n\t\tfor i = 1, #arr do\n\t\t\tres[#res + 1] = t[arr[i]]\n\t\
    \tend\n\t\treturn res\n\tend\n\t\n\tlocal function filter(arr)\n\t\tlocal res\
    \ = {}\n\t\tfor i = 1, #arr do\n\t\t\tif arr[i] >= 1 and arr[i] <= 9 then\n\t\t\
    \t\tres[#res + 1] = arr[i]\n\t\t\tend\n\t\tend\n\t\treturn res\n\tend\n\t\n\t\
    if #arr == 0 then\n\t\treturn {}\n\tend\n\t\n\ttable.sort(arr, compare)\n\tarr\
    \ = filter(arr)\n\tarr = rev(arr)\n\tarr = to_str(arr)\n\treturn arr\nend", " \
    \  for i,v in ipairs(arr) do\n      if v < 1 or v > 9 then\n         arr[i] =\
    \ nil\n      end\n   end\n   qsort(arr, function(a,b) return a > b end)\n   for\
    \ i,v in ipairs(arr) do\n      arr[i] = arr[i] .. \" \"\n   end\n   return arr\n\
    end", "  local result = {}\n  local names = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for index, element in\
    \ ipairs(arr) do\n    if element > 0 and element < 10 then\n      result[index]\
    \ = names[element]\n    end\n  end\n  table.sort(result)\n  reverse(result)\n\
    \  return result\nend", "    local res = {}\n    local numbers = {\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n       \
    \     res[#res + 1] = numbers[v]\n        end\n    end\n    return res\nend",
  "    -- Your code here\n    return nil\nend", "    local result = {}\n    for k,\
    \ v in pairs(arr) do\n        if v > 0 and v < 10 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    local i = 1\n    local\
    \ j = #result\n    while i < j do\n        result[i], result[j] = result[j], result[i]\n\
    \        i = i + 1\n        j = j - 1\n    end\n    for k, v in pairs(result)\
    \ do\n        if v == 1 then\n            result[k] = \"One\"\n        elseif\
    \ v == 2 then\n            result[k] = \"Two\"\n        elseif v == 3 then\n \
    \           result[k] = \"Three\"\n        elseif v == 4 then\n            result[k]\
    \ = \"Four\"\n        elseif v == 5 then\n            result[k] = \"Five\"\n \
    \       elseif v == 6 then\n            result[k] = \"Six\"\n        elseif v\
    \ == 7 then\n            result[k] = \"Seven\"\n        elseif v == 8 then\n \
    \           result[k] = \"Eight\"\n        elseif v == 9 then\n            result[k]\
    \ = \"Nine\"\n        end\n    end\n    return result\nend", "  local first, second,\
    \ third, fourth, fifth, sixth, seventh, eighth, ninth = 1,2,3,4,5,6,7,8,9\n  local\
    \ numbers = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  local result = {}\n  for _, num in ipairs(arr) do\n    if num == first or num\
    \ == second or num == third or num == fourth or num == fifth or num == sixth or\
    \ num == seventh or num == eighth or num == ninth then\n      table.insert(result,\
    \ numbers[num])\n    end\n  end\n  return reverse(result)\nend", "    local function\
    \ cmp(x, y)\n        return x < y\n    end\n    local arrTmp = {}\n    for i =\
    \ 1, #arr do\n        if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(arrTmp,\
    \ arr[i])\n        end\n    end\n    table.sort(arrTmp, cmp)\n    local reverseTmp\
    \ = {}\n    for i = #arrTmp, 1, -1 do\n        table.insert(reverseTmp, arrTmp[i])\n\
    \    end\n    local arrRet = {}\n    for i = 1, #reverseTmp do\n        if reverseTmp[i]\
    \ == 1 then\n            table.insert(arrRet, \"One\")\n        elseif reverseTmp[i]\
    \ == 2 then\n            table.insert(arrRet, \"Two\")\n        elseif reverseTmp[i]\
    \ == 3 then\n            table.insert(arrRet, \"Three\")\n        elseif reverseTmp[i]\
    \ == 4 then\n            table.insert(arrRet, \"Four\")\n        elseif reverseTmp[i]\
    \ == 5 then\n            table.insert(arrRet, \"Five\")\n        elseif reverseTmp[i]\
    \ == 6 then\n            table.insert(arrRet, \"Six\")\n        elseif reverseTmp[i]\
    \ == 7 then\n            table.insert(arrRet, \"Seven\")\n        elseif reverseTmp[i]\
    \ == 8 then\n            table.insert(arrRet, \"Eight\")\n        elseif reverseTmp[i]\
    \ == 9 then\n            table.insert(arrRet, \"Nine\")\n        end\n    end\n\
    \    return arrRet\nend", "\tlocal new_arr = {}\n\tlocal fun = function(t, n)\
    \ table.insert(t, n) end\n\tfor k, v in pairs(arr) do\n\t\tif v >= 1 and v <=\
    \ 9 then\n\t\t\ttable.foreach({1, 2, 3, 4, 5, 6, 7, 8, 9}, fun)\n\t\t\ttable.sort(new_arr)\n\
    \t\t\ttable.insert(new_arr, v)\n\t\tend\n\tend\n\treturn new_arr\nend", "    --\
    \ to do\n    local result = {}\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v < 10 then\n            table.insert(result, v)\n        end\n    end\n\
    \    table.sort(result)\n    for i, v in ipairs(result) do\n        result[i]\
    \ = string.format('%s', v)\n    end\n    return result\nend", "  local new_array\
    \ = {}\n  local dictionar = {\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  }\n  for k, v in pairs(arr) do\n\
    \    if (v >= 1 and v <= 9) then \n      new_array[#new_array + 1] = dictionar[v]\n\
    \    end\n  end\n  table.sort(new_array)\n  for i = 1, math.floor(#new_array /\
    \ 2) do\n    new_array[i], new_array[#new_array - i + 1] = new_array[#new_array\
    \ - i + 1], new_array[i]\n  end\n  return new_array\nend", "  local t = {}\n \
    \ local new_arr = {}\n  local names = {\"Zero\", \"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  local name =\
    \ nil\n  for i = 0, 9 do\n    for j = 1, #arr do\n      if arr[j] == i then\n\
    \        t[#t + 1] = i\n      end\n    end\n  end\n  for k = #t, 1, -1 do\n  \
    \  name = names[t[k]]\n    new_arr[#new_arr + 1] = name\n  end\n  return new_arr\n\
    end", "    local new_arr = {}\n    local map = {\n        ['1'] = 'One',\n   \
    \     ['2'] = 'Two',\n        ['3'] = 'Three',\n        ['4'] = 'Four',\n    \
    \    ['5'] = 'Five',\n        ['6'] = 'Six',\n        ['7'] = 'Seven',\n     \
    \   ['8'] = 'Eight',\n        ['9'] = 'Nine'\n    }\n    for i, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(new_arr, v)\n\
    \        end\n    end\n    table.sort(new_arr)\n    local ret = {}\n    for i\
    \ = #new_arr, 1, -1 do\n        table.insert(ret, map[tostring(new_arr[i])])\n\
    \    end\n    return ret\nend", "  local no_negatives = filter(function(num) return\
    \ num >= 0 end, arr)\n  local numbers_only = filter(function(num) return num >=\
    \ 1 and num <= 9 end, no_negatives)\n  local sorted = sort(numbers_only)\n  local\
    \ reversed = reverse(sorted)\n  local names = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local result = map(function(num)\
    \ return names[num] end, reversed)\n  return result\nend", "    if not arr or\
    \ #arr == 0 then return {} end\n    local ans = {}\n    local len_count = {}\n\
    \    for _, num in ipairs(arr) do\n        local len = string.len(tostring(num))\n\
    \        if len > 1 then len = len_count[len] or 0 end\n        len_count[len]\
    \ = (len_count[len] or 0) + 1\n        ans[#ans + 1] = tostring(num)\n    end\n\
    \    table.sort(ans, function(x, y)\n        local xlen = string.len(x)\n    \
    \    local ylen = string.len(y)\n        if xlen ~= ylen then return xlen < ylen\
    \ end\n        if x ~= y then return x < y end\n        return false\n    end)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i, str in ipairs(ans) do\n        local\
    \ len = string.len(str)\n        if len > 1 then ans[i] = names[len] end\n   \
    \ end\n    return ans\nend", "    return nil\nend", "  local result = {}\n  local\
    \ sorted = _.sort(arr)\n  _.each(sorted, function(num)\n    if num < 1 or num\
    \ > 9 then\n      return\n    end\n    table.insert(result, num2name[num])\n \
    \ end)\n  return _.reverse(result)\nend", "   if #arr == 0 then\n      return\
    \ arr\n   end\n   local function digits(arr)\n      local res = {}\n      for\
    \ _, v in ipairs(arr) do\n         if v > 0 and v < 10 then\n            table.insert(res,\
    \ v)\n         end\n      end\n      return res\n   end\n   local function names(arr)\n\
    \      local res = {}\n      for _, v in ipairs(arr) do\n         if v == 1 then\n\
    \            table.insert(res, \"One\")\n         elseif v == 2 then\n       \
    \     table.insert(res, \"Two\")\n         elseif v == 3 then\n            table.insert(res,\
    \ \"Three\")\n         elseif v == 4 then\n            table.insert(res, \"Four\"\
    )\n         elseif v == 5 then\n            table.insert(res, \"Five\")\n    \
    \     elseif v == 6 then\n            table.insert(res, \"Six\")\n         elseif\
    \ v == 7 then\n            table.insert(res, \"Seven\")\n         elseif v ==\
    \ 8 then\n            table.insert(res, \"Eight\")\n         elseif v == 9 then\n\
    \            table.insert(res, \"Nine\")\n         end\n      end\n      return\
    \ res\n   end\n   local function reverse(arr)\n      local res = {}\n      for\
    \ i = #arr, 1, -1 do\n         table.insert(res, arr[i])\n      end\n      return\
    \ res\n   end\n   return reverse(names(digits(arr)))\nend", "  table.sort(arr)\n\
    \  -- create an array to represent all the numbers from 1 to 9\n  local name =\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" }\n  local new_arr = {}\n  -- iterate through the array and check if\
    \ the number matches any number from 1 to 9\n  for k,v in pairs(arr) do\n    if\
    \ v >= 1 and v <= 9 then\n      new_arr[k] = name[v]\n    end\n  end\n  -- check\
    \ if new_arr is empty\n  if next(new_arr) == nil then\n    return new_arr\n  end\n\
    \  -- reverse the array\n  local rev_arr = {}\n  for i = 1, #new_arr do\n    table.insert(rev_arr,\
    \ 1, new_arr[i])\n  end\n  return rev_arr\nend", "\treturn arr\nend", "  local\
    \ result = {}\n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n  \
    \    table.insert(result, {v, i})\n    end\n  end\n  table.sort(result, function(a,\
    \ b) return a[1] < b[1] end)\n  local res = {}\n  for i, v in ipairs(result) do\n\
    \    table.insert(res, v[1])\n  end\n  local str = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for i, v in\
    \ ipairs(res) do\n    res[i] = str[v]\n  end\n  return res\nend", "  local numbers\
    \ = {}\n  local names = {}\n  local a = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for i = 1, #arr do\n \
    \   if arr[i] > 0 and arr[i] < 10 then\n      table.insert(numbers, arr[i])\n\
    \    end\n  end\n  table.sort(numbers)\n  for i = #numbers, 1, -1 do\n    table.insert(names,\
    \ a[numbers[i]])\n  end\n  return names\nend", "\tlocal list = {}\n\tfor i = 1,\
    \ #arr do\n\t\tif (arr[i] >= 1 and arr[i] <= 9) then\n\t\t\ttable.insert(list,\
    \ arr[i])\n\t\tend\n\tend\n\ttable.sort(list)\n\tlocal reversed = {}\n\tfor i\
    \ = #list, 1, -1 do\n\t\ttable.insert(reversed, list[i])\n\tend\n\tlocal output\
    \ = {}\n\tfor i = 1, #reversed do\n\t\ttable.insert(output, get_num_name(reversed[i]))\n\
    \tend\n\treturn output\nend", "  return {}\nend", "\tlocal t = {}\n\tfor i,v in\
    \ ipairs(arr) do\n\t\tif (1 <= v and v <= 9) then\n\t\t\tt[#t+1] = v\n\t\tend\n\
    \tend\n\ttable.sort(t)\n\t\n\tlocal s = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tfor i,v in ipairs(t) do\n\
    \t\tt[i] = s[v]\n\tend\n\treturn t\nend", "\treturn {}\nend", "    local sorted\
    \ = {}\n    for _, v in ipairs(arr) do\n        if v < 10 and v > 0 then table.insert(sorted,\
    \ v) end\n    end\n    table.sort(sorted)\n    for i, v in ipairs(sorted) do\n\
    \        sorted[i] = words[v]\n    end\n    local rev = {}\n    for i = #sorted,\
    \ 1, -1 do\n        table.insert(rev, sorted[i])\n    end\n    return rev\nend",
  "  local function is_integer(n)\n    return n % 1 == 0\n  end\n  local names = {\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}\n  local res = {}\n  for _, v in ipairs(arr) do\n    if is_integer(v)\
    \ and v > 0 and v < 10 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  for i, v in ipairs(res) do\n    res[i] = names[v]\n  end\n  return res\nend",
  "  -- your code here\nend", "    local sort_by_length = {}\n    local reversed_sort_by_length\
    \ = {}\n    local result = {}\n    local indexes = {}\n    local current_index\
    \ = 0\n    local temp_name = \"\"\n    -- sort the list of numbers in the range\
    \ [1-9]\n    for i, value in ipairs(arr) do\n        if value >= 1 and value <=\
    \ 9 then\n            table.insert(sort_by_length, value)\n        end\n    end\n\
    \    table.sort(sort_by_length)\n    -- store the sorted list in a temporary table\n\
    \    for i, value in ipairs(sort_by_length) do\n        table.insert(reversed_sort_by_length,\
    \ value)\n    end\n    -- reverse the sorted list\n    for i = #sort_by_length,\
    \ 1, -1 do\n        table.insert(sort_by_length, reversed_sort_by_length[i])\n\
    \    end\n    -- remove the sorted, reversed list from the temporary table\n \
    \   for i = #reversed_sort_by_length, 1, -1 do\n        table.remove(reversed_sort_by_length)\n\
    \    end\n    -- store the indexes of the original list with numbers between 1-9\n\
    \    for i, value in ipairs(arr) do\n        if value >= 1 and value <= 9 then\n\
    \            table.insert(indexes, i)\n        end\n    end\n    -- create a new\
    \ list using the original list but replace the digits with their names\n    for\
    \ i, value in ipairs(arr) do\n        if value >= 1 and value <= 9 then\n    \
    \        temp_name = tostring(sort_by_length[i])\n            temp_name = temp_name:gsub(\"\
    1\", \"One\")\n            temp_name = temp_name:gsub(\"2\", \"Two\")\n      \
    \      temp_name = temp_name:gsub(\"3\", \"Three\")\n            temp_name = temp_name:gsub(\"\
    4\", \"Four\")\n            temp_name = temp_name:gsub(\"5\", \"Five\")\n    \
    \        temp_name = temp_name:gsub(\"6\", \"Six\")\n            temp_name = temp_name:gsub(\"\
    7\",", "    local obj = {[1] = \"One\", [2] = \"Two\", [3] = \"Three\", [4] =\
    \ \"Four\", [5] = \"Five\", [6] = \"Six\", [7] = \"Seven\", [8] = \"Eight\", [9]\
    \ = \"Nine\"}\n    local ans = {}\n    for k, v in pairs(arr) do\n        if v\
    \ > 0 and v < 10 then\n            ans[#ans + 1] = obj[v]\n        end\n    end\n\
    \    table.sort(ans)\n    for i = 1, #ans / 2 do\n        ans[i], ans[#ans - i\
    \ + 1] = ans[#ans - i + 1], ans[i]\n    end\n    return ans\nend", "    local\
    \ res = {}\n    for k, v in pairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n  \
    \  for i = 1, #res / 2 do\n        res[i], res[#res - i + 1] = res[#res - i +\
    \ 1], res[i]\n    end\n    for k, v in pairs(res) do\n        res[k] = tostring(v)\n\
    \    end\n    return res\nend", "\t\t-- your code here\n\t\tlocal word = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\t\tlocal\
    \ result = {}\n\t\tfor i = 1,#arr do\n\t\t\tif arr[i]>=1 and arr[i]<=9 then\n\t\
    \t\t\tresult[#result+1] = word[arr[i]]\n\t\t\tend\n\t\tend\n\t\ttable.sort(result)\n\
    \t\tlocal tmp = result\n\t\tresult = {}\n\t\tfor i = #tmp,1,-1 do\n\t\t\tresult[#result+1]\
    \ = tmp[i]\n\t\tend\n\t\treturn result\nend", "\tlocal result = {}\n\tlocal digit_map\
    \ = {[1]=\"One\", [2]=\"Two\", [3]=\"Three\", [4]=\"Four\", [5]=\"Five\", [6]=\"\
    Six\", [7]=\"Seven\", [8]=\"Eight\", [9]=\"Nine\"}\n\tlocal valid_elements = {}\n\
    \tfor k,v in pairs(arr) do\n\t\tif (v > 0 and v < 10) then\n\t\t\ttable.insert(valid_elements,\
    \ v)\n\t\tend\n\tend\n\t\n\ttable.sort(valid_elements)\n\tfor i=0,table.getn(valid_elements)\
    \ do\n\t\ttable.insert(result, digit_map[valid_elements[i]])\n\tend\n\treturn\
    \ result\nend", "    local sorted = {}\n    local res = {}\n    local ones = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 and arr[i] < 10 then\n            table.insert(sorted,\
    \ arr[i])\n        end\n    end\n    table.sort(sorted)\n    for i = #sorted,\
    \ 1, -1 do\n        table.insert(res, ones[sorted[i]])\n    end\n    return res\n\
    end", "    arr = arr or {}\n    local newArr = {}\n    for i = 1, #arr do\n  \
    \      if arr[i] > 0 and arr[i] < 10 then\n            table.insert(newArr, arr[i])\n\
    \        end\n    end\n    table.sort(newArr)\n    local res = {}\n    for i =\
    \ #newArr, 1, -1 do\n        local str = ''\n        if newArr[i] == 1 then\n\
    \            str = 'One'\n        elseif newArr[i] == 2 then\n            str\
    \ = 'Two'\n        elseif newArr[i] == 3 then\n            str = 'Three'\n   \
    \     elseif newArr[i] == 4 then\n            str = 'Four'\n        elseif newArr[i]\
    \ == 5 then\n            str = 'Five'\n        elseif newArr[i] == 6 then\n  \
    \          str = 'Six'\n        elseif newArr[i] == 7 then\n            str =\
    \ 'Seven'\n        elseif newArr[i] == 8 then\n            str = 'Eight'\n   \
    \     elseif newArr[i] == 9 then\n            str = 'Nine'\n        end\n    \
    \    table.insert(res, str)\n    end\n    return res\nend", "    local res = {}\n\
    \    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n         \
    \   res[#res + 1] = v\n        end\n    end\n    table.sort(res)\n    for i, v\
    \ in ipairs(res) do\n        if v == 1 then\n            res[i] = \"One\"\n  \
    \      elseif v == 2 then\n            res[i] = \"Two\"\n        elseif v == 3\
    \ then\n            res[i] = \"Three\"\n        elseif v == 4 then\n         \
    \   res[i] = \"Four\"\n        elseif v == 5 then\n            res[i] = \"Five\"\
    \n        elseif v == 6 then\n            res[i] = \"Six\"\n        elseif v ==\
    \ 7 then\n            res[i] = \"Seven\"\n        elseif v == 8 then\n       \
    \     res[i] = \"Eight\"\n        elseif v == 9 then\n            res[i] = \"\
    Nine\"\n        end\n    end\n    for i = 1, math.floor(#res / 2) do\n       \
    \ res[i], res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    return res\n\
    end", "    local sort = {}\n    local result = {}\n    local words = {\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    if type(arr) ~= \"table\" then\n        return {}\n    end\n    for k,\
    \ v in pairs(arr) do\n        if type(v) == \"number\" and v >= 1 and v <= 9 then\n\
    \            sort[#sort + 1] = v\n        end\n    end\n    table.sort(sort)\n\
    \    for i = #sort, 1, -1 do\n        for j = 1, #words do\n            if sort[i]\
    \ == j then\n                result[#result + 1] = words[j]\n            end\n\
    \        end\n    end\n    return result\nend", "   local new_arr = {}\n   for\
    \ i = 1, #arr do\n      if arr[i] >= 1 and arr[i] <= 9 then\n         new_arr[#new_arr\
    \ + 1] = arr[i]\n      end\n   end\n   table.sort(new_arr)\n   local rev_arr =\
    \ {}\n   for i = #new_arr, 1, -1 do\n      rev_arr[#rev_arr + 1] = new_arr[i]\n\
    \   end\n   local strings = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n   for i = 1, #rev_arr do\n      rev_arr[i]\
    \ = strings[rev_arr[i]]\n   end\n   return rev_arr\nend", "    -- Your code here\n\
    \    if arr == nil then\n        return {}\n    end\n    local function compare(a,\
    \ b)\n        return a < b\n    end\n    table.sort(arr, compare)\n    local new_arr\
    \ = {}\n    for i,v in ipairs(arr) do\n        if v > 0 and v < 10 then\n    \
    \        table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr,\
    \ compare)\n    local reverse_arr = {}\n    for i,v in ipairs(new_arr) do\n  \
    \      reverse_arr[#new_arr - i + 1] = v\n    end\n    local nums = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local final_arr\
    \ = {}\n    for i,v in ipairs(reverse_arr) do\n        table.insert(final_arr,\
    \ nums[v])\n    end\n    return final_arr\nend", "    local arr1 = {}\n    local\
    \ arr2 = {}\n    for i, k in ipairs(arr) do\n        if k >= 1 and k <= 9 then\n\
    \            table.insert(arr1, k)\n        end\n    end\n    table.sort(arr1)\n\
    \    for i, k in ipairs(arr1) do\n        if k == 1 then\n            table.insert(arr2,\
    \ \"One\")\n        elseif k == 2 then\n            table.insert(arr2, \"Two\"\
    )\n        elseif k == 3 then\n            table.insert(arr2, \"Three\")\n   \
    \     elseif k == 4 then\n            table.insert(arr2, \"Four\")\n        elseif\
    \ k == 5 then\n            table.insert(arr2, \"Five\")\n        elseif k == 6\
    \ then\n            table.insert(arr2, \"Six\")\n        elseif k == 7 then\n\
    \            table.insert(arr2, \"Seven\")\n        elseif k == 8 then\n     \
    \       table.insert(arr2, \"Eight\")\n        elseif k == 9 then\n          \
    \  table.insert(arr2, \"Nine\")\n        end\n    end\n    return arr2\nend",
  "  local out = {}\n  for _,v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(out, v)\n    end\n  end\n  table.sort(out)\n  table.reverse(out)\n\
    \  for i,v in ipairs(out) do\n    out[i] = numbers[v]\n  end\n  return out\nend",
  "    local str = ''\n    local tmp = {}\n    local b = {}\n    if #arr == 0 then\
    \ return arr end\n    for i, v in ipairs(arr) do\n        table.insert(tmp, v)\n\
    \    end\n    table.sort(tmp)\n    for i, v in ipairs(tmp) do\n        if v >=\
    \ 1 and v <= 9 then\n            b[i] = num[v]\n        end\n    end\n    return\
    \ b\nend", end, "  local count = {};\n  for _, v in ipairs(arr) do\n    if v >\
    \ 0 and v < 10 then\n      count[v] = (count[v] or 0) + 1;\n    end\n  end\n \
    \ return table.keys(count);\nend", end, "    local result = {}\n    for _, item\
    \ in ipairs(arr) do\n        if item < 1 or item > 9 then\n            goto continue\n\
    \        end\n        table.insert(result, item)\n        ::continue::\n    end\n\
    \    table.sort(result)\n    local tmp = {}\n    for _, item in ipairs(result)\
    \ do\n        table.insert(tmp, 1, item)\n    end\n    result = tmp\n    for i,\
    \ item in ipairs(result) do\n        result[i] = num2str(item)\n    end\n    return\
    \ result\nend", "    local filtered = {}\n    for k, v in pairs(arr) do\n    \
    \    if v > 0 and v < 10 then\n            table.insert(filtered, v)\n       \
    \ end\n    end\n    table.sort(filtered)\n    local reversed = {}\n    for i =\
    \ #filtered, 1, -1 do\n        table.insert(reversed, filtered[i])\n    end\n\
    \    local names = {}\n    for i = 1, #reversed do\n        table.insert(names,\
    \ names_arr[reversed[i]])\n    end\n    return names\nend", "   if arr == nil\
    \ then\n      return {}\n   end\n   local arr_size = #arr\n   local numbers =\
    \ {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n \
    \  local ret = {}\n   for i = 1, arr_size do\n      if arr[i] > 0 and arr[i] <\
    \ 10 then\n         ret[#ret + 1] = numbers[arr[i]]\n      end\n   end\n   return\
    \ ret\nend", "    return {}\nend", "\tlocal l=len(arr)\n\tif l==0 then return\
    \ {} end\n\tlocal b=new([l],0)\n\tfor i=1,l do\n\t\tlocal n=arr[i]\n\t\tif n>=1\
    \ and n<=9 then\n\t\t\tif not b[n] then b[n]={n} else append(b[n],n) end\n\t\t\
    end\n\tend\n\tlocal keys=keys(b)\n\tsort(keys)\n\tlocal r={}\n\tfor i=#keys,1,-1\
    \ do\n\t\tlocal k=keys[i]\n\t\tlocal v=b[k]\n\t\tfor i=1,#v do\n\t\t\tappend(r,v[i])\n\
    \t\tend\n\tend\n\tlocal m={[1]=\"One\",[2]=\"Two\",[3]=\"Three\",[4]=\"Four\"\
    ,[5]=\"Five\",[6]=\"Six\",[7]=\"Seven\",[8]=\"Eight\",[9]=\"Nine\"}\n\tfor i=1,l\
    \ do\n\t\tr[i]=m[r[i]]\n\tend\n\treturn r\nend", "  return {}\nend", "    -- Write\
    \ your code here\n    local result={}\n    local result2={}\n    local result3={}\n\
    \    local result4={}\n    local count=0\n    for k,v in pairs(arr) do\n     \
    \   if v>=1 and v<=9 then\n            table.insert(result,v)\n        end\n \
    \   end\n    table.sort(result)\n    for k,v in pairs(result) do\n        if v==1\
    \ then\n            table.insert(result2,\"One\")\n        elseif v==2 then\n\
    \            table.insert(result2,\"Two\")\n        elseif v==3 then\n       \
    \     table.insert(result2,\"Three\")\n        elseif v==4 then\n            table.insert(result2,\"\
    Four\")\n        elseif v==5 then\n            table.insert(result2,\"Five\")\n\
    \        elseif v==6 then\n            table.insert(result2,\"Six\")\n       \
    \ elseif v==7 then\n            table.insert(result2,\"Seven\")\n        elseif\
    \ v==8 then\n            table.insert(result2,\"Eight\")\n        elseif v==9\
    \ then\n            table.insert(result2,\"Nine\")\n        end\n    end\n   \
    \ for k,v in pairs(result2) do\n        count=count+1\n        result3[count]=v\n\
    \    end\n    for i=count,1,-1 do\n        table.insert(result4,result3[i])\n\
    \    end\n    return result4\nend", "    arr = sort(arr)\n    arr = reverse(arr)\n\
    \    local new_arr = {}\n    for i = 1, #arr do\n        local item = arr[i]\n\
    \        if item < 10 and item > 0 then\n            new_arr[#new_arr + 1] = digit_names[item]\n\
    \        end\n    end\n    return new_arr\nend", "  local str = {}\n  local dict\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n  for i, n in ipairs(arr) do\n    if (n < 10\
    \ and n > 0) then\n      table.insert(str, n)\n    end\n  end\n  table.sort(str)\n\
    \  for i, n in ipairs(str) do\n    local digit = dict[n]\n    str[i] = digit\n\
    \  end\n  return str\nend", "  local t = {}\n  for i,v in ipairs(arr) do\n   \
    \ if v > 0 and v < 10 then\n      table.insert(t, v)\n    end\n  end\n  table.sort(t)\n\
    \  for i,v in ipairs(t) do\n    t[i] = NUMBERS[v]\n  end\n  return t\nend", " \
    \ local result = {}\n  local ignored = {}\n  local length = {}\n  local index\
    \ = 1\n  local sorted = {}\n  local sortedIndex = 1\n  for i, v in ipairs(arr)\
    \ do\n    if v == 1 or v == 2 or v == 3 or v == 4 or v == 5 or v == 6 or v ==\
    \ 7 or v == 8 or v == 9 then\n      length[index] = v\n      index = index + 1\n\
    \    else\n      ignored[i] = v\n    end\n  end\n  table.sort(length)\n  for i,\
    \ v in ipairs(length) do\n    sorted[sortedIndex] = v\n    sortedIndex = sortedIndex\
    \ + 1\n  end\n  local revsorted = {}\n  local revsortedIndex = 1\n  for i = #sorted,\
    \ 1, -1 do\n    revsorted[revsortedIndex] = sorted[i]\n    revsortedIndex = revsortedIndex\
    \ + 1\n  end\n  for i, v in ipairs(revsorted) do\n    if v == 1 then\n      result[i]\
    \ = \"One\"\n    elseif v == 2 then\n      result[i] = \"Two\"\n    elseif v ==\
    \ 3 then\n      result[i] = \"Three\"\n    elseif v == 4 then\n      result[i]\
    \ = \"Four\"\n    elseif v == 5 then\n      result[i] = \"Five\"\n    elseif v\
    \ == 6 then\n      result[i] = \"Six\"\n    elseif v == 7 then\n      result[i]\
    \ = \"Seven\"\n    elseif v == 8 then\n      result[i] = \"Eight\"\n    elseif\
    \ v == 9 then\n      result[i] = \"Nine\"\n    end\n  end\n  return result\nend",
  "    local len_arr = #arr\n    local new_arr = {}\n    local dict = {\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    local map = {}\n    local count = 0\n    for i = 1, len_arr do\n      \
    \  local num = arr[i]\n        if (num >= 1 and num <= 9) then\n            map[num]\
    \ = map[num] or {}\n            count = count + 1\n            map[num][count]\
    \ = dict[num]\n        end\n    end\n    for key, value in pairs(map) do\n   \
    \     for k, v in pairs(value) do\n            new_arr[#new_arr + 1] = v\n   \
    \     end\n    end\n    return new_arr\nend", "    local new_arr = {}\n    local\
    \ str_arr = {}\n    local ud_arr = {}\n    local res_arr = {}\n    local str_dic\
    \ = {\n        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\"\
    ,\n        [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n\
    \        [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n\
    \    }\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n  \
    \          table.insert(new_arr, v)\n        end\n    end\n    table.sort(new_arr)\n\
    \    for i, v in ipairs(new_arr) do\n        table.insert(str_arr, str_dic[v])\n\
    \    end\n    for i = #str_arr, 1, -1 do\n        table.insert(ud_arr, str_arr[i])\n\
    \    end\n    for i, v in ipairs(ud_arr) do\n        table.insert(res_arr, v)\n\
    \    end\n    return res_arr\nend", "    if #arr == 0 then\n        return {}\n\
    \    end\n    local result = {}\n    local one_nine = {\n        \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n   \
    \ }\n    for _, v in ipairs(arr) do\n        if 1 <= v and v <= 9 then\n     \
    \       table.insert(result, one_nine[v])\n        end\n    end\n    table.sort(result)\n\
    \    local i = 1\n    local j = #result\n    while i < j do\n        result[i],\
    \ result[j] = result[j], result[i]\n        i = i + 1\n        j = j - 1\n   \
    \ end\n    return result\nend", "    local t = {}\n    for i, v in ipairs(arr)\
    \ do\n        if arr[i] > 0 and arr[i] < 10 then\n            table.insert(t,\
    \ arr[i])\n        end\n    end\n    table.sort(t)\n    for i = 1, #t do\n   \
    \     if t[i] == 1 then\n            t[i] = \"One\"\n        elseif t[i] == 2\
    \ then\n            t[i] = \"Two\"\n        elseif t[i] == 3 then\n          \
    \  t[i] = \"Three\"\n        elseif t[i] == 4 then\n            t[i] = \"Four\"\
    \n        elseif t[i] == 5 then\n            t[i] = \"Five\"\n        elseif t[i]\
    \ == 6 then\n            t[i] = \"Six\"\n        elseif t[i] == 7 then\n     \
    \       t[i] = \"Seven\"\n        elseif t[i] == 8 then\n            t[i] = \"\
    Eight\"\n        elseif t[i] == 9 then\n            t[i] = \"Nine\"\n        end\n\
    \    end\n    return t\nend", "  return {}\nend", "    return {}\nend", "\ttable.sort(arr)\n\
    \tlocal ret = {}\n\tlocal n = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tfor i, v in ipairs(arr) do\n\t\t\
    if v < 1 or v > 9 then\n\t\t\ttable.insert(ret, \"\")\n\t\telse\n\t\t\ttable.insert(ret,\
    \ n[v])\n\t\tend\n\tend\n\treturn reverse(ret)\nend", "\t-- Write your code here\n\
    \tif (#arr == 0) then return arr end\n\t\n\tlocal name = {\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tlocal\
    \ result = {}\n\tlocal tmp = {}\n\t\n\tfor i,v in ipairs(arr) do\n\t\tif (v <\
    \ 10 and v > 0) then\n\t\t\ttmp[#tmp + 1] = v\n\t\tend\n\tend\n\t\n\ttable.sort(tmp)\n\
    \t\n\tfor i = #tmp, 1, -1 do\n\t\tresult[#result + 1] = name[tmp[i]]\n\tend\n\t\
    \n\treturn result\nend", "  if #arr == 0 then return arr end\n  local a = {}\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(a,\
    \ v)\n    end\n  end\n  if #a == 0 then return a end\n  table.sort(a)\n  local\
    \ b = {}\n  for i = #a, 1, -1 do\n    local m = a[i]\n    local s = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    table.insert(b,\
    \ s[m])\n  end\n  return b\nend", "    local function compare(a, b)\n        return\
    \ string.len(a) < string.len(b)\n    end\n    local result = {}\n    for i, v\
    \ in ipairs(arr) do\n        if v < 0 or v > 9 then\n            goto continue\n\
    \        end\n        local str = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n        table.insert(result, str[v])\n        ::continue::\n\
    \    end\n    table.sort(result, compare)\n    return result\nend", "    if #arr\
    \ == 0 then return {} end\n    local sorted_arr = {}\n    for i = 1, 9 do\n  \
    \      for j = 1, #arr do\n            if arr[j] == i then\n                table.insert(sorted_arr,\
    \ arr[j])\n            end\n        end\n    end\n    local names = {\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i = 1, #sorted_arr do\n        sorted_arr[i] = names[sorted_arr[i]]\n\
    \    end\n    return sorted_arr\nend", "    local digits = {[1] = \"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    local no_strange_numbers = {}\n    for _, v in ipairs(arr) do\n       \
    \ if v >= 1 and v <= 9 then\n            table.insert(no_strange_numbers, v)\n\
    \        end\n    end\n    table.sort(no_strange_numbers)\n    local reversed\
    \ = {}\n    for i = #no_strange_numbers, 1, -1 do\n        table.insert(reversed,\
    \ digits[no_strange_numbers[i]])\n    end\n    return reversed\nend", "    local\
    \ function numbers_to_words(digits)\n        local words = {}\n        for _,\
    \ digit in ipairs(digits) do\n            local word = {'One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}[digit]\n            if word\
    \ then\n                table.insert(words, word)\n            end\n        end\n\
    \        return words\n    end\n    local function sort_digits(digits)\n     \
    \   table.sort(digits)\n        return digits\n    end\n    local function reverse_list(list)\n\
    \        local n = #list\n        for i = 1, math.floor(n / 2) do\n          \
    \  list[i], list[n - i + 1] = list[n - i + 1], list[i]\n        end\n        return\
    \ list\n    end\n    local digits = {}\n    for _, value in ipairs(arr) do\n \
    \       if value >= 1 and value <= 9 then\n            table.insert(digits, value)\n\
    \        end\n    end\n    return numbers_to_words(reverse_list(sort_digits(digits)))\n\
    end", "    local res = {}\n    local nums = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #arr do\n\
    \        if arr[i] >= 1 and arr[i] <= 9 then\n            res[#res + 1] = nums[arr[i]]\n\
    \        end\n    end\n    for i = 1, #res / 2 do\n        res[i], res[#res -\
    \ i + 1] = res[#res - i + 1], res[i]\n    end\n    return res\nend", "    -- Insert\
    \ your code here\n    return {}\nend", "  -- your code here \n  return arr\nend",
  "  -- Write your code here\n  local one = {\"One\"}\n  local two = {\"Two\"}\n \
    \ local three = {\"Three\"}\n  local four = {\"Four\"}\n  local five = {\"Five\"\
    }\n  local six = {\"Six\"}\n  local seven = {\"Seven\"}\n  local eight = {\"Eight\"\
    }\n  local nine = {\"Nine\"}\n  local result = {}\n  local temparr = {}\n  for\
    \ i,v in ipairs(arr) do\n    if v == 1 then\n      if #one == 1 then\n       \
    \ table.insert(temparr,one[1])\n      else\n        local n = 1\n        while\
    \ n < #one do\n          local temp = one[n]\n          one[n] = one[n+1]\n  \
    \        one[n+1] = temp\n          n = n + 1\n        end\n        table.insert(temparr,one[1])\n\
    \      end\n    elseif v == 2 then\n      if #two == 1 then\n        table.insert(temparr,two[1])\n\
    \      else\n        local n = 1\n        while n < #two do\n          local temp\
    \ = two[n]\n          two[n] = two[n+1]\n          two[n+1] = temp\n         \
    \ n = n + 1\n        end\n        table.insert(temparr,two[1])\n      end\n  \
    \  elseif v == 3 then\n      if #three == 1 then\n        table.insert(temparr,three[1])\n\
    \      else\n        local n = 1\n        while n < #three do\n          local\
    \ temp = three[n]\n          three[n] = three[n+1]\n          three[n+1] = temp\n\
    \          n = n + 1\n        end\n        table.insert(temparr,three[1])\n  \
    \    end\n    elseif v == 4 then\n      if #four == 1 then\n        table.insert(temparr,four[1])\n\
    \      else\n        local n = 1\n        while n < #four do\n          local\
    \ temp = four[n]\n          four[n] = four[n+1]\n          four[n+1] = temp\n\
    \          n = n + 1\n        end", "  local result = {}\n  if #arr < 1 then\n\
    \    return result\n  end\n  local m = {}\n  for _, v in ipairs(arr) do\n    local\
    \ num = tonumber(v)\n    if num and num >= 1 and num <= 9 then\n      m[v] = true\n\
    \    end\n  end\n  for _, v in ipairs(m) do\n    table.insert(result, v)\n  end\n\
    \  table.sort(result)\n  local len = #result\n  for i = 1, len/2 do\n    local\
    \ tmp = result[i]\n    result[i] = result[len - i + 1]\n    result[len - i + 1]\
    \ = tmp\n  end\n  local words = {\n    \"One\", \"Two\", \"Three\", \"Four\",\
    \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  }\n  for i = 1, len do\n\
    \    result[i] = words[result[i]]\n  end\n  return result\nend", "    -- check\
    \ if the array is empty\n    if (#arr == 0) then\n        return arr\n    end\n\
    \    -- sort and reverse the array\n    sort_reverse(arr)\n    -- replace the\
    \ digits with their names\n    for i, v in ipairs(arr) do\n        if (v == 1)\
    \ then\n            arr[i] = \"One\"\n        elseif (v == 2) then\n         \
    \   arr[i] = \"Two\"\n        elseif (v == 3) then\n            arr[i] = \"Three\"\
    \n        elseif (v == 4) then\n            arr[i] = \"Four\"\n        elseif\
    \ (v == 5) then\n            arr[i] = \"Five\"\n        elseif (v == 6) then\n\
    \            arr[i] = \"Six\"\n        elseif (v == 7) then\n            arr[i]\
    \ = \"Seven\"\n        elseif (v == 8) then\n            arr[i] = \"Eight\"\n\
    \        elseif (v == 9) then\n            arr[i] = \"Nine\"\n        end\n  \
    \  end\n    return arr\nend", "    if not arr then return {} end\n    local numbers\
    \ = { 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' }\n\
    \    local result = {}\n    local lookUp = {}\n    for i, v in ipairs(arr) do\n\
    \        local n = tonumber(v)\n        if n and n >= 1 and n <= 9 then\n    \
    \        lookUp[#lookUp + 1] = n\n        end\n    end\n    table.sort(lookUp)\n\
    \    for i = #lookUp, 1, -1 do\n        result[#result + 1] = numbers[lookUp[i]]\n\
    \    end\n    return result\nend", "    local result = {}\n    for _,v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    local strs = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  \
    \  for i = 1, #result do\n        result[i] = strs[result[i]]\n    end\n    return\
    \ result\nend", "  \n  local function quick_sort(arr,l,u)\n    if l >= u then\
    \ return end\n    local t = arr[l]\n    local i = l\n    local j = u+1\n    while\
    \ true do\n      repeat i = i+1 until not (arr[i] < t)\n      repeat j = j-1 until\
    \ not (arr[j] > t)\n      if i > j then break end\n      arr[i],arr[j] = arr[j],arr[i]\n\
    \    end\n    arr[l],arr[j] = arr[j],arr[l]\n    quick_sort(arr,l,j-1)\n    quick_sort(arr,j+1,u)\n\
    \  end\n  \n  local arr2 = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i]\
    \ <= 9 then\n      arr2[#arr2+1] = arr[i]\n    end\n  end\n  quick_sort(arr2,1,#arr2)\n\
    \  for i = 1, #arr2 do\n    if arr2[i] == 1 then arr2[i] = \"One\"\n    elseif\
    \ arr2[i] == 2 then arr2[i] = \"Two\"\n    elseif arr2[i] == 3 then arr2[i] =\
    \ \"Three\"\n    elseif arr2[i] == 4 then arr2[i] = \"Four\"\n    elseif arr2[i]\
    \ == 5 then arr2[i] = \"Five\"\n    elseif arr2[i] == 6 then arr2[i] = \"Six\"\
    \n    elseif arr2[i] == 7 then arr2[i] = \"Seven\"\n    elseif arr2[i] == 8 then\
    \ arr2[i] = \"Eight\"\n    elseif arr2[i] == 9 then arr2[i] = \"Nine\"\n    end\n\
    \  end\n  for i = 1, #arr2/2 do\n    arr2[i],arr2[#arr2-i+1] = arr2[#arr2-i+1],arr2[i]\n\
    \  end\n  return arr2\nend", "    if type(arr) ~= 'table' then\n        return\
    \ nil\n    end\n    local dict = {\n        [1] = 'One',\n        [2] = 'Two',\n\
    \        [3] = 'Three',\n        [4] = 'Four',\n        [5] = 'Five',\n      \
    \  [6] = 'Six',\n        [7] = 'Seven',\n        [8] = 'Eight',\n        [9] =\
    \ 'Nine'\n    }\n    local res = {}\n    local tmp = {}\n    for k, v in pairs(arr)\
    \ do\n        if dict[v] then\n            table.insert(tmp, v)\n        end\n\
    \    end\n    table.sort(tmp)\n    for i = #tmp, 1, -1 do\n        table.insert(res,\
    \ dict[tmp[i]])\n    end\n    return res\nend", "    --this is a very simple solution\n\
    \    local str = { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\" }\n    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, str[v])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "  --\
    \ your code here\n  --[[\n  local num = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n  local number\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \  local t = {}\n  local x = 1\n  local result = {}\n  for key, value in pairs(arr)\
    \ do\n    for k, v in pairs(num) do\n      if value == v then\n        t[x] =\
    \ number[k]\n        x = x + 1\n      end\n    end\n  end\n  table.sort(t)\n \
    \ for i, v in ipairs(t) do\n    table.insert(result, 1, v)\n  end\n  return result\n\
    \  --]]\n  local num = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n  local number = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local t = {}\n\
    \  local result = {}\n  for key, value in pairs(arr) do\n    for k, v in pairs(num)\
    \ do\n      if value == v then\n        table.insert(t, number[k])\n      end\n\
    \    end\n  end\n  table.sort(t)\n  for i, v in ipairs(t) do\n    table.insert(result,\
    \ 1, v)\n  end\n  return result\nend", "    if #arr == 0 then\n        return\
    \ {}\n    end\n    local dict = {\n        [1] = \"One\",\n        [2] = \"Two\"\
    ,\n        [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n\
    \        [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n\
    \        [9] = \"Nine\"\n    }\n    local result = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    local res_rev = {}\n    for\
    \ i = #result, 1, -1 do\n        table.insert(res_rev, dict[result[i]])\n    end\n\
    \    return res_rev\nend", "\tlocal answer = {}\n\tif type(arr) == \"table\" then\n\
    \t\tfor _, v in ipairs(arr) do\n\t\t\tif type(v) == \"number\" and v > 0 and v\
    \ < 10 then\n\t\t\t\tlocal str = \"\"\n\t\t\t\tif v == 1 then\n\t\t\t\t\tstr =\
    \ \"One\"\n\t\t\t\telseif v == 2 then\n\t\t\t\t\tstr = \"Two\"\n\t\t\t\telseif\
    \ v == 3 then\n\t\t\t\t\tstr = \"Three\"\n\t\t\t\telseif v == 4 then\n\t\t\t\t\
    \tstr = \"Four\"\n\t\t\t\telseif v == 5 then\n\t\t\t\t\tstr = \"Five\"\n\t\t\t\
    \telseif v == 6 then\n\t\t\t\t\tstr = \"Six\"\n\t\t\t\telseif v == 7 then\n\t\t\
    \t\t\tstr = \"Seven\"\n\t\t\t\telseif v == 8 then\n\t\t\t\t\tstr = \"Eight\"\n\
    \t\t\t\telseif v == 9 then\n\t\t\t\t\tstr = \"Nine\"\n\t\t\t\tend\n\t\t\t\ttable.insert(answer,\
    \ str)\n\t\t\tend\n\t\tend\n\t\ttable.sort(answer)\n\t\tlocal newAnswer = {}\n\
    \t\tfor i = #answer, 1, -1 do\n\t\t\ttable.insert(newAnswer, answer[i])\n\t\t\
    end\n\t\treturn newAnswer\n\tend\n\treturn answer\nend", "    local aux = {}\n\
    \    for i = 1, #arr do\n        if 1 <= arr[i] and arr[i] <= 9 then\n       \
    \     table.insert(aux, arr[i])\n        end\n    end\n    table.sort(aux)\n \
    \   for i = 1, #aux do\n        aux[i] = num[aux[i]]\n    end\n    local res =\
    \ {}\n    for i = #aux, 1, -1 do\n        table.insert(res, aux[i])\n    end\n\
    \    return res\nend", "\tarr = filter(arr, function(x)\n\t\treturn x > 0 and\
    \ x < 10\n\tend)\n\tarr = map(arr, function(x)\n\t\tif x == 1 then\n\t\t\treturn\
    \ \"One\"\n\t\telseif x == 2 then\n\t\t\treturn \"Two\"\n\t\telseif x == 3 then\n\
    \t\t\treturn \"Three\"\n\t\telseif x == 4 then\n\t\t\treturn \"Four\"\n\t\telseif\
    \ x == 5 then\n\t\t\treturn \"Five\"\n\t\telseif x == 6 then\n\t\t\treturn \"\
    Six\"\n\t\telseif x == 7 then\n\t\t\treturn \"Seven\"\n\t\telseif x == 8 then\n\
    \t\t\treturn \"Eight\"\n\t\telseif x == 9 then\n\t\t\treturn \"Nine\"\n\t\tend\n\
    \tend)\n\treturn arr\nend", "    local map_digits = {\n        [1] = \"One\",\n\
    \        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n \
    \       [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n  \
    \      [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    local ret = {}\n \
    \   local i = 1\n    while i <= #arr do\n        if not map_digits[arr[i]] then\n\
    \            table.remove(arr, i)\n        else\n            i = i + 1\n     \
    \   end\n    end\n    table.sort(arr)\n    for i = #arr, 1, -1 do\n        table.insert(ret,\
    \ map_digits[arr[i]])\n    end\n    return ret\nend", "  arr = arr or {}\n  local\
    \ res = {}\n  local s = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n  for _, i in ipairs(arr) do\n    if 1 <= i\
    \ and i <= 9 then\n      table.insert(res, s[i])\n    end\n  end\n  table.sort(res,\
    \ function(a, b) return #a > #b end)\n  return res\nend", end, "  local tbl =\
    \ {}\n  if #arr == 0 then\n    return tbl\n  end\n  for i = 1, #arr do\n    if\
    \ arr[i] > 0 and arr[i] < 10 then\n      tbl[#tbl + 1] = arr[i]\n    end\n  end\n\
    \  table.sort(tbl)\n  for i = 1, #tbl do\n    tbl[i] = words[tbl[i]]\n  end\n\
    \  return tbl\nend", "    local result = {}\n    local mapping = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    local tmp\
    \ = {}\n    for k, v in pairs(arr) do\n        if v > 0 and v < 10 then\n    \
    \        table.insert(tmp, v)\n        end\n    end\n    table.sort(tmp)\n   \
    \ for k, v in pairs(tmp) do\n        table.insert(result, 1, mapping[v])\n   \
    \ end\n    return result\nend", "    local dict = {1,2,3,4,5,6,7,8,9}\n    local\
    \ dict_key = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    local res = {}\n    for i = 1, #arr do\n        for j = 1, #dict\
    \ do\n            if arr[i] == dict[j] then\n                table.insert(res,\
    \ dict_key[j])\n            end\n        end\n    end\n    table.sort(res)\n \
    \   for i = 1, #res / 2 do\n        res[i], res[#res - i + 1] = res[#res - i +\
    \ 1], res[i]\n    end\n    return res\nend", "    local replace = {\n        [1]\
    \ = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] =\
    \ \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"\
    Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    local arr_sort\
    \ = {}\n    for k, v in pairs(arr) do\n        if v >= 1 and v <= 9 then\n   \
    \         table.insert(arr_sort, v)\n        end\n    end\n    table.sort(arr_sort)\n\
    \    for k, v in pairs(arr_sort) do\n        arr_sort[k] = replace[v]\n    end\n\
    \    return arr_sort\nend", "    local count = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(count, v)\n \
    \       end\n    end\n    table.sort(count)\n    for i, v in ipairs(count) do\n\
    \        count[i] = DIGITS[v]\n    end\n    table.reverse(count)\n    return count\n\
    end", "    local a, b, c, d, e, f, g, h, i = {}, {}, {}, {}, {}, {}, {}, {}, {}\n\
    \    local arr2 = {}\n    local res = {}\n    local len1 = #arr\n    local len2\
    \ = 0\n    for i = 1, len1 do\n        if arr[i] > 0 and arr[i] < 10 then\n  \
    \          local num = arr[i]\n            table.insert(arr2, num)\n        end\n\
    \    end\n    len2 = #arr2\n    for i = 1, len2 do\n        local num = arr2[i]\n\
    \        if num == 1 then\n            table.insert(a, 1)\n        elseif num\
    \ == 2 then\n            table.insert(b, 2)\n        elseif num == 3 then\n  \
    \          table.insert(c, 3)\n        elseif num == 4 then\n            table.insert(d,\
    \ 4)\n        elseif num == 5 then\n            table.insert(e, 5)\n        elseif\
    \ num == 6 then\n            table.insert(f, 6)\n        elseif num == 7 then\n\
    \            table.insert(g, 7)\n        elseif num == 8 then\n            table.insert(h,\
    \ 8)\n        elseif num == 9 then\n            table.insert(i, 9)\n        end\n\
    \    end\n    len1 = #a\n    for i = 1, len1 do\n        table.insert(res, \"\
    One\")\n    end\n    len1 = #b\n    for i = 1, len1 do\n        table.insert(res,\
    \ \"Two\")\n    end\n    len1 = #c\n    for i = 1, len1 do\n        table.insert(res,\
    \ \"Three\")\n    end\n    len1 = #d\n    for i = 1, len1 do\n        table.insert(res,\
    \ \"Four\")\n    end\n    len1 = #e\n    for i = 1, len1 do\n        table.insert(res,\
    \ \"Five\")\n    end\n    len1 = #f\n    for i = 1, len1 do\n        table.insert(res,\
    \ \"Six\")\n    end\n    len1 = #g\n    for i =", "    local index, result = 1,\
    \ {}\n    for _, value in pairs(arr) do\n        if value >= 1 and value <= 9\
    \ then\n            result[index] = value\n            index = index + 1\n   \
    \     end\n    end\n    if #result == 0 then\n        return {}\n    end\n   \
    \ table.sort(result)\n    index = 1\n    for _, value in pairs(result) do\n  \
    \      if value == 1 then\n            result[index] = \"One\"\n        elseif\
    \ value == 2 then\n            result[index] = \"Two\"\n        elseif value ==\
    \ 3 then\n            result[index] = \"Three\"\n        elseif value == 4 then\n\
    \            result[index] = \"Four\"\n        elseif value == 5 then\n      \
    \      result[index] = \"Five\"\n        elseif value == 6 then\n            result[index]\
    \ = \"Six\"\n        elseif value == 7 then\n            result[index] = \"Seven\"\
    \n        elseif value == 8 then\n            result[index] = \"Eight\"\n    \
    \    elseif value == 9 then\n            result[index] = \"Nine\"\n        end\n\
    \        index = index + 1\n    end\n    return result\nend", "  if arr == nil\
    \ then return {} end\n  local a = table.sort(arr)\n  local b = table.reverse(a)\n\
    \  local res = {}\n  for i=1,#b do\n    if b[i] == 1 then\n      table.insert(res,\
    \ \"One\")\n    elseif b[i] == 2 then\n      table.insert(res, \"Two\")\n    elseif\
    \ b[i] == 3 then\n      table.insert(res, \"Three\")\n    elseif b[i] == 4 then\n\
    \      table.insert(res, \"Four\")\n    elseif b[i] == 5 then\n      table.insert(res,\
    \ \"Five\")\n    elseif b[i] == 6 then\n      table.insert(res, \"Six\")\n   \
    \ elseif b[i] == 7 then\n      table.insert(res, \"Seven\")\n    elseif b[i] ==\
    \ 8 then\n      table.insert(res, \"Eight\")\n    elseif b[i] == 9 then\n    \
    \  table.insert(res, \"Nine\")\n    end\n  end\n  return res\nend", "  if #arr\
    \ == 0 then\n    return {}\n  end\n  local result = {}\n  local words = {'Zero',\
    \ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      result[#result +\
    \ 1] = words[v + 1]\n    end\n  end\n  quick_sort(result, 1, #result)\n  local\
    \ ret = {}\n  for i = #result, 1, -1 do\n    ret[#ret + 1] = result[i]\n  end\n\
    \  return ret\nend", "\tlocal dict = {One = 1, Two = 2, Three = 3, Four = 4, Five\
    \ = 5, Six = 6, Seven = 7, Eight = 8, Nine = 9}\n\tlocal sort_by_dict = function(a,\
    \ b)\n\t\treturn dict[a] < dict[b]\n\tend\n\tlocal res = {}\n\tfor _, v in ipairs(arr)\
    \ do\n\t\tif v >= 1 and v <= 9 then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\
    \ttable.sort(res)\n\tlocal rev = {}\n\tfor i = #res, 1, -1 do\n\t\ttable.insert(rev,\
    \ tostring(res[i]))\n\tend\n\ttable.sort(rev, sort_by_dict)\n\tfor i, v in ipairs(rev)\
    \ do\n\t\trev[i] = dict[v]\n\tend\n\treturn rev\nend", "    local new = arr or\
    \ {}\n    for i=1, #new do\n        if new[i] < 1 or new[i] > 9 then\n       \
    \     table.remove(new, i)\n        end\n    end\n    table.sort(new)\n    new\
    \ = reverse(new)\n    local words = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n    for i=1, #new do\n        new[i] = words[new[i]]\n\
    \    end\n    return new\nend", "  -- your code here\n  local tbl = {}\n  local\
    \ numbers = {[1] = \"One\", [2] = \"Two\", [3] = \"Three\", [4] = \"Four\", [5]\
    \ = \"Five\", [6] = \"Six\", [7] = \"Seven\", [8] = \"Eight\", [9] = \"Nine\"\
    }\n  for k, v in pairs(arr) do\n  \tif numbers[v] ~= nil then\n  \t\ttable.insert(tbl,\
    \ numbers[v])\n  \tend\n  end\n  table.sort(tbl)\n  local tbl2 = {}\n  for i=#tbl,\
    \ 1, -1 do\n  \ttable.insert(tbl2, tbl[i])\n  end\n  return tbl2\nend", "    --\
    \ return {}\n    local newarr = {}\n    local MapToStr = {\n        [1] = \"One\"\
    ,\n        [2] = \"Two\",\n        [3] = \"Three\",\n        [4] = \"Four\",\n\
    \        [5] = \"Five\",\n        [6] = \"Six\",\n        [7] = \"Seven\",\n \
    \       [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n    for k, v in pairs(arr)\
    \ do\n        if type(v) == \"number\" and v > 0 and v < 10 then\n           \
    \ table.insert(newarr, v)\n        end\n    end\n    table.sort(newarr)\n    for\
    \ k, v in pairs(newarr) do\n        newarr[k] = MapToStr[v]\n    end\n    return\
    \ newarr\nend", "    -- Check if arr is not a table\n    if type(arr) ~= 'table'\
    \ then\n        return nil\n    end\n    -- Check if arr is empty\n    if not\
    \ next(arr) then\n        return {}\n    end\n    -- Sort the array\n    table.sort(arr)\n\
    \    -- Reverse the array\n    for i=1, math.floor(#arr / 2) do\n        arr[i],\
    \ arr[#arr - i + 1] = arr[#arr - i + 1], arr[i]\n    end\n    -- Numbers to words\n\
    \    local words = {\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'\n    }\n    -- Transform each element of arr\n    for i, v in\
    \ ipairs(arr) do\n        -- Not sure why it's not return nil when arr[i] > 9\n\
    \        if arr[i] > 9 then\n            return nil\n        end\n        arr[i]\
    \ = words[arr[i]]\n    end\n    return arr\nend", "    -- your code here\n   \
    \ -- ...\n    table.sort(arr)\n    local res = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(res, tostring(v))\n\
    \        end\n    end\n    table.sort(res, function(a, b) return #a > #b end)\n\
    \    local dict = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    local result = {}\n    for _, v in ipairs(res) do\n        table.insert(result,\
    \ dict[tonumber(v)])\n    end\n    return result\nend", "    local map = {\n \
    \       [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n   \
    \     [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n     \
    \   [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    local new_arr = {}\n    for _, el in ipairs(arr) do\n        if el >= 1 and\
    \ el <= 9 then\n            table.insert(new_arr, el)\n        end\n    end\n\
    \    table.sort(new_arr)\n    local ans = {}\n    for i = #new_arr, 1, -1 do\n\
    \        table.insert(ans, map[new_arr[i]])\n    end\n    return ans\nend", " \
    \  local result = {}\n   local map = {'One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'}\n   for _, v in ipairs(arr) do\n      if (v > 0 and\
    \ v < 10) then\n         table.insert(result, map[v])\n      end\n   end\n   table.sort(result)\n\
    \   table.reverse(result)\n   return result\nend", "\t-- your code goes here\n\
    \tlocal ints = {}\n\tlocal res = {}\n\tlocal d = {\n\t\t[1] = \"One\",\n\t\t[2]\
    \ = \"Two\",\n\t\t[3] = \"Three\",\n\t\t[4] = \"Four\",\n\t\t[5] = \"Five\",\n\
    \t\t[6] = \"Six\",\n\t\t[7] = \"Seven\",\n\t\t[8] = \"Eight\",\n\t\t[9] = \"Nine\"\
    \n\t}\n\tfor i, v in ipairs(arr) do\n\t\tif (v < 10 and v > 0) then\n\t\t\ttable.insert(ints,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(ints)\n\tfor i, v in ipairs(ints) do\n\t\t\
    table.insert(res, 1, d[v])\n\tend\n\treturn res\nend", "    -- Your code here\n\
    \    local en = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"}\n    local r = {}\n    for i,v in ipairs(arr) do\n\
    \        if v>=1 and v<=9 then\n            table.insert(r, v)\n        end\n\
    \    end\n    table.sort(r)\n    for i,v in ipairs(r) do\n        r[i] = en[v]\n\
    \    end\n    return r\nend", "  return {}\nend", "  -- TODO: implement by_length\n\
    \  local new_arr = {}\n  local dict = {\n    [1] = \"One\",\n    [2] = \"Two\"\
    ,\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"\
    Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n  }\n\
    \  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(new_arr,\
    \ arr[i])\n    end\n  end\n  table.sort(new_arr)\n  for i = 1, #new_arr do\n \
    \   new_arr[i] = dict[new_arr[i]]\n  end\n  return new_arr\nend", "    local sz\
    \ = #arr\n    if sz <= 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    local function less_than(a, b)\n        if a < b then\n            return\
    \ true\n        end\n        return false\n    end\n    local function greater_than(a,\
    \ b)\n        if a > b then\n            return true\n        end\n        return\
    \ false\n    end\n    local tbl = {}\n    for i = 1, sz do\n        if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n            table.insert(tbl, arr[i])\n        end\n\
    \    end\n    table.sort(tbl, less_than)\n    for i = 1, #tbl do\n        table.insert(result,\
    \ english_num[tbl[i]])\n    end\n    for i = 1, #tbl do\n        table.remove(tbl)\n\
    \    end\n    tbl = result\n    table.sort(tbl, greater_than)\n    for i = 1,\
    \ #tbl do\n        table.insert(result, tbl[i])\n    end\n    return result\n\
    end", "    local a = {}\n    for _, v in ipairs(arr) do\n        if v <= 9 and\
    \ v >= 1 then\n            table.insert(a, v)\n        end\n    end\n    table.sort(a)\n\
    \    local b = {}\n    for _, v in ipairs(a) do\n        table.insert(b, 1, v)\n\
    \    end\n    local c = {}\n    for _, v in ipairs(b) do\n        if v == 1 then\n\
    \            table.insert(c, \"One\")\n        elseif v == 2 then\n          \
    \  table.insert(c, \"Two\")\n        elseif v == 3 then\n            table.insert(c,\
    \ \"Three\")\n        elseif v == 4 then\n            table.insert(c, \"Four\"\
    )\n        elseif v == 5 then\n            table.insert(c, \"Five\")\n       \
    \ elseif v == 6 then\n            table.insert(c, \"Six\")\n        elseif v ==\
    \ 7 then\n            table.insert(c, \"Seven\")\n        elseif v == 8 then\n\
    \            table.insert(c, \"Eight\")\n        elseif v == 9 then\n        \
    \    table.insert(c, \"Nine\")\n        end\n    end\n    return c\nend", "  \
    \  -- your code here\n    -- todo: \u5BF9\u539F\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\
    \n    -- todo: \u53CD\u8F6C\u539F\u6570\u7EC4\n    -- todo: \u8F6C\u6362\n   \
    \ -- todo: \u5904\u7406\u975E1-9\u7684\u6570\nend", "  if #arr == 0 then return\
    \ arr end\n  table.sort(arr)\n  local words = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local res = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] >= 1 and arr[i] <= 9 then\n      table.insert(res, words[arr[i]])\n\
    \    end\n  end\n  return array_reverse(res)\nend", "    -- YOUR CODE HERE\n \
    \   local result = {}\n    for i, e in ipairs(arr) do\n        if (e >= 1 and\
    \ e <= 9) then\n            result[i] = e\n        end\n    end\n    table.sort(result)\n\
    \    for i, e in ipairs(result) do\n        result[i] = array[e]\n    end\n  \
    \  return result\nend", "    local res = {}\n    local names = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  \
    \  for i, e in ipairs(arr) do\n        if e > 0 and e < 10 then\n            res[#res\
    \ + 1] = names[e]\n        end\n    end\n    return res\nend", "    local rtn\
    \ = {}\n    for _, i in ipairs(arr) do\n        if i >= 1 and i <= 9 then\n  \
    \          rtn[#rtn + 1] = i\n        end\n    end\n    table.sort(rtn)\n    for\
    \ i = 1, #rtn do\n        rtn[i] = num2word[rtn[i]]\n    end\n    return rtn\n\
    end", "    local function count_by_length()\n        local length_result = {}\n\
    \        local count = 0\n        for _, n in ipairs(arr) do\n            if n\
    \ >= 1 and n <= 9 then\n                count = count + 1\n                table.insert(length_result,\
    \ n)\n            end\n        end\n        return length_result, count\n    end",
  "  local a = {}\n  for i = 1,#arr do\n    local x = arr[i]\n    if x >= 1 and x\
    \ <= 9 then\n      a[#a+1] = x\n    end\n  end\n  if #a == 0 then\n    return\
    \ {}\n  end\n  qsort(a,1,#a)\n  for i = 1,#a do\n    a[i] = numbers[a[i]]\n  end\n\
    \  return a\nend", "  local result = {}\n  local numbers = {\n    'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n  }\n  for _,v in\
    \ ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(result, numbers[v])\n\
    \    end\n  end\n  table.sort(result)\n  table.reverse(result)\n  return result\n\
    end", "\t-- Write your code here\n\ttable.sort(arr)\n\tlocal reversed_arr = {}\n\
    \tfor i, v in ipairs(arr) do\n\t\tif v > 0 and v < 10 then\n\t\t\ttable.insert(reversed_arr,\
    \ v)\n\t\tend\n\tend\n\tfor i, v in ipairs(reversed_arr) do\n\t\tif v == 1 then\n\
    \t\t\treversed_arr[i] = \"One\"\n\t\telseif v == 2 then\n\t\t\treversed_arr[i]\
    \ = \"Two\"\n\t\telseif v == 3 then\n\t\t\treversed_arr[i] = \"Three\"\n\t\telseif\
    \ v == 4 then\n\t\t\treversed_arr[i] = \"Four\"\n\t\telseif v == 5 then\n\t\t\t\
    reversed_arr[i] = \"Five\"\n\t\telseif v == 6 then\n\t\t\treversed_arr[i] = \"\
    Six\"\n\t\telseif v == 7 then\n\t\t\treversed_arr[i] = \"Seven\"\n\t\telseif v\
    \ == 8 then\n\t\t\treversed_arr[i] = \"Eight\"\n\t\telseif v == 9 then\n\t\t\t\
    reversed_arr[i] = \"Nine\"\n\t\tend\n\tend\n\treturn reversed_arr\nend", "   \
    \ if type(arr) ~= 'table' then\n        return 'by_length() only accepts an array\
    \ of numbers'\n    end\n    local newArr = {}\n    local nums = {}\n    local\
    \ words = {}\n    local mymap = {\n        One = 1,\n        Two = 2,\n      \
    \  Three = 3,\n        Four = 4,\n        Five = 5,\n        Six = 6,\n      \
    \  Seven = 7,\n        Eight = 8,\n        Nine = 9\n    }\n    -- Seperate number\
    \ from words\n    for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n\
    \            nums[#nums + 1] = v\n        else\n            words[#words + 1]\
    \ = v\n        end\n    end\n    table.sort(nums)\n    for i = #nums, 1, -1 do\n\
    \        newArr[#newArr + 1] = mymap[nums[i]]\n    end\n    for i, v in ipairs(words)\
    \ do\n        newArr[#newArr + 1] = v\n    end\n    return newArr\nend", "  local\
    \ function compare(a, b)\n    return #a > #b\n  end\n  table.sort(arr, compare)\n\
    \  local ret = {}\n  for _, v in ipairs(arr) do\n    if v >= 1 and v <= 9 then\n\
    \      table.insert(ret, v)\n    end\n  end\n  for i = 1, #ret / 2 do\n    ret[i],\
    \ ret[#ret - i + 1] = ret[#ret - i + 1], ret[i]\n  end\n  for i, v in ipairs(ret)\
    \ do\n    if v == 1 then\n      ret[i] = \"One\"\n    elseif v == 2 then\n   \
    \   ret[i] = \"Two\"\n    elseif v == 3 then\n      ret[i] = \"Three\"\n    elseif\
    \ v == 4 then\n      ret[i] = \"Four\"\n    elseif v == 5 then\n      ret[i] =\
    \ \"Five\"\n    elseif v == 6 then\n      ret[i] = \"Six\"\n    elseif v == 7\
    \ then\n      ret[i] = \"Seven\"\n    elseif v == 8 then\n      ret[i] = \"Eight\"\
    \n    elseif v == 9 then\n      ret[i] = \"Nine\"\n    end\n  end\n  return ret\n\
    end", "    if table.getn(arr) == 0 then\n        return arr\n    end\n    local\
    \ numbers = {'', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    local new_arr = {}\n    for i, v in ipairs(arr) do\n        if\
    \ v >= 1 and v <= 9 then\n            table.insert(new_arr, numbers[v + 1])\n\
    \        end\n    end\n    table.sort(new_arr)\n    return new_arr\nend", "  \
    \  -- your code here\nend", "\tlocal function n2s(n)\n\t\tlocal names = { \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    \ }\n\t\tif (n < 1) or (n > 9) then\n\t\t\treturn nil\n\t\tend\n\t\treturn names[n]\n\
    \tend\n\tlocal result = {}\n\tfor _,v in ipairs(arr) do\n\t\tif (v >= 1) and (v\
    \ <= 9) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \tfor i = 1, math.floor(#result / 2) do\n\t\tlocal tmp = result[i]\n\t\tresult[i]\
    \ = result[#result - i + 1]\n\t\tresult[#result - i + 1] = tmp\n\tend\n\tfor i\
    \ = 1, #result do\n\t\tresult[i] = n2s(result[i])\n\tend\n\treturn result\nend",
  "  if #arr == 0 then return {}; end\n  local res = {};\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      res[#res + 1] = v;\n    end\n  end\n\
    \  table.sort(res);\n  local len = #res;\n  for i = 1, len do\n    res[i] = res[len\
    \ - i + 1];\n  end\n  for i = 1, len do\n    if res[i] == 1 then res[i] = \"One\"\
    ;\n    elseif res[i] == 2 then res[i] = \"Two\";\n    elseif res[i] == 3 then\
    \ res[i] = \"Three\";\n    elseif res[i] == 4 then res[i] = \"Four\";\n    elseif\
    \ res[i] == 5 then res[i] = \"Five\";\n    elseif res[i] == 6 then res[i] = \"\
    Six\";\n    elseif res[i] == 7 then res[i] = \"Seven\";\n    elseif res[i] ==\
    \ 8 then res[i] = \"Eight\";\n    elseif res[i] == 9 then res[i] = \"Nine\";\n\
    \    end\n  end\n  return res;\nend", "  local dgts = {9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1}\n  local function f(a, b)\n    if a > 9 or a < 1 then\n      return false\n\
    \    elseif b > 9 or b < 1 then\n      return false\n    else\n      return dgts[a]\
    \ < dgts[b]\n    end\n  end\n  table.sort(arr, f)\n  for i, v in ipairs(arr) do\n\
    \    if v > 9 or v < 1 then\n      table.remove(arr, i)\n    else\n      arr[i]\
    \ = nums[v]\n    end\n  end\n  return arr\nend", "  -- body\n  arr =table.sort(arr)\n\
    \  table.reverse(arr)\n  local newarr = {}\n  for i,v in ipairs(arr) do\n    if\
    \ v == 1 then\n      table.insert(newarr,\"One\")\n    elseif v == 2 then\n  \
    \    table.insert(newarr,\"Two\")\n    elseif v == 3 then\n      table.insert(newarr,\"\
    Three\")\n    elseif v == 4 then\n      table.insert(newarr,\"Four\")\n    elseif\
    \ v == 5 then\n      table.insert(newarr,\"Five\")\n    elseif v == 6 then\n \
    \     table.insert(newarr,\"Six\")\n    elseif v == 7 then\n      table.insert(newarr,\"\
    Seven\")\n    elseif v == 8 then\n      table.insert(newarr,\"Eight\")\n    elseif\
    \ v == 9 then\n      table.insert(newarr,\"Nine\")\n    end\n  end\n  return newarr\n\
    end", "    local sorted = {}\n    for _, v in ipairs(arr) do\n        if v > 0\
    \ and v < 10 then\n            table.insert(sorted, v)\n        end\n    end\n\
    \    table.sort(sorted)\n    for i = 1, #sorted / 2 do\n        sorted[i], sorted[#sorted\
    \ - i + 1] = sorted[#sorted - i + 1], sorted[i]\n    end\n    local result = {}\n\
    \    for _, v in ipairs(sorted) do\n        table.insert(result, tostring(v))\n\
    \    end\n    return result\nend", "\tlocal mapped_number = {\n\t\t[\"1\"] = \"\
    One\",\n\t\t[\"2\"] = \"Two\",\n\t\t[\"3\"] = \"Three\",\n\t\t[\"4\"] = \"Four\"\
    ,\n\t\t[\"5\"] = \"Five\",\n\t\t[\"6\"] = \"Six\",\n\t\t[\"7\"] = \"Seven\",\n\
    \t\t[\"8\"] = \"Eight\",\n\t\t[\"9\"] = \"Nine\"\n\t}\n\tlocal new_arr = {}\n\t\
    local function map_number(v)\n\t\treturn mapped_number[tostring(v)]\n\tend\n\t\
    local function is_strange_number(v)\n\t\treturn v > 0 and v < 10\n\tend\n\tfor\
    \ _,v in ipairs(arr) do\n\t\tif is_strange_number(v) then\n\t\t\ttable.insert(new_arr,\
    \ map_number(v))\n\t\tend\n\tend\n\treturn new_arr\nend", "  local out = {}\n\
    \  local c = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n  local n = {}\n  local j = 1\n  for i=1, #arr do\n    if (arr[i]>=1\
    \ and arr[i]<=9) then\n      n[j] = arr[i]\n      j = j + 1\n    end\n  end\n\
    \  for i=1, #n do\n    for j=1, #n-1 do\n      if (n[j] > n[j+1]) then\n     \
    \   local aux = n[j]\n        n[j] = n[j+1]\n        n[j+1] = aux\n      end\n\
    \    end\n  end\n  for i=#n, 1, -1 do\n    out[#out+1] = c[n[i]]\n  end\n  return\
    \ out\nend", "  if #arr == 0 then\n    return {}\n  end\n  local nums = {}\n \
    \ local words = {}\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n\
    \      table.insert(nums, arr[i])\n    end\n  end\n  table.sort(nums)\n  for i\
    \ = #nums, 1, -1 do\n    if nums[i] == 1 then\n      table.insert(words, \"One\"\
    )\n    elseif nums[i] == 2 then\n      table.insert(words, \"Two\")\n    elseif\
    \ nums[i] == 3 then\n      table.insert(words, \"Three\")\n    elseif nums[i]\
    \ == 4 then\n      table.insert(words, \"Four\")\n    elseif nums[i] == 5 then\n\
    \      table.insert(words, \"Five\")\n    elseif nums[i] == 6 then\n      table.insert(words,\
    \ \"Six\")\n    elseif nums[i] == 7 then\n      table.insert(words, \"Seven\"\
    )\n    elseif nums[i] == 8 then\n      table.insert(words, \"Eight\")\n    elseif\
    \ nums[i] == 9 then\n      table.insert(words, \"Nine\")\n    end\n  end\n  return\
    \ words\nend", "  local len = #arr\n  for i = 1, len-1 do\n    for j = i+1, len\
    \ do\n      if (arr[i] > arr[j]) then\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \      end\n    end\n  end\n  local str_arr = {}\n  for i = len, 1, -1 do\n  \
    \  if (arr[i] == 1) then\n      table.insert(str_arr, \"One\")\n    elseif (arr[i]\
    \ == 2) then\n      table.insert(str_arr, \"Two\")\n    elseif (arr[i] == 3) then\n\
    \      table.insert(str_arr, \"Three\")\n    elseif (arr[i] == 4) then\n     \
    \ table.insert(str_arr, \"Four\")\n    elseif (arr[i] == 5) then\n      table.insert(str_arr,\
    \ \"Five\")\n    elseif (arr[i] == 6) then\n      table.insert(str_arr, \"Six\"\
    )\n    elseif (arr[i] == 7) then\n      table.insert(str_arr, \"Seven\")\n   \
    \ elseif (arr[i] == 8) then\n      table.insert(str_arr, \"Eight\")\n    elseif\
    \ (arr[i] == 9) then\n      table.insert(str_arr, \"Nine\")\n    end\n  end\n\
    \  return str_arr\nend", "    -- write your code here\n    local sorted_numbers\
    \ = {}\n    local res = {}\n    local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _,v in ipairs(arr) do\n  \
    \      if v >= 1 and v <= 9 then\n            table.insert(sorted_numbers, v)\n\
    \        end\n    end\n    table.sort(sorted_numbers)\n    for i = #sorted_numbers,\
    \ 1, -1 do\n        table.insert(res, numbers[sorted_numbers[i]])\n    end\n \
    \   return res\nend", "    if arr == nil then return arr end\n    local mapping\
    \ = {[1]=\"One\", [2]=\"Two\", [3]=\"Three\", [4]=\"Four\", [5]=\"Five\", [6]=\"\
    Six\", [7]=\"Seven\", [8]=\"Eight\", [9]=\"Nine\"}\n    local result = {}\n  \
    \  for _,v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ mapping[v])\n        end\n    end\n    return result\nend", '    table.sort(arr)',
  "    local ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE = 'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    local dict = {[1]\
    \ = ONE, [2] = TWO, [3] = THREE, [4] = FOUR, [5] = FIVE, [6] = SIX, [7] = SEVEN,\
    \ [8] = EIGHT, [9] = NINE}\n    local result = {}\n    for _,v in ipairs(arr)\
    \ do\n        if v >= 1 and v <= 9 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    local res = {}\n    for i =\
    \ #result, 1, -1 do\n        table.insert(res, dict[result[i]])\n    end\n   \
    \ return res\nend", '    if #arr == 0 then return {} end', "  local num_names\
    \ = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"}\n  local new_arr = {}\n  local new_arr_rev = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(new_arr, v)\n    end\n\
    \  end\n  table.sort(new_arr)\n  for i, v in ipairs(new_arr) do\n    table.insert(new_arr_rev,\
    \ 1, v)\n  end\n  for i, v in ipairs(new_arr_rev) do\n    new_arr_rev[i] = num_names[v]\n\
    \  end\n  return new_arr_rev\nend", "    local t = {}\n    local names = {\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }\n    for i, v in ipairs(arr) do\n        if v > 0 and v < 10 then\n        \
    \    table.insert(t, v)\n        end\n    end\n    table.sort(t)\n    for i, v\
    \ in ipairs(t) do\n        t[i] = names[v]\n    end\n    table.reverse(t)\n  \
    \  return t\nend", "    return {}\nend", "    local out = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 and arr[i] < 10 then\n            table.insert(out,\
    \ arr[i])\n        end\n    end\n    table.sort(out)\n    for i = 1, #out do\n\
    \        out[i] = get_number_name(out[i])\n    end\n    return out\nend", "  \
    \  local arr_sorted = {}\n    local arr_reversed = {}\n    local res = {}\n  \
    \  local words = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n        if v <\
    \ 10 and v > 0 then\n            table.insert(arr_sorted, v)\n        end\n  \
    \  end\n    table.sort(arr_sorted)\n    for i, v in ipairs(arr_sorted) do\n  \
    \      arr_reversed[#arr_sorted - i + 1] = v\n    end\n    for i, v in ipairs(arr_reversed)\
    \ do\n        table.insert(res, words[v])\n    end\n    return res\nend", "  \
    \  local reversedArr = {}\n    for i = 1, #arr do\n        reversedArr[#arr +\
    \ 1 - i] = arr[i]\n    end\n    local numbers = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local output = {}\n    for i =\
    \ 1, #reversedArr do\n        local number = reversedArr[i]\n        if number\
    \ >= 1 and number <= 9 then\n            table.insert(output, numbers[number])\n\
    \        end\n    end\n    return output\nend", "\tlocal function cmp(a, b) return\
    \ a < b end\n\tlocal function cmp_str(a, b) return string.len(a) < string.len(b)\
    \ end\n\t-- arr = arr:filter(n => is_between(n, 1, 9))\n\tlocal filter = function(f,\
    \ arr)\n\t\tlocal tbl = {}\n\t\tfor _, v in ipairs(arr) do\n\t\t\tif f(v) then\
    \ table.insert(tbl, v) end\n\t\tend\n\t\treturn tbl\n\tend\n\tlocal is_between\
    \ = function(n, a, b)\n\t\treturn n >= a and n <= b\n\tend\n\tarr = filter(function(n)\
    \ return is_between(n, 1, 9) end, arr)\n\ttable.sort(arr, cmp)\n\tlocal res =\
    \ {}\n\tfor i = #arr, 1, -1 do\n\t\ttable.insert(res, arr[i])\n\tend\n\tlocal\
    \ replace = function(c)\n\t\tif c == 1 then return \"One\"\n\t\telseif c == 2\
    \ then return \"Two\"\n\t\telseif c == 3 then return \"Three\"\n\t\telseif c ==\
    \ 4 then return \"Four\"\n\t\telseif c == 5 then return \"Five\"\n\t\telseif c\
    \ == 6 then return \"Six\"\n\t\telseif c == 7 then return \"Seven\"\n\t\telseif\
    \ c == 8 then return \"Eight\"\n\t\telseif c == 9 then return \"Nine\"\n\t\tend\n\
    \tend\n\tfor i = 1, #res do\n\t\tres[i] = replace(res[i])\n\tend\n\treturn res\n\
    end", "\tlocal n = {}\n\tfor i = 1, #arr do\n\t\tif (arr[i] > 0 and arr[i] < 10)\
    \ then\n\t\t\tn[#n + 1] = arr[i]\n\t\tend\n\tend\n\treturn reverse(n)\nend", " \
    \ -- write your code here\nend", "\tlocal res = {}\n\tlocal dict = {\n\t\t[1]\
    \ = \"One\",\n\t\t[2] = \"Two\",\n\t\t[3] = \"Three\",\n\t\t[4] = \"Four\",\n\t\
    \t[5] = \"Five\",\n\t\t[6] = \"Six\",\n\t\t[7] = \"Seven\",\n\t\t[8] = \"Eight\"\
    ,\n\t\t[9] = \"Nine\"\n\t}\n\tfor i, v in ipairs(arr) do\n\t\tif v > 0 and v <\
    \ 10 then\n\t\t\ttable.insert(res, v)\n\t\tend\n\tend\n\ttable.sort(res)\n\tfor\
    \ i, v in ipairs(res) do\n\t\tres[i] = dict[v]\n\tend\n\tlocal i = 1\n\tlocal\
    \ j = #res\n\twhile i < j do\n\t\tres[i], res[j] = res[j], res[i]\n\t\ti = i +\
    \ 1\n\t\tj = j - 1\n\tend\n\treturn res\nend", "    local function normalize(n)\n\
    \        if n == 1 then return \"One\"\n        elseif n == 2 then return \"Two\"\
    \n        elseif n == 3 then return \"Three\"\n        elseif n == 4 then return\
    \ \"Four\"\n        elseif n == 5 then return \"Five\"\n        elseif n == 6\
    \ then return \"Six\"\n        elseif n == 7 then return \"Seven\"\n        elseif\
    \ n == 8 then return \"Eight\"\n        elseif n == 9 then return \"Nine\"\n \
    \       else return nil\n        end\n    end\n    local ret = {}\n    for i =\
    \ 1, #arr do\n        local n = arr[i]\n        if n >= 1 and n <= 9 then\n  \
    \          ret[#ret + 1] = normalize(n)\n        end\n    end\n    return utils.reverse(ret)\n\
    end", "\tlocal t = {}\n\tfor _,v in ipairs(arr) do\n\t\tif v > 0 and v < 10 then\
    \ t[#t+1] = v end\n\tend\n\ttable.sort(t)\n\tlocal result = {}\n\tfor i=#t,1,-1\
    \ do\n\t\tlocal n = t[i]\n\t\tresult[#result+1] = nums[n]\n\tend\n\treturn result\n\
    end", "  local num_dict = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}\n  local new_arr = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 and arr[i] < 10 then\n      table.insert(new_arr, num_dict[arr[i]])\n\
    \    end\n  end\n  return new_arr\nend", "    local function swap(arr, i, j)\n\
    \        local tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n \
    \   end", "\tlocal ans = {}\n\tlocal words = {\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n\tlocal d = {}\n\t\
    for i, v in ipairs(arr) do\n\t\tif v >= 1 and v <= 9 then\n\t\t\tans[#ans + 1]\
    \ = v\n\t\tend\n\tend\n\ttable.sort(ans)\n\tfor i, v in ipairs(ans) do\n\t\td[#d\
    \ + 1] = words[v]\n\tend\n\treturn d\nend", "    if type(arr) ~= 'table' then\n\
    \        return arr\n    end\n    local int_table = {}\n    local res = {}\n \
    \   for i, v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n          \
    \  table.insert(int_table, v)\n        end\n    end\n    table.sort(int_table)\n\
    \    for i, v in ipairs(int_table) do\n        if v == 1 then\n            table.insert(res,\
    \ 'One')\n        elseif v == 2 then\n            table.insert(res, 'Two')\n \
    \       elseif v == 3 then\n            table.insert(res, 'Three')\n        elseif\
    \ v == 4 then\n            table.insert(res, 'Four')\n        elseif v == 5 then\n\
    \            table.insert(res, 'Five')\n        elseif v == 6 then\n         \
    \   table.insert(res, 'Six')\n        elseif v == 7 then\n            table.insert(res,\
    \ 'Seven')\n        elseif v == 8 then\n            table.insert(res, 'Eight')\n\
    \        elseif v == 9 then\n            table.insert(res, 'Nine')\n        end\n\
    \    end\n    local rev = {}\n    for i = #res, 1, -1 do\n        table.insert(rev,\
    \ res[i])\n    end\n    return rev\nend", "  local function sort(a, b)\n    return\
    \ #a < #b\n  end\n  local res = {}\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ and v < 10 then\n      res[#res + 1] = tostring(v)\n    end\n  end\n  table.sort(res,\
    \ sort)\n  for i, v in ipairs(res) do\n    res[i] = DICT[v]\n  end\n  return res\n\
    end", "    local dict = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}\n    local result = {}\n    local used = {}\n\
    \    for i = 1, 9 do used[i] = false end\n    for _, x in ipairs(arr) do\n   \
    \     if x < 1 or x > 9 then\n            goto continue\n        end\n       \
    \ used[x] = true\n    end\n    for i = 9, 1, -1 do\n        if used[i] then\n\
    \            table.insert(result, dict[i])\n        end\n    end\n    ::continue::\n\
    \    return result\nend", "    if #arr == 0 then\n        return {}\n    end\n\
    \    local res = {}\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i]\
    \ < 10 then\n            res[#res + 1] = arr[i]\n        end\n    end\n    table.sort(res)\n\
    \    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\
    \ \"Seven\", \"Eight\", \"Nine\"}\n    for i = 1, #res do\n        res[i] = names[res[i]]\n\
    \    end\n    return res\nend", "    local sorted = {}\n    local dt = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for i\
    \ = 1, #arr do\n        local digit = arr[i]\n        if digit >= 1 and digit\
    \ <= 9 then\n            sorted[#sorted + 1] = digit\n        end\n    end\n \
    \   table.sort(sorted)\n    for i = 1, #sorted do\n        sorted[i] = dt[sorted[i]]\n\
    \    end\n    return sorted\nend", "    local nums = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local res = {}\n    for i = 1,\
    \ #arr do\n        if (arr[i] >= 1 and arr[i] <= 9) then\n            res[#res\
    \ + 1] = nums[arr[i]]\n        end\n    end\n    quick_sort(res, function(a, b)\
    \ return #a > #b end)\n    return res\nend", "  local nums = {}\n  local text\
    \ = {}\n  local str = \"\"\n  for i,v in ipairs(arr) do\n    if v >= 1 and v <=\
    \ 9 then\n      nums[#nums+1] = v\n    end\n  end\n  for i,v in ipairs(nums) do\n\
    \    if v == 1 then str = \"One\" end\n    if v == 2 then str = \"Two\" end\n\
    \    if v == 3 then str = \"Three\" end\n    if v == 4 then str = \"Four\" end\n\
    \    if v == 5 then str = \"Five\" end\n    if v == 6 then str = \"Six\" end\n\
    \    if v == 7 then str = \"Seven\" end\n    if v == 8 then str = \"Eight\" end\n\
    \    if v == 9 then str = \"Nine\" end\n    text[#text+1] = str\n  end\n  return\
    \ text\nend", "    if #arr == 0 then return {} end\n    local keys = {'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    local tmp = {}\n\
    \    for i,v in ipairs(arr) do\n        if v > 0 and v < 10 then\n           \
    \ table.insert(tmp, keys[v])\n        end\n    end\n    table.sort(tmp)\n    return\
    \ tmp\nend", "  local function sort(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      local item = arr[i]\n      if type(item) == 'number' and item > 0\
    \ and item < 10 then\n        table.insert(tmp, item)\n      end\n    end\n  \
    \  table.sort(tmp)\n    return tmp\n  end\n  local function reverse(arr)\n   \
    \ local tmp = {}\n    for i = #arr, 1, -1 do\n      local item = arr[i]\n    \
    \  table.insert(tmp, item)\n    end\n    return tmp\n  end\n  local function replace(arr)\n\
    \    local tmp = {}\n    for i = 1, #arr do\n      local item = arr[i]\n     \
    \ if type(item) == 'number' and item > 0 and item < 10 then\n        local tmp_arr\
    \ = { 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' }\n\
    \        table.insert(tmp, tmp_arr[item])\n      end\n    end\n    return tmp\n\
    \  end\n  return replace(reverse(sort(arr)))\nend", "  local result = {}\n  for\
    \ _, n in ipairs(arr) do\n    if n > 0 and n < 10 then\n      table.insert(result,\
    \ n)\n    end\n  end\n  table.sort(result)\n  local words = {\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  for\
    \ i, n in ipairs(result) do\n    result[i] = words[n]\n  end\n  return result\n\
    end", "    local newArr = {}\n    if #arr == 0 then\n        return newArr\n \
    \   end\n    for i = 1, #arr do\n        if 1 <= arr[i] and arr[i] <= 9 then\n\
    \            table.insert(newArr, arr[i])\n        end\n    end\n    table.sort(newArr)\n\
    \    local str = \"OneTwoThreeFourFiveSixSevenEightNine\"\n    local idx = {1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9}\n    for i = 1, #newArr do\n        newArr[i] = string.sub(str,\
    \ idx[newArr[i]], idx[newArr[i]] + 4)\n    end\n    return newArr\nend", "   \
    \ local order = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    if (#arr == 0) then return {} end\n    local list = {}\n    for\
    \ i = 1, #arr do\n        if (arr[i] > 0 and arr[i] < 10) then\n            list[#list\
    \ + 1] = order[arr[i]]\n        end\n    end\n    if (#list == 0) then return\
    \ {} end\n    table.sort(list)\n    local result = {}\n    for i = #list, 1, -1\
    \ do\n        result[#result + 1] = list[i]\n    end\n    return result\nend",
  "  local sorted = {}\n  local i = 1\n  for j = 1, #arr do\n    if arr[j] > 0 and\
    \ arr[j] < 10 then\n      sorted[i] = arr[j]\n      i = i + 1\n    end\n  end\n\
    \  table.sort(sorted)\n  local res = {}\n  for j = 1, #sorted do\n    res[j] =\
    \ arr_name[sorted[j]]\n  end\n  for i = 1, math.floor(#res / 2) do\n    res[i],\
    \ res[#res - i + 1] = res[#res - i + 1], res[i]\n  end\n  return res\nend", " \
    \ if #arr == 0 then return {} end\n  local s = {'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n  local d = {}\n  for _, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then table.insert(d, v) end\n  end\n  table.sort(d)\n\
    \  for i, v in ipairs(d) do\n    d[i] = s[v]\n  end\n  table.reverse(d)\n  return\
    \ d\nend", "  local function sort_numbers(x, y)\n    if x <= y then\n      return\
    \ true\n    else\n      return false\n    end\n  end\n  local numbers = {}\n \
    \ for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(numbers,\
    \ v)\n    end\n  end\n  table.sort(numbers, sort_numbers)\n  local result = {}\n\
    \  for i, v in ipairs(numbers) do\n    table.insert(result, 1, convert_to_word(v))\n\
    \  end\n  return result\nend", "    if #arr == 0 then\n        return arr\n  \
    \  end\n    table.sort(arr)\n    local new_arr = {}\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 and arr[i] < 10 then\n            table.insert(new_arr,\
    \ arr[i])\n        end\n    end\n    local res = {\"Nine\", \"Eight\", \"Seven\"\
    , \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"}\n    local res_arr\
    \ = {}\n    for i = 1, #new_arr do\n        table.insert(res_arr, res[new_arr[i]])\n\
    \    end\n    return res_arr\nend", "  -- your code here\n  -- Table temp to store\
    \ value number\n  local temp={}\n  -- Table to store result\n  local result={}\n\
    \  for i=1,#arr do\n    if arr[i]>=1 and arr[i]<=9 then\n      table.insert(temp,arr[i])\n\
    \    end\n  end\n  -- Sort array\n  table.sort(temp)\n  -- Reverse array\n  for\
    \ i=1,#temp do\n    if temp[i]==1 then\n      table.insert(result,\"One\")\n \
    \   elseif temp[i]==2 then\n      table.insert(result,\"Two\")\n    elseif temp[i]==3\
    \ then\n      table.insert(result,\"Three\")\n    elseif temp[i]==4 then\n   \
    \   table.insert(result,\"Four\")\n    elseif temp[i]==5 then\n      table.insert(result,\"\
    Five\")\n    elseif temp[i]==6 then\n      table.insert(result,\"Six\")\n    elseif\
    \ temp[i]==7 then\n      table.insert(result,\"Seven\")\n    elseif temp[i]==8\
    \ then\n      table.insert(result,\"Eight\")\n    elseif temp[i]==9 then\n   \
    \   table.insert(result,\"Nine\")\n    end\n  end\n  return result\nend", "  \
    \  local result = {}\n    local names = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 and v < 10 then\n            table.insert(result, v)\n\
    \        end\n    end\n    table.sort(result)\n    for i = 1, #result do\n   \
    \     result[i] = names[result[i]]\n    end\n    return result\nend", "    local\
    \ res = {}\n    local names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for i, v in ipairs(arr) do\n \
    \       if 1 <= v and v <= 9 then\n            res[#res + 1] = names[v]\n    \
    \    end\n    end\n    table.sort(res)\n    for i = 1, math.floor(#res / 2) do\n\
    \        res[i], res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n    return\
    \ res\nend", "    local result = {}\n    local words = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    for _,i in\
    \ ipairs(arr) do\n        if i > 0 and i < 10 then\n            table.insert(result,\
    \ words[i])\n        end\n    end\n    return result\nend", "  local result =\
    \ {}\n  local nums = {}\n  for i, v in ipairs(arr) do\n    if v <= 9 and v >=\
    \ 1 then\n      table.insert(nums, v)\n    end\n  end\n  table.sort(nums)\n  for\
    \ i, v in ipairs(nums) do\n    table.insert(result, names[v])\n  end\n  return\
    \ result\nend", "    --\n    -- your code here\n    --\n    local function sort_arr(arr)\n\
    \      for i=1,#arr do\n        for j=i+1,#arr do\n          if arr[i] < arr[j]\
    \ then\n            arr[i],arr[j] = arr[j],arr[i]\n          end\n        end\n\
    \      end\n      return arr\n    end\n    local function map_arr(arr)\n     \
    \ for i=1,#arr do\n        if arr[i] == 1 then\n          arr[i] = \"One\"\n \
    \       elseif arr[i] == 2 then\n          arr[i] = \"Two\"\n        elseif arr[i]\
    \ == 3 then\n          arr[i] = \"Three\"\n        elseif arr[i] == 4 then\n \
    \         arr[i] = \"Four\"\n        elseif arr[i] == 5 then\n          arr[i]\
    \ = \"Five\"\n        elseif arr[i] == 6 then\n          arr[i] = \"Six\"\n  \
    \      elseif arr[i] == 7 then\n          arr[i] = \"Seven\"\n        elseif arr[i]\
    \ == 8 then\n          arr[i] = \"Eight\"\n        elseif arr[i] == 9 then\n \
    \         arr[i] = \"Nine\"\n        end\n      end\n      return arr\n    end\n\
    \    local function filter_arr(arr)\n      local new_arr = {}\n      for i=1,#arr\
    \ do\n        if arr[i] >= 1 and arr[i] <= 9 then\n          table.insert(new_arr,arr[i])\n\
    \        end\n      end\n      return new_arr\n    end\n    local function reverse_arr(arr)\n\
    \      local new_arr = {}\n      for i=1,#arr do\n        table.insert(new_arr,1,arr[i])\n\
    \      end\n      return new_arr\n    end\n    local function change_arr(arr)\n\
    \      local new_arr = {}\n      for i=1,#arr do\n        if type(arr[i]) == \"\
    number\" then\n          table.insert(new_arr,arr[i])\n        end\n      end\n\
    \      return new_arr\n", "    -- your code here\nend", "  local function comp(a,\
    \ b)\n    return a < b\n  end\n  table.sort(arr, comp)\n  local new_arr = {}\n\
    \  for i = #arr, 1, -1 do\n    if 1 <= arr[i] and arr[i] <= 9 then\n      table.insert(new_arr,\
    \ arr[i])\n    end\n  end\n  for i = 1, #new_arr do\n    if new_arr[i] == 1 then\n\
    \      new_arr[i] = \"One\"\n    elseif new_arr[i] == 2 then\n      new_arr[i]\
    \ = \"Two\"\n    elseif new_arr[i] == 3 then\n      new_arr[i] = \"Three\"\n \
    \   elseif new_arr[i] == 4 then\n      new_arr[i] = \"Four\"\n    elseif new_arr[i]\
    \ == 5 then\n      new_arr[i] = \"Five\"\n    elseif new_arr[i] == 6 then\n  \
    \    new_arr[i] = \"Six\"\n    elseif new_arr[i] == 7 then\n      new_arr[i] =\
    \ \"Seven\"\n    elseif new_arr[i] == 8 then\n      new_arr[i] = \"Eight\"\n \
    \   elseif new_arr[i] == 9 then\n      new_arr[i] = \"Nine\"\n    end\n  end\n\
    \  return new_arr\nend", "    return {}\nend", "    local res = {}\n    local\
    \ check = {}\n    for i = 1, #arr do\n        if arr[i] < 10 and arr[i] > 0 then\n\
    \            check[arr[i]] = true\n        end\n    end\n    local keys = {}\n\
    \    for k, _ in pairs(check) do\n        table.insert(keys, k)\n    end\n   \
    \ table.sort(keys)\n    for i = #keys, 1, -1 do\n        local num_name = ''\n\
    \        if keys[i] == 1 then\n            num_name = 'One'\n        elseif keys[i]\
    \ == 2 then\n            num_name = 'Two'\n        elseif keys[i] == 3 then\n\
    \            num_name = 'Three'\n        elseif keys[i] == 4 then\n          \
    \  num_name = 'Four'\n        elseif keys[i] == 5 then\n            num_name =\
    \ 'Five'\n        elseif keys[i] == 6 then\n            num_name = 'Six'\n   \
    \     elseif keys[i] == 7 then\n            num_name = 'Seven'\n        elseif\
    \ keys[i] == 8 then\n            num_name = 'Eight'\n        elseif keys[i] ==\
    \ 9 then\n            num_name = 'Nine'\n        end\n        table.insert(res,\
    \ num_name)\n    end\n    return res\nend", "  local ret = {}\n  for i, v in ipairs(arr)\
    \ do\n    if v >= 1 and v <= 9 then\n      table.insert(ret, v)\n    end\n  end\n\
    \  table.sort(ret)\n  local len = #ret\n  for i = 1, len / 2 do\n    ret[i], ret[len\
    \ + 1 - i] = ret[len + 1 - i], ret[i]\n  end\n  for i, v in ipairs(ret) do\n \
    \   ret[i] = numbers[v]\n  end\n  return ret\nend", "    if not arr or #arr <\
    \ 1 then return {} end\n    local new_arr = {}\n    for i, v in ipairs(arr) do\n\
    \        if v >= 1 and v <= 9 then\n            new_arr[#new_arr + 1] = v\n  \
    \      end\n    end\n    table.sort(new_arr)\n    local new_new_arr = {}\n   \
    \ for i = #new_arr, 1, -1 do\n        new_new_arr[#new_new_arr + 1] = names[new_arr[i]]\n\
    \    end\n    return new_new_arr\nend\nprint(\"- by_length -\")\nfor k, v in pairs(by_length({1,\
    \ 2, 4, 2, 1, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\
    \ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,", "    local newArr =\
    \ {}\n    local numbers = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] =\
    \ \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n \
    \   [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"Nine\"\n    }\n    for\
    \ _, v in ipairs(arr) do\n      if v >= 1 and v <= 9 then\n        table.insert(newArr,\
    \ numbers[v])\n      end\n    end\n    table.sort(newArr)\n    table.reverse(newArr)\n\
    \    return newArr\nend", "    -- your code here\n    local res = {}\n    if #arr==0\
    \ then\n        return res\n    end\n    local map = {}\n    local tab = {'One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n    for _,v\
    \ in ipairs(arr) do\n        if v>=1 and v<=9 then\n            if map[v] then\n\
    \                map[v] = map[v] + 1\n            else\n                map[v]\
    \ = 1\n            end\n        end\n    end\n    for i=1,9 do\n        if map[i]\
    \ then\n            for j=1,map[i] do\n                table.insert(res, tab[i])\n\
    \            end\n        end\n    end\n    table.sort(res, function(a,b) return\
    \ #a<#b end)\n    return res\nend", "  local result = {}\n  if #arr == 0 then\
    \ return result end\n  table.sort(arr)\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    if n >= 1 and n <= 9 then\n      table.insert(result, words[n])\n    end\n\
    \  end\n  table.sort(result, function(a, b) return #a > #b end)\n  return result\n\
    end", "    local result = {}\n    for i, value in ipairs(arr) do\n        if value\
    \ >= 1 and value <= 9 then\n            table.insert(result, value)\n        end\n\
    \    end\n    table.sort(result)\n    for i, value in ipairs(result) do\n    \
    \    result[i] = NAMES[value]\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
