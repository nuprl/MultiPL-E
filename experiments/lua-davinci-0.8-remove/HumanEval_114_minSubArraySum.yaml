name: HumanEval_114_minSubArraySum
language: lua
prompt: "-- Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n-- of nums.\n-- Example\nlocal function minSubArraySum(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
  \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
  \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n   \
  \ lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
  \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n\
  \    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
  \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
  \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
  \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local minSum = nums[1]\n    local sum = nums[1]\n    for i = 2,\
    \ #nums do\n        if sum > 0 then\n            sum = nums[i]\n        else\n\
    \            sum = sum + nums[i]\n        end\n        minSum = math.min(minSum,\
    \ sum)\n    end\n    return minSum\nend", "  local min, sum = 0, 0\n  for i =\
    \ 1, #nums do\n    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n\
    \    end\n  end\n  return min\nend", "  local n = #nums\n  local min_sum = math.huge\n\
    \  local sum = 0\n  for i = 1, n do\n    sum = sum + nums[i]\n    min_sum = math.min(min_sum,\
    \ sum)\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\n\
    end", "  local min, sum = math.huge, 0\n  for i = 1, #nums do\n    sum = sum +\
    \ nums[i]\n    min = math.min(min, sum)\n    if sum > 0 then\n      sum = 0\n\
    \    end\n  end\n  return min\nend", "    local res = 0\n    local best = 1000000000\n\
    \    for i = 1, #nums do\n        res = math.min(res + nums[i], nums[i])\n   \
    \     best = math.min(best, res)\n    end\n    return best\nend", "  local min\
    \ = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = math.max(nums[i],\
    \ sum + nums[i])\n    min = math.min(min, sum)\n  end\n  return min\nend", " \
    \ local sum = math.huge\n  local cur = 0\n  for i = 1, #nums do\n    cur = cur\
    \ + nums[i]\n    sum = math.min(sum, cur)\n    if cur > 0 then\n      cur = 0\n\
    \    end\n  end\n  return sum\nend", "  local length = #nums\n  local result =\
    \ nums[1]\n  local sum = 0\n  for i = 1, length do\n    sum = sum + nums[i]\n\
    \    result = math.min(result, sum)\n    if sum > 0 then\n      sum = 0\n    end\n\
    \  end\n  return result\nend", "  local min, sum = nums[1], 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n\
    \  end\n  return min\nend", "    local min = nums[1]\n    local cur = nums[1]\n\
    \    for i = 2, #nums do\n        cur = math.min(cur + nums[i], nums[i])\n   \
    \     min = math.min(min, cur)\n    end\n    return min\nend", "  local min_sum\
    \ = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    min_sum = math.min(min_sum, sum)\n    sum = math.max(sum, 0)\n  end\n  return\
    \ min_sum\nend", "    local minSum = 0\n    local result = 0\n    for i, v in\
    \ ipairs(nums) do\n        result = result + v\n        if result < minSum then\n\
    \            minSum = result\n        end\n    end\n    return minSum\nend", " \
    \ local min_sum = nums[1]\n  local cur_sum = nums[1]\n  for i = 2, #nums do\n\
    \    cur_sum = math.min(cur_sum + nums[i], nums[i])\n    min_sum = math.min(min_sum,\
    \ cur_sum)\n  end\n  return min_sum\nend", "  local min = nums[1]\n  local sum\
    \ = nums[1]\n  for i = 2, #nums do\n    sum = math.min(sum + nums[i], nums[i])\n\
    \    min = math.min(min, sum)\n  end\n  return min\nend", "  local ln = #nums\n\
    \  local min = nil\n  local sum = 0\n  for i = 1, ln do\n    sum = sum + nums[i]\n\
    \    if min == nil or sum < min then\n      min = sum\n    end\n    if sum > 0\
    \ then\n      sum = 0\n    end\n  end\n  return min\nend", "  local len = #nums\n\
    \  local res = nil\n  local sum = 0\n  for i = 1, len do\n    sum = sum + nums[i]\n\
    \    if res == nil or sum < res then\n      res = sum\n    end\n    if sum > 0\
    \ then\n      sum = 0\n    end\n  end\n  return res\nend", "  if nums == nil or\
    \ #nums == 0 then\n    return 0\n  end\n  local minSum = math.huge\n  local sum\
    \ = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    minSum = math.min(minSum,\
    \ sum)\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\n\
    end", "    local sum = 0\n    local min_sum = 0xFFFFFFFF\n    for i = 1, #nums\
    \ do\n        sum = sum + nums[i]\n        if sum < min_sum then\n           \
    \ min_sum = sum\n        end\n        if sum > 0 then\n            sum = 0\n \
    \       end\n    end\n    return min_sum\nend", "  local start, total, minimum\
    \ = 1, 0, math.huge\n  for i = 1, #nums do\n    total = total + nums[i]\n    if\
    \ nums[i] < minimum then\n      minimum = nums[i]\n    end\n    while total >\
    \ 0 do\n      total = total - nums[start]\n      start = start + 1\n    end\n\
    \    if total == 0 then\n      if nums[i] - nums[start - 1] < minimum then\n \
    \       minimum = nums[i] - nums[start - 1]\n      end\n    end\n  end\n  return\
    \ minimum\nend", "  local r = 0\n  local l = 1\n  local minSum = math.huge\n \
    \ local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum <\
    \ minSum then\n      minSum = sum\n    end\n    while sum > 0 and l <= i do\n\
    \      sum = sum - nums[l]\n      l = l + 1\n    end\n  end\n  return minSum\n\
    end\nprint(minSubArraySum({2, -1, 2}))\nprint(minSubArraySum({-3, 2, -3, 4, 2}))\n\
    print(minSubArraySum({1, 2, -5, 1, 2, -1}))\nprint(minSubArraySum({-4, 2, -5,\
    \ 1, 2, -1}))\nprint(minSubArraySum({1, 2, -5, 1, 2, -1, 1, 2, -5, 1, 2, -1}))",
  "  local curSum = 0\n  local minSum = math.huge\n  for i = 1, #nums do\n    curSum\
    \ = curSum + nums[i]\n    if curSum < minSum then\n      minSum = curSum\n   \
    \ end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end", "    local min = math.huge\n    local cur = 0\n    for i = 1, #nums do\n\
    \        cur = cur + nums[i]\n        if cur < min then\n            min = cur\n\
    \        end\n        if cur > 0 then\n            cur = 0\n        end\n    end\n\
    \    return min\nend", "  local sum = 0\n  local result = 0\n  local min = nums[1]\n\
    \  for i = 1, #nums do\n    sum = sum + nums[i]\n    min = math.min(min, sum)\n\
    \    if sum > 0 then\n      sum = 0\n    end\n    result = math.min(result, min)\n\
    \  end\n  return result\nend", "  -- The first step is to compute the prefix sum,\
    \ that is a new array\n  -- where each element is the sum of the previous elements\
    \ in nums.\n  -- The sum of each sub-array will then be given by prefix[j] - prefix[i]\n\
    \  -- for j > i.\n  local n = #nums\n  local prefix = {}\n  for i=1,n do\n   \
    \ prefix[i] = nums[i] + (prefix[i-1] or 0)\n  end\n  -- After computing the prefix\
    \ sum, the next step is to find the minimum\n  -- sum of any non-empty sub-array.\
    \ To do so, we use the min heap package\n  -- to find the minimum value of the\
    \ array [1,2,...,n]. We can do so by\n  -- comparing the values prefix[1], prefix[2],...,prefix[n].\n\
    \  local heap = require(\"alg.data-structures.min-heap\")\n  local min_heap =\
    \ heap()\n  min_heap:insert(prefix[1])\n  local res = prefix[1]\n  for i=2,n do\n\
    \    res = math.min(res, prefix[i] - min_heap:peek())\n    min_heap:insert(prefix[i])\n\
    \  end\n  return res\nend", "    local min = math.huge\n    local sum = 0\n  \
    \  for i = 1, #nums do\n        if nums[i] < min then\n            min = nums[i]\n\
    \        end\n        sum = sum + nums[i]\n    end\n    return math.min(min, sum)\n\
    end", "  local sum = 0\n  local min_sum = math.huge\n  local running_sum = 0\n\
    \  for i = 1, #nums do\n    running_sum = running_sum + nums[i]\n    local diff\
    \ = running_sum - sum\n    if diff < min_sum then\n      min_sum = diff\n    end\n\
    \    if running_sum < sum then\n      sum = running_sum\n    end\n  end\n  return\
    \ min_sum\nend", "  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\n\
    end\nprint(minSubArraySum({-3, 2, -3, 4, 2}))\nprint(minSubArraySum({1, 1, -1,\
    \ -1, 1}))\nprint(minSubArraySum({1, -1, -2, 1}))\nprint(minSubArraySum({-2, -3,\
    \ -1}))\nprint(minSubArraySum({-3, 2, -3, 4, 2}))\nprint(minSubArraySum({-2, 3,\
    \ -1, 2, 4, -2, 1}))\nprint(minSubArraySum({-2, 3, -1, 2, 4, -2, 1, -3}))\nprint(minSubArraySum({-2,\
    \ 3, -1, 2, 4, -2, 1, -3, -1}))\nprint(minSubArraySum({1, -1, -2, 1, -3, -4, -1,\
    \ -2, -1, -1}))\nprint(minSubArraySum({-2, -3, -1, -4, -6}))\nprint(minSubArraySum({1,\
    \ 1, -1, -1, 1, -1, -1, -1, -1, 1}))\nprint(minSubArraySum({1, -1, -2, 1, -3,\
    \ -4, -1, -2, -1, -1, -5}))\nprint(minSubArraySum({1, -1, -2, 1, -3, -4, -1, -2,\
    \ -1, -1, -5, -1}))\nprint(minSubArraySum({1, -1, -2, 1, -3, -4, -1, -2, -1, -1,\
    \ -5, -1, -1}))\nprint(minSubArraySum({1, -1, -2, 1, -3,", "  local sum = 0\n\
    \  local result = math.huge\n  local start = 1\n  local end_ = 1\n  for i = 1,\
    \ #nums do\n    sum = sum + nums[i]\n    while sum >= 0 do\n      result = math.min(result,\
    \ sum)\n      sum = sum - nums[start]\n      start = start + 1\n    end\n  end\n\
    \  return result\nend", "    local currSum = nums[1]\n    local bestSum = currSum\n\
    \    for i = 2, #nums do\n        currSum = math.min(currSum + nums[i], nums[i])\n\
    \        bestSum = math.min(bestSum, currSum)\n    end\n    return bestSum\nend",
  "    local result = math.huge\n    local sum = 0\n    for i = 1, #nums do\n    \
    \    sum = sum + nums[i]\n        result = math.min(result, sum)\n        if sum\
    \ > 0 then\n            sum = 0\n        end\n    end\n    return result\nend\n\
    print(minSubArraySum({2, 3, -2, -1, 10}))", "    local sum = nums[1]\n    local\
    \ min_sum = sum\n    for i = 2, #nums do\n        sum = sum + nums[i]\n      \
    \  if sum < min_sum then\n            min_sum = sum\n        end\n    end\n  \
    \  return min_sum\nend", "  local res = nums[1]\n  local sum = 0\n  for _, v in\
    \ ipairs(nums) do\n    sum = sum + v\n    res = math.min(res, sum)\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return res\nend", "    local prev\
    \ = 0\n    local minSum = math.huge\n    for _,num in ipairs(nums) do\n      \
    \  prev = prev + num\n        minSum = math.min(minSum, prev)\n        prev =\
    \ math.min(prev, 0)\n    end\n    return minSum\nend", "  local sum = 0\n  local\
    \ res = math.huge\n  local i = 1\n  while i <= #nums do\n    if sum > 0 then\n\
    \      sum = 0\n    end\n    for j = i, #nums do\n      sum = sum + nums[j]\n\
    \      res = math.min(res, sum)\n    end\n    i = i + 1\n  end\n  return res\n\
    end", "    local res, s = nums[1], nums[1]\n    for i = 2, #nums do\n        s\
    \ = math.min(s + nums[i], nums[i])\n        res = math.min(res, s)\n    end\n\
    \    return res\nend", "  local sum = 0\n  local min = math.huge\n  for _, n in\
    \ ipairs(nums) do\n    sum = sum + n\n    min = math.min(min, sum)\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return min\nend", "    local min_sum\
    \ = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n\
    \        if sum < min_sum then\n            min_sum = sum\n        end\n     \
    \   if sum > 0 then\n            sum = 0\n        end\n    end\n    return min_sum\n\
    end", "  local dp = {[0] = 0}\n  local min = dp[0]\n  for i = 1, #nums do\n  \
    \  dp[i] = dp[i - 1] + nums[i]\n    if dp[i] < min then\n      min = dp[i]\n \
    \   end\n  end\n  return min\nend", "    local minSum = 0\n    local sum = 0\n\
    \    for i,n in ipairs(nums) do\n        sum = sum + n\n        if sum < minSum\
    \ then\n            minSum = sum\n        end\n    end\n    return minSum\nend",
  "    local len = #nums\n    local cur, minSum = 0, math.huge\n    for i = 1, len\
    \ do\n        cur = cur + nums[i]\n        minSum = math.min(minSum, cur)\n  \
    \      if cur > 0 then\n            cur = 0\n        end\n    end\n    return\
    \ minSum\nend", "    local result = 9999999999\n    local sum = 0\n    local _map\
    \ = {}\n    for i = 1, #nums do\n        sum = sum + nums[i]\n        if sum <\
    \ result then\n            result = sum\n        end\n        if _map[sum] ==\
    \ nil then\n            _map[sum] = i\n        end\n        if sum - result ==\
    \ 0 then\n            break\n        end\n    end\n    return result\nend", " \
    \   local min_value = nums[1]\n    local running_total = nums[1]\n    for i =\
    \ 2, #nums do\n        min_value = math.min(min_value, nums[i])\n        running_total\
    \ = math.min(running_total, running_total + nums[i])\n    end\n    return math.min(min_value,\
    \ running_total)\nend", "    local n = #nums\n    local min = math.huge\n    local\
    \ dp = 0\n    for i = 1, n do\n        dp = math.min(dp + nums[i], nums[i])\n\
    \        min = math.min(min, dp)\n    end\n    return min\nend", "  local min\
    \ = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n      sum\
    \ = 0\n    end\n  end\n  return min\nend", "  local min = math.huge\n  local sum\
    \ = 0\n  for i = 1, #nums do\n    sum = math.min(sum + nums[i], nums[i])\n   \
    \ min = math.min(min, sum)\n  end\n  return min\nend", "  if #nums == 0 then\n\
    \    return nil\n  end\n  if #nums == 1 then\n    return nums[1]\n  end\n  local\
    \ min = nums[1]\n  local s = nums[1]\n  for i = 2, #nums do\n    s = math.min(s\
    \ + nums[i], nums[i])\n    min = math.min(min, s)\n  end\n  return min\nend",
  "  local totalSum = 0\n  local minSum = 9999\n  local sum = 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\n\
    end", "    local globalMin = math.huge\n    local minSoFar = 0\n    for i = 1,\
    \ #nums do\n        local cur = nums[i]\n        minSoFar = math.min(minSoFar\
    \ + cur, cur)\n        globalMin = math.min(globalMin, minSoFar)\n    end\n  \
    \  return globalMin\nend", "    if #nums == 0 then\n        return 0\n    end\n\
    \    local minSum = math.huge\n    local sum = 0\n    for i = 1, #nums do\n  \
    \      sum = sum + nums[i]\n        if sum < minSum then\n            minSum =\
    \ sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend", "    local total = 0\n    local minSum = math.huge\n\
    \    local left, right = 1, 1\n    local n = #nums\n    for i = 1, n do\n    \
    \    total = total + nums[i]\n        if total < minSum then\n            minSum\
    \ = total\n            left, right = i, i\n        end\n        for j = 1, i do\n\
    \            local sum = total - nums[j]\n            if sum < minSum then\n \
    \               minSum = sum\n                left, right = j + 1, i\n       \
    \     end\n        end\n    end\n    return minSum, left, right\nend", "    local\
    \ min = math.huge\n    local total = 0\n    for i, n in ipairs(nums) do\n    \
    \    total = total + n\n        if total < min then\n            min = total\n\
    \        end\n    end\n    return min\nend", "  local res = 0\n  local prefixSum\
    \ = {}\n  prefixSum[0] = 0\n  for i = 1, #nums do\n    prefixSum[i] = prefixSum[i\
    \ - 1] + nums[i]\n  end\n  for i = 1, #nums do\n    for j = i, #nums do\n    \
    \  res = math.min(res, prefixSum[j] - prefixSum[i - 1])\n    end\n  end\n  return\
    \ res\nend", "    local sum = 0\n    local minSum = math.huge\n    for i = 1,\
    \ #nums do\n        sum = sum + nums[i]\n        if sum < minSum then\n      \
    \      minSum = sum\n        end\n        if sum > 0 then\n            sum = 0\n\
    \        end\n    end\n    return minSum\nend", "  local min_sum = 0\n  local\
    \ cur_sum = 0\n  for i = 1, #nums do\n    cur_sum = math.min(cur_sum + nums[i],\
    \ nums[i])\n    min_sum = math.min(min_sum, cur_sum)\n  end\n  return min_sum\n\
    end", "  local dp = {}\n  local min_sum = math.huge\n  dp[1] = nums[1]\n  for\
    \ i = 2, #nums do\n    dp[i] = math.min(dp[i - 1] + nums[i], nums[i])\n    min_sum\
    \ = math.min(min_sum, dp[i])\n  end\n  return min_sum\nend", "  local ret = 2^32-1\n\
    \  local curSum = 0\n  local minSum = 0\n  for i = 1, #nums do\n    curSum = curSum\
    \ + nums[i]\n    ret = math.min(ret, curSum - minSum)\n    minSum = math.min(minSum,\
    \ curSum)\n  end\n  return ret\nend", "  local s, l, r = 0, 1, #nums\n  local\
    \ sum, minSum = 0, nums[1]\n  while l <= r do\n    if s < 0 then\n      sum =\
    \ sum + s\n      s = 0\n    else\n      s = nums[l]\n      l = l + 1\n    end\n\
    \    minSum = math.min(minSum, sum + s)\n  end\n  return minSum\nend", "  local\
    \  sum, min = 0, math.huge\n  for i = 1, #nums do\n    sum = sum + nums[i]\n \
    \   min = math.min(min, sum)\n    if sum > 0 then\n      sum = 0\n    end\n  end\n\
    \  return min\nend", "    local min = nums[1]\n    local sum = 0\n    for i =\
    \ 1, #nums do\n        if sum < 0 then\n            sum = 0\n        end\n   \
    \     sum = sum + nums[i]\n        min = math.min(min, sum)\n    end\n    return\
    \ min\nend", "  local min_sum = 99999999\n  local sum = 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\n\
    end", "  local m = nums[1]\n  local curr = 0\n  for i = 1, #nums do\n    curr\
    \ = curr + nums[i]\n    if curr < m then\n      m = curr\n    end\n    if curr\
    \ > 0 then\n      curr = 0\n    end\n  end\n  return m\nend", "    local len =\
    \ #nums\n    local acc = 0\n    local ans = math.huge\n    for i=1,len do\n  \
    \      acc = acc + nums[i]\n        ans = math.min(ans, acc)\n        if ans ==\
    \ 0 then return 0 end\n        if acc > 0 then acc = 0 end\n    end\n    return\
    \ ans\nend", "    if #nums == 0 then\n        return 0\n    end\n    local sum\
    \ = 0\n    local minSum = math.huge\n    for i = 1, #nums do\n        sum = sum\
    \ + nums[i]\n        if sum < minSum then\n            minSum = sum\n        end\n\
    \        if sum > 0 then\n            sum = 0\n        end\n    end\n    return\
    \ minSum\nend", "  local res = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums\
    \ do\n    sum = math.min(sum + nums[i], nums[i])\n    res = math.min(res, sum)\n\
    \  end\n  return res\nend", "    local dp = {}\n    dp[1] = nums[1]\n    for i\
    \ = 2, #nums do\n        dp[i] = min(dp[i - 1] + nums[i], nums[i])\n    end\n\
    \    return min(unpack(dp))\nend", "    local currSum = 0\n    local currMin =\
    \ 0\n    local minSum = math.huge\n    for i, x in ipairs(nums) do\n        currSum\
    \ = currSum + x\n        if currSum < currMin then\n            currMin = currSum\n\
    \        end\n        if currSum - currMin < minSum then\n            minSum =\
    \ currSum - currMin\n        end\n    end\n    return minSum\nend", "  local min\
    \ = 100000\n  local s = nums[1]\n  for i = 1, #nums do\n    s = nums[i]\n    min\
    \ = math.min(min, s)\n    for j = i + 1, #nums do\n      s = s + nums[j]\n   \
    \   min = math.min(min, s)\n    end\n  end\n  return min\nend", "  local min =\
    \ math.huge\n  local sum = 0\n  for i, v in ipairs(nums) do\n    sum = sum + v\n\
    \    if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n      sum\
    \ = 0\n    end\n  end\n  return min\nend", "  local best = math.huge\n  local\
    \ current = 0\n  for i = 1, #nums do\n    current = current + nums[i]\n    best\
    \ = math.min(best, current)\n    if current > 0 then\n      current = 0\n    end\n\
    \  end\n  return best\nend", "    local sum = nums[1]\n    local minSum = sum\n\
    \    for i = 2, #nums do\n        if sum > 0 then\n            sum = nums[i]\n\
    \        else\n            sum = sum + nums[i]\n        end\n        minSum =\
    \ math.min(minSum, sum)\n    end\n    return minSum\nend", "    local cur = 0\n\
    \    local ret = 0\n    local m = 2147483647\n    for i = 1, #nums do\n      \
    \  cur = cur + nums[i]\n        if cur < 0 then\n            cur = 0\n       \
    \ end\n        if cur > ret then\n            ret = cur\n        end\n       \
    \ if nums[i] < m then\n            m = nums[i]\n        end\n    end\n    if ret\
    \ == 0 then\n        return m\n    end\n    return ret\nend", "  local min_sum\
    \ = nums[1]\n  local sum = 0\n  for i=1,#nums do\n    sum = sum + nums[i]\n  \
    \  if sum < min_sum then\n      min_sum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return min_sum\nend", "  local dp = {}\n  dp[1]\
    \ = nums[1]\n  for i = 2, #nums do\n    dp[i] = nums[i] + (dp[i - 1] < 0 and dp[i\
    \ - 1] or 0)\n  end\n  local min = math.min(table.unpack(dp))\n  if min < 0 then\n\
    \    return min\n  else\n    return dp[#dp]\n  end\nend", "  local sum = 0\n \
    \ local minSum = nil\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if minSum\
    \ == nil or sum < minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend", "  local min = nums[1]\n\
    \  local curr = nums[1]\n  for i = 2, #nums do\n    if curr > 0 then\n      curr\
    \ = nums[i]\n    else\n      curr = curr + nums[i]\n    end\n    if curr < min\
    \ then\n      min = curr\n    end\n  end\n  return min\nend", "    local min =\
    \ math.huge\n    local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n\
    \        if sum < min then\n            min = sum\n        end\n        if sum\
    \ > 0 then\n            sum = 0\n        end\n    end\n    return min\nend", " \
    \ local minSum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend", "  local minSum\
    \ = 0\n  local curSum = 0\n  for i = 1, #nums do\n    curSum = curSum + nums[i]\n\
    \    if curSum > 0 then\n      curSum = 0\n    end\n    if curSum < minSum then\n\
    \      minSum = curSum\n    end\n  end\n  return minSum\nend", "  -- locate the\
    \ first positive number.\n  local sum = 0\n  local min = 0\n  local start = 0\n\
    \  local found = false\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if\
    \ sum < min then\n      min = sum\n    end\n    if sum >= 0 then\n      if not\
    \ found then\n        start = i\n        found = true\n      end\n      sum =\
    \ 0\n    end\n  end\n  return min, start\nend", "  local min = nums[1]\n  local\
    \ sum = nums[1]\n  for i = 2, #nums do\n    sum = math.min(sum + nums[i], nums[i])\n\
    \    min = math.min(min, sum)\n  end\n  return min\nend", "  local minSum = math.huge\n\
    \  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    minSum =\
    \ math.min(minSum, sum)\n    sum = math.max(sum, 0)\n  end\n  return minSum\n\
    end", "    if nums == nil or #nums == 0 then\n        return 0\n    end\n    local\
    \ min = math.huge\n    local sum = 0\n    for _, v in ipairs(nums) do\n      \
    \  sum = sum + v\n        if sum < min then\n            min = sum\n        end\n\
    \        if sum > 0 then\n            sum = 0\n        end\n    end\n    return\
    \ min\nend", "  local res = math.huge\n  local sum = 0\n  for i = 1, #nums do\n\
    \    sum = sum + nums[i]\n    res = math.min(res, sum)\n    if res == 0 then\n\
    \      return 0\n    end\n    if sum < 0 then\n      sum = 0\n    end\n  end\n\
    \  return res\nend", "  local min_total = 0\n  local min_so_far = 0\n  local min_i\
    \ = 0\n  local min_j = 0\n  local total = 0\n  local n = #nums\n  for i = 1, n\
    \ do\n    total = total + nums[i]\n    if min_total > total then\n      min_total\
    \ = total\n      min_i = i\n    end\n    if total - min_total < min_so_far then\n\
    \      min_so_far = total - min_total\n      min_j = i\n    end\n  end\n  return\
    \ min_so_far, min_i, min_j\nend", "  local minSum = nums[1]\n  local currentSum\
    \ = nums[1]\n  for i = 2, #nums do\n    currentSum = math.min(currentSum + nums[i],\
    \ nums[i])\n    minSum = math.min(minSum, currentSum)\n  end\n  return minSum\n\
    end", "    local minSum = nums[1]\n    local sum = nums[1]\n    for i = 2, #nums\
    \ do\n        sum = math.min(sum + nums[i], nums[i])\n        minSum = math.min(minSum,\
    \ sum)\n    end\n    return minSum\nend", "    local total = 0\n    local smallestSum\
    \ = nums[1]\n    for i = 1, #nums do\n        total = total + nums[i]\n      \
    \  if smallestSum > total then\n            smallestSum = total\n        end\n\
    \        if total > 0 then\n            total = 0\n        end\n    end\n    return\
    \ smallestSum\nend", "    if #nums == 0 then\n        return 0\n    end\n    local\
    \ sum = 0\n    local min = nil\n    for i, n in ipairs(nums) do\n        sum =\
    \ sum + n\n        if min == nil or sum < min then\n            min = sum\n  \
    \      end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return min\nend", "    local sum, msum = 0, math.huge\n    for i, v in ipairs(nums)\
    \ do\n        sum = sum + v\n        msum = math.min(msum, sum)\n        if sum\
    \ > 0 then\n            sum = 0\n        end\n    end\n    return msum\nend",
  "    local minsum = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n      \
    \  sum = sum + nums[i]\n        if sum < minsum then\n            minsum = sum\n\
    \        end\n        if sum > 0 then\n            sum = 0\n        end\n    end\n\
    \    return minsum\nend", "  local res = 0\n  local left = 1\n  local cur = 0\n\
    \  local len = #nums\n  for i = 1, len do\n    cur = cur + nums[i]\n    res =\
    \ math.min(res, cur)\n    if cur > 0 then\n      cur = 0\n    end\n  end\n  return\
    \ res\nend", "    local sum, minSum = 0, math.huge\n    for i = 1, #nums do\n\
    \        sum = sum + nums[i]\n        minSum = math.min(minSum, sum)\n       \
    \ if sum < 0 then\n            sum = 0\n        end\n    end\n    return minSum\n\
    end", "    local cur, min = 0, math.huge\n    for i, n in ipairs(nums) do\n  \
    \      cur = cur + n\n        min = math.min(min, cur)\n        if cur > 0 then\n\
    \            cur = 0\n        end\n    end\n    return min\nend", '    local n
    = #nums', "    local currSum = 0\n    local minSum = math.huge\n    for i, num\
    \ in ipairs(nums) do\n        currSum = currSum + num\n        if currSum < minSum\
    \ then\n            minSum = currSum\n        end\n        if currSum > 0 then\n\
    \            currSum = 0\n        end\n    end\n    return minSum\nend", "   \
    \ local min = math.huge\n    local sum = 0\n    for i = 1, #nums do\n        sum\
    \ = sum + nums[i]\n        if sum < min then\n            min = sum\n        end\n\
    \        if sum > 0 then\n            sum = 0\n        end\n    end\n    return\
    \ min\nend", "  local subSum = math.huge\n  local total = 0\n  local first = 1\n\
    \  local last = 1\n  local len = #nums\n  while first <= len do\n    while total\
    \ < 0 and first <= len do\n      total = total + nums[first]\n      first = first\
    \ + 1\n    end\n    while total >= 0 and last <= len do\n      total = total +\
    \ nums[last]\n      subSum = math.min(subSum, total)\n      last = last + 1\n\
    \    end\n    total = total - nums[first - 1]\n    first = first + 1\n  end\n\
    \  return subSum\nend", "  local sum = 0\n  local min = math.huge\n  for i = 1,\
    \ #nums do\n    sum = sum + nums[i]\n    min = math.min(min, sum)\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return min\nend", "    local minSum\
    \ = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n        if sum > 0 then\n\
    \            sum = nums[i]\n        else\n            sum = sum + nums[i]\n  \
    \      end\n        minSum = math.min(minSum, sum)\n    end\n    return minSum\n\
    end", "    local sum = 0\n    local m = math.huge\n    for i = 1, #nums do\n \
    \       sum = sum + nums[i]\n        m = math.min(m, sum)\n        if sum > 0\
    \ then\n            sum = 0\n        end\n    end\n    return m\nend", '    local
    mi', "  local min_sum = math.huge\n  local cur_sum = 0\n  for i = 1, #nums do\n\
    \    cur_sum = cur_sum + nums[i]\n    if cur_sum < min_sum then\n      min_sum\
    \ = cur_sum\n    end\n    if cur_sum > 0 then\n      cur_sum = 0\n    end\n  end\n\
    \  return min_sum\nend", "    local pre = nums[1]\n    local min = pre\n    for\
    \ i = 2, #nums do\n        pre = math.min(pre + nums[i], nums[i])\n        min\
    \ = math.min(min, pre)\n    end\n    return min\nend", "  -- TODO\nend", "  local\
    \ max_sum = 0\n  local min_sum = 0\n  local sum = 0\n  for i = 1, #nums do\n \
    \   sum = sum + nums[i]\n    max_sum = math.max(max_sum, sum - min_sum)\n    min_sum\
    \ = math.min(min_sum, sum)\n  end\n  return max_sum\nend", "    local len = #nums\n\
    \    local ans = nums[1]\n    local sum = 0\n    for i = 1, len do\n        if\
    \ sum > 0 then\n            sum = sum + nums[i]\n        else\n            sum\
    \ = nums[i]\n        end\n        ans = math.min(ans, sum)\n    end\n    return\
    \ ans\nend", "  local min, sum = nums[1], 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n  end\n  return\
    \ min\nend", "    local minimum = nums[1]\n    local currMin = minimum\n    for\
    \ i = 2, #nums do\n        currMin = currMin + nums[i] < nums[i] and currMin +\
    \ nums[i] or nums[i]\n        minimum = currMin < minimum and currMin or minimum\n\
    \    end\n    return minimum\nend", "  local minSum = 0\n  local sum = 0\n  for\
    \ i = 1, #nums do\n    sum = sum + nums[i]\n    if minSum > sum then\n      minSum\
    \ = sum\n    end\n  end\n  return minSum\nend", "    local min = 100000000\n \
    \   local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n    \
    \    if sum < min then\n            min = sum\n        end\n        if sum > 0\
    \ then\n            sum = 0\n        end\n    end\n    return min\nend", "   \
    \ local max_int = math.maxinteger\n    local prev = 0\n    local min = max_int\n\
    \    for i = 1, #nums do\n        prev = math.min(prev + nums[i], nums[i])\n \
    \       min = math.min(min, prev)\n    end\n    return min\nend", "    local n\
    \ = #nums\n    local sum = 0\n    local ans = math.huge\n    for i=1,n do\n  \
    \      sum = sum + nums[i]\n        ans = math.min(ans, sum)\n        sum = math.min(sum,\
    \ 0)\n    end\n    return ans\nend", "    local minSum = nums[1]\n    local sum\
    \ = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n        if sum <\
    \ minSum then\n            minSum = sum\n        end\n        if sum > 0 then\n\
    \            sum = 0\n        end\n    end\n    return minSum\nend", "    local\
    \ res = 0\n    local p1 = 1\n    local p2 = 1\n    local sum = 0\n    while p2\
    \ <= #nums do\n        sum = sum + nums[p2]\n        p2 = p2 + 1\n        while\
    \ sum >= res do\n            res = sum\n            p1 = p1 + 1\n            sum\
    \ = sum - nums[p1]\n        end\n    end\n    return res\nend", "  local minSum\
    \ = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend", "  local min_sum = nums[1]\n\
    \  local current_sum = 0\n  for i = 1, #nums do\n    current_sum = math.min(nums[i],\
    \ current_sum + nums[i])\n    min_sum = math.min(min_sum, current_sum)\n  end\n\
    \  return min_sum\nend", "  local sum, minSum = 0, math.huge\n  for _, num in\
    \ ipairs(nums) do\n    sum = sum + num\n    minSum = math.min(minSum, sum)\n \
    \   if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend", " \
    \ local minSum = math.huge\n  local curSum = 0\n  for i, v in ipairs(nums) do\n\
    \    curSum = curSum + v\n    if curSum < minSum then\n      minSum = curSum\n\
    \    end\n    if curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\n\
    end", "\tlocal sum = 0\n\tlocal min = math.huge\n\tlocal l = 1\n\tlocal r = 1\n\
    \twhile l <= #nums do\n\t\tsum = sum + nums[r]\n\t\twhile sum >= 0 do\n\t\t\t\
    min = math.min(min, sum)\n\t\t\tsum = sum - nums[l]\n\t\t\tl = l + 1\n\t\tend\n\
    \t\tr = r + 1\n\tend\n\treturn min\nend", "    local sum, min_sum = 0, math.huge\n\
    \    for i = 1, #nums do\n        sum = sum + nums[i]\n        min_sum = math.min(min_sum,\
    \ sum)\n        sum = math.max(sum, 0)\n    end\n    return min_sum\nend", " \
    \ local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    minSum = math.min(minSum, sum)\n    if sum > 0 then\n   \
    \   sum = 0\n    end\n  end\n  return minSum\nend", "    local minSum = math.huge\n\
    \    local sum = 0\n    for i = 1, #nums do\n        sum = math.min(sum + nums[i],\
    \ nums[i])\n        minSum = math.min(minSum, sum)\n    end\n    return minSum\n\
    end", "    local tmp = 0\n    local total = 0\n    local min = nums[1]\n    for\
    \ i = 1, #nums do\n        tmp = math.min(nums[i], tmp + nums[i])\n        min\
    \ = math.min(min, tmp)\n        total = total + nums[i]\n    end\n    return min\n\
    end", "    local min = nums[1]\n    local sum = 0\n    for _, num in ipairs(nums)\
    \ do\n        sum = sum + num\n        if sum < min then\n            min = sum\n\
    \        end\n    end\n    return min\nend", "  local min_sum = nums[1]\n  local\
    \ cur_sum = nums[1]\n  for i = 2, #nums do\n    cur_sum = cur_sum + nums[i]\n\
    \    if cur_sum < min_sum then\n      min_sum = cur_sum\n    end\n    if cur_sum\
    \ < 0 then\n      cur_sum = 0\n    end\n  end\n  return min_sum\nend", "    local\
    \ n = #nums\n    local _curr_sum = 0\n    local _min_sum = math.huge\n    for\
    \ i = 1, n do\n        _curr_sum = math.max(_curr_sum + nums[i], nums[i])\n  \
    \      _min_sum = math.min(_min_sum, _curr_sum)\n    end\n    return _min_sum\n\
    end", "    local minSum = 0\n    local currSum = 0\n    local min = nums[1]\n\
    \    for i = 1, #nums do\n        currSum = currSum + nums[i]\n        if currSum\
    \ < minSum then\n            minSum = currSum\n        end\n        if nums[i]\
    \ < min then\n            min = nums[i]\n        end\n    end\n    return minSum\
    \ == 0 and min or minSum\nend", "  local mins = {}\n  local sum\n  for i = 1,\
    \ #nums do\n    sum = nums[i]\n    mins[i] = sum\n    for j = i + 1, #nums do\n\
    \      sum = sum + nums[j]\n      mins[j] = math.min(mins[j] or 0, sum)\n    end\n\
    \  end\n  return mins[#mins]\nend", "    local function go(nums, i, acc)\n   \
    \     if i > #nums then\n            return acc\n        end\n        return go(nums,\
    \ i + 1, math.min(acc, nums[i]))\n    end\n    local acc = go(nums, 1, math.huge)\n\
    \    local i = 1\n    while i <= #nums do\n        local j = i\n        local\
    \ acc = 0\n        while j <= #nums do\n            acc = acc + nums[j]\n    \
    \        if acc < acc then\n                acc = acc\n            end\n     \
    \       j = j + 1\n        end\n        i = i + 1\n    end\n    return acc\nend",
  "    local sum, min = 0, math.huge\n    for i, v in ipairs(nums) do\n        sum\
    \ = sum + v\n        min = math.min(min, sum)\n        if sum > 0 then\n     \
    \       sum = 0\n        end\n    end\n    return min\nend", "  local minimum\
    \ = nums[1]\n  local current = nums[1]\n  for i = 2, #nums do\n    current = math.min(current\
    \ + nums[i], nums[i])\n    minimum = math.min(minimum, current)\n  end\n  return\
    \ minimum\nend", "  local minSum = 0\n  local curSum = 0\n  local length = #nums\n\
    \  for i = 1, length do\n    curSum = curSum + nums[i]\n    if curSum < minSum\
    \ then\n      minSum = curSum\n    end\n  end\n  return minSum\nend", "  if #nums\
    \ == 0 then\n    return nil\n  end\n  local minSum = nums[1]\n  local sum = 0\n\
    \  for i = 1, #nums do\n    if sum < 0 then\n      sum = 0\n    end\n    sum =\
    \ sum + nums[i]\n    minSum = math.min(minSum, sum)\n  end\n  return minSum\n\
    end", "    local sum, minSum = 0, 0\n    for _, n in ipairs(nums) do\n       \
    \ sum = sum + n\n        if minSum > sum then\n            minSum = sum\n    \
    \    end\n    end\n    return minSum\nend", "  local m, sum = 0, 0\n  for i =\
    \ 1, #nums do\n    sum = sum + nums[i]\n    if i == 1 then\n      m = sum\n  \
    \  else\n      m = math.min(m, sum)\n    end\n    if sum > 0 then\n      sum =\
    \ 0\n    end\n  end\n  return m\nend", "  local function max(a, b)\n    if a <\
    \ b then\n      return b\n    else\n      return a\n    end\n  end", "    if not\
    \ nums or #nums == 0 then\n        return nil\n    end\n    local m = nums[1]\n\
    \    local sum = 0\n    for _, v in ipairs(nums) do\n        if sum > 0 then\n\
    \            sum = sum + v\n        else\n            sum = v\n        end\n \
    \       m = math.min(m, sum)\n    end\n    return m\nend", "  local min = nums[1]\n\
    \  local cur = nums[1]\n  for i = 2, #nums do\n    cur = cur + nums[i]\n    if\
    \ cur < min then\n      min = cur\n    end\n  end\n  return min\nend", "    local\
    \ minSum = nums[1]\n    local len = #nums\n    local sum = 0\n    for i = 1, len\
    \ do\n        sum = sum + nums[i]\n        if sum < minSum then\n            minSum\
    \ = sum\n        end\n        if sum > 0 then\n            sum = 0\n        end\n\
    \    end\n    return minSum\nend", "  local currentSum = 0\n  local minSum = math.huge\n\
    \  for i = 1, #nums do\n    currentSum = currentSum + nums[i]\n    if currentSum\
    \ < minSum then\n      minSum = currentSum\n    end\n    if currentSum > 0 then\n\
    \      currentSum = 0\n    end\n  end\n  return minSum\nend", "    local min =\
    \ nums[1]\n    local acc = nums[1]\n    for i = 2, #nums do\n        acc = math.min(acc\
    \ + nums[i], nums[i])\n        min = math.min(min, acc)\n    end\n    return min\n\
    end", "    local sum = 0\n    local min_sum = 2^63 - 1\n    for i = 1, #nums do\n\
    \        if sum < 0 then\n            sum = 0\n        end\n        sum = sum\
    \ + nums[i]\n        min_sum = math.min(min_sum, sum)\n    end\n    return min_sum\n\
    end", "  if #nums == 0 then\n    return 0\n  end\n  local minSum = math.huge\n\
    \  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum <\
    \ minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n      sum = 0\n\
    \    end\n  end\n  return minSum\nend", "  local res = 99999999999\n  local sum\
    \ = 0\n  local left = 1\n  local right = 1\n  while right <= #nums do\n    while\
    \ sum < 0 and left < right do\n      sum = sum - nums[left]\n      left = left\
    \ + 1\n    end\n    res = math.min(res, sum)\n    sum = sum + nums[right]\n  \
    \  right = right + 1\n  end\n  return res\nend", "  local length = #nums\n  local\
    \ min = nums[1]\n  local sum = nums[1]\n  for i = 2, length do\n    if sum < 0\
    \ then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n    end\n  \
    \  if sum < min then\n      min = sum\n    end\n  end\n  return min\nend", " \
    \ local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    min_sum = math.min(min_sum, sum)\n    sum = math.max(sum,\
    \ 0)\n  end\n  return min_sum\nend", "  local n = #nums\n  local minSum = nums[1]\n\
    \  local sum = nums[1]\n  for i = 2, n do\n    sum = math.min(sum + nums[i], nums[i])\n\
    \    minSum = math.min(minSum, sum)\n  end\n  return minSum\nend", "  local current\
    \ = 0\n  local minimum = math.huge\n  for _, value in ipairs(nums) do\n    current\
    \ = math.min(value, current + value)\n    minimum = math.min(minimum, current)\n\
    \  end\n  return minimum\nend", "  local minSum = math.huge\n  local curSum =\
    \ 0\n  for i = 1, #nums do\n    curSum = curSum + nums[i]\n    if curSum < minSum\
    \ then\n      minSum = curSum\n    end\n    if curSum > 0 then\n      curSum =\
    \ 0\n    end\n  end\n  return minSum\nend", "  local minSum = math.huge\n  local\
    \ sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    minSum = math.min(minSum,\
    \ sum)\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\n\
    end", "  local result = nums[1]\n  local curr = 0\n  for i = 1, #nums do\n   \
    \ curr = curr + nums[i]\n    if curr < result then\n      result = curr\n    end\n\
    \    if curr > 0 then\n      curr = 0\n    end\n  end\n  return result\nend",
  "    local sum, minSum = 0, math.huge\n    for i, num in ipairs(nums) do\n     \
    \   sum = sum + num\n        minSum = math.min(minSum, sum)\n        if sum >\
    \ 0 then\n            sum = 0\n        end\n    end\n    return minSum\nend",
  "\tlocal min_sum = math.huge\n\tlocal cur_sum = 0\n\tfor i = 1, #nums do\n\t\tcur_sum\
    \ = math.min(cur_sum + nums[i], nums[i])\n\t\tmin_sum = math.min(min_sum, cur_sum)\n\
    \tend\n\treturn min_sum\nend", "  local sum, min_sum = 0, 1/0\n  for i, v in ipairs(nums)\
    \ do\n    sum = sum + v\n    min_sum = math.min(min_sum, sum)\n    sum = math.max(sum,\
    \ 0)\n  end\n  return min_sum\nend\nprint(minSubArraySum{-1, -1, -1, -1, -1})\n\
    print(minSubArraySum{2, 3, -2, 4})\nprint(minSubArraySum{1, -1, -2, 1})", "  \
    \  local n = #nums\n    if n == 0 then\n        return 0\n    end\n    local min_sum\
    \ = nums[1]\n    local sum = 0\n    for i = 1, n do\n        if sum > 0 then\n\
    \            sum = nums[i]\n        else\n            sum = sum + nums[i]\n  \
    \      end\n        min_sum = math.min(min_sum, sum)\n    end\n    return min_sum\n\
    end", "  local min_sum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n \
    \   sum = sum + nums[i]\n    min_sum = math.min(min_sum, sum)\n    if sum > 0\
    \ then\n      sum = 0\n    end\n  end\n  return min_sum\nend", "    local min_sum\
    \ = 0\n    local sum = 0\n    for _,v in ipairs(nums) do\n        sum = sum +\
    \ v\n        if sum < min_sum then\n            min_sum = sum\n        end\n \
    \   end\n    return min_sum\nend", "    local minSum = nums[1]\n    local sum\
    \ = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n        if sum <\
    \ minSum then\n            minSum = sum\n        end\n        if sum > 0 then\n\
    \            sum = 0\n        end\n    end\n    return minSum\nend", "    local\
    \ minSum = 0\n    local sum = 0\n    for _, v in ipairs(nums) do\n        sum\
    \ = sum + v\n        if sum < minSum then\n            minSum = sum\n        end\n\
    \    end\n    return minSum\nend", "    local answer = 0\n    local min_ = math.huge\n\
    \    for i = 1, #nums do\n        answer = answer + nums[i]\n        min_ = math.min(min_,\
    \ answer)\n        if answer > 0 then\n            answer = 0\n        end\n \
    \   end\n    return min_\nend", "  local minSum = nums[1]\n  local sum = nums[1]\n\
    \  for i = 2, #nums do\n    if sum > 0 then\n      sum = nums[i]\n    else\n \
    \     sum = sum + nums[i]\n    end\n    minSum = math.min(minSum, sum)\n  end\n\
    \  return minSum\nend", "    if #nums < 1 then\n        return 0\n    end\n  \
    \  local curr_sum = nums[1]\n    local res = nums[1]\n    for i = 2, #nums do\n\
    \        curr_sum = math.min(nums[i], curr_sum + nums[i])\n        res = math.min(res,\
    \ curr_sum)\n    end\n    return res\nend", "  local min = nums[1]\n  local sum\
    \ = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    if sum < min then\n\
    \      min = sum\n    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n\
    \  return min\nend", "  local min_sum = nums[1]\n  local cur_sum = 0\n  for i\
    \ = 1, #nums do\n    cur_sum = cur_sum + nums[i]\n    if cur_sum < min_sum then\n\
    \      min_sum = cur_sum\n    end\n    if cur_sum > 0 then\n      cur_sum = 0\n\
    \    end\n  end\n  return min_sum\nend", "  local len = #nums\n  local min = nums[1]\n\
    \  local sum = nums[1]\n  for i = 2, len do\n    if nums[i] < min then\n     \
    \ min = nums[i]\n    end\n    if sum > 0 then\n      sum = nums[i]\n    else\n\
    \      sum = sum + nums[i]\n    end\n    if sum < min then\n      min = sum\n\
    \    end\n  end\n  return min\nend", "  if nums == nil or #nums == 0 then\n  \
    \  return 0\n  end\n  local sum = 0\n  local minSum = nums[1]\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return minSum\n\
    end", "  local function getSum(i, j)\n    local s = 0\n    for ii = i, j do\n\
    \      s = s + nums[ii]\n    end\n    return s\n  end", "    local minSum = math.huge\n\
    \    local sum = 0\n    for i, v in ipairs(nums) do\n        sum = sum + v\n \
    \       if sum < minSum then\n            minSum = sum\n        end\n        if\
    \ sum > 0 then\n            sum = 0\n        end\n    end\n    return minSum\n\
    end", "    local n = #nums\n    local sum = 0\n    local res = nums[1]\n    for\
    \ i = 1, n do\n        sum = sum + nums[i]\n        res = math.min(res, sum)\n\
    \        if sum > 0 then\n            sum = 0\n        end\n    end\n    return\
    \ res\nend", "    local len = #nums\n    if len == 0 then\n        return 0\n\
    \    end\n    local res = nums[1]\n    local cur = nums[1]\n    for i = 2, len\
    \ do\n        if cur < 0 then\n            cur = nums[i]\n        else\n     \
    \       cur = cur + nums[i]\n        end\n        res = math.min(res, cur)\n \
    \   end\n    return res\nend", "  if #nums == 0 then\n    return 0\n  end\n  local\
    \ min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = math.max(nums[i],\
    \ sum + nums[i])\n    min_sum = math.min(min_sum, sum)\n  end\n  return min_sum\n\
    end", "\tlocal min, sum = math.huge, 0\n\tfor i = 1, #nums do\n\t\tsum = sum +\
    \ nums[i]\n\t\tmin = math.min(min, sum)\n\t\tif sum > 0 then\n\t\t\tsum = 0\n\t\
    \tend\n\tend\n\treturn min\nend", "    local min = math.huge\n    local sum =\
    \ 0\n    for i, v in ipairs(nums) do\n        sum = sum + v\n        if sum <\
    \ min then\n            min = sum\n        end\n        if sum > 0 then\n    \
    \        sum = 0\n        end\n    end\n    return min\nend", "  local min = nums[1]\n\
    \  local max = nums[1]\n  local sum = nums[1]\n  for i = 2, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if nums[i]\
    \ < min then\n      min = nums[i]\n    end\n    if sum > max then\n      max =\
    \ sum\n    end\n    if nums[i] > max then\n      max = nums[i]\n    end\n  end\n\
    \  if min > 0 then\n    return min\n  end\n  return max\nend", "  if (not nums)\
    \ or (#nums == 0) then\n    return 0\n  end\n  local minSum = math.huge\n  local\
    \ curSum = 0\n  for i, v in ipairs(nums) do\n    curSum = curSum + v\n    if curSum\
    \ < minSum then\n      minSum = curSum\n    end\n    if curSum > 0 then\n    \
    \  curSum = 0\n    end\n  end\n  return minSum\nend", "    local min = nums[1]\n\
    \    local s = 0\n    for i = 1, #nums do\n        s = s + nums[i]\n        if\
    \ s < min then\n            min = s\n        end\n    end\n    return min\nend",
  "  local sum = nums[1]\n  local minSum = nums[1]\n  for i = 2, #nums do\n    if\
    \ sum > 0 then\n      sum = nums[i]\n    else\n      sum = sum + nums[i]\n   \
    \ end\n    minSum = math.min(minSum, sum)\n  end\n  return minSum\nend", "  local\
    \ total = 0\n  local minimum = math.huge\n  local currSum = 0\n  for i = 1, #nums\
    \ do\n    currSum = currSum + nums[i]\n    if currSum < minimum then\n      minimum\
    \ = currSum\n    end\n    if currSum > 0 then\n      currSum = 0\n    end\n  end\n\
    \  return minimum\nend", "  local sum = 0\n  local min = nums[1]\n  for i = 1,\
    \ #nums do\n    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n\
    \    end\n    if sum > 0 then\n      sum = 0\n    end\n  end\n  return min\nend",
  "    local res = 0\n    local sum = 0\n    local min = math.huge\n    for i = 1,\
    \ #nums do\n        sum = sum + nums[i]\n        min = math.min(min, sum - res)\n\
    \        res = math.min(res, sum)\n    end\n    return min\nend", "  local minSum\
    \ = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if minSum > sum then\n      minSum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend", "    local sum, minSum\
    \ = 0, math.huge\n    for i = 1, #nums do\n        sum = sum + nums[i]\n     \
    \   minSum = math.min(minSum, sum)\n        if sum > 0 then\n            sum =\
    \ 0\n        end\n    end\n    return minSum\nend", "\tlocal minSum, sum = nil,\
    \ 0\n\tfor i = 1, #nums do\n\t\tsum = sum + nums[i]\n\t\tif i == 1 then\n\t\t\t\
    minSum = sum\n\t\telse\n\t\t\tminSum = math.min(minSum, sum)\n\t\tend\n\t\tif\
    \ sum < 0 then\n\t\t\tsum = 0\n\t\tend\n\tend\n\treturn minSum\nend", "  local\
    \ currSum = nums[1]\n  local minSum = nums[1]\n  for i = 2, #nums do\n    currSum\
    \ = math.min(nums[i], currSum + nums[i])\n    minSum = math.min(minSum, currSum)\n\
    \  end\n  return minSum\nend", "  local curr_sum = 0\n  local min_sum = math.huge\n\
    \  for i = 1, #nums do\n    curr_sum = curr_sum + nums[i]\n    if curr_sum < min_sum\
    \ then\n      min_sum = curr_sum\n    end\n    if curr_sum > 0 then\n      curr_sum\
    \ = 0\n    end\n  end\n  return min_sum\nend", "  local res = 0\n  local start\
    \ = 1\n  local min = math.huge\n  for i = 1, #nums do\n    res = res + nums[i]\n\
    \    while res >= 0 do\n      min = math.min(min, res)\n      res = res - nums[start]\n\
    \      start = start + 1\n    end\n  end\n  return min\nend", "    if nums ==\
    \ nil or #nums == 0 then\n        return 0\n    end\n    local sum = 0\n    local\
    \ min_sum = nums[1]\n    for i = 1, #nums do\n        sum = sum + nums[i]\n  \
    \      if sum < min_sum then\n            min_sum = sum\n        end\n       \
    \ if sum > 0 then\n            sum = 0\n        end\n    end\n    return min_sum\n\
    end", "  local min = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return min\nend", "  local min_sum\
    \ = nums[1]\n  local cur_sum = nums[1]\n  for i = 2, #nums do\n    cur_sum = math.min(cur_sum\
    \ + nums[i], nums[i])\n    min_sum = math.min(min_sum, cur_sum)\n  end\n  return\
    \ min_sum\nend", "  -- There's a 2-pointer sliding window approach we can use.\n\
    \  -- This is O(n).", "  local len = #nums\n  local left = 1\n  local res = nums[1]\n\
    \  local sum = 0\n  local i = 1\n  while i <= len do\n    while i <= len and sum\
    \ < 0 do\n      sum = sum + nums[i]\n      res = math.min(res, sum)\n      i =\
    \ i + 1\n    end\n    sum = sum - nums[left]\n    left = left + 1\n  end\n  return\
    \ res\nend", "  if not nums or #nums == 0 then\n    return nil\n  end\n  local\
    \ min = nums[1]\n  local cur = nums[1]\n  for i = 2, #nums do\n    cur = math.min(cur\
    \ + nums[i], nums[i])\n    min = math.min(min, cur)\n  end\n  return min\nend",
  "  local minSum = math.huge\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return minSum\nend", "  local result\
    \ = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = math.min(sum +\
    \ nums[i], nums[i])\n    result = math.min(result, sum)\n  end\n  return result\n\
    end", "  local currentSum = 0\n  local result = math.huge\n  for _, v in ipairs(nums)\
    \ do\n    currentSum = currentSum + v\n    result = math.min(result, currentSum)\n\
    \    if currentSum > 0 then\n      currentSum = 0\n    end\n  end\n  return result\n\
    end", "  local sum = 0\n  local result = math.huge\n  local start = 1\n  local\
    \ end_ = 1\n  for i = 1, #nums do\n    sum = sum + nums[i]\n    while (sum >=\
    \ 0) do\n      result = math.min(result, sum)\n      sum = sum - nums[start]\n\
    \      start = start + 1\n    end\n  end\n  return result\nend", "    local function\
    \ minimum (a, b)\n        if a < b then\n            return a\n        else\n\
    \            return b\n        end\n    end", "  local minSoFar = nums[1]\n  local\
    \ minEndingHere = nums[1]\n  for i = 2, #nums do\n    minEndingHere = math.min(minEndingHere\
    \ + nums[i], nums[i])\n    minSoFar = math.min(minSoFar, minEndingHere)\n  end\n\
    \  return minSoFar\nend", "  local min = 0;\n  local currentSum = 0;\n  local\
    \ firstNum = true;\n  for i,v in ipairs(nums) do\n    if firstNum then\n     \
    \ min = v;\n      currentSum = v;\n      firstNum = false;\n    else\n      currentSum\
    \ = currentSum + v;\n      min = min > currentSum and currentSum or min;\n   \
    \   currentSum = currentSum > 0 and 0 or currentSum;\n    end\n  end\n  return\
    \ min;\nend", "  local min_sum = math.huge\n  local current_sum = 0\n  for i =\
    \ 1, #nums do\n    current_sum = current_sum + nums[i]\n    if min_sum > current_sum\
    \ then\n      min_sum = current_sum\n    end\n    if current_sum > 0 then\n  \
    \    current_sum = 0\n    end\n  end\n  return min_sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
