name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return brackets:find(\"^%s*(<*>*)%s*$\")\nend", "  local number_of_open_brackets\
    \ = 0\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i, i)\n   \
    \ if bracket == \"<\" then\n      number_of_open_brackets = number_of_open_brackets\
    \ + 1\n    elseif bracket == \">\" then\n      number_of_open_brackets = number_of_open_brackets\
    \ - 1\n    end\n    if number_of_open_brackets < 0 then\n      return false\n\
    \    end\n  end\n  return number_of_open_brackets == 0\nend", "    local stack\
    \ = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n  \
    \      if c == \"<\" then\n            table.insert(stack, c)\n        elseif\
    \ c == \">\" then\n            local top = table.remove(stack)\n            if\
    \ not top then\n                return false\n            end\n        end\n \
    \   end\n    return #stack == 0\nend", "\tlocal depth = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal char = brackets:sub(i, i)\n\t\tif char == \"<\" then\n\t\t\tdepth\
    \ = depth + 1\n\t\telseif char == \">\" then\n\t\t\tdepth = depth - 1\n\t\t\t\
    if depth < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth\
    \ == 0\nend", "  local n_open = 0 -- count of opening brackets\n  for _, char\
    \ in ipairs{brackets:byte(1, #brackets)} do\n    if char == 60 then -- \"<\" is\
    \ 60\n      n_open = n_open + 1\n    elseif char == 62 then -- \">\" is 62\n \
    \     n_open = n_open - 1\n      if n_open < 0 then\n        return false\n  \
    \    end\n    end\n  end\n  return n_open == 0\nend", "    local d = 0\n    for\
    \ i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == '<'\
    \ then\n            d = d + 1\n        elseif c == '>' then\n            d = d\
    \ - 1\n        end\n        if d < 0 then\n            return false\n        end\n\
    \    end\n    return d == 0\nend", "  local parens = 0\n  for i = 1, #brackets\
    \ do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      parens =\
    \ parens + 1\n    elseif c == \">\" then\n      parens = parens - 1\n    end\n\
    \    if parens < 0 then\n      return false\n    end\n  end\n  return parens ==\
    \ 0\nend", "    local b_open, b_close = 0, 0\n    for i = 1, #brackets do\n  \
    \      if brackets:sub(i, i) == \"<\" then\n            b_open = b_open + 1\n\
    \        else\n            b_close = b_close + 1\n        end\n    end\n    return\
    \ b_open == b_close\nend", "  local brackets_stack = Stack:new()\n  local not_matched\
    \ = false\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i, i)\n\
    \    if bracket == \"<\" then\n      brackets_stack:push(bracket)\n    elseif\
    \ bracket == \">\" then\n      if brackets_stack:is_empty() then\n        not_matched\
    \ = true\n        break\n      else\n        brackets_stack:pop()\n      end\n\
    \    end\n  end\n  return not not_matched and brackets_stack:is_empty()\nend",
  "    local open = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            open = open + 1\n        elseif\
    \ c == \">\" then\n            open = open - 1\n        end\n        if open <\
    \ 0 then\n            return false\n        end\n    end\n    return open == 0\n\
    end", "  -- YOUR CODE HERE\n  local count = 0\n  for i = 1, #brackets do\n   \
    \ if brackets:sub(i, i) == \"<\" then\n      count = count + 1\n    elseif brackets:sub(i,\
    \ i) == \">\" then\n      count = count - 1\n    end\n    if count < 0 then\n\
    \      return false\n    end\n  end\n  if count == 0 then\n    return true\n \
    \ else\n    return false\n  end\nend", "    if #brackets == 0 then\n        return\
    \ true\n    end\n    local count = 0\n    for i = 1, #brackets do\n        if\
    \ brackets:sub(i, i) == \"<\" then\n            count = count + 1\n        else\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend", "  local\
    \ level = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n   \
    \ if c == \"<\" then\n      level = level + 1\n    elseif c == \">\" then\n  \
    \    level = level - 1\n    end\n    if level < 0 then\n      return false\n \
    \   end\n  end\n  return level == 0\nend", "  -- strings have a length, which\
    \ is their number of characters\n  local length = #brackets", "    local opens\
    \ = 0\n    for i = 1, #brackets do\n        local char = brackets:sub(i, i)\n\
    \        if char == \"<\" then\n            opens = opens + 1\n        elseif\
    \ char == \">\" then\n            opens = opens - 1\n            if opens < 0\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return opens == 0\nend", "    local open, close = 0, 0\n    for c in brackets:gmatch(\"\
    .\") do\n        if c == \"<\" then\n            open = open + 1\n        elseif\
    \ c == \">\" then\n            close = close + 1\n        end\n    end\n    return\
    \ open == close\nend", "\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal\
    \ char = brackets:sub(i, i)\n\t\tif char == \"<\" then\n\t\t\ttable.insert(stack,\
    \ char)\n\t\telseif char == \">\" then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn #stack\
    \ == 0\nend", "  local depth = 0\n  for _, char in ipairs(brackets) do\n    if\
    \ char == \"<\" then\n      depth = depth + 1\n    elseif char == \">\" then\n\
    \      depth = depth - 1\n    end\n    if depth < 0 then\n      return false\n\
    \    end\n  end\n  return depth == 0\nend", "\tlocal stack = {}\n\tfor i = 1,\
    \ #brackets do\n\t\tlocal b = brackets:sub(i, i)\n\t\tif b == '<' then\n\t\t\t\
    table.insert(stack, b)\n\t\telseif b == '>' then\n\t\t\tif #stack == 0 then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\tend\n\tend\n\treturn\
    \ #stack == 0\nend", "    local stack = {}\n    for i = 1, #brackets do\n    \
    \    local c = brackets:sub(i, i)\n        if c == \"<\" then\n            table.insert(stack,\
    \ c)\n        elseif c == \">\" then\n            local s = table.remove(stack)\n\
    \            if not s then\n                return false\n            end\n  \
    \      end\n    end\n    return #stack == 0\nend", "\tlocal opening_brackets =\
    \ {}\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\t\
    if bracket == \"<\" then\n\t\t\topening_brackets[#opening_brackets + 1] = bracket\n\
    \t\telseif bracket == \">\" then\n\t\t\tlocal prev_bracket = opening_brackets[#opening_brackets]\n\
    \t\t\tif prev_bracket ~= \"<\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\topening_brackets[#opening_brackets]\
    \ = nil\n\t\tend\n\tend\n\treturn #opening_brackets == 0\nend", "    local open_brackets\
    \ = 0\n    for i = 1, #brackets do\n        local b = brackets:sub(i, i)\n   \
    \     if b == \"<\" then\n            open_brackets = open_brackets + 1\n    \
    \    elseif b == \">\" then\n            open_brackets = open_brackets - 1\n \
    \           if open_brackets < 0 then\n                return false\n        \
    \    end\n        end\n    end\n    return open_brackets == 0\nend", "    local\
    \ bracket_stack = {}\n    for i = 1, #brackets do\n        local char = brackets:sub(i,\
    \ i)\n        if char == \"<\" then\n            bracket_stack[#bracket_stack\
    \ + 1] = \"<\"\n        elseif char == \">\" then\n            if #bracket_stack\
    \ > 0 then\n                bracket_stack[#bracket_stack] = nil\n            else\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ #bracket_stack == 0\nend", "\tlocal check_stack = {}\n\tfor char in brackets:gmatch(\"\
    .\") do\n\t\tif char == \"<\" then\n\t\t\ttable.insert(check_stack, char)\n\t\t\
    elseif char == \">\" then\n\t\t\tlocal last_char = table.remove(check_stack)\n\
    \t\t\tif last_char ~= \"<\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn #check_stack == 0\nend", "\tlocal open_positions = {}\n\tlocal open_count\
    \ = 0\n\tlocal close_count = 0\n\tfor i = 1, #brackets do\n\t\tlocal ch = brackets:sub(i,\
    \ i)\n\t\tif ch == \"<\" then\n\t\t\topen_count = open_count + 1\n\t\t\topen_positions[open_count]\
    \ = i\n\t\telseif ch == \">\" then\n\t\t\tclose_count = close_count + 1\n\t\t\t\
    if open_count > 0 then\n\t\t\t\topen_count = open_count - 1\n\t\t\t\topen_positions[open_count\
    \ + 1] = nil\n\t\t\telse\n\t\t\t\t-- closing bracket with no matching opening\
    \ bracket.\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn open_count\
    \ == 0\nend", "\tlocal stack = {}\n\tfor i=1, #brackets do\n\t\tlocal char = brackets:sub(i,i)\n\
    \t\tif char == \"<\" then\n\t\t\tstack[#stack+1] = char\n\t\telseif char == \"\
    >\" then\n\t\t\tif stack[#stack] == \"<\" then\n\t\t\t\tstack[#stack] = nil\n\t\
    \t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack ==\
    \ 0\nend", "  brackets = brackets:gsub(\"[^<>]\", \"\")\n  local depth = 0\n \
    \ local length = brackets:len()\n  for i = 1, length do\n    local b = brackets:sub(i,\
    \ i)\n    if b == \"<\" then\n      depth = depth + 1\n    else\n      depth =\
    \ depth - 1\n    end\n    if depth < 0 then\n      return false\n    end\n  end\n\
    \  return depth == 0\nend", "\tlocal bracket_count = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\tbracket_count = bracket_count\
    \ + 1\n\t\telse\n\t\t\tbracket_count = bracket_count - 1\n\t\t\tif bracket_count\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn bracket_count\
    \ == 0\nend", "  local stack = Stack()\n  for i = 1, #brackets do\n    local c\
    \ = brackets:sub(i, i)\n    if c == \"<\" then\n      stack:push(c)\n    elseif\
    \ c == \">\" then\n      if stack:is_empty() then\n        return false\n    \
    \  else\n        stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\n\
    end", "    local count = 0\n    for _, ch in ipairs(utf8.totable(brackets)) do\n\
    \        if ch == '<' then\n            count = count + 1\n        elseif ch ==\
    \ '>' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "  local level = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n\
    \    if c == \"<\" then\n      level = level + 1\n    elseif c == \">\" then\n\
    \      level = level - 1\n    end\n    if level < 0 then\n      return false\n\
    \    end\n  end\n  return level == 0\nend", "  local depth = 0\n  for char in\
    \ brackets:gmatch(\".\") do\n    if char == \"<\" then\n      depth = depth +\
    \ 1\n    elseif char == \">\" then\n      depth = depth - 1\n    end\n    if depth\
    \ < 0 then\n      return false\n    end\n  end\n  return depth == 0\nend", " \
    \   local function check_bracketing(brackets, open_bracket_count)\n        if\
    \ #brackets == 0 then\n            return open_bracket_count == 0\n        elseif\
    \ string.sub(brackets, 1, 1) == \"<\" then\n            return check_bracketing(string.sub(brackets,\
    \ 2), open_bracket_count + 1)\n        elseif string.sub(brackets, 1, 1) == \"\
    >\" then\n            return check_bracketing(string.sub(brackets, 2), open_bracket_count\
    \ - 1)\n        else\n            error(\"bad bracket\")\n        end\n    end\n\
    \    return check_bracketing(brackets, 0)\nend", "  local function get_bracket_count(brackets,\
    \ bracket)\n    local count = 0\n    for i = 1, #brackets do\n      if brackets:sub(i,\
    \ i) == bracket then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  end", "    local answer = true\n    local count = 0\n    for i = 1,\
    \ string.len(brackets) do\n        local c = string.sub(brackets, i, i)\n    \
    \    if c == '<' then\n            count = count + 1\n        elseif c == '>'\
    \ then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "  local stack = {}\n  for i=1,#brackets do\n    local b = brackets:sub(i,i)\n \
    \   if b == \"<\" then\n      table.insert(stack, b)\n    elseif b == \">\" then\n\
    \      local last = table.remove(stack)\n      if last ~= \"<\" then\n       \
    \ return false\n      end\n    end\n  end\n  return #stack == 0\nend", "  if brackets:find(\"\
    <>\") then return false end\n  local stack = {}\n  for i = 1, #brackets do\n \
    \   local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ \"<\")\n    elseif c == \">\" then\n      if #stack == 0 then return false end\n\
    \      local top = table.remove(stack)\n      if top ~= \"<\" then return false\
    \ end\n    end\n  end\n  return #stack == 0\nend", "  -- FIXME: simple algorithm\
    \ below, needs to be improved\n  local depth = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"<\" then\n      depth = depth + 1\n    elseif c == \">\"\
    \ then\n      depth = depth - 1\n    end\n    if depth < 0 then\n      return\
    \ false\n    end\n  end\n  return depth == 0\nend", "    local counter = 0\n \
    \   for c in brackets:gmatch(\".\") do\n        if c == \"<\" then\n         \
    \   counter = counter + 1\n        elseif c == \">\" then\n            counter\
    \ = counter - 1\n        end\n        if counter < 0 then\n            return\
    \ false\n        end\n    end\n    return counter == 0\nend", "\tlocal balance\
    \ = 0\n\tfor s in brackets:gmatch(\".\") do\n\t\tif s == \"<\" then\n\t\t\tbalance\
    \ = balance + 1\n\t\telseif s == \">\" then\n\t\t\tbalance = balance - 1\n\t\t\
    \tif balance < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ balance == 0\nend", "    local c = 0\n    for b in brackets:gmatch(\".\") do\n\
    \        if b == \"<\" then\n            c = c + 1\n        elseif b == \">\"\
    \ then\n            c = c - 1\n        end\n        if c < 0 then\n          \
    \  return false\n        end\n    end\n    return c == 0\nend", "\tlocal stack\
    \ = {}\n\tfor i = 1, #brackets do\n\t\tlocal char = brackets:sub(i, i)\n\t\tif\
    \ char == \"<\" then\n\t\t\ttable.insert(stack, char)\n\t\telseif char == \">\"\
    \ then\n\t\t\tif #stack > 0 then\n\t\t\t\ttable.remove(stack)\n\t\t\telse\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "   \
    \ local last_pos = 1\n    local left = 0\n    local right = 0\n    while last_pos\
    \ <= #brackets do\n        local pos = brackets:find(\"[><]\", last_pos)\n   \
    \     if not pos then\n            break\n        end\n        local ch = brackets:sub(pos,\
    \ pos)\n        if ch == \"<\" then\n            left = left + 1\n        else\n\
    \            right = right + 1\n        end\n        last_pos = pos + 1\n    end\n\
    \    if left == right then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local stack = Stack:new()\n    for i = 1, #brackets do\n\
    \        local char = brackets:sub(i, i)\n        if char == \"<\" then\n    \
    \        stack:push(char)\n        elseif char == \">\" then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend", " \
    \   brackets = brackets:gsub(\"%[\", \"<\")\n    brackets = brackets:gsub(\"%]\"\
    , \">\")\n    brackets = brackets:gsub(\"%{\", \"<\")\n    brackets = brackets:gsub(\"\
    %}\", \">\")\n    brackets = brackets:gsub(\"%(\", \"<\")\n    brackets = brackets:gsub(\"\
    %)\", \">\")\n    brackets = brackets:gsub(\"\\\\\", \"\")\n    local open_brackets\
    \ = 0\n    for i = 1, brackets:len() do\n        local c = brackets:sub(i, i)\n\
    \        if c == \"<\" then\n            open_brackets = open_brackets + 1\n \
    \       elseif c == \">\" then\n            open_brackets = open_brackets - 1\n\
    \        end\n        if open_brackets < 0 then\n            return false\n  \
    \      end\n    end\n    return open_brackets == 0\nend", "    local depth = 0\n\
    \    for _, b in utf8.codes(brackets) do\n        if b == 60 then -- 60 is the\
    \ utf8 code for \"<\"\n            depth = depth + 1\n        elseif b == 62 then\
    \ -- 62 is the utf8 code for \">\"\n            depth = depth - 1\n        end\n\
    \        if depth < 0 then return false end\n    end\n    return depth == 0\n\
    end", "    local level = 0\n    for i = 1, #brackets do\n        local ch = brackets:sub(i,\
    \ i)\n        if ch == \"<\" then\n            level = level + 1\n        elseif\
    \ ch == \">\" then\n            level = level - 1\n        end\n        if level\
    \ < 0 then\n            return false\n        end\n    end\n    return level ==\
    \ 0\nend", '  local stack = {}', "\tlocal n = 0\n\tfor i = 1, brackets:len() do\n\
    \t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\tn = n + 1\n\t\t\
    elseif c == \">\" then\n\t\t\tn = n - 1\n\t\tend\n\t\tif n < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn n == 0\nend", "  local open = 0\n  for _, c\
    \ in utf8.codes(brackets) do\n    if c == utf8.codepoint(\"<\") then\n      open\
    \ = open + 1\n    elseif c == utf8.codepoint(\">\") then\n      open = open -\
    \ 1\n    end\n    if open < 0 then\n      return false\n    end\n  end\n  return\
    \ open == 0\nend", "\tlocal open_brackets = 0", "\tlocal n_open = 0\n\tfor i =\
    \ 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\
    \t\tn_open = n_open + 1\n\t\telseif c == \">\" then\n\t\t\tn_open = n_open - 1\n\
    \t\t\tif n_open < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\t\
    return n_open == 0\nend", "    local i = 0\n    for b in brackets:gmatch(\".\"\
    ) do\n        if b == \"<\" then\n            i = i + 1\n        elseif b == \"\
    >\" then\n            i = i - 1\n        end\n        if i < 0 then\n        \
    \    return false\n        end\n    end\n    return i == 0\nend", "    local i\
    \ = 1\n    local stack = {}\n    while i <= #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            table.insert(stack, c)\n       \
    \ elseif c == \">\" then\n            local op = table.remove(stack)\n       \
    \     if not op or op ~= \"<\" then\n                return false\n          \
    \  end\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend",
  "  local count = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n\
    \    if c == \"<\" then\n      count = count + 1\n    elseif c == \">\" then\n\
    \      count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend", "\tif brackets == \"\" then\n\t\t\
    return true\n\telseif brackets:sub(1, 1) == \"<\" then\n\t\tlocal index = brackets:find(\"\
    >\")\n\t\tif index == nil then\n\t\t\treturn false\n\t\telse\n\t\t\treturn correct_bracketing(brackets:sub(index\
    \ + 1))\n\t\tend\n\telse\n\t\treturn false\n\tend\nend", "    local level = 0\n\
    \    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if\
    \ c == \"<\" then\n            level = level + 1\n        elseif c == \">\" then\n\
    \            level = level - 1\n        end\n        if level < 0 then\n     \
    \       return false\n        end\n    end\n    return level == 0\nend", "   \
    \ local opening = 0\n    for i = 1, #brackets do\n        local b = brackets:sub(i,\
    \ i)\n        if b == \"<\" then\n            opening = opening + 1\n        elseif\
    \ b == \">\" then\n            opening = opening - 1\n            if opening <\
    \ 0 then\n                return false\n            end\n        end\n    end\n\
    \    return opening == 0\nend", "    local c = 0\n    for i = 1, brackets:len()\
    \ do\n        local b = brackets:sub(i, i)\n        if b == \"<\" then\n     \
    \       c = c + 1\n        elseif b == \">\" then\n            c = c - 1\n   \
    \     end\n        if c < 0 then\n            return false\n        end\n    end\n\
    \    return c == 0\nend", "  local stack = {}\n  for i = 1, #brackets do\n   \
    \ local c = brackets:sub(i, i)\n    if c == \"<\" then\n      table.insert(stack,\
    \ c)\n    elseif c == \">\" then\n      local top = table.remove(stack)\n    \
    \  if top ~= \"<\" then\n        return false\n      end\n    end\n  end\n  return\
    \ #stack == 0\nend", "    local stack = {}\n    for i=1,#brackets do\n       \
    \ local x = brackets:sub(i,i)\n        if x == '<' then\n            table.insert(stack,x)\n\
    \        elseif x == '>' then\n            if #stack == 0 then\n             \
    \   return false\n            else\n                table.remove(stack)\n    \
    \        end\n        end\n    end\n    return #stack == 0\nend", "\tlocal opening\
    \ = 0\n\tfor i = 1,#brackets do\n\t\tif brackets:sub(i,i) == \"<\" then\n\t\t\t\
    opening = opening + 1\n\t\telse\n\t\t\topening = opening - 1\n\t\t\tif opening\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn opening\
    \ == 0\nend", "    local stack = Stack.new()\n    for i = 1, #brackets do\n  \
    \      local c = brackets:sub(i, i)\n        if c == \"<\" then\n            stack:push(c)\n\
    \        elseif c == \">\" then\n            if stack:pop() ~= \"<\" then\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ stack:is_empty()\nend", "  -- initialize an empty stack\n  local stack = {}\n\
    \  -- iterate through the brackets\n  for _, char in ipairs(brackets) do\n   \
    \ -- if it's an opening bracket, add it to the stack\n    if char == \"<\" then\n\
    \      table.insert(stack, char)\n    -- if it's a closing bracket, pop the top\
    \ element of the stack\n    elseif char == \">\" then\n      table.remove(stack)\n\
    \    end\n  end\n  -- if the stack is empty at the end, we had a corresponding\
    \ closing bracket for every opening one\n  return #stack == 0\nend", "  local\
    \ openers = brackets:gmatch('<')\n  local closers = brackets:gmatch('>')\n  local\
    \ stack = {}\n  local is_ok = true\n  for opener in openers do\n    table.insert(stack,\
    \ opener)\n  end\n  for closer in closers do\n    if #stack == 0 then\n      is_ok\
    \ = false\n      break\n    end\n    table.remove(stack)\n  end\n  if #stack >\
    \ 0 then\n    is_ok = false\n  end\n  return is_ok\nend", "  return brackets:match(\"\
    ^%s*$\") ~= nil\nend", "  local function closing_to_opening(b)\n    if b == '<'\
    \ then return '>' end\n    if b == '>' then return '<' end\n    error('bad bracket')\n\
    \  end\n  local stack = {}\n  for i = 1, #brackets do\n    local b = brackets:sub(i,\
    \ i)\n    if b == '<' then\n      stack[#stack + 1] = b\n    elseif b == '>' then\n\
    \      if #stack == 0 then return false end\n      if stack[#stack] ~= closing_to_opening(b)\
    \ then return false end\n      stack[#stack] = nil\n    else\n      error('bad\
    \ bracket')\n    end\n  end\n  return #stack == 0\nend", "\tlocal stack = {}\n\
    \tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\t\t\ttable.insert(stack,\
    \ 1, \"<\")\n\t\telseif c == \">\" then\n\t\t\tlocal popped = table.remove(stack,\
    \ 1)\n\t\t\tif popped ~= \"<\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn #stack == 0\nend", "\tlocal bracket_stack = Stack()\n\tfor c in\
    \ brackets:gmatch(\".\") do\n\t\tif c == \"<\" then\n\t\t\tbracket_stack:push(\"\
    <\")\n\t\telseif c == \">\" then\n\t\t\tif bracket_stack:empty() then\n\t\t\t\t\
    return false\n\t\t\telse\n\t\t\t\tbracket_stack:pop()\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn bracket_stack:empty()\nend", "\tif brackets == \"\" then\n\t\treturn\
    \ true\n\telseif brackets:sub(1, 1) == \">\" then\n\t\treturn false\n\telseif\
    \ brackets:sub(1, 1) == \"<\" then\n\t\treturn correct_bracketing(brackets:sub(2))\n\
    \telse\n\t\tassert(false)\n\tend\nend", "  local open  = 0\n  local close = 0\n\
    \  for i = 1, #brackets do\n    local b = brackets:sub(i, i)\n    if b == \"<\"\
    \ then\n      open = open + 1\n    elseif b == \">\" then\n      close = close\
    \ + 1\n    end\n    if close > open then\n      return false\n    end\n  end\n\
    \  return open == close\nend", "    -- TODO: Implement\n    return false\nend",
  "\tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == \"<\"\
    \ then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\
    \tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn count == 0\n\
    end", "    if brackets == \"\" then\n        return true\n    elseif brackets:sub(1,\
    \ 1) == \"<\" then\n        local last_pos = brackets:find(\">\")\n        if\
    \ last_pos then\n            return correct_bracketing(brackets:sub(last_pos +\
    \ 1))\n        else\n            return false\n        end\n    else\n       \
    \ return false\n    end\nend", "\tif brackets == \"\" then\n\t\treturn true\n\t\
    elseif brackets:find(\"<>\") or brackets:find(\"<$\") or brackets:find(\"^>\"\
    ) then\n\t\treturn false\n\telse\n\t\treturn correct_bracketing(brackets:gsub(\"\
    <>\", \"\"))\n\tend\nend", "  local len = string.len(brackets)\n  if len % 2 ~=\
    \ 0 then\n    return false\n  end\n  local stack = {}\n  for i = 1, len do\n \
    \   local c = string.sub(brackets, i, i)\n    if c == \"<\" then\n      stack[#stack\
    \ + 1] = c\n    elseif c == \">\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack\
    \ == 0\nend", "    local stack = {}\n    for i = 1, #brackets do\n        local\
    \ c = brackets:sub(i, i)\n        if c == \"<\" then\n            table.insert(stack,\
    \ \"<\")\n        elseif c == \">\" then\n            if #stack == 0 then\n  \
    \              return false\n            end\n            table.remove(stack)\n\
    \        end\n    end\n    return #stack == 0\nend", "\tlocal stack = {}\n\tfor\
    \ i = 1, #brackets do\n\t\tlocal b = brackets:sub(i, i)\n\t\tif b == '<' then\n\
    \t\t\ttable.insert(stack, b)\n\t\telseif b == '>' then\n\t\t\tif #stack == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\tif stack[#stack] == '<' then\n\t\t\t\t\
    table.remove(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn #stack == 0\nend", "\twhile true do\n\t\tlocal empty = brackets:match(\"\
    <>\")\n\t\tif empty then\n\t\t\tbrackets = brackets:gsub(\"<>\", \"\")\n\t\telse\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn brackets == \"\"\nend", "    local open_count\
    \ = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n   \
    \     if c == \"<\" then\n            open_count = open_count + 1\n        elseif\
    \ c == \">\" then\n            open_count = open_count - 1\n        end\n    \
    \    if open_count < 0 then\n            return false\n        end\n    end\n\
    \    return open_count == 0\nend", "\tlocal L = 0\n\tlocal stack = {}\n\t\n\t\
    for char in brackets:gmatch(\".\") do\n\t\tif char == \"<\" then\n\t\t\tL = L\
    \ + 1\n\t\t\tstack[L] = char\n\t\telseif char == \">\" then\n\t\t\tif L == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[L] = nil\n\t\t\tL = L - 1\n\t\tend\n\
    \tend\n\t\n\treturn L == 0\nend", "    -- keep track of how many brackets we still\
    \ have to match\n    local to_match = 0\n    -- the character at i is \">\"\n\
    \    for i=1, #brackets do\n        if brackets:sub(i,i) == \"<\" then\n     \
    \       to_match = to_match + 1\n        else\n            to_match = to_match\
    \ - 1\n            if to_match < 0 then\n                return false\n      \
    \      end\n        end\n    end\n    return to_match == 0\nend", "\tlocal open_count\
    \ = 0\n\tlocal in_correct_bracketing = true\n\tfor i=1,#brackets do\n\t\tlocal\
    \ bracket = brackets:sub(i,i)\n\t\tif bracket == \"<\" then\n\t\t\topen_count\
    \ = open_count + 1\n\t\telseif bracket == \">\" then\n\t\t\topen_count = open_count\
    \ - 1\n\t\tend\n\t\tif open_count < 0 then\n\t\t\tin_correct_bracketing = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\tif open_count > 0 then\n\t\tin_correct_bracketing\
    \ = false\n\tend\n\treturn in_correct_bracketing\nend", "    local stack = {}\n\
    \    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if\
    \ c == \"<\" then\n            stack[#stack + 1] = \"<\"\n        elseif c ==\
    \ \">\" then\n            if #stack == 0 then\n                return false\n\
    \            end\n            stack[#stack] = nil\n        end\n    end\n    return\
    \ #stack == 0\nend", "\tlocal n = 0\n\tfor i = 1,#brackets do\n\t\tif brackets:sub(i,i)\
    \ == \"<\" then\n\t\t\tn = n + 1\n\t\telse\n\t\t\tn = n - 1\n\t\tend\n\t\tif n\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn n == 0\nend", "\treturn\
    \ brackets:find('%[%[') == nil and brackets:find('%[%<') == nil and brackets:find('%[%>')\
    \ == nil and brackets:find('%<%<') == nil and brackets:find('%<%[') == nil and\
    \ brackets:find('%<%>') == nil and brackets:find('%>%[') == nil and brackets:find('%>%<')\
    \ == nil and brackets:find('%>%>') == nil\nend", "  local stack = Stack:new()\n\
    \  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c == \"<\"\
    \ then\n      stack:push(c)\n    elseif c == \">\" then\n      if stack:is_empty()\
    \ then\n        return false\n      else\n        stack:pop()\n      end\n   \
    \ end\n  end\n  return stack:is_empty()\nend", "  local cnt = 0\n  for i = 1,\
    \ #brackets do\n    if brackets:sub(i, i) == \"<\" then\n      cnt = cnt + 1\n\
    \    else\n      cnt = cnt - 1\n    end\n    if cnt < 0 then\n      return false\n\
    \    end\n  end\n  return cnt == 0\nend", "  local stack = {}\n  for char in brackets:gmatch(\"\
    .\") do\n    if char == \"<\" then\n      table.insert(stack, char)\n    elseif\
    \ char == \">\" then\n      if #stack == 0 then\n        return false\n      end\n\
    \      table.remove(stack)\n    end\n  end\n  return #stack == 0\nend", "  local\
    \ stack = Stack:new()\n  local top = function() return stack:top() end\n  local\
    \ pop = function() return stack:pop() end\n  local push = function(b) return stack:push(b)\
    \ end\n  local is_empty = function() return stack:is_empty() end\n  for _, b in\
    \ ipairs(brackets) do\n    if b == \"<\" then\n      push(b)\n    elseif b ==\
    \ \">\" then\n      if is_empty() then\n        return false\n      else\n   \
    \     pop()\n      end\n    end\n  end\n  return is_empty()\nend", "  local bracket_count\
    \ = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == \"<\" then\n  \
    \    bracket_count = bracket_count + 1\n    elseif brackets:sub(i, i) == \">\"\
    \ then\n      bracket_count = bracket_count - 1\n    end\n    if bracket_count\
    \ < 0 then\n      return false\n    end\n  end\n  return bracket_count == 0\n\
    end", "    local n = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == \"<\" then\n            n = n + 1\n        else\n            n = n - 1\n\
    \        end\n        if n < 0 then\n            return false\n        end\n \
    \   end\n    return n == 0\nend", "  local stack = {}\n  for i=1,#brackets do\n\
    \    local c = brackets:sub(i,i)\n    if c == \"<\" then\n      stack[#stack+1]\
    \ = true\n    elseif c == \">\" then\n      if #stack == 0 then\n        return\
    \ false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack\
    \ == 0\nend", "    local open = 0\n    for i = 1, #brackets do\n        local\
    \ char = brackets:sub(i, i)\n        if char == \"<\" then\n            open =\
    \ open + 1\n        elseif char == \">\" then\n            open = open - 1\n \
    \       end\n        if open < 0 then\n            return false\n        end\n\
    \    end\n    return open == 0\nend", "  while brackets:find('<>') do\n    brackets\
    \ = brackets:gsub('<>', '')\n  end\n  if brackets:len() == 0 then\n    return\
    \ true\n  else\n    return false\n  end\nend", "\tlocal level = 0\n\tfor i = 1,\
    \ #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\
    \tlevel = level + 1\n\t\telseif c == \">\" then\n\t\t\tlevel = level - 1\n\t\t\
    \tif level < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ level == 0\nend", "  local nbrackets = 0\n  for ch in brackets:gmatch(\".\"\
    ) do\n    if ch == \"<\" then\n      nbrackets = nbrackets + 1\n    elseif ch\
    \ == \">\" then\n      nbrackets = nbrackets - 1\n    end\n    if nbrackets <\
    \ 0 then\n      return false\n    end\n  end\n  return nbrackets == 0\nend", " \
    \   local position = 1\n    local first_bracket = brackets:sub(position, position)\n\
    \    local num_left = 0\n    local num_right = 0\n    if first_bracket == '<'\
    \ then\n        num_left = 1\n    elseif first_bracket == '>' then\n        num_right\
    \ = 1\n    end\n    while position <= brackets:len() do\n        local char =\
    \ brackets:sub(position, position)\n        if char == '<' then\n            num_left\
    \ = num_left + 1\n        elseif char == '>' then\n            num_right = num_right\
    \ + 1\n        end\n        position = position + 1\n    end\n    return num_left\
    \ == num_right\nend", '  local depth = 0', "    brackets = brackets:gsub(\"%[\"\
    , \"<\")\n    brackets = brackets:gsub(\"%]\", \">\")\n    local count = 0\n \
    \   for c in brackets:gmatch(\".\") do\n        if c == \"<\" then\n         \
    \   count = count + 1\n        elseif c == \">\" then\n            count = count\
    \ - 1\n        end\n        if count < 0 then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend", "  local n = #brackets\n  if n\
    \ % 2 ~= 0 then\n    return false\n  end\n  local stack = Stack.new()\n  for i\
    \ = 1, n do\n    local char = brackets:sub(i, i)\n    if char == \"<\" then\n\
    \      stack:push(char)\n    elseif char == \">\" then\n      if stack:is_empty()\
    \ then\n        return false\n      end\n      stack:pop()\n    end\n  end\n \
    \ return stack:is_empty()\nend", "    local count = 0\n    for char in brackets:gmatch\"\
    .\" do\n        if char == \"<\" then\n            count = count + 1\n       \
    \ elseif char == \">\" then\n            count = count - 1\n        end\n    \
    \    if count < 0 then\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal\
    \ c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\tt_insert(stack, c)\n\t\
    \telseif c == \">\" then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\t\tt_remove(stack)\n\t\tend\n\tend\n\treturn #stack == 0\nend", "  \
    \  local stack = {}\n    for _, c in utf8.codes(brackets) do\n        if c ==\
    \ utf8.codepoint(\"<\") then\n            table.insert(stack, c)\n        elseif\
    \ c == utf8.codepoint(\">\") then\n            if #stack == 0 then\n         \
    \       return false\n            end\n            table.remove(stack)\n     \
    \   end\n    end\n    return #stack == 0\nend", "    local stack = Stack:new()\n\
    \    for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if\
    \ c == \"<\" then\n            stack:push(1)\n        elseif c == \">\" then\n\
    \            if stack:top() then\n                stack:pop()\n            else\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ stack:empty()\nend", "    local depth = 0\n    for i = 1, #brackets do\n   \
    \     local char = brackets:sub(i, i)\n        if char == \"<\" then\n       \
    \     depth = depth + 1\n        elseif char == \">\" then\n            depth\
    \ = depth - 1\n        end\n        if depth < 0 then\n            return false\n\
    \        end\n    end\n    return depth == 0\nend", "  local bt = {}\n  for i=1,#brackets\
    \ do\n    local c = brackets:sub(i,i)\n    if c == '<' then\n      table.insert(bt,\
    \ c)\n    elseif c == '>' then\n      local bc = table.remove(bt)\n      if bc\
    \ ~= '<' then\n        return false\n      end\n    end\n  end\n  return #bt ==\
    \ 0\nend", "    local stack = 0\n    for c in brackets:gmatch(\".\") do\n    \
    \    if c == \"<\" then\n            stack = stack + 1\n        elseif c == \"\
    >\" then\n            stack = stack - 1\n        end\n        if stack < 0 then\n\
    \            return false\n        end\n    end\n    return stack == 0\nend",
  "  local stack = Stack()\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == \"<\" then\n      stack:push(bracket)\n    elseif bracket\
    \ == \">\" then\n      if stack:is_empty() then\n        return false\n      else\n\
    \        stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\nend",
  "    local depth = 0\n    for i=1,#brackets do\n        local ch = brackets:sub(i,i)\n\
    \        if ch == \"<\" then\n            depth = depth + 1\n        elseif ch\
    \ == \">\" then\n            depth = depth - 1\n            if depth < 0 then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ depth == 0\nend", "\tlocal i = 1\n\twhile i <= brackets:len() do\n\t\tlocal\
    \ j = brackets:find(\"[><]\", i)\n\t\tif not j then return false end\n\t\tif brackets:sub(j,\
    \ j) == \"<\" then\n\t\t\tlocal k = brackets:find(\">\", j + 1)\n\t\t\tif not\
    \ k then return false end\n\t\t\tif brackets:sub(k, k) == \"<\" then return false\
    \ end\n\t\t\tbrackets = brackets:sub(1, j - 1) .. brackets:sub(k + 1)\n\t\t\t\
    i = 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local\
    \ n = #brackets\n  if n % 2 ~= 0 then\n    return false\n  end\n  local i = 1\n\
    \  while i <= n do\n    if brackets:sub(i, i) == \"<\" then\n      local k = brackets:find(\"\
    >\", i + 1)\n      if k == nil then\n        return false\n      end\n      local\
    \ j = brackets:find(\"<\", i + 1)\n      if j ~= nil and j < k then\n        i\
    \ = j\n      else\n        i = k + 1\n      end\n    else\n      return false\n\
    \    end\n  end\n  return true\nend", "  local count = 0\n  for i = 1, #brackets\
    \ do\n    local ch = brackets:sub(i, i)\n    if ch == \"<\" then\n      count\
    \ = count + 1\n    elseif ch == \">\" then\n      count = count - 1\n    end\n\
    \    if count < 0 then\n      return false\n    end\n  end\n  return count ==\
    \ 0\nend", "  local i, stack = 1, {}\n  for c in brackets:gmatch(\".\") do\n \
    \   if c == '<' then\n      stack[#stack+1] = c\n    else\n      if stack[#stack]\
    \ ~= '<' then\n        return false\n      end\n      stack[#stack] = nil\n  \
    \  end\n  end\n  return #stack == 0\nend", "\tlocal stack = {}\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\tif bracket == \"<\" then\n\t\
    \t\ttable.insert(stack, i)\n\t\telseif bracket == \">\" then\n\t\t\tif #stack\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.remove(stack)\n\t\t\
    end\n\tend\n\treturn #stack == 0\nend", "  local len = brackets:len()\n  local\
    \ i = 1\n  local open = 0\n  while i <= len do\n    local c = brackets:sub(i,\
    \ i)\n    if c == \"<\" then\n      open = open + 1\n    elseif c == \">\" then\n\
    \      open = open - 1\n    end\n    if open < 0 then\n      return false\n  \
    \  end\n    i = i + 1\n  end\n  return open == 0\nend", "    local n_open = 0\n\
    \    for _, bracket in ipairs(utf8.totable(brackets)) do\n        if bracket ==\
    \ \"<\" then\n            n_open = n_open + 1\n        elseif bracket == \">\"\
    \ then\n            n_open = n_open - 1\n        end\n        if n_open < 0 then\n\
    \            return false\n        end\n    end\n    return n_open == 0\nend",
  "\tlocal open_count = 0\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i,\
    \ i)\n\t\tif c == \"<\" then\n\t\t\topen_count = open_count + 1\n\t\telseif c\
    \ == \">\" then\n\t\t\topen_count = open_count - 1\n\t\t\tif open_count < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn open_count == 0\nend",
  "  local depth = 0\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == \"<\" then\n      depth = depth + 1\n    elseif bracket\
    \ == \">\" then\n      depth = depth - 1\n    end\n    if depth < 0 then\n   \
    \   return false\n    end\n  end\n  return depth == 0\nend", "\tlocal cnt = 0\n\
    \tfor i = 1, brackets:len() do\n\t\tif brackets:sub(i, i) == \"<\" then\n\t\t\t\
    cnt = cnt + 1\n\t\telse\n\t\t\tcnt = cnt - 1\n\t\tend\n\t\tif cnt < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn cnt == 0\nend", "  local brackets_stack\
    \ = {}\n  for i=1,#brackets do\n    local ch = brackets:sub(i,i)\n    if ch ==\
    \ '<' then\n      table.insert(brackets_stack, '<')\n    elseif ch == '>' then\n\
    \      local last = table.remove(brackets_stack)\n      if last ~= '<' then\n\
    \        return false\n      end\n    end\n  end\n  return #brackets_stack ==\
    \ 0\nend", "\tif brackets:len() % 2 ~= 0 then return false end", "  if brackets:len()\
    \ == 0 then\n    return true\n  end\n  if brackets:sub(1, 1) == '<' then\n   \
    \ local close = brackets:find('>')\n    if close then\n      return correct_bracketing(brackets:sub(close\
    \ + 1))\n    end\n  end\n  return false\nend", "    local counter = 0\n    for\
    \ _, c in ipairs({brackets:byte(1, #brackets)}) do\n        if c == 60 then counter\
    \ = counter + 1 else counter = counter - 1 end\n        if counter < 0 then return\
    \ false end\n    end\n    return counter == 0\nend", "\tlocal left_count = 0\n\
    \tlocal right_count = 0\n\tfor _, bracket in ipairs(brackets) do\n\t\tif bracket\
    \ == '<' then\n\t\t\tleft_count = left_count + 1\n\t\telseif bracket == '>' then\n\
    \t\t\tright_count = right_count + 1\n\t\tend\n\tend\n\tif left_count ~= right_count\
    \ then\n\t\treturn false\n\tend\n\treturn true\nend", "  local unclosed = 0\n\
    \  for c in brackets:gmatch('.') do\n    if c == '<' then\n      unclosed = unclosed\
    \ + 1\n    elseif c == '>' then\n      unclosed = unclosed - 1\n    end\n    if\
    \ unclosed < 0 then\n      return false\n    end\n  end\n  return unclosed ==\
    \ 0\nend", "    local num = 0\n    for i = 1, #brackets do\n        local b =\
    \ brackets:sub(i, i)\n        if b == '<' then\n            num = num + 1\n  \
    \      elseif b == '>' then\n            num = num - 1\n        end\n        if\
    \ num < 0 then\n            return false\n        end\n    end\n    return num\
    \ == 0\nend", "    local stack = {}\n    for c in brackets:gmatch(\".\") do\n\
    \        if c == \"<\" then\n            table.insert(stack, c)\n        elseif\
    \ c == \">\" then\n            local last = table.remove(stack)\n            if\
    \ last ~= \"<\" then\n                return false\n            end\n        end\n\
    \    end\n    return table.getn(stack) == 0\nend", "    local stack = {}\n   \
    \ for i = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c\
    \ == \"<\" then\n            table.insert(stack, c)\n        elseif c == \">\"\
    \ then\n            table.remove(stack)\n        end\n    end\n    return #stack\
    \ == 0\nend", "  local stack = {}\n  for i = 1, #brackets do\n    local c = brackets:sub(i,\
    \ i)\n    if c == \"<\" then\n      table.insert(stack, c)\n    elseif c == \"\
    >\" then\n      if #stack > 0 then\n        table.remove(stack)\n      else\n\
    \        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
  "\tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\
    \t\tif c == \"<\" then\n\t\t\ttable.insert(stack, i)\n\t\telseif c == \">\" then\n\
    \t\t\tlocal last = table.remove(stack)\n\t\t\tif not last then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "  local level\
    \ = 0\n  for i = 1, #brackets do\n    local ch = brackets:sub(i, i)\n    if ch\
    \ == \"<\" then\n      level = level + 1\n    elseif ch == \">\" then\n      level\
    \ = level - 1\n    end\n    if level < 0 then\n      return false\n    end\n \
    \ end\n  return level == 0\nend", "\tlocal open_level = 0\n\tfor i = 1, brackets:len()\
    \ do\n\t\tlocal ch = brackets:sub(i, i)\n\t\tif ch == \"<\" then\n\t\t\topen_level\
    \ = open_level + 1\n\t\telseif ch == \">\" then\n\t\t\topen_level = open_level\
    \ - 1\n\t\t\tif open_level < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn open_level == 0\nend", "    local stack = {}\n    for char in\
    \ brackets:gmatch('.') do\n        if char == '<' then\n            table.insert(stack,\
    \ char)\n        elseif char == '>' then\n            local popped = table.remove(stack)\n\
    \            if popped ~= '<' then\n                return false\n           \
    \ end\n        end\n    end\n    return #stack == 0\nend", "\tbrackets = brackets:gsub(\"\
    <%s-\", \"<\") -- remove spaces\n\tbrackets = brackets:gsub(\"%s->\", \">\") --\
    \ remove spaces\n\tlocal pos = 1\n\tlocal last_open_pos\n\twhile pos <= #brackets\
    \ do\n\t\tlocal b = brackets:sub(pos, pos)\n\t\tif b == \"<\" then\n\t\t\tlast_open_pos\
    \ = pos\n\t\telseif b == \">\" then\n\t\t\tif not last_open_pos then\n\t\t\t\t\
    return false, pos\n\t\t\tend\n\t\t\tlast_open_pos = nil\n\t\tend\n\t\tpos = pos\
    \ + 1\n\tend\n\tif last_open_pos then\n\t\treturn false, last_open_pos\n\tend\n\
    \treturn true\nend", "    local stack = {}\n    for _, bracket in ipairs(string_to_array(brackets))\
    \ do\n        if bracket == '<' then\n            table.insert(stack, '<')\n \
    \       elseif bracket == '>' then\n            if #stack > 0 then\n         \
    \       table.remove(stack)\n            else\n                return false\n\
    \            end\n        end\n    end\n    return #stack == 0\nend", "    local\
    \ n = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == \"<\" then\n\
    \            n = n + 1\n        else\n            n = n - 1\n        end\n   \
    \     if n < 0 then\n            return false\n        end\n    end\n    return\
    \ n == 0\nend", "    -- count is a number, the number of open brackets\n    local\
    \ count = 0\n    for b in brackets:gmatch(\".\") do\n        if b == \"<\" then\n\
    \            count = count + 1\n        elseif b == \">\" then\n            count\
    \ = count - 1\n        end\n        if count < 0 then return false end\n    end\n\
    \    return count == 0\nend", "  local open = 0\n  for i = 1, #brackets do\n \
    \   local char = brackets:sub(i, i)\n    if char == \"<\" then\n      open = open\
    \ + 1\n    elseif char == \">\" then\n      open = open - 1\n    end\n    if open\
    \ < 0 then\n      return false\n    end\n  end\n  return open == 0\nend", "  \
    \  local n = brackets:len()\n    local count = 0\n    for i = 1, n do\n      \
    \  local c = brackets:sub(i, i)\n        if c == \"<\" then\n            count\
    \ = count + 1\n        elseif c == \">\" then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "    -- Count the number of closing brackets.\n\
    \    local n = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \">\" then\n            n = n + 1\n        end\n    end\n\
    \    -- Then check if every closing bracket has a corresponding opening bracket.\n\
    \    -- I.e. the number of opening brackets must be equal to the number of\n \
    \   -- closing brackets.\n    local count = 0\n    for i = 1, #brackets do\n \
    \       local c = brackets:sub(i, i)\n        if c == \"<\" then\n           \
    \ count = count + 1\n        elseif c == \">\" then\n            count = count\
    \ - 1\n        end\n        if count > n then\n            return false\n    \
    \    end\n    end\n    return count == 0\nend", "    local stack = {}\n    for\
    \ i=1,#brackets do\n        local b = brackets:sub(i,i)\n        if b == '<' then\n\
    \            table.insert(stack, i)\n        elseif b == '>' then\n          \
    \  if #stack == 0 then\n                return false\n            end\n      \
    \      table.remove(stack)\n        end\n    end\n    return #stack == 0\nend",
  "\tlocal open_count = 0\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i,\
    \ i)\n\t\tif bracket == \"<\" then\n\t\t\topen_count = open_count + 1\n\t\telseif\
    \ bracket == \">\" then\n\t\t\topen_count = open_count - 1\n\t\t\tif open_count\
    \ < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn open_count\
    \ == 0\nend", "  local count = 0\n  for c in brackets:gmatch(\".\") do\n    if\
    \ c == \"<\" then\n      count = count + 1\n    elseif c == \">\" then\n     \
    \ count = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n\
    \  end\n  return count == 0\nend", "  -- your code here\nend", "    local balance\
    \ = 0\n    for char in brackets:gmatch '.' do\n        if char == '<' then\n \
    \           balance = balance + 1\n        elseif char == '>' then\n         \
    \   balance = balance - 1\n        end\n        if balance < 0 then\n        \
    \    return false\n        end\n    end\n    return balance == 0\nend", "\tlocal\
    \ stack = Stack()\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i,\
    \ i)\n\t\tif bracket == \"<\" then\n\t\t\tstack:push(bracket)\n\t\telseif bracket\
    \ == \">\" then\n\t\t\tif stack:pop() == nil then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn stack:size() == 0\nend", "\tlocal open_brackets\
    \ = 0\n\tfor bracket in brackets:gmatch(\".\") do\n\t\tif bracket == \"<\" then\n\
    \t\t\topen_brackets = open_brackets + 1\n\t\telseif bracket == \">\" then\n\t\t\
    \topen_brackets = open_brackets - 1\n\t\tend\n\t\tif open_brackets < 0 then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn open_brackets == 0\nend", "  local\
    \ count = 0\n  for _, c in utf8.codes(brackets) do\n    if c == 60 then\n    \
    \  count = count + 1\n    elseif c == 62 then\n      count = count - 1\n    end\n\
    \    if count < 0 then\n      return false\n    end\n  end\n  return count ==\
    \ 0\nend", "\tlocal nopen, nclose = 0, 0\n\tfor i = 1, #brackets do\n\t\tlocal\
    \ c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\tnopen = nopen + 1\n\t\t\
    elseif c == \">\" then\n\t\t\tnclose = nclose + 1\n\t\tend\n\tend\n\treturn nopen\
    \ == nclose\nend", "    local top = stack:new()\n    for b in brackets:gmatch(\"\
    .\") do\n        if b == \"<\" then\n            top:push(b)\n        elseif b\
    \ == \">\" then\n            if top:is_empty() then\n                return false\n\
    \            else\n                top:pop()\n            end\n        end\n \
    \   end\n    return top:is_empty()\nend", "    local counter = 0\n    for i =\
    \ 1, brackets:len() do\n        if brackets:sub(i, i) == \"<\" then\n        \
    \    counter = counter + 1\n        else\n            counter = counter - 1\n\
    \        end\n        if counter < 0 then\n            return false\n        end\n\
    \    end\n    return counter == 0\nend", '    local b = brackets', "    local\
    \ bracketing_stack = {}\n    local function has_closing(symbol)\n        local\
    \ count = 0\n        for i = #bracketing_stack, 1, -1 do\n            local s\
    \ = bracketing_stack[i]\n            if s == symbol then\n                bracketing_stack[i]\
    \ = nil\n                count = count + 1\n            end\n        end\n   \
    \     return count\n    end\n    for i = 1, #brackets do\n        local symbol\
    \ = brackets:sub(i, i)\n        if symbol == \"<\" then\n            bracketing_stack[#bracketing_stack\
    \ + 1] = symbol\n        elseif symbol == \">\" then\n            if has_closing(\"\
    <\") == 0 then\n                return false\n            end\n        end\n \
    \   end\n    if #bracketing_stack > 0 then\n        return false\n    end\n  \
    \  return true\nend", "\tlocal depth = 0\n\tfor c in brackets:gmatch(\".\") do\n\
    \t\tif c == \"<\" then\n\t\t\tdepth = depth + 1\n\t\telseif c == \">\" then\n\t\
    \t\tdepth = depth - 1\n\t\t\tif depth < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn depth == 0\nend", "\tlocal n = string.len(brackets)\n\
    \tlocal open_brackets = 0\n\tfor i = 1, n do\n\t\tlocal c = string.sub(brackets,\
    \ i, i)\n\t\tif c == \"<\" then\n\t\t\topen_brackets = open_brackets + 1\n\t\t\
    elseif c == \">\" then\n\t\t\topen_brackets = open_brackets - 1\n\t\tend\n\t\t\
    assert(open_brackets >= 0)\n\tend\n\treturn open_brackets == 0\nend", "  local\
    \ length = #brackets\n  local stack = {}\n  for i = 1, length do\n    local c\
    \ = brackets:sub(i, i)\n    if c == \"<\" then\n      stack[#stack + 1] = \"<\"\
    \n    elseif c == \">\" then\n      if #stack == 0 then\n        return false\n\
    \      end\n      local last = stack[#stack]\n      if last == \"<\" then\n  \
    \      stack[#stack] = nil\n      else\n        return false\n      end\n    end\n\
    \  end\n  return #stack == 0\nend", "  local depth = 0\n  for i = 1, #brackets\
    \ do\n    local ch = brackets:sub(i, i)\n    if ch == \"<\" then\n      depth\
    \ = depth + 1\n    elseif ch == \">\" then\n      depth = depth - 1\n      if\
    \ depth < 0 then\n        return false\n      end\n    end\n  end\n  return depth\
    \ == 0\nend", "\tlocal opened = 0\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i,\
    \ i)\n\t\tif c == \"<\" then\n\t\t\topened = opened + 1\n\t\telseif c == \">\"\
    \ then\n\t\t\topened = opened - 1\n\t\tend\n\t\tif opened < 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn opened == 0\nend", "  -- consume opening brackets\n\
    \  brackets = brackets:gsub(\"[<]+\", function(match)\n    if #match % 2 == 0\
    \ then\n      return match:sub(1,#match/2)\n    else\n      return match:sub(1,#match/2\
    \ + 1)\n    end\n  end)\n  -- consume closing brackets\n  brackets = brackets:gsub(\"\
    [>]+\", function(match)\n    if #match % 2 == 0 then\n      return match:sub(#match/2\
    \ + 1)\n    else\n      return match:sub(#match/2 + 2)\n    end\n  end)\n  return\
    \ brackets == \"\"\nend", "  local stack = {}\n  for c in brackets:gmatch(\".\"\
    ) do\n    if c == \"<\" then\n      table.insert(stack, c)\n    elseif c == \"\
    >\" then\n      local popped = table.remove(stack)\n      if popped ~= \"<\" then\n\
    \        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
  "    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i)\
    \ == \"<\" then\n            count = count + 1\n        else\n            count\
    \ = count - 1\n        end\n        if count < 0 then\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    local level = 0\n   \
    \ for i = 1, #brackets do\n        local char = brackets:sub(i, i)\n        if\
    \ char == \"<\" then\n            level = level + 1\n        elseif char == \"\
    >\" then\n            level = level - 1\n        end\n        if level < 0 then\n\
    \            return false\n        end\n    end\n    return level == 0\nend",
  "    local count = 0\n    for c in brackets:gmatch(\".\") do\n        if c == \"\
    <\" then\n            count = count + 1\n        elseif c == \">\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend", "\tlocal\
    \ stack = {}", "    local count = 0\n    for i=1,#brackets do\n        local c\
    \ = brackets:sub(i,i)\n        if c == \"<\" then\n            count = count +\
    \ 1\n        elseif c == \">\" then\n            count = count - 1\n        end\n\
    \        if count < 0 then\n            return false\n        end\n    end\n \
    \   return count == 0\nend", "    local stack = {}\n    for i = 1, #brackets do\n\
    \        local c = brackets:sub(i, i)\n        if c == \"<\" then\n          \
    \  stack[#stack + 1] = c\n        elseif c == \">\" then\n            if #stack\
    \ > 0 then\n                stack[#stack] = nil\n            else\n          \
    \      return false\n            end\n        end\n    end\n    return #stack\
    \ == 0\nend", "  if #brackets == 0 then\n    return true\n  elseif brackets:match(\"\
    ^%<+%>+\") then\n    return correct_bracketing(brackets:gsub(\"^%<+%>+\", \"\"\
    ))\n  else\n    return false\n  end\nend", "\tlocal stack = {}\n\tlocal bracket\
    \ = brackets:gmatch('.')\n\tfor b in bracket do\n\t\tif b == '<' then\n\t\t\t\
    table.insert(stack, b)\n\t\telseif b == '>' then\n\t\t\tif #stack == 0 then\n\t\
    \t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn #stack == 0\nend", "\tlocal open_count = 0\n\tfor i = 1, #brackets\
    \ do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\tif bracket == \"<\" then\n\t\
    \t\topen_count = open_count + 1\n\t\telseif bracket == \">\" then\n\t\t\topen_count\
    \ = open_count - 1\n\t\t\tif open_count < 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn open_count == 0\nend", "  -- count number of opening\
    \ brackets\n  local open = brackets:gsub(\"[^<]\", \"\"):len()\n  -- count number\
    \ of closing brackets\n  local close = brackets:gsub(\"[^>]\", \"\"):len()\n \
    \ -- return true if equal\n  return open == close\nend", '    local stack = {}',
  "    local n = #brackets\n    for i = 1, n do\n        local b = brackets:sub(i,\
    \ i)\n        if b == \"<\" then\n            -- trying to find a corresponding\
    \ closing bracket\n            -- starting from the current position\n       \
    \     local found = false\n            for j = i + 1, n do\n                if\
    \ brackets:sub(j, j) == \">\" then\n                    found = true\n       \
    \             break\n                end\n            end\n            if not\
    \ found then\n                return false\n            end\n        end\n   \
    \ end\n    return true\nend", "  local s = new_stack()\n  for i = 1, #brackets\
    \ do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n      push(s,\
    \ c)\n    else\n      -- c == \">\"\n      if is_empty(s) then\n        return\
    \ false\n      else\n        pop(s)\n      end\n    end\n  end\n  return is_empty(s)\n\
    end", "    local stack = Stack:new()\n    for i = 1, #brackets do\n        local\
    \ bracket = brackets:sub(i, i)\n        if bracket == \"<\" then\n           \
    \ stack:push(bracket)\n        elseif bracket == \">\" then\n            if stack:is_empty()\
    \ then\n                return false\n            else\n                stack:pop()\n\
    \            end\n        end\n    end\n    return stack:is_empty()\nend", " \
    \   local counter = 0\n    for i = 1, #brackets do\n        local ch = brackets:sub(i,\
    \ i)\n        if ch == \"<\" then\n            counter = counter + 1\n       \
    \ elseif ch == \">\" then\n            counter = counter - 1\n        end\n  \
    \      if counter < 0 then\n            return false\n        end\n    end\n \
    \   return counter == 0\nend", "\tlocal i, m, n = 1, 0, 0\n\twhile i <= #brackets\
    \ do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif c == \"<\" then\n\t\t\tm = m +\
    \ 1\n\t\telseif c == \">\" then\n\t\t\tn = n + 1\n\t\tend\n\t\tif n > m then\n\
    \t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn m == n\nend", "  local\
    \ open = 0\n  for i = 1, #brackets do\n    local ch = brackets:sub(i, i)\n   \
    \ if ch == \"<\" then\n      open = open + 1\n    elseif ch == \">\" then\n  \
    \    open = open - 1\n    end\n    if open < 0 then\n      return false\n    end\n\
    \  end\n  return open == 0\nend", "    local counter = 0\n    for i=1, #brackets\
    \ do\n        local c = brackets:sub(i,i)\n        if c == \"<\" then\n      \
    \      counter = counter + 1\n        elseif c == \">\" then\n            counter\
    \ = counter - 1\n        end\n        if counter < 0 then\n            return\
    \ false\n        end\n    end\n    return counter == 0\nend", "  while brackets:find(\"\
    <>\") do\n    brackets = brackets:gsub(\"<>\", \"\")\n  end\n  return brackets\
    \ == \"\"\nend", "  return brackets:find(\"%b<>\") == nil\nend", '  local num_open
    = 0', "  return brackets:match(\"^%b<>*$\")\nend", "    local open = 0\n    for\
    \ bracket in brackets:gmatch(\".\") do\n        if bracket == \"<\" then\n   \
    \         open = open + 1\n        elseif bracket == \">\" then\n            open\
    \ = open - 1\n        end\n        if open < 0 then\n            return false\n\
    \        end\n    end\n    return open == 0\nend", "    local n = 0\n    for i\
    \ = 1, #brackets do\n        local c = brackets:sub(i, i)\n        if c == \"\
    <\" then\n            n = n + 1\n        elseif c == \">\" then\n            n\
    \ = n - 1\n        end\n        if n < 0 then\n            return false\n    \
    \    end\n    end\n    return n == 0\nend", "  local open_brackets = 0\n  for\
    \ i = 1, #brackets do\n    local c = brackets:sub(i, i)\n    if c == \"<\" then\n\
    \      open_brackets = open_brackets + 1\n    elseif c == \">\" then\n      open_brackets\
    \ = open_brackets - 1\n      if open_brackets < 0 then\n        return false\n\
    \      end\n    end\n  end\n  return open_brackets == 0\nend", "\tlocal depth\
    \ = 0\n\tlocal matches = {\n\t\t[\"<\"] = \">\",\n\t\t[\">\"] = \"<\",\n\t}\n\t\
    for i = 1, #brackets do\n\t\tlocal b = brackets:sub(i, i)\n\t\tif matches[b] then\n\
    \t\t\tdepth = depth + (b == \"<\" and 1 or -1)\n\t\t\tif depth < 0 then\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth == 0\nend", "    local\
    \ counts = {['<'] = 0, ['>'] = 0}\n    for c in brackets:gmatch('[<>]') do\n \
    \       counts[c] = counts[c] + 1\n    end\n    return counts['<'] == counts['>']\n\
    end", "    local stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            table.insert(stack, i)\n       \
    \ elseif c == \">\" then\n            if #stack == 0 then\n                return\
    \ false\n            end\n            table.remove(stack)\n        end\n    end\n\
    \    return #stack == 0\nend", "  brackets = brackets:gsub(\"[^<>]\", \"\")\n\
    \  return brackets:gsub(\"<\", \"\"):gsub(\">\", \"\") == \"\"\nend", "  local\
    \ brackets_stack = Stack.new()\n  local i = 1\n  while i <= #brackets do\n   \
    \ local character = brackets:sub(i, i)\n    if character == \"<\" then\n     \
    \ brackets_stack:push(character)\n    elseif character == \">\" then\n      if\
    \ brackets_stack:is_empty() then\n        return false\n      else\n        brackets_stack:pop()\n\
    \      end\n    end\n    i = i + 1\n  end\n  return brackets_stack:is_empty()\n\
    end", "    local depth = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == \"<\" then\n            depth = depth + 1\n        elseif\
    \ c == \">\" then\n            depth = depth - 1\n            if depth < 0 then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ depth == 0\nend", "\tif #brackets == 0 then\n\t\treturn true\n\tend\n\tlocal\
    \ first_char = brackets:sub(1, 1)\n\tif first_char == \"<\" then\n\t\tfor i =\
    \ 1, #brackets do\n\t\t\tif brackets:sub(i, i) == \">\" then\n\t\t\t\treturn correct_bracketing(brackets:sub(i\
    \ + 1))\n\t\t\tend\n\t\tend\n\t\treturn false\n\telseif first_char == \">\" then\n\
    \t\treturn false\n\telse\n\t\treturn correct_bracketing(brackets:sub(2))\n\tend\n\
    end", "    local stack = {#brackets}\n    for i = 1, #brackets do\n        if\
    \ brackets:sub(i, i) == '<' then\n            table.insert(stack, i)\n       \
    \ else\n            if stack[#stack] + 1 ~= i then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 1\nend", "    local count = 0\n    for c in brackets:gmatch('.') do\n\
    \        if c == '<' then\n            count = count + 1\n        elseif c ==\
    \ '>' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "  local stack = {}\n  for _, c in ipairs(brackets) do\n    if c == \"<\" then\n\
    \      table.insert(stack, \"<\")\n    elseif c == \">\" then\n      if #stack\
    \ == 0 then\n        return false\n      else\n        table.remove(stack)\n \
    \     end\n    end\n  end\n  return #stack == 0\nend", "    local level = 0\n\
    \    for i = 1, #brackets do\n        local bracket = brackets:sub(i, i)\n   \
    \     if bracket == \"<\" then\n            level = level + 1\n        elseif\
    \ bracket == \">\" then\n            level = level - 1\n        end\n        if\
    \ level < 0 then\n            return false\n        end\n    end\n    return level\
    \ == 0\nend", "    local level = 0\n    for c in brackets:gmatch(\".\") do\n \
    \       if c == \"<\" then\n            level = level + 1\n        elseif c ==\
    \ \">\" then\n            level = level - 1\n        end\n        if level < 0\
    \ then\n            return false\n        end\n    end\n    return level == 0\n\
    end", "  local depth = 0\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == \"<\" then\n      depth = depth + 1\n    elseif bracket\
    \ == \">\" then\n      depth = depth - 1\n    end\n    if depth < 0 then\n   \
    \   return false\n    end\n  end\n  return depth == 0\nend", "\tlocal bracket_stack\
    \ = Stack()\n\tlocal closed_brackets = {[\")\"] = true, [\"]\"] = true, [\"}\"\
    ] = true}\n\tlocal open_brackets = {[\"(\"] = true, [\"[\"] = true, [\"{\"] =\
    \ true}\n\tlocal opposite_brackets = {[\"(\"] = \")\", [\"[\"] = \"]\", [\"{\"\
    ] = \"}\"}\n\tlocal i = 1\n\twhile i <= #brackets do\n\t\tlocal b = brackets:sub(i,\
    \ i)\n\t\tif open_brackets[b] then\n\t\t\tbracket_stack:push(b)\n\t\telseif closed_brackets[b]\
    \ then\n\t\t\tlocal open_bracket = bracket_stack:pop()\n\t\t\tif opposite_brackets[open_bracket]\
    \ ~= b then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    if bracket_stack:size() > 0 then\n\t\treturn false\n\tend\n\treturn true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
