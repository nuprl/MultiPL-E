name: HumanEval_26_remove_duplicates
language: lua
prompt: "-- From a list of integers, remove all elements that occur more than once.\n\
  -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1,\
  \ 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local out = {}\n    local hash = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if not hash[v] then\n            hash[v] = true\n            out[#out\
    \ + 1] = v\n        end\n    end\n    return out\nend", "    local result = {}\n\
    \    local seen = {}\n    for _, value in ipairs(numbers) do\n        if not seen[value]\
    \ then\n            result[#result + 1] = value\n            seen[value] = true\n\
    \        end\n    end\n    return result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    unique[number] = true\n  end\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if unique[number] then\n  \
    \    result[#result + 1] = number\n      unique[number] = nil\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for n\
    \ in iterator(numbers) do\n        if not seen[n] then\n            seen[n] =\
    \ true\n            result[#result + 1] = n\n        end\n    end\n    return\
    \ result\nend", "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif not seen[n] then\n\t\t\ttable.insert(result, n)\n\t\t\tseen[n] =\
    \ true\n\t\tend\n\tend\n\treturn result\nend", "  local set = {}\n  local result\
    \ = {}\n  for _, value in ipairs(numbers) do\n    if not set[value] then\n   \
    \   set[value] = true\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend", "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif not seen[n] then\n\t\t\tresult[#result + 1] = n\n\t\t\tseen[n] =\
    \ true\n\t\tend\n\tend\n\treturn result\nend", "  local t = {}\n  for _, n in\
    \ ipairs(numbers) do\n    if not t[n] then\n      t[n] = true\n      coroutine.yield(n)\n\
    \    end\n  end\nend", "\tlocal set = {}\n\tlocal result = {}\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\tif not set[number] then\n\t\t\tset[number] = true\n\
    \t\t\ttable.insert(result, number)\n\t\tend\n\tend\n\treturn result\nend", " \
    \ local result = {}\n  local seen = {}\n  for _, n in ipairs(numbers) do\n   \
    \ if not seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n \
    \   end\n  end\n  return result\nend", "    local list = {}\n    for _,n in ipairs(numbers)\
    \ do\n        if not list[n] then\n            list[n] = true\n            coroutine.yield(n)\n\
    \        end\n    end\nend", "  local seen = {}\n  local unique = {}\n  for _,\
    \ num in ipairs(numbers) do\n    if not seen[num] then\n      unique[#unique +\
    \ 1] = num\n      seen[num] = true\n    end\n  end\n  return unique\nend", " \
    \   local output = {}\n    local tmp = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not tmp[v] then\n            tmp[v] = true\n            table.insert(output,\
    \ v)\n        end\n    end\n    return output\nend", "    -- We do this with a\
    \ Lua table mapping the numbers we've already seen\n    -- to \"true\".\n    local\
    \ seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n     \
    \   if not seen[n] then\n            seen[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend", "    local duplicates = {}\n\
    \    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ duplicates[number] then\n            duplicates[number] = true\n           \
    \ table.insert(unique, number)\n        end\n    end\n    return unique\nend",
  "    local results = {}\n    local tracker = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not tracker[number] then\n            results[#results + 1] =\
    \ number\n            tracker[number] = true\n        end\n    end\n    return\
    \ results\nend", "  local o = {}\n  local s = {}\n  for _, v in ipairs(numbers)\
    \ do\n    if not s[v] then\n      o[#o+1] = v\n      s[v] = true\n    end\n  end\n\
    \  return o\nend", "  local output = {}\n  local met = {}\n  for _,n in ipairs(numbers)\
    \ do\n    if not met[n] then\n      output[#output+1] = n\n      met[n] = true\n\
    \    end\n  end\n  return output\nend", "  local list = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not list[n] then\n      list[n] = true\n      coroutine.yield(n)\n\
    \    end\n  end\nend", "    local result = {}\n    local found = {}\n    for _,\
    \ i in ipairs(numbers) do\n        if not found[i] then\n            table.insert(result,\
    \ i)\n            found[i] = true\n        end\n    end\n    return result\nend",
  "  local uniques = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not uniques[number] then\n      result[#result + 1] = number\n      uniques[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local number_set = {}\n  local\
    \ unique_numbers = {}\n  for i, number in ipairs(numbers) do\n    if not number_set[number]\
    \ then\n      number_set[number] = true\n      table.insert(unique_numbers, number)\n\
    \    end\n  end\n  return unique_numbers\nend", "  local set = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not set[n] then\n      set[n]\
    \ = true\n      table.insert(result, n)\n    end\n  end\n  return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local no_dups = {}\n    local flags = {}\n    for i, v in ipairs(numbers) do\n\
    \        if not flags[v] then\n            table.insert(no_dups, v)\n        \
    \    flags[v] = true\n        end\n    end\n    return no_dups\nend", "\tlocal\
    \ count = {}\n\tlocal result = {}\n\tfor _,v in ipairs(numbers) do\n\t\tif not\
    \ count[v] then\n\t\t\tcount[v] = true\n\t\t\ttable.insert(result, v)\n\t\tend\n\
    \tend\n\treturn result\nend", "  local tab = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not tab[n] then\n      tab[n] = true\n    else\n      tab[n] = nil\n\
    \    end\n  end\n  local result = {}\n  for n in pairs(tab) do\n    table.insert(result,\
    \ n)\n  end\n  return result\nend", "  local no_dupes = {}\n  local numbers_count\
    \ = {}\n  for i, v in ipairs(numbers) do\n    if not numbers_count[v] then\n \
    \     numbers_count[v] = 1\n      no_dupes[#no_dupes + 1] = v\n    else\n    \
    \  numbers_count[v] = numbers_count[v] + 1\n    end\n  end\n  return no_dupes\n\
    end", "  local found = {}\n  local cleaned = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not found[n] then\n      table.insert(cleaned, n)\n      found[n]\
    \ = true\n    end\n  end\n  return cleaned\nend", "\tlocal found = {}\n\tlocal\
    \ result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not found[number]\
    \ then\n\t\t\ttable.insert(result, number)\n\t\t\tfound[number] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "    local out = {}\n    local seen = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not seen[number] then\n        \
    \    table.insert(out, number)\n            seen[number] = true\n        end\n\
    \    end\n    return out\nend", "    local result = {}\n    local seen = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           result[#result + 1] = number\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "\t-- TODO: Implement me\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local unique = {}\n    for\
    \ _, v in ipairs(numbers) do\n        if unique[v] then\n            unique[v]\
    \ = nil\n        else\n            unique[v] = true\n        end\n    end\n  \
    \  local r = {}\n    for v, _ in pairs(unique) do\n        r[#r + 1] = v\n   \
    \ end\n    return r\nend", "  local unique = {}\n  for i, number in ipairs(numbers)\
    \ do\n    unique[number] = i\n  end\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if unique[number] == i then\n      result[#result + 1] = number\n  \
    \  end\n  end\n  return result\nend", "  local seen = {}\n  for i = #numbers,\
    \ 1, -1 do\n    local n = numbers[i]\n    if seen[n] then\n      table.remove(numbers,\
    \ i)\n    else\n      seen[n] = true\n    end\n  end\nend", "  local previous\
    \ = {}\n  local result = {}\n  for _, x in ipairs(numbers) do\n    if not previous[x]\
    \ then\n      previous[x] = true\n      table.insert(result, x)\n    end\n  end\n\
    \  return result\nend", "\tlocal seen = {}\n\tlocal removed = {}\n\tfor i, number\
    \ in ipairs(numbers) do\n\t\tif seen[number] then\n\t\t\tremoved[#removed + 1]\
    \ = number\n\t\telse\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\tfor _, number\
    \ in ipairs(removed) do\n\t\tfor i, val in ipairs(numbers) do\n\t\t\tif val ==\
    \ number then\n\t\t\t\ttable.remove(numbers, i)\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn numbers\nend", "\tlocal seen = {}\n\tlocal result = {}\n\t\
    for _, v in ipairs(numbers) do\n\t\tif not seen[v] then\n\t\t\ttable.insert(result,\
    \ v)\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn result\nend", "  local seen\
    \ = {}\n  for _,n in ipairs(numbers) do\n    seen[n] = true\n  end\n  local out\
    \ = {}\n  for _,n in ipairs(numbers) do\n    if seen[n] then\n      seen[n] =\
    \ nil\n      table.insert(out, n)\n    end\n  end\n  return out\nend", "    local\
    \ number_set = {}\n    local output = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not number_set[number] then\n            table.insert(output,\
    \ number)\n            number_set[number] = true\n        end\n    end\n    return\
    \ output\nend", "    local unique = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not unique[number] then\n            unique[number] = true\n     \
    \   end\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if unique[number] then\n            table.insert(result, number)\n\
    \            unique[number] = nil\n        end\n    end\n    return result\nend",
  "\tlocal list = {}\n\tfor i = 1, #numbers do\n\t\tlocal number = numbers[i]\n\t\t\
    if list[number] == nil then\n\t\t\tlist[number] = true\n\t\telse\n\t\t\tlist[number]\
    \ = false\n\t\tend\n\tend\n\tlocal new_list = {}\n\tfor i = 1, #numbers do\n\t\
    \tlocal number = numbers[i]\n\t\tif list[number] then\n\t\t\tnew_list[#new_list\
    \ + 1] = number\n\t\tend\n\tend\n\treturn new_list\nend", "    local seen = {}\n\
    \    local no_duplicates = {}\n    for _, num in ipairs(numbers) do\n        if\
    \ not seen[num] then\n            table.insert(no_duplicates, num)\n         \
    \   seen[num] = true\n        end\n    end\n    return no_duplicates\nend", " \
    \   local result = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(result, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend", "    local uniques\
    \ = {}\n    local sorted = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not uniques[number] then\n            uniques[number] = true\n        \
    \    table.insert(sorted, number)\n        end\n    end\n    return sorted\nend",
  "  local seen = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      result[#result\
    \ + 1] = number\n    end\n  end\n  return result\nend", "\tlocal result = {}\n\
    \tlocal hash = {}\n\tfor _, value in ipairs(numbers) do\n\t\tif not hash[value]\
    \ then\n\t\t\tresult[#result + 1] = value\n\t\t\thash[value] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "  local s = Set.new(numbers)\n  local res = {}\n\
    \  for _, n in ipairs(numbers) do\n    if s:has(n) then\n      s:remove(n)\n \
    \     table.insert(res, n)\n    end\n  end\n  return res\nend", "    local set\
    \ = {}\n    local i = 1\n    while i <= #numbers do\n        local number = numbers[i]\n\
    \        if set[number] then\n            remove(numbers, i)\n        else\n \
    \           set[number] = true\n            i = i + 1\n        end\n    end\n\
    end", "\tlocal set = {}\n\tlocal result = {}\n\tfor _,v in ipairs(numbers) do\n\
    \t\tif not set[v] then\n\t\t\tset[v] = true\n\t\t\ttable.insert(result, v)\n\t\
    \tend\n\tend\n\treturn result\nend", "\tlocal out = {}\n\tlocal seen = {}\n\t\
    for _, v in ipairs(numbers) do\n\t\tif not seen[v] then\n\t\t\ttable.insert(out,\
    \ v)\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn out\nend", "  local unique\
    \ = {}\n  for i = 1, #numbers do\n    local number = numbers[i]\n    if not unique[number]\
    \ then\n      unique[number] = true\n    else\n      numbers[i] = nil\n    end\n\
    \  end\n  return numbers\nend", "    local is_a_member = {}\n    local unique_numbers\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not is_a_member[number]\
    \ then\n            table.insert(unique_numbers, number)\n            is_a_member[number]\
    \ = true\n        end\n    end\n    return unique_numbers\nend", "    local unique\
    \ = {}\n    for _, v in ipairs(numbers) do\n        if not unique[v] then\n  \
    \          unique[v] = true\n        end\n    end\n    local new_list = {}\n \
    \   for _, v in ipairs(numbers) do\n        if unique[v] then\n            table.insert(new_list,\
    \ v)\n            unique[v] = nil\n        end\n    end\n    return new_list\n\
    end", "\tlocal hash = {}\n\tlocal output = {}\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tif not hash[number] then\n\t\t\thash[number] = true\n\t\t\ttable.insert(output,\
    \ number)\n\t\tend\n\tend\n\treturn output\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v] then\n   \
    \   result[#result + 1] = v\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "  local set = {}\n  local no_duplicates = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not set[number] then\n      table.insert(no_duplicates, number)\n\
    \      set[number] = true\n    end\n  end\n  return no_duplicates\nend", "   \
    \ local remaining = {}\n    local used = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not used[n] then\n            remaining[#remaining + 1] = n\n    \
    \        used[n] = true\n        end\n    end\n    return remaining\nend", "\t\
    local unique = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not unique[n] then\n\
    \t\t\tunique[n] = true\n\t\tend\n\tend\n\tlocal result = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif unique[n] then\n\t\t\ttable.insert(result, n)\n\t\t\tunique[n] =\
    \ nil\n\t\tend\n\tend\n\treturn result\nend", "    local result = {}\n    local\
    \ seen = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n\
    \            result[#result + 1] = n\n            seen[n] = true\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  local counted = {}\n\
    \  for _, v in ipairs(numbers) do\n    counted[v] = (counted[v] or 0) + 1\n  end\n\
    \  for _, v in ipairs(numbers) do\n    if counted[v] == 1 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "\tlocal seen = {}\n\tlocal result\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not seen[number] then\n\t\
    \t\ttable.insert(result, number)\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\t\
    return result\nend", "    local keepers = {}\n    local uniques = {}\n    for\
    \ _, value in ipairs(numbers) do\n        if not keepers[value] then\n       \
    \     keepers[value] = true\n            table.insert(uniques, value)\n      \
    \  end\n    end\n    return uniques\nend", "  local ordered_set = ordered_set()\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if not ordered_set[number]\
    \ then\n      table.insert(result, number)\n      ordered_set[number] = true\n\
    \    end\n  end\n  return result\nend", "    -- TODO\nend", "  local result =\
    \ {}\n  local seen = {}\n  for i = 1, #numbers do\n    local value = numbers[i]\n\
    \    if not seen[value] then\n      result[#result + 1] = value\n      seen[value]\
    \ = true\n    end\n  end\n  return result\nend", "\tlocal i, j = 1, #numbers\n\
    \twhile i <= j do\n\t\tlocal x = numbers[i]\n\t\tlocal k = i + 1\n\t\twhile k\
    \ <= j do\n\t\t\tif numbers[k] == x then\n\t\t\t\tnumbers[k], numbers[j] = numbers[j],\
    \ numbers[k]\n\t\t\t\tj = j - 1\n\t\t\telse\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn numbers\nend", "\tlocal last = nil\n\tlocal\
    \ result = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif n ~= last then\n\t\t\t\
    result[#result + 1] = n\n\t\t\tlast = n\n\t\tend\n\tend\n\treturn result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local found = {}\n    local new_list = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not found[n] then\n            new_list[#new_list + 1] = n\n\
    \            found[n] = true\n        end\n    end\n    return new_list\nend",
  "\t-- we use a hash to keep track of unique elements\n\tlocal unique = {}\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tunique[number] = true\n\tend\n\t-- now\
    \ we can go through the unique keys\n\tlocal result = {}\n\tfor number in pairs(unique)\
    \ do\n\t\tresult[#result + 1] = number\n\tend\n\treturn result\nend", "\tlocal\
    \ seen = {}\n\tlocal result = {}\n\tfor _, item in ipairs(numbers) do\n\t\tif\
    \ not seen[item] then\n\t\t\ttable.insert(result, item)\n\t\t\tseen[item] = true\n\
    \t\tend\n\tend\n\treturn result\nend", "  local seen = {}\n  local result = {}\n\
    \  for _,v in ipairs(numbers) do\n    if not seen[v] then\n      table.insert(result,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return result\nend", "\tlocal result\
    \ = {}\n\tlocal used = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not used[number]\
    \ then\n\t\t\tresult[#result + 1] = number\n\t\t\tused[number] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "    local seen = {}\n    local unique = {}\n  \
    \  for _, v in ipairs(numbers) do\n        if not seen[v] then\n            table.insert(unique,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return unique\nend",
  "\tlocal output = {}\n\tlocal duplicate_check = {}\n\tfor i = 1, #numbers do\n\t\
    \tlocal number = numbers[i]\n\t\tif duplicate_check[number] == nil then\n\t\t\t\
    duplicate_check[number] = true\n\t\t\toutput[#output + 1] = number\n\t\tend\n\t\
    end\n\treturn output\nend", "    -- IMPLEMENT THIS FUNCTION\n    -- remove duplicates\n\
    \    local non_duplicate_numbers = {}\n    local number_count = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if number_count[number] == nil then\n\
    \            number_count[number] = 1\n        else\n            number_count[number]\
    \ = number_count[number] + 1\n        end\n    end\n    for _, number in ipairs(numbers)\
    \ do\n        if number_count[number] == 1 then\n            table.insert(non_duplicate_numbers,\
    \ number)\n        end\n    end\n    return non_duplicate_numbers\nend", "  local\
    \ all_numbers = {}\n  local unique_numbers = {}\n  for i, v in ipairs(numbers)\
    \ do\n    if all_numbers[v] == nil then\n      all_numbers[v] = true\n      unique_numbers[#unique_numbers\
    \ + 1] = v\n    end\n  end\n  return unique_numbers\nend", "    -- Check each\
    \ number, if it is in the set, remove it. Otherwise, add it.\n    local numbers_map\
    \ = {}\n    local unique_numbers = {}\n    for i, v in ipairs(numbers) do\n  \
    \      if numbers_map[v] then\n            numbers_map[v] = numbers_map[v] + 1\n\
    \        else\n            numbers_map[v] = 1\n        end\n    end\n    for i,\
    \ v in ipairs(numbers) do\n        if numbers_map[v] == 1 then\n            table.insert(unique_numbers,\
    \ v)\n        end\n    end\n    return unique_numbers\nend", "    local seen_values\
    \ = {}\n    local output = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen_values[number] then\n            table.insert(output, number)\n\
    \            seen_values[number] = true\n        end\n    end\n    return output\n\
    end", "  local n = {}\n  for _, v in ipairs(numbers) do\n    if not n[v] then\n\
    \      n[v] = true\n      coroutine.yield(v)\n    end\n  end\nend", "\tlocal ret\
    \ = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not table.contains(ret, n) then\n\
    \t\t\ttable.insert(ret, n)\n\t\tend\n\tend\n\treturn ret\nend", "  local value_counts\
    \ = {}\n  for _, value in ipairs(numbers) do\n    value_counts[value] = (value_counts[value]\
    \ or 0) + 1\n  end\n  local unique_values = {}\n  for _, value in ipairs(numbers)\
    \ do\n    if value_counts[value] == 1 then\n      table.insert(unique_values,\
    \ value)\n    end\n  end\n  return unique_values\nend", "  local result = {}\n\
    \  local seen = {}\n  for i, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "\tlocal seen = {}\n\tlocal result = {}\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tif not seen[number] then\n\t\t\tresult[#result\
    \ + 1] = number\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\treturn result\n\
    end", "\tassert(type(numbers) == \"table\")\n\tlocal result = {}\n\tlocal occurrences\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not occurrences[number]\
    \ then\n\t\t\toccurrences[number] = 1\n\t\t\ttable.insert(result, number)\n\t\t\
    end\n\tend\n\treturn result\nend", "    local deduped = {}\n    local used = {}\n\
    \    for _, v in ipairs(numbers) do\n        if not used[v] then\n           \
    \ table.insert(deduped, v)\n            used[v] = true\n        end\n    end\n\
    \    return deduped\nend", "  local numbers_seen = {}\n  local unique_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not numbers_seen[number]\
    \ then\n      table.insert(unique_numbers, number)\n      numbers_seen[number]\
    \ = true\n    end\n  end\n  return unique_numbers\nend", "\tlocal visited = {}\n\
    \tlocal result = {}\n\tfor _, i in ipairs(numbers) do\n\t\tif not visited[i] then\n\
    \t\t\tvisited[i] = true\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local seen_numbers = {}\n  local distinct_numbers = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if not seen_numbers[number] then\n    \
    \  table.insert(distinct_numbers, number)\n      seen_numbers[number] = true\n\
    \    end\n  end\n  return distinct_numbers\nend", "  local unique = {}\n  for\
    \ _, value in ipairs(numbers) do\n    unique[value] = true\n  end\n  local output\
    \ = {}\n  for _, value in ipairs(numbers) do\n    if unique[value] then\n    \
    \  output[#output + 1] = value\n      unique[value] = nil\n    end\n  end\n  return\
    \ output\nend", "  local unique = {}\n  for _, n in ipairs(numbers) do\n    if\
    \ not unique[n] then\n      unique[n] = true\n    end\n  end\n  local result =\
    \ {}\n  for _, n in ipairs(numbers) do\n    if unique[n] then\n      result[#result\
    \ + 1] = n\n      unique[n] = nil\n    end\n  end\n  return result\nend", "  local\
    \ seen = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n    if\
    \ not seen[number] then\n      seen[number] = true\n      result[#result + 1]\
    \ = number\n    end\n  end\n  return result\nend", "  local unique = {}\n  for\
    \ _, value in ipairs(numbers) do\n    unique[value] = 1\n  end\n  local results\
    \ = {}\n  for value, _ in pairs(unique) do\n    table.insert(results, value)\n\
    \  end\n  return results\nend", "    local found = {}\n    local result = {}\n\
    \    for i, v in ipairs(numbers) do\n        if found[v] == nil then\n       \
    \     result[#result + 1] = v\n            found[v] = true\n        end\n    end\n\
    \    return result\nend", "  local sorted = { }\n  for _, number in ipairs(numbers)\
    \ do\n    sorted[number] = (sorted[number] or 0) + 1\n  end\n  local unique =\
    \ { }\n  for _, number in ipairs(numbers) do\n    if sorted[number] == 1 then\n\
    \      unique[#unique + 1] = number\n    end\n  end\n  return unique\nend", " \
    \   local found = {}\n    local result = {}\n    for k, v in ipairs(numbers) do\n\
    \        if not found[v] then\n            table.insert(result, v)\n         \
    \   found[v] = true\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n     \
    \   if not seen[v] then\n            table.insert(result, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return result\nend", "\tlocal map = {}\n\t\
    local result = {}\n\tfor i, x in ipairs(numbers) do\n\t\tif not map[x] then\n\t\
    \t\tmap[x] = true\n\t\t\tresult[#result + 1] = x\n\t\tend\n\tend\n\treturn result\n\
    end", "    local done = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not done[number] then\n            done[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local out = {}\n    local seen = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if not seen[v] then\n            table.insert(out, v)\n        \
    \    seen[v] = true\n        end\n    end\n    return out\nend", "    local uniques\
    \ = {}\n    local results = {}\n    for _, number in ipairs(numbers) do\n    \
    \    if not uniques[number] then\n            uniques[number] = true\n       \
    \     table.insert(results, number)\n        end\n    end\n    return results\n\
    end", "  local results = {}\n  local seen = {}\n  for _,v in ipairs(numbers) do\n\
    \    if not seen[v] then\n      table.insert(results, v)\n      seen[v] = true\n\
    \    end\n  end\n  return results\nend", "    local found = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not found[number]\
    \ then\n            table.insert(result, number)\n            found[number] =\
    \ true\n        end\n    end\n    return result\nend", "    local counts = {}\n\
    \    for _, number in ipairs(numbers) do\n        counts[number] = (counts[number]\
    \ or 0) + 1\n    end\n    local non_duplicates = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if counts[number] == 1 then\n            table.insert(non_duplicates,\
    \ number)\n        end\n    end\n    return non_duplicates\nend", "  local unique\
    \ = {}\n  for _, n in ipairs(numbers) do\n    unique[n] = true\n  end\n  local\
    \ result = {}\n  for _, n in ipairs(numbers) do\n    if unique[n] then\n     \
    \ table.insert(result, n)\n      unique[n] = nil\n    end\n  end\n  return result\n\
    end", "  local numbers_set = {}\n  local result = {}\n  for i, n in ipairs(numbers)\
    \ do\n    if not numbers_set[n] then\n      numbers_set[n] = true\n      result[#result\
    \ + 1] = n\n    end\n  end\n  return result\nend", "\tlocal output = {}\n\tlocal\
    \ function handler(i)\n\t\tif not contains(output, i) then\n\t\t\ttable.insert(output,\
    \ i)\n\t\tend\n\tend\n\ttable.foreach(numbers, handler)\n\treturn output\nend",
  "  local unique = {}\n  for _, n in ipairs(numbers) do\n    if not unique[n] then\n\
    \      unique[n] = true\n    end\n  end\n  return unique\nend", "\tlocal cache\
    \ = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not\
    \ cache[number] then\n\t\t\tcache[number] = true\n\t\t\tresult[#result + 1] =\
    \ number\n\t\tend\n\tend\n\treturn result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    if not unique[number] then\n      unique[number]\
    \ = true\n    end\n  end\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = nil\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return result\nend", "\tlocal result\
    \ = {}\n\tlocal used = {}\n\tfor i,v in ipairs(numbers) do\n\t\tif used[v] then\n\
    \t\t\tused[v] = 2\n\t\telse\n\t\t\tused[v] = 1\n\t\t\tresult[#result+1] = v\n\t\
    \tend\n\tend\n\treturn result\nend", "\tlocal seen = {}\n\tlocal result = {}\n\
    \tfor i, number in ipairs(numbers) do\n\t\tif not seen[number] then\n\t\t\tresult[#result\
    \ + 1] = number\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\treturn result\n\
    end", "    local result = {}\n    local duplicates = {}\n    for _, x in ipairs(numbers)\
    \ do\n        if duplicates[x] then\n            duplicates[x] = nil\n       \
    \ elseif result[x] then\n            duplicates[x] = true\n        else\n    \
    \        result[x] = true\n        end\n    end\n    local values = {}\n    for\
    \ k, _ in pairs(result) do\n        table.insert(values, k)\n    end\n    return\
    \ values\nend", "\tlocal result = {}\n\tlocal already_seen = {}\n\tfor _, v in\
    \ ipairs(numbers) do\n\t\tif not already_seen[v] then\n\t\t\ttable.insert(result,\
    \ v)\n\t\t\talready_seen[v] = true\n\t\tend\n\tend\n\treturn result\nend", " \
    \ local uniques = {}\n  local seen = {}\n  for _, n in ipairs(numbers) do\n  \
    \  if not seen[n] then\n      table.insert(uniques, n)\n      seen[n] = true\n\
    \    end\n  end\n  return uniques\nend", "    return filter(numbers, function(x)\
    \ return unique(numbers, x) end)\nend", "  local seen = {}\n  local i = 1\n  while\
    \ i <= #numbers do\n    local n = numbers[i]\n    if seen[n] then\n      table.remove(numbers,\
    \ i)\n    else\n      seen[n] = true\n      i = i + 1\n    end\n  end\nend", " \
    \ if numbers == nil then\n    return nil\n  end\n  local temp = {}\n  local result\
    \ = {}\n  for _, k in ipairs(numbers) do\n    if temp[k] == nil then\n      temp[k]\
    \ = true\n      table.insert(result, k)\n    end\n  end\n  return result\nend",
  "    -- Your code goes here.\n    local result = {}\n    local set = {}\n    for\
    \ _, v in ipairs(numbers) do\n        if not set[v] then\n            table.insert(result,\
    \ v)\n            set[v] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ results = {}\n    for _,v in ipairs(numbers) do\n        if not seen[v] then\n\
    \            seen[v] = true\n            table.insert(results, v)\n        end\n\
    \    end\n    return results\nend", "  local no_duplicates = {}\n  local already_seen\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not already_seen[n] then\n  \
    \    no_duplicates[#no_duplicates + 1] = n\n      already_seen[n] = true\n   \
    \ end\n  end\n  return no_duplicates\nend", "  local unique = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not unique[number] then\n      unique[number]\
    \ = true\n    end\n  end\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = nil\n    end\n  end\n  return result\nend", "  local unique = {}\n  for _,\
    \ x in ipairs(numbers) do\n    if not unique[x] then\n      unique[x] = true\n\
    \      coroutine.yield(x)\n    end\n  end\nend", "  local seen = {}\n  local uniques\
    \ = {}\n  for i, num in ipairs(numbers) do\n    if not seen[num] then\n      table.insert(uniques,\
    \ num)\n      seen[num] = true\n    end\n  end\n  return uniques\nend", "    local\
    \ no_duplicates = {}\n    local present = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not present[number] then\n            table.insert(no_duplicates,\
    \ number)\n            present[number] = true\n        end\n    end\n    return\
    \ no_duplicates\nend", "\tlocal list = {}\n\tfor _,n in ipairs(numbers) do\n\t\
    \tif list[n] == nil then\n\t\t\tlist[n] = 1\n\t\telse\n\t\t\tlist[n] = list[n]\
    \ + 1\n\t\tend\n\tend\n\tlocal new_list = {}\n\tfor _,n in ipairs(numbers) do\n\
    \t\tif list[n] == 1 then\n\t\t\ttable.insert(new_list, n)\n\t\tend\n\tend\n\t\
    return new_list\nend", "\tlocal seen = {}\n\tfor i = #numbers, 1, -1 do\n\t\t\
    if seen[numbers[i]] then\n\t\t\ttable.remove(numbers, i)\n\t\telse\n\t\t\tseen[numbers[i]]\
    \ = true\n\t\tend\n\tend\nend", "  local container = {}\n  local result = {}\n\
    \  for _, n in ipairs(numbers) do\n    if not container[n] then\n      container[n]\
    \ = true\n      table.insert(result, n)\n    end\n  end\n  return result\nend",
  "  local unique = {}\n  for _, v in ipairs(numbers) do\n    if not unique[v] then\n\
    \      unique[v] = true\n    end\n  end\n  local u = {}\n  for k, _ in pairs(unique)\
    \ do\n    table.insert(u, k)\n  end\n  return u\nend", "  local seen = {}\n  for\
    \ _, v in ipairs(numbers) do\n    if seen[v] then\n      seen[v] = seen[v] + 1\n\
    \    else\n      seen[v] = 1\n    end\n  end\n  local new_list = {}\n  for _,\
    \ v in ipairs(numbers) do\n    if seen[v] == 1 then\n      table.insert(new_list,\
    \ v)\n    end\n  end\n  return new_list\nend", "    local seen = {}\n    local\
    \ uniques = {}\n    for _, num in ipairs(numbers) do\n        if not seen[num]\
    \ then\n            table.insert(uniques, num)\n            seen[num] = true\n\
    \        end\n    end\n    return uniques\nend", "    local values = {}\n    local\
    \ new = {}\n    for _, v in ipairs(numbers) do\n        if not values[v] then\n\
    \            table.insert(new, v)\n            values[v] = true\n        end\n\
    \    end\n    return new\nend", "  local known = {}\n  local unique = {}\n  for\
    \ _, v in ipairs(numbers) do\n    if not known[v] then\n      unique[#unique +\
    \ 1] = v\n      known[v] = true\n    end\n  end\n  return unique\nend", "    local\
    \ last_number = 0\n    local is_duplicate = {}\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if last_number == number then\n   \
    \         is_duplicate[number] = true\n        else\n            last_number =\
    \ number\n        end\n    end\n    for _, number in ipairs(numbers) do\n    \
    \    if not is_duplicate[number] then\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    unique[number] = true\n  end\n  local result\
    \ = {}\n  for number, _ in pairs(unique) do\n    table.insert(result, number)\n\
    \  end\n  return result\nend", "    local unique = {}\n    for _, value in ipairs(numbers)\
    \ do\n        unique[value] = true\n    end\n    return unique\nend", "  local\
    \ result = {}\n  local seen = {}\n  for i, num in ipairs(numbers) do\n    if not\
    \ seen[num] then\n      table.insert(result, num)\n      seen[num] = true\n  \
    \  end\n  end\n  return result\nend", "  return fun.iter(numbers):filter(function(v,\
    \ _, seen)\n    if seen[v] then\n      return false\n    else\n      seen[v] =\
    \ true\n      return true\n    end\n  end, {}):totable()\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, x in ipairs(numbers) do\n        if\
    \ not seen[x] then\n            seen[x] = true\n            table.insert(result,\
    \ x)\n        end\n    end\n    return result\nend", "    local uniques = {}\n\
    \    local seen = {}\n    for _, num in ipairs(numbers) do\n        if not seen[num]\
    \ then\n            uniques[#uniques + 1] = num\n            seen[num] = true\n\
    \        end\n    end\n    return uniques\nend", "    local function is_duplicate(number)\n\
    \        local occurrences = 0\n        for _, n in ipairs(numbers) do\n     \
    \       if n == number then\n                occurrences = occurrences + 1\n \
    \           end\n        end\n        return occurrences > 1\n    end", "  local\
    \ keep = {}\n  local dups = {}\n  for _, num in ipairs(numbers) do\n    if keep[num]\
    \ == nil then\n      keep[num] = true\n    else\n      dups[num] = true\n    end\n\
    \  end\n  local res = {}\n  for _, num in ipairs(numbers) do\n    if dups[num]\
    \ == nil then\n      table.insert(res, num)\n    end\n  end\n  return res\nend",
  "\tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if not seen[n] then\n\t\t\tresult[#result + 1] = n\n\t\t\tseen[n] = true\n\t\t\
    end\n\tend\n\treturn result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      seen[number]\
    \ = true\n      table.insert(result, number)\n    end\n  end\n  return result\n\
    end", "    local t = {}\n    for i, number in ipairs(numbers) do\n        t[number]\
    \ = true\n    end\n    local res = {}\n    for i, number in ipairs(numbers) do\n\
    \        if t[number] then\n            res[#res + 1] = number\n            t[number]\
    \ = false\n        end\n    end\n    return res\nend", "  local num_map = {}\n\
    \  local num_list = {}\n  for _, v in ipairs(numbers) do\n    if not num_map[v]\
    \ then\n      num_map[v] = true\n      table.insert(num_list, v)\n    end\n  end\n\
    \  return num_list\nend", "  -- Use a map to keep track of the numbers we have\
    \ seen.\n  local index = {}\n  local unique = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not index[number] then\n      index[number] = true\n      table.insert(unique,\
    \ number)\n    end\n  end\n  return unique\nend", "    local unique = {}\n   \
    \ for _, number in ipairs(numbers) do\n        if not unique[number] then\n  \
    \          unique[number] = true\n        end\n    end\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if unique[number] then\n   \
    \         table.insert(result, number)\n            unique[number] = nil\n   \
    \     end\n    end\n    return result\nend", "    local known = {}\n    local\
    \ ret = {}\n    for _, v in ipairs(numbers) do\n        if not known[v] then\n\
    \            table.insert(ret, v)\n            known[v] = true\n        end\n\
    \    end\n    return ret\nend", "    local result = {}\n    local hash = {}\n\
    \    for _, n in ipairs(numbers) do\n        if not hash[n] then\n           \
    \ hash[n] = true\n            table.insert(result, n)\n        end\n    end\n\
    \    return result\nend", "  local seen = {}\n  local uniques = {}\n  for i, n\
    \ in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(uniques,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return uniques\nend", "  local seen\
    \ = {}\n  local filtered = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v]\
    \ then\n      table.insert(filtered, v)\n      seen[v] = true\n    end\n  end\n\
    \  return filtered\nend", "  local set = {}\n  local duplicates = {}\n  for i\
    \ = 1, #numbers do\n    local num = numbers[i]\n    if set[num] then\n      duplicates[num]\
    \ = true\n    else\n      set[num] = true\n    end\n  end\n  local numbers2 =\
    \ {}\n  for i = 1, #numbers do\n    local num = numbers[i]\n    if not duplicates[num]\
    \ then\n      numbers2[#numbers2 + 1] = num\n    end\n  end\n  return numbers2\n\
    end", "\tlocal result = {}\n\tlocal seen = {}\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tif not seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\t\
    seen[number] = true\n\t\tend\n\tend\n\treturn result\nend", "    local unique\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n] then\n  \
    \          unique[n] = true\n        end\n    end\n    local result = {}\n   \
    \ for n, _ in pairs(unique) do\n        table.insert(result, n)\n    end\n   \
    \ return result\nend", "\tlocal out = {}\n\tlocal lookup = {}\n\tlocal n = 0\n\
    \tfor i = 1, #numbers do\n\t\tlocal x = numbers[i]\n\t\tif not lookup[x] then\n\
    \t\t\tn = n + 1\n\t\t\tout[n] = x\n\t\t\tlookup[x] = true\n\t\tend\n\tend\n\t\
    return out\nend", "  local cache = {}\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if not cache[number] then\n      cache[number] = true\n\
    \      table.insert(result, number)\n    end\n  end\n  return result\nend", " \
    \ local count_map = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n\
    \    if count_map[n] == nil then\n      count_map[n] = 1\n      table.insert(result,\
    \ n)\n    else\n      count_map[n] = count_map[n] + 1\n    end\n  end\n  return\
    \ result\nend", "  local uniques = {}\n  local dupes = {}\n  for _,n in ipairs(numbers)\
    \ do\n    if uniques[n] then\n      table.insert(dupes, n)\n    else\n      uniques[n]\
    \ = true\n    end\n  end\n  for _,n in ipairs(dupes) do\n    table.remove_first(numbers,\
    \ n)\n  end\nend", "  local tmp = {}\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    local number = numbers[i]\n    if not tmp[number] then\n      tmp[number]\
    \ = true\n      result[#result + 1] = number\n    end\n  end\n  return result\n\
    end", "  local uniques = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not uniques[number] then\n      uniques[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend", "  local words = {}\n  local\
    \ result = {}\n  for _,v in ipairs(numbers) do\n    local word = tostring(v)\n\
    \    if not words[word] then\n      result[#result+1] = v\n      words[word] =\
    \ true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ i = 1\n    while i <= #numbers do\n        local v = numbers[i]\n        if\
    \ seen[v] then\n            table.remove(numbers, i)\n        else\n         \
    \   seen[v] = true\n            i = i + 1\n        end\n    end\nend", "    local\
    \ used = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not used[number] then\n            table.insert(result, number)\n\
    \            used[number] = true\n        end\n    end\n    return result\nend",
  "  local seen_already = {}\n  local result = {}\n  for i = 1, #numbers do\n    local\
    \ number = numbers[i]\n    if not seen_already[number] then\n      table.insert(result,\
    \ number)\n      seen_already[number] = true\n    end\n  end\n  return result\n\
    end", "  local unique = {}\n  for _, v in ipairs(numbers) do\n    if not unique[v]\
    \ then\n      unique[v] = true\n    end\n  end\n  local ret = {}\n  for _, v in\
    \ ipairs(numbers) do\n    if unique[v] then\n      table.insert(ret, v)\n    \
    \  unique[v] = nil\n    end\n  end\n  return ret\nend", "  return fun.chain(numbers)\n\
    \    :map(function(number)\n      return {number, number}\n    end)\n    :foldl(function(map,\
    \ number)\n      map[number] = (map[number] or 0) + 1\n      return map\n    end,\
    \ {})\n    :filter(function(number, times)\n      return times == 1\n    end)\n\
    \    :keys()\n    :totable()\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "\tlocal number_counts = {}\n\t\
    for _, number in ipairs(numbers) do\n\t\tnumber_counts[number] = (number_counts[number]\
    \ or 0) + 1\n\tend\n\tlocal non_duplicates = {}\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tif number_counts[number] == 1 then\n\t\t\ttable.insert(non_duplicates,\
    \ number)\n\t\tend\n\tend\n\treturn non_duplicates\nend", "  local uniques = {}\n\
    \  local dups = {}\n  for i = 1, #numbers do\n    local num = numbers[i]\n   \
    \ if uniques[num] then\n      dups[num] = true\n    else\n      uniques[num] =\
    \ true\n    end\n  end\n  local result = {}\n  for i = 1, #numbers do\n    local\
    \ num = numbers[i]\n    if not dups[num] then\n      result[#result + 1] = num\n\
    \    end\n  end\n  return result\nend", "\tlocal last = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif last[n] then\n\t\t\tlast[n] = nil\n\t\telse\n\t\t\tlast[n] = true\n\
    \t\tend\n\tend\n\treturn table.values(last)\nend", "    local unique = {}\n  \
    \  for _, number in ipairs(numbers) do\n        unique[number] = true\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "  local set = {}\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if not set[v] then\n    \
    \  table.insert(result, v)\n      set[v] = true\n    end\n  end\n  return result\n\
    end", "    -- Create a table and use it as a set to track whether a number has\
    \ been\n    -- seen before.\n    local set = {}\n    local result = {}\n    for\
    \ _, num in ipairs(numbers) do\n        if not set[num] then\n            -- Add\
    \ element to result and mark it as seen.\n            result[#result + 1] = num\n\
    \            set[num] = true\n        end\n    end\n    return result\nend", " \
    \   --[[ TODO: Implement function here ]]\n    local map = {}\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        if map[numbers[i]] == nil then\n \
    \           map[numbers[i]] = 1\n            table.insert(result, numbers[i])\n\
    \        else\n            map[numbers[i]] = map[numbers[i]] + 1\n        end\n\
    \    end\n    return result\nend", "\t-- In: list of integers.\n\t-- Out: list\
    \ of integers.\n\t-- Ex: remove_duplicates({1, 2, 1, 3, 2, 4}) -> {1, 2, 3, 4}\n\
    \tlocal result = {}\n\tlocal counter = {}\n\tfor _, n in ipairs(numbers) do\n\t\
    \tcounter[n] = (counter[n] or 0) + 1\n\tend\n\tfor _, n in ipairs(numbers) do\n\
    \t\tif counter[n] == 1 then\n\t\t\ttable.insert(result, n)\n\t\tend\n\tend\n\t\
    return result\nend", "    local seen = {}\n    local count = {}\n    local result\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n    \
    \        result[#result + 1] = n\n            seen[n] = true\n            count[n]\
    \ = 1\n        else\n            count[n] = count[n] + 1\n        end\n    end\n\
    \    return result, count\nend", "  return (moses.reduce(numbers, function(acc,\
    \ number)\n    if not moses.detect(acc, function(n) return n == number end) then\n\
    \      table.insert(acc, number)\n    end\n    return acc\n  end, {}))\nend",
  "  local seen = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n    if\
    \ not seen[v] then\n      table.insert(result, v)\n      seen[v] = true\n    end\n\
    \  end\n  return result\nend", "\tlocal unique = {}\n\tlocal result = {}\n\tfor\
    \ _, v in ipairs(numbers) do\n\t\tif not unique[v] then\n\t\t\ttable.insert(result,\
    \ v)\n\t\t\tunique[v] = true\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ uniques = {}\n  local keys = {}\n  for i, number in ipairs(numbers) do\n   \
    \ if not keys[number] then\n      keys[number] = true\n      uniques[#uniques\
    \ + 1] = number\n    end\n  end\n  return uniques\nend", "    local ret = {}\n\
    \    local history = {}\n    for _, num in ipairs(numbers) do\n        if not\
    \ history[num] then\n            table.insert(ret, num)\n            history[num]\
    \ = true\n        end\n    end\n    return ret\nend", "    -- Use a map to keep\
    \ track of how many times each element occurs\n    local occurrence_count = {}\n\
    \    for _, x in ipairs(numbers) do\n        occurrence_count[x] = (occurrence_count[x]\
    \ or 0) + 1\n    end", "    local new_list = {}\n    local hash = {}\n    for\
    \ _, n in ipairs(numbers) do\n        if not hash[n] then\n            new_list[#new_list\
    \ + 1] = n\n            hash[n] = true\n        end\n    end\n    return new_list\n\
    end", "    local seen = {}\n    local result = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if not seen[v] then\n            result[#result + 1] = v\n     \
    \       seen[v] = true\n        end\n    end\n    return result\nend", "  local\
    \ seen = {}\n  local index = 1\n  while index <= #numbers do\n    local num =\
    \ numbers[index]\n    if seen[num] then\n      table.remove(numbers, index)\n\
    \    else\n      seen[num] = true\n      index = index + 1\n    end\n  end\nend",
  "  local uniques = {}\n  local output = {}\n  for _, n in ipairs(numbers) do\n \
    \   if not uniques[n] then\n      table.insert(output, n)\n      uniques[n] =\
    \ true\n    end\n  end\n  return output\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n        end\n    end\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if unique[number] then\n     \
    \       table.insert(result, number)\n            unique[number] = nil\n     \
    \   end\n    end\n    return result\nend", "    local unique = {}\n    for _,\
    \ n in ipairs(numbers) do\n        if not unique[n] then\n            unique[n]\
    \ = true\n        end\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if unique[n] then\n            table.insert(result, n)\n       \
    \     unique[n] = nil\n        end\n    end\n    return result\nend", "  local\
    \ set = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n    if\
    \ not set[number] then\n      set[number] = true\n      result[#result + 1] =\
    \ number\n    end\n  end\n  return result\nend", "  local unique = {}\n  for i\
    \ = 1, #numbers do\n    unique[numbers[i]] = true\n  end\n  local numbers_without_duplicates\
    \ = {}\n  for i = 1, #numbers do\n    if unique[numbers[i]] then\n      table.insert(numbers_without_duplicates,\
    \ numbers[i])\n      unique[numbers[i]] = false\n    end\n  end\n  return numbers_without_duplicates\n\
    end", "  -- TODO: Write your implementation here\nend", "  local seen = {}\n \
    \ local result = {}\n  for _, num in ipairs(numbers) do\n    if not seen[num]\
    \ then\n      table.insert(result, num)\n      seen[num] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ n in ipairs(numbers) do\n        if not seen[n] then\n            seen[n] =\
    \ true\n            table.insert(result, n)\n        end\n    end\n    return\
    \ result\nend", "\tlocal seen = {}\n\tlocal unique = {}\n\tfor _, num in ipairs(numbers)\
    \ do\n\t\tif not seen[num] then\n\t\t\ttable.insert(unique, num)\n\t\t\tseen[num]\
    \ = true\n\t\tend\n\tend\n\treturn unique\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
