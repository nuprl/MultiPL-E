language: lua
name: HumanEval_115_max_fill
results:
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local count = 0\n    for i = 1, #grid do\n        if grid[i]\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    local empty\
    \ = count\n    while empty > 0 do\n        local row = #grid\n        while row\
    \ > 0 do\n            local col = 1\n            while col <= #grid[row] do\n\
    \                if grid[row][col] == 1 then\n                    grid[row][col]\
    \ = capacity\n                    empty = empty - 1\n                end\n   \
    \             col = col + 1\n            end\n            row = row - 1\n    \
    \    end\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8yzcz3w.lua:45:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpq8yzcz3w.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local filled\
    \ = 0\n    local steps = 0\n    for i = 1, rows do\n        for j = 1, cols do\n\
    \            local val = grid[i][j]\n            if val == 1 then\n          \
    \      filled = filled + 1\n                if filled == capacity then\n     \
    \               filled = 0\n                    steps = steps + 1\n          \
    \      end\n            end\n        end\n    end\n    return steps\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgb73ism.lua:40:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmplgb73ism.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local fill_count = 0\n  for i = 1, #grid do\n    local fill = 0\n\
    \    for j = 1, #grid[i] do\n      fill = fill + grid[i][j]\n      if fill ==\
    \ capacity then\n        fill_count = fill_count + 1\n        fill = 0\n     \
    \ elseif fill > capacity then\n        fill_count = fill_count + 1\n        fill\
    \ = grid[i][j]\n      end\n    end\n    if fill > 0 then\n      fill_count = fill_count\
    \ + 1\n    end\n  end\n  return fill_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local max_fill =\
    \ 0\n    for j = 1, m do\n        local fill = 0\n        for i = 1, n do\n  \
    \          fill = fill + grid[i][j]\n        end\n        max_fill = math.max(max_fill,\
    \ fill)\n    end\n    return math.ceil(max_fill / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn_7o066.lua:33:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmphn_7o066.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal h = #grid\n\tlocal w = #grid[1]\n\tlocal row_max = {}\n\t\
    for j = 1, w do\n\t\trow_max[j] = -1\n\tend\n\tfor i = 1, h do\n\t\tlocal row\
    \ = grid[i]\n\t\tfor j = 1, w do\n\t\t\tif row[j] == 1 then\n\t\t\t\trow_max[j]\
    \ = i\n\t\t\tend\n\t\tend\n\tend\n\tlocal min_row_max = math.huge\n\tfor j = 1,\
    \ w do\n\t\tif row_max[j] ~= -1 then\n\t\t\tmin_row_max = math.min(min_row_max,\
    \ row_max[j])\n\t\tend\n\tend\n\treturn math.ceil(min_row_max / capacity)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf47brge.lua:43:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmppf47brge.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal rows = #grid\n\tlocal cols = #grid[1]\n\tlocal times = 0\n\
    \tlocal function empty_row(idx)\n\t\tlocal c = 0\n\t\tlocal cost = 0\n\t\tfor\
    \ j = 1, cols do\n\t\t\tif grid[idx][j] == 1 then\n\t\t\t\tc = c + 1\n\t\t\t\t\
    if c == capacity then\n\t\t\t\t\tcost = cost + 1\n\t\t\t\t\tc = 0\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\tc = 0\n\t\t\tend\n\t\tend\n\t\tif c > 0 then\n\t\t\tcost =\
    \ cost + 1\n\t\tend\n\t\treturn cost\n\tend\n\tfor i = 1, rows do\n\t\ttimes =\
    \ times + empty_row(i)\n\tend\n\treturn times\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  return math.ceil(capacity / (grid[#grid] + 1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnfadhyb.lua:17:\
    \ attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\
    \t/tmp/tmplnfadhyb.lua:17: in local 'candidate'\n\t/tmp/tmplnfadhyb.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill_count = 0\n    for i = 1, #grid do\n        local\
    \ e, k = 0, 1\n        while e < capacity and k <= #grid[i] do\n            if\
    \ grid[i][k] == 1 then\n                e = e + 1\n            end\n         \
    \   k = k + 1\n        end\n        if e == capacity then\n            fill_count\
    \ = fill_count + 1\n        end\n    end\n    return fill_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia0z04ea.lua:36:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpia0z04ea.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local sum = 0\n    for i = 1, #grid do\n        sum = sum + grid[i]\n\
    \    end\n    if sum == 0 then\n        return 0\n    end\n    local n = math.ceil(sum\
    \ / capacity)\n    for i = n, 1, -1 do\n        for j = 1, #grid do\n        \
    \    if grid[j] >= i then\n                grid[j] = grid[j] - i\n           \
    \     if grid[j] == 0 then\n                    table.remove(grid, j)\n      \
    \          end\n                return 1 + max_fill(grid, capacity)\n        \
    \    end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt27b58cj.lua:19:\
    \ attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\
    \t/tmp/tmpt27b58cj.lua:19: in local 'candidate'\n\t/tmp/tmpt27b58cj.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local count = 0\n  local last = 0\n  for i = 1, #grid do\n    local\
    \ s = 0\n    for j = 1, #grid[i] do\n      s = s + grid[i][j]\n    end\n    if\
    \ last < s then\n      count = count + (s - last)\n      last = s\n    end\n \
    \   if last > capacity then\n      return math.huge\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt57k1c2a.lua:38:\
    \ expected: 6, actual: #Inf\nstack traceback:\n\t/tmp/tmpt57k1c2a.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local total = 0\n    for i = 1, #grid do\n        for j = 1,\
    \ #grid[i] do\n            if grid[i][j] == 1 then\n                total = total\
    \ + 1\n            end\n        end\n    end\n    -- print(total)\n    return\
    \ (total - 1) // capacity + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mkesnvx.lua:36:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7mkesnvx.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- local x, y = #grid, #grid[1]\n    -- local start, low, high\
    \ = 1, 1, x\n    -- while start <= x do\n    --     local i = 1\n    --     while\
    \ i <= y do\n    --         if grid[start][i] == 1 then\n    --             if\
    \ start > low then\n    --                 low = start\n    --             end\n\
    \    --             if start < high then\n    --                 high = start\n\
    \    --             end\n    --         end\n    --         i = i + 1\n    --\
    \     end\n    --     start = start + 1\n    -- end\n    -- return (high - low\
    \ + 1) * capacity\n    local res = 0\n    local x, y = #grid, #grid[1]\n    local\
    \ start, low, high = 1, 1, x\n    while start <= x do\n        if grid[start][1]\
    \ == 1 then\n            if start > low then\n                low = start\n  \
    \          end\n            if start < high then\n                high = start\n\
    \            end\n        end\n        start = start + 1\n    end\n    res = (high\
    \ - low + 1) * capacity\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj6nrwwx.lua:56:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpbj6nrwwx.lua:56: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_per_row = {}\n    for row = 1, #grid do\n        max_per_row[row]\
    \ = 0\n        for col = 1, #grid[row] do\n            if grid[row][col] == 1\
    \ then\n                max_per_row[row] = max_per_row[row] + 1\n            end\n\
    \        end\n    end\n    local function get_total_max()\n        local total_max\
    \ = 0\n        for row = 1, #max_per_row do\n            total_max = total_max\
    \ + max_per_row[row]\n        end\n        return total_max\n    end\n    local\
    \ buckets = {}\n    for bucket = 1, capacity do\n        buckets[bucket] = 0\n\
    \    end\n    local function get_max_fill()\n        local max_fill = 0\n    \
    \    for bucket = 1, capacity do\n            max_fill = max_fill + buckets[bucket]\n\
    \        end\n        return max_fill\n    end\n    local function add_to_row(bucket,\
    \ row)\n        buckets[bucket] = buckets[bucket] + 1\n        if buckets[bucket]\
    \ == max_per_row[row] then\n            max_per_row[row] = 0\n        end\n  \
    \  end\n    local function start_new_row(bucket)\n        local current_max =\
    \ get_max_fill()\n        local total_max = get_total_max()\n        local max_to_fill\
    \ = total_max - current_max\n        --print(\"max_to_fill\", max_to_fill)\n \
    \       local new_row = -1\n        local first_bigger = nil\n        for row\
    \ = 1, #max_per_row do\n            if max_per_row[row] > 0 then\n           \
    \     --print(\"considering row\", row, \"max_per_row[row]\", max_per_row[row])\n\
    \                if max_per_row[row] == max_to_fill then\n                   \
    \ --print(\"max_per_row[row] == max_to_fill\")\n                    first_bigger\
    \ = row\n                    new_row = row\n                    break\n      \
    \          elseif not first_bigger and max_per\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf7yplvsw.lua:66: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local wells_num = #grid\n  local well_len = #grid[1]\n  local total_fill\
    \ = 0\n  local overflow_cnt = 0\n  for i = 1, well_len do\n    local well_fill\
    \ = 0\n    for j = 1, wells_num do\n      well_fill = well_fill + grid[j][i]\n\
    \    end\n    if well_fill > capacity then\n      overflow_cnt = overflow_cnt\
    \ + 1\n    end\n    total_fill = total_fill + math.min(well_fill, capacity)\n\
    \  end\n  return total_fill, overflow_cnt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_4xrxo2.lua:37:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpj_4xrxo2.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    for _, row in ipairs(grid) do\n       \
    \ local filled = 0\n        for _, well in ipairs(row) do\n            filled\
    \ = filled + well\n            if filled >= capacity then\n                filled\
    \ = filled - capacity\n                result = result + 1\n            end\n\
    \        end\n        if filled > 0 then\n            result = result + 1\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n, m = #grid, #grid[1]\n    local fill = {}\n    for i\
    \ = 1, n do\n        local w = 0\n        for j = 1, m do\n            w = w +\
    \ grid[i][j]\n        end\n        fill[i] = w\n    end\n    local times = 0\n\
    \    while true do\n        local filled = 0\n        for i = 1, n do\n      \
    \      filled = filled + math.min(fill[i], capacity)\n        end\n        if\
    \ filled == 0 then\n            break\n        end\n        times = times + 1\n\
    \        for i = 1, n do\n            fill[i] = math.max(fill[i] - capacity, 0)\n\
    \        end\n    end\n    return times\nend\nreturn max_fill\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjol69v58.lua:43: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local water = 0\n    local empty = 0\n    for _, row in ipairs(grid)\
    \ do\n        for _, val in ipairs(row) do\n            if val == 1 then\n   \
    \             water = water + 1\n            else\n                empty = empty\
    \ + 1\n            end\n        end\n    end\n    local trips = math.ceil(water\
    \ / capacity)\n    return trips + empty\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2nve5mh.lua:35:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpb2nve5mh.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local columns = #grid[1]\n    local row_count = #grid\n    local\
    \ fills = 0\n    for j = 1, columns do\n        local fill = 0\n        for i\
    \ = 1, row_count do\n            if grid[i][j] == 1 then\n                fill\
    \ = fill + 1\n            end\n        end\n        if fill > capacity then\n\
    \            fill = capacity\n        end\n        fills = fills + fill\n    end\n\
    \    return fills\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwqc02po.lua:38:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpxwqc02po.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local cols = #grid[1]\n  local bucket = capacity\n\
    \  local moves = 0\n  for row = 1, rows do\n    bucket = capacity\n    for col\
    \ = 1, cols do\n      local units = grid[row][col]\n      if units >= bucket then\n\
    \        -- if units are more than the bucket can hold, fill the bucket and\n\
    \        -- move on to the next well\n        bucket = capacity\n        units\
    \ = units - bucket\n        moves = moves + 1\n      end\n      -- if units are\
    \ less than the bucket can hold, fill the bucket\n      bucket = bucket - units\n\
    \    end\n  end\n  return moves\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i907pkn.lua:43:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp7i907pkn.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal sum = 0\n\tfor _,row in ipairs(grid) do\n\t\tfor _,cell in\
    \ ipairs(row) do\n\t\t\tsum = sum + cell\n\t\tend\n\tend\n\treturn math.ceil(sum\
    \ / capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb5k2tvw.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjb5k2tvw.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local function fill(remain, row)\n        if row == 1 then\n\
    \            return 0\n        end\n        for row = 1, row - 1 do\n        \
    \    local line = grid[row]\n            local sum = 0\n            for j = 1,\
    \ #line do\n                sum = sum + line[j]\n            end\n           \
    \ if sum <= remain then\n                return 1 + fill(remain - sum, row)\n\
    \            end\n        end\n        return capacity + fill(capacity, row -\
    \ 1)\n    end\n    return fill(capacity, #grid)\nend\nreturn max_fill\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7nynnadp.lua:36: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    local n, m = #grid, #grid[1]\n    for j\
    \ = 1, m do\n        local fill = 0\n        for i = 1, n do\n            fill\
    \ = fill + grid[i][j]\n            if fill > capacity then\n                result\
    \ = result + 1\n                fill = capacity\n            end\n        end\n\
    \        result = result + math.ceil(fill / capacity)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3ssny9e.lua:37:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpm3ssny9e.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = grid:size(1)\n    local m = grid[1]:size(1)\n    local\
    \ visited = torch.ByteTensor(n, m):zero()\n    local empty = torch.ByteTensor(n,\
    \ m):zero()\n    local dirs = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} }\n    local\
    \ q = {}\n    local moves = 0\n    for i = 1, n do\n        for j = 1, m do\n\
    \            if grid[i][j] == 1 and not visited[i][j] then\n                local\
    \ found = false\n                for d = 1, #dirs do\n                    local\
    \ dir = dirs[d]\n                    local ii = i + dir[1]\n                 \
    \   local jj = j + dir[2]\n                    if ii > 0 and ii <= n and jj >\
    \ 0 and jj <= m and empty[ii][jj] == 1 then\n                        found = true\n\
    \                        break\n                    end\n                end\n\
    \                if not found then\n                    table.insert(q, {i, j})\n\
    \                    while #q > 0 do\n                        local cell = table.remove(q,\
    \ 1)\n                        local i = cell[1]\n                        local\
    \ j = cell[2]\n                        if visited[i][j] == 0 then\n          \
    \                  if grid[i][j] > 0 then\n                                grid[i][j]\
    \ = grid[i][j] - 1\n                                moves = moves + 1\n      \
    \                      end\n                            visited[i][j] = 1\n  \
    \                          if grid[i][j] == 0 then\n                         \
    \       empty[i][j] = 1\n                                for d = 1, #dirs do\n\
    \                                    local dir = dirs[d]\n                   \
    \                 local ii = i + dir[1]\n                                    local\
    \ jj = j + dir[2]\n                                    if ii > 0 and ii <= n and\
    \ jj > 0 and jj <= m and empty[ii][jj] == 0 then\n                           \
    \             table.insert(q, {ii, jj})\n                                    end\n\
    \                                end\n                            end\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\n    return moves\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9si0t3ni.lua:17:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmp9si0t3ni.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp9si0t3ni.lua:72: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local r = {}\n    local answer = 0\n   \
    \ local function fill(j)\n        while j > 0 and r[j] == 0 do\n            j\
    \ = j - 1\n        end\n        return j\n    end\n    for i = 1, n do\n     \
    \   local row = grid[i]\n        local j = 1\n        local s = 0\n        while\
    \ j <= #row do\n            if row[j] == 1 then\n                s = s + 1\n \
    \           else\n                local f = fill(j)\n                if f > 0\
    \ then\n                    if r[f] + s <= capacity then\n                   \
    \     answer = answer + 1\n                        for k = f, j - 1 do\n     \
    \                       r[k] = r[k] + s\n                        end\n       \
    \             else\n                        answer = answer + 1\n            \
    \            for k = f, j - 1 do\n                            r[k] = capacity\n\
    \                        end\n                        s = r[f] + s - capacity\n\
    \                        r[f] = 0\n                    end\n                end\n\
    \                j = j - 1\n            end\n            j = j + 1\n        end\n\
    \        local f = fill(j)\n        if f > 0 then\n            if r[f] + s <=\
    \ capacity then\n                answer = answer + 1\n                for k =\
    \ f, j - 1 do\n                    r[k] = r[k] + s\n                end\n    \
    \        else\n                answer = answer + 1\n                for k = f,\
    \ j - 1 do\n                    r[k] = capacity\n                end\n       \
    \         s = r[f] + s - capacity\n                r[f] = 0\n            end\n\
    \        end\n    end\n    return answer\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnxnq4pm.lua:36:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmprnxnq4pm.lua:36: in local 'candidate'\n\t/tmp/tmprnxnq4pm.lua:77: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local function in_water(row, col)\n        return grid[row] and\
    \ grid[row][col] == 1\n    end\n    local function assert_has_water(row, col)\n\
    \        assert(in_water(row, col), string.format(\"no water at %d %d\", row,\
    \ col))\n    end\n    local function assert_water_full(row, col)\n        assert(not\
    \ in_water(row, col), string.format(\"water full at %d %d\", row, col))\n    end\n\
    \    local function assert_col_length(col)\n        assert(col <= #grid[1], string.format(\"\
    invalid col %d\", col))\n    end\n    local function assert_row_length(row)\n\
    \        assert(row <= #grid, string.format(\"invalid row %d\", row))\n    end\n\
    \    local function assert_valid_position(row, col)\n        assert_row_length(row)\n\
    \        assert_col_length(col)\n    end\n    local function set_water(row, col,\
    \ water)\n        assert_valid_position(row, col)\n        grid[row][col] = water\n\
    \    end\n    local function fill_water(row, col)\n        assert_valid_position(row,\
    \ col)\n        assert_has_water(row, col)\n        set_water(row, col, 0)\n \
    \   end\n    local function empty_water(row, col)\n        assert_valid_position(row,\
    \ col)\n        assert_water_full(row, col)\n        set_water(row, col, 1)\n\
    \    end\n    local function find_first_water(col)\n        for row = 1, #grid\
    \ do\n            if in_water(row, col) then\n                return row\n   \
    \         end\n        end\n        return #grid + 1\n    end\n    local function\
    \ lower_bucket(row, col)\n        assert_valid_position(row, col)\n        assert_water_full(row,\
    \ col)\n        while capacity > 0 do\n            fill_water(row, col)\n    \
    \        capacity = capacity - 1\n            row = row + 1\n            if not\
    \ in_water(row, col) then\n                break\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzwq25zm2.lua:78: ''end'' expected (to close ''if'' at line
    65) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local function\
    \ sim()\n        local count = 0\n        local filled = 0\n        for j = 1,\
    \ cols do\n            for i = 1, rows do\n                if grid[i][j] == 1\
    \ then\n                    filled = filled + 1\n                end\n       \
    \     end\n            if filled < capacity then\n                count = count\
    \ + 1\n            end\n            filled = 0\n        end\n        return count\n\
    \    end\n    local function remove(i, j)\n        while grid[i][j] == 1 do\n\
    \            grid[i][j] = 0\n            i = i + 1\n        end\n    end\n   \
    \ local fills = sim()\n    local maxfills = fills\n    local maxi = 0\n    local\
    \ maxj = 0\n    for i = 1, rows do\n        for j = 1, cols do\n            if\
    \ grid[i][j] == 1 then\n                remove(i, j)\n                fills =\
    \ sim()\n                if fills > maxfills then\n                    maxfills\
    \ = fills\n                    maxi = i\n                    maxj = j\n      \
    \          end\n                -- restore\n                for x = 1, rows do\n\
    \                    for y = 1, cols do\n                        if x > i or y\
    \ > j then\n                            grid[x][y] = 0\n                     \
    \   end\n                    end\n                end\n            end\n     \
    \   end\n    end\n    return maxfills\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppckcf_aq.lua:72:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmppckcf_aq.lua:72: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local nrows = #grid\n    local ncols = #grid[1]\n    local nbuckets\
    \ = nrows\n    local vol_per_bucket = ncols\n    local buckets = {}\n    local\
    \ wells = {}\n    for i = 1, nrows do\n        buckets[i] = 0\n        wells[i]\
    \ = {}\n        for j = 1, ncols do\n            wells[i][j] = grid[i][j] == 0\
    \ and 0 or 1\n        end\n    end\n    local function log_state()\n        --print(\"\
    buckets:\", table.concat(buckets, \" \"))\n        --print(\"wells:\")\n     \
    \   --for i = 1, nrows do\n        --    print(table.concat(wells[i], \" \"))\n\
    \        --end\n    end\n    local function empty(bucket)\n        local depth\
    \ = buckets[bucket]\n        --print(\"emptying bucket\", bucket, \"at depth\"\
    , depth)\n        buckets[bucket] = 0\n        local overflow = {}\n        for\
    \ i = bucket+1, nbuckets do\n            local remaining = vol_per_bucket - buckets[i]\n\
    \            if remaining >= depth then\n                buckets[i] = buckets[i]\
    \ + depth\n                depth = 0\n                break\n            else\n\
    \                buckets[i] = vol_per_bucket\n                depth = depth -\
    \ remaining\n            end\n        end\n        if depth > 0 then\n       \
    \     for i = 1, bucket-1 do\n                local remaining = vol_per_bucket\
    \ - buckets[i]\n                if remaining >= depth then\n                 \
    \   buckets[i] = buckets[i] + depth\n                    depth = 0\n         \
    \           break\n                else\n                    buckets[i] = vol_per_bucket\n\
    \                    depth = depth - remaining\n                end\n        \
    \    end\n        end\n        if depth > 0 then\n            --print(\"overflow\
    \ remaining:\", depth)\n            overflow[#overflow+1] = bucket\n         \
    \   overflow[#overflow+1] = depth\n        end\n        return overflow\n    end\n\
    \    local function fill(bucket)\n        --print(\"filling bucket\", bucket)\n\
    \        buckets[bucket] = buckets[bucket] + 1\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmiu6j4oh.lua:88: ''end'' expected (to close ''function'' at
    line 73) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rlen = #grid\n    local clen = #grid[1]\n    local t =\
    \ {}\n    local max_fill_count = 0\n    for i=1,rlen do\n        for j=1,clen\
    \ do\n            local fill_count = 0\n            for k=1,j do\n           \
    \     if grid[i][k] == 1 then\n                    fill_count = fill_count + 1\n\
    \                end\n            end\n            max_fill_count = math.max(max_fill_count,\
    \ fill_count)\n        end\n    end\n    local needed_count = math.ceil(max_fill_count\
    \ / capacity)\n    return needed_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevhz6vqh.lua:39:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpevhz6vqh.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = grid.length\n  local cols = grid[1].length\n  local\
    \ max_capacity = capacity\n  local min_fill_times = 1\n  for i = 1, rows, 1 do\n\
    \    local sum = 0\n    for j = 1, cols, 1 do\n      sum = sum + grid[i][j]\n\
    \    end\n    if sum > max_capacity then\n      max_capacity = sum\n    end\n\
    \  end\n  min_fill_times = max_capacity / capacity\n  return min_fill_times\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk9qre35.lua:21:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpsk9qre35.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpsk9qre35.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local empties = {}\n    local total = 0\n    for i = 1, #grid\
    \ do\n        local last = -1\n        for j = 1, #grid[i] do\n            if\
    \ grid[i][j] == 1 then\n                last = j\n            end\n        end\n\
    \        if last > -1 then\n            table.insert(empties, {last, j})\n   \
    \         total = total + capacity\n        end\n    end\n    table.sort(empties,\
    \ function(a, b) return a[1] < b[1] end)\n    local filled = 0\n    for _, t in\
    \ ipairs(empties) do\n        filled = filled + t[2]\n    end\n    local remain\
    \ = filled - total\n    if remain > 0 then\n        remain = math.ceil(remain\
    \ / capacity)\n    end\n    return remain\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5m3q1soc.lua:34:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmp5m3q1soc.lua:34: in local 'candidate'\n\t/tmp/tmp5m3q1soc.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = #grid\n  local m = #grid[1]\n  local i, j = 1, 1\n  local\
    \ count = 0\n  local max_fill = capacity\n  while i <= n do\n    local fill =\
    \ 0\n    while j <= m do\n      if grid[i][j] == 1 then\n        fill = fill +\
    \ 1\n      else\n        if fill > 0 then\n          count = count + math.ceil(fill\
    \ / max_fill)\n          fill = 0\n        end\n      end\n      j = j + 1\n \
    \   end\n    if fill > 0 then\n      count = count + math.ceil(fill / max_fill)\n\
    \    end\n    i = i + 1\n    j = 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local filled = 0\n    local rows = #grid\n    local cols = #grid[1]\n\
    \    local row = 0\n    while filled < cols do\n        local col = 1\n      \
    \  while col <= cols do\n            if grid[row + 1][col] == 1 then\n       \
    \         grid[row + 1][col] = 0\n                filled = filled + 1\n      \
    \      end\n            col = col + 1\n        end\n        row = row + 1\n  \
    \  end\n    return row\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ye3whdp.lua:38:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmp2ye3whdp.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_water_level = 0\n    for i=1,#grid do\n        for\
    \ j=1,#grid[i] do\n            max_water_level = math.max(max_water_level, grid[i][j])\n\
    \        end\n    end\n    return math.ceil(max_water_level / capacity)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46ep8fyc.lua:29:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp46ep8fyc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = grid.length\n  local m = grid[1].length\n  local row_maxes\
    \ = {}\n  local col_maxes = {}\n  local max_buckets = math.ceil(n * m / capacity)\n\
    \  local buckets = {}\n  local row_index = 1\n  local col_index = 1\n  local row_total\
    \ = 0\n  local col_total = 0\n  for i = 1, n do\n    local row_max = 0\n    for\
    \ j = 1, m do\n      row_max = math.max(row_max, grid[i][j])\n    end\n    row_maxes[i]\
    \ = row_max\n    row_total = row_total + row_max\n  end\n  for j = 1, m do\n \
    \   local col_max = 0\n    for i = 1, n do\n      col_max = math.max(col_max,\
    \ grid[i][j])\n    end\n    col_maxes[j] = col_max\n    col_total = col_total\
    \ + col_max\n  end\n  local total = math.min(row_total, col_total)\n  while true\
    \ do\n    local bucket = {}\n    local new_bucket = {}\n    local new_bucket_available\
    \ = true\n    if row_total > col_total then\n      bucket.type = 'row'\n     \
    \ bucket.index = row_index\n      bucket.max = row_maxes[row_index]\n      local\
    \ new_total = 0\n      for i = 1, n do\n        if i ~= row_index then\n     \
    \     for j = 1, m do\n            new_bucket[#new_bucket + 1] = grid[i][j]\n\
    \          end\n        end\n      end\n      for _, v in ipairs(new_bucket) do\n\
    \        new_total = new_total + v\n      end\n      new_bucket_available = new_total\
    \ < total\n      row_index = row_index + 1\n    else\n      bucket.type = 'col'\n\
    \      bucket.index = col_index\n      bucket.max = col_maxes[col_index]\n   \
    \   local new_total = 0\n      for j =\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf0q6mb_y.lua:71: '','' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = {}\n    for i = 1, #grid do\n        local sum =\
    \ 0\n        for j = 1, #grid[i] do\n            sum = sum + grid[i][j]\n    \
    \    end\n        rows[i] = sum\n    end\n    local min_full_row_index, min_full_row_sum\
    \ = 1, rows[1]\n    for i = 2, #rows do\n        if rows[i] < min_full_row_sum\
    \ then\n            min_full_row_index, min_full_row_sum = i, rows[i]\n      \
    \  end\n    end\n    local count = 0\n    while min_full_row_sum > 0 do\n    \
    \    local sum = 0\n        for i = 1, #rows do\n            rows[i] = rows[i]\
    \ - capacity\n            if rows[i] < 0 then\n                rows[i] = 0\n \
    \           end\n            sum = sum + rows[i]\n        end\n        count =\
    \ count + 1\n        min_full_row_index, min_full_row_sum = 1, rows[1]\n     \
    \   for i = 2, #rows do\n            if rows[i] < min_full_row_sum then\n    \
    \            min_full_row_index, min_full_row_sum = i, rows[i]\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29hmureb.lua:55:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp29hmureb.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local nrows = #grid\n  local ncols = #grid[1]\n  local count =\
    \ 0\n  local fill_row\n  local spill_row\n  local spill_bucket\n  local fill_bucket\n\
    \  local buckets\n  fill_row = function(i)\n    local row = grid[i]\n    for j\
    \ = 1, ncols do\n      if row[j] == 1 then\n        row[j] = 0\n        buckets[j]\
    \ = buckets[j] + 1\n        count = count + 1\n      end\n    end\n  end\n  spill_row\
    \ = function(i)\n    for j = 1, ncols do\n      if buckets[j] > 0 then\n     \
    \   buckets[j] = buckets[j] - 1\n        grid[i][j] = 1\n        count = count\
    \ + 1\n      end\n    end\n  end\n  spill_bucket = function(i)\n    local row\
    \ = grid[i]\n    for j = 1, ncols do\n      if row[j] == 1 then\n        row[j]\
    \ = 0\n        buckets[j] = buckets[j] + 1\n        count = count + 1\n      end\n\
    \    end\n  end\n  fill_bucket = function(i)\n    for j = 1, ncols do\n      if\
    \ buckets[j] > 0 then\n        buckets[j] = buckets[j] - 1\n        grid[i][j]\
    \ = 1\n        count = count + 1\n      end\n    end\n  end\n  for i = 1, nrows\
    \ do\n    buckets = {}\n    for j = 1, ncols do\n      buckets[j] = 0\n    end\n\
    \    fill_row(i)\n    if i == nrows then\n      break\n    end\n    if i % 2 ==\
    \ 1 then\n      spill_row(i + 1)\n    else\n      spill_bucket(i + 1)\n    end\n\
    \  end\n  if nrows % 2 == 1 then\n    for i = nrows, 1, -1 do\n      fill_bucket(i)\n\
    \    end\n  else\n    for i = nrows, 1, -1 do\n      fill_row(i)\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphp2_kdl0.lua:97: ''end'' expected (to close ''if'' at line
    78) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local sum = 0\n    for _,row in ipairs(grid) do\n        local\
    \ fill = 0\n        for _,v in ipairs(row) do\n            fill = fill + v\n \
    \           if fill > capacity then\n                sum = sum + 1\n         \
    \       fill = 0\n            end\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0lbeqw8.lua:34:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpm0lbeqw8.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local average = math.floor(#grid / capacity)\n    local remainder\
    \ = #grid % capacity\n    return average + remainder, average\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgh0hkj8.lua:25:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpzgh0hkj8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local max = 0\n  for i = 1, #grid do\n    local row = grid[i]\n\
    \    for j = 1, #row do\n      local elem = row[j]\n      if elem == 1 then\n\
    \        max = max + 1\n      end\n    end\n  end\n  local max_row = math.floor(max\
    \ / capacity)\n  local remaining = max % capacity\n  if remaining > 0 then\n \
    \   max_row = max_row + 1\n  end\n  return max_row\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys37aouq.lua:42:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpys37aouq.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n, m = #grid, #grid[1]\n    local grids = {grid}\n    local\
    \ k = 1\n    local steps = 0\n    local filled = false\n    repeat\n        filled\
    \ = false\n        for i = 1, n do\n            for j = 1, m do\n            \
    \    if grids[k][i][j] == capacity then\n                    if j > 1 and grids[k][i][j\
    \ - 1] < capacity then\n                        if grids[k][i][j - 1] > 0 then\n\
    \                            grids[k + 1] = grids[k]\n                       \
    \     grids[k + 1][i][j - 1] = 0\n                        else\n             \
    \               grids[k + 1] = grids[k]\n                            grids[k +\
    \ 1][i][j - 1] = capacity\n                        end\n                     \
    \   grids[k + 1][i][j] = grids[k][i][j] - capacity\n                        k\
    \ = k + 1\n                        filled = true\n                    end\n  \
    \                  if j < m and grids[k][i][j + 1] < capacity then\n         \
    \               if grids[k][i][j + 1] > 0 then\n                            grids[k\
    \ + 1] = grids[k]\n                            grids[k + 1][i][j + 1] = 0\n  \
    \                      else\n                            grids[k + 1] = grids[k]\n\
    \                            grids[k + 1][i][j + 1] = capacity\n             \
    \           end\n                        grids[k + 1][i][j] = grids[k][i][j] -\
    \ capacity\n                        k = k + 1\n                        filled\
    \ = true\n                    end\n                    if i > 1 and grids[k][i\
    \ - 1][j] < capacity then\n                        if grids[k][i - 1][j] > 0 then\n\
    \                            grids[k + 1] = grids[k]\n                       \
    \     grids[k + 1][i - 1][j] = 0\n                        else\n             \
    \               grids[k + 1] = grids[k]\n                            grids[k +\
    \ 1][i - 1][j] = capacity\n                        end\n                     \
    \   grids[k + 1][i][j] = grids[k][i][j] - capacity\n                        k\
    \ = k + 1\n                        filled = true\n                    end\n  \
    \                  if i <\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp71v4ahrm.lua:64: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_fill = 0\n    for i=1,#grid do\n        for j=1,#grid[i]\
    \ do\n            if grid[i][j] == 1 then\n                max_fill = max_fill\
    \ + 1\n            end\n        end\n    end\n    return math.ceil(max_fill /\
    \ capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6jehrz9.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpl6jehrz9.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local buckets = {}\n    for i, line in ipairs(grid) do\n    \
    \    buckets[i] = 0\n        for j, well in ipairs(line) do\n            buckets[i]\
    \ = buckets[i] + well\n        end\n    end\n    local width = #grid[1]\n    local\
    \ height = #grid\n    local bucket = capacity\n    local counter = 0\n    local\
    \ i = 0\n    while true do\n        i = i + 1\n        i = i % height\n      \
    \  local water = buckets[i]\n        local level = math.floor(water / width)\n\
    \        if level >= 1 then\n            counter = counter + 1\n            buckets[i]\
    \ = water - level * width\n        end\n        if i == 0 then\n            local\
    \ full = true\n            for i, line in ipairs(buckets) do\n               \
    \ if line > 0 then\n                    full = false\n                    break\n\
    \                end\n            end\n            if full then\n            \
    \    break\n            end\n        end\n    end\n    return counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3l850bsb.lua:33:\
    \ attempt to perform arithmetic on a nil value (local 'water')\nstack traceback:\n\
    \t/tmp/tmp3l850bsb.lua:33: in local 'candidate'\n\t/tmp/tmp3l850bsb.lua:57: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local row, col = #grid, #grid[1]\n    local fill = 0\n    for\
    \ i = 1, row do\n        local count = 0\n        for j = 1, col do\n        \
    \    count = count + grid[i][j]\n        end\n        local div, mod = math.floor(count\
    \ / capacity), count % capacity\n        fill = fill + (mod == 0 and div or div\
    \ + 1)\n    end\n    return fill\nend\nreturn max_fill\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfwlp2k_b.lua:30: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal visited = {}\n\t\
    local q = {}\n\tfor i = 1, n do\n\t\tvisited[i] = {}\n\t\tfor j = 1, m do\n\t\t\
    \tvisited[i][j] = grid[i][j] == 0\n\t\t\tif grid[i][j] == 1 then\n\t\t\t\tq[#q\
    \ + 1] = {i, j}\n\t\t\tend\n\t\tend\n\tend\n\tlocal d = {{-1, 0}, {1, 0}, {0,\
    \ -1}, {0, 1}}\n\tlocal total = 0\n\twhile #q > 0 do\n\t\tlocal x, y = table.unpack(q[1])\n\
    \t\tq[1] = nil\n\t\ttotal = total + 1\n\t\tfor i = 1, 4 do\n\t\t\tlocal xx, yy\
    \ = x + d[i][1], y + d[i][2]\n\t\t\tif xx > 0 and xx <= n and yy > 0 and yy <=\
    \ m and not visited[xx][yy] then\n\t\t\t\tvisited[xx][yy] = true\n\t\t\t\tq[#q\
    \ + 1] = {xx, yy}\n\t\t\tend\n\t\tend\n\tend\n\treturn total / capacity\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to get length of a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal r = #grid\n\tlocal c = #grid[1]\n\tlocal fill = 0\n\tlocal\
    \ first = 1\n\tlocal last = capacity\n\tlocal empties = 0\n\tfor i = 1, r do\n\
    \t\tempties = 0\n\t\tfor j = 1, c do\n\t\t\tif grid[i][j] == 0 then\n\t\t\t\t\
    empties = empties + 1\n\t\t\tend\n\t\tend\n\t\tif empties == c then\n\t\t\tfirst\
    \ = first + 1\n\t\t\tlast = last + 1\n\t\telse\n\t\t\tfill = fill + last - first\
    \ + 1\n\t\t\tlast = last + empties\n\t\t\tfirst = 1\n\t\tend\n\tend\n\treturn\
    \ fill\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8riyfcy.lua:45:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpl8riyfcy.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  return capacity\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchthkou_.lua:23:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpchthkou_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal ret = 0\n\tfor row_idx = 1, #grid do\n\t\tlocal row = grid[row_idx]\n\
    \t\tlocal bucket = 0\n\t\tfor col_idx = 1, #row do\n\t\t\tlocal cell = row[col_idx]\n\
    \t\t\tbucket = bucket + cell\n\t\t\tif bucket == capacity then\n\t\t\t\tbucket\
    \ = 0\n\t\t\telseif bucket > capacity then\n\t\t\t\tbucket = cell\n\t\t\t\tret\
    \ = ret + 1\n\t\t\tend\n\t\tend\n\t\tif bucket > 0 then\n\t\t\tret = ret + 1\n\
    \t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvhhnrrg.lua:41:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpqvhhnrrg.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local ans\
    \ = 0\n    for i = 1, rows do\n        local buckets = {}\n        for j = 1,\
    \ cols do\n            if grid[i][j] == 1 then\n                buckets[#buckets\
    \ + 1] = j\n            end\n        end\n        for j = 1, #buckets - 1 do\n\
    \            local k = j + 1\n            while buckets[k] == buckets[k - 1] +\
    \ 1 do\n                k = k + 1\n            end\n            local n = capacity\
    \ - (buckets[k - 1] - buckets[j] + 1)\n            local m = math.floor(n / (#buckets\
    \ - j))\n            local r = n % (#buckets - j)\n            if m > 0 then\n\
    \                ans = ans + m\n                for l = j, #buckets do\n     \
    \               if l <= j + r then\n                        grid[i][buckets[l]]\
    \ = grid[i][buckets[l]] + m + 1\n                    else\n                  \
    \      grid[i][buckets[l]] = grid[i][buckets[l]] + m\n                    end\n\
    \                end\n            end\n        end\n    end\n    return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrwbn5v6.lua:53:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpwrwbn5v6.lua:53: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal maxfill = 0\n\tlocal n, m = #grid, #grid[1]\n\tlocal col_fill\
    \ = {}\n\tfor j = 1, m do\n\t\tlocal fill = 0\n\t\tfor i = 1, n do\n\t\t\tfill\
    \ = fill + grid[i][j]\n\t\tend\n\t\tcol_fill[j] = fill\n\t\tmaxfill = math.max(maxfill,\
    \ fill)\n\tend\n\treturn maxfill, col_fill\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq8kp82m.lua:34:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmphq8kp82m.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local bucket = 0\n    local max = 0\n    for _, row in ipairs(grid)\
    \ do\n        bucket = bucket + row\n        if bucket > capacity then\n     \
    \       local c = bucket - capacity\n            bucket = bucket - c\n       \
    \     max = max + c\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdj4vtwj6.lua:20:\
    \ attempt to perform arithmetic on a table value (local 'row')\nstack traceback:\n\
    \t/tmp/tmpdj4vtwj6.lua:20: in local 'candidate'\n\t/tmp/tmpdj4vtwj6.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local function max_row(grid)\n        local max_row_i = 1\n \
    \       local max_fill = 0\n        for i,row in ipairs(grid) do\n           \
    \ local fill = 0\n            for j,v in ipairs(row) do\n                fill\
    \ = fill + v\n            end\n            if fill > max_fill then\n         \
    \       max_fill = fill\n                max_row_i = i\n            end\n    \
    \    end\n        return max_row_i\n    end\n    local function min_fill(grid)\n\
    \        local min_fill = math.huge\n        for i,row in ipairs(grid) do\n  \
    \          local fill = 0\n            for j,v in ipairs(row) do\n           \
    \     fill = fill + v\n            end\n            if fill < min_fill then\n\
    \                min_fill = fill\n            end\n        end\n        return\
    \ min_fill\n    end\n    local function fill_row(grid, i, capacity)\n        local\
    \ fill = 0\n        for j,v in ipairs(grid[i]) do\n            fill = fill + v\n\
    \        end\n        local diff = capacity - fill\n        for j,v in ipairs(grid[i])\
    \ do\n            grid[i][j] = v + diff\n        end\n    end\n    local function\
    \ empty_row(grid, i, capacity)\n        local fill = 0\n        for j,v in ipairs(grid[i])\
    \ do\n            fill = fill + v\n        end\n        local diff = fill - capacity\n\
    \        for j,v in ipairs(grid[i]) do\n            grid[i][j] = v - diff\n  \
    \      end\n    end\n    local n_bkts = 0\n    local rows = max_fill(grid, capacity)\n\
    \    while min_fill(grid) < capacity do\n        fill_row(grid, rows, capacity)\n\
    \        n_bkts = n_bkts + 1\n        rows = max_fill(grid, capacity)\n    end\n\
    \    return n_bkts\nend\nreturn {\n    max_fill = max_fill,\n}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplmp4lzn0.lua:77: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    for i = 1, #grid do\n        local current\
    \ = 0\n        for j = 1, #grid[i] do\n            current = current + grid[i][j]\n\
    \            grid[i][j] = 0\n        end\n        if current > capacity then\n\
    \            for j = 1, current do\n                if j % capacity == 0 then\n\
    \                    result = result + 1\n                end\n            end\n\
    \        else\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9lj_pg1.lua:42:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpx9lj_pg1.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local accumulator = capacity\n  for i = 1, #grid do\n    for j\
    \ = 1, #grid[i] do\n      if grid[i][j] == 1 then\n        if accumulator > 0\
    \ then\n          accumulator = accumulator - 1\n          grid[i][j] = 0\n  \
    \      else\n          return false\n        end\n      end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptohnlbqn.lua:36:\
    \ expected: 6, actual: false\nstack traceback:\n\t/tmp/tmptohnlbqn.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local total = 0\n  for _, row in ipairs(grid) do\n    local count\
    \ = 0\n    for _, elem in ipairs(row) do\n      if elem == 1 then\n        count\
    \ = count + 1\n      end\n    end\n    local full_buckets = math.floor(count /\
    \ capacity)\n    local left_over = count % capacity\n    total = total + full_buckets\n\
    \    if left_over > 0 then\n      total = total + 1\n    end\n  end\n  return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local total\
    \ = 0\n    local fill = 0\n    local function compare(a, b)\n        return (a\
    \ > b)\n    end\n    for r = 1, rows do\n        total = total + grid[r][cols]\n\
    \        grid[r][cols] = 0\n    end\n    table.sort(grid, compare)\n    for r\
    \ = 1, rows do\n        for c = 1, cols do\n            if total > 0 then\n  \
    \              fill = fill + grid[r][c]\n                total = total - 1\n \
    \           end\n        end\n    end\n    return math.ceil(fill / capacity)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp3b5oy8o.lua:22:\
    \ attempt to compare two table values\nstack traceback:\n\t/tmp/tmpp3b5oy8o.lua:22:\
    \ in function </tmp/tmpp3b5oy8o.lua:21>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpp3b5oy8o.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpp3b5oy8o.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local buckets = {}\n    for row = 1, #grid do\n        buckets[row]\
    \ = 0\n    end\n    for _ = 1, capacity do\n        for row = 1, #grid do\n  \
    \          if buckets[row] == capacity then\n                break\n         \
    \   end\n            if buckets[row] < capacity and grid[row][buckets[row] + 1]\
    \ == 1 then\n                buckets[row] = buckets[row] + 1\n            end\n\
    \        end\n    end\n    local total = 0\n    for row = 1, #grid do\n      \
    \  total = total + buckets[row]\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6953d09b.lua:41:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6953d09b.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local m = #grid\n    local n = #grid[1]\n    local water = 0\n\
    \    for _, row in ipairs(grid) do\n        for j = 1, n do\n            if row[j]\
    \ == 1 then\n                water = water + 1\n            end\n        end\n\
    \    end\n    local result = math.ceil(water / capacity)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4_2fe48.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy4_2fe48.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local L = #grid[1]\n  local H = #grid\n  local depth = { [0] =\
    \ {} }\n  for i = 1, L do\n    depth[0][i] = 0\n  end\n  local result = 0\n  for\
    \ i = 1, H do\n    depth[i] = {}\n    for j = 1, L do\n      if grid[i][j] ==\
    \ 1 then\n        depth[i][j] = depth[i-1][j] + 1\n      else\n        depth[i][j]\
    \ = 0\n      end\n    end\n    local bottom = capacity\n    for j = 1, L do\n\
    \      bottom = math.min(bottom, depth[i][j])\n    end\n    result = result +\
    \ bottom\n    for j = 1, L do\n      depth[i][j] = depth[i][j] - bottom\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv35368c.lua:48:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpzv35368c.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- TODO: implement here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd1rmgu9.lua:23:\
    \ expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpnd1rmgu9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local row_count = #grid\n  local col_count = #grid[1]\n  -- Create\
    \ the bucket and a pointer to the current cell.\n  local bucket = 0\n  local row_pointer\
    \ = 1\n  local col_pointer = 1\n  local drops = 0\n  while row_pointer <= row_count\
    \ do\n    local row = grid[row_pointer]\n    local cell = row[col_pointer]\n \
    \   if cell == 1 then\n      if bucket > 0 then\n        -- If there is water\
    \ in the bucket, the current cell is 1, and the pointer is\n        -- not the\
    \ last column, the bucket can fill the current cell.\n        row[col_pointer]\
    \ = 0\n        bucket = bucket - 1\n      else\n        -- There's no water in\
    \ the bucket, but there is water in the current cell.\n        -- Move on to the\
    \ next row.\n        row_pointer = row_pointer + 1\n        -- If there is no\
    \ water in the bucket and the pointer is the last column,\n        -- the bucket\
    \ needs to be lowered.\n        if col_pointer == col_count then\n          drops\
    \ = drops + 1\n          -- Return the bucket to the first column and move on\
    \ to the next row.\n          col_pointer = 1\n          row_pointer = row_pointer\
    \ + 1\n        end\n      end\n    else\n      -- There is no water in the current\
    \ cell.\n      if bucket < capacity then\n        -- The bucket is not full and\
    \ the pointer is not the last column,\n        -- the bucket can be lowered.\n\
    \        drops = drops + 1\n        bucket = capacity\n      end\n      -- Move\
    \ on to the next column.\n      col_pointer = col_pointer + 1\n      -- If the\
    \ pointer is the last column, move on to the next row.\n      if col_pointer >\
    \ col_count then\n        col_pointer = 1\n        row_pointer = row_pointer +\
    \ 1\n      end\n    end\n  end\n  return drops\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y9nj09l.lua:69:\
    \ expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmp8y9nj09l.lua:69: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local count = 0\n  local last = -1\n  local i = 1\n  while i <=\
    \ #grid do\n    if grid[i] > 0 then\n      last = i\n    end\n    if grid[i] ==\
    \ 0 and last >= 0 then\n      local max = last\n      local j = last + 1\n   \
    \   while j <= #grid and grid[j] == 0 do\n        j = j + 1\n      end\n     \
    \ if j <= #grid then\n        max = j\n      end\n      if max - last > capacity\
    \ then\n        max = last + capacity\n      end\n      for k = last, max do\n\
    \        grid[k] = grid[k] - 1\n      end\n      count = count + 1\n      last\
    \ = -1\n    end\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbf0fyres.lua:21:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpbf0fyres.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbf0fyres.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = #grid\n  local m = #grid[1]\n  local count = 0\n  for\
    \ j = 1, m do\n    for i = 1, n do\n      if grid[i][j] == 1 then\n        if\
    \ capacity > 1 then\n          local inc = math.floor(capacity / 2)\n        \
    \  capacity = capacity - inc\n          count = count + inc\n        else\n  \
    \        count = count + 1\n          capacity = capacity - 1\n        end\n \
    \     end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qeo7v3v.lua:41:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp2qeo7v3v.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local times = 0\n    local height = math.min(capacity, #grid)\n\
    \    while height > 0 do\n        times = times + 1\n        local done = true\n\
    \        for i = #grid, 1, -1 do\n            if height > 0 and grid[i][1] ==\
    \ 1 then\n                grid[i][1] = 0\n                height = height - 1\n\
    \                done = false\n            end\n        end\n        if done then\
    \ height = 0 end\n    end\n    return times\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptneohxau.lua:37:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmptneohxau.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local sz = #grid\n    for i = 1, sz do\n        for j = 1, sz\
    \ do\n            if grid[i][j] == 1 then\n                grid[i][j] = capacity\n\
    \            end\n        end\n    end\n    return grid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujci4he0.lua:31:\
    \ expected: 6, actual: {{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}\nstack traceback:\n\
    \t/tmp/tmpujci4he0.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local function max_fill_rec(row, column, grid, capacity)\n    if\
    \ column < 1 or grid[row][column] == 0 then\n      return 0\n    end\n    if column\
    \ > #grid[row] then\n      return 0\n    end\n    if capacity < 1 then\n     \
    \ return 0\n    end\n    if capacity > #grid[row] - column + 1 then\n      return\
    \ #grid[row] - column + 1\n    end\n    return capacity\n  end\n  local function\
    \ fill_rec(row, column, grid, capacity)\n    local max_fill = max_fill_rec(row,\
    \ column, grid, capacity)\n    if max_fill == 0 then\n      return nil\n    end\n\
    \    local fill = {\n      row = row,\n      column = column,\n      max_fill\
    \ = max_fill\n    }\n    grid[row][column] = grid[row][column] - max_fill\n  \
    \  return fill\n  end\n  local function max_fill_next_row(grid, column, capacity)\n\
    \    local max_fill = 0\n    for i = 1, #grid do\n      local fill = max_fill_rec(i,\
    \ column, grid, capacity)\n      if fill > max_fill then\n        max_fill = fill\n\
    \      end\n    end\n    return max_fill\n  end\n  local function fill_next_row(grid,\
    \ column, capacity)\n    local fills = {}\n    for i = 1, #grid do\n      local\
    \ fill = fill_rec(i, column, grid, capacity)\n      if fill then\n        table.insert(fills,\
    \ fill)\n      end\n    end\n    return fills\n  end\n  local function is_done(grid)\n\
    \    for i = 1, #grid do\n      for j = 1, #grid[i] do\n        if grid[i][j]\
    \ ~= 0 then\n          return false\n        end\n      end\n    end\n    return\
    \ true\n  end\n  local function bucket_count(capacity, grid)\n    local count\
    \ = 0\n    local remaining_capacity = capacity\n    while not is_done(grid) do\n\
    \      if remaining_capacity == 0 then\n        remaining_capacity = capacity\n\
    \        count = count + 1\n      end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplizdwj_8.lua:94: ''end'' expected (to close ''while'' at line
    78) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local bucket_rows = {}\n  for _, row in ipairs(grid) do\n    bucket_rows[#bucket_rows\
    \ + 1] = { \n      fill = capacity, \n      selected = 0\n    }\n  end\n  local\
    \ drops = 0\n  for _, row in ipairs(grid) do\n    local selected = 0\n    for\
    \ j = 1, #row do\n      if row[j] == 1 then\n        local filled = false\n  \
    \      for i = 1, #bucket_rows do\n          if bucket_rows[i].fill > 0 then\n\
    \            bucket_rows[i].fill = bucket_rows[i].fill - 1\n            filled\
    \ = true\n            bucket_rows[i].selected = bucket_rows[i].selected + 1\n\
    \            break\n          end\n        end\n        if not filled then\n \
    \         selected = selected + 1\n        end\n      end\n    end\n    if selected\
    \ > 0 then\n      local min_bucket_row = math.huge\n      local min_bucket_row_index\
    \ = 0\n      for i = 1, #bucket_rows do\n        if bucket_rows[i].selected <\
    \ min_bucket_row then\n          min_bucket_row = bucket_rows[i].selected\n  \
    \        min_bucket_row_index = i\n        end\n      end\n      bucket_rows[min_bucket_row_index].fill\
    \ = \n        bucket_rows[min_bucket_row_index].fill + selected\n      bucket_rows[min_bucket_row_index].selected\
    \ = 0\n      drops = drops + 1\n    end\n  end\n  return drops\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcytvr33u.lua:64:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpcytvr33u.lua:64: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local idx_max_fill = nil\n    local max_fill = 0\n    for i =\
    \ 1, #grid do\n        local fill = 0\n        for j = 1, #grid[i] do\n      \
    \      fill = fill + grid[i][j]\n        end\n        if fill > max_fill then\n\
    \            max_fill = fill\n            idx_max_fill = i\n        end\n    end\n\
    \    return idx_max_fill, max_fill\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap1odogt.lua:35:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpap1odogt.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local m, n = #grid, #grid[1]\n  local row_cap = {}\n  for i = 1,\
    \ m do\n    row_cap[i] = 0\n    for j = 1, n do\n      if grid[i][j] == 1 then\n\
    \        row_cap[i] = row_cap[i] + 1\n      end\n    end\n  end\n  table.sort(row_cap)\n\
    \  local ans = 0\n  for i = 1, m do\n    if row_cap[i] == 0 then\n      break\n\
    \    end\n    ans = ans + row_cap[i]\n  end\n  return math.ceil(ans / capacity)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoxaukha.lua:42:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpcoxaukha.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local i, j, result = 0, 0, 0\n  while i < #grid do\n    local stack\
    \ = {}\n    while j < #grid[i] do\n      if grid[i][j] == 1 then\n        stack[#stack\
    \ + 1] = j\n      end\n      j = j + 1\n    end\n    if #stack > 0 then\n    \
    \  local size = math.min(capacity, #stack)\n      for idx = 1, size do\n     \
    \   grid[i][stack[idx]] = 0\n      end\n      if size < capacity then\n      \
    \  i = i + 1\n      end\n      result = result + 1\n    else\n      i = i + 1\n\
    \    end\n    j = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mj_loe1.lua:20:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0mj_loe1.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp0mj_loe1.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local height = #grid\n    local width = #grid[1]\n    local prev_grid\
    \ = grid\n    local curr_grid = {}\n    local result = 0\n    local function is_filled(grid,\
    \ i, j)\n        return grid[i][j] >= capacity\n    end\n    local function is_not_empty(grid,\
    \ i, j)\n        return grid[i][j] > 0\n    end\n    local function is_in_range(grid,\
    \ i, j)\n        return i >= 1 and i <= height and j >= 1 and j <= width\n   \
    \ end\n    for i = 1, height do\n        curr_grid[i] = {}\n        for j = 1,\
    \ width do\n            curr_grid[i][j] = prev_grid[i][j]\n        end\n    end\n\
    \    local function fill(prev_grid, curr_grid, i, j)\n        if is_in_range(curr_grid,\
    \ i, j) and is_not_empty(prev_grid, i, j) then\n            local max_level =\
    \ curr_grid[i][j]\n            if is_in_range(curr_grid, i + 1, j) and not is_filled(curr_grid,\
    \ i + 1, j) then\n                max_level = math.max(max_level, curr_grid[i\
    \ + 1][j])\n            end\n            if is_in_range(curr_grid, i - 1, j) and\
    \ not is_filled(curr_grid, i - 1, j) then\n                max_level = math.max(max_level,\
    \ curr_grid[i - 1][j])\n            end\n            if is_in_range(curr_grid,\
    \ i, j + 1) and not is_filled(curr_grid, i, j + 1) then\n                max_level\
    \ = math.max(max_level, curr_grid[i][j + 1])\n            end\n            if\
    \ is_in_range(curr_grid, i, j - 1) and not is_filled(curr_grid, i, j - 1) then\n\
    \                max_level = math.max(max_level, curr_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqt8q_bx.lua:51: '')'' expected (to close ''('' at line 50)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local N = #grid\n    local M = #grid[1]\n    local c = 0\n  \
    \  for i = 1, N do\n        local acc = 0\n        for j = 1, M do\n         \
    \   acc = acc + grid[i][j]\n            if acc == M then\n                c =\
    \ c + 1\n                acc = 0\n            end\n        end\n    end\n    return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaovy31g2.lua:36:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpaovy31g2.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n, m = #grid, #grid[1]\n    local fill = 0\n    for i =\
    \ 1, n do\n        local well = 0\n        for j = 1, m do\n            well =\
    \ well + grid[i][j]\n        end\n        if well > capacity then\n          \
    \  fill = fill + (well - capacity)\n        end\n    end\n    return fill\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf7gjpaf.lua:34:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpbf7gjpaf.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max = -1\n    for i, row in ipairs(grid) do\n        local\
    \ sum = 0\n        for j, v in ipairs(row) do\n            sum = sum + v\n   \
    \         if sum > capacity then\n                return -1\n            end\n\
    \        end\n        if sum > max then\n            max = sum\n        end\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6a6xnqk.lua:36:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpn6a6xnqk.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local r\n    local total = 0\n    local c = 1\n    local j\n\
    \    r = #grid\n    while c <= r do\n        j = 0\n        while grid[c][j +\
    \ 1] ~= nil do\n            if grid[c][j + 1] == 1 then\n                grid[c][j\
    \ + 1] = 0\n                total = total + 1\n            end\n            j\
    \ = j + 1\n        end\n        c = c + 1\n    end\n    return total\nend\nreturn\
    \ {\n    max_fill = max_fill\n}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4nn6k2rr.lua:38: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal n, m = #grid, #grid[1]\n\t-- longest column\n\tlocal h =\
    \ {}\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == 1 then\n\t\
    \t\t\th[j] = (h[j] or 0) + 1\n\t\t\telse\n\t\t\t\th[j] = 0\n\t\t\tend\n\t\tend\n\
    \tend\n\tlocal function lfill(fill, start)\n\t\tlocal times = 0\n\t\tif not start\
    \ then start = 1 end\n\t\tfor j = start, m do\n\t\t\tif fill < h[j] then\n\t\t\
    \t\ttimes = times + 1\n\t\t\t\tlocal t = math.floor((h[j] - fill) / capacity)\n\
    \t\t\t\tif t > 0 then\n\t\t\t\t\tfill = fill + t * capacity\n\t\t\t\tend\n\t\t\
    \t\tfill = fill - h[j]\n\t\t\telse\n\t\t\t\tfill = fill - h[j]\n\t\t\tend\n\t\t\
    end\n\t\treturn times\n\tend\n\tlocal function rfill(fill, start)\n\t\tlocal times\
    \ = 0\n\t\tif not start then start = m end\n\t\tfor j = start, 1, -1 do\n\t\t\t\
    if fill < h[j] then\n\t\t\t\ttimes = times + 1\n\t\t\t\tlocal t = math.floor((h[j]\
    \ - fill) / capacity)\n\t\t\t\tif t > 0 then\n\t\t\t\t\tfill = fill + t * capacity\n\
    \t\t\t\tend\n\t\t\t\tfill = fill - h[j]\n\t\t\telse\n\t\t\t\tfill = fill - h[j]\n\
    \t\t\tend\n\t\tend\n\t\treturn times\n\tend\n\tlocal a, b = lfill(capacity), rfill(capacity)\n\
    \treturn math.min(a, b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty74emwi.lua:70:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpty74emwi.lua:70: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = {}\n    for i, row in ipairs(grid) do\n        table.insert(rows,\
    \ string.gsub(row, '1', capacity))\n    end\n    return rows\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprn0fo0cz.lua:19:\
    \ bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmprn0fo0cz.lua:19: in local 'candidate'\n\t/tmp/tmprn0fo0cz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max = math.max\n    local function dfs(x, y, visited)\n\
    \        local sum = 0\n        for i = 1, #grid do\n            sum = sum + grid[i][y]\n\
    \        end\n        visited[y] = true\n        if sum > capacity then\n    \
    \        local next_move = {}\n            for i = 1, #grid do\n             \
    \   if not visited[i] then\n                    local next_fill = dfs(x, i, visited)\n\
    \                    if next_fill >= capacity then\n                        next_move[#next_move\
    \ + 1] = next_fill\n                    end\n                end\n           \
    \ end\n            if #next_move > 0 then\n                local max_next_fill\
    \ = max(unpack(next_move))\n                for i = 1, #grid do\n            \
    \        if grid[i][y] > max_next_fill then\n                        grid[i][y]\
    \ = max_next_fill\n                    end\n                end\n            end\n\
    \        end\n        return sum\n    end\n    local visited = {}\n    for y =\
    \ 1, #grid[1] do\n        dfs(1, y, visited)\n    end\n    local sum = 0\n   \
    \ for i = 1, #grid do\n        for j = 1, #grid[1] do\n            sum = sum +\
    \ grid[i][j]\n        end\n    end\n    return math.ceil(sum / capacity)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc3gxw_s.lua:35:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfc3gxw_s.lua:35:\
    \ in local 'dfs'\n\t/tmp/tmpfc3gxw_s.lua:47: in local 'candidate'\n\t/tmp/tmpfc3gxw_s.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local r, c = #grid, #grid[1]\n    -- local capacity = capacity\n\
    \    local num_lowered = 0\n    local bucket = capacity\n    for i = 1, r do\n\
    \        for j = 1, c do\n            local w = grid[i][j]\n            if w ==\
    \ 1 then\n                if bucket == 0 then\n                    bucket = capacity\n\
    \                    num_lowered = num_lowered + 1\n                end\n    \
    \            bucket = bucket - 1\n            end\n        end\n    end\n    return\
    \ num_lowered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5mxifdv.lua:39:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmpz5mxifdv.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local function max_fill_row(grid, capacity, i)\n        local\
    \ function fill_row(grid, capacity, i)\n            local function max_col(grid,\
    \ capacity, i, j)\n                if j < 1 or j > #grid[i] then\n           \
    \         return 0\n                end\n                local max_col_i = max_col(grid,\
    \ capacity, i, j - 1)\n                local max_col_i_1 = max_col(grid, capacity,\
    \ i, j + 1)\n                local bucket = math.min(capacity, grid[i][j] + max_col_i\
    \ + max_col_i_1)\n                grid[i][j] = grid[i][j] - bucket\n         \
    \       return bucket\n            end\n            return max_col(grid, capacity,\
    \ i, math.floor(#grid[i] / 2) + 1)\n        end\n        return fill_row(grid,\
    \ capacity, i)\n    end\n    local mf = 0\n    for i = 1, #grid do\n        mf\
    \ = mf + max_fill_row(grid, capacity, i)\n    end\n    return mf\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1k3v8vz.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpq1k3v8vz.lua:23: in upvalue 'max_col'\n\
    \t/tmp/tmpq1k3v8vz.lua:23: in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:24: in\
    \ upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:23: in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:24:\
    \ in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:23: in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:24:\
    \ in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:23: in upvalue 'max_col'\n\t/tmp/tmpq1k3v8vz.lua:24:\
    \ in upvalue 'max_col'\n\t...\t(skipping 181793 levels)\n\t/tmp/tmpq1k3v8vz.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpq1k3v8vz.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.120 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal row, col = #grid, #grid[1]\n\tlocal r, c = 0, 0\n\tlocal\
    \ result = 0\n\tlocal fill = 0\n\twhile true do\n\t\twhile c < col do\n\t\t\t\
    fill = fill + grid[r][c]\n\t\t\tif fill == capacity then\n\t\t\t\tresult = result\
    \ + 1\n\t\t\t\tfill = 0\n\t\t\t\tc = c + 1\n\t\t\telseif fill > capacity then\n\
    \t\t\t\tfill = 0\n\t\t\t\tresult = result + 1\n\t\t\t\tbreak\n\t\t\telse\n\t\t\
    \t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\tr = r + 1\n\t\tif r == row then\n\t\t\t\
    return result\n\t\tend\n\t\tc = 0\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyizldx8.lua:23:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmppyizldx8.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmppyizldx8.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local fill\
    \ = {}\n    for _ = 1, rows do\n        fill[#fill + 1] = 0\n    end\n    for\
    \ c = 1, cols do\n        for r = 1, rows do\n            if grid[r][c] == 1 then\n\
    \                fill[r] = fill[r] + 1\n            end\n        end\n    end\n\
    \    local function extract(r, c)\n        local f = fill[r]\n        local e\
    \ = capacity\n        while e ~= 0 and f ~= 0 do\n            fill[r] = f - 1\n\
    \            e = e - 1\n            f = f - 1\n        end\n    end\n    local\
    \ count = 0\n    for c = 1, cols do\n        for r = 1, rows do\n            if\
    \ fill[r] ~= 0 then\n                extract(r, c)\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local nrows = #grid\n    local ncols = #grid[1]\n    local water\
    \ = {}\n    local to_fill = {}\n    local to_fill_count = 0\n    local filled\
    \ = {}\n    local filled_count = 0\n    local res = 0\n    for i = 1, nrows do\n\
    \        for j = 1, ncols do\n            if grid[i][j] == 1 then\n          \
    \      to_fill[{i, j}] = true\n                to_fill_count = to_fill_count +\
    \ 1\n            end\n        end\n    end\n    while to_fill_count > 0 do\n \
    \       res = res + 1\n        filled = {}\n        filled_count = 0\n       \
    \ for i = 1, nrows do\n            for j = 1, ncols do\n                if to_fill[{i,\
    \ j}] then\n                    water[{i, j}] = (water[{i, j}] or 0) + 1\n   \
    \                 if water[{i, j}] == capacity then\n                        filled[{i,\
    \ j}] = true\n                        filled_count = filled_count + 1\n      \
    \              end\n                end\n            end\n        end\n      \
    \  to_fill = {}\n        to_fill_count = 0\n        for i = 1, nrows do\n    \
    \        for j = 1, ncols do\n                if filled[{i, j}] then\n       \
    \             if i - 1 >= 1 and grid[i - 1][j] == 1 then\n                   \
    \     to_fill[{i - 1, j}] = true\n                        to_fill_count = to_fill_count\
    \ + 1\n                    end\n                    if i + 1 <= nrows and grid[i\
    \ + 1][j] == 1 then\n                        to_fill[{i + 1, j}] = true\n    \
    \                    to_fill_count = to_fill_count + 1\n                    end\n\
    \                    if j - 1 >= 1 and grid[i][j - 1] == 1 then\n            \
    \            to_fill[{i, j - 1}] = true\n                        to_fill_count\
    \ = to_fill_count + 1\n                    end\n                    if j + 1 <=\
    \ ncols and grid[i][j + 1] == 1 then\n                        to_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7o4qn73m.lua:67: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local m, n = #grid, #grid[1]\n    local function is_empty(grid)\n\
    \        for i = 1, m do\n            for j = 1, n do\n                if grid[i][j]\
    \ > 0 then\n                    return false\n                end\n          \
    \  end\n        end\n        return true\n    end\n    local function fill(grid,\
    \ capacity)\n        local filled = 0\n        for i = 1, m do\n            for\
    \ j = 1, n do\n                if grid[i][j] > 0 then\n                    grid[i][j]\
    \ = grid[i][j] - capacity\n                    if grid[i][j] < 0 then\n      \
    \                  grid[i][j] = 0\n                    end\n                 \
    \   filled = filled + capacity\n                end\n            end\n       \
    \ end\n        return filled\n    end\n    local function empty(grid)\n      \
    \  local emptied = 0\n        for i = 1, m do\n            for j = 1, n do\n \
    \               if grid[i][j] > 0 then\n                    emptied = emptied\
    \ + grid[i][j]\n                    grid[i][j] = 0\n                end\n    \
    \        end\n        end\n        return emptied\n    end\n    local function\
    \ pour(grid, capacity)\n        local poured = 0\n        for i = 1, m do\n  \
    \          for j = 1, n do\n                if grid[i][j] < 0 then\n         \
    \           poured = poured + capacity\n                    grid[i][j] = grid[i][j]\
    \ + capacity\n                    if grid[i][j] > 0 then\n                   \
    \     grid[i][j] = 0\n                    end\n                end\n         \
    \   end\n        end\n        return poured\n    end\n    local function negative(grid)\n\
    \        for i = 1, m do\n            for j = 1, n do\n                if grid[i][j]\
    \ < 0 then\n                    return true\n                end\n           \
    \ end\n        end\n        return false\n    end\n    local pours = 0\n    while\
    \ not is_empty(grid) do\n        local filled = fill(grid, capacity)\n       \
    \ local emptied = empty(grid)\n        pours = pours + 1\n        local poured\
    \ = pour(grid, filled - emptied)\n        if poured == 0 and negative(grid) then\n\
    \            return\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpek253uox.lua:88: ''end'' expected (to close ''if'' at line
    86) near ''=''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local wells = {}\n  for i, row in ipairs(grid) do\n    wells[i]\
    \ = row\n  end\n  local times = 0\n  while true do\n    local max = 0\n    for\
    \ i, row in ipairs(wells) do\n      local filled = 0\n      for _, unit in ipairs(row)\
    \ do\n        if unit == 1 then\n          filled = filled + 1\n        end\n\
    \      end\n      max = math.max(max, filled)\n    end\n    if max == 0 then\n\
    \      break\n    end\n    for i, row in ipairs(wells) do\n      for j, unit in\
    \ ipairs(row) do\n        if unit == 1 then\n          if capacity > 0 then\n\
    \            wells[i][j] = 0\n            capacity = capacity - 1\n          end\n\
    \        end\n      end\n    end\n    times = times + 1\n    capacity = max\n\
    \  end\n  return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr48ol3tp.lua:55:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpr48ol3tp.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local water = 0\n    local count = 0\n    for _,row in ipairs(grid)\
    \ do\n        for _,cell in ipairs(row) do\n            if cell == 1 then\n  \
    \              water = water + 1\n            end\n        end\n    end\n    if\
    \ water == 0 then\n        return 0\n    end\n    count = math.ceil(water / capacity)\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9a29345.lua:40:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd9a29345.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_fill_count = 0\n    for _, row in ipairs(grid) do\n\
    \        local fill_count = 0\n        for _, unit in ipairs(row) do\n       \
    \     if unit == 1 then\n                fill_count = fill_count + 1\n       \
    \     else\n                break\n            end\n        end\n        if fill_count\
    \ > max_fill_count then\n            max_fill_count = fill_count\n        end\n\
    \    end\n    return math.ceil(max_fill_count / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3it_zte.lua:37:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpl3it_zte.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local wells = {}\n    for i, row in ipairs(grid) do\n       \
    \ local filled = row:match(\"1+\")\n        if filled then\n            wells[#wells\
    \ + 1] = {\n                fill = filled:len(),\n                i = i,\n   \
    \         }\n        end\n    end\n    table.sort(wells, function(a, b) return\
    \ a.fill > b.fill end)\n    local answer = 0\n    for _, well in ipairs(wells)\
    \ do\n        local fill = well.fill\n        while fill > 0 do\n            local\
    \ bucket = math.min(fill, capacity)\n            fill = fill - bucket\n      \
    \      answer = answer + 1\n        end\n    end\n    return answer\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfjlnpyq.lua:19:\
    \ attempt to call a nil value (method 'match')\nstack traceback:\n\t/tmp/tmpbfjlnpyq.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbfjlnpyq.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local wells = grid.length\n    local units = grid[1].length\n\
    \    local max_row = 0\n    local min_unit = 0\n    local water = 0\n    -- Find\
    \ the row with the highest number of units of water\n    for i = 1, wells do\n\
    \        local row = grid[i]\n        local row_units = 0\n        for j = 1,\
    \ units do\n            row_units = row_units + row[j]\n        end\n        if\
    \ row_units > max_row then\n            max_row = row_units\n            min_unit\
    \ = units\n        end\n    end\n    -- Find the unit with the lowest number of\
    \ units of water\n    for j = 1, units do\n        local unit_units = 0\n    \
    \    for i = 1, wells do\n            unit_units = unit_units + grid[i][j]\n \
    \       end\n        if unit_units < min_unit then\n            min_unit = unit_units\n\
    \        end\n    end\n    -- Find how many units of water we can fill with a\
    \ single bucket\n    water = math.floor(max_row / capacity)\n    water = water\
    \ + math.floor(min_unit / capacity)\n    return water\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27m44j0_.lua:23:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmp27m44j0_.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp27m44j0_.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill = 0\n    for r, row in ipairs(grid) do\n        if\
    \ r > 1 then\n            local prev_row = grid[r - 1]\n            for c, cell\
    \ in ipairs(row) do\n                local prev_cell = prev_row[c]\n         \
    \       if cell == 1 and prev_cell == 0 then\n                    fill = fill\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ fill\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31gy17w5.lua:35:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp31gy17w5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local fill = 0\n\
    \    local count = 0\n    local max_fill = 0\n    local index = {}\n    for i\
    \ = 1, n do\n        index[i] = 1\n    end\n    while true do\n        max_fill\
    \ = 0\n        for i = 1, n do\n            while index[i] <= m and grid[i][index[i]]\
    \ == 0 do\n                index[i] = index[i] + 1\n            end\n        \
    \    if index[i] <= m then\n                max_fill = math.max(max_fill, grid[i][index[i]])\n\
    \            end\n        end\n        if max_fill == 0 then\n            break\n\
    \        end\n        for i = 1, n do\n            if index[i] <= m then\n   \
    \             fill = math.min(max_fill, capacity)\n                grid[i][index[i]]\
    \ = grid[i][index[i]] - fill\n                if grid[i][index[i]] == 0 then\n\
    \                    index[i] = index[i] + 1\n                end\n          \
    \  end\n        end\n        count = count + 1\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbj5vzm5s.lua:56:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbj5vzm5s.lua:56: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal visited = {}\n\t\
    local function max_fill_visit(i, j)\n\t\tif i >= 1 and i <= n and j >= 1 and j\
    \ <= m then\n\t\t\tif not visited[i] then\n\t\t\t\tvisited[i] = {}\n\t\t\tend\n\
    \t\t\tif not visited[i][j] then\n\t\t\t\tvisited[i][j] = true\n\t\t\t\tlocal c\
    \ = grid[i][j]\n\t\t\t\tif c == 1 then\n\t\t\t\t\t-- fill this cell\n\t\t\t\t\t\
    grid[i][j] = 0\n\t\t\t\t\t-- mark previous cells as visited\n\t\t\t\t\tlocal d\
    \ = capacity - 1\n\t\t\t\t\twhile d > 0 do\n\t\t\t\t\t\tvisited[i][j - d] = true\n\
    \t\t\t\t\t\td = d - 1\n\t\t\t\t\tend\n\t\t\t\t\t-- fill left\n\t\t\t\t\tlocal\
    \ d = capacity\n\t\t\t\t\twhile d > 0 do\n\t\t\t\t\t\tmax_fill_visit(i, j - d)\n\
    \t\t\t\t\t\td = d - 1\n\t\t\t\t\tend\n\t\t\t\t\t-- fill above\n\t\t\t\t\tmax_fill_visit(i\
    \ - 1, j)\n\t\t\t\t\t-- fill below\n\t\t\t\t\tmax_fill_visit(i + 1, j)\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal function count()\n\t\tlocal c = 0\n\t\
    \tfor i = 1, n do\n\t\t\tfor j = 1, m do\n\t\t\t\tif grid[i][j] == 1 then\n\t\t\
    \t\t\tc = c + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn c\n\tend\n\tlocal\
    \ function iterate()\n\t\tlocal c = count()\n\t\twhile c > 0 do\n\t\t\tvisited\
    \ = {}\n\t\t\tmax_fill_visit(1, 1)\n\t\t\tc = count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvi73bq13.lua:79: ''end'' expected (to close ''while'' at line
    64) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: -1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local wells = {}\n    for i = 1, #grid do\n        wells[i] =\
    \ 0\n        for j = 1, #grid[i] do\n            wells[i] = wells[i] + grid[i][j]\n\
    \        end\n    end\n    local fills = 0\n    while true do\n        local max\
    \ = math.huge\n        for i = 1, #wells do\n            if wells[i] > 0 then\n\
    \                if wells[i] < max then\n                    max = wells[i]\n\
    \                end\n            end\n        end\n        if max > capacity\
    \ then\n            max = capacity\n        end\n        if max == math.huge then\n\
    \            break\n        end\n        for i = 1, #wells do\n            if\
    \ wells[i] > 0 then\n                wells[i] = wells[i] - max\n            end\n\
    \        end\n        fills = fills + 1\n    end\n    return fills\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823615
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyrbq4ff.lua:23:\
    \ expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmphyrbq4ff.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n, ncols = #grid, #grid[1]\n  local sum = 0\n  local function\
    \ max_col_sum(col)\n    local sum = 0\n    for i = 1, n do\n      sum = sum +\
    \ grid[i][col]\n    end\n    return sum\n  end\n  for j = 1, ncols do\n    local\
    \ col_sum = max_col_sum(j)\n    local div, mod = math.floor(col_sum / capacity),\
    \ col_sum % capacity\n    sum = sum + (div + (mod > 0 and 1 or 0))\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9zzvvr1.lua:38:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpx9zzvvr1.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local cols = #grid[1]\n  local output = {}\n\
    \  local total = 0\n  for col = 1, cols do\n    local row = rows\n    local col_total\
    \ = 0\n    while row > 0 do\n      if grid[row][col] == 1 then\n        col_total\
    \ = col_total + 1\n        if col_total == capacity then\n          total = total\
    \ + 1\n          col_total = 0\n        end\n      else\n        col_total = 0\n\
    \      end\n      row = row - 1\n    end\n    table.insert(output, col_total)\n\
    \  end\n  return total, output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo400lmpz.lua:45:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpo400lmpz.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local res = 0\n    local rem_cap = capacity\n    for i = 1, #grid\
    \ do\n        for j = 1, #grid[i] do\n            local well = grid[i][j]\n  \
    \          if well == 1 then\n                rem_cap = rem_cap - 1\n        \
    \        if rem_cap < 0 then\n                    rem_cap = capacity - 1\n   \
    \                 res = res + 1\n                end\n            end\n      \
    \  end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz16lkvxb.lua:37:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmpz16lkvxb.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local max_fill\
    \ = 0\n    local cur_fill = 0\n    for col = 1, cols do\n        cur_fill = 0\n\
    \        for row = 1, rows do\n            if grid[row][col] == 1 then\n     \
    \           cur_fill = cur_fill + 1\n            end\n        end\n        if\
    \ cur_fill > max_fill then\n            max_fill = cur_fill\n        end\n   \
    \ end\n    return math.ceil(max_fill / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvct1s0b.lua:38:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpkvct1s0b.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local sum = 0\n  for _, r in ipairs(grid) do\n    sum = sum + (r\
    \ - capacity)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwkgxqxr.lua:19:\
    \ attempt to perform arithmetic on a table value (local 'r')\nstack traceback:\n\
    \t/tmp/tmpdwkgxqxr.lua:19: in local 'candidate'\n\t/tmp/tmpdwkgxqxr.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max = 0\n    for i = 1, #grid do\n        local count =\
    \ 0\n        for j = 1, #grid[i] do\n            count = count + grid[i][j]\n\
    \        end\n        if count > max then\n            max = count\n        end\n\
    \    end\n    return max, max // capacity + (max % capacity > 0 and 1 or 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsy7b6u1.lua:33:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmptsy7b6u1.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    local max_fill_to_mark = {}\n    for i,\
    \ row in ipairs(grid) do\n        if not max_fill_to_mark[i] then\n          \
    \  local fill_to = 0\n            for j = 1, #row do\n                if row[j]\
    \ == 1 then\n                    fill_to = fill_to + 1\n                else\n\
    \                    break\n                end\n            end\n           \
    \ fill_to = math.min(fill_to, capacity)\n            for k = i, 1, -1 do\n   \
    \             max_fill_to_mark[k] = fill_to\n            end\n        end\n  \
    \      for j = 1, #row do\n            if row[j] == 1 then\n                row[j]\
    \ = 0\n                result = result + 1\n            else\n               \
    \ break\n            end\n        end\n        local fill_to = max_fill_to_mark[i]\n\
    \        for j = 1, fill_to do\n            if j <= #row and row[j] == 0 then\n\
    \                row[j] = 1\n                result = result + 1\n           \
    \ end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns37l2fo.lua:56:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmpns37l2fo.lua:56: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local wells = {}\n    for _, row in ipairs(grid) do\n       \
    \ wells[#wells + 1] = { sum = 0, row = row }\n    end\n    local max = 0\n   \
    \ for _, well in ipairs(wells) do\n        for _, bucket in ipairs(well.row) do\n\
    \            well.sum = well.sum + bucket\n        end\n        max = math.max(max,\
    \ well.sum)\n    end\n    return math.ceil(max / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplltkt9z5.lua:34:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmplltkt9z5.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    local row_max = math.max(unpack(grid))\n\
    \    while row_max > 0 do\n        local max = row_max\n        for _, row in\
    \ ipairs(grid) do\n            local min = math.min(max, row)\n            if\
    \ min > 0 then\n                result = result + 1\n                max = max\
    \ - min\n            end\n        end\n        row_max = max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52ncwjta.lua:18:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp52ncwjta.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp52ncwjta.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- Just what I did for problem 786.\n    local rows = #grid\n\
    \    local cols = #grid[1]\n    local next_line = {}\n    for j = 1, cols do\n\
    \        next_line[j] = -math.huge\n    end\n    for i = rows, 1, -1 do\n    \
    \    local line = grid[i]\n        local units = 0\n        for j = 1, cols do\n\
    \            local unit = line[j]\n            if unit == 1 then\n           \
    \     units = units + 1\n            else\n                if units > 0 then\n\
    \                    local k = math.floor(units / capacity)\n                \
    \    local fill = units % capacity\n                    local bottom = next_line[j]\n\
    \                    if k == 0 then\n                        if fill > bottom\
    \ then\n                            next_line[j] = fill\n                    \
    \    end\n                    else\n                        if k > 1 or bottom\
    \ == -math.huge then\n                            next_line[j] = capacity\n  \
    \                      else\n                            next_line[j] = math.max(bottom,\
    \ capacity - fill)\n                        end\n                    end\n   \
    \                 units = 0\n                end\n            end\n        end\n\
    \        if units > 0 then\n            local k = math.floor(units / capacity)\n\
    \            local fill = units % capacity\n            if k == 0 then\n     \
    \           for j = 1, cols do\n                    local bottom = next_line[j]\n\
    \                    if fill > bottom then\n                        next_line[j]\
    \ = fill\n                    end\n                end\n            else\n   \
    \             for j = 1, cols do\n                    local bottom = next_line[j]\n\
    \                    if k > 1 or bottom == -math.huge then\n                 \
    \       next_line[j] = capacity\n                    else\n                  \
    \      next_line[j] = math.max(bottom, capacity - fill)\n                    end\n\
    \                end\n            end\n        end\n    end\n    local lowers\
    \ = 0\n    for j = 1, cols do\n        lowers = lowers + next_line[j]\n    end\n\
    \    return lowers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_yw4igz.lua:83:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp8_yw4igz.lua:83: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  if capacity > #grid[1] then\n    capacity = #grid[1]\n  end\n \
    \ local max_pos = 0\n  local total = 0\n  local depth = 0\n  while true do\n \
    \   --print(string.format(\"=> max_pos: %d; total: %d; depth: %d\", max_pos, total,\
    \ depth))\n    max_pos = 0\n    total = 0\n    for i, row in ipairs(grid) do\n\
    \      local pos, val = best_fill(row, max_pos, capacity)\n      if pos > max_pos\
    \ then\n        max_pos = pos\n      end\n      total = total + val\n    end\n\
    \    if total == 0 then\n      return depth\n    end\n    --print(string.format(\"\
    ==> max_pos: %d; total: %d; depth: %d\", max_pos, total, depth))\n    for i, row\
    \ in ipairs(grid) do\n      row[max_pos] = 0\n    end\n    depth = depth + 1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb641n6iy.lua:28:\
    \ attempt to call a nil value (global 'best_fill')\nstack traceback:\n\t/tmp/tmpb641n6iy.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpb641n6iy.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    if grid == nil or #grid == 0 then\n        return 0\n    end\n\
    \    local W = #grid[1]\n    local H = #grid\n    local filled = 0\n    local\
    \ can_fill = {}\n    for j = 1, W do\n        local wj = grid[1][j]\n        if\
    \ wj == 1 then\n            filled = filled + 1\n            if capacity > filled\
    \ then\n                can_fill[j] = true\n            end\n        end\n   \
    \ end\n    if filled == W then\n        return 1\n    end\n    for i = 2, H do\n\
    \        filled = 0\n        for j = 1, W do\n            local wj = grid[i][j]\n\
    \            if wj == 1 then\n                filled = filled + 1\n          \
    \      if capacity > filled then\n                    can_fill[j] = true\n   \
    \             end\n            end\n        end\n        if filled == W then\n\
    \            return i\n        end\n    end\n    return H\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp3woob2.lua:57:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmphp3woob2.lua:57: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local buckets = {}\n    for y = 1, #grid do\n        table.insert(buckets,\
    \ capacity)\n    end\n    local result = 0\n    for x = 1, #grid[1] do\n     \
    \   for y = 1, #grid do\n            local q = grid[y][x]\n            if q ==\
    \ 1 then\n                if buckets[y] >= 1 then\n                    buckets[y]\
    \ = buckets[y] - 1\n                else\n                    -- lower bucket\n\
    \                    local found = false\n                    for yy = y - 1,\
    \ 1, -1 do\n                        if buckets[yy] > 0 then\n                \
    \            buckets[yy] = buckets[yy] - 1\n                            found\
    \ = true\n                            break\n                        end\n   \
    \                 end\n                    if not found then\n               \
    \         -- lower all buckets\n                        for yy = 1, #buckets do\n\
    \                            buckets[yy] = buckets[yy] - 1\n                 \
    \       end\n                        result = result + 1\n                   \
    \ end\n                end\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvpfy9g7.lua:55:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmppvpfy9g7.lua:55: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    if #grid == 0 then\n        return 0\n    end\n    local i =\
    \ 1\n    local j = 1\n    local height = 0\n    local next_row = function()\n\
    \        if j == 1 then\n            i = i + 1\n            if i > #grid then\n\
    \                return nil\n            end\n            return grid[i]\n   \
    \     else\n            j = j - 1\n            return grid[i]\n        end\n \
    \   end\n    local function move()\n        local row = next_row()\n        if\
    \ row == nil then\n            return\n        end\n        for k = 1, j do\n\
    \            if row[k] == 1 then\n                height = height + 1\n      \
    \          row[k] = 0\n            end\n        end\n        j = #row\n    end\n\
    \    local times = 0\n    while true do\n        local h = height\n        for\
    \ _ = 1, capacity do\n            move()\n            if height == h then\n  \
    \              break\n            end\n        end\n        if height == h then\n\
    \            break\n        end\n        times = times + 1\n    end\n    return\
    \ times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyt028ss.lua:68:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmptyt028ss.lua:68: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local min_fill = math.huge\n  for i = 1, #grid do\n    local fill\
    \ = 0\n    for j = 1, #grid[i] do\n      if grid[i][j] == 1 then\n        fill\
    \ = fill + 1\n      end\n    end\n    min_fill = math.min(min_fill, fill)\n  end\n\
    \  return min_fill\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ja6evxx.lua:33:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6ja6evxx.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local bucket\
    \ = capacity\n    local count = 0\n    for j = 1, cols do\n        for i = 1,\
    \ rows do\n            local block = grid[i][j]\n            if bucket >= block\
    \ then\n                bucket = bucket - block\n            else\n          \
    \      local needed = (capacity - bucket)\n                bucket = capacity -\
    \ block\n                count = count + needed\n            end\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytw5xonq.lua:39:\
    \ expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmpytw5xonq.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  -- Fill in this function. Do not forget the tests!\n  -- Assume\
    \ the grid is rectangular.\n  -- Just use the buckets to fill up each well to\
    \ the max.\n  -- There are grid.length buckets.\n  -- There are grid[i].length\
    \ wells.\n  -- It takes ceil(well[i] / capacity) to fill the ith well.\n  -- So\
    \ we need to return the maximum value of ceil(well[i] / capacity) for all i.\n\
    \  local max_buckets = 0\n  for i = 1, #grid do\n    local current_buckets = math.ceil(grid[i]\
    \ / capacity)\n    if max_buckets < current_buckets then\n      max_buckets =\
    \ current_buckets\n    end\n  end\n  return max_buckets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8qf3kn3.lua:26:\
    \ attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\
    \t/tmp/tmpb8qf3kn3.lua:26: in local 'candidate'\n\t/tmp/tmpb8qf3kn3.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    if not grid or #grid == 0 then\n        return nil\n    end\n\
    \    local wells = {}\n    for _, row in ipairs(grid) do\n        local sum =\
    \ 0\n        for _, cell in ipairs(row) do\n            sum = sum + cell\n   \
    \     end\n        table.insert(wells, sum)\n    end\n    local count = 0\n  \
    \  local row = 0\n    while true do\n        local v = wells[row + 1]\n      \
    \  if v == 0 then\n            row = row + 1\n            if row == #wells then\n\
    \                break\n            end\n        elseif v <= capacity then\n \
    \           count = count + 1\n            wells[row + 1] = 0\n        else\n\
    \            count = count + 1\n            wells[row + 1] = v - capacity\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal total = 0\n\tfor i, row in ipairs(grid) do\n\t\tlocal column_total\
    \ = 0\n\t\tfor j, cell in ipairs(row) do\n\t\t\tcolumn_total = column_total +\
    \ cell\n\t\tend\n\t\tif column_total > capacity then\n\t\t\ttotal = total + capacity\n\
    \t\telse\n\t\t\ttotal = total + column_total\n\t\tend\n\tend\n\treturn total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm2v4kze.lua:35:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmppm2v4kze.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max = 0\n    for i = 1, #grid do\n        local c = 0\n\
    \        for j = 1, #grid[i] do\n            if grid[i][j] == 1 then\n       \
    \         c = c + 1\n            end\n        end\n        if c > max then\n \
    \           max = c\n        end\n    end\n    local x = max / capacity\n    if\
    \ max % capacity == 0 then\n        return x\n    else\n        return x + 1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifhm0sgc.lua:40:\
    \ expected: 6, actual: 4.0\nstack traceback:\n\t/tmp/tmpifhm0sgc.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local buckets = 0\n  for _, row in ipairs(grid) do\n    local sum\
    \ = 0\n    for _, v in ipairs(row) do\n      sum = sum + v\n      if sum == capacity\
    \ then\n        buckets = buckets + 1\n        sum = 0\n      end\n    end\n \
    \   if sum > 0 then\n      buckets = buckets + 1\n    end\n  end\n  return buckets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill, count = 0, 0\n    for _, row in ipairs(grid) do\n\
    \        local units = 0\n        for _, unit in ipairs(row) do\n            units\
    \ = units + unit\n        end\n        local operation_count = math.ceil(units\
    \ / capacity)\n        fill = fill + operation_count\n        count = count +\
    \ operation_count - 1\n    end\n    return fill, count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y4o6r0a.lua:23:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmp4y4o6r0a.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local h = {}\n    for i = 1, #grid do\n        local g = grid[i]\n\
    \        local m = {}\n        for j = 1, #g do\n            local c = 0\n   \
    \         if g[j] == 1 then\n                for k = 1, capacity do\n        \
    \            if i - k > 0 and grid[i - k][j] == 1 then\n                     \
    \   c = c + 1\n                    else\n                        break\n     \
    \               end\n                end\n            end\n            m[j] =\
    \ c\n        end\n        h[i] = m\n    end\n    return h\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluwjiism.lua:42:\
    \ expected: 6, actual: {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 0, 0}}\nstack traceback:\n\
    \t/tmp/tmpluwjiism.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = 0\n    for _, row in ipairs(grid) do\n        local\
    \ c = 0\n        for _, x in ipairs(row) do\n            if x == 1 then\n    \
    \            c = c + 1\n            else\n                if c > 0 then\n    \
    \                n = n + 1\n                    c = 0\n                end\n \
    \           end\n        end\n        if c > 0 then\n            n = n + 1\n \
    \       end\n    end\n    return math.ceil(n / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qmbaa5k.lua:40:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmp2qmbaa5k.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: -1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local bucket = capacity\n    local count = 0\n    local rows\
    \ = #grid\n    local cols = #grid[1]\n    local row_index = 1\n    while row_index\
    \ <= rows do\n        local col_index = 1\n        while col_index <= cols do\n\
    \            if grid[row_index][col_index] == 1 then\n                -- fill\
    \ the bucket\n                local water = bucket\n                while water\
    \ > 0 and col_index <= cols do\n                    if grid[row_index][col_index]\
    \ == 1 then\n                        water = water - 1\n                     \
    \   grid[row_index][col_index] = 0\n                    end\n                \
    \    col_index = col_index + 1\n                end\n                bucket =\
    \ water\n                count = count + 1\n            else\n               \
    \ col_index = col_index + 1\n            end\n        end\n        row_index =\
    \ row_index + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823615
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = #grid\n  local m = #grid[1]\n  local ans = 0\n  for i\
    \ = 1, n do\n    for j = 1, m do\n      if grid[i][j] == 1 then\n        local\
    \ taken = grid[i][j]\n        if j + 1 <= m then\n          taken = taken + grid[i][j\
    \ + 1]\n        end\n        if i + 1 <= n then\n          taken = taken + grid[i\
    \ + 1][j]\n        end\n        local remain = capacity - taken\n        if remain\
    \ > 0 then\n          if j + 1 <= m then\n            grid[i][j + 1] = grid[i][j\
    \ + 1] + remain\n          end\n          if i + 1 <= n then\n            grid[i\
    \ + 1][j] = grid[i + 1][j] + remain\n          end\n        end\n        ans =\
    \ ans + 1\n      end\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mi022hb.lua:50:\
    \ expected: 5, actual: 10\nstack traceback:\n\t/tmp/tmp2mi022hb.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local row_sums = {}\n    local fill = 0\n    for row, line in\
    \ ipairs(grid) do\n        local row_sum = 0\n        for col, col_sum in ipairs(line)\
    \ do\n            row_sum = row_sum + col_sum\n        end\n        row_sums[row]\
    \ = row_sum\n        fill = fill + math.ceil(row_sum / capacity)\n    end\n  \
    \  return fill\nend\nreturn {\n    max_fill = max_fill\n}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxa_inwqm.lua:32: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local max = 0\n  for _, row in ipairs(grid) do\n    local tot =\
    \ 0\n    for _, v in ipairs(row) do\n      tot = tot + v\n    end\n    if tot\
    \ > max then\n      max = tot\n    end\n  end\n  local result = math.ceil(max\
    \ / capacity)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6jjs542.lua:34:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpm6jjs542.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local go = {}\n\
    \    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1,\
    \ m do\n            go[i] = (go[i] or 0) + grid[i][j]\n            if j > 1 then\n\
    \                dp[i][j] = math.max(dp[i][j - 1], go[i])\n            else\n\
    \                dp[i][j] = go[i]\n            end\n        end\n    end\n   \
    \ local moves = 0\n    local sum = 0\n    for j = 1, m do\n        sum = 0\n \
    \       for i = 1, n do\n            sum = sum + grid[i][j]\n            if sum\
    \ == capacity then\n                for ii = i, n do\n                    dp[ii][j]\
    \ = dp[ii][j] - capacity\n                end\n                moves = moves +\
    \ 1\n                sum = 0\n            elseif sum > capacity then\n       \
    \         for ii = i, n do\n                    dp[ii][j] = dp[ii][j] - (sum -\
    \ grid[i][j])\n                end\n                moves = moves + 1\n      \
    \          sum = grid[i][j]\n            end\n        end\n        if sum > 0\
    \ then\n            for ii = 1, n do\n                dp[ii][j] = dp[ii][j] -\
    \ sum\n            end\n            moves = moves + 1\n        end\n    end\n\
    \    for i = 1, n do\n        for j = 1, m do\n            if dp[i][j] > 0 then\n\
    \                moves = moves + math.ceil(dp[i][j] / capacity)\n            end\n\
    \        end\n    end\n    return moves\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qwm21t5.lua:72:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmp4qwm21t5.lua:72: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal rows = {}\n\tfor\
    \ i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + grid[i][j]\n\
    \t\tend\n\t\trows[i] = sum\n\tend\n\tlocal full_row = {}\n\tfor i = 1, n do\n\t\
    \tfull_row[i] = {}\n\t\tfor j = 1, m do\n\t\t\tfull_row[i][j] = capacity\n\t\t\
    end\n\tend\n\tlocal step = 0\n\twhile true do\n\t\tlocal new_rows = {}\n\t\tfor\
    \ i = 1, n do\n\t\t\tnew_rows[i] = 0\n\t\tend\n\t\tfor i = 1, n do\n\t\t\tlocal\
    \ row = rows[i]\n\t\t\tfor j = 1, m do\n\t\t\t\trow = row - full_row[i][j]\n\t\
    \t\t\tif row <= 0 then\n\t\t\t\t\tfull_row[i][j] = 0\n\t\t\t\telse\n\t\t\t\t\t\
    full_row[i][j] = capacity\n\t\t\t\tend\n\t\t\tend\n\t\t\tnew_rows[i] = row\n\t\
    \tend\n\t\tstep = step + 1\n\t\tif table.equal(new_rows, rows) then\n\t\t\tbreak\n\
    \t\tend\n\t\trows = new_rows\n\tend\n\treturn step\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0deg0um6.lua:53:\
    \ attempt to call a nil value (field 'equal')\nstack traceback:\n\t/tmp/tmp0deg0um6.lua:53:\
    \ in local 'candidate'\n\t/tmp/tmp0deg0um6.lua:64: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local cols = #grid[1]\n  local water = 0\n\
    \  local to_fill = 0\n  for i = 1, rows do\n    for j = 1, cols do\n      local\
    \ cell = grid[i][j]\n      if cell == 1 then\n        to_fill = to_fill + 1\n\
    \      else\n        water = water + to_fill\n        to_fill = 0\n      end\n\
    \    end\n    water = water + to_fill\n    to_fill = 0\n  end\n  local depth =\
    \ math.floor(water / capacity)\n  local final_depth = math.floor(water % capacity)\n\
    \  if final_depth > 0 then\n    depth = depth + 1\n  end\n  return depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0rjqbvi.lua:49:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm0rjqbvi.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local columns = #grid[1]\n  local result\
    \ = 0\n  for column = 1, columns do\n    local units = 0\n    for row = 1, rows\
    \ do\n      units = units + grid[row][column]\n    end\n    local buckets = units\
    \ // capacity\n    if buckets == 0 then\n      buckets = 1\n    end\n    result\
    \ = result + buckets\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ef61e2b.lua:38:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmp0ef61e2b.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local total_water = 0\n    local buckets = #grid[1]\n    local\
    \ row = {}\n    for i = 1, #grid do\n        total_water = total_water + table.sum(grid[i])\n\
    \        for j = 1, #grid[i] do\n            row[j] = row[j] or 0\n          \
    \  row[j] = row[j] + grid[i][j]\n            if row[j] > capacity then\n     \
    \           row[j] = row[j] - capacity\n                buckets = buckets + 1\n\
    \            end\n        end\n    end\n    return buckets, total_water\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnto3odw9.lua:21:\
    \ attempt to call a nil value (field 'sum')\nstack traceback:\n\t/tmp/tmpnto3odw9.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpnto3odw9.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = grid.length\n    local m = grid[1].length\n    --\n\
    \    local lo = 1\n    local hi = m\n    local max_grid = grid[1]:slice(1, m)\n\
    \    for i = 2, n do\n        if grid[i][1] > max_grid[1] then\n            max_grid[1]\
    \ = grid[i][1]\n        end\n        for j = 2, m do\n            if grid[i][j]\
    \ > max_grid[j] then\n                max_grid[j] = grid[i][j]\n            end\n\
    \        end\n    end\n    --\n    local function is_good(h)\n        local need\
    \ = 0\n        for i = 1, m do\n            need = need + max_grid[i] - h\n  \
    \      end\n        return need <= capacity\n    end\n    --\n    while lo < hi\
    \ do\n        local mi = math.floor((lo + hi) / 2)\n        if is_good(mi) then\n\
    \            hi = mi\n        else\n            lo = mi + 1\n        end\n   \
    \ end\n    --\n    return hi\nend\nreturn {\n    max_fill = max_fill,\n}\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpouezbwsa.lua:56: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local to_empty = {}\n    for i = 1, #grid do\n        local n\
    \ = 0\n        for j = 1, #grid[i] do\n            if grid[i][j] == 1 then\n \
    \               n = n + 1\n            end\n        end\n        local m = math.ceil(n\
    \ / capacity)\n        if m > 0 then\n            table.insert(to_empty, m)\n\
    \        end\n    end\n    local max = -1\n    for i = 1, #to_empty do\n     \
    \   if to_empty[i] > max then\n            max = to_empty[i]\n        end\n  \
    \  end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmh0zyf1.lua:42:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmprmh0zyf1.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill = 0\n    local empties = 0\n    for i = 1, #grid do\n\
    \        for j = 1, #grid[i] do\n            if grid[i][j] == 1 then\n       \
    \         fill = fill + 1\n            else\n                empties = empties\
    \ + 1\n            end\n        end\n    end\n    return math.ceil(fill / capacity)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83hsbkz9.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp83hsbkz9.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- calculate the max water level\n    local max_water_level =\
    \ 0\n    for _, row in ipairs(grid) do\n        local total_water = 0\n      \
    \  for _, num in ipairs(row) do\n            total_water = total_water + num\n\
    \        end\n        if total_water > max_water_level then\n            max_water_level\
    \ = total_water\n        end\n    end\n    -- simulate the filling\n    local\
    \ fill_count = 0\n    for level = 1, max_water_level do\n        for _, row in\
    \ ipairs(grid) do\n            local total_water = 0\n            for _, num in\
    \ ipairs(row) do\n                total_water = total_water + num\n          \
    \  end\n            if total_water >= level then\n                fill_count =\
    \ fill_count + 1\n            end\n        end\n    end\n    return fill_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62eiwmz2.lua:48:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp62eiwmz2.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- find max\n    local max = 0\n    for i = 1, #grid do\n   \
    \     local row = grid[i]\n        local max_in_row = 0\n        for j = 1, #row\
    \ do\n            local v = row[j]\n            if v > max_in_row then\n     \
    \           max_in_row = v\n            end\n        end\n        if max_in_row\
    \ > max then\n            max = max_in_row\n        end\n    end\n    -- fill\n\
    \    local fills = {}\n    for i = 0, max do\n        fills[i] = 0\n    end\n\
    \    for i = 1, #grid do\n        local row = grid[i]\n        for j = 1, #row\
    \ do\n            local v = row[j]\n            for k = 0, capacity - 1 do\n \
    \               local fi = v - k\n                if fi >= 0 then\n          \
    \          fills[fi] = fills[fi] + 1\n                end\n            end\n \
    \       end\n    end\n    -- find min\n    local min = 0\n    for i = 0, max do\n\
    \        if fills[i] > 0 then\n            min = i\n            break\n      \
    \  end\n    end\n    for i = 0, max do\n        if fills[i] == 0 then\n      \
    \      break\n        end\n        if fills[i] < fills[min] then\n           \
    \ min = i\n        end\n    end\n    return min\nend\nreturn {\n    max_fill =\
    \ max_fill,\n}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcs3smahh.lua:70: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local m = grid.length\n  local n = grid[1].length\n  local r =\
    \ m\n  local c = capacity\n  local t = 0\n  while true do\n    for i = 1, m do\n\
    \      for j = 1, n do\n        if grid[i][j] > 0 then\n          if c > 0 then\n\
    \            grid[i][j] = grid[i][j] - 1\n            c = c - 1\n          else\n\
    \            r = i\n            c = capacity\n            break\n          end\n\
    \        end\n      end\n    end\n    for i = m, 1, -1 do\n      for j = n, 1,\
    \ -1 do\n        if grid[i][j] > 0 then\n          if c > 0 then\n           \
    \ grid[i][j] = grid[i][j] - 1\n            c = c - 1\n          else\n       \
    \     r = i\n            c = capacity\n            break\n          end\n    \
    \    end\n      end\n    end\n    t = t + 1\n    if r == m and c == capacity then\n\
    \      return t\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj5d8pnz.lua:23:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpuj5d8pnz.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpuj5d8pnz.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local well_height = 0\n  for _, row in ipairs(grid) do\n    well_height\
    \ = math.max(well_height, row)\n  end\n  local min_lowers = 0\n  local lowers\
    \ = 0\n  local count = 0\n  while count < well_height do\n    local is_full =\
    \ false\n    for i, row in ipairs(grid) do\n      if grid[i] > 0 then\n      \
    \  grid[i] = grid[i] - 1\n        is_full = true\n      end\n    end\n    if is_full\
    \ then\n      lowers = lowers + 1\n    else\n      min_lowers = min_lowers + lowers\n\
    \      lowers = 0\n    end\n    count = count + 1\n  end\n  return min_lowers\
    \ + lowers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with table

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local min_fill =\
    \ 0\n    local lowest_cell_i = 1\n    local lowest_cell_j = 1\n    for i = 1,\
    \ n do\n        for j = 1, m do\n            local v = grid[i][j]\n          \
    \  if v == 1 then\n                min_fill = math.max(min_fill, capacity * (i\
    \ - lowest_cell_i))\n                lowest_cell_i = i\n                lowest_cell_j\
    \ = j\n            end\n        end\n    end\n    return min_fill\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmped2dd2_t.lua:38:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmped2dd2_t.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local height = 0\n    for _, row in ipairs(grid) do\n       \
    \ for _, item in ipairs(row) do\n            if item > height then\n         \
    \       height = item\n            end\n        end\n    end\n    local count\
    \ = 0\n    for _ = 1, height, capacity do\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf847r8c9.lua:35:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpf847r8c9.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal fill = 0\n\tfor i = 1, #grid do\n\t\tlocal row = grid[i]\n\
    \t\tfor j = 1, #row do\n\t\t\tlocal cell = row[j]\n\t\t\tif cell == 1 then\n\t\
    \t\t\tfill = fill + 1\n\t\t\t\tif fill == capacity then\n\t\t\t\t\tfill = 0\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn fill\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xljzm7u.lua:36:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp7xljzm7u.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local max\
    \ = 0\n    for row = 1, rows do\n        local fill = 0\n        for col = 1,\
    \ cols do\n            fill = fill + grid[row][col]\n        end\n        max\
    \ = math.max(max, fill)\n    end\n    local num_buckets = math.ceil(max / capacity)\n\
    \    return num_buckets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo704rwss.lua:34:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpo704rwss.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local t = {}\n    local max_t = {}\n    local first = true\n\
    \    for _, row in ipairs(grid) do\n        for i, cell in ipairs(row) do\n  \
    \          if cell == 1 then\n                t[i] = t[i] or 0\n             \
    \   t[i] = t[i] + 1\n                if first then\n                    max_t[i]\
    \ = t[i]\n                else\n                    max_t[i] = math.max(max_t[i],\
    \ t[i])\n                end\n            end\n        end\n        first = false\n\
    \    end\n    local result = 0\n    for i, v in ipairs(max_t) do\n        local\
    \ loops = math.ceil(v / capacity)\n        result = result + loops\n    end\n\
    \    return result\nend\nreturn max_fill\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaxugj2kh.lua:42: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local sum = 0\n\
    \    for i = 1, n do\n        for j = 1, m do\n            if grid[i][j] == 1\
    \ then\n                sum = sum + 1\n            end\n        end\n    end\n\
    \    if sum < capacity then\n        return 1\n    end\n    local buckets = {}\n\
    \    local function add_bucket(row, col)\n        buckets[#buckets + 1] = {\n\
    \            row = row,\n            col = col,\n            capacity = capacity,\n\
    \            state = 'empty'\n        }\n    end\n    for i = 1, n do\n      \
    \  for j = 1, m do\n            if grid[i][j] == 1 then\n                add_bucket(i,\
    \ j)\n            end\n        end\n    end\n    local steps = 0\n    while #buckets\
    \ > 0 do\n        steps = steps + 1\n        local fully_filled = true\n     \
    \   for i = 1, #buckets do\n            local b = buckets[i]\n            if b.state\
    \ == 'empty' then\n                local fill = 0\n                for j = 1,\
    \ m do\n                    if grid[b.row][j] == 1 then\n                    \
    \    fill = fill + 1\n                    end\n                end\n         \
    \       if fill <= b.capacity then\n                    b.state = 'full'\n   \
    \             else\n                    fully_filled = false\n               \
    \ end\n            end\n        end\n        for i = #buckets, 1, -1 do\n    \
    \        local b = buckets[i]\n            if b.state == 'full' then\n       \
    \         local row = b.row\n                for j = 1, m do\n               \
    \     if grid[row][j] == 1 then\n                        grid[row][j] = 0\n  \
    \                  end\n                end\n                table.remove(buckets,\
    \ i)\n            end\n        end\n        if fully_filled then\n           \
    \ return steps\n        end\n    end\n    return steps\nend\nreturn max_fill\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpszz5rv1e.lua:85: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local max_count\
    \ = 0\n    for i = 1, n do\n        local count = 0\n        for j = 1, m do\n\
    \            if grid[i][j] == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        max_count = math.max(max_count, count)\n  \
    \  end\n    return math.ceil(max_count / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71gvrl8_.lua:35:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp71gvrl8_.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local i = 1\n    local j = 1\n    local\
    \ fill = 0\n    while i <= n do\n        j = 1\n        while j <= #grid[i] do\n\
    \            if grid[i][j] == 1 then\n                fill = fill + 1\n      \
    \          if i < n then\n                    j = j + 1\n                end\n\
    \            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n\
    \    if fill == 0 then\n        return 0\n    end\n    return math.ceil(fill /\
    \ capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq_rlimk.lua:44:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmppq_rlimk.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local g = #grid\n  local c = #grid[1]\n  local res = 0\n  local\
    \ row_fill = 0\n  local row_res = 0\n  for i = 1, g do\n    row_fill = 0\n   \
    \ row_res = 0\n    for j = 1, c do\n      if grid[i][j] == 1 then\n        row_fill\
    \ = row_fill + 1\n      else\n        if row_fill > 0 then\n          row_res\
    \ = row_res + math.ceil(row_fill / capacity)\n          row_fill = 0\n       \
    \ end\n      end\n    end\n    if row_fill > 0 then\n      row_res = row_res +\
    \ math.ceil(row_fill / capacity)\n    end\n    res = res + row_res\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypuy6jgk.lua:23:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpypuy6jgk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local m, n = #grid, #grid[1]\n    local function empty(grid,\
    \ i, j)\n        if grid[i][j] == 0 then\n            return false\n        end\n\
    \        local amount = capacity\n        grid[i][j] = 0\n        while amount\
    \ > 0 do\n            if i > 1 and empty(grid, i - 1, j) then\n              \
    \  amount = amount - 1\n            elseif i < m and empty(grid, i + 1, j) then\n\
    \                amount = amount - 1\n            elseif j > 1 and empty(grid,\
    \ i, j - 1) then\n                amount = amount - 1\n            elseif j <\
    \ n and empty(grid, i, j + 1) then\n                amount = amount - 1\n    \
    \        else\n                break\n            end\n        end\n        return\
    \ true\n    end\n    local count = 0\n    while empty(grid, m, n) do\n       \
    \ count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ix1jd9n.lua:49:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp9ix1jd9n.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal result = 0\n\tfor i = 1, #grid do\n\t\tlocal row = grid[i]\n\
    \t\tfor j = 1, #row do\n\t\t\tlocal el = row[j]\n\t\t\tif el == 1 then\n\t\t\t\
    \tresult = result + 1\n\t\t\telse\n\t\t\t\tresult = result + math.floor(capacity\
    \ / (j - 1))\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4soxe2hq.lua:36:\
    \ expected: 6, actual: #Inf\nstack traceback:\n\t/tmp/tmp4soxe2hq.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local grid_size = #grid\n  local well_size = #grid[1]\n  local\
    \ w_idx = 0\n  local c_idx = 1\n  local fill = 0\n  while w_idx < grid_size do\n\
    \    while c_idx <= well_size do\n      if grid[w_idx + 1][c_idx] == 1 then\n\
    \        grid[w_idx + 1][c_idx] = 0\n        capacity = capacity - 1\n      end\n\
    \      if capacity == 0 then\n        capacity = well_size\n        fill = fill\
    \ + 1\n        break\n      end\n      c_idx = c_idx + 1\n    end\n    w_idx =\
    \ w_idx + 1\n    c_idx = 1\n  end\n  return fill\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolo30nh_.lua:44:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpolo30nh_.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local sum = 0\n  for i = 1, #grid do\n    local free = capacity\n\
    \    for j = 1, #grid[i] do\n      free = free - grid[i][j]\n      if free < 0\
    \ then\n        sum = sum + 1\n        free = capacity - grid[i][j]\n      end\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yp8r307.lua:34:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmp9yp8r307.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill_count = 0\n    local max_fill_count = 0\n    for i,\
    \ row in ipairs(grid) do\n        max_fill_count = math.max(max_fill_count, max_fill_count,\
    \ fill_count + capacity - row)\n        fill_count = fill_count + capacity - row\n\
    \    end\n    return max_fill_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hz53hc_.lua:20:\
    \ attempt to perform arithmetic on a table value (local 'row')\nstack traceback:\n\
    \t/tmp/tmp9hz53hc_.lua:20: in local 'candidate'\n\t/tmp/tmp9hz53hc_.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal row_ix = 0\n\tlocal row_max = #grid[1]\n\tlocal wells = #grid\n\
    \tlocal fills = 0\n\twhile true do\n\t\tlocal cur_row = grid[row_ix + 1]\n\t\t\
    if not cur_row then\n\t\t\tbreak\n\t\tend\n\t\tlocal level = 0\n\t\tlocal col_ix\
    \ = 0\n\t\twhile true do\n\t\t\tif level == capacity then\n\t\t\t\tlevel = 0\n\
    \t\t\tend\n\t\t\tif col_ix == row_max then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif\
    \ cur_row[col_ix + 1] == 1 then\n\t\t\t\tlevel = level + 1\n\t\t\tend\n\t\t\t\
    col_ix = col_ix + 1\n\t\tend\n\t\tfills = fills + level\n\t\trow_ix = row_ix +\
    \ 1\n\tend\n\treturn fills\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_7movt7.lua:49:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1_7movt7.lua:49: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local fill = 0\n    local total = 0\n    for _, row in ipairs(grid)\
    \ do\n        for j, val in ipairs(row) do\n            fill = fill + val\n  \
    \          if fill > capacity then\n                total = total + fill - capacity\n\
    \                fill = capacity\n            end\n        end\n        fill =\
    \ 0\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy15gziv8.lua:35:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpy15gziv8.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local total = 0\n    for _, row in ipairs(grid) do\n        local\
    \ count = 0\n        for _, e in ipairs(row) do\n            if e == 1 then\n\
    \                count = count + 1\n            else\n                if count\
    \ > 0 then\n                    local fill = math.ceil(count / capacity)\n   \
    \                 total = total + fill\n                    count = 0\n      \
    \          end\n            end\n        end\n        if count > 0 then\n    \
    \        local fill = math.ceil(count / capacity)\n            total = total +\
    \ fill\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal water = 0\n\tfor i = 1, #grid do\n\t\twater = water + grid[i]:gsub(\"\
    0\", \"\"):len()\n\tend\n\t--print(water)\n\tlocal r = math.floor(water / capacity)\n\
    \tif water % capacity ~= 0 then\n\t\tr = r + 1\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0eoq6q2.lua:19:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpg0eoq6q2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpg0eoq6q2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local max_col = 0\n  for _, row in ipairs(grid) do\n    local col\
    \ = max_index(row)\n    if col > max_col then\n      max_col = col\n    end\n\
    \  end\n  local max_row = 0\n  for i = 1, max_col do\n    local row = max_index(map(grid,\
    \ function(arr) return arr[i] end))\n    if row > max_row then\n      max_row\
    \ = row\n    end\n  end\n  return max_row\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfoowzva_.lua:19:\
    \ attempt to call a nil value (global 'max_index')\nstack traceback:\n\t/tmp/tmpfoowzva_.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpfoowzva_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal function take_one(row)\n\t\treturn function()\n\t\t\tlocal\
    \ bucket = 0\n\t\t\tfor i, v in ipairs(row) do\n\t\t\t\tbucket = bucket + v\n\t\
    \t\t\tif bucket > capacity then\n\t\t\t\t\tbucket = bucket - v\n\t\t\t\t\trow[i]\
    \ = v - (capacity - bucket)\n\t\t\t\t\treturn capacity - bucket\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\trow = {}\n\t\t\treturn bucket\n\t\tend\n\tend\n\tlocal row_fills\
    \ = {}\n\tfor i, row in ipairs(grid) do\n\t\ttable.insert(row_fills, take_one(row))\n\
    \tend\n\tlocal fill_count = 0\n\tlocal round_sum = 0\n\twhile true do\n\t\tround_sum\
    \ = 0\n\t\tfor i, f in ipairs(row_fills) do\n\t\t\tlocal fill = f()\n\t\t\tif\
    \ fill == 0 then\n\t\t\t\ttable.remove(row_fills, i)\n\t\t\t\tif #row_fills ==\
    \ 0 then\n\t\t\t\t\treturn fill_count\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tround_sum\
    \ = round_sum + fill\n\t\t\tend\n\t\tend\n\t\tfill_count = fill_count + round_sum\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mcx4_gx.lua:58:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp8mcx4_gx.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local n = #grid\n    local m = #grid[1]\n    local water = capacity\n\
    \    local t = 0\n    local i = 1\n    local j = 1\n    while i <= n do\n    \
    \    while j <= m do\n            if grid[i][j] == 1 then\n                water\
    \ = water - 1\n                grid[i][j] = -1\n            end\n            j\
    \ = j + 1\n        end\n        i = i + 1\n        j = 1\n        if water ==\
    \ 0 then\n            t = t + 1\n            water = capacity\n        end\n \
    \   end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt953_kd.lua:44:\
    \ expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpzt953_kd.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local result = 0\n    local has_not_filled = true\n    while\
    \ has_not_filled do\n        local num_filled = 0\n        for i = 1, #grid do\n\
    \            local filled = false\n            for j = 1, #grid[i] do\n      \
    \          if grid[i][j] > 0 then\n                    local diff = capacity -\
    \ grid[i][j]\n                    if diff > 0 then\n                        filled\
    \ = true\n                        grid[i][j] = 0\n                        if i\
    \ > 1 then\n                            grid[i - 1][j] = grid[i - 1][j] + diff\n\
    \                        end\n                    end\n                end\n \
    \           end\n            if filled then\n                num_filled = num_filled\
    \ + 1\n            end\n        end\n        if num_filled == 0 then\n       \
    \     has_not_filled = false\n        else\n            result = result + 1\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8plzfboo.lua:51:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp8plzfboo.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    if capacity > max(grid) then\n        return 0\n    end\n   \
    \ local count = 0\n    for i = 1, #grid do\n        local buckets = {}\n     \
    \   for j = 1, #grid[i] do\n            local add = 0\n            if grid[i][j]\
    \ == 1 then\n                if buckets[j] then\n                    if buckets[j]\
    \ < capacity then\n                        add = capacity - buckets[j]\n     \
    \               end\n                else\n                    add = capacity\n\
    \                end\n            end\n            buckets[j] = (buckets[j] or\
    \ 0) + add\n            count = count + add\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbx8y1uf5.lua:17:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpbx8y1uf5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpbx8y1uf5.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_filled = 0\n    for _, row in ipairs(grid) do\n   \
    \     local filled = 0\n        for _, well in ipairs(row) do\n            if\
    \ well == 1 then\n                filled = filled + 1\n            else\n    \
    \            if filled > max_filled then\n                    max_filled = filled\n\
    \                end\n                filled = 0\n            end\n        end\n\
    \        if filled > max_filled then\n            max_filled = filled\n      \
    \  end\n    end\n    return math.ceil(max_filled / capacity)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_kwycpq.lua:40:\
    \ expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpe_kwycpq.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local height = #grid\n    local width = #grid[1]\n    local total\
    \ = 0\n    for i = 1, height do\n        for j = 1, width do\n            total\
    \ = total + grid[i][j]\n        end\n    end\n    if total == 0 then\n       \
    \ return 0\n    end\n    local num_fill = total / capacity\n    if total % capacity\
    \ ~= 0 then\n        num_fill = num_fill + 1\n    end\n    local left_fill = 0\n\
    \    local right_fill = 0\n    local left_bucket = 0\n    local right_bucket =\
    \ 0\n    local left_index = 1\n    local right_index = width\n    while left_index\
    \ <= right_index do\n        while left_index <= right_index and left_bucket +\
    \ grid[1][left_index] <= capacity do\n            left_bucket = left_bucket +\
    \ grid[1][left_index]\n            left_index = left_index + 1\n        end\n\
    \        left_fill = left_fill + 1\n        left_bucket = 0\n        while left_index\
    \ <= right_index and right_bucket + grid[1][right_index] <= capacity do\n    \
    \        right_bucket = right_bucket + grid[1][right_index]\n            right_index\
    \ = right_index - 1\n        end\n        right_fill = right_fill + 1\n      \
    \  right_bucket = 0\n    end\n    return math.max(left_fill, right_fill)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mxg1hyn.lua:58:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp3mxg1hyn.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal m, n = #grid, #grid[1]\n\tlocal max_height = math.max(table.unpack(grid))\n\
    \tlocal result = 0\n\tfor row = 1, m do\n\t\tfor col = 1, n do\n\t\t\tlocal height\
    \ = grid[row][col]\n\t\t\tif height > 0 then\n\t\t\t\tlocal fill = math.min(height,\
    \ capacity)\n\t\t\t\tresult = result + fill\n\t\t\t\tgrid[row][col] = height -\
    \ fill\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local cols = #grid[1]\n  local lowest = 0\n\
    \  local max_fill = 0\n  local buckets = {}\n  local r = 1\n  while r <= rows\
    \ do\n    local c = 1\n    while c <= cols do\n      if grid[r][c] == 1 then\n\
    \        buckets[#buckets + 1] = 0\n      else\n        buckets[#buckets + 1]\
    \ = 1\n      end\n      c = c + 1\n    end\n    r = r + 1\n  end\n  local min_bucket\
    \ = math.min(unpack(buckets))\n  if min_bucket == 0 then\n    max_fill = capacity\
    \ - min_bucket\n  end\n  return max_fill\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvl27ept.lua:35:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfvl27ept.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpfvl27ept.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = #grid\n  local m = #grid[1]\n  local result = 0\n  while\
    \ true do\n    -- Lower the first \"bucket\"\n    local filled = false\n    local\
    \ extract = {}\n    for i = 1, n do\n      if grid[i][1] > 0 then\n        filled\
    \ = true\n        result = result + 1\n        local partial = capacity\n    \
    \    while partial > 0 do\n          local current = grid[i][1]\n          if\
    \ current > partial then\n            grid[i][1] = current - partial\n       \
    \     partial = 0\n          else\n            extract[#extract + 1] = current\n\
    \            partial = partial - current\n            grid[i][1] = 0\n       \
    \   end\n        end\n      end\n    end\n    if not filled then\n      break\n\
    \    end\n    -- Extract from the wells\n    for i = 1, #extract do\n      local\
    \ partial = extract[i]\n      for j = 2, m do\n        local current = grid[i][j]\n\
    \        if current > partial then\n          grid[i][j] = current - partial\n\
    \          partial = 0\n        else\n          partial = partial - current\n\
    \          grid[i][j] = 0\n        end\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ypihj44.lua:66:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp0ypihj44.lua:66: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: -1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local rows = #grid\n  local cols = #grid[1]\n  local filled = {}\n\
    \  for i = 1, rows do\n    filled[i] = {}\n    for j = 1, cols do\n      filled[i][j]\
    \ = 0\n    end\n  end\n  local depth = 1\n  while true do\n    local changed =\
    \ false\n    for i = 1, rows do\n      for j = 1, cols do\n        if filled[i][j]\
    \ < depth and grid[i][j] == 1 then\n          filled[i][j] = depth\n         \
    \ if i - 1 > 0 then\n            if filled[i - 1][j] < depth then\n          \
    \    changed = true\n              filled[i - 1][j] = depth\n            end\n\
    \          end\n          if i + 1 <= rows then\n            if filled[i + 1][j]\
    \ < depth then\n              changed = true\n              filled[i + 1][j] =\
    \ depth\n            end\n          end\n          if j - 1 > 0 then\n       \
    \     if filled[i][j - 1] < depth then\n              changed = true\n       \
    \       filled[i][j - 1] = depth\n            end\n          end\n          if\
    \ j + 1 <= cols then\n            if filled[i][j + 1] < depth then\n         \
    \     changed = true\n              filled[i][j + 1] = depth\n            end\n\
    \          end\n        end\n      end\n    end\n    if not changed then\n   \
    \   break\n    end\n    depth = depth + 1\n  end\n  local min_depth = depth\n\
    \  for i = 1, rows do\n    for j = 1, cols do\n      if filled[i][j] < min_depth\
    \ then\n        min_depth = filled[i][j]\n      end\n    end\n  end\n  return\
    \ depth - min_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823615
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local times = 0\n  local total = 0\n  local max_fill = 0\n  for\
    \ i = 1, #grid do\n    local row = grid[i]\n    local fill = 0\n    for j = 1,\
    \ #row do\n      if row[j] == 1 then\n        fill = fill + 1\n      end\n   \
    \ end\n    max_fill = math.max(max_fill, fill)\n    total = total + fill\n  end\n\
    \  if total == 0 then\n    return 0\n  end\n  times = math.ceil(total / capacity)\n\
    \  return math.max(max_fill, times)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc13nwlza.lua:45:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpc13nwlza.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_row = 0\n    for i, row in ipairs(grid) do\n      \
    \  max_row = math.max(max_row, sum(row))\n    end\n    return math.ceil(max_row\
    \ / capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg40y0dha.lua:19:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpg40y0dha.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpg40y0dha.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local function min(x, y)\n    if x < y then\n      return x\n \
    \   else\n      return y\n    end\n  end\n  local function max(x, y)\n    if x\
    \ > y then\n      return x\n    else\n      return y\n    end\n  end\n  local\
    \ function sum(tbl)\n    local total = 0\n    for _, x in ipairs(tbl) do\n   \
    \   total = total + x\n    end\n    return total\n  end\n  local function fill(tbl,\
    \ capacity)\n    local result = {}\n    for _, v in ipairs(tbl) do\n      if v\
    \ >= capacity then\n        table.insert(result, capacity)\n      else\n     \
    \   table.insert(result, v)\n      end\n    end\n    return result\n  end\n  local\
    \ max_value = max(unpack(grid))\n  local counter = 0\n  while max_value > 0 do\n\
    \    grid = fill(grid, capacity)\n    max_value = max(unpack(grid))\n    counter\
    \ = counter + 1\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8syed_ii.lua:49:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8syed_ii.lua:49:\
    \ in local 'candidate'\n\t/tmp/tmp8syed_ii.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local sum, res = 0, 0\n    for i = 1, #grid do\n        local\
    \ m = 0\n        for j = 1, #grid[i] do\n            if grid[i][j] == 1 then\n\
    \                m = m + 1\n            end\n        end\n        res = res +\
    \ math.ceil(m / capacity)\n        sum = sum + m\n    end\n    return res, sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local tot = 0\n    for i,row in ipairs(grid) do\n        local\
    \ left = 0\n        local right = #row\n        local fill = capacity\n      \
    \  for j = left+1, right do\n            local cur = row[j]\n            if cur\
    \ == 1 then\n                fill = fill - 1\n                if fill == 0 then\n\
    \                    left = j\n                    right = j\n               \
    \     fill = capacity\n                    tot = tot + 1\n                end\n\
    \            end\n        end\n        if left < right then\n            tot =\
    \ tot + 1\n        end\n    end\n    return tot\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nx1_cuh.lua:46:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp1nx1_cuh.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local max_fill_count = 0\n    local max_fill_count_row_idx =\
    \ 0\n    local grid_size = #grid\n    local row_size = #grid[1]\n    local col_idx\
    \ = 0\n    while col_idx < row_size do\n        local row_idx = 1\n        while\
    \ row_idx <= grid_size do\n            if grid[row_idx][col_idx] == 1 then\n \
    \               local row_idx_temp = row_idx\n                local bucket_fill_count\
    \ = 0\n                while row_idx_temp <= grid_size and bucket_fill_count <\
    \ capacity do\n                    if grid[row_idx_temp][col_idx] == 1 then\n\
    \                        bucket_fill_count = bucket_fill_count + 1\n         \
    \               grid[row_idx_temp][col_idx] = 0\n                    end\n   \
    \                 row_idx_temp = row_idx_temp + 1\n                end\n     \
    \           if bucket_fill_count > max_fill_count then\n                    max_fill_count\
    \ = bucket_fill_count\n                    max_fill_count_row_idx = row_idx\n\
    \                end\n            end\n            row_idx = row_idx + 1\n   \
    \     end\n        col_idx = col_idx + 1\n    end\n    return max_fill_count,\
    \ max_fill_count_row_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaybgq1c.lua:50:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpiaybgq1c.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    -- We need to find the maximum number in each row.\n    -- For\
    \ each row, we will fill the buckets, then subtract\n    -- the capacity from\
    \ the number.\n    -- The number of buckets lowered is the sum of all rows.\n\
    \    local buckets = 0\n    for i, row in ipairs(grid) do\n        local max =\
    \ 0\n        for j, cell in ipairs(row) do\n            if cell > max then\n \
    \               max = cell\n            end\n        end\n        buckets = buckets\
    \ + math.ceil(max / capacity)\n    end\n    return buckets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95373gm9.lua:37:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmp95373gm9.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local filled = 0\n    for r = 1, #grid do\n        local cells\
    \ = grid[r]\n        for c = 1, #cells do\n            local cell = cells[c]\n\
    \            filled = filled + cell\n        end\n    end\n    return filled\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup8l8_69.lua:32:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpup8l8_69.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local c = 0\n  local L = #grid[1]\n  local B = {}\n  for i = 1,\
    \ L do\n    B[i] = capacity\n  end\n  repeat\n    local fill = false\n    for\
    \ i = 1, #grid do\n      for j = 1, L do\n        if grid[i][j] == 1 and B[j]\
    \ > 0 then\n          B[j] = B[j] - 1\n          grid[i][j] = 0\n          fill\
    \ = true\n        end\n      end\n    end\n    if fill then\n      c = c + 1\n\
    \    end\n  until not fill\n  return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_esu4h8.lua:44:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpr_esu4h8.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  --[[\n  local status = {}\n  local result = 0\n  local fill_one\
    \ = function(i, j)\n    if i >= 1 and i <= #grid and j >= 1 and j <= #grid[1]\
    \ and grid[i][j] == 1 then\n      if status[i] == nil then\n        status[i]\
    \ = {}\n      end\n      if status[i][j] == nil then\n        status[i][j] = true\n\
    \        result = result + 1\n      end\n    end\n  end\n  local fill_line = function(i,\
    \ j)\n    local k = 1\n    while k <= capacity and j - k >= 1 do\n      fill_one(i,\
    \ j - k)\n      k = k + 1\n    end\n    k = 1\n    while k <= capacity and j +\
    \ k <= #grid[1] do\n      fill_one(i, j + k)\n      k = k + 1\n    end\n  end\n\
    \  for i, v in ipairs(grid) do\n    for j, w in ipairs(v) do\n      if w == 1\
    \ then\n        fill_line(i, j)\n      end\n    end\n  end\n  return result\n\
    \  --]]\n  local status = {}\n  local result = 0\n  local fill_one = function(i,\
    \ j)\n    if i >= 1 and i <= #grid and j >= 1 and j <= #grid[1] and grid[i][j]\
    \ == 1 then\n      if status[i] == nil then\n        status[i] = {}\n      end\n\
    \      if status[i][j] == nil then\n        status[i][j] = true\n        result\
    \ = result + 1\n      end\n    end\n  end\n  local fill_line = function(i, j)\n\
    \    for k = -capacity, capacity do\n      fill_one(i, j + k)\n    end\n  end\n\
    \  for i, v in ipairs(grid) do\n    for j, w in ipairs(v) do\n      if w == 1\
    \ then\n        fill_line(i, j)\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrv1718f.lua:84:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmptrv1718f.lua:84: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal res = 0\n\tlocal sz = #grid\n\tlocal buckets = {}\n\tfor\
    \ i = 1, sz do buckets[i] = 0 end\n\tfor i = 1, sz do\n\t\tfor j = 1, sz do\n\t\
    \t\tif grid[i][j] == 1 then\n\t\t\t\tbuckets[j] = buckets[j] + 1\n\t\t\tend\n\t\
    \tend\n\t\tlocal filled = 0\n\t\tfor j = 1, sz do\n\t\t\tif buckets[j] >= capacity\
    \ then\n\t\t\t\tbuckets[j] = buckets[j] - capacity\n\t\t\t\tfilled = filled +\
    \ capacity\n\t\t\telse\n\t\t\t\tfilled = filled + buckets[j]\n\t\t\t\tbuckets[j]\
    \ = 0\n\t\t\tend\n\t\tend\n\t\tif filled >= capacity then\n\t\t\tres = res + 1\n\
    \t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl0i2vdp.lua:47:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmprl0i2vdp.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: -1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local ans = 0\n  local row_cnt = #grid\n  local col_cnt = #grid[1]\n\
    \  local is_need_fill = true\n  while is_need_fill do\n    is_need_fill = false\n\
    \    for i = 1, row_cnt do\n      for j = 1, col_cnt do\n        if grid[i][j]\
    \ == 1 then\n          if grid[i - 1] and grid[i - 1][j] == 0 then\n         \
    \   grid[i - 1][j] = 1\n            grid[i][j] = 0\n            is_need_fill =\
    \ true\n          elseif grid[i + 1] and grid[i + 1][j] == 0 then\n          \
    \  grid[i + 1][j] = 1\n            grid[i][j] = 0\n            is_need_fill =\
    \ true\n          elseif grid[i][j - 1] == 0 then\n            grid[i][j - 1]\
    \ = 1\n            grid[i][j] = 0\n            is_need_fill = true\n         \
    \ elseif grid[i][j + 1] == 0 then\n            grid[i][j + 1] = 1\n          \
    \  grid[i][j] = 0\n            is_need_fill = true\n          end\n        end\n\
    \      end\n    end\n    if is_need_fill then\n      ans = ans + 1\n    end\n\
    \  end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823615
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local fill_count\
    \ = 0\n    for i = 1, rows do\n        local row_max = -1\n        for j = 1,\
    \ cols do\n            if grid[i][j] == 1 then\n                row_max = j\n\
    \            end\n        end\n        if row_max == -1 then\n            fill_count\
    \ = fill_count + cols\n        else\n            local pre_max = -1\n        \
    \    for j = 1, row_max do\n                if grid[i - 1] and grid[i - 1][j]\
    \ == 1 then\n                    pre_max = j\n                end\n          \
    \  end\n            if pre_max == -1 then\n                fill_count = fill_count\
    \ + row_max\n            else\n                fill_count = fill_count + row_max\
    \ - pre_max - 1\n            end\n        end\n    end\n    return fill_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1f5kx03d.lua:50:\
    \ expected: 5, actual: 11\nstack traceback:\n\t/tmp/tmp1f5kx03d.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local prev_fill = 0\n    local curr_fill = 0\n    local count\
    \ = 0\n    local rows = #grid\n    local cols = #grid[1]\n    while true do\n\
    \        prev_fill = curr_fill\n        curr_fill = math.min(prev_fill + capacity,\
    \ rows)\n        local left_over = 0\n        local i = curr_fill\n        while\
    \ i >= 1 do\n            local j = 1\n            while j <= cols do\n       \
    \         local water = grid[i][j]\n                if water > 0 then\n      \
    \              if water > left_over then\n                        left_over =\
    \ left_over + capacity - water\n                        grid[i][j] = 0\n     \
    \               else\n                        grid[i][j] = water - left_over\n\
    \                        left_over = 0\n                    end\n            \
    \    end\n                j = j + 1\n            end\n            i = i - 1\n\
    \        end\n        if curr_fill == prev_fill then\n            return count\n\
    \        end\n        count = count + 1\n    end\nend\nreturn max_fill\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfwpo7xbg.lua:51: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal rows = #grid\n\tlocal cols = #grid[1]\n\tlocal max_water\
    \ = 0\n\tlocal cur_water = 0\n\tfor c = 1, cols do\n\t\tfor r = 1, rows do\n\t\
    \t\tif grid[r][c] == 1 then\n\t\t\t\tcur_water = cur_water + 1\n\t\t\t\tif cur_water\
    \ > max_water then\n\t\t\t\t\tmax_water = cur_water\n\t\t\t\tend\n\t\t\telse\n\
    \t\t\t\tcur_water = 0\n\t\t\tend\n\t\tend\n\tend\n\treturn math.ceil(max_water\
    \ / capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupsf68f8.lua:39:\
    \ expected: 6, actual: 3\nstack traceback:\n\t/tmp/tmpupsf68f8.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local accumulator = 0\n    local max_i = 0\n    local max_j =\
    \ 0\n    for i, row in ipairs(grid) do\n        accumulator = accumulator + row\n\
    \        if accumulator > max_i then\n            max_i = accumulator\n      \
    \  end\n    end\n    accumulator = 0\n    for j, _ in ipairs(grid[1]) do\n   \
    \     for i, row in ipairs(grid) do\n            accumulator = accumulator + row[j]\n\
    \        end\n        if accumulator > max_j then\n            max_j = accumulator\n\
    \        end\n        accumulator = 0\n    end\n    return math.ceil(max_i / capacity)\
    \ + math.ceil(max_j / capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8spikwa.lua:21:\
    \ attempt to perform arithmetic on a table value (local 'row')\nstack traceback:\n\
    \t/tmp/tmpf8spikwa.lua:21: in local 'candidate'\n\t/tmp/tmpf8spikwa.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local i, j, count = 1, 1, 0\n  while i <= #grid do\n    while j\
    \ <= #grid[i] do\n      if grid[i][j] == 1 then\n        grid[i][j] = 0\n    \
    \    count = count + 1\n        capacity = capacity - 1\n      end\n      if capacity\
    \ == 0 then\n        capacity = capacity + 1\n        count = count + 1\n    \
    \  end\n      j = j + 1\n    end\n    i = i + 1\n    j = 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_slqkf61.lua:40:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmp_slqkf61.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local wells = {}\n  for y, row in ipairs(grid) do\n    for x =\
    \ 1, #row do\n      local cell = row:sub(x, x)\n      if cell == '1' then\n  \
    \      table.insert(wells, { x, y })\n      end\n    end\n  end\n  local function\
    \ make_it(wells, capacity)\n    local function make_row(row, total)\n      if\
    \ #row >= capacity then\n        return #row, total + 1\n      end\n      local\
    \ new_row = {}\n      for _, v in ipairs(row) do\n        local x, y = unpack(v)\n\
    \        for i = -1, 1 do\n          for j = -1, 1 do\n            if i ~= 0 or\
    \ j ~= 0 then\n              table.insert(new_row, { x + i, y + j })\n       \
    \     end\n          end\n        end\n      end\n      return make_row(new_row,\
    \ total + 1)\n    end\n    return make_row(wells, 0)\n  end\n  local max, count\
    \ = make_it(wells, capacity)\n  while max >= capacity do\n    max, count = make_it(wells,\
    \ max)\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaph44iyb.lua:20:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpaph44iyb.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpaph44iyb.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = #grid\n  local m = #grid[1]\n  local max_row_fill = {}\n\
    \  for i = 1, n do\n    local row_fill = 0\n    for j = 1, m do\n      if grid[i][j]\
    \ == 1 then\n        row_fill = row_fill + 1\n      end\n    end\n    max_row_fill[i]\
    \ = row_fill\n  end\n  table.sort(max_row_fill)\n  local buckets = 0\n  for i\
    \ = 1, n do\n    local row_fill = max_row_fill[i]\n    buckets = buckets + math.ceil(row_fill\
    \ / capacity)\n  end\n  return buckets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    if #grid == 0 then\n        return 0\n    end\n    local h, w\
    \ = #grid, #grid[1]\n    local occupied = {}\n    local function is_boundary(i,\
    \ j)\n        return i == 0 or i == h - 1 or j == 0 or j == w - 1\n    end\n \
    \   local function fill(i, j)\n        while capacity > 0 and grid[i][j] > 0 do\n\
    \            capacity = capacity - 1\n            grid[i][j] = grid[i][j] - 1\n\
    \        end\n    end\n    local function mark_occupied(i, j)\n        occupied[i\
    \ * w + j] = true\n    end\n    local function is_occupied(i, j)\n        return\
    \ occupied[i * w + j]\n    end\n    local count = 0\n    local function mark_filled()\n\
    \        count = count + 1\n        occupied = {}\n    end\n    local q = {}\n\
    \    local function enqueue(i, j)\n        if is_boundary(i, j) then\n       \
    \     mark_occupied(i, j)\n            table.insert(q, {i, j})\n        end\n\
    \    end\n    for i = 0, h - 1 do\n        for j = 0, w - 1 do\n            if\
    \ is_boundary(i, j) then\n                enqueue(i, j)\n            end\n   \
    \     end\n    end\n    local function neighbours(i, j)\n        return {{i -\
    \ 1, j}, {i + 1, j}, {i, j - 1}, {i, j + 1}}\n    end\n    while #q > 0 do\n \
    \       local cell = table.remove(q, 1)\n        local i, j = cell[1], cell[2]\n\
    \        if grid[i][j] > 0 then\n            fill(i, j)\n        end\n       \
    \ if grid[i][j] == 0 then\n            for _, nbr in ipairs(neighbours(i, j))\
    \ do\n                local ni, nj = nbr[1], nbr[2]\n                if not is_occupied(ni,\
    \ nj) then\n                    enqueue(ni, nj)\n                end\n       \
    \     end\n        end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk0pr9sge.lua:85: ''end'' expected (to close ''while'' at line
    59) near <eof>

    '
  stdout: ''
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local n = 0\n  local m = 0\n  for _, x in ipairs(grid) do\n   \
    \ m = math.max(m, #x)\n  end\n  for j = 1, m do\n    for i = 1, #grid do\n   \
    \   if grid[i][j] == 1 then\n        n = n + 1\n      end\n    end\n  end\n  return\
    \ math.ceil(n / capacity)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge3xwjyf.lua:39:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpge3xwjyf.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n\tlocal num_rows = #grid\n\tlocal num_cols = #grid[1]\n\tlocal result\
    \ = 0\n\tlocal max_fill = {0}\n\tfor col = 1, num_cols do\n\t\tlocal fill = max_fill[col]\n\
    \t\tif fill == capacity then\n\t\t\ttable.insert(max_fill, capacity)\n\t\telse\n\
    \t\t\tlocal water = 0\n\t\t\tfor row = 1, num_rows do\n\t\t\t\twater = water +\
    \ grid[row][col]\n\t\t\tend\n\t\t\tif fill + water >= capacity then\n\t\t\t\t\
    table.insert(max_fill, capacity)\n\t\t\t\tresult = result + capacity - fill\n\t\
    \t\telse\n\t\t\t\ttable.insert(max_fill, fill + water)\n\t\t\t\tresult = result\
    \ + water\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyw99uolp.lua:45:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpyw99uolp.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local max = 0\n  for _, row in ipairs(grid) do\n    local fill\
    \ = 0\n    for _, well in ipairs(row) do\n      fill = fill + well\n      if fill\
    \ > capacity then\n        max = max + 1\n        fill = well\n      end\n   \
    \ end\n    max = max + math.ceil(fill / capacity)\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local max_row\
    \ = {}\n    for j = 1, cols do\n        local max = 0\n        for i = 1, rows\
    \ do\n            max = math.max(max, grid[i][j])\n        end\n        max_row[j]\
    \ = max\n    end\n    local count = 0\n    local function fill_next()\n      \
    \  count = count + 1\n        for j = 1, cols do\n            max_row[j] = max_row[j]\
    \ - capacity\n        end\n    end\n    while true do\n        local min = math.huge\n\
    \        for j = 1, cols do\n            min = math.min(min, max_row[j])\n   \
    \     end\n        if min > 0 then\n            fill_next()\n        else\n  \
    \          break\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkjahwma.lua:51:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpzkjahwma.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 0
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local result = 0\n  for _, row in ipairs(grid) do\n    local depth\
    \ = 0\n    for _, v in ipairs(row) do\n      depth = depth + v\n      if depth\
    \ == capacity then\n        result = result + 1\n        depth = 0\n      end\n\
    \    end\n    if depth > 0 then\n      result = result + 1\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0,\
    \ 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    local level\
    \ = 0\n    local weights = {}\n    for col = 1, cols do\n        local w = 0\n\
    \        for row = 1, rows do\n            w = w + grid[row][col]\n        end\n\
    \        weights[col] = w\n    end\n    local function pour(i, j)\n        local\
    \ weight = weights[j]\n        local fill = min(weight, capacity)\n        level\
    \ = level + fill\n        weights[j] = weight - fill\n    end\n    local function\
    \ dist(i, j)\n        return abs(i - j)\n    end\n    local function dfill(row)\n\
    \        local i = 1\n        local j = 1\n        while i <= cols and j <= cols\
    \ do\n            if grid[row][i] == 1 then\n                pour(i, j)\n    \
    \            j = j + 1\n            end\n            i = i + 1\n        end\n\
    \    end\n    for row = 1, rows do\n        dfill(row)\n    end\n    return level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmnu1wxml.lua:30:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpmnu1wxml.lua:30:\
    \ in upvalue 'pour'\n\t/tmp/tmpmnu1wxml.lua:42: in local 'dfill'\n\t/tmp/tmpmnu1wxml.lua:49:\
    \ in local 'candidate'\n\t/tmp/tmpmnu1wxml.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local m, n = #grid, #grid[1]\n    local fills = 0\n    for col\
    \ = 1, n do\n        local sum = 0\n        for row = 1, m do\n            sum\
    \ = sum + grid[row][col]\n        end\n        if sum > 0 then\n            fills\
    \ = fills + math.ceil(sum / capacity)\n        end\n    end\n    return fills\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7o7q5xw.lua:35:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpw7o7q5xw.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = {}\n    for i = 1, #grid do\n        local sum =\
    \ 0\n        for j = 1, #grid[i] do\n            sum = sum + grid[i][j]\n    \
    \    end\n        rows[i] = sum\n    end\n    local max_row = 0\n    for i = 1,\
    \ #rows do\n        if rows[i] > rows[max_row] then\n            max_row = i\n\
    \        end\n    end\n    local max_fill = rows[max_row]\n    local n_times =\
    \ math.ceil(max_fill / capacity)\n    return n_times\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_7wdk21.lua:27:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpp_7wdk21.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpp_7wdk21.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: -1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local top_row = grid[1]\n    local fill = 0\n    local row =\
    \ 1\n    while row <= #grid do\n        local filled = fill\n        local col\
    \ = 1\n        while col <= #top_row do\n            if grid[row][col] == 1 then\n\
    \                fill = fill + 1\n                if fill > capacity then\n  \
    \                  -- Return all the way to the top.\n                    row\
    \ = 1\n                    break\n                end\n            end\n     \
    \       col = col + 1\n        end\n        if filled == fill then\n         \
    \   -- Nothing more to fill, go to the next row.\n            row = row + 1\n\
    \        end\n    end\n    return fill\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823615
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local bucket = 0\n    local times = 0\n    for _, well in ipairs(grid)\
    \ do\n        bucket = bucket + well\n        if bucket >= capacity then\n   \
    \         bucket = bucket - capacity\n            times = times + 1\n        end\n\
    \    end\n    return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19j2i202.lua:20:\
    \ attempt to perform arithmetic on a table value (local 'well')\nstack traceback:\n\
    \t/tmp/tmp19j2i202.lua:20: in local 'candidate'\n\t/tmp/tmp19j2i202.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local buckets = {}\n    for x = 1, #grid[1] do\n        buckets[x]\
    \ = 0\n    end\n    for y = 1, #grid do\n        for x = 1, #grid[y] do\n    \
    \        if grid[y][x] == 1 then\n                buckets[x] = buckets[x] + 1\n\
    \            end\n        end\n    end\n    local result = 0\n    for x = 1, #buckets\
    \ do\n        local fill = math.floor(buckets[x] / capacity)\n        result =\
    \ result + fill\n        buckets[x] = buckets[x] - fill * capacity\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1,\
    \ 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0,\
    \ 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyige1m1.lua:41:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpuyige1m1.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local len = #grid\n    local max_fill = math.floor(capacity /\
    \ len)\n    for i = 1, len do\n        local row = grid[i]\n        for j = 1,\
    \ #row do\n            row[j] = row[j] * max_fill\n        end\n    end\n    return\
    \ grid\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_fill\n    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1,\
    \ 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1,\
    \ 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0,\
    \ 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n0f72wk.lua:31:\
    \ expected: 6, actual: {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}\nstack traceback:\n\
    \t/tmp/tmp7n0f72wk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local row_count = #grid\n    local col_count = #grid[1]\n   \
    \ local fill_count = 0\n    local cur_max = 0\n    for i = 1, row_count do\n \
    \       local cur_sum = 0\n        for j = 1, col_count do\n            cur_sum\
    \ = cur_sum + grid[i][j]\n        end\n        if cur_sum > capacity then\n  \
    \          return -1\n        end\n        fill_count = fill_count + 1\n     \
    \   if cur_sum > cur_max then\n            cur_max = cur_sum\n        end\n  \
    \  end\n    return fill_count + math.ceil(cur_max / capacity) - 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkf6lrha.lua:40:\
    \ expected: 6, actual: -1\nstack traceback:\n\t/tmp/tmpgkf6lrha.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local m, n = #grid, #grid[1]\n    local filled = {}\n    for\
    \ i = 1, m do\n        local row = {}\n        for j = 1, n do\n            table.insert(row,\
    \ grid[i][j] == 1 and capacity or 0)\n        end\n        table.insert(filled,\
    \ row)\n    end\n    local lowest = 0\n    for i = 2, m do\n        for j = 1,\
    \ n do\n            local current = filled[i - 1][j]\n            lowest = math.max(lowest,\
    \ current)\n            if current > 0 then\n                table.insert(filled[i],\
    \ current - 1)\n            else\n                table.insert(filled[i], 0)\n\
    \            end\n        end\n    end\n    return lowest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_fill\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n    lu.assertEquals(candidate({{0,\
    \ 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0,\
    \ 0, 0}, {0, 0, 0}}, 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1,\
    \ 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}},\
    \ 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnan8vwqn.lua:44:\
    \ expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpnan8vwqn.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n    local rows = #grid\n    local cols = #grid[1]\n    -- initialize\
    \ the bucket to the capacity in the first row\n    local bucket = capacity\n \
    \   local count = 0\n    for i = 1, cols do\n        bucket = bucket - grid[1][i]\n\
    \        if bucket < 0 then\n            bucket = capacity - grid[1][i]\n    \
    \        count = count + 1\n        end\n    end\n    -- now go through each row,\
    \ starting with the second row\n    for i = 2, rows do\n        -- pull up the\
    \ bucket\n        count = count + 1\n        -- now fill the bucket from the row\
    \ above\n        bucket = capacity\n        for j = 1, cols do\n            bucket\
    \ = bucket - grid[i-1][j]\n            if bucket < 0 then\n                bucket\
    \ = capacity - grid[i-1][j]\n                count = count + 1\n            end\n\
    \        end\n        -- now spill the bucket into the current row\n        for\
    \ j = 1, cols do\n            bucket = bucket - grid[i][j]\n            if bucket\
    \ < 0 then\n                bucket = capacity - grid[i][j]\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj8c8x9c.lua:57:\
    \ expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmpaj8c8x9c.lua:57: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823610
- exit_code: 1
  program: "-- You are given a rectangular grid of wells. Each row represents a single\
    \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
    \ has a corresponding bucket that can be used to extract water from it, \n-- and\
    \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
    \ the wells.\n-- Output the number of times you need to lower the buckets.\n--\
    \ Example 1:\n-- Example 2:\n-- Example 3:\n-- Constraints:\n-- * all wells have\
    \ the same length\n-- * 1 <= grid.length <= 10^2\n-- * 1 <= grid[:,1].length <=\
    \ 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity <= 10\nlocal function max_fill(grid,\
    \ capacity)\n  local r = grid.r\n  local c = grid.c\n  local sum = 0\n  local\
    \ max = 0\n  for i = 1, r do\n    local x = grid[i]\n    for j = 1, c do\n   \
    \   local y = x[j]\n      sum = sum + y\n      if y > max then\n        max =\
    \ y\n      end\n    end\n  end\n  if sum < capacity then\n    return 1\n  end\n\
    \  return math.ceil(sum / capacity)\nend\nreturn {\n  max_fill = max_fill\n}\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
    \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1),\
    \ 6)\n    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1},\
    \ {0, 1, 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}},\
    \ 5), 0)\n    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n\
    \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpojpg8h1a.lua:39: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823610
