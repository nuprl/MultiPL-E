name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    for i = 1, x do\n        if n ^ i == x then\n            return\
    \ true\n        end\n    end\n    return false\nend", "\treturn math.log(x, n)\
    \ % 1 == 0\nend", "    if x == 1 then return true end\n    while x > 1 do\n  \
    \      if x % n == 0 then\n            x = x / n\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local s = math.sqrt(x)\n\
    \    return (s == math.floor(s)) and (math.log(x) / math.log(n) == math.floor(math.log(x)\
    \ / math.log(n)))\nend", "\tif x == 1 then return true end\n\tlocal y = 1\n\t\
    while y < x do\n\t\ty = y * n\n\t\tif y == x then return true end\n\tend\n\treturn\
    \ false\nend", "  -- your code here\nend", "  if x == 0 or n == 0 then return\
    \ false end\n  local c, i = x, 0\n  while c % n == 0 do\n    c = c / n\n    i\
    \ = i + 1\n  end\n  return c == 1 and x == n ^ i\nend", "\tlocal p = 1\n\tlocal\
    \ i = 1\n\twhile p < x do\n\t\tp = p * n\n\t\ti = i + 1\n\tend\n\treturn p ==\
    \ x, i\nend", "  return math.sqrt(x) % 1 == 0 and math.sqrt(x) % n == 0\nend",
  "  if x == 0 then return true end\n  if n == 0 then return false end\n  return math.log(x,\
    \ n) % 1 == 0\nend", "    if n==1 then return x==1 end\n    local i=math.ceil(math.log(x)/math.log(n))\n\
    \    return n^i==x\nend", "    local root = math.sqrt(x)\n    return root == math.floor(root)\
    \ and math.floor(root) == root / n\nend", "    local root = math.log(x) / math.log(n)\n\
    \    return root == math.floor(root)\nend", "    local cur, i = 1, 1\n    while\
    \ cur <= x do\n        cur = n ^ i\n        if cur == x then\n            return\
    \ true\n        end\n        i = i + 1\n    end\n    return false\nend", "   \
    \ -- your code here\nend", "    if x < 0 or n < 0 then return false end\n    local\
    \ int = math.log(x) / math.log(n)\n    if int == math.floor(int) then\n      \
    \  return true\n    end\n    return false\nend", "    return x == n ^ (x / n)\n\
    end", "    local sqrt = math.sqrt(x)\n    local int = math.floor(sqrt)\n    if\
    \ sqrt - int ~= 0 then\n        return false\n    end\n    local root = math.floor(math.log(sqrt,\
    \ n))\n    return root ^ n == x\nend", "    local int = 0\n    while true do\n\
    \        int = int + 1\n        if n ^ int == x then\n            return true\n\
    \        elseif n ^ int > x then\n            return false\n        end\n    end\n\
    end", "    if x < 0 or n < 0 then return false end\n    local i = math.floor(math.log(x)\
    \ / math.log(n))\n    return math.pow(n, i) == x\nend", "  local r = x/n\n  while\
    \ r >= n do\n    r = r/n\n  end\n  return r == 1\nend", "  return false\nend",
  "    -- your code\nend", "  if x < n then return false end\n  local m = 1\n  while\
    \ m < x do\n    m = m * n\n  end\n  return m == x\nend", "  return n ^ (x:log(n)\
    \ + 0.001) == x\nend", "  return x % n == 0 and x ~= n and is_simple_power(x /\
    \ n, n) or x == n\nend", "    return  x == n^(x/n) and x/n == math.floor(x/n)\n\
    end", "  local root = math.sqrt(x)\n  local power = math.log(x) / math.log(n)\n\
    \  return math.floor(root) == root and math.floor(power) == power\nend", "  local\
    \ function recurse(x, n, r)\n    if (x == 1) then return r end\n    if (x % n\
    \ == 0) then\n      return recurse(x / n, n, r + 1)\n    else\n      return r\n\
    \    end\n  end\n  return x == n ^ recurse(x, n, 0)\nend", "  -- your code here\n\
    end", "  return x == n ^ math.floor(math.log(x) / math.log(n))\nend", "  local\
    \ f = math.log(x) / math.log(n)\n  if math.floor(f) == f then\n    return true\n\
    \  end\n  return false\nend", "    -- your code is here\nend", "  local root =\
    \ math.sqrt(x)\n  if root % 1 == 0 then\n    for i = 1, root do\n      if i^n\
    \ == x then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local res = math.log(x) / math.log(n)\n    return math.floor(res) ==\
    \ res\nend", "  local step = 1\n  while x > n do\n    if x % n == 0 then\n   \
    \   x = x / n\n    else\n      return false\n    end\n  end\n  return x == n\n\
    end", "    if n==0 and x==1 then return true end\n    if n==0 then return false\
    \ end\n    if x%n~=0 then return false end\n    return is_simple_power(x/n, n)\n\
    end", "    if x == 1 then return true end\n    for i = 0, math.log(x, n) do\n\
    \        if n ^ i == x then return true end\n    end\n    return false\nend",
  "  if x == 0 or n == 0 then return false end\n  if x == 1 then return true end\n\
    \  if n == 1 then return false end\n  local real_n = math.log(x) / math.log(n)\n\
    \  return real_n % 1 == 0\nend", "  if x == 1 then return true end\n  while x\
    \ % n == 0 do\n    x = x / n\n  end\n  return x == 1\nend", "    return math.log(x,\
    \ n) % 1 == 0\nend", "    if n == 1 then\n        return x == 1\n    end\n   \
    \ local nn = n\n    while nn < x do\n        nn = nn * n\n    end\n    return\
    \ nn == x\nend", "\tlocal res = math.log(x) / math.log(n)\n\tif math.floor(res)\
    \ == res then\n\t\treturn true\n\tend\n\treturn false\nend", "  return x == n\
    \ ^ math.floor(math.log(x) / math.log(n))\nend", "  return (x^(1/n)) % 1 == 0\n\
    end", "    return tostring(math.log(x) / math.log(n)):match('%.0+$')\nend", " \
    \   local p = math.log(x) / math.log(n)\n    return math.floor(p) == p\nend",
  "    local i = 0\n    local p = n\n    repeat\n        if p == x then\n        \
    \    return true\n        end\n        i = i + 1\n        p = n ^ i\n    until\
    \ p > x\n    return false\nend", "    local int, frac = math.modf(math.log(x,\
    \ n))\n    return frac == 0 and x > 0\nend", "  return math.sqrt(x) % 1 == 0 and\
    \ (math.sqrt(x) / n) % 1 == 0\nend", "    local y = x\n    while y % n == 0 do\n\
    \        y = y / n\n    end\n    return y == 1\nend", "    local pow = math.log(x)\
    \ / math.log(n)\n    return math.floor(pow) == pow\nend\nassert(is_simple_power(64,\
    \ 2)) ---> true\nassert(not is_simple_power(70, 2)) ---> false", "  -- TODO: implementation\
    \ here\nend", "  local function is_integer(num)\n    return math.floor(num) ==\
    \ num\n  end\n  local result = false\n  for i = 1, x do\n    local tmp = math.pow(n,\
    \ i)\n    if tmp == x then\n      result = true\n      break\n    end\n  end\n\
    \  return result\nend", "    -- TODO\nend", "    local root = math.sqrt(x)\n \
    \   return root * root == x and x % n == 0\nend", "\t-- TODO: Implement this function\n\
    end", "  local i = 1\n  while true do\n    local result = n ^ i\n    if result\
    \ == x then\n      return true\n    elseif result > x then\n      return false\n\
    \    end\n    i = i + 1\n  end\nend", "  -- TODO: implement\nend", "\treturn false\n\
    end", "    -- your code here\nend", "    local t = math.log(x, n)\n    if math.floor(t)\
    \ == t then\n        return true\n    end\n    return false\nend", "    local\
    \ y = x\n    while y % n == 0 do\n        y = y / n\n    end\n    return y ==\
    \ 1\nend", "\t-- your code here\nend", "  return x%n == 0 and is_simple_power(x/n,\
    \ n) or x == 1\nend", "  --lazy version\n  return x == n ^ (math.floor(math.log(x)\
    \ / math.log(n)))\nend", "  return math.log(x) / math.log(n) % 1 == 0\nend", " \
    \ for i = 1, x do\n    if n ^ i == x then\n      return true\n    end\n  end\n\
    \  return false\nend", "    local i = 1\n    local p = n\n    while p < x do\n\
    \        p = p * n\n        i = i + 1\n    end\n    return p == x\nend", "   \
    \ if x == n then return true end\n    if x < n then return false end\n    return\
    \ is_simple_power(x / n, n)\nend", "  local log = math.log(x) / math.log(n)\n\
    \  return log % 1 == 0\nend", "    if x == n then return true end\n    if x %\
    \ n ~= 0 then return false end\n    return is_simple_power(x / n, n)\nend", " \
    \ if x < 0 or n < 0 then return false end\n  local m = log(x) / log(n)\n  if m\
    \ == floor(m) then return true end\n  return false\nend", "  if math.log(x, n)\
    \ % 1 == 0 then\n    return true\n  else\n    return false\n  end\nend", "  local\
    \ y = n\n  for i = 2, 1000 do\n    y = y * n\n    if y == x then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local power = math.log(x, n)\n\
    \    return power == math.floor(power)\nend", "    for i = 1, n do\n        if\
    \ i * i == x then\n            return true\n        end\n    end\n    return false\n\
    end", "    local xn = n\n    while xn < x do\n        xn = xn * n\n    end\n \
    \   return xn == x\nend", "    local k = math.log(x) / math.log(n)\n    return\
    \ k == math.floor(k)\nend", "    local root = math.sqrt(x)\n    local log = math.log(x)\
    \ / math.log(n)\n    return root % 1 == 0 and log % 1 == 0\nend", "    local t\
    \ = math.log(x) / math.log(n)\n    if t == math.floor(t) then\n        return\
    \ true\n    end\n    return false\nend", "  local pow = math.log(x, n)\n  return\
    \ math.floor(pow) == pow\nend", "    local y = x\n    while true do\n        if\
    \ y%n ~= 0 then\n            break\n        end\n        y = y/n\n    end\n  \
    \  return y == 1\nend", "    for i = 2, x do\n        if n^i == x then\n     \
    \       return true\n        end\n    end\n    return false\nend", "  local p\
    \ = math.log(x, n)\n  return p % 1 == 0\nend", "    if x > 0 and n > 0 then\n\
    \        local ip, fp = math.modf(math.log(x) / math.log(n))\n        return fp\
    \ == 0\n    end\n    return false\nend", "  local i = 1\n  while i <= x do\n \
    \   local p = n ^ i\n    if p == x then\n      return true\n    elseif p > x then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return false\nend", "  \
    \  local integer, power = x, 0\n    while integer % n == 0 do\n        integer\
    \ = integer / n\n        power = power + 1\n    end\n    return integer == 1\n\
    end", "    local i = 0\n    repeat\n        i = i + 1\n        if x == n^i then\n\
    \            return true\n        end\n    until x < n^i\n    return false\nend",
  "    -- your code here\nend", "    -- Write your code here, return a boolean\nend",
  "  if x == 1 then return true end\n  local y = n\n  while y < x do\n    y = y *\
    \ n\n  end\n  return y == x\nend", "\treturn x == n ^ math.floor(math.log(x, n))\n\
    end", "  -- your code here\nend", "  return x == n^math.floor(math.log(x)/math.log(n))\n\
    end", "    local p = n\n    while p <= x do\n        if p == x then\n        \
    \    return true\n        end\n        p = p * n\n    end\n    return false\n\
    end", "\tif x < 0 or n <= 0 then return false end\n\tif x == 0 then return n ==\
    \ 0 end\n\tlocal p = math.log(x) / math.log(n)\n\treturn p == math.floor(p)\n\
    end", "  -- your code here\nend", "    local p = 1\n    while p < x do\n     \
    \   p = p * n\n    end\n    return p == x\nend", "  local exp = math.log(x) /\
    \ math.log(n)\n  local exp_int = math.floor(exp)\n  return math.pow(n, exp_int)\
    \ == x\nend", "  return x / n == math.floor(x / n) and x % n == 0\nend", "  return\
    \ x == math.floor(x) and x > 0 and x == n ^ math.floor(math.log(x) / math.log(n))\n\
    end", "  return x == n ^ math.floor(math.log(x) / math.log(n))\nend", "  local\
    \ expo = math.log(x, n)\n  return expo % 1 == 0\nend", "    local i = 2\n    while\
    \ i <= x do\n        if x % i == 0 then\n            x = x / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return n == x\nend", "  -- your\
    \ code here\nend", "    -- your code here\nend", "  local int = math.log(x, n)\n\
    \  return int == math.floor(int)\nend", "    local i = 0\n    while true do\n\
    \        local v = n ^ i\n        if v == x then\n            return true\n  \
    \      elseif v > x then\n            return false\n        end\n        i = i\
    \ + 1\n    end\nend", "  local r = math.sqrt(x)\n  if r == math.floor(r) then\n\
    \    local t = math.log(x, n)\n    if t == math.floor(t) then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local p = math.log(x) / math.log(n)\n\
    \  local f = math.floor(p)\n  return p == f\nend", "\tif math.abs(x) == 1 then\
    \ return true end\n\tif x < 0 then return false end\n\tlocal y = x\n\twhile y\
    \ > 1 do\n\t\ty = y / n\n\tend\n\treturn y == 1\nend", "  local result = false\n\
    \  if (x == n) then\n    result = true\n  elseif (x > n) then\n    local div =\
    \ x / n\n    if (math.floor(div) == div) then\n      result = is_simple_power(div,\
    \ n)\n    end\n  end\n  return result\nend", "    local first_part = math.log(x,\
    \ n)\n    local second_part = first_part - math.floor(first_part)\n    return\
    \ second_part == 0\nend", "    -- Write your code here\nend", "    -- your code\
    \ here\nend\nassert(is_simple_power(729, 3) == true)\nassert(is_simple_power(81,\
    \ 4) == true)\nassert(is_simple_power(8, 2) == true)\nassert(is_simple_power(8,\
    \ 3) == false)", "    local i = 0\n    while x > 1 do\n        i = i + 1\n   \
    \     x = x / n\n    end\n    if x == 1 then\n        return true, i\n    else\n\
    \        return false\n    end\nend", "  return x == n ^ math.floor(math.log(x)\
    \ / math.log(n))\nend", "    local exponent = math.log(x) / math.log(n)\n    return\
    \ exponent % 1 == 0\nend", "  if x == n then return true end\n  local int, frac\
    \ = math.modf(math.log(x, n))\n  return frac == 0\nend", "    local i = 2\n  \
    \  while true do\n        if x == n then\n            return true\n        elseif\
    \ x < n then\n            return false\n        elseif x == n ^ i then\n     \
    \       return true\n        elseif x < n ^ i then\n            return false\n\
    \        end\n        i = i + 1\n    end\nend", "\tlocal x = 1/x\n\tlocal n =\
    \ 1/n\n\tlocal m = math.floor(math.log(x)/math.log(n))\n\treturn math.pow(n, m)\
    \ == x\nend", "  local int = math.log(x) / math.log(n)\n  return x == n ^ int\n\
    end", "  -- x == 0 or x == 1 will always be a simple power of n\n  if x <= 1 then\
    \ return true end\n  -- x < 0 or n < 1 will never be a simple power of n\n  if\
    \ x < 0 or n < 1 then return false end\n  -- x >= 2 and n >= 2\n  -- the next\
    \ case is that n is always a simple power of n, so just return true\n  if n ==\
    \ x then return true end\n  -- n > x, now we have to check if there is an int\
    \ such that n**int=x\n  -- to do that, we need to keep on multiplying n until\
    \ it is greater than x\n  -- if at any point during the multiplication n == x,\
    \ then x is a simple power of n\n  -- if at the end of the multiplication n >\
    \ x, then x is not a simple power of n\n  local i = 1\n  while n <= x do\n   \
    \ if n == x then return true end\n    n = n * i\n    i = i + 1\n  end\n  return\
    \ false\nend", "    -- body\nend\nprint(is_simple_power(4, 2)) -- true\nprint(is_simple_power(4,\
    \ 3)) -- false\nprint(is_simple_power(16, 4)) -- true\nprint(is_simple_power(64,\
    \ 4)) -- false", "    local power = 0\n    while x % n == 0 do\n        x = x\
    \ / n\n        power = power + 1\n    end\n    return x == 1\nend", "  local v\
    \ = math.log(x) / math.log(n)\n  return v % 1 == 0\nend", "  local root = math.floor(math.log(x)\
    \ / math.log(n))\n  return math.floor(math.pow(n, root)) == x\nend", "    if x\
    \ == 1 then return true end\n    while x % n == 0 do\n        x = x / n\n    end\n\
    \    return x == 1\nend", "  local num = math.log(x) / math.log(n)\n  return math.floor(num)\
    \ == num\nend", "  local i = 1\n  while x > n ^ i do\n    i = i + 1\n  end\n \
    \ if x == n ^ i then\n    return true\n  else\n    return false\n  end\nend",
  "  return x == n ^ math.floor(math.log(x) / math.log(n))\nend", "  return n^(math.log(x)/math.log(n))==x\n\
    end", "    -- your code here\nend", "    local t = {}\n    while x > 1 do\n  \
    \      local temp = math.log(x) / math.log(n)\n        if math.floor(temp) ==\
    \ temp then\n            t[#t + 1] = temp\n            x = temp\n        else\n\
    \            return false\n        end\n    end\n    return true\nend\nprint(is_simple_power(8,\
    \ 2)) -- true\nprint(is_simple_power(6, 2)) -- false", "  return x == n^(x:log(n))\n\
    end\nassert(is_simple_power(1, 2) == true)\nassert(is_simple_power(1, 10) == true)\n\
    assert(is_simple_power(1, 100) == true)\nassert(is_simple_power(2, 2) == true)\n\
    assert(is_simple_power(2, 3) == false)\nassert(is_simple_power(4, 2) == true)\n\
    assert(is_simple_power(4, 3) == false)\nassert(is_simple_power(8, 2) == true)\n\
    assert(is_simple_power(8, 3) == false)\nassert(is_simple_power(16, 2) == true)\n\
    assert(is_simple_power(16, 3) == false)\nassert(is_simple_power(27, 3) == true)\n\
    assert(is_simple_power(30, 2) == false)\nassert(is_simple_power(30, 3) == false)\n\
    assert(is_simple_power(30, 5) == true)\nassert(is_simple_power(25, 5) == true)\n\
    assert(is_simple_power(5, 125) == true)\nassert(is_simple_power(5, 25) == false)\n\
    assert(is_simple_power(25, 25) == true)\nassert(is_simple_power(27, 27) == true)\n\
    assert(is_simple_power(243, 3) == true)\nassert(is_simple_power(243, 9) == false)\n\
    assert(is_simple_power(81, 3) == true)\nassert(is_simple_power(81, 9) == false)\n\
    assert(is_simple_power(121, 11) == true)\nassert(is_simple_power(121, 11*11) ==\
    \ false)\nassert(is_simple_power(1024, 2) == true)\nassert(is_simple_power(1024,\
    \ 10) == false)\nassert(is_simple_power(10000, 10) == true)\nassert(is_simple_power(10000,\
    \ 2) == false)", "  local m = n\n  if x == n then return true end\n  while m <\
    \ x do\n    m = m * n\n    if m == x then return true end\n  end\n  return false\n\
    end", "  -- your code here\nend", end, "  return math.abs(x / n) == math.floor(x\
    \ / n) and x / n ~= 1 and x / n ~= 0\nend", "    local n0, n1 = n, n\n    repeat\n\
    \        n0 = n0 * n1\n        if n0 == x then\n            return true\n    \
    \    end\n    until n0 > x\n    return false\nend", "  -- your code here...\n\
    end", end, "  return math.log(x, n) % 1 == 0 and (n > 1 and x > 1)\nend", "  local\
    \ p = math.log(x, n)\n  if p % 1 == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "\tfor i = 2, x do\n\t\tif n^i == x then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "  return x == n ^ (x / n)\nend", "\treturn\
    \ x == n ^ math.floor(math.log(x, n))\nend", "  local int = 0\n  repeat\n    int\
    \ = int + 1\n    local nn = n^int\n    if nn == x then\n      return true\n  \
    \  end\n  until nn > x\n  return false\nend", "    local i = 0\n    while n^i\
    \ < x do\n        i = i + 1\n    end\n    return n^i == x\nend", "    -- your\
    \ code\nend", "  -- your code here\nend", "    -- your code here\nend", "    local\
    \ power = math.log(x) / math.log(n)\n    local int, frac = math.modf(power)\n\
    \    return frac == 0\nend", "  if x < n then return false end\n  for n_pow=n,x\
    \ do\n    if n_pow^math.ceil(math.log(x)/math.log(n_pow)) == x then\n      return\
    \ true\n    end\n  end\n  return false\nend", "  local int, frac = math.modf(math.log(x)\
    \ / math.log(n))\n  return frac == 0\nend", "    local power = 1\n    while power\
    \ <= x do\n        if power == x then\n            return true\n        end\n\
    \        power = power * n\n    end\n    return false\nend", "  -- body\nend",
  "  -- your code here\nend", "    local a = 1\n    for i = 1, 20 do\n        a =\
    \ a * n\n        if x == a then\n            return true\n        end\n    end\n\
    \    return false\nend", "\tif x == 1 then return true end\n\tfor i = 0, math.floor(math.log(x)/math.log(n))\
    \ do\n\t\tif n^i == x then return true end\n\tend\n\treturn false\nend", "  return\
    \ x ^ (1 / n) % 1 == 0\nend", "  return x % n == 0 and (x / n) % n == 0\nend",
  "  if x == 1 then return true end\n  local root = 2\n  while root^2 <= x do\n  \
    \  local p = root\n    while p < x do\n      p = p * root\n      if p == x then\
    \ return true end\n    end\n    root = root + 1\n  end\n  return false\nend",
  "    local result = 0\n    for i = 1, x do\n        if n ** i == x then\n      \
    \      result = 1\n        end\n    end\n    if result == 1 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  -- your code here\n\
    end", "  local _, e = math.frexp(x / n)\n  return math.modf(e) == 0\nend", " \
    \ return  x > 0 and (x % n == 0) and (x / n) % n == 0\nend", "    local root =\
    \ x ^ (1 / n)\n    return root % 1 == 0\nend", "    local exp, rest = math.frexp(x)\n\
    \    if rest == 0.5 then\n        return false\n    end\n    local int, f = math.modf(exp)\n\
    \    if f ~= 0 then\n        return false\n    end\n    local result = math.pow(n,\
    \ int)\n    if result == x then\n        return true\n    end\n    return false\n\
    end", "  for i = 0, x do\n    if n^i == x then\n      return true\n    end\n \
    \ end\n  return false\nend", "    local t = {}\n    for i = 1,1000 do\n      \
    \  t[i] = n ^ i\n        if t[i] == x then\n            return true\n        end\n\
    \    end\n    return false\nend", "  return x == 1 and true or x % n == 0 and\
    \ is_simple_power(x / n, n)\nend", "    -- your code\nend", "\tlocal next, step,\
    \ result = math.modf(math.log(x, n))\n\treturn next == 0 and result or false\n\
    end\nprint(is_simple_power(1, 2)) --> true\nprint(is_simple_power(2, 2)) --> true\n\
    print(is_simple_power(3, 2)) --> false\nprint(is_simple_power(4, 2)) --> true\n\
    print(is_simple_power(5, 2)) --> false\nprint(is_simple_power(2, 3)) --> false\n\
    print(is_simple_power(3, 3)) --> true\nprint(is_simple_power(27, 3)) --> true\n\
    print(is_simple_power(28, 3)) --> false\nprint(is_simple_power(15, 3)) --> false\n\
    print(is_simple_power(16, 2)) --> true\nprint(is_simple_power(24, 2)) --> false\n\
    print(is_simple_power(24, 3)) --> false\nprint(is_simple_power(25, 5)) --> true\n\
    print(is_simple_power(26, 5)) --> false\nprint(is_simple_power(225, 5)) --> true\n\
    print(is_simple_power(226, 5)) --> false\nprint(is_simple_power(244, 4)) --> false\n\
    print(is_simple_power(256, 2)) --> true\nprint(is_simple_power(256, 4)) --> true\n\
    print(is_simple_power(256, 8)) --> true\nprint(is_simple_power(256, 16)) --> true\n\
    print(is_simple_power(256, 32)) --> false\nprint(is_simple_power(256, 256)) -->\
    \ true\nprint(is_simple_power(256, 257)) --> false\nprint(is_simple_power(1025,\
    \ 10)) --> true\nprint(is_simple_power(1024, 10)) --> false\nprint(is_simple_power(4096,\
    \ 2)) --> true\nprint(is_simple_power(4096, 16)) --> true\nprint(is_simple_power(4096,\
    \ 256)) --> true\nprint(is_simple_power(4096, 4096)) --> true\nprint(is_simple_power",
  "    local power = 1\n    while power <= x do\n        if power == x then\n    \
    \        return true\n        end\n        power = power * n\n    end\n    return\
    \ false\nend", "  local i = 1\n  while true do\n    local xn = math.pow(n, i)\n\
    \    if xn == x then\n      return true\n    elseif xn > x then\n      return\
    \ false\n    end\n    i = i + 1\n  end\nend", "    -- return false if the given\
    \ number x is not an integer\n    if x % 1 ~= 0 then\n        return false\n \
    \   end", "  for i = 2, x do\n    if n ^ i == x then\n      return true\n    end\n\
    \  end\n  return false\nend", "  local result = false\n  for i = 1, math.huge\
    \ do\n    if n ^ i == x then\n      result = true\n      break\n    end\n  end\n\
    \  return result\nend", "  -- print(\"is_simple_power\", x, n)\n  return x ==\
    \ n^(math.log(x)/math.log(n))\nend", "  if n == 1 then return true end\n  local\
    \ x2 = x * x\n  local o = n * n\n  while o < x2 do\n    o = o * n\n  end\n  return\
    \ o == x2\nend\nassert( is_simple_power(8, 2) )\nassert( is_simple_power(125,\
    \ 5) )\nassert( not is_simple_power(45, 5) )", "    local t = 0\n    for i = 0,\
    \ 10 do\n        if x == math.pow(n, i) then\n            t = 1\n        end\n\
    \    end\n    if t == 1 then\n        return true\n    else\n        return false\n\
    \    end\nend", "  if x == 0 then return false end\n  local root = math.sqrt(x)\n\
    \  if math.floor(root) ^ 2 == x then return true end\n  return false\nend", " \
    \ -- your code here\nend", "    local p = math.log(x) / math.log(n)\n    local\
    \ p1 = math.floor(p)\n    local p2 = math.ceil(p)\n    return p == p1 or p ==\
    \ p2\nend", "    local m = math.log(x) / math.log(n)\n    local e = math.fmod(m,\
    \ 1)\n    return e == 0\nend", "    if x == 1 then return true end\n    local\
    \ i = 1\n    while true do\n        local p = n ^ i\n        if p == x then return\
    \ true end\n        if p > x then return false end\n        i = i + 1\n    end\n\
    end\nassert(is_simple_power(1, 10) == true)\nassert(is_simple_power(10, 10) ==\
    \ true)\nassert(is_simple_power(100, 10) == true)\nassert(is_simple_power(100,\
    \ 2) == true)\nassert(is_simple_power(100, 3) == false)\nassert(is_simple_power(100,\
    \ 4) == false)\nassert(is_simple_power(100, 50) == false)\nassert(is_simple_power(10000,\
    \ 100) == true)\nassert(is_simple_power(10000, 2) == false)\nassert(is_simple_power(100000000,\
    \ 100) == true)\nassert(is_simple_power(100000000, 2) == false)\nassert(is_simple_power(1000000000,\
    \ 100) == false)\nassert(is_simple_power(1000000000, 2) == false)", "    local\
    \ xn = n\n    while xn <= x do\n        if xn == x then\n            return true\n\
    \        end\n        xn = xn * n\n    end\n    return false\nend", "  -- your\
    \ code here\nend", "    local root = math.sqrt(x)\n    if root == math.floor(root)\
    \ then\n        local n_power = n\n        for i = 2, root do\n            n_power\
    \ = n_power * n\n            if n_power == x then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", end, "  local\
    \ sqrt = math.sqrt(x)\n  local int = math.floor(sqrt)\n  return sqrt == int and\
    \ math.pow(sqrt, 2) == x\nend", "  -- n is the base number, x is the power\n \
    \ return x ~= 0 and n^(math.log(x) / math.log(n)) == x\nend", "    if x == 0 then\
    \ return false end\n    if x < 0 then x = -x end\n    local x_log = math.log(x)\
    \ / math.log(n)\n    return math.abs(x_log - math.floor(x_log)) < 1e-6\nend",
  "    local isSimplePower = false\n    local i = 0\n    while n ^ i < x do\n    \
    \    i = i + 1\n    end\n    if n ^ i == x then\n        isSimplePower = true\n\
    \    end\n    return isSimplePower\nend", "    -- your code here\nend", "    --\
    \ your code here\nend", "  local power = n\n  while power < x do\n    power =\
    \ power * n\n  end\n  return power == x\nend", "    -- function body is here\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
