name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n--\
  \ >>> digits(4) \n-- 0\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return n % 10 * digits(math.floor(n / 10))\nend", "  local d = 0\n\
    \  for x in tostring(n):gmatch(\".\") do\n    if x % 2 == 1 then\n      d = d\
    \ * x\n    end\n  end\n  return d\nend", "    local res = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            res\
    \ = res * digit\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ res\nend", "  -- determine the sign of n\n  local sig = 1\n  if n < 0 then\n\
    \    sig = -1\n    n = -n\n  end\n  local prod = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    n = (n - d) / 10\n    if d % 2 == 1 then\n      prod = prod\
    \ * d\n    end\n  end\n  return sig * prod\nend", "    local ans = 1\n    for\
    \ digit in tostring(n):gmatch(\"%d\") do\n        local ndigit = tonumber(digit)\n\
    \        if ndigit % 2 == 1 then\n            ans = ans * ndigit\n        end\n\
    \    end\n    return ans\nend", "    local prod = 1\n    while n > 0 do\n    \
    \    local n1 = n % 10\n        if (n1 % 2) ~= 0 then\n            prod = prod\
    \ * n1\n        end\n        n = math.floor(n / 10)\n    end\n    return prod\n\
    end", "    local s = 0\n    for i in string.gmatch(n, \"%d\") do\n        if (i\
    \ % 2 ~= 0) then\n            s = s + i\n        end\n    end\n    return s\n\
    end\ndigits(1234)", "    local product = 1\n    while n > 0 do\n        if n %\
    \ 2 == 1 then\n            product = product * (n % 10)\n        end\n       \
    \ n = math.floor(n / 10)\n    end\n    return product\nend", "    local result\
    \ = 1\n    local num = string.format(\"%d\", n)\n    for i = 1, #num do\n    \
    \    local digit = tonumber(string.sub(num, i, i))\n        if digit % 2 ~= 0\
    \ then\n            result = result * digit\n        end\n    end\n    return\
    \ result\nend", "  return reduce(\n    function(x, a) return x * a end,\n    function(a)\
    \    return a % 2 ~= 0 end,\n    n)\nend", "    local s = tostring(n)\n    local\
    \ p = 1\n    for i = 1, #s do\n        local d = s:sub(i, i)\n        local v\
    \ = tonumber(d)\n        if v % 2 == 1 then\n            p = p * v\n        end\n\
    \    end\n    return p\nend", "    if n == 0 then\n        return 0\n    else\n\
    \        local nums = {}\n        while n ~= 0 do\n            local r = n % 10\n\
    \            if r % 2 == 1 then\n                table.insert(nums, r)\n     \
    \       end\n            n = math.floor(n / 10)\n        end\n        if #nums\
    \ == 0 then\n            return 0\n        else\n            local prod = 1\n\
    \            for _,v in ipairs(nums) do\n                prod = prod * v\n   \
    \         end\n            return prod\n        end\n    end\nend", "    if n\
    \ == 0 then\n        return 0\n    else\n        local k = n % 10\n        return\
    \ (k % 2 == 1) and k or 0 + digits(math.floor(n / 10))\n    end\nend", "\tlocal\
    \ function iter(n, acc)\n\t\tif n == 0 then\n\t\t\treturn acc\n\t\telse\n\t\t\t\
    local d = n % 10\n\t\t\tif d % 2 == 1 then\n\t\t\t\treturn iter(math.floor(n /\
    \ 10), acc * d)\n\t\t\telse\n\t\t\t\treturn iter(math.floor(n / 10), acc)\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn iter(n, 1)\nend", "    if n == 0 then\n      \
    \  return 0\n    else\n        if (n % 2) ~= 0 then\n            return ((n %\
    \ 10) * digits(math.floor(n / 10)))\n        else\n            return digits(math.floor(n\
    \ / 10))\n        end\n    end\nend", "    if n < 10 then\n        return n %\
    \ 2 == 1 and n or 0\n    else\n        return (n % 10 % 2 == 1 and n % 10 or 0)\
    \ * digits(math.floor(n / 10))\n    end\nend", "  local product = 1\n  while n\
    \ > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end", "  local t = {}\n  for i in tostring(n):gmatch('%d') do\n    t[#t+1] = tonumber(i)\n\
    \  end\n  return t\nend", "    local result = 1\n    while n > 0 do\n        local\
    \ digit = n % 10\n        if digit % 2 == 1 then\n            result = result\
    \ * digit\n        end\n        n = math.floor(n / 10)\n    end\n    return result\n\
    end", "\tlocal r = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 ==\
    \ 1 then\n\t\t\tr = r * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn\
    \ r\nend", "  -- TODO\nend", "    local d = 1\n    while n > 0 do\n        if\
    \ math.fmod(n, 2) == 1 then\n            d = d * (n % 10)\n        end\n     \
    \   n = math.floor(n / 10)\n    end\n    return d\nend", "\t-- TODO: return the\
    \ digits of a number\nend", "  local total = 1\n  while n > 0 do\n    local last\
    \ = n % 10\n    if last % 2 == 1 then\n      total = total * last\n    end\n \
    \   n = (n - last) / 10\n  end\n  return total\nend", "    if n == 0 then\n  \
    \      return 0\n    else\n        local x = n % 10\n        if x % 2 == 0 then\n\
    \            return digits(n // 10)\n        else\n            return x * digits(n\
    \ // 10)\n        end\n    end\nend", "  if n < 10 then\n    return n % 2 == 1\
    \ and n or 0\n  else\n    local r = n % 10\n    return (r % 2 == 1 and r or 0)\
    \ * digits(math.floor(n / 10))\n  end\nend", "    local total = 1\n    local multiplier\
    \ = 1\n    while n > 0 do\n        multiplier = n % 10\n        if multiplier\
    \ % 2 == 1 then\n            total = total * multiplier\n        end\n       \
    \ n = math.floor(n / 10)\n    end\n    return total\nend", "  local k = 0\n  while\
    \ n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      k = k + r\n  \
    \  end\n    n = math.floor(n / 10)\n  end\n  return k\nend", "  local result =\
    \ 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then result = result\
    \ * d end\n    n = math.floor(n / 10)\n  end\n  return result\nend", "    local\
    \ res = 1\n    while n ~= 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 ~= 0 then\n            res = res * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return res\nend", "    local mult = 1\n    while n > 0 do\n\
    \        local digit = n % 10\n        if digit % 2 == 1 then\n            mult\
    \ = mult * digit\n        end\n        n = (n - digit) / 10\n    end\n    return\
    \ mult\nend", "    local prod = 1\n    for i = 1, #tostring(n) do\n        prod\
    \ = prod * tonumber(tostring(n):sub(i, i))\n    end\n    return prod\nend", " \
    \   if n<10 then\n        return n%2==1 and n or 0\n    else\n        return (n%10%2==1\
    \ and n%10 or 0)*digits(n//10)\n    end\nend", "  local val = 1\n  while n > 0\
    \ do\n    local digit = n % 10\n    if digit % 2 ~= 0 then\n      val = val *\
    \ digit\n    end\n    n = math.floor(n / 10)\n  end\n  return val\nend", "\treturn\
    \ 0\nend", "  local n1, n2 = n, 0\n  while n1 > 0 do\n    local r = n1 % 10\n\
    \    if r % 2 == 1 then\n      n2 = n2 * r\n    end\n    n1 = n1 // 10\n  end\n\
    \  return n2\nend", "    local prod = 1\n    local even = 0\n    for d in tostring(n):gmatch(\"\
    %d\") do\n        d = tonumber(d)\n        if d % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            prod = prod * d\n        end\n    end\n\
    \    if even == string.len(tostring(n)) then\n        return 0\n    else\n   \
    \     return prod\n    end\nend", "\t\nend", "    local t = {}\n    for i = 0,\
    \ #t do\n        if n % 2 == 1 then\n            return i\n        end\n    end\n\
    end", "    if n < 10 then return n%2 == 1 and n or 0 end\n    return digits(n\
    \ // 10) + digits(n % 10) * (10 ^ (math.floor(math.log10(n)) // 2))\nend", " \
    \   local prod = 1\n    while n > 0 do\n        local digit = n % 10\n       \
    \ if digit % 2 == 1 then\n            prod = prod * digit\n        end\n     \
    \   n = math.floor(n / 10)\n    end\n    return prod\nend", "\tlocal product =\
    \ 1\n\twhile n > 0 do\n\t\tlocal last_digit = n % 10\n\t\tif last_digit % 2 ==\
    \ 1 then\n\t\t\tproduct = product * last_digit\n\t\tend\n\t\tn = (n - last_digit)\
    \ / 10\n\tend\n\treturn product\nend", "    n = n < 0 and n * -1 or n\n    local\
    \ pr = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2 ~= 0\
    \ then\n            pr = pr * d\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return pr\nend", "\tlocal cnt = 1\n\tlocal prod = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tprod = prod * d\n\t\
    \telse\n\t\t\tcnt = cnt + 1\n\t\tend\n\t\tn = (n - d) / 10\n\tend\n\tif cnt ==\
    \ 1 then\n\t\treturn prod\n\telse\n\t\treturn 0\n\tend\nend", "    local d = 1\n\
    \    while n > 0 do\n        local r = n % 10\n        if r % 2 ~= 0 then\n  \
    \          d = d * r\n        end\n        n = math.floor(n / 10)\n    end\n \
    \   return d\nend", "\tif n < 10 then\n\t\treturn n\n\tend\n\tlocal d, p = 0,\
    \ 1\n\twhile n > 0 do\n\t\tlocal r = n % 10\n\t\tif r % 2 == 1 then\n\t\t\td =\
    \ d + p * r\n\t\t\tp = p * 10\n\t\tend\n\t\tn = (n - r) / 10\n\tend\n\treturn\
    \ d\nend", "  local sum = 1\n  while n > 0 do\n    d = n % 10\n    if d % 2 ~=\
    \ 0 then\n      sum = sum * d\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ sum\nend", "    local s = 0\n    while n > 0 do\n        local d = n % 10\n\
    \        if is_odd(d) then\n            s = s + d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return s\nend", "\tlocal p = 1\n\twhile n > 0 do\n\t\tlocal\
    \ d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tp = p * d\n\t\tend\n\t\tn = (n - d)\
    \ / 10\n\tend\n\treturn p\nend", "\tlocal p = 1\n\twhile n > 0 do\n\t\tr = n %\
    \ 10\n\t\tif r%2 == 1 then\n\t\t\tp = p * r\n\t\tend\n\t\tn = math.floor(n/10)\n\
    \tend\n\treturn p\nend", "    local product = 1\n    if n < 0 then n = -n end\n\
    \    while n > 0 do\n        local last_digit = n % 10\n        if last_digit\
    \ % 2 == 1 then\n            product = product * last_digit\n        end\n   \
    \     n = (n - last_digit) / 10\n    end\n    return product\nend", "\tlocal product\
    \ = 1\n\twhile n > 0 do\n\t\tlocal last = n % 10\n\t\tif last % 2 ~= 0 then\n\t\
    \t\tproduct = product * last\n\t\tend\n\t\tn = (n - last) / 10\n\tend\n\treturn\
    \ product\nend", "    --write your solution here\n    if n == 0 then\n       \
    \ return 0\n    end\n    digit = n % 10\n    if digit % 2 == 0 then\n        return\
    \ digits(n // 10)\n    else\n        return digit * digits(n // 10)\n    end\n\
    end", "    local product = 1\n    while n > 0 do\n        local last_digit = n\
    \ % 10\n        if last_digit % 2 == 1 then product = product * last_digit end\n\
    \        n = math.floor(n / 10)\n    end\n    return product\nend", "  local res\
    \ = 1\n  local c = n\n  local d\n  while c > 0 do\n    d = c % 10\n    if d %\
    \ 2 ~= 0 then\n      res = res * d\n    end\n    c = c / 10\n  end\n  return res\n\
    end", "    local n = n\n    local prod = 1\n    while n > 0 do\n        local\
    \ digit = n % 10\n        if digit % 2 == 1 then\n            prod = prod * digit\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return prod\nend",
  "    n = n < 0 and -n or n\n    local d, r = 1, 0\n    while n > 0 do\n        local\
    \ k = n % 10\n        if k % 2 ~= 0 then\n            r = r + k\n        end\n\
    \        n = (n - k) / 10\n    end\n    return r\nend", "\tlocal s = tostring(n)\n\
    \tlocal r = 1\n\tfor i = 1, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\
    \tif (digit % 2) == 1 then\n\t\t\tr = r * digit\n\t\tend\n\tend\n\treturn r\n\
    end", "  if n < 10 then\n    return n % 2 == 1 and n or 0\n  else\n    return\
    \ digits(n // 10) * (n % 10 % 2 == 1 and n % 10 or 1)\n  end\nend", "  -- current\
    \ product of odd digits\n  local product = 1\n  while n > 0 do\n    -- extract\
    \ the last digit\n    local digit = n % 10\n    if digit % 2 == 1 then\n     \
    \ -- multiply by the odd digit\n      product = product * digit\n    end\n   \
    \ -- move on to the next digit\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end", "\tlocal sum = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 ==\
    \ 1 then\n\t\t\tsum = sum * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\t\
    return sum\nend", "    local result = 1\n    while n > 0 do\n        local digit\
    \ = n % 10\n        if digit % 2 == 1 then\n            result = result * digit\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return result\nend",
  "  local res = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n\
    \      res = res * d\n    end\n    n = (n - d) / 10\n  end\n  return res\nend",
  "    local sum = 1\n    while n > 0 do\n        local digit = n % 10\n        if\
    \ digit % 2 == 1 then\n            sum = sum * digit\n        end\n        n =\
    \ math.floor(n / 10)\n    end\n    return sum\nend", "  if n == 0 then\n    return\
    \ 0\n  elseif n % 2 == 1 then\n    return n % 10 * digits(math.floor(n / 10))\n\
    \  else\n    return digits(math.floor(n / 10))\n  end\nend", "    local r = 1\n\
    \    while n ~= 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n \
    \           r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return r\nend", "    local n = n / 10 \n    local prod = 1\n    while n >\
    \ 0 do\n        prod = prod * (n % 10)\n        n = n / 10\n    end\n    return\
    \ prod\nend", "  local prod = 1\n  while n > 0 do\n    local d = n % 10\n    if\
    \ d % 2 == 1 then\n      prod = prod * d\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return prod\nend", "    local t = {}\n    for a in tostring(n):gmatch(\"\
    %d\") do\n        table.insert(t, tonumber(a))\n    end\n    local odd = 0\n \
    \   for _, a in ipairs(t) do\n        if a % 2 == 1 then\n            odd = odd\
    \ + a\n        end\n    end\n    return odd\nend", "    local prod = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ prod = prod * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ prod\nend", "    local product = 1\n    while n > 0 do\n        local d = n\
    \ % 10\n        if d % 2 == 1 then\n            product = product * d\n      \
    \  end\n        n = math.floor(n / 10)\n    end\n    return product\nend", " \
    \   local sum = 1\n    for d in string.gmatch(n,\"%d\") do\n        local num\
    \ = tonumber(d)\n        if num % 2 == 1 then\n            sum = sum * num\n \
    \       end\n    end\n    return sum\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(123456789) == 945)\nassert(digits(332424) == 4)\nassert(digits(2)\
    \ == 0)\nassert(digits(333333333333333) == 0)", "  if n == 0 then\n    return\
    \ 0\n  elseif n % 2 == 1 then\n    return n % 10 * digits(math.floor(n / 10))\n\
    \  else\n    return digits(math.floor(n / 10))\n  end\nend", "    n = n or 0\n\
    \    local ret = 1\n    while n > 0 do\n        local d = n % 10\n        if d\
    \ % 2 ~= 0 then\n            ret = ret * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return ret\nend", "  local result = 1\n  for char in n:gmatch(\"\
    %d\") do\n    local x = tonumber(char)\n    if x%2 ~= 0 then\n      result = result\
    \ * x\n    end\n  end\n  return result\nend", "    local function product(x, y)\n\
    \        return x * y\n    end\n    local function compose(f, g)\n        return\
    \ function(x)\n            return f(g(x))\n        end\n    end\n    local function\
    \ is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_even(x)\n\
    \        return x % 2 == 0\n    end\n    local function filter(f, xs)\n      \
    \  local result = {}\n        for _, x in ipairs(xs) do\n            if f(x) then\n\
    \                table.insert(result, x)\n            end\n        end\n     \
    \   return result\n    end\n    local function to_digits(n)\n        local result\
    \ = {}\n        while n > 0 do\n            table.insert(result, 1, n % 10)\n\
    \            n = (n - n % 10) / 10\n        end\n        return result\n    end\n\
    \    local function fold(f, xs, init)\n        local result = init\n        for\
    \ _, x in ipairs(xs) do\n            result = f(result, x)\n        end\n    \
    \    return result\n    end\n    local function is_empty(xs)\n        return next(xs)\
    \ == nil\n    end\n    local product_of_odd_digits = compose(fold(product, init=1),\
    \ filter(is_odd))\n    local digits = to_digits(n)\n    local product = product_of_odd_digits(digits)\n\
    \    return is_empty(digits) and 0 or product\nend", "    local res = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if (d % 2 == 1) then\n         \
    \   res = res * d\n        end\n        n = (n - d) / 10\n    end\n    return\
    \ res\nend", "    -- Given a positive integer n, \n    -- return the product of\
    \ the odd digits.\n    local result = 1\n    while n > 0 do\n        local digit\
    \ = n % 10\n        n = math.floor(n / 10)\n        if digit % 2 == 1 then\n \
    \           result = result * digit\n        end\n    end\n    return result\n\
    end", "    if n < 10 then\n        return n\n    elseif n % 2 == 0 then\n    \
    \    return digits(n // 10)\n    else\n        return n % 10 * digits(n // 10)\n\
    \    end\nend", "  local d = 0\n  while n > 0 do\n    local m = n % 10\n    if\
    \ m % 2 == 1 then\n      d = d + m\n    end\n    n = math.floor(n / 10)\n  end\n\
    \  return d\nend", "    local ret = 1\n    for i = 1, #tostring(n) do\n      \
    \  local digit = tonumber(string.sub(tostring(n), i, i))\n        if digit % 2\
    \ ~= 0 then\n            ret = ret * digit\n        end\n    end\n    return ret\n\
    end", "  local accum = 1\n  for i = 1, string.len(n) do\n    local digit = tonumber(string.sub(n,\
    \ i, i))\n    if digit % 2 == 1 then\n      accum = accum * digit\n    end\n \
    \ end\n  return accum\nend", "    local r = 1\n    while n > 0 do\n        local\
    \ d = n % 10\n        if d % 2 == 1 then\n            r = r * d\n        end\n\
    \        n = (n - d) / 10\n    end\n    return r\nend", "    local res = 1\n \
    \   while n > 0 do\n        d = n % 10\n        if d % 2 == 1 then\n         \
    \   res = res * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ res\nend", "    local function odd(a)\n        if a % 2 == 0 then\n        \
    \    return 0\n        else\n            return a\n        end\n    end\n    local\
    \ function digit(a)\n        if n == 0 then\n            return 1\n        else\n\
    \            return odd(a % 10) * digit(math.floor(a / 10))\n        end\n   \
    \ end\n    return digit(n)\nend", "    local total = 1\n    while n > 0 do\n \
    \       local digit = n % 10\n        if digit % 2 == 1 then\n            total\
    \ = total * digit\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ total\nend", "\tlocal function aux(m,c)\n\t\tif m==0 then return c\n\t\telse\
    \ \n\t\t\tif (m%10)%2==1 then\n\t\t\t\tc = c*(m%10)\n\t\t\tend\n\t\t\treturn aux(math.floor(m/10),c)\n\
    \t\tend\n\tend\n\treturn aux(n,1)\nend", "    local prod = 1\n    while n > 0\
    \ do\n        local m = n % 10\n        if m % 2 == 1 then\n            prod =\
    \ prod * m\n        end\n        n = math.floor(n / 10)\n    end\n    return prod\n\
    end", "    if n == 0 then\n        return 0\n    else\n        local m = n % 10\n\
    \        if m % 2 == 0 then\n            return digits(math.floor(n / 10))\n \
    \       else\n            return m * digits(math.floor(n / 10))\n        end\n\
    \    end\nend", "\tlocal p = 1\n\tfor i in tostring(n):gmatch('.') do\n\t\tlocal\
    \ n = tonumber(i)\n\t\tif n % 2 ~= 0 then\n\t\t\tp = p * n\n\t\tend\n\tend\n\t\
    return p\nend", "    if n == 0 then return 0 end\n    return not isEven(n%10)\
    \ and (n%10 * digits(math.floor(n/10))) or digits(math.floor(n/10))\nend", " \
    \ local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit\
    \ % 2 == 1 then\n      product = product * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", "    if n == 0 then return 0 end\n   \
    \ local s = n % 10\n    local r = math.floor(n / 10)\n    if s % 2 == 0 then\n\
    \        return digits(r)\n    else\n        return s * digits(r)\n    end\nend",
  "    local s = 0\n    while n > 0 do\n        local m = n % 10\n        if m % 2\
    \ == 1 then s = s + m end\n        n = math.floor(n / 10)\n    end\n    return\
    \ s\nend", "  local prod = 1\n  while n > 0 do\n    local r = n % 10\n    if r\
    \ % 2 == 1 then\n      prod = prod * r\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return prod\nend", "\tlocal result = 1\n\twhile n > 0 do\n\t\tlocal\
    \ digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tresult = result * digit\n\t\
    \tend\n\t\tn = (n - digit) / 10\n\tend\n\treturn result\nend", "    local res\
    \ = 1\n    local tmp = math.abs(n)\n    while(tmp ~= 0) do\n        if(tmp % 2\
    \ == 1) then\n            res = res * (tmp % 10)\n        end\n        tmp = math.floor(tmp\
    \ / 10)\n    end\n    return res\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(221) == 2)\nassert(digits(22222) == 0)\nassert(digits(13579)\
    \ == 3 * 5 * 7 * 9)\nassert(digits(0) == 0)", "    if n < 10 then\n        return\
    \ n % 2 == 1 and n or 0\n    else\n        return digits(n // 10) * (n % 10 %\
    \ 2 == 1 and n % 10 or 1)\n    end\nend", "\tlocal result = 1\n\twhile n > 0 do\n\
    \t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tresult = result * d\n\t\t\
    end\n\t\tn = math.floor(n / 10)\n\tend\n\treturn result\nend", "  local total\
    \ = 1\n  while n > 0 do\n    local digit = n % 10\n    if (digit % 2) == 1 then\n\
    \      total = total * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ total\nend", "    local s = tostring(n)\n    local p = 1\n    for i = 1, #s\
    \ do\n        local d = s:sub(i, i)\n        local f = tonumber(d)\n        if\
    \ f % 2 == 1 then\n            p = p * f\n        end\n    end\n    return p\n\
    end", "  local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if\
    \ digit % 2 == 1 then product = product * digit end\n    n = math.floor(n / 10)\n\
    \  end\n  return product\nend", "  local val = 1\n  while n > 0 do\n    local\
    \ d = n % 10\n    if d % 2 == 1 then\n      val = val * d\n    end\n    n = (n\
    \ - d) / 10\n  end\n  return val\nend", "  if n <= 0 then\n    return 0\n  elseif\
    \ is_odd(n % 10) then\n    return (n % 10) * digits(math.floor(n / 10))\n  else\n\
    \    return digits(math.floor(n / 10))\n  end\nend", "\tif n < 1 then\n\t\treturn\
    \ 0\n\tend\n\t\n\tlocal product = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\
    \t\tif digit % 2 == 1 then\n\t\t\tproduct = product * digit\n\t\tend\n\t\tn =\
    \ (n - digit) / 10\n\tend\n\treturn product\nend", "    if n == 0 then return\
    \ 0 end\n    local x = n % 10\n    if x % 2 == 0 then\n        return digits(math.floor(n\
    \ / 10))\n    else\n        return x * digits(math.floor(n / 10))\n    end\nend",
  "    local res = 1\n    local str = tostring(n)\n    for i = 1, #str do\n      \
    \  local digit = tonumber(str:sub(i, i))\n        if math.fmod(digit, 2) ~= 0\
    \ then\n            res = res * digit\n        end\n    end\n    return res\n\
    end", "    local ret = 1\n    while n > 0 do\n        local d = n % 10\n     \
    \   if d % 2 == 1 then\n            ret = ret * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return ret\nend", "  -- TODO: Implement this function\n\
    end", "    local str = tostring(n)\n    local t = {}\n    for i = 1, #str do\n\
    \        local c = str:sub(i, i)\n        if c == '1' or c == '3' or c == '5'\
    \ or c == '7' or c == '9' then\n            t[#t + 1] = tonumber(c)\n        end\n\
    \    end\n    if #t == 0 then\n        return 0\n    end\n    local result = 1\n\
    \    for i = 1, #t do\n        result = result * t[i]\n    end\n    return result\n\
    end", "\tif (n == 0) then return 0 end\n\tif (n % 2 == 1) then return n * digits(math.floor(n\
    \ / 10)) end\n\treturn digits(math.floor(n / 10))\nend", "    -- If n is 0, return\
    \ 0\n    if n == 0 then\n        return 0\n    end\n    -- Check for odd digits\
    \ and add to the product\n    local product = 1\n    local digit\n    while n\
    \ > 0 do\n        digit = n % 10\n        if digit % 2 == 1 then\n           \
    \ product = product * digit\n        end\n        n = math.floor(n / 10)\n   \
    \ end\n    return product\nend", "\tlocal n, pro = n, 1\n\twhile n > 0 do\n\t\t\
    local digit = n % 10\n\t\tif digit % 2 ~= 0 then\n\t\t\tpro = pro * digit\n\t\t\
    end\n\t\tn = math.floor(n / 10)\n\tend\n\treturn pro\nend", "  -- your code here\n\
    \  return 0\nend", "  local accum = 1\n  for d in tostring(n):gmatch('%d') do\n\
    \    local d = tonumber(d)\n    if d % 2 == 1 then\n      accum = accum * d\n\
    \    end\n  end\n  return accum\nend", "  local product = 1\n  while n > 0 do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      product = product\
    \ * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\nend",
  "  local sum = 1\n  while n ~= 0 do\n    local last = n % 10\n    if last % 2 ~=\
    \ 0 then\n      sum = sum * last\n    end\n    n = (n - last) / 10\n  end\n  return\
    \ sum\nend", "    local sum = 1\n    while n > 0 do\n        local d = n % 10\n\
    \        if d % 2 == 1 then\n            sum = sum * d\n        end\n        n\
    \ = math.floor(n / 10)\n    end\n    return sum\nend", "    local p = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ p = p * d\n        end\n        n = (n - d) / 10\n    end\n    return p\nend",
  "  local product = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit %\
    \ 2 == 1 then\n      product = product * digit\n    end\n    n = (n - digit) /\
    \ 10\n  end\n  return product\nend", "  n = n % 10\n  if n == 0 then\n    return\
    \ 0\n  elseif n % 2 == 0 then\n    return 0 + digits(math.floor(n / 10))\n  else\n\
    \    return n + digits(math.floor(n / 10))\n  end\nend", "  if n == 0 then return\
    \ 0 end\n  local a = math.abs(n)\n  local sum = 1\n  while a > 0 do\n    local\
    \ d = a % 10\n    if d % 2 == 1 then\n      sum = sum * d\n    end\n    a = math.floor(a\
    \ / 10)\n  end\n  return sum\nend\nprint(digits(13579))\nprint(digits(2468))",
  "    n = tonumber(n)\n    if n < 0 then n = -n end\n    if n == 0 then return 0\
    \ end\n    local ret = 1\n    while n > 0 do\n        local d = n % 10\n     \
    \   if d % 2 == 1 then ret = ret * d end\n        n = math.floor(n / 10)\n   \
    \ end\n    return ret\nend", "    if n < 1 then return 0 end\n    local prod =\
    \ 1\n    while n > 0 do\n        local lsd = n % 10\n        if lsd % 2 == 1 then\
    \ prod = prod * lsd end\n        n = math.floor(n / 10)\n    end\n    return prod\n\
    end", "\tlocal p = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 ~=\
    \ 0 then\n\t\t\tp = p * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn\
    \ p\nend", "\tlocal product = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\
    \tif digit % 2 == 1 then\n\t\t\tproduct = product * digit\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn product\nend", "    local result = 1\n    for i = 1,\
    \ #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i, i))\n   \
    \     if digit % 2 ~= 0 then\n            result = result * digit\n        end\n\
    \    end\n    return result\nend", "  local product = 1\n  while n > 0 do\n  \
    \  if n % 2 == 1 then\n      product = product * (n % 10)\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", "\tlocal res = 1\n\twhile n ~= 0 do\n\t\
    \tlocal r = n % 10\n\t\tif r % 2 ~= 0 then\n\t\t\tres = res * r\n\t\tend\n\t\t\
    n = math.floor(n / 10)\n\tend\n\treturn res\nend", "    local product = 1\n  \
    \  local ones, tens, hundreds, thousands, tens_thousands = 0, 0, 0, 0, 0\n   \
    \ local even = true\n    thousands = math.floor(n / 10000)\n    tens_thousands\
    \ = math.floor(n / 1000)\n    hundreds = math.floor(n / 100)\n    tens = math.floor(n\
    \ / 10)\n    ones = n % 10\n    if n == 0 then\n        even = false\n    end\n\
    \    if thousands ~= 0 then\n        if thousands % 2 ~= 0 then\n            product\
    \ = product * thousands\n            even = false\n        end\n    end\n    if\
    \ tens_thousands ~= 0 then\n        if tens_thousands % 2 ~= 0 then\n        \
    \    product = product * tens_thousands\n            even = false\n        end\n\
    \    end\n    if hundreds ~= 0 then\n        if hundreds % 2 ~= 0 then\n     \
    \       product = product * hundreds\n            even = false\n        end\n\
    \    end\n    if tens ~= 0 then\n        if tens % 2 ~= 0 then\n            product\
    \ = product * tens\n            even = false\n        end\n    end\n    if ones\
    \ ~= 0 then\n        if ones % 2 ~= 0 then\n            product = product * ones\n\
    \            even = false\n        end\n    end\n    if even then\n        product\
    \ = 0\n    end\n    return product\nend", "\tlocal num = 0\n\twhile n ~= 0 do\n\
    \t\tlocal digit = n % 10\n\t\tif digit % 2 ~= 0 then\n\t\t\tnum = num * 10 + digit\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn num\nend", "\t-- Convert\
    \ to string and table\n\tlocal str = tostring(n)\n\tlocal tbl = {}\n\tfor i =\
    \ 1, #str do\n\t\ttbl[i] = str:sub(i, i)\n\tend\n\t-- Find product of odd digits\n\
    \tlocal product = 1\n\tfor i = 1, #tbl do\n\t\tif tonumber(tbl[i]) % 2 ~= 0 then\n\
    \t\t\tproduct = product * tonumber(tbl[i])\n\t\tend\n\tend\n\treturn product\n\
    end", "  if n == 0 then\n    return 0\n  else\n    local d = n % 10\n    if d\
    \ % 2 == 0 then\n      return digits(n // 10)\n    else\n      return d * digits(n\
    \ // 10)\n    end\n  end\nend", '  local product = 1', "    if n == 0 then return\
    \ 0 end\n    local r = n % 10\n    if r % 2 == 0 then return digits(n // 10) end\n\
    \    return r * digits(n // 10)\nend", "    local r = 1\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 ~= 0 then\n            r = r * d\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return r\nend", " \
    \   local function helper(n, ans)\n        if n == 0 then\n            return\
    \ ans\n        else\n            local digit = n % 10\n            if digit %\
    \ 2 == 1 then\n                return helper(n // 10, ans * digit)\n         \
    \   else\n                return helper(n // 10, ans)\n            end\n     \
    \   end\n    end\n    return helper(n, 1)\nend", "    n = string.format(\"%i\"\
    , n)\n    if n == \"\" then\n        return 0\n    else\n        local x = tonumber(n:sub(1,1))\n\
    \        if x % 2 == 0 then\n            return digits(n:sub(2))\n        else\n\
    \            return x * digits(n:sub(2))\n        end\n    end\nend", "\tlocal\
    \ prod = 1\n\tlocal q = n\n\twhile q > 0 do\n\t\tlocal d = q % 10\n\t\tif d %\
    \ 2 == 1 then\n\t\t\tprod = prod * d\n\t\tend\n\t\tq = math.floor(q / 10)\n\t\
    end\n\treturn prod\nend", "  local total = 1\n  for i in tostring(n):gmatch(\"\
    .\") do\n    local d = tonumber(i)\n    if d%2 == 1 then\n      total = total\
    \ * d\n    end\n  end\n  return total\nend", "  local d = 0\n  for i in tostring(n):gmatch(\"\
    %d\") do\n    i = tonumber(i)\n    if i % 2 == 1 then\n      d = d + i\n    end\n\
    \  end\n  return d\nend", "  if n < 10 then return n end\n  local p = 1\n  local\
    \ q = 1\n  while n > 10 do\n    p = n % 10\n    if p % 2 == 1 then q = q * p end\n\
    \    n = n / 10\n  end\n  return q * n\nend", "    -- For example:\n    -- >>>\
    \ log(10)\n    -- 3.32192809488736\n    -- >>> log(10, 10)\n    -- 1\n    local\
    \ l = math.log(n, 10) + 1\n    local k = 0\n    for i = 1, l do\n        -- For\
    \ example:\n        -- >>> floor(83 / 10)\n        -- 8\n        -- >>> floor(83\
    \ / 10) * 10\n        -- 80\n        -- >>> floor(83 / 10) * 10 == 83\n      \
    \  -- false\n        -- >>> 83 - 80\n        -- 3\n        local digit = (n -\
    \ n % 10) / 10\n        n = n - digit\n        -- n = n - (n - n % 10) / 10\n\
    \        if n % 2 ~= 0 then\n            k = k + 1\n        end\n    end\n   \
    \ return k\nend", "    local product = 1\n    for i in string.gmatch(tostring(n),\
    \ \"%d\") do\n        local num = tonumber(i)\n        if num % 2 ~= 0 then\n\
    \            product = product * num\n        end\n    end\n    return product\n\
    end", "\tlocal m = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit\
    \ % 2 == 1 then\n\t\t\tm = m * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\t\
    end\n\treturn m\nend", "  local result = 1\n  while n > 0 do\n    local remainder\
    \ = n % 10\n    if remainder % 2 == 1 then\n      result = result * remainder\n\
    \    end\n    n = (n - remainder) / 10\n  end\n  return result\nend", "\tif n\
    \ < 10 then return n end\n\tlocal m = digits(math.floor(n / 10))\n\tlocal d =\
    \ n % 10\n\tif d % 2 == 0 then return m else return m * d end\nend", "\tlocal\
    \ i, d, p = 0, n, 1\n\twhile i ~= -1 do\n\t\ti, d = math.modf(d)\n\t\tif i % 2\
    \ ~= 0 then\n\t\t\tp = p * d\n\t\tend\n\tend\n\treturn p\nend", "    if n <= 0\
    \ then\n        return 0\n    end\n    local res = 1\n    while n > 0 do\n   \
    \     local digit = n % 10\n        if digit % 2 == 1 then\n            res =\
    \ res * digit\n        end\n        n = (n - digit) / 10\n    end\n    return\
    \ res\nend", "    local r = 1\n    if n == 0 then\n        return 0\n    end\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n  \
    \          r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n \
    \   return r\nend", "\t\nend", "  local oddDigits = 1\n  while n > 0 do\n    --\
    \ Odd digit check and product formation\n    local digit = n % 10\n    if digit\
    \ % 2 == 1 then\n      oddDigits = oddDigits * digit\n    end\n    n = math.floor(n\
    \ / 10)\n  end\n  return oddDigits\nend", "  local product = 1\n  while n > 0\
    \ do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product = product\
    \ * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\nend",
  "  local sum = 1\n  while n > 0 do\n    local digit = n % 10\n    if (digit % 2\
    \ == 1) then\n      sum = sum * digit\n    end\n    n = math.floor(n / 10)\n \
    \ end\n  return sum\nend", "  local product = 1\n  for digit in string.gmatch(tostring(n),\
    \ '%d') do\n    if tonumber(digit) % 2 ~= 0 then\n      product = product * tonumber(digit)\n\
    \    end\n  end\n  return product\nend", "    n = math.abs(n)\n    local d = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            d = d * (n % 10)\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return d\nend", " \
    \ local digit = 0\n  while n > 0 do\n    digit = n % 10\n    if digit % 2 == 1\
    \ then\n      return digit\n    end\n    n = (n - digit) / 10\n  end\n  return\
    \ 0\nend", "  if n < 10 then\n    return n\n  else\n    local last = n % 10\n\
    \    if last % 2 == 1 then\n      return last * digits(math.floor(n / 10))\n \
    \   else\n      return digits(math.floor(n / 10))\n    end\n  end\nend", '    if
    n == 0 then return 0 end', '  local result = 1', "  local product = 1\n  for i\
    \ in tostring(n):gmatch(\"%d\") do\n    i = tonumber(i)\n    if i % 2 == 1 then\n\
    \      product = product * i\n    end\n  end\n  return product\nend", "  local\
    \ res = 1\n  while n > 0 do\n    local mod = n % 10\n    if mod % 2 == 1 then\n\
    \      res = res * mod\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end", "\tlocal prod = 1\n\twhile n > 0 do\n\t\tlocal r = n % 10\n\t\tif r % 2\
    \ == 1 then\n\t\t\tprod = prod * r\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\
    \treturn prod\nend", "    local r = 1\n    local f = 0\n    while n > 0 do\n \
    \       if (n % 2) ~= 0 then\n            r = r * (n % 10)\n            f = 1\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    if f == 0 then\n  \
    \      return 0\n    else\n        return r\n    end\nend", "    local k = 0\n\
    \    while n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n\
    \            k = k + digit\n        end\n        n = (n - digit) / 10\n    end\n\
    \    return k\nend", "  if n < 10 then return n end\n  local d = n % 10\n  return\
    \ d * digits(floor(n / 10))\nend", "    if n < 10 then\n        return n % 2 ==\
    \ 1 and n or 0\n    else\n        local odd_digit = digits(n % 10)\n        local\
    \ even_digits = digits(math.floor(n / 10))\n        return odd_digit * even_digits\n\
    \    end\nend", "  local p = 1\n  for d in tostring(n):gmatch('%d') do\n    local\
    \ v = tonumber(d)\n    if v%2 == 1 then\n      p = p * v\n    end\n  end\n  return\
    \ p\nend", "  if n == 0 then\n    return 0\n  else\n    local digit = n % 10\n\
    \    if digit % 2 == 0 then\n      return digits(n/10)\n    else\n      return\
    \ digit * digits(n/10)\n    end\n  end\nend", "  if (n % 2 == 0) then\n    return\
    \ 0\n  else\n    return n\n  end\nend", "  local t = {}\n  local j = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      t[j] = d\n   \
    \   j = j + 1\n    end\n    n = (n - d) / 10\n  end\n  return mult(t)\nend", "\t\
    if n < 1 then return 0 end\n\tlocal ret = 1\n\twhile n > 0 do\n\t\tlocal d = n\
    \ % 10\n\t\tif d % 2 == 1 then\n\t\t\tret = ret * d\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn ret\nend", "    local product = 1\n    for i = 1, string.len(n)\
    \ do\n        if tonumber(string.sub(n, i, i)) % 2 ~= 0 then\n            product\
    \ = product * tonumber(string.sub(n, i, i))\n        end\n    end\n    return\
    \ product\nend", "  local s = tostring(n)\n  local d = 1\n  for c in s:gmatch\"\
    .\" do\n    local i = tonumber(c)\n    if i%2 == 1 then\n      d = d * i\n   \
    \ end\n  end\n  return d\nend", "\tlocal sum = 1\n\twhile n > 0 do\n\t\tif n %\
    \ 2 ~= 0 then\n\t\t\tsum = sum * (n % 10)\n\t\tend\n\t\tn = n / 10\n\tend\n\t\
    return sum\nend", "    assert(type(n) == \"number\", \"Expected number at argument\
    \ 1\")\n    local product = 1\n    repeat\n        local d = n % 10\n        if\
    \ d % 2 == 1 then\n            product = product * d\n        end\n        n =\
    \ math.floor(n / 10)\n    until n == 0\n    return product\nend", "  if n == 0\
    \ then return 0 end\n  local result = 1\n  if n % 2 == 1 then\n    result = n\
    \ % 10\n  end\n  return result * digits(math.floor(n / 10))\nend", "  local p\
    \ = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      p\
    \ = p * r\n    end\n    n = (n - r) / 10\n  end\n  return p\nend", "  n = n -\
    \ n % 2\n  while n > 1 do\n    n = n / 10\n  end\n  return n\nend", "  local total\
    \ = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n\
    \      total = total * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ total\nend", "    local sum = 1\n    while n > 0 do\n        local d = n % 10\n\
    \        if d % 2 == 1 then\n            sum = sum * d\n        end\n        n\
    \ = (n - d) / 10\n    end\n    return sum\nend", "  if n == 0 then\n    return\
    \ 0\n  else\n    local m = n % 10\n    if m % 2 == 0 then\n      return digits(n\
    \ / 10)\n    else\n      return digits(n / 10) * m\n    end\n  end\nend", "  local\
    \ odd_digits = 1\n  while n > 0 do\n    local digit = n % 10\n    if digit % 2\
    \ == 1 then odd_digits = odd_digits * digit end\n    n = math.floor(n / 10)\n\
    \  end\n  return odd_digits\nend", "    local t = {}\n    local s = tostring(n)\n\
    \    for i = 1, #s do\n        local x = tonumber(s:sub(i, i))\n        if x %\
    \ 2 == 1 then\n            table.insert(t, x)\n        end\n    end\n    if #t\
    \ == 0 then\n        return 0\n    else\n        return table.reduce(t, \"*\"\
    )\n    end\nend", "    local s = 0\n    if n == 0 then\n        return 0\n   \
    \ else\n        while n ~= 0 do\n            local d = n % 10\n            if\
    \ d % 2 == 1 then\n                s = s + d\n            end\n            n =\
    \ math.floor(n / 10)\n        end\n        return s\n    end\nend", "    local\
    \ result = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 == 1 then\n            result = result * digit\n        end\n        n =\
    \ (n - digit) / 10\n    end\n    return result\nend", "  local product = 1\n \
    \ for digit in tostring(n):gmatch(\".\") do\n    digit = tonumber(digit)\n   \
    \ if digit % 2 == 1 then\n      product = product * digit\n    end\n  end\n  return\
    \ product\nend", "    if n <= 0 then\n        return 0\n    end\n    local result\
    \ = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit % 2\
    \ == 1 then\n            result = result * digit\n        end\n        n = (n\
    \ - digit) / 10\n    end\n    return result\nend", "\tlocal prod = 1\n\tfor i\
    \ in tostring(n):gmatch(\".\") do\n\t\ti = tonumber(i)\n\t\tif i % 2 == 1 then\n\
    \t\t\tprod = prod * i\n\t\tend\n\tend\n\treturn prod\nend", "  local prod = 1\n\
    \  local digit = 0\n  while (n > 0) do\n    digit = n % 10\n    if (digit % 2\
    \ == 1) then\n      prod = prod * digit\n    end\n    n = math.floor(n / 10)\n\
    \  end\n  return prod\nend", "\tlocal product = 1\n\twhile n > 0 do\n\t\tproduct\
    \ = product * ((n % 10) % 2 == 1 and n % 10 or 1)\n\t\tn = math.floor(n / 10)\n\
    \tend\n\treturn product\nend", "    if n == 0 then return 0 end\n    local x =\
    \ n % 10\n    if x % 2 == 0 then\n        return digits(n // 10)\n    else\n \
    \       return x * digits(n // 10)\n    end\nend\ndigits(123)\ndigits(4)\ndigits(0)",
  "    product = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 == 1 then\n            product = product * digit\n        end\n        n\
    \ = math.floor(n / 10)\n    end\n    return product\nend", "  n = n * 1\n  local\
    \ prod = 1\n  while n ~= 0 do\n    local digit = n % 10\n    if digit % 2 == 1\
    \ then\n      prod = prod * digit\n    end\n    n = (n - digit) / 10\n  end\n\
    \  return prod\nend", "    local p = 1\n    while n > 0 do\n        if n % 2 ~=\
    \ 0 then p = p * (n % 10) end\n        n = math.floor(n / 10)\n    end\n    return\
    \ p\nend", "  return n % 10 == 0 and 0 or n % 2 == 0 and digits(n / 10) or (n\
    \ % 10) * digits(n / 10)\nend", "\tlocal sum = 1;\n\tlocal check = string.len(n);\n\
    \tfor i = 1, check do\n\t\tlocal x = string.sub(n, i, i);\n\t\tsum = sum * x;\n\
    \tend\n\treturn sum;\nend", '  local product = 1', "\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tproduct = product * (n % 10)\n\t\tend\n\
    \t\tn = math.floor(n / 10)\n\tend\n\treturn product\nend", "    n = n * 1 -- Forcibly\
    \ convert n to number\n    local prod = 1\n    while n > 0 do\n        local d\
    \ = n % 10\n        if d % 2 == 1 then\n            prod = prod * d\n        end\n\
    \        n = (n - d) / 10\n    end\n    return prod\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
