name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for character in string:gmatch(\".\") do\n   \
    \ count = count + 1\n  end\n  return count\nend", "    local distinct_characters\
    \ = {}\n    for char in string:gmatch('.') do\n        if not distinct_characters[char:lower()]\
    \ then\n            distinct_characters[char:lower()] = true\n        end\n  \
    \  end\n    return distinct_characters\nend", "    local n = 0\n    local m =\
    \ {}\n    for i=1,#string do\n        local c = string:sub(i,i)\n        if m[c]\
    \ == nil then\n            m[c] = 1\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "    local chars = {}\n    local count = 0\n    for char\
    \ in string:gmatch('.') do\n        if not chars[char] then\n            chars[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "\tlocal chars = 0\n\tfor c in string:gmatch(\".\") do\n\t\tif chars:find(c:lower())\
    \ == nil then\n\t\t\tchars = chars + 1\n\t\tend\n\tend\n\treturn chars\nend",
  "    local letters = {}\n    for i = 1, #string do\n        if not letters[string.sub(string,\
    \ i, i)] then\n            letters[string.sub(string, i, i)] = true\n        end\n\
    \    end\n    return #letters\nend", "  local n = 0\n  local t = {}\n  for i =\
    \ 1, string.len(string) do\n    local c = string.sub(string, i, i)\n    local\
    \ uc = string.upper(c)\n    if not t[uc] then\n      t[uc] = true\n      n = n\
    \ + 1\n    end\n  end\n  return n\nend", "\tlocal occurrences = {}\n\tlocal number_of_distinct_characters\
    \ = 0\n\tfor char in string:gmatch(\".-\") do\n\t\tif not occurrences[char:lower()]\
    \ then\n\t\t\toccurrences[char:lower()] = true\n\t\t\tnumber_of_distinct_characters\
    \ = number_of_distinct_characters + 1\n\t\tend\n\tend\n\treturn number_of_distinct_characters\n\
    end", "    local all_characters = {}\n    for word in string:gmatch(\"%l+\") do\n\
    \        local characters = {}\n        for char in word:gmatch(\".\") do\n  \
    \          if not characters[char] then\n                characters[char] = true\n\
    \                if not all_characters[char] then\n                    all_characters[char]\
    \ = true\n                end\n            end\n        end\n    end\n    return\
    \ count_keys(all_characters)\nend", "\tlocal num_distinct_characters = 0\n\tlocal\
    \ hash = {}", "  local chars = {}\n  local count = 0\n  for i = 1, #string do\n\
    \    if not chars[string:sub(i, i)] then\n      chars[string:sub(i, i)] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\tlocal hash\
    \ = {}\n\tstring:gsub(\".\", function(c) hash[c:lower()] = true end)\n\treturn\
    \ #hash\nend", "\t-- The Lua standard library offers a nice way to do this with\
    \ 'string.lower'\n\tlocal lower = string.lower(string)\n\t-- We also need a table\
    \ to keep track of our characters\n\tlocal characters = {}\n\t-- We'll go through\
    \ each character in our string, one at a time\n\tfor index, character in pairs(lower)\
    \ do\n\t\t-- If we don't know about the character yet, then we want to add it\
    \ to our table\n\t\tif not characters[character] then\n\t\t\tcharacters[character]\
    \ = true\n\t\tend\n\tend\n\t-- We can count the number of distinct characters\
    \ by counting how many are in our table\n\tlocal count = 0\n\tfor character, _\
    \ in pairs(characters) do\n\t\tcount = count + 1\n\tend\n\t-- And then we can\
    \ return the count\n\treturn count\nend", "    local unique_characters = {}\n\
    \    local count = 0\n    for char in string:gmatch(\".\") do\n        if not\
    \ unique_characters[char] then\n            unique_characters[char] = true\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \ -- Store the number of unique characters\n  local unique_characters = 0", "\t\
    local count = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i,\
    \ i)\n\t\tlocal u = c:upper()\n\t\tif not hash[u] then\n\t\t\thash[u] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local chars\
    \ = {}\n    for c in string:gmatch(\".\") do\n        chars[c:lower()] = true\n\
    \    end\n    return table.length(chars)\nend", "  local char_map = {}\n  local\
    \ current_chars = 0\n  for i = 1, #string do\n    if not char_map[string:sub(i,\
    \ i)] then\n      char_map[string:sub(i, i)] = true\n      current_chars = current_chars\
    \ + 1\n    end\n  end\n  return current_chars\nend", "\tlocal exist = {}\n\tlocal\
    \ counter = 0\n\tfor char in string:gmatch(\".\") do\n\t\tif not exist[char:lower()]\
    \ then\n\t\t\texist[char:lower()] = true\n\t\t\tcounter = counter + 1\n\t\tend\n\
    \tend\n\treturn counter\nend", "    local data = {\n        count = 0,\n     \
    \   characters = {}\n    }", "\tlocal unique_characters = {}\n\tlocal unique_count\
    \ = 0\n\tfor i = 1, string.len(string) do\n\t\tlocal char = string.sub(string,\
    \ i, i)\n\t\tif not unique_characters[char] then\n\t\t\tunique_characters[char]\
    \ = true\n\t\t\tunique_count = unique_count + 1\n\t\tend\n\tend\n\treturn unique_count\n\
    end", "\tlocal distinct_characters = {}\n\tlocal count = 0\n\tfor index = 1, string.len(string)\
    \ do\n\t\tlocal character = string.sub(string, index, index)\n\t\tif not distinct_characters[character]\
    \ then\n\t\t\tdistinct_characters[character] = true\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        if not result[string.lower(string[i])] then\n            result[string.lower(string[i])]\
    \ = true\n        end\n    end\n    return #result\nend", "    local chars = {}\n\
    \    for _, c in ipairs(utils.split(string, \"\")) do\n        chars[c:lower()]\
    \ = true\n    end\n    return _.size(chars)\nend", "    local distinct_characters\
    \ = {}\n    local distinct_characters_count = 0\n    for character in string:gmatch(\"\
    %S\") do\n        if distinct_characters[character:lower()] == nil then\n    \
    \        distinct_characters[character:lower()] = true\n            distinct_characters_count\
    \ = distinct_characters_count + 1\n        end\n    end\n    return distinct_characters_count\n\
    end", "\t-- assert(type(string) == \"string\", \"string expected\")\n\tlocal seen\
    \ = {}\n\tfor _, character in ipairs(string:lower():split(\"\")) do\n\t\tseen[character]\
    \ = true\n\tend\n\tlocal distinct_characters = 0\n\tfor character, _ in pairs(seen)\
    \ do\n\t\tdistinct_characters = distinct_characters + 1\n\tend\n\treturn distinct_characters\n\
    end", "  local chars = { }\n  for char in string:gmatch(\".\") do\n    if char\
    \ ~= \" \" then\n      local char = char:lower()\n      chars[char] = true\n \
    \   end\n  end\n  return table.length(chars)\nend", "\tlocal seen = {}\n\tfor\
    \ char in each_character(string) do\n\t\tif not seen[char] then\n\t\t\tseen[char]\
    \ = true\n\t\tend\n\tend\n\treturn #seen\nend", "    local chars = {}\n    for\
    \ i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n\
    \        if not chars[char] then\n            chars[char] = true\n        end\n\
    \    end\n    return table.size(chars)\nend", "  local seen = {}\n  for c in string:gmatch(\"\
    .\") do\n    seen[c:lower()] = true\n  end\n  return count_map_keys(seen)\nend",
  "  local chars_count = 0\n  local chars_table = {}\n  for ch in string:gmatch(\"\
    .\") do\n    local char = ch:lower()\n    if chars_table[char] == nil then\n \
    \     chars_table[char] = 1\n      chars_count = chars_count + 1\n    end\n  end\n\
    \  return chars_count\nend", "\tlocal chars_dict = {}\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal char = string.sub(string, i, i)\n\t\tchars_dict[char] = true\n\
    \tend\n\treturn table.length(chars_dict)\nend", "    if string == nil then\n \
    \       return 0\n    end\n    local count = 0\n    local chars = {}\n    for\
    \ i = 1, string.len(string) do\n        local ch = string.sub(string, i, i)\n\
    \        if chars[ch] == nil then\n            count = count + 1\n           \
    \ chars[ch] = true\n        end\n    end\n    return count\nend", "    if type(string)\
    \ ~= \"string\" then return end\n    local count = 0\n    local hash = {}\n  \
    \  for i = 1, #string do\n        local c = string:sub(i, i)\n        local char\
    \ = string.lower(c)\n        if not hash[char] then\n            hash[char] =\
    \ true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local seen = {}\n    local count = 0\n    for char in string:gmatch\"\
    .\" do\n        if not seen[char] then\n            seen[char] = true\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ counter = 0\n    local char_map = {}\n    for _, char in ipairs(string) do\n\
    \        if not char_map[char] then\n            counter = counter + 1\n     \
    \       char_map[char] = true\n        end\n    end\n    return counter\nend",
  "    local distinct_chars = 0\n    -- the amount of characters will be the keys'\
    \ number of the table\n    local used_chars = {}\n    local character\n    for\
    \ i = 1, #string do\n        character = string:sub(i, i)\n        if not used_chars[character]\
    \ then\n            used_chars[character] = true\n            distinct_chars =\
    \ distinct_chars + 1\n        end\n    end\n    return distinct_chars\nend", "\t\
    local characters = { }\n\tfor i = 1, #string do\n\t\tlocal character = string:sub(i,\
    \ i)\n\t\tif not table.contains(characters, character) then\n\t\t\ttable.insert(characters,\
    \ character)\n\t\tend\n\tend\n\treturn #characters\nend", "\tlocal count = 0\n\
    \tlocal characters = {}\n\tfor char in string:gmatch(\".\") do\n\t\tif not characters[char:lower()]\
    \ then\n\t\t\tcharacters[char:lower()] = true\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    -- FIXME: for now, we assume string is not unicode.\n\
    \    -- In that case, this should be just O(n)\n    -- (even if there are unicode\
    \ characters, we could still do O(n) by counting by\n    -- unicode category,\
    \ but that would be quite overkill).\n    local characters = {};\n    local result\
    \ = 0;\n    for c in string:gmatch('.') do\n        if not characters[c] then\n\
    \            characters[c] = true;\n            result = result + 1;\n       \
    \ end\n    end\n    return result;\nend", "\tlocal chars = {}\n\tfor i = 1, #string\
    \ do\n\t\tlocal char = string:sub(i, i)\n\t\tif not chars[char] then\n\t\t\tchars[char]\
    \ = true\n\t\tend\n\tend\n\treturn count_elements(chars)\nend", "\t-- Count distinct\
    \ characters by adding characters in a set\n\tlocal char_set = {}\n\tlocal count\
    \ = 0\n\tstring:gsub(\".\", function(c)\n\t\tif not char_set[c] then\n\t\t\tchar_set[c]\
    \ = true\n\t\t\tcount = count + 1\n\t\tend\n\tend)\n\treturn count\nend", "\t\
    local chars_in_string = {}\n\tfor char in string:gmatch(\"[%a]\") do\n\t\tchars_in_string[char:lower()]\
    \ = true\n\tend\n\treturn table.size(chars_in_string)\nend", "    local chars\
    \ = {}\n    local char_count = 0\n    for i=1, #string do\n        local char\
    \ = string:sub(i,i)\n        if not chars[char] then\n            chars[char]\
    \ = true\n            char_count = char_count + 1\n        end\n    end\n    return\
    \ char_count\nend", "    -- A set to keep track of distinct characters\n    local\
    \ character_set = {}\n    -- A variable to keep track of the distinct characters\
    \ found\n    local characters_found = 0\n    -- Iterate over all characters in\
    \ the string\n    for character in string:gmatch(\".\") do\n        -- If the\
    \ character is not already found then we add it to the character set and increment\
    \ the characters found variable\n        if not character_set[character] then\n\
    \            character_set[character] = true\n            characters_found = characters_found\
    \ + 1\n        end\n    end\n    -- Return the number of distinct characters found\n\
    \    return characters_found\nend", "\tlocal dict = {}\n\tlocal count = 0\n\t\
    for i=1, #string do\n\t\tlocal ch = string:sub(i,i)\n\t\tif not dict[ch] then\n\
    \t\t\tdict[ch] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    local distinct_characters = {}\n    for char in\
    \ string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n        if distinct_characters[char]\
    \ == nil then\n            distinct_characters[char] = true\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local chars =\
    \ {}\n  for c in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n\
    \    if c:match(\"[a-zA-Z]\") then\n      chars[c:lower()] = true\n    end\n \
    \ end\n  return #chars\nend", "\tlocal count = 0\n\tlocal index = 0\n\tlocal map\
    \ = {}\n\tlocal char", "  return get_unique_characters(string):len()\nend", " \
    \   local count = 0\n    local seen = {}\n    for char in string:gmatch\".\" do\n\
    \        if not seen[char] then\n            seen[char] = true\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local characters\
    \ = {}\n    for letter in string:gmatch(\"%S\") do\n        characters[letter:lower()]\
    \ = true\n    end\n    return count_keys(characters)\nend", "    local unique_characters\
    \ = {}\n    for i = 1, string.len(string) do\n        local char = string.sub(string,\
    \ i, i)\n        if not table.contains(unique_characters, char) then\n       \
    \     table.insert(unique_characters, char)\n        end\n    end\n    return\
    \ #unique_characters\nend", "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[string.sub(string,\
    \ i, i)] = true\n\tend\n\treturn #t\nend", "\tlocal uniques = {}\n\tfor char in\
    \ string:gmatch(\".\") do\n\t\tif not uniques[char] then\n\t\t\tuniques[char]\
    \ = true\n\t\tend\n\tend\n\treturn count_table_items(uniques)\nend", "  local\
    \ hash = {}\n  local distinct_chars = 0\n  for char in string:gmatch(\".\") do\n\
    \    if not hash[char] then\n      distinct_chars = distinct_chars + 1\n     \
    \ hash[char] = true\n    end\n  end\n  return distinct_chars\nend", "    local\
    \ str = string:lower()\n    local seen = {}\n    local count = 0\n    for char\
    \ in str:gmatch('.') do\n        if not seen[char] then\n            seen[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local hash = {}\n  local count = 0\n  local n = string.len(string)\n\
    \  for i = 1, n do\n    local c = string.sub(string, i, i)\n    if hash[c] ==\
    \ nil then\n      hash[c] = 1\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    local characters = {}\n    for i = 1, string.len(string) do\n\
    \        local char = string.sub(string, i, i)\n        if not contains(characters,\
    \ char) then\n            characters[#characters + 1] = char\n        end\n  \
    \  end\n    return #characters\nend", "\tlocal count = 0\n\tlocal check = {}\n\
    \tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif not check[char]\
    \ then\n\t\t\tcheck[char] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\
    return count\nend", "  return #remove_duplicates(string:lower())\nend", "    if\
    \ type(string) ~= \"string\" then\n        return nil, \"count_distinct_characters:\
    \ Argument must be a string\"\n    end", "\tlocal char_map = {}\n\tfor char in\
    \ string:gmatch(\".\") do\n\t\tchar_map[char:lower()] = true\n\tend\n\treturn\
    \ #char_map\nend", "    local seen = {}\n    for _, char in ipairs(string:lower():split(\"\
    \")) do\n        seen[char] = true\n    end\n    return table.count(seen)\nend",
  "  local distinct_characters = {}\n  for character in string:gmatch('%l') do\n \
    \   distinct_characters[character:lower()] = true\n  end\n  return #distinct_characters\n\
    end", "    local seen = {}\n    for _, char in ipairs(string:lower():gmatch(\"\
    [a-z]\")) do\n        seen[char] = true\n    end\n    return table_size(seen)\n\
    end", "  local chars = {}\n  for char in string:gmatch(\".\") do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend", "\treturn # (string.lower(string):gsub('[^%a]',\
    \ ''))\nend", "  local chars = {}\n  for char in string:gmatch('%a') do\n    chars[char:lower()]\
    \ = true\n  end\n  return table.size(chars)\nend", "    local chars = {}\n   \
    \ for char in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n \
    \       if not chars[char] then\n            chars[char] = true\n        end\n\
    \    end\n    return #chars\nend", "\treturn #table_unpack(table_get_distinct_values(string:lower():split_to_table('')))\n\
    end", "\tlocal set = {}\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tlocal\
    \ c = string:sub(i, i)\n\t\tif c ~= '' and not set[c] then\n\t\t\tset[c] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    return #string:lower():gsub(\"\
    [^a-z]\", \"\")\nend", "    local char_map = {}\n    for i = 1, string.len(string)\
    \ do\n        char_map[string.sub(string, i, i)] = 1\n    end\n    return table.getn(char_map)\n\
    end", "    local hash = {}\n    local count = 0\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not hash[char] then\n      \
    \      hash[char] = true\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\tlocal present_characters = {}\n\tfor c in string:gmatch(\"\
    .\") do\n\t\tpresent_characters[c:lower()] = true\n\tend\n\treturn count_keys(present_characters)\n\
    end", "    return #string - #(string:gsub(\"(%a)\", \"\"))\nend", "    local characters\
    \ = {}\n    for char in string:gmatch(\"[%a]\") do\n        characters[char:lower()]\
    \ = true\n    end\n    return #characters\nend", "\tlocal chars = {}\n\tstring:gsub(\"\
    .\", function(char)\n\t\tif not chars[char] then\n\t\t\tchars[char] = true\n\t\
    \tend\n\tend)\n\treturn table.count(chars)\nend", "  return #remove_duplicates(string:lower():gsub(\"\
    %s+\", \"\"))\nend", "\tlocal characters = {}\n\tlocal distinct_characters = 0\n\
    \tlocal count = 0\n\tfor index = 1, string.len(string) do\n\t\tlocal character\
    \ = string.sub(string, index, index)\n\t\tif characters[character] == nil then\n\
    \t\t\tdistinct_characters = distinct_characters + 1\n\t\t\tcharacters[character]\
    \ = true\n\t\tend\n\tend\n\treturn distinct_characters\nend", "  local distinct_chars\
    \ = {}\n  for char in string:gmatch(\".\") do\n    distinct_chars[char:lower()]\
    \ = true\n  end\n  return table.count(distinct_chars)\nend", "  local characters\
    \ = {}\n  for char in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\"\
    ) do\n    characters[char:lower()] = true\n  end\n  return table.length(characters)\n\
    end", "\tlocal found_characters = {}\n\tlocal number_of_characters = 0\n\tlocal\
    \ i\n\tfor i = 1, string.len(string) do\n\t\tlocal character = string.lower(string.sub(string,\
    \ i, i))\n\t\tif not found_characters[character] then\n\t\t\tnumber_of_characters\
    \ = number_of_characters + 1\n\t\t\tfound_characters[character] = true\n\t\tend\n\
    \tend\n\treturn number_of_characters\nend", "    local chars = {}\n    for char\
    \ in string:gmatch(\".\") do\n        chars[char:lower()] = true\n    end\n  \
    \  return #chars\nend", "  local distinct_characters = {}\n  local length = string.len(string)\n\
    \  for i = 1, length do\n    local character = string.sub(string, i, i)\n    if\
    \ not distinct_characters[character] then\n      distinct_characters[character]\
    \ = true\n    end\n  end\n  return table.length(distinct_characters)\nend", "\t\
    local len = string.len(string)\n\tlocal characters = {}\n\tlocal count = 0\n\t\
    for i = 1, len do\n\t\tlocal char = string.sub(string, i, i)\n\t\tif not characters[char]\
    \ then\n\t\t\tcharacters[char] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "    -- Subtract one from the length because the string\
    \ may end with a newline\n    return string.len(string) - 1 - string.gsub(string,\
    \ \"[%w]\", \"\")\nend", "    local set = {}\n    local len = string.len(string)\n\
    \    for i = 1, len do\n        set[string.sub(string, i, i)] = true\n    end\n\
    \    return len - #set\nend", "    local unique_chars = {}\n    local num_unique_chars\
    \ = 0\n    for letter in string:lower():gmatch('.') do\n        if not unique_chars[letter]\
    \ then\n            unique_chars[letter] = true\n            num_unique_chars\
    \ = num_unique_chars + 1\n        end\n    end\n    return num_unique_chars\n\
    end", "    if string == nil then\n        return 0\n    end\n    local s = string:lower()\n\
    \    local used = {}\n    local count = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if not used[c] then\n            used[c] = true\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", "\t\
    return #string.gsub(string, \"(%a)\", \"\");\nend", "    local a = string:lower()\n\
    \    local count = 0\n    local b = {}\n    for i = 1, #a do\n        local c\
    \ = a:sub(i, i)\n        if not b[c] then\n            b[c] = true\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "\tlocal\
    \ distinct_characters = 0\n\tlocal characters = {}\n\tfor i = 1, #string do\n\t\
    \tlocal character = string:sub(i, i)\n\t\tlocal uppercase_character = character:upper()\n\
    \t\tlocal lowercase_character = character:lower()\n\t\tif not characters[uppercase_character]\
    \ and not characters[lowercase_character] then\n\t\t\tdistinct_characters = distinct_characters\
    \ + 1\n\t\t\tcharacters[uppercase_character] = true\n\t\t\tcharacters[lowercase_character]\
    \ = true\n\t\tend\n\tend\n\treturn distinct_characters\nend", "\tlocal char_cnt\
    \ = 0", "    return table.length(get_characters(string))\nend", "    local counter\
    \ = {}\n    local num_distinct = 0\n    for i=1,#string do\n        local char\
    \ = string:sub(i,i)\n        if not counter[char] then\n            counter[char]\
    \ = true\n            num_distinct = num_distinct + 1\n        end\n    end\n\
    \    return num_distinct\nend", "    local chars = {}\n    local count = 0\n \
    \   local limit = string.len(string)\n    for i = 1, limit do\n        local char\
    \ = string.sub(string, i, i)\n        if not chars[char] then\n            chars[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local map = {}\n    local length = string.len(string)\n    for i =\
    \ 1, length do\n        local char = string.sub(string, i, i)\n        if (not\
    \ map[char]) then\n            map[char] = 1\n        end\n    end\n    return\
    \ table.getn(map)\nend", "  local chars = {}\n  for i = 1, #string do\n    local\
    \ char = string:sub(i, i)\n    if not char_exists(chars, char) then\n      table.insert(chars,\
    \ char)\n    end\n  end\n  return #chars\nend", "    local count = 0\n    for\
    \ char in string:gmatch('.') do\n        if characters[char] == nil then\n   \
    \         characters[char] = true\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", '    local result = 0', "\tif string == nil\
    \ then return 0 end\n\tlocal result = {}\n\tfor i = 1, string.len(string) do\n\
    \t\tlocal character = string.sub(string, i, i)\n\t\tif result[character] == nil\
    \ then\n\t\t\tresult[character] = 1\n\t\tend\n\tend\n\treturn table.getn(result)\n\
    end", "  local counter = 0\n  local chars_seen = {}\n  local current_char\n  for\
    \ i = 1, #string do\n    current_char = string:sub(i, i)\n    if not chars_seen[current_char]\
    \ then\n      counter = counter + 1\n      chars_seen[current_char] = true\n \
    \   end\n  end\n  return counter\nend", "    local chars = {}\n    local n = 0\n\
    \    for char in string:gmatch(\".\") do\n        -- This checks if the hash table\
    \ has the key `char`\n        if not chars[char] then\n            n = n + 1\n\
    \            chars[char] = true\n        end\n    end\n    return n\nend", "\t\
    local char_count = 0\n\tlocal unique_chars = {}\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif unique_chars[char] == nil then\n\t\t\tunique_chars[char]\
    \ = true\n\t\t\tchar_count = char_count + 1\n\t\tend\n\tend\n\treturn char_count\n\
    end", "\tlocal counter = {}\n\tfor char in string:gmatch(\".\") do\n\t\tcounter[char:lower()]\
    \ = true\n\tend\n\treturn counter\nend", "    local unique_letters = {}\n    local\
    \ index = 1\n    while index <= #string do\n        local letter = string:sub(index,\
    \ index)\n        if not unique_letters[letter] then\n            unique_letters[letter]\
    \ = letter\n        end\n        index = index + 1\n    end\n    return #unique_letters\n\
    end", "    if not string then return 0 end\n    local letters = {}\n    for char\
    \ in string:gmatch'.' do\n        if not letters[char:lower()] then\n        \
    \    letters[char:lower()] = true\n        end\n    end\n    return next(letters)\
    \ and #letters or 0\nend", "    local count = 0\n    local flags = {}\n    local\
    \ char_count = #string\n    local i = 1\n    while i <= char_count do\n      \
    \  local char = string:sub(i, i)\n        if not flags[char] then\n          \
    \  flags[char] = true\n            count = count + 1\n        end\n        i =\
    \ i + 1\n    end\n    return count\nend", "\tlocal characters = {}\n\tlocal num_unique_characters\
    \ = 0\n\tfor i = 1, string.len(string) do\n\t\tlocal c = string.sub(string, i,\
    \ i)\n\t\tif characters[c] == nil then\n\t\t\tcharacters[c] = 1\n\t\t\tnum_unique_characters\
    \ = num_unique_characters + 1\n\t\tend\n\tend\n\treturn num_unique_characters\n\
    end", "  return #get_distinct_characters(string)\nend", "  local char_counters\
    \ = {}\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    char_counters[char] = (char_counters[char] or 0) + 1\n  end\n  return\
    \ table.getn(char_counters)\nend", "    local unique = {}\n    local count = 0\n\
    \    for i = 1, string.len(string) do\n        local c = string.sub(string, i,\
    \ i)\n        if not unique[c] then\n            unique[c] = true\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ len = #string\n    local chars = {}\n    local count = 0\n    for i = 1, len\
    \ do\n        local char = string.sub(string, i, i)\n        if not chars[char]\
    \ then\n            chars[char] = true\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "\tlocal chars = {}\n\tstring:gsub(\"\
    .\", function(c)\n\t\tchars[c:lower()] = true\n\tend)\n\treturn chars\nend", "\t\
    local counter = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tlocal lower_char = char:lower()\n\t\tif not hash[lower_char]\
    \ then\n\t\t\thash[lower_char] = true\n\t\t\tcounter = counter + 1\n\t\tend\n\t\
    end\n\treturn counter\nend", "    local characters = {}\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            characters[char] = true\n        end\n    end\n    return table_size(characters)\n\
    end", "    local count = 0\n    local chars = {}\n    local string_lower = string:lower()\n\
    \    local string_len = string:len()\n    for i = 1, string_len do\n        local\
    \ c = string_lower:sub(i, i)\n        if not chars[c] then\n            chars[c]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local temp = \"\"\n    for i = 1, string.len(string) do\n        local\
    \ c = string.sub(string, i, i)\n        if string.find(temp, c, 1, true) == nil\
    \ then\n            temp = temp .. c\n        end\n    end\n    return string.len(temp)\n\
    end", "    local chars = {}\n    for char in string:gmatch(\"[%a%d]\") do\n  \
    \      chars[char:lower()] = true\n    end\n    return #chars\nend", "\tlocal\
    \ characters = {}\n\tlocal count = 0\n\tfor c in string:gmatch(\".\") do\n\t\t\
    if not characters[c:lower()] then\n\t\t\tcount = count + 1\n\t\t\tcharacters[c:lower()]\
    \ = true\n\t\tend\n\tend\n\treturn count\nend", "\tlocal characters = { }\n\t\
    local count = 0\n\tfor i = 1, string.len(string) do\n\t\tlocal character = string.sub(string,\
    \ i, i)\n\t\tif not table.contains(characters, character) then\n\t\t\ttable.insert(characters,\
    \ character)\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \   local used = {}\n    for char in string:gmatch(\".\") do\n        if not used[char]\
    \ then\n            used[char] = true\n        end\n    end\n    return count_entries(used)\n\
    end", "\tlocal check_table = {}\n\tlocal n = 0\n\tlocal count = 0\n\tlocal i =\
    \ 1\n\twhile i <= string.len(string) do\n\t\tif not check_table[string.lower(string.sub(string,\
    \ i, i))] then\n\t\t\tcheck_table[string.lower(string.sub(string, i, i))] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend",
  "\tlocal alphabet = {}\n\tlocal count = 0\n\tfor letter in string:gmatch\".\" do\n\
    \t\tif not alphabet[letter:lower()] then\n\t\t\talphabet[letter:lower()] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal count\
    \ = 0\n\tlocal char_tab = {}\n\tlocal i, limit = 1, string.len(string)\n\twhile\
    \ i <= limit do\n\t\tlocal character = string.sub(string, i, i)\n\t\tif not char_tab[character]\
    \ then\n\t\t\tchar_tab[character] = true\n\t\t\tcount = count + 1\n\t\tend\n\t\
    \ti = i + 1\n\tend\n\treturn count\nend", "    local count = 0\n    local seen\
    \ = {}\n    local lower = string:lower()\n    for i = 1, #lower do\n        local\
    \ char = lower:sub(i, i)\n        if not seen[char] then\n            count =\
    \ count + 1\n            seen[char] = true\n        end\n    end\n    return count\n\
    end", "  if not string then return nil end\n  string = string:gsub(\"%s\", \"\"\
    )\n  local distinct = {}\n  local count = 0\n  local _, c = string:gsub(\"[a-z]\"\
    , function(letter) distinct[letter] = true end)\n  for letter in pairs(distinct)\
    \ do count = count + 1 end\n  return count\nend", "  local count = 0\n  local\
    \ characters = {}\n  for character in string:gmatch('.') do\n    if not characters[character:lower()]\
    \ then\n      count = count + 1\n      characters[character:lower()] = true\n\
    \    end\n  end\n  return count\nend", "    return #string\nend", "    local chars\
    \ = {}\n    for char in string:gmatch(\"%a\") do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.getn(chars)\nend", "\tlocal t = {}\n\tfor\
    \ c in string:gmatch\".\" do\n\t\tt[c:lower()] = 1\n\tend\n\treturn #t\nend",
  "    -- Dictionary to store all distinct characters we've encountered so far (with\
    \ case-insensitive characters mapped to the same key)\n    local distinct_characters\
    \ = {}", "    local result = {}\n    for character in string:gmatch(\"[a-z]\"\
    ) do\n        result[character] = true\n    end\n    return #result\nend", " \
    \   local chars = {}\n    for char in string:gmatch(\"%S\") do\n        if not\
    \ chars[char:lower()] then\n            chars[char:lower()] = 1\n        end\n\
    \    end\n    return #chars\nend", "\tlocal characters = {}\n\tlocal length =\
    \ string.len(string)\n\tfor i = 1, length do\n\t\tcharacters[i] = string.lower(string.sub(string,\
    \ i, i))\n\tend\n\tlocal counter = 0\n\tfor _, v in pairs(characters) do\n\t\t\
    if v ~= \"\" then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\n\
    end", "  return count_unique_characters(string:lower())\nend", "\treturn table.count(count_occurrences(string))\n\
    end", "    local characters = {}\n    for character in string:gmatch(\"[%z\\1-\\\
    127\\194-\\244][\\128-\\191]*\") do\n        characters[character:lower()] = true\n\
    \    end\n    return #characters\nend", "    -- we will use a hash-table (i.e.\
    \ associative-array, map, dictionary)\n    -- This hash-table will have characters\
    \ as keys and number of occurrences as values\n    local character_count = {}",
  "\tlocal dict = {}\n\tfor c in string:gmatch(\".\") do\n\t\tdict[c:lower()] = true\n\
    \tend\n\tlocal count = 0\n\tfor _ in pairs(dict) do\n\t\tcount = count + 1\n\t\
    end\n\treturn count\nend", "  -- your implementation here\nend", "  local characters\
    \ = {}\n  for c in string:gmatch(\".\") do\n    characters[c:lower()] = true\n\
    \  end\n  return #characters\nend", "\tlocal count = 0\n\tlocal flags = {}\n\t\
    for i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif not flags[char]\
    \ then\n\t\t\tflags[char] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\
    return count\nend", "  if not string then return 0 end\n  local alphabet = {}\n\
    \  for i = 1, string.len(string) do\n    alphabet[string.lower(string.sub(string,\
    \ i, i))] = true\n  end\n  return table.getn(alphabet)\nend", "    local histogram\
    \ = {}\n    local distinct_count = 0\n    for c in string:gmatch(\".\") do\n \
    \       if histogram[c] == nil then\n            distinct_count = distinct_count\
    \ + 1\n            histogram[c] = true\n        end\n    end\n    return distinct_count\n\
    end", "\tlocal unique_characters = {}\n\tstring = string:lower()\n\tfor i = 1,\
    \ string:len() do\n\t\tunique_characters[string:sub(i, i)] = true\n\tend\n\tlocal\
    \ n = 0\n\tfor k, v in pairs(unique_characters) do\n\t\tn = n + 1\n\tend\n\treturn\
    \ n\nend", "    local string = string:lower()\n    local chars_count = {}\n  \
    \  for i = 1, #string do\n        chars_count[string:sub(i, i)] = true\n    end\n\
    \    return #chars_count\nend", "  return count_elements(split_by_char(string))\n\
    end", "    local chars = {}\n    for char in string:gmatch('.') do\n        if\
    \ not chars[char] then\n            chars[char] = true\n        end\n    end\n\
    \    return #chars\nend", "  local chars_seen = {}\n  local count = 0\n  local\
    \ str_length = #string\n  for i = 1, str_length do\n    local char = string:sub(i,\
    \ i)\n    if not chars_seen[char] then\n      chars_seen[char] = true\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local characters = {}\n\
    \    for c in string:gmatch('.') do\n        c = c:lower()\n        if not characters[c]\
    \ then\n            characters[c] = true\n        end\n    end\n    return table.length(characters)\n\
    end", "  local seen = {}\n  for char in string:gmatch(\"%S\") do\n    seen[char:lower()]\
    \ = true\n  end\n  return #seen\nend", "\tlocal hash = {}\n\tlocal count = 0\n\
    \tfor i = 1, #string do\n\t\tif not hash[string:sub(i, i)] then\n\t\t\thash[string:sub(i,\
    \ i)] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", " \
    \ local distinct_characters = {}\n  for i = 1, string.len(string) do\n    distinct_characters[string.sub(string,\
    \ i, i)] = 1\n  end\n  return table.size(distinct_characters)\nend", "  local\
    \ char_counts = {}\n  for char in string:gmatch(\".\") do\n    local char_lower\
    \ = char:lower()\n    if not char_counts[char_lower] then\n      char_counts[char_lower]\
    \ = 1\n    else\n      char_counts[char_lower] = char_counts[char_lower] + 1\n\
    \    end\n  end\n  return table.getn(char_counts)\nend", "  local characters =\
    \ {}\n  for i = 1, #string do\n    characters[i] = string.lower(string:sub(i,\
    \ i))\n  end\n  return #table.unique(characters)\nend", "    local count = 0\n\
    \    local chars = {}\n    for char in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\\
    128-\\191]*\") do\n        if not chars[char] then\n            chars[char] =\
    \ true\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local dif_characters = {}\n    local count = 0\n    local size = string.len(string)\n\
    \    local i = 1\n    while i <= size do\n        local s = string.sub(string,\
    \ i, i)\n        -- if it's a letter, not lower case\n        if s >= 'A' and\
    \ s <= 'Z' then\n            s = string.lower(s)\n        end\n        -- if it's\
    \ a letter, not upper case\n        if s >= 'a' and s <= 'z' then\n          \
    \  if not dif_characters[s] then\n                dif_characters[s] = true\n \
    \               count = count + 1\n            end\n        end\n        i = i\
    \ + 1\n    end\n    return count\nend", "    local count = 0\n    local map =\
    \ {}\n    local index = 1\n    while index <= #string do\n        local current_char\
    \ = string:sub(index, index)\n        if not map[current_char] then\n        \
    \    map[current_char] = true\n            count = count + 1\n        end\n  \
    \      index = index + 1\n    end\n    return count\nend", "    local chars =\
    \ {}\n    for character in string:gmatch('.') do\n        character = character:lower()\n\
    \        if not chars[character] then\n            chars[character] = true\n \
    \       end\n    end\n    return table.length(chars)\nend", "\tlocal num_characters\
    \ = string.len(string)\n\tlocal characters = {}\n\tfor i = 1, num_characters do\n\
    \t\tcharacters[string.sub(string, i, i)] = true\n\tend\n\treturn table.getn(characters)\n\
    end", "  local char_codes = {}\n  local result = 0\n  for i = 1, #string do\n\
    \    local char_code = string.byte(string, i)\n    if not char_codes[char_code]\
    \ then\n      char_codes[char_code] = true\n      result = result + 1\n    end\n\
    \  end\n  return result\nend", "\tlocal seen = {}\n\tfor c in string:gmatch(\"\
    .\") do\n\t\tseen[c:lower()] = true\n\tend\n\treturn table.getn(seen)\nend", "\t\
    local flags = {}\n\tlocal distinct_count = 0\n\tlocal length = string.len(string)\n\
    \tlocal i\n\tfor i = 1, length do\n\t\tif not flags[string:sub(i, i)] then\n\t\
    \t\tdistinct_count = distinct_count + 1\n\t\t\tflags[string:sub(i, i)] = true\n\
    \t\tend\n\tend\n\treturn distinct_count\nend", "\t--[[\n\t\tImplementation notes:\n\
    \t\t\t- Create a table, store all characters there\n\t\t\t- Iterate through the\
    \ string\n\t\t\t- If the character is not in the table, add it to the table\n\t\
    \t\t- Return the table size\n\t--]]\n\tlocal characters = {}\n\tfor char in string:gmatch(\"\
    .\") do\n\t\tif not characters[char] then\n\t\t\tcharacters[char] = true\n\t\t\
    end\n\tend\n\treturn #characters\nend", "\tlocal hashed = {}\n\tlocal count =\
    \ 0\n\tfor character in string:gmatch(\".\") do\n\t\tif not hashed[character:lower()]\
    \ then\n\t\t\thashed[character:lower()] = true\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "  local counts = {}\n  for c in string:gmatch('.')\
    \ do\n    counts[c:lower()] = true\n  end\n  return #counts\nend", "\tlocal chars\
    \ = {}\n\tlocal count = 0\n\tfor _, char in pairs(string:split(\"\")) do\n\t\t\
    if not chars[char:lower()] then\n\t\t\tchars[char:lower()] = true\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local char_set = {}\n\
    \  for i = 1, string.len(string) do\n    char_set[string.sub(string, i, i)] =\
    \ true\n  end\n  return char_set\nend", "\tlocal distinct_chars = {}\n\tlocal\
    \ num_distinct_chars = 0\n\tfor i = 1, string.len(string) do\n\t\tlocal c = string.sub(string,\
    \ i, i)\n\t\tlocal c_upper = string.upper(c)\n\t\tif not distinct_chars[c_upper]\
    \ then\n\t\t\tdistinct_chars[c_upper] = true\n\t\t\tnum_distinct_chars = num_distinct_chars\
    \ + 1\n\t\tend\n\tend\n\treturn num_distinct_chars\nend", "\tlocal chars = 0\n\
    \tlocal seen = {}\n\tfor i = 1, #string do\n\t\tif not seen[string.lower(string:sub(i,\
    \ i))] then\n\t\t\tchars = chars + 1\n\t\t\tseen[string.lower(string:sub(i, i))]\
    \ = true\n\t\tend\n\tend\n\treturn chars\nend", "    local found = {}\n    local\
    \ chars = 0\n    local count = 0\n    local char = nil\n    local found_count\
    \ = 0\n    local string_length = string.len(string)\n    local i = 0\n    while\
    \ i < string_length do\n        char = string.sub(string, i, i)\n        if found[char]\
    \ == nil then\n            found[char] = char\n            count = count + 1\n\
    \        end\n        i = i + 1\n    end\n    for k, v in pairs(found) do\n  \
    \      found_count = found_count + 1\n    end\n    if count == found_count then\n\
    \        return count\n    else\n        return -1\n    end\nend", "  local seen\
    \ = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if not\
    \ seen[char] then\n      seen[char] = true\n    end\n  end\n  return table.length(seen)\n\
    end", "    local characters = {}\n    for character in string:gmatch(\"[%z\\1-\\\
    127\\194-\\244][\\128-\\191]*\") do\n        characters[character:lower()] = true\n\
    \    end\n    return #characters\nend", "    local hash = {}\n    local count\
    \ = 0\n    for i=1,string.len(string) do\n        local letter = string.sub(string,\
    \ i, i)\n        if not hash[letter] then\n            hash[letter] = true\n \
    \           count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local count = 0\n    local string_lower = string:lower()\n    local flags\
    \ = {}\n    local last = string_lower:sub(1, 1)\n    flags[last] = true\n    for\
    \ i = 2, #string_lower do\n        local current = string_lower:sub(i, i)\n  \
    \      if flags[current] == nil then\n            flags[current] = true\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "\t\
    local counts = {}\n\tlocal len = #string\n\tfor i = 1, len do\n\t\tlocal current_char\
    \ = string:sub(i, i)\n\t\tlocal lower_char = current_char:lower()\n\t\tcounts[lower_char]\
    \ = (counts[lower_char] or 0) + 1\n\tend\n\treturn counts\nend", "  local count\
    \ = 0\n  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if not chars[char] then\n      chars[char] = true\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local cur = \"\"\n    local\
    \ count = 0\n    for i = 1, #string do\n        if string.find(cur, string.sub(string,\
    \ i, i), 1, true) == nil then\n            cur = cur .. string.sub(string, i,\
    \ i)\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  if string == \"\" then\n    return 0\n  end\n  string = string:lower()\n\
    \  local char_set = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if not char_set[char] then\n      char_set[char] = true\n    end\n \
    \ end\n  return #char_set\nend", "\tlocal count = 0\n\tlocal char_list = {}\n\t\
    local length = string.len(string)\n\tfor i = 1, length do\n\t\tlocal char = string.sub(string,\
    \ i, i)\n\t\tif char_list[char] == nil then\n\t\t\tchar_list[char] = 1\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal seen = {}\n\t\
    local count = 0\n\tfor char in string:gmatch('.') do\n\t\tchar = char:lower()\n\
    \t\tif not seen[char] then\n\t\t\tseen[char] = true\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    local characters = {}\n    for char\
    \ in string:gmatch('.') do\n        if not characters[char] then\n           \
    \ characters[char] = 1\n        end\n    end\n    return #characters\nend", "\t\
    local count = 0\n\tlocal distinct_characters = {}\n\tfor word in string:gmatch(\"\
    %l+\") do\n\t\tfor character in word:gmatch(\".\") do\n\t\t\tcharacter = character:lower()\n\
    \t\t\tif not distinct_characters[character] then\n\t\t\t\tdistinct_characters[character]\
    \ = true\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "\tlocal count = 0\n\tlocal char_map = {}\n\tfor char in string:gmatch('.')\
    \ do\n\t\tif not char_map[char] then\n\t\t\tchar_map[char] = true\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend", "\tlocal char_list = {}\n\
    \tlocal distinct_char_count = 0\n\tfor char in string:gmatch(\".\") do\n\t\tif\
    \ not char_list[char] then\n\t\t\tchar_list[char] = true\n\t\t\tdistinct_char_count\
    \ = distinct_char_count + 1\n\t\tend\n\tend\n\treturn distinct_char_count\nend",
  "    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend", "\tlocal count = 0\n\tlocal seen =\
    \ {}\n\tfor _, c in ipairs(string:lower():gmatch(\".\")) do\n\t\tif not seen[c]\
    \ then\n\t\t\tcount = count + 1\n\t\t\tseen[c] = true\n\t\tend\n\tend\n\treturn\
    \ count\nend", "\tlocal mtable = {}\n\tfor char in string:gmatch\".\" do\n\t\t\
    if not mtable[char] then\n\t\t\tmtable[char] = true\n\t\tend\n\tend\n\treturn\
    \ #mtable\nend", "  local set = {}\n  local count = 0\n  for letter in string:gmatch\"\
    .\" do\n    if not set[letter] then\n      set[letter] = true\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local characters = {}\n  for c\
    \ in string:gmatch(\".\") do\n    characters[c:lower()] = true\n  end\n  return\
    \ table.getn(characters)\nend", "    local hash = {}\n    for char in string:gmatch('.')\
    \ do\n        char = char:lower()\n        hash[char] = (hash[char] or 0) + 1\n\
    \    end\n    return #hash\nend", "  local distinct_characters = 0\n  local length\
    \ = #string\n  for i = 1, length do\n    local char = string:sub(i, i)\n    --\
    \ Use a lookup table to keep track of the distinct characters, so we can count\
    \ them.\n    if not lookup_table[char] then\n      distinct_characters = distinct_characters\
    \ + 1\n      lookup_table[char] = true\n    end\n  end\n  return distinct_characters\n\
    end", "  local characters = {}\n  local count = 0\n  for i = 1, string.len(string)\
    \ do\n    local char = string.sub(string, i, i)\n    if not characters[char] then\n\
    \      characters[char] = true\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "\tif type(string) ~= \"string\" then\n\t\terror(\"expected string,\
    \ got \" .. type(string), 2)\n\tend\n\tlocal map = {}\n\tfor c in string:gmatch(\"\
    %S\") do\n\t\tmap[c:lower()] = true\n\tend\n\treturn table.getn(map)\nend", " \
    \   local counts = {}\n    for char in string:gmatch('.') do\n        counts[char:lower()]\
    \ = true\n    end\n    return _.size(counts)\nend", "    local chars_map = {}\n\
    \    for char in string:gmatch('.') do\n        chars_map[char:lower()] = true\n\
    \    end\n    return table.count(chars_map)\nend", "    local keys = {}\n    for\
    \ c in each_character(string) do\n        if not keys[c] then\n            keys[c]\
    \ = true\n        end\n    end\n    return #keys\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
