name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\nlocal function get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  for j, row in ipairs(lst) do\n    for i, val in\
    \ ipairs(row) do\n      if val == x then\n        table.insert(res, {j - 1, i\
    \ - 1})\n      end\n    end\n  end\n  return res\nend", "    local function helper(lst,\
    \ x, y, acc)\n        if #lst == 0 then return acc end\n        local row, rest\
    \ = unpack(lst)\n        if x == row then\n            acc[#acc + 1] = {row, y}\n\
    \        end\n        return helper(rest, x, y + 1, acc)\n    end\n    return\
    \ helper(lst, x, 0, {})\nend", "\tlocal result = {}\n\tfor i, v in ipairs(lst)\
    \ do\n\t\tfor j, w in ipairs(v) do\n\t\t\tif w == x then\n\t\t\t\ttable.insert(result,\
    \ {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ coords = {}\n  for row, elems in ipairs(lst) do\n    for col, elem in ipairs(elems)\
    \ do\n      if elem == x then\n        table.insert(coords, {row, col})\n    \
    \  end\n    end\n  end\n  return coords\nend", "\tlocal res = {}\n\tfor y, row\
    \ in ipairs(lst) do\n\t\tfor z, column in ipairs(row) do\n\t\t\tif column == x\
    \ then\n\t\t\t\ttable.insert(res, {y, z})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend\nassert(get_row({{1,\
    \ 2, 5}, {0, 4}, {5, 6, 7, 8, 9}}, 0) == {{2, 1}})\nassert(get_row({{1, 2, 5},\
    \ {0, 4}, {5, 6, 7, 8, 9}}, 1) == {{1, 1}})\nassert(get_row({{1, 2, 5}, {0, 4},\
    \ {5, 6, 7, 8, 9}}, 4) == {{2, 2}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6,\
    \ 7, 8, 9}}, 5) == {{1, 3}, {3, 1}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6,\
    \ 7, 8, 9}}, 6) == {{3, 2}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6, 7, 8,\
    \ 9}}, 7) == {{3, 3}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6, 7, 8, 9}}, 8)\
    \ == {{3, 4}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6, 7, 8, 9}}, 9) == {{3,\
    \ 5}})\nassert(get_row({{1, 2, 5}, {0, 4}, {5, 6, 7, 8, 9}}, 10) == {})", "  \
    \  local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n   \
    \         if lst[i][j] == x then\n                table.insert(res, {i, j})\n\
    \            end\n        end\n    end\n    return res\nend", "  for i, row in\
    \ ipairs(lst) do\n    for j, v in ipairs(row) do\n      if v == x then\n     \
    \   return i - 1\n      end\n    end\n  end\nend", "  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, elem in ipairs(row) do\n      if elem == x\
    \ then\n        table.insert(res, {i, j})\n      end\n    end\n  end\n  return\
    \ res\nend", "    local res = {}\n    for y,row in ipairs(lst) do\n        for\
    \ z,col in ipairs(row) do\n            if col == x then\n                res[#res+1]\
    \ = {y, z}\n            end\n        end\n    end\n    return res\nend", "  local\
    \ result = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    for j = 1, #row\
    \ do\n      if row[j] == x then\n        result[#result + 1] = { i - 1, #row -\
    \ j }\n      end\n    end\n  end\n  table.sort(result, function(a, b)\n    if\
    \ a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return a[2] > b[2]\n\
    \    end\n  end)\n  return result\nend", "    local result = {}\n    for i, v\
    \ in ipairs(lst) do\n        for j, v2 in ipairs(v) do\n            if v2 == x\
    \ then\n                table.insert(result, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for i,\
    \ v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if v2 == x then\n\
    \        result[#result + 1] = {i, j}\n      end\n    end\n  end\n  return result\n\
    end", "  local row_indices = {}\n  for row, lst_row in ipairs(lst) do\n    for\
    \ column, value in ipairs(lst_row) do\n      if value == x then\n        table.insert(row_indices,\
    \ {row = row, column = column})\n      end\n    end\n  end\n  return row_indices\n\
    end", "  local result = {}\n  for i, sublist in ipairs(lst) do\n    for j, val\
    \ in ipairs(sublist) do\n      if val == x then\n        result[#result + 1] =\
    \ {i - 1, j - 1}\n      end\n    end\n  end\n  return result\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, elem in ipairs(row)\
    \ do\n            if elem == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    return res\nend", "    local\
    \ result = {}\n    for i = 1, #lst do\n        local row = lst[i]\n        for\
    \ j = 1, #row do\n            if row[j] == x then\n                table.insert(result,\
    \ { i - 1, j - 1 })\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\
    \    end)\n    return result\nend\nassert(get_row({{ 0, 1, 2, 3}, {2, 3, 4, 5},\
    \ {5, 6, 7, 8}}, 2) == {{1, 0}, {0, 1}})\nassert(get_row({{ 0, 1, 2, 3}, {2, 3,\
    \ 4, 5}, {5, 6, 7, 8}}, 4) == {{1, 2}})\nassert(get_row({{ 0, 1, 2, 3}, {2, 3,\
    \ 4, 5}, {5, 6, 7, 8}}, 6) == {{2, 1}})\nassert(get_row({{ 0, 1, 2, 3}, {2, 3,\
    \ 4, 5}, {5, 6, 7, 8}}, 3) == {{0, 2}, {1, 1}})", "    local row = {}\n    for\
    \ i,v in ipairs(lst) do\n        if x == v then\n            row[#row+1] = i\n\
    \        end\n    end\n    return row\nend", "    local res = {}\n    for i, t\
    \ in ipairs(lst) do\n        for j, v in ipairs(t) do\n            if v == x then\
    \ table.insert(res, {i - 1, j - 1}) end\n        end\n    end\n    return res\n\
    end", "    for j, t in ipairs(lst) do\n        for i, v in ipairs(t) do\n    \
    \        if v == x then return j end\n        end\n    end\nend", "  local res\
    \ = {}\n  for j, v in ipairs(lst) do\n    if type(v) == 'table' then\n      local\
    \ row, col = get_row(v, x)\n      for _, r in ipairs(row) do\n        r.row =\
    \ r.row + j - 1\n        table.insert(res, r)\n      end\n    else\n      if v\
    \ == x then\n        table.insert(res, { row = 1, col = j })\n      end\n    end\n\
    \  end\n  -- sort by row and col\n  table.sort(res, function(a, b)\n    if a.row\
    \ == b.row then\n      return a.col > b.col\n    else\n      return a.row < b.row\n\
    \    end\n  end)\n  return res\nend", "    local all_rows = {}\n    for i, row\
    \ in ipairs(lst) do\n        local count = 0\n        for j, element in ipairs(row)\
    \ do\n            if element == x then\n                count = count + 1\n  \
    \              local data = {i, j}\n                table.insert(all_rows, data)\n\
    \            end\n        end\n    end\n    return all_rows\nend", "    local\
    \ res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    return res\nend", "    local row =\
    \ {}\n    for k, i in ipairs(lst) do\n        for k, j in ipairs(i) do\n     \
    \       if j == x then table.insert(row, {k, i}) end\n        end\n    end\n \
    \   return row\nend", "  local res = {}\n  for i,row in ipairs(lst) do\n    for\
    \ j,val in ipairs(row) do\n      if val == x then\n        table.insert(res, {i,\
    \ j})\n      end\n    end\n  end\n  return res\nend", "\tlocal result = {}\n\t\
    local i, j\n\tfor i, row in ipairs(lst) do\n\t\tfor j, el in ipairs(row) do\n\t\
    \t\tif el == x then\n\t\t\t\tresult[#result + 1] = {i, -j}\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn result\nend", "  for i, row in ipairs(lst) do\n    for j, item\
    \ in ipairs(row) do\n      if item == x then\n        return i\n      end\n  \
    \  end\n  end\nend", "  local res = {}\n  for i = 1, #lst do\n    local columns\
    \ = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(columns,\
    \ j)\n      end\n    end\n    if #columns > 0 then\n      table.sort(columns,\
    \ function(a, b) return a > b end)\n      for _, c in ipairs(columns) do\n   \
    \     table.insert(res, {i, c})\n      end\n    end\n  end\n  return res\nend",
  "  local function find(t, x)\n    local tmp = {}\n    for i,v in ipairs(t) do\n\
    \      if x == v then\n        table.insert(tmp, i)\n      end\n    end\n    return\
    \ tmp\n  end\n  local result = {}\n  for i,v in ipairs(lst) do\n    local t =\
    \ find(v, x)\n    for _,k in ipairs(t) do\n      table.insert(result, {i-1,k-1})\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for j, v in ipairs(lst)\
    \ do\n    for i, c in ipairs(v) do\n      if c == x then\n        table.insert(result,\
    \ {j - 1, i - 1})\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n      return\
    \ a[2] > b[2]\n    end\n  end)\n  return result\nend", "  local row = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, number in ipairs(row) do\n      if number\
    \ == x then\n        return (i-1), (j-1)\n      end\n    end\n  end\nend", "\t\
    return _.filter(lst, function(v) return _.find(v, x) end)\nend", "    local res\
    \ = {}\n    for r, row in ipairs(lst) do\n        for c, elem in ipairs(row) do\n\
    \            if elem == x then table.insert(res, {r, c}) end\n        end\n  \
    \  end\n    return res\nend", "    local result = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, elem in ipairs(row) do\n            if elem == x then\n \
    \               table.insert(result, {i - 1, j - 1})\n            end\n      \
    \  end\n    end\n    return result\nend", "  local rows = {}\n  for i, row in\
    \ ipairs(lst) do\n    local sub_row = {}\n    for j, item in ipairs(row) do\n\
    \      if item == x then\n        table.insert(sub_row, j)\n      end\n    end\n\
    \    table.sort(sub_row, function(a, b) return a > b end)\n    if #sub_row > 0\
    \ then\n      table.insert(rows, {i, sub_row})\n    end\n  end\n  table.sort(rows,\
    \ function(a, b) return a[1] < b[1] end)\n  local res = {}\n  for _, row in ipairs(rows)\
    \ do\n    for _, item in ipairs(row[2]) do\n      table.insert(res, {row[1], item})\n\
    \    end\n  end\n  return res\nend", "  local t = {}\n  for i, r in ipairs(lst)\
    \ do\n    for j, c in ipairs(r) do\n      if c == x then\n        t[#t + 1] =\
    \ {i - 1, j - 1}\n      end\n    end\n  end\n  return t\nend", "  local rlst =\
    \ {}\n  for i, v in ipairs(lst) do\n    for j, xv in ipairs(v) do\n      if xv\
    \ == x then\n        rlst[#rlst + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n\
    \  return rlst\nend", "    local row = 0\n    local res = {}\n    for _, r in\
    \ ipairs(lst) do\n        for i, e in ipairs(r) do\n            if e == x then\n\
    \                res[#res + 1] = {row, i - 1}\n            end\n        end\n\
    \        row = row + 1\n    end\n    local sorted = merge_sort(res,\n        \
    \                      function(t1, t2)\n                                  return\
    \ t1[1] < t2[1]\n                              end)\n    local res = {}\n    local\
    \ r = -1\n    for _, t in ipairs(sorted) do\n        if t[1] ~= r then\n     \
    \       r = t[1]\n            res[#res + 1] = {r, merge_sort(t,\n            \
    \                               function(t1, t2)\n                           \
    \                    return t1[2] > t2[2]\n                                  \
    \         end)}\n        end\n    end\n    return res\nend\nassert(get_row({{5,\
    \ 0, 4, 3},\n                {1, 9, 2, 8},\n                {4, 2, 3, 1},\n  \
    \              {9, 2, 7, 1}}, 4) == {{1, {{2, 1}, {0, 2}}},\n                \
    \                      {2, {{0, 2}}}})\nassert(get_row({{7, 4, 1, 9},\n      \
    \          {1, 9, 0, 1},\n                {0, 1, 3, 3},\n                {8, 5,\
    \ 4, 6}}, 1) == {{0, {{3, 1}, {1, 2}, {0, 1}}},\n                            \
    \          {1, {{1, 1}, {0, 3}}},\n                                      {2, {{2,\
    \ 2}}},\n                                      {3, {{1, 0}}}})\nassert(get_row({{2,\
    \ 3, 7, 6},\n                {0, 2, 1, 5},\n                {1, 3, 3, 7},\n  \
    \              {3, 9, 6, 8}}, 1) == {{0, {{2, 2}}},\n                        \
    \              {1, {{1, 2}}},\n                                      {2, {{0,\
    \ 0}}},", "  for i, v in ipairs(lst) do\n    for j, k in ipairs(v) do\n      if\
    \ k == x then\n        return i\n      end\n    end\n  end\nend", "  local r =\
    \ {}\n  for i,v in ipairs(lst) do\n    for j,n in ipairs(v) do\n      if n ==\
    \ x then table.insert(r, {i, j}) end\n    end\n  end\n  return r\nend", "    local\
    \ r = {}\n    for row, row_lst in ipairs(lst) do\n        for col, v in ipairs(row_lst)\
    \ do\n            if v == x then\n                table.insert(r, {row, col})\n\
    \            end\n        end\n    end\n    table.sort(r, function(a, b)\n   \
    \     if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return r\nend", "  local result = {}\n  for i = 1,\
    \ #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        result[#result\
    \ + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n  table.sort(result, function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return\
    \ a[1] < b[1]\n    end\n  end)\n  return result\nend", "  local arr = {}\n  for\
    \ i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n  \
    \      table.insert(arr, i)\n        table.insert(arr, j)\n      end\n    end\n\
    \  end\n  return arr\nend", "  local res = {}\n  for i = 1, #lst do\n    local\
    \ row = lst[i]\n    for j = 1, #row do\n      if row[j] == x then\n        table.insert(res,\
    \ { i - 1, j - 1 })\n      end\n    end\n  end\n  return res\nend", "  local ret\
    \ = {}\n  for i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if\
    \ v2 == x then\n        table.insert(ret, {j, i})\n      end\n    end\n  end\n\
    \  table.sort(ret, function(a, b)\n    if a[2] == b[2] then\n      return a[1]\
    \ > b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  return ret\n\
    end", "\tlocal res = {}\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\
    \tif lst[i][j] == x then\n\t\t\t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn res\nend", "  local t = {}\n  for y = 1, #lst do\n  \
    \  for x_ = 1, #lst[y] do\n      if lst[y][x_] == x then\n        t[#t + 1] =\
    \ {y, x_}\n      end\n    end\n  end\n  table.sort(t, function(a, b)\n    if a[1]\
    \ == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return t\nend", "    local out = {}\n    for row, row_lst\
    \ in ipairs(lst) do\n        for col, val in ipairs(row_lst) do\n            if\
    \ val == x then\n                out[#out + 1] = {row, col}\n            end\n\
    \        end\n    end\n    table.sort(out, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return out\nend\nassert(get_row({{1,\
    \ 2, 3}, {7, 8, 9}, {7, 8, 9}}, 7) == {{2, 1}, {3, 1}})\nassert(get_row({{1, 2,\
    \ 3}, {7, 8, 9}, {1, 2, 3}}, 1) == {{1, 1}, {3, 1}})\nassert(get_row({{1, 2, 3},\
    \ {4, 5, 6}, {7, 8, 9}}, 5) == {{2, 2}})\nassert(get_row({{1, 2, 3}, {4, 5, 6},\
    \ {7, 8, 9}}, 10) == {})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 2)\
    \ == {{1, 2}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) == {{1, 3}})\n\
    assert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 4) == {{2, 1}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 6}, {7, 8, 9}}, 6) == {{2, 3}})\nassert(get_row({{1, 2, 3}, {4,\
    \ 5, 6}, {7, 8, 9}}, 7) == {{3, 1}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7,\
    \ 8, 9", "    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if\
    \ lst[i][j] == x then\n                coroutine.yield(i, j)\n            end\n\
    \        end\n    end\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(res, { i - 1, j - 1 })\n            end\n        end\n\
    \    end\n    table.sort(res, function(a, b)\n        if a[1] ~= b[1] then\n \
    \           return a[1] < b[1]\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return res\nend", "\tlocal res = {}\n\tfor i, row\
    \ in ipairs(lst) do\n\t\tfor j, val in ipairs(row) do\n\t\t\tif val == x then\n\
    \t\t\t\ttable.insert(res, {i - 1, #row - j})\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ res\nend", "    -- your code here\nend", "  local res = {}\n  for i = 1, #lst\
    \ do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(res,\
    \ {i, j})\n      end\n    end\n  end\n  table.sort(res, function(a, b) return\
    \ a[1] == b[1] and a[2] > b[2] or a[1] < b[1] end)\n  return res\nend", "  local\
    \ row = {}\n  for i, v in ipairs(lst) do\n    for j, w in ipairs(v) do\n     \
    \ if w == x then table.insert(row, {i, j}) end\n    end\n  end\n  table.sort(row,\
    \ function(a, b)\n    if a[1] == b[1] then return a[2] > b[2] end\n    return\
    \ a[1] < b[1]\n  end)\n  return row\nend", "    local result = {}\n    for i =\
    \ 1, #lst do\n        local lst_i = lst[i]\n        for j = 1, #lst_i do\n   \
    \         if lst_i[j] == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result,\n   \
    \     function(a, b)\n            if a[1] < b[1] then\n                return\
    \ true\n            elseif a[1] > b[1] then\n                return false\n  \
    \          else\n                return a[2] > b[2]\n            end\n       \
    \ end\n    )\n    return result\nend", "\tlocal ret = {}\n\tfor y, row in ipairs(lst)\
    \ do\n\t\tfor j, cell in ipairs(row) do\n\t\t\tif cell == x then\n\t\t\t\ttable.insert(ret,\
    \ {x = j - 1, y = y - 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\nend", "\t\
    local res = {}\n\tfor i, sublst in ipairs(lst) do\n\t\tfor j, elem in ipairs(sublst)\
    \ do\n\t\t\tif elem == x then\n\t\t\t\tres[#res + 1] = {i - 1, j - 1}\n\t\t\t\
    end\n\t\tend\n\tend\n\tlocal function subcmp(c1, c2)\n\t\treturn c1[1] < c2[1]\
    \ or (c1[1] == c2[1] and c1[2] > c2[2])\n\tend\n\ttable.sort(res, subcmp)\n\t\
    return res\nend", "\tlocal res = {}\n\tfor row, line in ipairs(lst) do\n\t\tfor\
    \ col, value in ipairs(line) do\n\t\t\tif value == x then\n\t\t\t\ttable.insert(res,\
    \ { row - 1, col - 1 })\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ row = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                table.insert(row, {lst[i][j], i, j})\n\
    \            end\n        end\n    end\n    return row\nend", "    local coord_lst\
    \ = {}\n    local coord_lst_in_row = {}\n    for i, lst_in_lst in ipairs(lst)\
    \ do\n        for j, x1 in ipairs(lst_in_lst) do\n            if x1 == x then\n\
    \                table.insert(coord_lst_in_row, j)\n            end\n        end\n\
    \        if #coord_lst_in_row > 0 then\n            local row = {}\n         \
    \   for _, coord in ipairs(coord_lst_in_row) do\n                table.insert(row,\
    \ {i, coord})\n            end\n            table.insert(coord_lst, row)\n   \
    \     end\n        coord_lst_in_row = {}\n    end\n    table.sort(coord_lst, function(a,\
    \ b)\n        return a[1][1] < b[1][1] or (a[1][1] == b[1][1] and a[1][2] > b[1][2])\n\
    \    end)\n    return coord_lst\nend\nassert(get_row({{1, 2, 1}, {1}, {1, 1, 1}},\
    \ 1) ==\n        {{{1, 1}, {1, 2}, {1, 3}}, {{2, 1}}, {{3, 1}, {3, 2}, {3, 3}}})\n\
    assert(get_row({{1, 2, 1}, {1}, {1, 1, 1}}, 2) == {{{1, 2}}})\nassert(get_row({{1,\
    \ 2, 1}, {1}, {1, 1, 1}}, 3) == {})\nassert(get_row({{1}, {1, 2}, {1, 2, 1}},\
    \ 2) == {{{2, 2}, {2, 1}}, {{3, 2}, {3, 1}}})\nassert(get_row({{1}, {1, 2}, {1,\
    \ 2, 1}}, 3) == {})\nassert(get_row({{1, 2, 1}, {1}, {1, 1, 1}}, 0) == {})\nassert(get_row({{}},\
    \ 1) == {})", "\tlocal res = {}\n\tfor k, row in ipairs(lst) do\n\t\tfor k1, v\
    \ in ipairs(row) do\n\t\t\tif v == x then\n\t\t\t\ttable.insert(res, {k, k1})\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "  local row = 0\n  local i = 0\n\
    \  local res = {}\n  while lst[i + 1] do\n    local r = 0\n    for j, v in ipairs(lst[i\
    \ + 1]) do\n      if v == x then\n        res[#res + 1] = {row, r}\n      end\n\
    \      r = r + 1\n    end\n    row = row + 1\n    i = i + 1\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend", "\tfor i, v in\
    \ ipairs(lst) do\n\t\tfor j, w in ipairs(v) do\n\t\t\tif w == x then\n\t\t\t\t\
    return i\n\t\t\tend\n\t\tend\n\tend\nend", "    local function aux(lst, i, res)\n\
    \        if #lst == 0 then return res end\n        local row = lst[1]\n      \
    \  local new_res = {}\n        for j = 1, #row do\n            if row[j] == x\
    \ then\n                new_res[#new_res + 1] = {i, j}\n            end\n    \
    \    end\n        return aux(list.tail(lst), i + 1, list.append(res, new_res))\n\
    \    end\n    return aux(lst, 0, {})\nend", "    return function (x1, y1)\n  \
    \      return function (x2, y2)\n            return y1[1] < y2[1]\n        end\n\
    \    end\nend", "    local lst1 = {}\n    for i, v in ipairs(lst) do\n       \
    \ for j, e in ipairs(v) do\n            if e == x then\n                lst1[#lst1\
    \ + 1] = {i - 1, j - 1}\n            end\n        end\n    end\n    return lst1\n\
    end", "    local ret = {}\n    for y, val in ipairs(lst) do\n        for x1, val1\
    \ in ipairs(val) do\n            if val1 == x then\n                table.insert(ret,\
    \ {x1 - 1, y - 1})\n            end\n        end\n    end\n    return ret\nend",
  "\tlocal res = {}\n\tfor y, r in ipairs(lst) do\n\t\tfor x_, v in ipairs(r) do\n\
    \t\t\tif v == x then\n\t\t\t\ttable.insert(res, { y, x_ })\n\t\t\tend\n\t\tend\n\
    \tend\n\ttable.sort(res, function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn\
    \ a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\n\
    end\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}}, 4) == {{2, 1}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 6}, {7, 8}}, 7) == {{3, 1}})\nassert(get_row({{1, 2, 3}, {4, 5,\
    \ 6}, {7, 8}}, 8) == {{3, 2}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}},\
    \ 1) == {{1, 1}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}}, 2) == {{1, 2}})\n\
    assert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}}, 3) == {{1, 3}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 6}, {7, 8}}, 5) == {{2, 2}})\nassert(get_row({{1, 2, 3}, {4, 5,\
    \ 6}, {7, 8}}, 6) == {{2, 3}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}},\
    \ 8) == {{3, 2}})\nassert(get_row({{1, 2, 3}, {4, 5, 6}, {7, 8}}, 9) == {})\n\
    assert(get_row({{1", "    local all_coordinates = {}\n    for i = 1, #lst do\n\
    \        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n         \
    \       all_coordinates[#all_coordinates + 1] = {i - 1, j - 1}\n            end\n\
    \        end\n    end\n    table.sort(all_coordinates, function(a, b)\n      \
    \  if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n      \
    \      return a[1] < b[1]\n        end\n    end)\n    return all_coordinates\n\
    end", "\tlocal ret = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, item in ipairs(row)\
    \ do\n\t\t\tif item == x then\n\t\t\t\ttable.insert(ret, {row = i - 1, col = j\
    \ - 1})\n\t\t\tend\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\tif a.row\
    \ == b.row then\n\t\t\treturn a.col > b.col\n\t\telse\n\t\t\treturn a.row < b.row\n\
    \t\tend\n\tend\n\ttable.sort(ret, compare)\n\treturn ret\nend\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 1) == {{row = 0, col = 0}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 5) == {{row = 1, col = 1}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 6) == {{row = 2, col = 0}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 2) == {{row = 0, col = 1}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 8) == {{row = 2, col = 2}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 4) == {{row = 1, col = 0}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5}, {6, 7, 8}}, 0) == {})\nassert(get_row({{1, 2, 3}, {4, 5}, {6,\
    \ 7, 8}}, 10) == {})\nassert(get_row({{1, 2, 3}, {4, 5}, {6, 7, 8}}, 3) == {{row\
    \ = 0, col = 2}})\nassert(get_row({{1, 2, 3}, {4", "    local result = {}\n  \
    \  for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n        \
    \    if v == x then\n                result[#result + 1] = { i, j }\n        \
    \    end\n        end\n    end\n    return result\nend", "  for r, row in ipairs(lst)\
    \ do\n    for c, v in ipairs(row) do\n      if v == x then\n        return r\n\
    \      end\n    end\n  end\nend", "    local row = 0\n    for _, lst1 in ipairs(lst)\
    \ do\n        for i, lst2 in ipairs(lst1) do\n            if lst2 == x then\n\
    \                return { x = i - 1, y = row }\n            end\n        end\n\
    \        row = row + 1\n    end\nend", "    local r = {}\n    for i = 1, #lst\
    \ do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n    \
    \            r[#r + 1] = {i, j}\n            end\n        end\n    end\n    return\
    \ r\nend", "  local res = {}\n  for row_idx, row in ipairs(lst) do\n    for col_idx,\
    \ val in ipairs(row) do\n      if val == x then\n        table.insert(res, {row_idx\
    \ - 1, col_idx - 1})\n      end\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i, j})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return\
    \ res\nend", "    local result = {}\n    for row, y in ipairs(lst) do\n      \
    \  for column, val in ipairs(y) do\n            if val == x then\n           \
    \     table.insert(result, {row, column})\n            end\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for y = 1, #lst do\n    for\
    \ x_ = 1, #lst[y] do\n      if lst[y][x_] == x then result[#result + 1] = {y,\
    \ x_} end\n    end\n  end\n  return result\nend", "\tlocal coord = {}\n\tfor i,row\
    \ in ipairs(lst) do\n\t\tfor j, v in ipairs(row) do\n\t\t\tif v == x then table.insert(coord,\
    \ {i, j}) end\n\t\tend\n\tend\n\treturn coord\nend", "    local ret = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(ret, {i, j})\n            end\n    \
    \    end\n    end\n    return ret\nend", "    local result = {}\n    for i = 1,\
    \ #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(result, {lst[i][j], i, j})\n            end\n  \
    \      end\n    end\n    return result\nend", "  local res = {}\n  for row_index,\
    \ row in ipairs(lst) do\n    for col_index, value in ipairs(row) do\n      if\
    \ value == x then\n        table.insert(res, {row_index, col_index})\n      end\n\
    \    end\n  end\n  return res\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, item in ipairs(row) do\n            if item == x then\n \
    \               res[#res + 1] = {i - 1, j - 1}\n            end\n        end\n\
    \    end\n    return res\nend", "\tlocal row = 0\n\tfor i, col in ipairs(lst)\
    \ do\n\t\tif x == col then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn row\nend",
  "    local res = {}\n    for i, v in ipairs(lst) do\n        for j, n in ipairs(v)\
    \ do\n            if n == x then\n                table.insert(res, {i - 1, j\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return res\nend",
  "    local l = {}\n    for ri, row in ipairs(lst) do\n        for ci, column in\
    \ ipairs(row) do\n            if column == x then\n                table.insert(l,\
    \ {row=ri, column=ci})\n            end\n        end\n    end\n    return l\n\
    end", "  local lst_x, lst_y = {}, {}\n  for i = 1, #lst do\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(lst_x, x)\n        table.insert(lst_y,\
    \ i)\n      end\n    end\n  end\n  return lst_x, lst_y\nend", "\tlocal res = {}\n\
    \tfor i,l in ipairs(lst) do\n\t\tfor j,e in ipairs(l) do\n\t\t\tif e == x then\n\
    \t\t\t\ttable.insert(res, {i-1, j-1})\n\t\t\tend\n\t\tend\n\tend\n\treturn res\n\
    end", "    local t = {}\n    for i, row in ipairs(lst) do\n        for j, elem\
    \ in ipairs(row) do\n            if elem == x then\n                table.insert(t,\
    \ {i, j})\n            end\n        end\n    end\n    return t\nend", "  local\
    \ indxs = {}\n  for i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n\
    \      if val == x then\n        table.insert(indxs, {i, j})\n      end\n    end\n\
    \  end\n  return indxs\nend", "    for i, row in ipairs(lst) do\n        for j,\
    \ v in ipairs(row) do\n            if v == x then\n                return {i -\
    \ 1, j - 1}\n            end\n        end\n    end\nend", "    local result =\
    \ {}\n    for y = 1, #lst do\n        for z = 1, #lst[y] do\n            if lst[y][z]\
    \ == x then\n                table.insert(result, { y, z })\n            end\n\
    \        end\n    end\n    return result\nend", "  local t = {}\n  for i,v in\
    \ ipairs(lst) do\n    for j,e in ipairs(v) do\n      if e == x then\n        table.insert(t,\
    \ {i-1,j-1})\n      end\n    end\n  end\n  return t\nend", "  local row_coord\
    \ = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    for j = 1, #row do\n\
    \      if row[j] == x then\n        table.insert(row_coord, {i, j})\n      end\n\
    \    end\n  end\n  return row_coord\nend", "  local result = {}\n  for r, row\
    \ in ipairs(lst) do\n    for c, e in ipairs(row) do\n      if e == x then\n  \
    \      table.insert(result, {r, c})\n      end\n    end\n  end\n  return result\n\
    end", "  local row = {}\n  for i,v in ipairs(lst) do\n    for j,k in ipairs(v)\
    \ do\n      if k == x then\n        row[#row+1] = {i-1, j-1}\n      end\n    end\n\
    \  end\n  table.sort(row, function(a,b) return a[1] < b[1] end)\n  for i,v in\
    \ ipairs(row) do\n    table.sort(v, function(a,b) return a > b end)\n  end\n \
    \ return row\nend", "  return coroutine.wrap(function()\n    for i = 1, #lst do\n\
    \      local row = lst[i]\n      for j = 1, #row do\n        if row[j] == x then\n\
    \          coroutine.yield({i, j})\n        end\n      end\n    end\n  end)\n\
    end", "    local result = {}\n    for y, row in ipairs(lst) do\n        for z,\
    \ val in ipairs(row) do\n            if val == x then table.insert(result, {y\
    \ - 1, z - 1}) end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then return a[2] > b[2] end\n        return a[1] < b[1]\n\
    \    end)\n    return result\nend", "    local res = {}\n    for y, row in ipairs(lst)\
    \ do\n        for z, e in ipairs(row) do\n            if e == x then\n       \
    \         table.insert(res, {y, z})\n            end\n        end\n    end\n \
    \   table.sort(res, function(a, b)\n        if a[1] == b[1] then\n           \
    \ return a[2] > b[2]\n        else\n            return a[1] < b[1]\n        end\n\
    \    end)\n    return res\nend", "    local xs = {}\n    for row, lst1 in ipairs(lst)\
    \ do\n        for col, y in ipairs(lst1) do\n            if y == x then\n    \
    \            table.insert(xs, {row, col})\n            end\n        end\n    end\n\
    \    return xs\nend", "    local res = {}\n    for r, rval in ipairs(lst) do\n\
    \        for c, cval in ipairs(rval) do\n            if cval == x then\n     \
    \           res[#res + 1] = {r, c}\n            end\n        end\n    end\n  \
    \  table.sort(res, function(a, b)\n        if a[1] < b[1] then\n            return\
    \ true\n        elseif a[1] > b[1] then\n            return false\n        else\n\
    \            return a[2] > b[2]\n        end\n    end)\n    return res\nend",
  "    local result = {}\n    for y1, row in ipairs(lst) do\n        for x1, item\
    \ in ipairs(row) do\n            if item == x then\n                table.insert(result,\
    \ {y1, x1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] < b[1] then\n            return true\n        elseif a[1]\
    \ > b[1] then\n            return false\n        else\n            return a[2]\
    \ > b[2]\n        end\n    end)\n    return result\nend", "    local result =\
    \ {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i, j})\n            end\n \
    \       end\n    end\n    return result\nend", "  local m = #lst\n  local n =\
    \ #lst[1]\n  local res = {}\n  for i = 1, m do\n    for j = 1, n do\n      if\
    \ lst[i][j] == x then\n        res[#res + 1] = {i - 1, j - 1}\n      end\n   \
    \ end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n   \
    \   return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend", "    local result = {}\n    for i = 1, #lst do\n        for\
    \ j = 1, #lst[i] do\n            if lst[i][j] == x then\n                result[#result\
    \ + 1] = {i - 1, lst[i][j]}\n            end\n        end\n    end\n    return\
    \ result\nend", "    local y = {}\n    for i = 1, #lst do\n        for j = 1,\
    \ #lst[i] do\n            if lst[i][j] == x then\n                table.insert(y,\
    \ i, {j, i})\n            end\n        end\n    end\n    table.sort(y, function(a,\
    \ b) return a[1] < b[1] end)\n    for k = 1, #y do\n        local z = {y[k][2],\
    \ y[k][1]}\n        y[k] = z\n    end\n    return y\nend", "    -- your code here\n\
    end", "  local result = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(result, {i, j})\n      end\n\
    \    end\n  end\n  return result\nend", "\tlocal res = {}\n\tfor y, row in ipairs(lst)\
    \ do\n\t\tfor x2, v in ipairs(row) do\n\t\t\tif v == x then\n\t\t\t\ttable.insert(res,\
    \ {y, x2})\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "    local result =\
    \ {}\n    for y, row in ipairs(lst) do\n        for i, v in ipairs(row) do\n \
    \           if v == x then\n                table.insert(result, {x = i, y = y})\n\
    \            end\n        end\n    end\n    return result\nend", "    local res\
    \ = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if\
    \ lst[i][j] == x then\n                res[#res + 1] = {i, j}\n            end\n\
    \        end\n    end\n    return res\nend", "  local result = {}\n  for y, row\
    \ in ipairs(lst) do\n    for x1, column in ipairs(row) do\n      if x == column\
    \ then\n        result[#result + 1] = {y, x1}\n      end\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for i, row in ipairs(lst) do\n   \
    \     local idx = find(row, x)\n        if idx then\n            result[#result\
    \ + 1] = {idx, i - 1}\n        end\n    end\n    return result\nend", "\tlocal\
    \ res = {}\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j]\
    \ == x then\n\t\t\t\ttable.insert(res, {i, j})\n\t\t\tend\n\t\tend\n\tend\n\t\
    return res\nend", "  local row = {}\n  for i = 1, #lst do\n    local subrow =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        subrow[#subrow\
    \ + 1] = {x=j, y=i}\n      end\n    end\n    if #subrow > 0 then\n      table.sort(subrow,\
    \ function(a, b) return a.x > b.x end)\n      for _, v in ipairs(subrow) do\n\
    \        row[#row + 1] = v\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a.y < b.y end)\n  return row\nend", "  -- insert your code here\n\
    end", "  local ret = {}\n  for r=1, #lst do\n    local row = lst[r]\n    for c=1,\
    \ #row do\n      if row[c] == x then\n        ret[#ret+1] = {r, c}\n      end\n\
    \    end\n  end\n  return ret\nend", "  local result = {}\n  for i = 1, #lst do\n\
    \    local row = lst[i]\n    for j = 1, #row do\n      if row[j] == x then\n \
    \       result[#result + 1] = {i, j}\n      end\n    end\n  end\n  return result\n\
    end", "    local res = {}\n    for y, row in ipairs(lst) do\n        for z, col\
    \ in ipairs(row) do\n            if col == x then\n                res[#res +\
    \ 1] = { y - 1, z - 1 }\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return res\nend", "    local\
    \ res = {}\n    for y, row in ipairs(lst) do\n        for i, v in ipairs(row)\
    \ do\n            if v == x then\n                table.insert(res, {y - 1, i\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n\
    \    return res\nend\nassert(get_row({{10, 20, 40}, {40, 40}, {10, 20, 40, 40,\
    \ 40}}, 40) == {{1, 2}, {2, 1}, {2, 2}, {2, 3}, {3, 2}, {3, 3}, {3, 4}, {3, 5}})\n\
    assert(get_row({{10, 20, 40}, {40, 40}, {10, 20, 40, 40, 40}}, 20) == {{0, 1},\
    \ {2, 1}})\nassert(get_row({{10, 20, 40}, {40, 40}, {10, 20, 40, 40, 40}}, 10)\
    \ == {{0, 0}, {2, 0}})\nassert(get_row({{10, 20, 40}, {40, 40}, {10, 20, 40, 40,\
    \ 40}}, 30) == {})\nassert(get_row({{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10,", "\tlocal result = {}\n\tlocal function row(y, idx)\n\t\tfor i\
    \ = 1, #y do\n\t\t\tif y[i] == x then\n\t\t\t\tresult[#result + 1] = {y = idx,\
    \ x = i - 1}\n\t\t\tend\n\t\tend\n\tend\n\tfor idx, y in ipairs(lst) do\n\t\t\
    row(y, idx - 1)\n\tend\n\ttable.sort(result, function(a, b)\n\t\tif a.y == b.y\
    \ then\n\t\t\treturn a.x > b.x\n\t\telse\n\t\t\treturn a.y < b.y\n\t\tend\n\t\
    end)\n\treturn result\nend\nassert(get_row({{1, 2, 3}, {4, 5, 1}, {2, 3, 4}},\
    \ 1) == {{y = 0, x = 0}, {y = 1, x = 2}, {y = 2, x = 1}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 1}, {2, 3, 4}}, 2) == {{y = 0, x = 1}, {y = 2, x = 0}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 1}, {2, 3, 4}}, 3) == {{y = 0, x = 2}, {y = 2, x = 2}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 1}, {2, 3, 4}}, 4) == {{y = 1, x = 0}, {y = 2, x = 3}})\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 1}, {2, 3, 4}}, 5) == {{y = 1, x = 1}})\nassert(get_row({{1, 2,\
    \ 3}, {4, 5, 1}, {2, 3, 4}}, 10) == {})", "\tif lst == nil then return nil end\n\
    \tlocal res = {}\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j]\
    \ == x then\n\t\t\t\tres[#res + 1] = {i - 1, lst[i][j]}\n\t\t\tend\n\t\tend\n\t\
    end\n\ttable.sort(res, function(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn\
    \ a[1] < b[1]\n\t\telse\n\t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn res\n\
    end", "  local res = {}\n  for i, v in ipairs(lst) do\n    local row_idx = i\n\
    \    for j, v2 in ipairs(v) do\n      if v2 == x then\n        table.insert(res,\
    \ {row_idx, j})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  return res\nend", "  local result = {}\n  for i,\
    \ line in ipairs(lst) do\n    for j, cell in ipairs(line) do\n      if cell ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  return result\nend", "  local res = {}\n  for i = 1, #lst do\n    for\
    \ j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(res, {i,j})\n\
    \      end\n    end\n  end\n  table.sort(res, function(a,b) return a[1] < b[1]\
    \ end)\n  for i = 1, #res do\n    table.sort(res[i], function(a,b) return a >\
    \ b end)\n  end\n  return res\nend", "  local row = {}\n  for i, y in ipairs(lst)\
    \ do\n    if y == x then\n      table.insert(row, i)\n    end\n  end\n  return\
    \ row\nend", "  local res = {}\n  for j = 1, #lst do\n    local row = lst[j]\n\
    \    for i = 1, #row do\n      if row[i] == x then\n        res[#res + 1] = {\
    \ i - 1, j - 1 }\n      end\n    end\n  end\n  return res\nend", "    local res\
    \ = {}\n    for k, v in ipairs(lst) do\n        for k1, v1 in ipairs(v) do\n \
    \           if v1 == x then\n                table.insert(res, {k, k1})\n    \
    \        end\n        end\n    end\n    return res\nend", "  local x_pos = {}\n\
    \  for i, v in ipairs(lst) do\n    for j, w in ipairs(v) do\n      if w == x then\n\
    \        table.insert(x_pos, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(x_pos,\
    \ function(a, b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] > b[2]\n    end\n  end)\n  return x_pos\nend", "\tlocal row\
    \ = {}\n\tfor y, v in ipairs(lst) do\n\t\tfor z, w in ipairs(v) do\n\t\t\tif w\
    \ == x then\n\t\t\t\ttable.insert(row, {y, z})\n\t\t\tend\n\t\tend\n\tend\n\t\
    return row\nend", "\tlocal row = {}\n\tfor i, sub in ipairs(lst) do\n\t\tfor j,\
    \ v in ipairs(sub) do\n\t\t\tif v == x then\n\t\t\t\ttable.insert(row, {i - 1,\
    \ j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(row, function(a, b)\n\t\tif\
    \ a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\
    \t\tend\n\tend)\n\treturn row\nend", "    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, v in ipairs(row) do\n            if v == x then table.insert(res,\
    \ {i - 1, j - 1}) end\n        end\n    end\n    table.sort(res, function(x, y)\
    \ return x[1] < y[1] or (x[1] == y[1] and x[2] > y[2]) end)\n    return res\n\
    end", "  local r = {}\n  for i, e in ipairs(lst) do\n    for j, v in ipairs(e)\
    \ do\n      if v == x then\n        table.insert(r, {i - 1, #e - j})\n      end\n\
    \    end\n  end\n  table.sort(r, function(a, b) return a[1] < b[1] or a[1] ==\
    \ b[1] and a[2] > b[2] end)\n  return r\nend", "  local result = {}\n  for r,\
    \ l in ipairs(lst) do\n    for c, v in ipairs(l) do\n      if v == x then\n  \
    \      table.insert(result, {r, c})\n      end\n    end\n  end\n  table.sort(result,\n\
    \    function(a, b)\n      if a[1] == b[1] then\n        return a[2] > b[2]\n\
    \      else\n        return a[1] < b[1]\n      end\n    end\n  )\n  return result\n\
    end", "    for i, j in ipairs(lst) do\n        for k, v in ipairs(j) do\n    \
    \        if v == x then\n                return i\n            end\n        end\n\
    \    end\nend", "    local res = {}\n    for y, row in ipairs(lst) do\n      \
    \  for x1, el in ipairs(row) do\n            if el == x then\n               \
    \ table.insert(res, {x1 - 1, y - 1})\n            end\n        end\n    end\n\
    \    table.sort(res, function(p1, p2)\n        if p1[2] == p2[2] then\n      \
    \      return p1[1] > p2[1]\n        else\n            return p1[2] < p2[2]\n\
    \        end\n    end)\n    return res\nend", "  local lst2 = {}\n  for r, row\
    \ in ipairs(lst) do\n    for c, v in ipairs(row) do\n      if v == x then\n  \
    \      lst2[#lst2 + 1] = {r, c}\n      end\n    end\n  end\n  return lst2\nend",
  "  local res = {}\n  for row_idx, row in ipairs(lst) do\n    for col_idx, item in\
    \ ipairs(row) do\n      if item == x then res[#res+1] = {row_idx, col_idx} end\n\
    \    end\n  end\n  return res\nend", "  for i, r in ipairs(lst) do\n    for j,\
    \ v in ipairs(r) do\n      if v == x then\n        return i, j\n      end\n  \
    \  end\n  end\nend", "    local t = {}\n    for i, row in ipairs(lst) do\n   \
    \     for j, v in ipairs(row) do\n            if v == x then\n               \
    \ t[#t + 1] = {i - 1, j - 1}\n            end\n        end\n    end\n    return\
    \ t\nend", "    local lst = lst\n    local res = {}\n    for i, row in ipairs(lst)\
    \ do\n        for j, val in ipairs(row) do\n            if val == x then\n   \
    \             table.insert(res, {i,j})\n            end\n        end\n    end\n\
    \    return res\nend", "  local row_tuples = {}\n  for y = 1, #lst do\n    local\
    \ row = lst[y]\n    for z = 1, #row do\n      if row[z] == x then\n        table.insert(row_tuples,\
    \ {y, z})\n      end\n    end\n  end\n  table.sort(row_tuples, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  return row_tuples\nend", "  local r = {}\n  for y,\
    \ v in ipairs(lst) do\n    for z, v2 in ipairs(v) do\n      if v2 == x then\n\
    \        table.insert(r, {y, z})\n      end\n    end\n  end\n  return r\nend",
  "    local function find_index(lst, x)\n        for i,v in ipairs(lst) do\n    \
    \        if v == x then\n                return i\n            end\n        end\n\
    \    end\n    local function is_list(lst)\n        return type(lst) == 'table'\n\
    \    end\n    local res = {}\n    for i,l in ipairs(lst) do\n        local index\
    \ = find_index(l, x)\n        if index then\n            table.insert(res, {[1]\
    \ = i - 1, [2] = - index})\n        end\n    end\n    table.sort(res, function(x,\
    \ y)\n        if x[1] ~= y[1] then\n            return x[1] < y[1]\n        else\n\
    \            return x[2] > y[2]\n        end\n    end)\n    return res\nend",
  "\tif not x then return nil end\n\tlocal rows = {}\n\tfor y,row in ipairs(lst) do\n\
    \t\tfor z,entry in ipairs(row) do\n\t\t\tif entry == x then\n\t\t\t\ttable.insert(rows,\
    \ {y, z})\n\t\t\tend\n\t\tend\n\tend\n\tif #rows == 0 then return nil end\n\t\
    table.sort(rows, function(a,b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] >\
    \ b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn rows\nend",
  "  local res = {}\n  for i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n\
    \      if v2 == x then\n        res[#res + 1] = { i - 1, j - 1 }\n      end\n\
    \    end\n  end\n  return res\nend", "\tlocal res = {}\n\tfor i, row in ipairs(lst)\
    \ do\n\t\tfor j, val in ipairs(row) do\n\t\t\tif val == x then\n\t\t\t\ttable.insert(res,\
    \ {i, j})\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "\treturn x.row\nend",
  "    local row = {}\n    for i, l in ipairs(lst) do\n        for j, k in ipairs(l)\
    \ do\n            if k == x then\n                row[#row + 1] = {i - 1, j -\
    \ 1}\n            end\n        end\n    end\n    return row\nend", "  local result\
    \ = {}\n  for k, sublist in ipairs(lst) do\n    for k2, v in ipairs(sublist) do\n\
    \      if v == x then\n        table.insert(result, {k, k2})\n      end\n    end\n\
    \  end\n  return result\nend", "  local coordinates = {}\n  local row_coordinates\
    \ = {}\n  for i = 1, #lst do\n    local row = lst[i]\n    row_coordinates = {}\n\
    \    for j = 1, #row do\n      if row[j] == x then\n        table.insert(row_coordinates,\
    \ {[0] = i, [1] = j})\n      end\n    end\n    row_coordinates = table.sort(row_coordinates,\n\
    \                                 function(a, b) return a[1] > b[1] end)\n   \
    \ table.insert(coordinates, row_coordinates)\n  end\n  return coordinates\nend",
  "    local res = {}\n    for y = 1, #lst do\n        for x2 = 1, #lst[y] do\n  \
    \          if lst[y][x2] == x then\n                res[#res + 1] = {y, x2}\n\
    \            end\n        end\n    end\n    return res\nend", "  local row = 0\n\
    \  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        row = row + 1\n      end\n    end\n  end\n  return row\nend", "    local\
    \ tuples = {}\n    for i, j in ipairs(lst) do\n        for k, v in ipairs(j) do\n\
    \            if v == x then\n                table.insert(tuples, {i - 1, j[#j]\
    \ - k})\n            end\n        end\n    end\n    table.sort(tuples, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return tuples\nend",
  "    local function find_x(lst, x)\n        local function find_x_in_row(row, x)\n\
    \            for j = 1, #row do\n                if row[j] == x then\n       \
    \             return true\n                end\n            end\n            return\
    \ false\n        end\n        local result = {}\n        for i = 1, #lst do\n\
    \            if find_x_in_row(lst[i], x) then\n                result[#result\
    \ + 1] = {i, lst[i]}\n            end\n        end\n        return result\n  \
    \  end\n    local function sort_row(result)\n        local function sort_row_column(row)\n\
    \            local function get_val(row)\n                local val = {}\n   \
    \             for j = 1, #row[2] do\n                    if row[2][j] == x then\n\
    \                        val[#val + 1] = j\n                    end\n        \
    \        end\n                return val\n            end\n            local val\
    \ = get_val(row)\n            local pos = {}\n            for j = 1, #val do\n\
    \                for k = 1, #row[2] do\n                    if row[2][k] == x\
    \ then\n                        pos[#pos + 1] = k\n                    end\n \
    \               end\n            end\n            return {val, pos}\n        end\n\
    \        local function merge_row(row)\n            local val = {}\n         \
    \   for j = 1, #row[1] do\n                val[#val + 1] = {row[1][j], row[2][j]}\n\
    \            end\n            return val\n        end\n        local row = {}\n\
    \        for i = 1, #result do\n            row[#row + 1] = {result[i][1], sort_row_column(result[i])}\n\
    \        end\n        local sorted_row = {}\n        for i = 1, #row do\n    \
    \        sorted_row[#sorted_row + 1] = merge_row(row[i][2])\n        end\n   \
    \     return sorted_row\n    end\n    local function sort_row_row(result)\n  \
    \      local row = {}\n        for i = 1, #result do\n            row[#row + 1]\
    \ = {result[i][1],", "  local result = {}\n  for y,row in ipairs(lst) do\n   \
    \ for x1, val in ipairs(row) do\n      if x == val then\n        table.insert(result,\
    \ {y, x1})\n      end\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for i, v in ipairs(lst) do\n        for j, u in ipairs(v) do\n   \
    \         if u == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    assert(get_row({{1, 2, 3}, {4, 5, 6}}, 5) == {{1, 1}}, '1')\nassert(get_row({{1,\
    \ 3, 5}, {3, 2, 1}, {2, 1, 3}}, 2) == {{0, 1}, {2, 1}}, '2')\nassert(get_row({{1,\
    \ 3, 5}, {3, 2, 1}, {2, 1, 3}}, 3) == {{0, 0}, {1, 2}, {2, 2}}, '3')\nassert(get_row({{1,\
    \ 2, 3}, {4, 5, 6}}, 4) == {{0, 1}}, '4')\nassert(get_row({{1, 2, 3}, {4, 5, 6}},\
    \ 9) == {}, '5')", "\tlocal ret = {}\n\tfor i, v in ipairs(lst) do\n\t\tfor j,\
    \ val in ipairs(v) do\n\t\t\tif val == x then\n\t\t\t\ttable.insert(ret, { i -\
    \ 1, j - 1 })\n\t\t\tend\n\t\tend\n\tend\n\tlocal function sort_by_row(a, b)\n\
    \t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1]\
    \ < b[1]\n\t\tend\n\tend\n\ttable.sort(ret, sort_by_row)\n\treturn ret\nend",
  "  local row = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        row[#row + 1] = { i - 1, j - 1 }\n      end\n    end\n  end\n\
    \  return row\nend", "    local tuples = {}\n    for y, row in ipairs(lst) do\n\
    \        for z, col in ipairs(row) do\n            if col == x then\n        \
    \        tuples[#tuples + 1] = { y - 1, z - 1 }\n            end\n        end\n\
    \    end\n    return tuples\nend", "    local result = {}\n    for y, row in ipairs(lst)\
    \ do\n        for x1, cell in ipairs(row) do\n            if cell == x then\n\
    \                table.insert(result, {x1 - 1, y - 1})\n            end\n    \
    \    end\n    end\n    return result\nend", "    local t = {}\n    for i, v in\
    \ ipairs(lst) do\n        for j, x1 in ipairs(v) do\n            if x1 == x then\
    \ table.insert(t, {i, j}) end\n        end\n    end\n    return t\nend", "  local\
    \ res = {}\n  for y, row in ipairs(lst) do\n    for z, val in ipairs(row) do\n\
    \      if val == x then\n        table.insert(res, {y, z})\n      end\n    end\n\
    \  end\n  return res\nend", "    local found = {}\n    for i = 1, #lst do\n  \
    \      local row = lst[i]\n        for j = 1, #row do\n            if row[j] ==\
    \ x then\n                found[#found + 1] = {i, j}\n            end\n      \
    \  end\n    end\n    return found\nend", "  local result = {}\n  for i, sublst\
    \ in ipairs(lst) do\n    for j, y in ipairs(sublst) do\n      if x == y then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n \
    \ end)\n  return result\nend", "  local coords = {}\n  for i = 1, #lst do\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        coords[#coords\
    \ + 1] = {i, j}\n      end\n    end\n  end\n  return coords\nend", "  local res\
    \ = {}\n  for k, v in ipairs(lst) do\n    local a = {}\n    for i, v in ipairs(v)\
    \ do\n      if v == x then\n        table.insert(a, i)\n      end\n    end\n \
    \   if #a > 0 then\n      table.insert(res, {k, a})\n    end\n  end\n  return\
    \ res\nend", "  local out = {}\n  for y, row in ipairs(lst) do\n    for z, val\
    \ in ipairs(row) do\n      if val == x then\n        out[#out + 1] = {y, z}\n\
    \      end\n    end\n  end\n  return out\nend", "    local result = {}\n    for\
    \ row, row_val in ipairs(lst) do\n        for col, col_val in ipairs(row_val)\
    \ do\n            if col_val == x then\n                table.insert(result, {row\
    \ - 1, col - 1})\n            end\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for row = 1, #lst do\n        for col = 1, #lst[row]\
    \ do\n            if lst[row][col] == x then\n                table.insert(result,\
    \ {row - 1, #lst[row] - col})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n\
    \        else\n            return a[2] > b[2]\n        end\n    end)\n    return\
    \ result\nend", "  local res = {}\n  for i, row in ipairs(lst) do\n    for j,\
    \ v in ipairs(row) do\n      if v == x then\n        res[#res + 1] = {i - 1, j\
    \ - 1}\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1]\
    \ == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return res\nend", "    for i = 1, #lst do\n        for j =\
    \ 1, #lst[i] do\n            if lst[i][j] == x then\n                return {i,\
    \ j}\n            end\n        end\n    end\nend", "  local row_with_x = {}\n\
    \  for row_i, row in ipairs(lst) do\n    for col_i, cell in ipairs(row) do\n \
    \     if cell == x then\n        table.insert(row_with_x, { row_i, col_i })\n\
    \      end\n    end\n  end\n  table.sort(row_with_x, function(e1, e2)\n    if\
    \ e1[1] == e2[1] then\n      return e1[2] > e2[2]\n    else\n      return e1[1]\
    \ < e2[1]\n    end\n  end)\n  return row_with_x\nend", "  local res = {}\n  for\
    \ row_n, row in ipairs(lst) do\n    for col_n, col in ipairs(row) do\n      if\
    \ col == x then\n        table.insert(res, {row_n, col_n})\n      end\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    for y, v in ipairs(lst) do\n\
    \        for z, w in ipairs(v) do\n            if w == x then\n              \
    \  table.insert(res, {y, z})\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b) return a[1] < b[1] end)\n    for _, v in ipairs(res) do\n   \
    \     table.sort(v, function(a, b) return a > b end)\n    end\n    return res\n\
    end", "    local res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i]\
    \ do\n            if lst[i][j] == x then\n                table.insert(res, {i,\
    \ j})\n            end\n        end\n    end\n    return res\nend", "    local\
    \ res = {}\n    for y, row in ipairs(lst) do\n        for z, val in ipairs(row)\
    \ do\n            if val == x then\n                res[#res + 1] = {y, z}\n \
    \           end\n        end\n    end\n    return res\nend", "    local result\
    \ = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if\
    \ lst[i][j] == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend",
  "    local res = {}\n    for i, row in ipairs(lst) do\n        for j, val in ipairs(row)\
    \ do\n            if val == x then\n                table.insert(res, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    return res\nend", "    local\
    \ found_tuples = {}\n    for y, row in ipairs(lst) do\n        for x_col, x_val\
    \ in ipairs(row) do\n            if x_val == x then\n                found_tuples[#found_tuples\
    \ + 1] = {y, x_col}\n            end\n        end\n    end\n    table.sort(found_tuples,\
    \ function(t1, t2)\n        return t1[1] < t2[1] or t1[1] == t2[1] and t1[2] >\
    \ t2[2]\n    end)\n    return found_tuples\nend", "    local res = {}\n    for\
    \ row_idx, row in ipairs(lst) do\n        for col_idx, value in ipairs(row) do\n\
    \            if value == x then\n                res[#res + 1] = {row_idx - 1,\
    \ col_idx - 1}\n            end\n        end\n    end\n    local function sort_row(row1,\
    \ row2)\n        if row1[1] < row2[1] then\n            return true\n        elseif\
    \ row1[1] > row2[1] then\n            return false\n        else\n           \
    \ return row1[2] > row2[2]\n        end\n    end\n    table.sort(res, sort_row)\n\
    \    return res\nend", "    local found = {}\n    for i = 1, #lst do\n       \
    \ for j = 1, #lst[i] do\n            if lst[i][j] == x then\n                table.insert(found,\
    \ {i, j})\n            end\n        end\n    end\n    table.sort(found, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return found\nend",
  "  local res = {}\n  for i, row in ipairs(lst) do\n    for j, v in ipairs(row) do\n\
    \      if v == x then\n        res[#res + 1] = {i - 1, j - 1}\n      end\n   \
    \ end\n  end\n  table.sort(res, function(x, y)\n    if x[1] ~= y[1] then\n   \
    \   return x[1] < y[1]\n    else\n      return x[2] > y[2]\n    end\n  end)\n\
    \  return res\nend\nassert(get_row({\n    {1, 2, 1, 0},\n    {0, 5, 0, 4},\n \
    \   {2, 1, 3, 1}\n  }, 2) == {\n    {0, 0},\n    {2, 2}\n  })\nassert(get_row({\n\
    \    {2, 2, 1, 0},\n    {0, 5, 0, 4},\n    {2, 1, 3, 1}\n  }, 2) == {\n    {0,\
    \ 0},\n    {0, 1},\n    {2, 2}\n  })", "  local tuples = {}\n  for i = 1, #lst\
    \ do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(tuples,\
    \ {i - 1, lst[i][j]})\n      end\n    end\n  end\n  return tuples\nend", "  local\
    \ result = {}\n  for i,row in ipairs(lst) do\n    for j,v in ipairs(row) do\n\
    \      if v == x then\n        table.insert(result, {i-1, j-1})\n      end\n \
    \   end\n  end\n  return result\nend", "  local result = {}\n  for i, v in ipairs(lst)\
    \ do\n    local row = {}\n    for j, v2 in ipairs(v) do\n      if v2 == x then\
    \ table.insert(row, j) end\n    end\n    table.sort(row, function(a, b) return\
    \ a > b end)\n    for _, v2 in ipairs(row) do\n      table.insert(result, {i,\
    \ v2})\n    end\n  end\n  table.sort(result, function(a, b) return a[1] < b[1]\
    \ end)\n  return result\nend", "  local r = {}\n  for y, row in ipairs(lst) do\n\
    \    for z, v in ipairs(row) do\n      if v == x then\n        table.insert(r,\
    \ {y, z})\n      end\n    end\n  end\n  local function sort_rows(r1, r2)\n   \
    \ return r1[1] < r2[1]\n  end\n  local function sort_cols(r1, r2)\n    return\
    \ r1[2] > r2[2]\n  end\n  table.sort(r, sort_rows)\n  for _, row in ipairs(r)\
    \ do\n    table.sort(row, sort_cols)\n  end\n  return r\nend", "  for i = 1, #lst\
    \ do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        return\
    \ i\n      end\n    end\n  end\nend", "    local row, res = {}, {}\n    for i,\
    \ v in ipairs(lst) do\n        if x == v then\n            table.insert(row, i)\n\
    \        end\n    end\n    for _, v in ipairs(row) do\n        table.insert(res,\
    \ {v, table.remove(lst, v)})\n    end\n    return res\nend", "  local function\
    \ get_row_i(lst, x, row, accum)\n    for i = 1, #lst do\n      if lst[i] == x\
    \ then\n        accum[#accum + 1] = {row, i - 1}\n      end\n    end\n    return\
    \ accum\n  end\n  local function get_row_r(lst, x, row, accum)\n    if row ==\
    \ #lst then\n      return get_row_i(lst, x, row, accum)\n    else\n      return\
    \ get_row_r(lst[row + 1], x, row + 1, get_row_i(lst, x, row, accum))\n    end\n\
    \  end\n  local function comp(x, y)\n    if x[1] < y[1] then\n      return true\n\
    \    elseif x[1] == y[1] then\n      return x[2] > y[2]\n    else\n      return\
    \ false\n    end\n  end\n  return get_row_r(lst, x, 0, {}):sort(comp)\nend", "\t\
    local row, col = 0, 0\n\tfor i, v in ipairs(lst) do\n\t\tfor j, u in ipairs(v)\
    \ do\n\t\t\tif u == x then\n\t\t\t\ttable.insert(row, {i, j})\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn row\nend", "  local t = {}\n  for y, row in ipairs(lst) do\n\
    \    for x2, value in ipairs(row) do\n      if value == x then\n        table.insert(t,\
    \ {y, x2})\n      end\n    end\n  end\n  return t\nend", "\tlocal res = {}\n\t\
    for i,row in ipairs(lst) do\n\t\tfor j,v in ipairs(row) do\n\t\t\tif v == x then\n\
    \t\t\t\ttable.insert(res, {i, j})\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend",
  "\tlocal ret = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, v in ipairs(row) do\n\
    \t\t\tif v == x then\n\t\t\t\ttable.insert(ret, {i - 1, j - 1})\n\t\t\tend\n\t\
    \tend\n\tend\n\ttable.sort(ret, function(a, b)\n\t\tif a[1] < b[1] then\n\t\t\t\
    return true\n\t\telseif a[1] > b[1] then\n\t\t\treturn false\n\t\telse\n\t\t\t\
    return a[2] > b[2]\n\t\tend\n\tend)\n\treturn ret\nend", "    local res = {}\n\
    \    for y = 1, #lst do\n        for x1 = 1, #lst[y] do\n            if lst[y][x1]\
    \ == x then\n                res[#res + 1] = {y, x1}\n            end\n      \
    \  end\n    end\n    return res\nend", "    local r = 0\n    for i, elem in ipairs(lst)\
    \ do\n        for j, elem2 in ipairs(elem) do\n            if elem2 == x then\n\
    \                table.insert(r, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    return r\nend", "  local row_index, column_index = 0, 0\n  local\
    \ ret = {}\n  for _, row in ipairs(lst) do\n    column_index = 0\n    for _, column\
    \ in ipairs(row) do\n      if column == x then\n        table.insert(ret, {row_index,\
    \ column_index})\n      end\n      column_index = column_index + 1\n    end\n\
    \    row_index = row_index + 1\n  end\n  local function sort_rows(a, b)\n    return\
    \ a[1] < b[1]\n  end\n  local function sort_columns(a, b)\n    return a[2] > b[2]\n\
    \  end\n  table.sort(ret, sort_rows)\n  for _, row in ipairs(ret) do\n    table.sort(row,\
    \ sort_columns)\n  end\n  return ret\nend", "    local result = {}\n    for i,\
    \ row in ipairs(lst) do\n        local current_columns = {}\n        for j, col\
    \ in ipairs(row) do\n            if col == x then\n                current_columns[#current_columns\
    \ + 1] = j\n            end\n        end\n        if #current_columns > 0 then\n\
    \            local current_rows = {}\n            for _, col in ipairs(current_columns)\
    \ do\n                current_rows[#current_rows + 1] = {i, col}\n           \
    \ end\n            for _, item in ipairs(current_rows) do\n                result[#result\
    \ + 1] = item\n            end\n        end\n    end\n    -- Return list of tuples\
    \ (row, column), sorted by rows in ascending order.\n    -- Also, sort coordinates\
    \ of the row by columns in descending order.\n    return result\nend", "    local\
    \ row = {}\n    for y = 1, #lst do\n        if lst[y] == x then\n            table.insert(row,\
    \ y)\n        end\n    end\n    return row\nend", "    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i, j})\n            end\n \
    \       end\n    end\n    return result\nend", "\tlocal t = {}\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tfor j,w in ipairs(v) do\n\t\t\tif w == x then\n\t\t\t\ttable.insert(t,\
    \ {i, j})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(t, function(a, b)\n\t\tif a[1]\
    \ == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\
    \t\tend\n\tend)\n\treturn t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
