name: HumanEval_113_odd_count
language: lua
prompt: "-- Given a list of strings, where each string consists of only digits, return\
  \ a list.\n-- Each element i of the output should be \"the number of odd elements\
  \ in the\n-- string i of the input.\" where all the i's should be replaced by the\
  \ number\n-- of odd digits in the i'th string of the input.\nlocal function odd_count(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n\
  \    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the\
  \ str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}), {'the\
  \ number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements\
  \ 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271', '137',\
  \ '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number\
  \ of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for _, v in ipairs(lst) do\n        local c =\
    \ 0\n        for i = 1, #v do\n            if tonumber(v:sub(i, i)) % 2 == 1 then\n\
    \                c = c + 1\n            end\n        end\n        table.insert(t,\
    \ c)\n    end\n    return t\nend", "    return map(function(x) return count_odd(x)\
    \ end, lst)\nend", "  -- lst is a list of strings, each of which consists only\
    \ of digits.\n  -- Return a list where each element is the number of odd digits\
    \ in\n  -- the corresponding element of lst.\n  return transform(lst, function(s)\n\
    \    -- s is a string. Count the number of odd digits in it.\n    local count\
    \ = 0\n    for digit in s:gmatch(\"%d\") do\n      if tonumber(digit) % 2 == 1\
    \ then\n        count = count + 1\n      end\n    end\n    return count\n  end)\n\
    end", "    local out = {}\n    for _, v in ipairs(lst) do\n        local count\
    \ = 0\n        for i = 1, #v do\n            if tonumber(v:sub(i, i)) % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    table.insert(out, count)\n    end\n    return out\nend", "  local out = {}\n\
    \  for _, i in ipairs(lst) do\n    local count = 0\n    for c in i:gmatch('.')\
    \ do\n      if tonumber(c) % 2 == 1 then\n        count = count + 1\n      end\n\
    \    end\n    table.insert(out, count)\n  end\n  return out\nend", "  local lst_odd\
    \ = {}\n  for i, v in ipairs(lst) do\n    local count = 0\n    for j = 1, #v do\n\
    \      local digit = tonumber(v:sub(j, j))\n      if digit % 2 == 1 then\n   \
    \     count = count + 1\n      end\n    end\n    lst_odd[i] = count\n  end\n \
    \ return lst_odd\nend", "\tlocal n = #lst\n\tlocal res = {}\n\tfor i = 1, n do\n\
    \t\tlocal txt = lst[i]\n\t\tlocal count = 0\n\t\tfor j = 1, #txt do\n\t\t\tlocal\
    \ d = tonumber(txt:sub(j, j))\n\t\t\tif d % 2 == 1 then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tres[i] = count\n\tend\n\treturn res\nend", "\t\
    local result = {}\n\tfor _, str in ipairs(lst) do\n\t\tlocal odd_count = 0\n\t\
    \tfor digit in str:gmatch(\"%d\") do\n\t\t\todd_count = odd_count + (tonumber(digit)\
    \ % 2 == 1 and 1 or 0)\n\t\tend\n\t\ttable.insert(result, odd_count)\n\tend\n\t\
    return result\nend", "    local result = {}\n    for i = 1, #lst do\n        local\
    \ c = 0\n        for _, c1 in ipairs(lst[i]) do\n            if tonumber(c1) %\
    \ 2 == 1 then\n                c = c + 1\n            end\n        end\n     \
    \   result[i] = c\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(lst) do\n    local count = 0\n    for _, c in utf8.codes(s) do\n\
    \      local digit = tonumber(utf8.char(c))\n      if digit and digit % 2 == 1\
    \ then\n        count = count + 1\n      end\n    end\n    table.insert(result,\
    \ count)\n  end\n  return result\nend", "   local rv = {}\n   for i = 1, #lst\
    \ do\n      local v = lst[i]\n      local t = {}\n      for j = 1, #v do\n   \
    \      t[j] = tonumber(v:sub(j, j))\n      end\n      local o = 0\n      for j\
    \ = 1, #t do\n         if t[j] % 2 == 1 then\n            o = o + 1\n        \
    \ end\n      end\n      rv[i] = o\n   end\n   return rv\nend", "   local res =\
    \ {}\n   for i, n in ipairs(lst) do\n      local n_odd = 0\n      for _, c in\
    \ utf8.codes(n) do\n         if c % 2 == 1 then\n            n_odd = n_odd + 1\n\
    \         end\n      end\n      res[i] = string.format(\"the number of odd elements\
    \ in the string %d of the input.\", n_odd)\n   end\n   return res\nend", "   \
    \ return list.map(lst, function(s)\n        local count = 0\n        for c in\
    \ s:gmatch('.') do\n            if tonumber(c) % 2 == 1 then\n               \
    \ count = count + 1\n            end\n        end\n        return count\n    end)\n\
    end", "    local f = function(s)\n        local count = 0\n        for i = 1,\
    \ #s do\n            if tonumber(s:sub(i, i)) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\n \
    \   return _.map(lst, f)\nend", "    local res = {}\n    for _, s in ipairs(lst)\
    \ do\n        local cnt = 0\n        for _, c in s:gmatch('.') do\n          \
    \  if tonumber(c) % 2 == 1 then\n                cnt = cnt + 1\n            end\n\
    \        end\n        table.insert(res, cnt)\n    end\n    return res\nend", " \
    \  local function odd_count_str(str)\n      local function aux(n, i)\n       \
    \  if i > #str then return n\n         elseif tonumber(str:sub(i, i)) % 2 == 1\
    \ then return aux(n + 1, i + 1)\n         else return aux(n, i + 1) end\n    \
    \  end\n      return aux(0, 1)\n   end\n   local function aux(i, k)\n      if\
    \ i > #lst then return k\n      else return aux(i + 1, k .. \" \" .. odd_count_str(lst[i]))\
    \ end\n   end\n   return aux(1, \"\")\nend", "   local result = {}\n   for i,\
    \ str in ipairs(lst) do\n      local count = 0\n      for j = 1, #str do\n   \
    \      if tonumber(str:sub(j, j)) % 2 == 1 then\n            count = count + 1\n\
    \         end\n      end\n      result[i] = count\n   end\n   return result\n\
    end", "   return list.map(lst, function(str)\n      local count = 0\n      for\
    \ _, ch in utf8.codes(str) do\n         if (ch - 48) % 2 == 1 then\n         \
    \   count = count + 1\n         end\n      end\n      return count\n   end)\n\
    end", "  local result = {}\n  for i = 1, #lst do\n    local count = 0\n    for\
    \ d in lst[i]:gmatch('%d') do\n      count = count + (tonumber(d) % 2)\n    end\n\
    \    result[i] = count\n  end\n  return result\nend", "  local res = {}\n  for\
    \ _, v in ipairs(lst) do\n    local c = 0\n    for i = 1, #v do\n      if tonumber(v:sub(i,\
    \ i)) % 2 == 1 then\n        c = c + 1\n      end\n    end\n    table.insert(res,\
    \ c)\n  end\n  return res\nend", "   local res = {}\n   for _, str in ipairs(lst)\
    \ do\n      local count = 0\n      for _, c in utf8.codes(str) do\n         if\
    \ (c % 2) == 1 then\n            count = count + 1\n         end\n      end\n\
    \      table.insert(res, count)\n   end\n   return res\nend", "    local function\
    \ count_odd(str)\n        local count = 0\n        for i = 1, #str do\n      \
    \      if tonumber(str:sub(i, i)) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return count\n    end\n    local\
    \ out = {}\n    for i = 1, #lst do\n        out[i] = count_odd(lst[i])\n    end\n\
    \    return out\nend", "    local result = {}\n    for i, s in ipairs(lst) do\n\
    \        local odd_digit_count = 0\n        for c in s:gmatch('%d') do\n     \
    \       odd_digit_count = odd_digit_count + c:byte() % 2\n        end\n      \
    \  result[i] = odd_digit_count\n    end\n    return result\nend", "    -- TODO:\
    \ Complete this function\n    return {}\nend", "    local result = {}\n    for\
    \ _,v in ipairs(lst) do\n        local sum = 0\n        for i = 1, #v do\n   \
    \         if v:sub(i,i) % 2 == 1 then\n                sum = sum + 1\n       \
    \     end\n        end\n        table.insert(result, sum)\n    end\n    return\
    \ result\nend", "  return lst:map(function(s)\n    return s:gmatch(\"[13579]\"\
    )\n  end):map(function(it)\n    return it:count()\n  end)\nend", "  local res\
    \ = {}\n  for _,s in ipairs(lst) do\n    local c = 0\n    for i=1,#s do\n    \
    \  local c = string.sub(s,i,i)\n      if tonumber(c) % 2 == 1 then\n        c\
    \ = c + 1\n      end\n    end\n    table.insert(res,c)\n  end\n  return res\n\
    end", "  local counter = {}\n  for _, v in ipairs(lst) do\n    local val = 0\n\
    \    for d in v:gmatch('%d') do\n      val = val + (tonumber(d) % 2 == 1 and 1\
    \ or 0)\n    end\n    table.insert(counter, val)\n  end\n  return counter\nend",
  "  local function num_odd(s)\n    return #s:gsub('%d*(%d)', '%1')\n  end\n  return\
    \ List.map(lst, num_odd)\nend", "    return map(function(s)\n        local sum\
    \ = 0\n        for i = 1, #s do\n            if tonumber(s:sub(i, i)) % 2 == 1\
    \ then\n                sum = sum + 1\n            end\n        end\n        return\
    \ sum\n    end, lst)\nend", "  local res = {}\n  for _, str in ipairs(lst) do\n\
    \    local count = 0\n    for c in str:gmatch(\"%d\") do\n      if tonumber(c)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    table.insert(res,\
    \ count)\n  end\n  return res\nend", "   local r = {}\n   for _, s in ipairs(lst)\
    \ do\n      local c = 0\n      for d in s:gmatch(\"%d\") do\n         if tonumber(d)\
    \ % 2 == 1 then\n            c = c + 1\n         end\n      end\n      table.insert(r,\
    \ c)\n   end\n   return r\nend", "   local function count_odd(str)\n      local\
    \ result = 0\n      for _,c in ipairs{str:byte(1,-1)} do\n         result = result\
    \ + (c%2 == 1 and 1 or 0)\n      end\n      return result\n   end\n   local result\
    \ = {}\n   for i,str in ipairs(lst) do\n      result[i] = count_odd(str)\n   end\n\
    \   return result\nend", "  local res = {}\n  for i, s in ipairs(lst) do\n   \
    \ local count = 0\n    for _, c in ipairs{s:byte(1, #s)} do\n      if (c - 48)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    res[i] = count\n\
    \  end\n  return res\nend", "    return map(lst, function(s)\n        return reduce(substrings(s),\
    \ function(a, v)\n            return a + ((tonumber(v) % 2 == 1) and 1 or 0)\n\
    \        end, 0)\n    end)\nend", "  local function odd(a)\n    return a:find(\"\
    [13579]\") ~= nil\n  end\n  local function count(s)\n    return count_if(odd,\
    \ s:gmatch(\".\"))\n  end\n  return fmap(count, lst)\nend", "    local result\
    \ = {}\n    for _, elem in ipairs(lst) do\n        result[#result + 1] = 0\n \
    \       for char in elem:gmatch(\"%d\") do\n            if tonumber(char) % 2\
    \ == 1 then\n                result[#result] = result[#result] + 1\n         \
    \   end\n        end\n    end\n    return result\nend", "  local res = {}\n  for\
    \ i, val in ipairs(lst) do\n    local count = 0\n    for j = 1, #val do\n    \
    \  if math.fmod(tonumber(val:sub(j, j)), 2) == 1 then\n        count = count +\
    \ 1\n      end\n    end\n    res[i] = count\n  end\n  return res\nend", "    local\
    \ map = function(s)\n        local count = 0\n        for i=1,#s do\n        \
    \    local digit = tonumber(s:sub(i,i))\n            if (digit % 2 == 1) then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    return List.map(map, lst)\nend", "    -- your code here\n\
    \    local out_lst = {}\n    for i, elm in ipairs(lst) do\n        local count\
    \ = 0\n        for j=1, #elm do\n            if elm:sub(j,j) % 2 == 1 then\n \
    \               count = count + 1\n            end\n        end\n        out_lst[i]\
    \ = count\n    end\n    return out_lst\nend", "    local function count_odd(num)\n\
    \        local s = tostring(num)\n        local c = 0\n        for i = 1, #s do\n\
    \            if (tonumber(s:sub(i, i)) % 2) == 1 then\n                c = c +\
    \ 1\n            end\n        end\n        return c\n    end\n    local res =\
    \ {}\n    for i = 1, #lst do\n        res[i] = count_odd(lst[i])\n    end\n  \
    \  return res\nend", "    local function is_odd(d)\n        return tonumber(d)\
    \ % 2 == 1\n    end\n    local function count_odd(str)\n        local count =\
    \ 0\n        for i = 1, #str do\n            if is_odd(str:sub(i, i)) then\n \
    \               count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    local result = {}\n    for i = 1, #lst do\n        table.insert(result,\
    \ count_odd(lst[i]))\n    end\n    return result\nend", "    local result = {}\n\
    \    for _, str in ipairs(lst) do\n        local count = 0\n        for char in\
    \ str:gmatch('.') do\n            if tonumber(char) % 2 == 1 then\n          \
    \      count = count + 1\n            end\n        end\n        table.insert(result,\
    \ count)\n    end\n    return result\nend", "   local ret = {}\n   for _, v in\
    \ ipairs(lst) do\n      local i = 0\n      for c in v:gmatch(\".\") do\n     \
    \    if tonumber(c) % 2 == 1 then\n            i = i + 1\n         end\n     \
    \ end\n      table.insert(ret, i)\n   end\n   return ret\nend", "  return map(function(s)\n\
    \    local n = 0\n    for i = 1, #s do\n      if tonumber(s:sub(i, i)) % 2 ==\
    \ 1 then\n        n = n + 1\n      end\n    end\n    return n\n  end, lst)\nend",
  "    local out = {}\n    for i = 1, #lst do\n        local count = 0\n        for\
    \ d in lst[i]:gmatch(\"%d\") do\n            if tonumber(d) % 2 == 1 then\n  \
    \              count = count + 1\n            end\n        end\n        out[i]\
    \ = count\n    end\n    return out\nend", "    local result = {}\n    for _, str\
    \ in ipairs(lst) do\n        local odd_sum = 0\n        for _, c in ipairs(str)\
    \ do\n            if c % 2 == 1 then\n                odd_sum = odd_sum + 1\n\
    \            end\n        end\n        table.insert(result, odd_sum)\n    end\n\
    \    return result\nend", '  return list.map(functio', "  local function parity(digit)\n\
    \    local x = tonumber(digit)\n    if x == 0 then return \"even\" end\n    return\
    \ (x % 2) == 1 and \"odd\" or \"even\"\n  end\n  local function is_odd(str)\n\
    \    return tostring(string.gsub(str, \"%d\", parity))\n  end\n  return map(is_odd,\
    \ lst)\nend", "    local count = 0\n    for _, e in ipairs(lst) do\n        for\
    \ ch in e:gmatch('%d') do\n            if tonumber(ch) % 2 == 1 then\n       \
    \         count = count + 1\n            end\n        end\n        lst[_] = count\n\
    \        count = 0\n    end\n    return lst\nend", "    local even = {0, 2, 4,\
    \ 6, 8}\n    local ret = {}\n    for i = 1, #lst do\n        local len = lst[i]:len()\n\
    \        local count = 0\n        for j = 1, len do\n            local c = lst[i]:sub(j,\
    \ j)\n            local n = tonumber(c)\n            if (even[n] == nil) then\n\
    \                count = count + 1\n            end\n        end\n        ret[i]\
    \ = count\n    end\n    return ret\nend", "\tlocal function count_odd_digits(str)\n\
    \t\tlocal n = 0\n\t\tfor digit in string.gmatch(str, \"%d\") do\n\t\t\tif tonumber(digit)\
    \ % 2 == 1 then\n\t\t\t\tn = n + 1\n\t\t\tend\n\t\tend\n\t\treturn n\n\tend\n\t\
    local t = {}\n\tfor i, v in ipairs(lst) do\n\t\tt[i] = count_odd_digits(v)\n\t\
    end\n\treturn t\nend", "  local res = {}\n  for i,v in ipairs(lst) do\n    local\
    \ c = 0\n    for j=1,#v do\n      if v:sub(j,j) % 2 == 1 then\n        c = c +\
    \ 1\n      end\n    end\n    res[i] = c\n  end\n  return res\nend", "    local\
    \ function odd_count(str)\n        local n = 0\n        for c in str:gmatch('%d')\
    \ do\n            n = n + 1 - 2 * (c % 2)\n        end\n        return n\n   \
    \ end\n    local t = {}\n    for _, v in ipairs(lst) do\n        table.insert(t,\
    \ odd_count(v))\n    end\n    return t\nend", "  if not lst then return nil end\n\
    \  local function count_odd(str)\n    local cnt = 0\n    for n in str:gmatch('%d')\
    \ do\n      if tonumber(n) % 2 == 1 then\n        cnt = cnt + 1\n      end\n \
    \   end\n    return cnt\n  end\n  local res = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(res, count_odd(v))\n  end\n  return res\nend", "  local t =\
    \ {}\n  for _, e in ipairs(lst) do\n    local cnt = 0\n    for d in e:gmatch('.')\
    \ do\n      local i = tonumber(d)\n      if i % 2 == 1 then\n        cnt = cnt\
    \ + 1\n      end\n    end\n    table.insert(t, cnt)\n  end\n  return t\nend",
  "  return map(lst, function(x) return count(x, function(d) return tonumber(d) %\
    \ 2 == 1 end) end)\nend", "  local f = function(str)\n    local count = 0\n  \
    \  for i = 1, str:len() do\n      if (tonumber(str:sub(i, i)) % 2 == 1) then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\n  return\
    \ map(f, lst)\nend", "   local result = {}\n   for _, v in ipairs(lst) do\n  \
    \    local count = 0\n      for i = 1, #v do\n         if (tonumber(v:sub(i, i))\
    \ % 2 == 1) then\n            count = count + 1\n         end\n      end\n   \
    \   table.insert(result, count)\n   end\n   return result\nend", "    local counts\
    \ = {}\n    for _, str in ipairs(lst) do\n        local num = 0\n        for char\
    \ in str:gmatch(\"%d\") do\n            if tonumber(char) % 2 == 1 then\n    \
    \            num = num + 1\n            end\n        end\n        table.insert(counts,\
    \ num)\n    end\n    return counts\nend", "    local out = {}\n    for _, s in\
    \ ipairs(lst) do\n        local count = 0\n        for i = 1, #s do\n        \
    \    if (s:sub(i, i) % 2 == 1) then\n                count = count + 1\n     \
    \       end\n        end\n        table.insert(out, count)\n    end\n    return\
    \ out\nend", "  local ret = {}\n  for _, l in ipairs(lst) do\n    local o = 0\n\
    \    for d in l:gmatch(\"[13579]\") do\n      o = o + 1\n    end\n    table.insert(ret,\
    \ o)\n  end\n  return ret\nend", "  local counts = {}\n  for _, str in ipairs(lst)\
    \ do\n    local count = 0\n    for c in str:gmatch('.') do\n      if tonumber(c)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    table.insert(counts,\
    \ count)\n  end\n  return counts\nend", "  local out = {}\n  for _, v in ipairs(lst)\
    \ do\n    local num_odds = 0\n    for i = 1, #v do\n      if tonumber(v:sub(i,\
    \ i)) % 2 == 1 then\n        num_odds = num_odds + 1\n      end\n    end\n   \
    \ table.insert(out, num_odds)\n  end\n  return out\nend", "   local out = {}\n\
    \   for _, v in ipairs(lst) do\n      local odd_count = 0\n      for digit in\
    \ string.gmatch(v, \"%d\") do\n         if tonumber(digit) % 2 == 1 then\n   \
    \         odd_count = odd_count + 1\n         end\n      end\n      table.insert(out,\
    \ odd_count)\n   end\n   return out\nend", "    local out = {}\n    for i,v in\
    \ ipairs(lst) do\n        local c = 0\n        for j = 1, #v do\n            local\
    \ d = tonumber(v:sub(j,j))\n            if d % 2 == 1 then\n                c\
    \ = c + 1\n            end\n        end\n        out[i] = c\n    end\n    return\
    \ out\nend", "  local result = {}\n  for _, str in ipairs(lst) do\n    local s\
    \ = 0\n    for c in str:gmatch(\"%d\") do\n      if tonumber(c) % 2 == 1 then\n\
    \        s = s + 1\n      end\n    end\n    table.insert(result, s)\n  end\n \
    \ return result\nend", "  local function is_odd(s)\n    return s:match(\"[13579]\"\
    ) ~= nil\n  end\n  local function sum(a, b)\n    return a + b\n  end\n  local\
    \ function odd_digits(s)\n    local as_numbers = {}\n    for c in s:gmatch(\"\
    %d\") do\n      table.insert(as_numbers, tonumber(c))\n    end\n    return table.foldl(sum,\
    \ 0, as_numbers)\n  end\n  return table.map(odd_digits, lst)\nend", "    local\
    \ res = {}\n    for i, str in ipairs(lst) do\n        local num = tonumber(str)\n\
    \        local odd_digits = 0\n        for digit in str:gmatch('.') do\n     \
    \       if tonumber(digit) % 2 == 1 then\n                odd_digits = odd_digits\
    \ + 1\n            end\n        end\n        res[i] = odd_digits\n    end\n  \
    \  return res\nend", "   return lst\nend", "   local function odd_digits(str)\n\
    \      local count = 0\n      for d in str:gmatch('%d') do\n         count = count\
    \ + (tonumber(d) % 2 == 1 and 1 or 0)\n      end\n      return count\n   end\n\
    \   local function helper(i, lst)\n      if i == #lst then\n         return {\
    \ odd_digits(lst[i]) }\n      else\n         return { odd_digits(lst[i]) } ..\
    \ helper(i + 1, lst)\n      end\n   end\n   return helper(1, lst)\nend", "  local\
    \ output = {}\n  for _, i in ipairs(lst) do\n    output[#output + 1] = i:gsub(\"\
    [24680]\", \"\"):len()\n  end\n  return output\nend", "    local function odd(n)\n\
    \        return n % 2 == 1\n    end\n    local function count_odd(s)\n       \
    \ local cnt = 0\n        for i = 1, #s do\n            if odd(s:sub(i, i)) then\n\
    \                cnt = cnt + 1\n            end\n        end\n        return cnt\n\
    \    end\n    local res = {}\n    for i = 1, #lst do\n        res[i] = count_odd(lst[i])\n\
    \    end\n    return res\nend", "  local function helper(s)\n    local count =\
    \ 0\n    for c in s:gmatch('%d') do\n      if tonumber(c) % 2 == 1 then\n    \
    \    count = count + 1\n      end\n    end\n    return count\n  end\n  local result\
    \ = {}\n  for _, s in ipairs(lst) do\n    table.insert(result, helper(s))\n  end\n\
    \  return result\nend", "  local function odd_count_(str)\n    local count = 0\n\
    \    for i = 1, #str do\n      if (str:sub(i, i) % 2) == 1 then\n        count\
    \ = count + 1\n      end\n    end\n    return count\n  end\n  local result = {}\n\
    \  for i = 1, #lst do\n    result[i] = odd_count_(lst[i])\n  end\n  return result\n\
    end", "   local function is_odd(s)\n      local sum = 0\n      for i = 1, #s do\n\
    \         if tonumber(s:sub(i, i)) % 2 == 1 then\n            sum = sum + 1\n\
    \         end\n      end\n      return sum\n   end\n   local out = {}\n   for\
    \ i = 1, #lst do\n      out[i] = is_odd(lst[i])\n   end\n   return out\nend",
  "   local lst = map(lst, function(s)\n      local c = 0\n      for i = 1, #s do\n\
    \         c = c + (tonumber(s:sub(i, i)) % 2)\n      end\n      return c\n   end)\n\
    \   return lst\nend", "    local result = {}\n    for _, str in ipairs(lst) do\n\
    \        local count = 0\n        for i = 1, str:len() do\n            if tonumber(str:sub(i,\
    \ i)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        table.insert(result, count)\n    end\n    return result\nend",
  "    local i = 1\n    local res = {}\n    for _, v in ipairs(lst) do\n        local\
    \ l = 0\n        for _, d in ipairs(v) do\n            if tonumber(d) % 2 == 1\
    \ then\n                l = l + 1\n            end\n        end\n        res[i]\
    \ = l\n        i = i + 1\n    end\n    return res\nend", "    local ret = {}\n\
    \    for i, v in ipairs(lst) do\n        ret[i] = 0\n        for _, digit in ipairs(v:split(\"\
    \")) do\n            if tonumber(digit) % 2 == 1 then\n                ret[i]\
    \ = ret[i] + 1\n            end\n        end\n    end\n    return ret\nend", " \
    \ local results = {}\n  for i,str in ipairs(lst) do\n    local count = 0\n   \
    \ for _,num in utf8.codes(str) do\n      local digit = num - utf8.offset('0')\n\
    \      if bit32.band(digit, 1) == 1 then\n        count = count + 1\n      end\n\
    \    end\n    results[i] = count\n  end\n  return results\nend", "  local res\
    \ = {}\n  for _, s in ipairs(lst) do\n    local c = 0\n    for d in s:gmatch(\"\
    %d\") do\n      c = c + d % 2\n    end\n    table.insert(res, c)\n  end\n  return\
    \ res\nend", "  local result = {}\n  for _, str in ipairs(lst) do\n    result[#result\
    \ + 1] = #(str:gsub(\"[13579]\", \"\"))\n  end\n  return result\nend", "   local\
    \ odd_numbers = {}\n   for _, val in ipairs(lst) do\n      local odd_count = 0\n\
    \      for digit in val:gmatch('.') do\n         if tonumber(digit) % 2 == 1 then\n\
    \            odd_count = odd_count + 1\n         end\n      end\n      table.insert(odd_numbers,\
    \ odd_count)\n   end\n   return odd_numbers\nend", "    local res = {}\n    for\
    \ i, v in ipairs(lst) do\n        local n = 0\n        for j = 1, #v do\n    \
    \        if tonumber(v:sub(j, j)) % 2 == 1 then\n                n = n + 1\n \
    \           end\n        end\n        res[i] = n\n    end\n    return res\nend",
  "    local function odd(n)\n        return n % 2 == 1\n    end\n    local function\
    \ count_odd(n)\n        return #n:gsub('%d+', function(s)\n            return\
    \ #s:gsub('%d', function(d)\n                return odd(tonumber(d)) and d or\
    \ ''\n            end)\n        end)\n    end\n    return map(count_odd, lst)\n\
    end", "   return map(function(i) return #filter(function(n) return n % 2 == 1\
    \ end, i) end, lst)\nend", "  local res = {}\n  for _, str in ipairs(lst) do\n\
    \    local count = 0\n    for digit in str:gmatch('%d') do\n      if tonumber(digit)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    table.insert(res,\
    \ count)\n  end\n  return res\nend", "\tlocal out = {}\n\tfor i,v in ipairs(lst)\
    \ do\n\t\tlocal c = 0\n\t\tfor x=1, #v do\n\t\t\tlocal char = string.sub(v, x,\
    \ x)\n\t\t\tif tonumber(char) % 2 == 1 then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\t\
    end\n\t\tout[i] = c\n\tend\n\treturn out\nend", "  local function count_odd(s)\n\
    \    local count = 0\n    for _, x in ipairs(s) do\n      count = count + (tonumber(x)\
    \ % 2 == 1 and 1 or 0)\n    end\n    return count\n  end\n  local result = {}\n\
    \  for _, x in ipairs(lst) do\n    table.insert(result, count_odd(x))\n  end\n\
    \  return result\nend", "  -- YOUR CODE HERE\nend", "    local result = {}\n \
    \   for i, v in ipairs(lst) do\n        local count = 0\n        for i = 1, #v\
    \ do\n            if tonumber(v:sub(i, i)) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        result[i] = count\n    end\n\
    \    return result\nend", "    local res = {}\n    for i = 1, #lst do\n      \
    \  local cnt = 0\n        for j = 1, #lst[i] do\n            if tonumber(lst[i]:sub(j,\
    \ j)) % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        res[i] = cnt\n    end\n    return res\nend", "    local output = {}\n\
    \    for i, s in ipairs(lst) do\n        local count = 0\n        for c in s:gmatch('%d')\
    \ do\n            if tonumber(c) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        output[i] = count\n    end\n    return\
    \ output\nend", "    local output = {}\n    for i,str in ipairs(lst) do\n    \
    \    output[i] = 0\n        for _,c in ipairs(str) do\n            if tonumber(c)\
    \ % 2 == 1 then\n                output[i] = output[i] + 1\n            end\n\
    \        end\n    end\n    return output\nend", "  -- TODO: replace the following\
    \ with your own code.\n  return {}\nend", "    local function odd(s)\n       \
    \ local count = 0\n        for c in s:gmatch('%d') do\n            if (tonumber(c)\
    \ % 2) == 1 then\n                count = count + 1\n            end\n       \
    \ end\n        return count\n    end\n    local result = {}\n    for _,s in ipairs(lst)\
    \ do\n        table.insert(result, odd(s))\n    end\n    return result\nend",
  "   local out = {}\n   for i,v in ipairs(lst) do\n      local count = 0\n      for\
    \ c in v:gmatch(\"%d\") do\n         if tonumber(c) % 2 == 1 then\n          \
    \  count = count + 1\n         end\n      end\n      out[i] = count\n   end\n\
    \   return out\nend", "    return map(function(s)\n        local count = 0\n \
    \       for char in string.gmatch(s, \".\") do\n            if tonumber(char)\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end, lst)\nend", "    local res = {}\n    for i, e\
    \ in ipairs(lst) do\n        local sum = 0\n        for j = 1, #e do\n       \
    \     if (tonumber(e:sub(j, j)) % 2) == 1 then\n                sum = sum + 1\n\
    \            end\n        end\n        res[i] = sum\n    end\n    return res\n\
    end", "  local function odd(str)\n    local odd = 0\n    for i = 1, #str do\n\
    \      if str:sub(i, i) % 2 == 1 then\n        odd = odd + 1\n      end\n    end\n\
    \    return odd\n  end\n  local new_lst = {}\n  for _, str in ipairs(lst) do\n\
    \    table.insert(new_lst, odd(str))\n  end\n  return new_lst\nend", "    -- TODO\n\
    end", "\tlocal result = {}\n\tfor _, str in ipairs(lst) do\n\t\tlocal count =\
    \ 0\n\t\tfor _, ch in utf8.codes(str) do\n\t\t\tlocal n = tonumber(ch)\n\t\t\t\
    if n % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\ttable.insert(result,\
    \ count)\n\tend\n\treturn result\nend", "    -- Your code here.\nend", "    local\
    \ result = {}\n    for i = 1, #lst do\n        local digits = lst[i]\n       \
    \ local count = 0\n        for j = 1, #digits do\n            local digit = tonumber(digits:sub(j,\
    \ j))\n            if digit % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        result[i] = count\n    end\n    return\
    \ result\nend", "    local aux = function(str)\n        return tostring(str:gsub(\"\
    [02468]\", \"\"):len())\n    end\n    return map(aux, lst)\nend", "  local result\
    \ = {}\n  for _, v in ipairs(lst) do\n    local count = 0\n    for _, d in ipairs(v:split())\
    \ do\n      if tonumber(d) % 2 == 1 then\n        count = count + 1\n      end\n\
    \    end\n    table.insert(result, count)\n  end\n  return result\nend", "  --\
    \ error checking\n  if type(lst) ~= \"table\" then\n    error(\"expected lst to\
    \ be a table of strings, got: \" .. type(lst))\n  end\n  for i, _ in ipairs(lst)\
    \ do\n    if type(lst[i]) ~= \"string\" then\n      error(\"expected lst to be\
    \ a table of strings, got: \" .. type(lst[i]))\n    end\n  end", "    local odd_count\
    \ = 0\n    local results = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i]\
    \ do\n            if (lst[i]:sub(j, j) % 2 == 1) then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n        results[i] = odd_count\n\
    \        odd_count = 0\n    end\n    return results\nend", "  return map(lambda('s',\
    \ #select(lambda('c', xor(tonumber(c) % 2, 0)), s)), lst)\nend", "  local function\
    \ count_odd_digits(word)\n    local count = 0\n    for i = 1, #word do\n     \
    \ local digit = tonumber(word:sub(i, i))\n      if digit % 2 == 1 then\n     \
    \   count = count + 1\n      end\n    end\n    return count\n  end\n  local output\
    \ = {}\n  for i = 1, #lst do\n    output[i] = count_odd_digits(lst[i])\n  end\n\
    \  return output\nend", "   local res = {}\n   for _, s in ipairs(lst) do\n  \
    \    local count = 0\n      for d in s:gmatch(\"%d\") do\n         if tonumber(d)\
    \ % 2 == 1 then\n            count = count + 1\n         end\n      end\n    \
    \  table.insert(res, count)\n   end\n   return res\nend", "    local r = {}\n\
    \    for i, v in ipairs(lst) do\n        local c = 0\n        for j = 1, #v do\n\
    \            if v:sub(j, j) % 2 == 1 then\n                c = c + 1\n       \
    \     end\n        end\n        r[i] = c\n    end\n    return r\nend", "   --\
    \ Assume lst is a list of strings.\n   local r = {} -- result\n   for _, s in\
    \ ipairs(lst) do\n      local count = 0\n      for c in s:gmatch(\"%d\") do\n\
    \         if tonumber(c) % 2 == 1 then\n            count = count + 1\n      \
    \   end\n      end\n      table.insert(r, count)\n   end\n   return r\nend", " \
    \   local ret = {}\n    for _, v in ipairs(lst) do\n        local count = 0\n\
    \        for i = 1, #v do\n            if tonumber(v:sub(i, i)) % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        table.insert(ret,\
    \ count)\n    end\n    return ret\nend\nassert(deep_eq(odd_count({\"02\", \"10\"\
    , \"13\", \"01\"}), {1, 1, 2, 0}))\nassert(deep_eq(odd_count({\"11\", \"10\",\
    \ \"13\", \"01\"}), {2, 1, 2, 0}))\nassert(deep_eq(odd_count({\"000\", \"100\"\
    , \"111\", \"010\"}), {0, 1, 3, 1}))", "    local odd_count = 0\n    local odds\
    \ = {}\n    for _, digits in ipairs(lst) do\n        for _, digit in ipairs(digits)\
    \ do\n            if odd_count % 2 == 1 then\n                table.insert(odds,\
    \ digit)\n            end\n            odd_count = odd_count + 1\n        end\n\
    \    end\n    return odds\nend", "  local ans = {}\n  for _, x in ipairs(lst)\
    \ do\n    local acc = 0\n    for d in x:gmatch(\"%d\") do\n      acc = acc + (d\
    \ % 2)\n    end\n    table.insert(ans, acc)\n  end\n  return ans\nend", "  local\
    \ function count_odd(str)\n    local count = 0\n    for d in str:gmatch(\"%d\"\
    ) do\n      count = count + (tonumber(d) % 2)\n    end\n    return count\n  end\n\
    \  local out = {}\n  for i, str in ipairs(lst) do\n    table.insert(out, tostring(count_odd(str)))\n\
    \  end\n  return out\nend", "    return map(function(s)\n            return s:gsub(\"\
    %d\", function(d)\n                    if tonumber(d) % 2 == 1 then\n        \
    \                return \"1\"\n                    else\n                    \
    \    return \"0\"\n                    end\n                end)\n        end,\
    \ lst)\nend", "    local result = {}\n    for _,s in ipairs(lst) do\n        local\
    \ count = 0\n        for i = 1,#s do\n            if tonumber(s:sub(i,i)) % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        table.insert(result, count)\n    end\n    return result\nend", "  local\
    \ res = {}\n  for _, num in ipairs(lst) do\n    local count = 0\n    for c in\
    \ num:gmatch(\".\") do\n      if tonumber(c) % 2 == 1 then\n        count = count\
    \ + 1\n      end\n    end\n    table.insert(res, count)\n  end\n  return res\n\
    end", "   local result = {}\n   for k, v in ipairs(lst) do\n      local count\
    \ = 0\n      for c in v:gmatch(\"%d\") do\n         if tonumber(c) % 2 == 1 then\n\
    \            count = count + 1\n         end\n      end\n      result[k] = count\n\
    \   end\n   return result\nend", "  return utils.map(lst, function(x)\n    return\
    \ utils.count(x, function(y)\n      return tonumber(y) % 2 == 1\n    end)\n  end)\n\
    end", "    local counts = {}\n    for _, s in ipairs(lst) do\n        local count\
    \ = 0\n        for d in s:gmatch(\"%d\") do\n            count = count + (tonumber(d)\
    \ % 2)\n        end\n        table.insert(counts, count)\n    end\n    return\
    \ counts\nend", "    return map(lambda('x', '#filter(lambda(\"v\", \"v % 2 ==\
    \ 1\"), x)'), lst)\nend", "    local result = {}\n    for i, s in ipairs(lst)\
    \ do\n        local num_odds = 0\n        for c in s:gmatch(\"%d\") do\n     \
    \       if tonumber(c) % 2 == 1 then\n                num_odds = num_odds + 1\n\
    \            end\n        end\n        result[i] = tostring(num_odds)\n    end\n\
    \    return result\nend", "    local res = {}\n    for i, v in ipairs(lst) do\n\
    \        local cnt = 0\n        for i = 1, #v do\n            local c = tonumber(v:sub(i,\
    \ i))\n            if c % 2 == 1 then\n                cnt = cnt + 1\n       \
    \     end\n        end\n        res[i] = cnt\n    end\n    return res\nend", " \
    \   local ret = {}\n    for k, v in ipairs(lst) do\n        local sum = 0\n  \
    \      for i = 1, #v do\n            if (tonumber(v:sub(i, i)) % 2) == 1 then\n\
    \                sum = sum + 1\n            end\n        end\n        ret[k] =\
    \ sum\n    end\n    return ret\nend", "  return tablex.map(function(x) return\
    \ #x:gmatch('[13579]') end, lst)\nend", "  local function odd(x)\n    return (x\
    \ % 2 == 1)\n  end\n  local function helper(xs)\n    local head = xs[1]\n    if(#xs\
    \ == 1) then\n      return tostring(#filter(odd, map(tonumber, str_split(head,\
    \ ''))))\n    else\n      return tostring(#filter(odd, map(tonumber, str_split(head,\
    \ '')))) ..\n             \" \" .. helper(tail(xs))\n    end\n  end\n  return\
    \ helper(lst)\nend", "  local function is_odd(x)\n    return x ~= 0 and x % 2\
    \ == 1\n  end\n  local function count_odds(str)\n    local c = 0\n    for i =\
    \ 1, #str do\n      if is_odd(str:sub(i, i):byte()) then\n        c = c + 1\n\
    \      end\n    end\n    return c\n  end\n  local result = {}\n  for i = 1, #lst\
    \ do\n    result[i] = count_odds(lst[i])\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, #lst do\n    local cnt = 0\n    for j = 1, #lst[i]\
    \ do\n      local n = tonumber(lst[i]:sub(j, j))\n      if n % 2 == 1 then\n \
    \       cnt = cnt + 1\n      end\n    end\n    result[i] = cnt\n  end\n  return\
    \ result\nend", "    local res = {}\n    for _, v in ipairs(lst) do\n        res[#res\
    \ + 1] = v:gsub(\"%d+\", function(n)\n            return #n:gsub(\"[13579]\",\
    \ \"\")\n        end)\n    end\n    return res\nend", "\tlocal tbl = {}\n\tfor\
    \ i,v in ipairs(lst) do\n\t\ttbl[i] = 0\n\t\tfor j=1,#v do\n\t\t\tif v:sub(j,j)\
    \ % 2 == 1 then\n\t\t\t\ttbl[i] = tbl[i] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ tbl\nend", "   local r = {}\n   for _, s in ipairs(lst) do\n      local n =\
    \ 0\n      for d in string.gmatch(s, '%d') do\n         n = n + (d % 2)\n    \
    \  end\n      table.insert(r, n)\n   end\n   return r\nend", "  local res = {}\n\
    \  for i = 1, #lst do\n    res[i] = #lst[i]:gsub(\"%d*[13579]\", \"\")\n  end\n\
    \  return res\nend", "    return map(function(v)\n        return reduce(function(acc,\
    \ v)\n            if tonumber(v) % 2 == 1 then\n                return acc + 1\n\
    \            else\n                return acc\n            end\n        end, 0,\
    \ string.gmatch(v, '%d'))\n    end, lst)\nend", "  local result = {}\n  for _,num\
    \ in ipairs(lst) do\n    local c = 0\n    for digit in num:gmatch('%d') do\n \
    \     c = c + (tonumber(digit) % 2 == 1 and 1 or 0)\n    end\n    table.insert(result,\
    \ c)\n  end\n  return result\nend", "  local odds = {}\n  for i = 1, #lst do\n\
    \    local cnt = 0\n    for d in lst[i]:gmatch(\"%d\") do\n      if tonumber(d)\
    \ % 2 == 1 then\n        cnt = cnt + 1\n      end\n    end\n    odds[i] = cnt\n\
    \  end\n  return odds\nend", "   local function count_odd(s)\n      local result\
    \ = 0\n      for i = 1, #s do\n         if (s:sub(i, i) % 2 == 1) then\n     \
    \       result = result + 1\n         end\n      end\n      return result\n  \
    \ end\n   local result = {}\n   for i = 1, #lst do\n      table.insert(result,\
    \ count_odd(lst[i]))\n   end\n   return result\nend", "  local function helper(str)\n\
    \    local count = 0\n    for c in str:gmatch(\"%d\") do\n      count = count\
    \ + (tonumber(c) % 2 == 1 and 1 or 0)\n    end\n    return count\n  end\n  local\
    \ res = {}\n  for i, v in ipairs(lst) do\n    res[i] = helper(v)\n  end\n  return\
    \ res\nend", "    local new_lst = {}\n    for i,v in ipairs(lst) do\n        new_lst[i]\
    \ = 0\n        for _, d in ipairs(split(v, \"\")) do\n            if d == '1'\
    \ or d == '3' or d == '5' or d == '7' or d == '9' then\n                new_lst[i]\
    \ = new_lst[i] + 1\n            end\n        end\n    end\n    return new_lst\n\
    end", "    local function is_odd(x)\n        if x % 2 == 0 then\n            return\
    \ false\n        else\n            return true\n        end\n    end\n    local\
    \ function odd_count_single(s)\n        local cnt = 0\n        for digit in s:gmatch(\"\
    %d\") do\n            if is_odd(tonumber(digit)) then\n                cnt = cnt\
    \ + 1\n            end\n        end\n        return cnt\n    end\n    local result\
    \ = {}\n    for _, elem in ipairs(lst) do\n        table.insert(result, odd_count_single(elem))\n\
    \    end\n    return result\nend", "    local res = {}\n    for _, v in ipairs(lst)\
    \ do\n        local o = {}\n        for c in v:gmatch(\"%d\") do\n           \
    \ o[tonumber(c) % 2] = (o[tonumber(c) % 2] or 0) + 1\n        end\n        table.insert(res,\
    \ o[1] or 0)\n    end\n    return res\nend", "    local ans = {}\n    for _, str\
    \ in ipairs(lst) do\n        local count = 0\n        for ch in str:gmatch('%d')\
    \ do\n            count = count + (tonumber(ch) % 2 == 1 and 1 or 0)\n       \
    \ end\n        table.insert(ans, count)\n    end\n    return ans\nend", "    --\
    \ If the list is empty, then return an empty list.\n    if #lst == 0 then\n  \
    \      return {}\n    end", "   return luatest.map(lst, function(e)\n      local\
    \ c = 0\n      for i=1,#e do\n         if e:sub(i,i) % 2 == 1 then\n         \
    \   c = c + 1\n         end\n      end\n      return c\n   end)\nend", "  local\
    \ result = {}\n  for _,v in ipairs(lst) do\n    result[#result+1] = v:gsub(\"\
    %d\", function(d)\n      if tonumber(d) % 2 == 1 then\n        return \"1\"\n\
    \      else\n        return \"0\"\n      end\n    end):gsub(\"0+$\", \"\"):len()\n\
    \  end\n  return result\nend", "    local function count_odd(s)\n        return\
    \ #(s:gsub(\"[^13579]\", \"\"))\n    end\n    return map(count_odd, lst)\nend",
  "    local new_lst = {}\n    for _,v in ipairs(lst) do\n        local odd_num =\
    \ 0\n        for i = 1, #v do\n            local c = v:sub(i,i)\n            if\
    \ c == '1' or c == '3' or c == '5' or c == '7' or c == '9' then\n            \
    \    odd_num = odd_num + 1\n            end\n        end\n        table.insert(new_lst,\
    \ odd_num)\n    end\n    return new_lst\nend", "    local t = {}\n    for _, s\
    \ in ipairs(lst) do\n        local n = 0\n        for d in s:gmatch(\"%d\") do\n\
    \            if math.fmod(tonumber(d), 2) == 1 then\n                n = n + 1\n\
    \            end\n        end\n        table.insert(t, n)\n    end\n    return\
    \ t\nend", "  local function f(acc, item)\n    local function count_odd(i)\n \
    \     return not i % 2 == 0\n    end\n    return acc + #item:gmatch(\"%d+\"):filter(count_odd)\n\
    \  end\n  return lst:foldl(f, 0)\nend", "   local function num_odd(val)\n    \
    \  local n, l = 0, #val\n      for i = 1, l do\n         local c = val:sub(i,\
    \ i)\n         if c == '1' or c == '3' or c == '5' or c == '7' or c == '9' then\n\
    \            n = n + 1\n         end\n      end\n      return n\n   end\n   local\
    \ function num_odd_st(st)\n      local n = 0\n      for w in st:gmatch('%d+')\
    \ do\n         n = n + num_odd(w)\n      end\n      return n\n   end\n   local\
    \ res = {}\n   for i = 1, #lst do\n      res[i] = num_odd_st(lst[i])\n   end\n\
    \   return res\nend", "    if #lst == 0 then\n        return {}\n    end\n   \
    \ local ans = {}\n    for i, v in ipairs(lst) do\n        local sum = 0\n    \
    \    for _, c in ipairs(v:split(\"\")) do\n            if tonumber(c) % 2 == 1\
    \ then\n                sum = sum + 1\n            end\n        end\n        ans[i]\
    \ = sum\n    end\n    return ans\nend", "   return map(\n      function(s)\n \
    \        return tostring(length(filter(function(c) return tonumber(c) % 2 == 1\
    \ end, list(s))))\n      end,\n      lst)\nend", "  local ans = {}\n  for _,s\
    \ in ipairs(lst) do\n    local sum = 0\n    for i=1,#s do\n      if tonumber(s:sub(i,i))\
    \ % 2 == 1 then\n        sum = sum + 1\n      end\n    end\n    table.insert(ans,\
    \ sum)\n  end\n  return ans\nend", "    local new_list = {}\n    for _, str in\
    \ ipairs(lst) do\n        local odd_num = 0\n        for _, char in ipairs(str)\
    \ do\n            if tonumber(char) % 2 == 1 then\n                odd_num = odd_num\
    \ + 1\n            end\n        end\n        table.insert(new_list, odd_num)\n\
    \    end\n    return new_list\nend", "   local res = {}\n   for i, v in ipairs(lst)\
    \ do\n      res[i] = 0\n      for c in v:gmatch('.') do\n         res[i] = res[i]\
    \ + (tonumber(c) % 2 == 1 and 1 or 0)\n      end\n   end\n   return res\nend",
  "  return map(\n    function(v)\n      local n = 0\n      for i = 1, #v do\n   \
    \     if (tonumber(v:sub(i, i)) % 2 == 1) then\n          n = n + 1\n        end\n\
    \      end\n      return n\n    end,\n    lst\n  )\nend", "  -- Return a copy\
    \ of lst with the string at index i replaced by the number of\n  -- odd digits\
    \ in that string.\n  local function get_odd_count(lst, i)\n    local function\
    \ is_odd(x)\n      return x % 2 == 1\n    end\n    return map(filter(is_odd, parse_digits(lst[i])),\
    \ count_items)\n  end\n  return map(lst, get_odd_count)\nend", "   local t = {}\n\
    \   for _, s in ipairs(lst) do\n      local c = 0\n      for d in s:gmatch(\"\
    %d\") do\n         if math.fmod(tonumber(d), 2) == 1 then\n            c = c +\
    \ 1\n         end\n      end\n      table.insert(t, c)\n   end\n   return t\n\
    end", "  return util.map(function(a)\n    local c = 0\n    for i = 1, #a do\n\
    \      if (a:sub(i, i) % 2 == 1) then\n        c = c + 1\n      end\n    end\n\
    \    return c\n  end, lst)\nend", "  local result = {}\n  for _, str in ipairs(lst)\
    \ do\n    local count = 0\n    for digit in str:gmatch(\"%d\") do\n      if tonumber(digit)\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    table.insert(result,\
    \ count)\n  end\n  return result\nend", "  local function count_odd_digits(s)\n\
    \    local cnt = 0\n    for d in s:gmatch('%d') do\n      cnt = cnt + (d % 2 ==\
    \ 1 and 1 or 0)\n    end\n    return cnt\n  end\n  local function count_odds(s)\n\
    \    return 'the number of odd elements in the string ' .. s .. ' of the input.'\n\
    \  end\n  return tablex.imap(count_odds, tablex.imap(count_odd_digits, lst))\n\
    end", "  local ret = {}\n  for k,v in ipairs(lst) do\n    local sum = 0\n    for\
    \ i=1,#v do\n      if tonumber(v:sub(i,i)) % 2 == 1 then\n        sum = sum +\
    \ 1\n      end\n    end\n    ret[k] = sum\n  end\n  return ret\nend", "  \n  local\
    \ ret = {}\n  for i, v in ipairs(lst) do\n    local odd_count = 0\n    for j =\
    \ 1, #v do\n      if tonumber(v:sub(j, j)) % 2 == 1 then\n        odd_count =\
    \ odd_count + 1\n      end\n    end\n    ret[i] = odd_count\n  end\n  return ret\n\
    end", "    local m = {}\n    for i, s in ipairs(lst) do\n        local cnt = 0\n\
    \        for j = 1, string.len(s) do\n            if tonumber(string.sub(s, j,\
    \ j)) % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        m[i] = cnt\n    end\n    return m\nend", "  -- TODO: implement this function,\
    \ then delete this comment\nend", "\treturn List.map(lst, function(str)\n\t\t\
    local count = 0\n\t\tfor i = 1, #str do\n\t\t\tif tonumber(str:sub(i, i)) % 2\
    \ == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn tostring(count)\n\
    \tend)\nend", "    local function odd_digits(num_str)\n        local num_digits\
    \ = num_str:len()\n        local count = 0\n        for i = 1, num_digits do\n\
    \            local digit = tonumber(num_str:sub(i, i))\n            if digit %\
    \ 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    local result = {}\n    for i, e in ipairs(lst)\
    \ do\n        result[i] = odd_digits(e)\n    end\n    return result\nend", " \
    \   local function odd_count_str(str)\n        local count = 0\n        for _,ch\
    \ in ipairs(str) do\n            if tonumber(ch) % 2 == 1 then\n             \
    \   count = count + 1\n            end\n        end\n        return count\n  \
    \  end\n    local result = {}\n    for _,str in ipairs(lst) do\n        result[#result+1]\
    \ = odd_count_str(str)\n    end\n    return result\nend", "  -- TODO\nend", " \
    \   local rtn = {}\n    for i = 1, #lst do\n        local count = 0\n        for\
    \ j = 1, #lst[i] do\n            local num = tonumber(lst[i]:sub(j, j))\n    \
    \        if num % 2 == 1 then\n                count = count + 1\n           \
    \ end\n        end\n        rtn[i] = tostring(count)\n    end\n    return rtn\n\
    end", "  -- Your code here\nend", "  local function count_odd(str)\n    local\
    \ count = 0\n    for c in str:gmatch('%d') do\n      if tonumber(c) % 2 == 1 then\n\
    \        count = count + 1\n      end\n    end\n    return count\n  end\n  local\
    \ function string_number(str)\n    return tostring(tonumber(str))\n  end\n  return\
    \ map(string_number, map(count_odd, lst))\nend", "    local out = {}\n    for\
    \ i, v in ipairs(lst) do\n        out[i] = string.gsub(v, '[13579]', '')\n   \
    \ end\n    return out\nend", "  local result = {}\n  for i = 1, #lst do\n    local\
    \ count = 0\n    for d in lst[i]:gmatch\"%d\" do\n      count = count + (d % 2)\n\
    \    end\n    result[i] = tostring(count)\n  end\n  return result\nend", "   \
    \ -- YOUR CODE HERE\n    -- If not given a list, return an empty list.\n    if\
    \ not lst then return {} end\n    -- If given an empty list, return an empty list.\n\
    \    if #lst == 0 then return {} end\n    -- Iterate through each element and\
    \ count the number of odd digits in it.\n    local res = {}\n    for i = 1, #lst\
    \ do\n        local count = 0\n        for d in lst[i]:gmatch('%d') do\n     \
    \       if tonumber(d) % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        res[i] = count\n    end\n    return res\nend",
  "  local rv = {}\n  for _, s in ipairs(lst) do\n    local n = 0\n    for d in s:gmatch('%d')\
    \ do\n      if (tonumber(d) % 2) == 1 then\n        n = n + 1\n      end\n   \
    \ end\n    table.insert(rv, n)\n  end\n  return rv\nend", "    local result =\
    \ {}\n    for i,x in ipairs(lst) do\n        local count = 0\n        for j =\
    \ 1,#x do\n            if x:sub(j,j) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        result[i] = count\n    end\n    return\
    \ result\nend", "  local i = 1\n  local ret = {}\n  while i <= #lst do\n    local\
    \ str = lst[i]\n    local j = 1\n    local odd = 0\n    while j <= #str do\n \
    \     local digit = tonumber(str:sub(j, j))\n      if math.fmod(digit, 2) == 1\
    \ then\n        odd = odd + 1\n      end\n      j = j + 1\n    end\n    ret[i]\
    \ = odd\n    i = i + 1\n  end\n  return ret\nend", "  local result = {}\n  for\
    \ i,v in ipairs(lst) do\n    local count = 0\n    for j=1,#v do\n      if tonumber(v:sub(j,j))\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    result[i]\
    \ = tostring(count)\n  end\n  return result\nend", "\tlocal res = {}\n\tfor _,\
    \ str in ipairs(lst) do\n\t\tlocal cnt = 0\n\t\tfor _, c in ipairs(str) do\n\t\
    \t\tif tonumber(c) % 2 == 1 then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\t\
    \ttable.insert(res, cnt)\n\tend\n\treturn res\nend", "  local r = {}\n  for i,s\
    \ in ipairs(lst) do\n    r[i] = s:gsub(\"%d\", function(x) return (tonumber(x)\
    \ % 2 == 1) and \"1\" or \"\" end):len()\n  end\n  return r\nend", "    local\
    \ result = {}\n    for i, str in ipairs(lst) do\n        local count = 0\n   \
    \     for _, v in ipairs({str:byte(1, -1)}) do\n            if v % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        result[i]\
    \ = count\n    end\n    return result\nend", "    local output = {}\n    for _,\
    \ s in ipairs(lst) do\n        local sum = 0\n        for c in s:gmatch('%d')\
    \ do\n            if tonumber(c) % 2 == 1 then\n                sum = sum + 1\n\
    \            end\n        end\n        table.insert(output, sum)\n    end\n  \
    \  return output\nend", "    local res = {}\n    for i, v in ipairs(lst) do\n\
    \        local c = 0\n        for j = 1, #v do\n            local c = string.sub(v,\
    \ j, j)\n            if tonumber(c) % 2 == 1 then\n                c = c + 1\n\
    \            end\n        end\n        res[i] = tostring(c)\n    end\n    return\
    \ res\nend", "   local l = {}\n   for _,s in ipairs(lst) do\n      local n = 0\n\
    \      for c in s:gmatch(\"%d\") do\n         if tonumber(c) % 2 == 1 then\n \
    \           n = n + 1\n         end\n      end\n      table.insert(l, n)\n   end\n\
    \   return l\nend", "    return {}\nend", "  local function odd_digits(str)\n\
    \    local n = 0\n    for c in str:gmatch(\"%d\") do\n      if tonumber(c) % 2\
    \ == 1 then\n        n = n + 1\n      end\n    end\n    return n\n  end\n  local\
    \ result = {}\n  for i, s in ipairs(lst) do\n    table.insert(result, string.format(\"\
    the number of odd elements in the string %d of the input.\", odd_digits(s)))\n\
    \  end\n  return result\nend", "  -- TODO: complete implementation.\n  return\
    \ {42}\nend", "    local ret = {}\n    for k, v in ipairs(lst) do\n        local\
    \ n = 0\n        for d in v:gmatch('[13579]') do\n            n = n + 1\n    \
    \    end\n        ret[k] = n\n    end\n    return ret\nend\nassert.same({2, 1,\
    \ 2, 1, 2}, odd_count({'07895462130', '919875641230', '9195969878'}))\nassert.same({1,\
    \ 0, 1, 1, 0}, odd_count({'123', '456', '789'}))\nassert.same({0, 0, 0, 0, 0},\
    \ odd_count({'000', '000', '000'}))\nassert.same({1, 0, 1, 1, 0}, odd_count({'111',\
    \ '222', '333'}))\nassert.same({2, 1, 2, 1, 2}, odd_count({'12345', '666777',\
    \ '9999999'}))", "\tlocal ret = {}\n\tfor i, v in ipairs(lst) do\n\t\tlocal odd\
    \ = 0\n\t\tfor _, c in ipairs(v) do\n\t\t\tif c == '1' or c == '3' or c == '5'\
    \ or c == '7' or c == '9' then\n\t\t\t\todd = odd + 1\n\t\t\tend\n\t\tend\n\t\t\
    ret[i] = odd\n\tend\n\treturn ret\nend", "  local res = {}\n  for i = 1, #lst\
    \ do\n    local num_odds = 0\n    for j = 1, #lst[i] do\n      if (tonumber(lst[i]:sub(j,\
    \ j)) % 2 == 1) then\n        num_odds = num_odds + 1\n      end\n    end\n  \
    \  res[i] = num_odds\n  end\n  return res\nend", "  local res = {}\n  for _,s\
    \ in ipairs(lst) do\n    local count = 0\n    for _,c in ipairs(s) do\n      count\
    \ = count + (tonumber(c) % 2)\n    end\n    table.insert(res, count)\n  end\n\
    \  return res\nend", "    local fun = function(s)\n        local odds = 0\n  \
    \      for _, c in ipairs(s:to_chars()) do\n            if c:to_int() % 2 == 1\
    \ then\n                odds = odds + 1\n            end\n        end\n      \
    \  return str(odds)\n    end\n    return lst:map(fun)\nend", "  local r = {}\n\
    \  for _, s in ipairs(lst) do\n    local n = 0\n    for i = 1, #s do\n      if\
    \ (tonumber(s:sub(i, i)) % 2) == 1 then\n        n = n + 1\n      end\n    end\n\
    \    table.insert(r, n)\n  end\n  return r\nend", "    return list.map(function(x)\n\
    \        return list.filter(string.match, list.map(function(x) return tonumber(x)\
    \ end, utf8.codepoint(x)), '(%d)')\n    end, lst)\nend", "    local function count_odd(x)\n\
    \        local sum = 0\n        for i = 1, #x do\n            if (tonumber(x:sub(i,\
    \ i)) % 2 == 1) then\n                sum = sum + 1\n            end\n       \
    \ end\n        return sum\n    end\n    local res = {}\n    for i = 1, #lst do\n\
    \        res[i] = count_odd(lst[i])\n    end\n    return res\nend", "  local ret\
    \ = {}\n  for i,v in ipairs(lst) do\n    ret[i] = 0\n    for i = 1, #v do\n  \
    \    local b = tonumber(v:sub(i,i))\n      if b % 2 == 1 then\n        ret[i]\
    \ = ret[i] + 1\n      end\n    end\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
