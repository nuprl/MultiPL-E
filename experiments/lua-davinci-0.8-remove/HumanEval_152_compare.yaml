name: HumanEval_152_compare
language: lua
prompt: "-- I think we all remember that feeling when the result of some long-awaited\n\
  -- event is finally known. The feelings and thoughts you have at that moment are\n\
  -- definitely worth noting down and comparing.\n-- Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n-- You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n-- Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n-- the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n-- example:\nlocal function\
  \ compare(game, guess)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = compare\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2}), {0, 0,\
  \ 0, 0, 3, 3})\n    lu.assertEquals(candidate({0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0,\
  \ 0}), {0, 0, 0, 0, 0, 0})\n    lu.assertEquals(candidate({1, 2, 3}, {-1, -2, -3}),\
  \ {2, 4, 6})\n    lu.assertEquals(candidate({1, 2, 3, 5}, {-1, 2, 3, 4}), {2, 0,\
  \ 0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local score = {}\n    for i,v in ipairs(game) do\n        score[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n    return score\nend", "    assert(#game\
    \ == #guess, \"Both arrays must be of equal length\")\n    local ret = {}\n  \
    \  for i = 1, #game do\n        local diff = game[i] - guess[i]\n        if diff\
    \ < 0 then diff = -diff end\n        ret[i] = diff\n    end\n    return ret\n\
    end", "\tlocal t = {}\n\tfor i = 1, #game do\n\t\tlocal diff = math.abs(game[i]\
    \ - guess[i])\n\t\ttable.insert(t, diff)\n\tend\n\treturn t\nend", "  assert(type(game)\
    \ == \"table\" and type(guess) == \"table\")\n  local result = {}\n  for index,\
    \ score in ipairs(game) do\n    result[index] = math.abs(score - guess[index])\n\
    \  end\n  return result\nend", "    local a = {}\n    for i,v in ipairs(game)\
    \ do\n        table.insert(a, math.abs(v - guess[i]))\n    end\n    return a\n\
    end", "    local result = {}\n    for i = 1, #game do\n        local value = game[i]\
    \ - guess[i]\n        result[i] = math.abs(value)\n    end\n    return result\n\
    end", "  local result = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(v\
    \ - guess[i])\n  end\n  return result\nend", "  local result = {}\n  for i, j\
    \ in ipairs(game) do\n    if j > guess[i] then\n      result[i] = j - guess[i]\n\
    \    elseif j < guess[i] then\n      result[i] = guess[i] - j\n    else\n    \
    \  result[i] = 0\n    end\n  end\n  return result\nend", "    local score = {}\n\
    \    for k,v in pairs(game) do\n        table.insert(score, math.abs(game[k] -\
    \ guess[k]))\n    end\n    return score\nend", "\tlocal result = {}\n\tfor i =\
    \ 1, #game do\n\t\tresult[i] = game[i] == guess[i] and 0 or math.abs(game[i] -\
    \ guess[i])\n\tend\n\treturn result\nend", "  local match = {}\n  for i = 1, #game\
    \ do\n    match[i] = math.abs(game[i] - guess[i])\n  end\n  return match\nend",
  "  local result = {}\n  for i = 1, #game do\n    local g = game[i]\n    local m\
    \ = guess[i]\n    if g == m then\n      result[i] = 0\n    else\n      result[i]\
    \ = math.abs(g - m)\n    end\n  end\n  return result\nend", "    local result\
    \ = {}\n    for index = 1, #game do\n        local diff = game[index] - guess[index]\n\
    \        if diff < 0 then\n            diff = diff * -1\n        end\n       \
    \ result[index] = diff\n    end\n    return result\nend", "    local result =\
    \ {}\n    for i = 1, #game do\n        if game[i] == guess[i] then\n         \
    \   result[i] = 0\n        else\n            result[i] = math.abs(game[i] - guess[i])\n\
    \        end\n    end\n    return result\nend", "  local results = {}\n  for i,\
    \ v in ipairs(game) do\n    if game[i] == guess[i] then\n      results[i] = 0\n\
    \    else\n      results[i] = math.abs(game[i] - guess[i])\n    end\n  end\n \
    \ return results\nend", "  -- return\nend", "\tlocal out = {}\n\tfor k,v in pairs(game)\
    \ do\n\t\ttable.insert(out, math.abs(v - guess[k]))\n\tend\n\treturn out\nend",
  "    local result = {}\n    for i, v in ipairs(game) do\n        result[i] = math.abs(v\
    \ - guess[i])\n    end\n    return result\nend", "  local score = {}\n  for i,\
    \ v in ipairs(game) do\n    if v == guess[i] then\n      score[i] = 0\n    else\n\
    \      score[i] = math.abs(v - guess[i])\n    end\n  end\n  return score\nend",
  "  local results = {}\n  for i, _ in ipairs(game) do\n    if game[i] > guess[i]\
    \ then\n      results[i] = game[i] - guess[i]\n    elseif game[i] < guess[i] then\n\
    \      results[i] = guess[i] - game[i]\n    else\n      results[i] = 0\n    end\n\
    \  end\n  return results\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        local diff = math.abs(game[i] - guess[i])\n        result[i] = diff\n\
    \    end\n    return result\nend", "    local res = {}\n    for i = 1, #game do\n\
    \        res[i] = math.abs(game[i] - guess[i])\n    end\n    return res\nend",
  "  local result = {}\n  for i = 1, #game do\n    local diff = math.abs(game[i] -\
    \ guess[i])\n    table.insert(result, diff)\n  end\n  return result\nend\nprint(unpack(compare({1,\
    \ 2, 3}, {1, 2, 3}))) -- {0, 0, 0}\nprint(unpack(compare({1, 2, 3}, {2, 2, 3})))\
    \ -- {1, 0, 0}\nprint(unpack(compare({1, 2, 3}, {3, 2, 1}))) -- {2, 0, 2}", "\t\
    if (#game ~= #guess) then return nil end\n\tlocal diff = {}\n\tfor i = 1, #game\
    \ do\n\t\tdiff[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn diff\nend",
  "    local result = {}\n    for i,v in ipairs(game) do\n        if game[i] == guess[i]\
    \ then\n            result[i] = 0\n        else\n            result[i] = math.abs(game[i]\
    \ - guess[i])\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  for i, v in ipairs(game) do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend\nprint(table.concat(compare({1,2,3}, {2,3,4}), ','))\
    \ -- 1,1,1\nprint(table.concat(compare({1,2,3}, {1,2,3}), ',')) -- 0,0,0\nprint(table.concat(compare({1,2,3},\
    \ {1,1,1}), ',')) -- 0,1,2", "    local result = {}\n    for k,v in pairs(game)\
    \ do\n        if game[k] == guess[k] then\n            result[k] = 0\n       \
    \ else \n            result[k] = math.abs(game[k] - guess[k])\n        end\n \
    \   end\n    return result\nend", "  local result = {}\n  for i,v in ipairs(game)\
    \ do\n    result[i] = math.abs(v - guess[i])\n  end\n  return result\nend", " \
    \   if game == guess then\n        return 0\n    else\n        return math.abs(game\
    \ - guess)\n    end\nend", "    local res = {}\n    for i, v in ipairs(game) do\n\
    \        res[i] = math.abs(v - guess[i])\n    end\n    return res\nend", "   \
    \ local result = {}\n    for i = 1, #game do\n        result[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return result\nend", "  local res = {}\n  for i =\
    \ 1, #game do\n    res[i] = game[i] - guess[i]\n    if res[i] < 0 then\n     \
    \ res[i] = - res[i]\n    end\n  end\n  return res\nend", "\tresult = {}\n\t--loop\
    \ through the array\n\tfor i = 1,#game do\n\t\t--for each element in the array,\
    \ add the difference between the guess and the game\n\t\t--or 0 if they are the\
    \ same\n\t\tresult[i] = (game[i] ~= guess[i]) and math.abs(game[i] - guess[i])\
    \ or 0\n\tend\n\treturn result\nend", "\tlocal out = {}\n\tfor i = 1, #game do\n\
    \t\tif game[i] == guess[i] then\n\t\t\tout[i] = 0\n\t\telse\n\t\t\tout[i] = math.abs(game[i]\
    \ - guess[i])\n\t\tend\n\tend\n\treturn out\nend", "\tlocal result = {}\n\tfor\
    \ i, v in ipairs(game) do\n\t\tresult[i] = math.abs(v - guess[i])\n\tend\n\treturn\
    \ result\nend", "  local result = {}\n  for i = 1, #game do\n    if guess[i] ==\
    \ game[i] then\n      result[i] = 0\n    else\n      result[i] = math.abs(guess[i]\
    \ - game[i])\n    end\n  end\n  return result\nend", "  local result = {}\n  for\
    \ i, v in ipairs(game) do\n    if v == guess[i] then\n      result[i] = 0\n  \
    \  else\n      result[i] = math.abs(v - guess[i])\n    end\n  end\n  return result\n\
    end", "    local score = {}\n    for i = 1, #game do\n        score[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return score\nend", "  local output = {}\n  for k,v\
    \ in pairs(game) do\n    if v - guess[k] < 0 then\n      output[k] = (v - guess[k])\
    \ * -1\n    else\n      output[k] = v - guess[k]\n    end\n  end\n  return output\n\
    end", "    local result = {}\n    for i = 1, #game do\n        result[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return result\nend", "\tif #game ~= #guess then return\
    \ nil end\n\tlocal res = {}\n\tfor i = 1, #game do\n\t\tlocal diff = game[i] -\
    \ guess[i]\n\t\tif diff < 0 then diff = -diff end\n\t\tres[i] = diff\n\tend\n\t\
    return res\nend", "    local result = {}\n    for i, v in ipairs(game) do\n  \
    \      local difference = v - guess[i]\n        if difference < 0 then\n     \
    \       result[i] = difference * -1\n        else\n            result[i] = difference\n\
    \        end\n    end\n    return result\nend", "  -- body\n  local len = #game\n\
    \  local diffs = {}\n  for i = 1, len do\n    diffs[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return diffs\nend", "  local results = {}\n  for k, v in pairs(game)\
    \ do\n    local i = guess[k]\n    if i > v then\n      results[k] = i - v\n  \
    \  else\n      results[k] = v - i\n    end\n  end\n  return results\nend", " \
    \ local c = {}\n  for i = 1, #game do\n    c[i] = game[i] - guess[i]\n    if c[i]\
    \ < 0 then c[i] = -c[i] end\n  end\n  return c\nend", "\tlocal result = {}\n\t\
    for i = 1, #game do\n\t\tif game[i] < guess[i] then\n\t\t\tresult[i] = guess[i]\
    \ - game[i]\n\t\telseif game[i] > guess[i] then\n\t\t\tresult[i] = game[i] - guess[i]\n\
    \t\telse\n\t\t\tresult[i] = 0\n\t\tend\n\tend\n\treturn result\nend", "  local\
    \ result = {}\n  for k,v in pairs(game) do\n    if(type(v) == \"number\") then\n\
    \      table.insert(result, math.abs(v - guess[k]))\n    end\n  end\n  return\
    \ result\nend", "  local res = {}\n  for i = 1, #game do\n    res[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return res\nend", "\tlocal result = {}\n\tfor i = 1, #game\
    \ do\n\t\tif game[i] > guess[i] then\n\t\t\tresult[i] = game[i] - guess[i]\n\t\
    \telseif game[i] < guess[i] then\n\t\t\tresult[i] = guess[i] - game[i]\n\t\telse\n\
    \t\t\tresult[i] = 0\n\t\tend\n\tend\n\treturn result\nend", "    local t = {}\n\
    \    for i = 1, #game do\n        t[i] = math.abs(game[i] - guess[i])\n    end\n\
    \    return t\nend", "  local diff = {}\n  for i = 1, #game do\n    diff[i] =\
    \ math.abs(game[i] - guess[i])\n  end\n  return diff\nend", "  local arr = {}\n\
    \  local count = 1\n  for k, v in pairs(game) do\n    arr[count] = math.abs(v\
    \ - guess[k])\n    count = count + 1\n  end\n  return arr\nend", "    local result\
    \ = {}\n    for k, v in pairs(game) do\n        if game[k] == guess[k] then\n\
    \            result[k] = 0\n        else\n            result[k] = math.abs(game[k]\
    \ - guess[k])\n        end\n    end\n    return result\nend", "    local output\
    \ = {}\n    for key,_ in pairs(game) do\n        if(game[key] == guess[key]) then\n\
    \            output[key] = 0\n        else\n            output[key] = math.abs(game[key]\
    \ - guess[key])\n        end\n    end\n    return output\nend", "    local results\
    \ = {}\n    for i = 1, #game do\n        results[i] = math.abs(game[i] - guess[i])\n\
    \    end\n    return results\nend", "\tlocal guess_valid = false\n\tlocal result\
    \ = {}\n\tif type(game) == \"table\" and type(guess) == \"table\" then\n\t\tif\
    \ #game == #guess then\n\t\t\tfor i,v in ipairs(game) do\n\t\t\t\tif v == guess[i]\
    \ then\n\t\t\t\t\ttable.insert(result, 0)\n\t\t\t\telse\n\t\t\t\t\ttable.insert(result,\
    \ math.abs(v - guess[i]))\n\t\t\t\tend\n\t\t\tend\n\t\t\tguess_valid = true\n\t\
    \tend\n\tend\n\treturn guess_valid, result\nend", "  local result = {}\n  for\
    \ i = 1, #game do\n    if guess[i] == game[i] then\n      result[i] = 0\n    else\n\
    \      result[i] = math.abs(guess[i] - game[i])\n    end\n  end\n  return result\n\
    end", "  local res = {}\n  for i = 1, #game do\n    res[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return res\nend", "  local res = {}\n  for i = 1, #game\
    \ do\n    res[i] = math.abs(game[i] - guess[i])\n  end\n  return res\nend", " \
    \ local res = {}\n  for i = 1, #game do\n    res[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return res\nend", "    if game == guess then return 0 end\n    return\
    \ math.abs(game - guess)\nend", "    local result = {}\n    for i, score in ipairs(game)\
    \ do\n        result[i] = math.abs(score - guess[i])\n    end\n    return result\n\
    end", "    local diff = {}\n    for i, n in ipairs(game) do\n        local d =\
    \ math.abs(n - guess[i])\n        table.insert(diff, d)\n    end\n    return diff\n\
    end", "    local result = {}\n    local n = #game\n    for i = 1, n do\n     \
    \   result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\nend",
  "  local score = {}\n  for i,v in ipairs(game) do\n    local diff = math.abs(v -\
    \ guess[i])\n    table.insert(score, diff)\n  end\n  return score\nend", "  local\
    \ result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        result[i] = game[i] - guess[i]\n        if result[i] < 0 then result[i]\
    \ = result[i] * -1 end\n    end\n    return result\nend", "  local result = {}\n\
    \  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return result\nend", "\tlocal res = {}\n\tfor i = 1, #game do\n\t\tres[i] =\
    \ game[i] - guess[i]\n\t\tif res[i] < 0 then\n\t\t\tres[i] = -res[i]\n\t\tend\n\
    \tend\n\treturn res\nend", "    local r = {}\n    for k, v in pairs(game) do\n\
    \        table.insert(r, math.abs(v - guess[k]))\n    end\n    return r\nend",
  "    local result = {}\n    for i, val in ipairs(game) do\n        if val == guess[i]\
    \ then\n            result[i] = 0\n        else\n            result[i] = math.abs(val\
    \ - guess[i])\n        end\n    end\n    return result\nend", "  for k, v in pairs(game)\
    \ do\n    if v > guess[k] then\n      guess[k] = v - guess[k]\n    elseif v <\
    \ guess[k] then\n      guess[k] = guess[k] - v\n    else\n      guess[k] = 0\n\
    \    end\n  end\n  return guess\nend", "    local result = {}\n    for i,v in\
    \ ipairs(game) do\n        local score = game[i]\n        local guess = guess[i]\n\
    \        local distance = math.abs(score - guess)\n        table.insert(result,\
    \ distance)\n    end\n    return result\nend", "    local res = {}\n    for i\
    \ = 1, #game do\n        res[i] = math.abs(game[i] - guess[i])\n    end\n    return\
    \ res\nend", "    local result = {}\n    for i = 1, #game do\n        if game[i]\
    \ == guess[i] then\n            result[i] = 0\n        else\n            result[i]\
    \ = math.abs(game[i] - guess[i])\n        end\n    end\n    return result\nend",
  "  local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] -\
    \ guess[i])\n  end\n  return result\nend", "\tif type(game) == \"table\" and type(guess)\
    \ == \"table\" then\n\t\tif #game == #guess then\n\t\t\tlocal tb = {}\n\t\t\t\
    for i = 1, #game do\n\t\t\t\tif game[i] == guess[i] then\n\t\t\t\t\ttb[i] = 0\n\
    \t\t\t\telse\n\t\t\t\t\ttb[i] = math.abs(game[i] - guess[i])\n\t\t\t\tend\n\t\t\
    \tend\n\t\t\treturn tb\n\t\tend\n\tend\nend", "    local res = {}\n    for i =\
    \ 1, #game do\n        res[i] = math.abs(game[i] - guess[i])\n    end\n    return\
    \ res\nend", "    local result = {}\n    for i = 1, #game do\n        result[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n    return result\nend", "  local res\
    \ = {}\n  for i, v in ipairs(game) do\n    res[i] = math.abs(v - guess[i])\n \
    \ end\n  return res\nend", "    local result = {}\n    for i, n in ipairs(game)\
    \ do\n        if n == guess[i] then\n            result[i] = 0\n        else\n\
    \            result[i] = math.abs(n - guess[i])\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for k, score in ipairs(game) do\n    table.insert(result,\
    \ score - guess[k])\n  end\n  return result\nend", "    local results = {}\n \
    \   for k,v in pairs(game) do\n        results[k] = math.abs(v - guess[k])\n \
    \   end\n    return results\nend", "  local res = {}\n  for k, v in pairs(game)\
    \ do\n    res[k] = math.abs(v - guess[k])\n  end\n  return res\nend", "  local\
    \ result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "    local answer = {}\n    for i = 1, #game do\n\
    \        answer[i] = math.abs(game[i] - guess[i])\n    end\n    return answer\n\
    end", "\tlocal res = {}\n\tfor i, v in ipairs(game) do\n\t\tres[i] = math.abs(v\
    \ - guess[i])\n\tend\n\treturn res\nend", "  local result = {}\n  for k,v in pairs(game)\
    \ do\n    if v ~= guess[k] then\n      result[k] = math.abs(v - guess[k])\n  \
    \  else\n      result[k] = 0\n    end\n  end\n  return result\nend", "  local\
    \ difference = {}\n  for i = 1, #game do\n    local d = math.abs(game[i] - guess[i])\n\
    \    table.insert(difference, d)\n  end\n  return difference\nend", "  if #game\
    \ ~= #guess then return false end\n  for i = 1, #game do\n    if game[i] ~= guess[i]\
    \ then\n      guess[i] = math.abs(game[i] - guess[i])\n    end\n  end\n  return\
    \ guess\nend", "    local result = {}\n    for i, item in ipairs(game) do\n  \
    \      if item == guess[i] then\n            result[i] = 0\n        else\n   \
    \         result[i] = math.abs(item - guess[i])\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for i = 1, #game do\n    local off = math.abs(game[i]\
    \ - guess[i])\n    table.insert(result, off)\n  end\n  return result\nend", " \
    \   local result = {}\n    for i = 1, #game do\n        result[i] = math.abs(game[i]\
    \ - guess[i])\n    end\n    return result\nend", "    local res = {}\n    for\
    \ i = 1, #game do\n        res[i] = math.abs(game[i] - guess[i])\n    end\n  \
    \  return res\nend", "    local result = {}\n    for i,v in ipairs(game) do\n\
    \        if v > guess[i] then \n            table.insert(result, v - guess[i])\n\
    \        else\n            table.insert(result, guess[i] - v)\n        end\n \
    \   end\n    return result\nend\n \nl", "  local res = {}\n  for k, v in pairs(game)\
    \ do\n    res[k] = math.abs(game[k] - guess[k])\n  end\n  return res\nend", " \
    \ local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] -\
    \ guess[i])\n  end\n  return result\nend", "  local result = {}\n  for i,v in\
    \ ipairs(game) do\n    if game[i] == guess[i] then\n      result[i] = 0\n    else\n\
    \      result[i] = math.abs(game[i] - guess[i])\n    end\n  end\n  return result\n\
    end", "    return game:map(function(a, i) return math.abs(a - guess[i]) end)\n\
    end", "  local res = {}\n  for i, g in ipairs(guess) do\n    res[i] = math.abs(game[i]\
    \ - g)\n  end\n  return res\nend", "    local result = {}\n    for i = 1, #game\
    \ do\n        local diff = math.abs(game[i] - guess[i])\n        result[i] = diff\n\
    \    end\n    return result\nend", "  local res = {}\n  for i, v in ipairs(game)\
    \ do\n    res[i] = math.abs(v - guess[i])\n  end\n  return res\nend", "\tlocal\
    \ res = {}\n\tfor i,v in ipairs(game) do\n\t\tres[i] = math.abs(v - guess[i])\n\
    \tend\n\treturn res\nend", "    local result = {}\n    for i = 1, #game do\n \
    \       if game[i] == guess[i] then\n            result[i] = 0\n        else\n\
    \            result[i] = math.abs(game[i] - guess[i])\n        end\n    end\n\
    \    return result\nend\nreturn compare", "  local result = {}\n  for k,v in pairs(game)\
    \ do\n    if v == guess[k] then\n      result[k] = 0\n    else\n      result[k]\
    \ = math.abs(guess[k] - v)\n    end\n  end\n  return result\nend", "    local\
    \ results = {}\n    for i, v in ipairs(game) do\n        local diff = v - guess[i]\n\
    \        if diff < 0 then diff = -diff end\n        results[i] = diff\n    end\n\
    \    return results\nend", "    local result = {}\n    for i = 1, #game do\n \
    \       if game[i] == guess[i] then\n            result[i] = 0\n        else\n\
    \            result[i] = math.abs(game[i] - guess[i])\n        end\n    end\n\
    \    return result\nend", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\tif\
    \ game[i] > guess[i] then\n\t\t\tresult[i] = game[i] - guess[i]\n\t\telseif game[i]\
    \ < guess[i] then\n\t\t\tresult[i] = guess[i] - game[i]\n\t\telse\n\t\t\tresult[i]\
    \ = 0\n\t\tend\n\tend\n\treturn result\nend", "  local res = {}\n  for i, v in\
    \ ipairs(game) do\n    res[i] = math.abs(v - guess[i])\n  end\n  return res\n\
    end", "    local result = {}\n    for i = 1, #game do\n        if game[i] > guess[i]\
    \ then\n            result[i] = game[i] - guess[i]\n        elseif game[i] < guess[i]\
    \ then\n            result[i] = guess[i] - game[i]\n        else\n           \
    \ result[i] = 0\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(v - guess[i])\n\
    \  end\n  return result\nend", "  local comparision = {}\n  for k,v in pairs(game)\
    \ do\n    table.insert(comparision, math.abs(v - guess[k]))\n  end\n  return comparision\n\
    end\nprint(unpack(compare({1, 2, 3}, {1, 2, 3}))) --> 0 0 0\nprint(unpack(compare({1,\
    \ 2, 3}, {2, 2, 3}))) --> 1 0 0\nprint(unpack(compare({1, 2, 3}, {3, 2, 1})))\
    \ --> 2 1 2\nprint(unpack(compare({7, 6, 5, 4, 3, 2, 1}, {7, 6, 5, 4, 3, 2, 1})))\
    \ --> 0 0 0 0 0 0 0\nprint(unpack(compare({7, 6, 5, 4, 3, 2, 1}, {6, 6, 5, 4,\
    \ 3, 2, 1}))) --> 1 0 0 0 0 0 0\nprint(unpack(compare({7, 6, 5, 4, 3, 2, 1}, {7,\
    \ 7, 5, 4, 3, 2, 1}))) --> 0 1 0 0 0 0 0\nprint(unpack(compare({7, 6, 5, 4, 3,\
    \ 2, 1}, {1, 1, 1, 1, 1, 1, 1}))) --> 6 5 4 3 2 1 0\nprint(unpack(compare({7,\
    \ 6, 5, 4, 3, 2, 1}, {7, 5, 3, 1, 2, 4, 6}))) --> 0 1 2 3 2 1 0\nprint(unpack(compare({10,\
    \ 20, 10, 40, 50, 60, 70}, {1, 2, 1, 4, 5, 6, 7}))) --> 9 18 9 36 45 54 63\nprint(unpack(compare({11,\
    \ 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 7}))) --> 10 10 10 10 10 10 10\n\
    print(unpack(compare({1, 2, 3, 4, 5, 6, 7}, {11, 12, 13, 14, 15, 16, 17}))) -->\
    \ 10 10 10 10 10 10 10\nprint(unpack", "    local result = {}\n    for i, v in\
    \ ipairs(game) do\n        if v ~= guess[i] then\n            result[i] = math.abs(v\
    \ - guess[i])\n        else\n            result[i] = 0\n        end\n    end\n\
    \    return result\nend\ncompare({1,2,3}, {2,2,3}) -- {1,0,0}\ncompare({1,2,3},\
    \ {4,5,6}) -- {3,3,3}\ncompare({1,2,3}, {1,2,3}) -- {0,0,0}", "    local diff\
    \ = {}\n    for i, v in ipairs(game) do\n        diff[i] = math.abs(v - guess[i])\n\
    \    end\n    return diff\nend", "  for k, v in pairs(game) do\n    if v > guess[k]\
    \ then\n      guess[k] = v - guess[k]\n    elseif v < guess[k] then\n      guess[k]\
    \ = guess[k] - v\n    elseif v == guess[k] then\n      guess[k] = 0\n    end\n\
    \  end\n  return guess\nend", "\tlocal res = {}\n\tlocal scores = game:split(',')\n\
    \tlocal guesses = guess:split(',')\n\tfor i,v in ipairs(scores) do\n\t\tres[i]\
    \ = math.abs(tonumber(v) - tonumber(guesses[i]))\n\tend\n\treturn table.concat(res,',')\n\
    end\nreturn compare", "    local count = {}\n    for i = 1, #game do\n       \
    \ local match = {}\n        table.insert(match, math.abs(game[i] - guess[i]))\n\
    \        table.insert(count, match)\n    end\n    return count\nend", "  local\
    \ result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "    local ans = {}\n    for i = 1, #game do\n\
    \        if game[i] > guess[i] then ans[i] = game[i] - guess[i] end\n        if\
    \ game[i] < guess[i] then ans[i] = guess[i] - game[i] end\n        if game[i]\
    \ == guess[i] then ans[i] = 0 end\n    end\n    return ans\nend", "  local result\
    \ = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(v - guess[i])\n\
    \  end\n  return result\nend\nprint(unpack(compare({1,2,3}, {1,2,3}))) --> 0 0\
    \ 0\nprint(unpack(compare({1,2,3}, {3,2,1}))) --> 2 0 2\nprint(unpack(compare({1,2,3},\
    \ {0,2,1}))) --> 1 0 2", "  local results = {}\n  for i = 1, #game do\n    results[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return results\nend", "\tlocal res\
    \ = {}\n\tfor i = 1, #game do\n\t\tres[i] = math.abs(game[i] - guess[i])\n\tend\n\
    \treturn res\nend", "    local results = {}\n    for idx, g in ipairs(guess) do\n\
    \        results[idx] = math.abs(game[idx] - g)\n    end\n    return results\n\
    end", "  local result = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return result\nend", "    local result = {}\n    for i\
    \ = 1, #game do\n        local diff = math.abs(game[i] - guess[i])\n        table.insert(result,\
    \ diff)\n    end\n    return result\nend", "  local res = {}\n  for i = 1, #game\
    \ do\n    res[i] = math.abs(game[i] - guess[i])\n  end\n  return res\nend", " \
    \   local result = {}\n    for k,v in pairs(game) do\n        result[k] = math.abs(v\
    \ - guess[k])\n    end\n    return result\nend", "    local diff = {}\n    for\
    \ i,g in ipairs(guess) do\n        diff[i] = math.abs(g - game[i])\n    end\n\
    \    return diff\nend", "    local result = {}\n    for i, v in ipairs(game) do\n\
    \        if game[i] ~= guess[i] then\n            table.insert(result, math.abs(game[i]\
    \ - guess[i]))\n        else\n            table.insert(result, 0)\n        end\n\
    \    end\n    return result\nend", "  local result = {}\n  for i = 1, #game do\n\
    \    local diff = math.abs(game[i] - guess[i])\n    result[i] = diff\n  end\n\
    \  return result\nend", "    local result = {}\n    for i, v in ipairs(game) do\n\
    \        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "  local result = {}\n  for index, value in ipairs(game) do\n    result[index]\
    \ = math.abs(value - guess[index])\n  end\n  return result\nend", "  local result\
    \ = {}\n  for i,v in ipairs(game) do\n    result[i] = v - guess[i]\n    if result[i]\
    \ < 0 then\n      result[i] = -result[i]\n    end\n  end\n  return result\nend",
  "\tlocal res = {}\n\tfor i, v in ipairs(game) do\n\t\tres[i] = math.abs(v - guess[i])\n\
    \tend\n\treturn res\nend", "  local result = {}\n  for i,v in ipairs(game) do\n\
    \    result[i] = v < guess[i] and guess[i] - v or v - guess[i]\n  end\n  return\
    \ result\nend", "    local ans = {}\n    for i,v in ipairs(game) do\n        local\
    \ diff = v - guess[i]\n        ans[i] = math.abs(diff)\n    end\n    return ans\n\
    end", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i]\
    \ - guess[i])\n\tend\n\treturn result\nend", "\tlocal diff = {}\n\tfor k, v in\
    \ pairs(game) do\n\t\tdiff[k] = math.abs(v - guess[k])\n\tend\n\treturn diff\n\
    end", "  if #game ~= #guess then\n    error('game and guess lengths are not equal')\n\
    \  end\n  local result = {}\n  for i, v in ipairs(game) do\n    if guess[i] ~=\
    \ v then\n      table.insert(result, math.abs(guess[i] - v))\n    else\n     \
    \ table.insert(result, 0)\n    end\n  end\n  return result\nend", "\tlocal result\
    \ = {}\n\tfor i = 1, #game do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\t\
    end\n\treturn result\nend\nassert(compare({1, 2, 3}, {1, 2, 3}) == {0, 0, 0})\n\
    assert(compare({1, 2, 3}, {2, 1, 3}) == {1, 1, 0})\nassert(compare({1, 2, 3},\
    \ {3, 2, 1}) == {2, 0, 2})\nassert(compare({5, 6, 7}, {3, 6, 10}) == {2, 0, 3})\n\
    assert(compare({5, 9, 7}, {8, 6, 10}) == {3, 3, 3})", "    local distance = {}\n\
    \    for i = 1, #game do\n        table.insert(distance, math.abs(game[i] - guess[i]))\n\
    \    end\n    return distance\nend", "    local ret = {}\n    for i,v in ipairs(game)\
    \ do\n        ret[i] = math.abs(v - guess[i])\n    end\n    return ret\nend",
  "    local res = {}\n    for i, v in ipairs(game) do\n        res[i] = math.abs(v\
    \ - guess[i])\n    end\n    return res\nend", "  local n = #game\n  local res\
    \ = {}\n  for i = 1, n do\n    res[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return res\nend", "  if game:len() == guess:len() then\n    local a = {}\n\
    \    for i = 1, #game do\n      a[i] = math.abs(game[i] - guess[i])\n    end\n\
    \    return a\n  end\nend", "  local result = {}\n  for i = 1, #game do\n    local\
    \ diff = math.abs(game[i] - guess[i])\n    table.insert(result, diff)\n  end\n\
    \  return result\nend", "  local result = {}\n  for i = 1, #game do\n    if game[i]\
    \ > guess[i] then\n      result[i] = game[i] - guess[i]\n    elseif game[i] <\
    \ guess[i] then\n      result[i] = guess[i] - game[i]\n    else\n      result[i]\
    \ = 0\n    end\n  end\n  return result\nend\nprint(table.concat(compare({7,2,4,6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4",
  "  local diffs = {}\n  for i = 1, #game do\n    diffs[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return diffs\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "    local diff = {}\n    for i = 1, #game do\n        table.insert(diff,\
    \ math.abs(game[i] - guess[i]))\n    end\n    return diff\nend", "  local result\
    \ = {}\n  for i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n\
    \  end\n  return result\nend", "    local result = {}\n    for i = 1, #game do\n\
    \        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "    local result = {}\n    local i = 1\n    while game[i] ~= nil and guess[i]\
    \ ~= nil do\n        if game[i] == guess[i] then\n            result[i] = 0\n\
    \        else\n            result[i] = math.abs(game[i] - guess[i])\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "  local result = {}\n \
    \ for i,v in ipairs(game) do\n    result[i] = math.abs(game[i] - guess[i])\n \
    \ end\n  return result\nend", "    local result = {}\n    for index = 1, #game\
    \ do\n        local score = game[index]\n        local g = guess[index]\n    \
    \    if g == score then\n            result[index] = 0\n        else\n       \
    \     result[index] = math.abs(g - score)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for k, v in pairs(game) do\n        if guess[k]\
    \ > v then\n            result[k] = guess[k] - v\n        else\n            result[k]\
    \ = v - guess[k]\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(v - guess[i])\n\
    \  end\n  return result\nend", "    local res = {}\n    for i, g in ipairs(guess)\
    \ do\n        res[i] = math.abs(game[i] - g)\n    end\n    return res\nend", " \
    \   local results = {}\n    for i,v in ipairs(game) do\n        if guess[i] ==\
    \ v then\n            results[i] = 0\n        else\n            results[i] = math.abs(guess[i]\
    \ - v)\n        end\n    end\n    return results\nend", "    local output = {}\n\
    \    for i = 1, #game do\n        local x = math.abs(game[i] - guess[i])\n   \
    \     output[i] = x\n    end\n    return output\nend\nassert(compare({1, 2, 3},\
    \ {1, 2, 3}) == {0, 0, 0})\nassert(compare({1, 2, 3}, {2, 1, 3}) == {1, 1, 0})\n\
    assert(compare({1, 2, 3}, {3, 2, 1}) == {2, 0, 2})\nassert(compare({3, 2, 1},\
    \ {1, 2, 3}) == {2, 0, 2})\nassert(compare({1, 5, 3, 1}, {1, 1, 1, 1}) == {0,\
    \ 4, 2, 0})\nassert(compare({1, 5, 3}, {1, 1, 1}) == {0, 4, 2})\nassert(compare({1,\
    \ 5, 3}, {1, 1, 1, 1}) == {0, 4, 2, 0})\nassert(compare({1, 2, 3}, {1, 2, 3, 1})\
    \ == {0, 0, 0, 0})\nassert(compare({1, 2, 3}, {1, 2, 3, 1, 3}) == {0, 0, 0, 0,\
    \ 0})", "  local res = {}\n  for i, v in ipairs(game) do\n    if v == guess[i]\
    \ then\n      res[i] = 0\n    else\n      res[i] = math.abs(v - guess[i])\n  \
    \  end\n  end\n  return res\nend", "    local result = {}\n    for i = 1, #game\
    \ do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n    return result\n\
    end", "  local points = {}\n  for i = 1, #game do\n    if game[i] == guess[i]\
    \ then\n      points[i] = 0\n    else\n      points[i] = math.abs(game[i] - guess[i])\n\
    \    end\n  end\n  return points\nend", "\tlocal diffs = {}\n\tfor i = 1, #game\
    \ do\n\t\tdiffs[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn diffs\nend",
  "  local result = {}\n  for i, v in ipairs(game) do\n    result[i] = math.abs(v\
    \ - guess[i])\n  end\n  return result\nend", "    local result = {}\n    for i\
    \ = 1, #game do\n        result[i] = math.abs(game[i] - guess[i])\n    end\n \
    \   return result\nend", "    local res = {}\n    for i = 1, #game do\n      \
    \  res[i] = math.abs(game[i] - guess[i])\n    end\n    return res\nend", "  local\
    \ _game = {}\n  local _guess = {}\n  for i = 1, #game do\n    _game[i] = game[i]\n\
    \    _guess[i] = guess[i]\n  end\n  local result = {}\n  for i = 1, #_game do\n\
    \    result[i] = _game[i] == _guess[i] and 0 or math.abs(_game[i] - _guess[i])\n\
    \  end\n  return result\nend", "  local table = {}\n  for i,v in ipairs(game)\
    \ do\n    table[i] = math.abs(v - guess[i])\n  end\n  return table\nend\nreturn\
    \ compare", "    local result = {}\n    for i = 1, #game do\n        result[i]\
    \ = math.abs(game[i] - guess[i])\n    end\n    return result\nend", "    --local\
    \ result = {}\n    for i, _ in ipairs(game) do\n        if guess[i] > game[i]\
    \ then\n            guess[i] = guess[i] - game[i]\n        elseif guess[i] < game[i]\
    \ then\n            guess[i] = game[i] - guess[i]\n        else\n            guess[i]\
    \ = 0\n        end\n    end\n    return guess\nend", "    local result = {}\n\
    \    for i, v in ipairs(game) do\n        if v == guess[i] then\n            result[i]\
    \ = 0\n        else\n            result[i] = math.abs(v - guess[i])\n        end\n\
    \    end\n    return result\nend", "    local res = {}\n    for i, v in ipairs(game)\
    \ do\n        res[i] = (v == guess[i]) and 0 or math.abs(v - guess[i])\n    end\n\
    \    return res\nend", "  local t = {}\n  for i = 1, #game do\n    if game[i]\
    \ == guess[i] then\n      t[i] = 0\n    else\n      t[i] = math.abs(game[i] -\
    \ guess[i])\n    end\n  end\n  return t\nend\nassert(compare({1,2,3}, {1,2,3})[1]\
    \ == 0)\nassert(compare({1,2,3}, {2,2,3})[1] == 1)\nassert(compare({1,2,3}, {3,2,1})[1]\
    \ == 2)\nassert(compare({1,2,3}, {1,2,1})[1] == 2)", "  local result = {}\n  for\
    \ i = 1, #game do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n  return\
    \ result\nend", "    local res = {}\n    for i, v in ipairs(game) do\n       \
    \ if v == guess[i] then\n            res[i] = 0\n        else\n            res[i]\
    \ = math.abs(v - guess[i])\n        end\n    end\n    return res\nend", "  local\
    \ result = {}\n  for k, v in pairs(game) do\n    result[k] = v - guess[k]\n  end\n\
    \  return result\nend", "  local results = {}\n  for i = 1, #game do\n    results[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return results\nend", "    local results\
    \ = {}\n    for i = 1, #game do\n        results[i] = game[i] - guess[i]\n   \
    \     if results[i] < 0 then results[i] = results[i] * -1 end\n    end\n    return\
    \ results\nend", "    local result = {}\n    for i, j in ipairs(game) do\n   \
    \     if game[i] > guess[i] then\n            result[i] = game[i] - guess[i]\n\
    \        elseif game[i] < guess[i] then\n            result[i] = guess[i] - game[i]\n\
    \        else\n            result[i] = 0\n        end\n    end\n    return result\n\
    end\nprint(table.concat(compare({1, 2, 3}, {1, 2, 3}), \", \")) --> 0, 0, 0\n\
    print(table.concat(compare({1, 2, 3}, {2, 2, 3}), \", \")) --> 1, 0, 0\nprint(table.concat(compare({1,\
    \ 2, 3}, {3, 2, 1}), \", \")) --> 2, 0, 2\nprint(table.concat(compare({5, 9, 7},\
    \ {9, 5, 7}), \", \")) --> 4, 4, 0\nprint(table.concat(compare({5, 9, 7}, {9,\
    \ 7, 5}), \", \")) --> 4, 2, 2\nprint(table.concat(compare({5, 9, 7}, {5, 9, 7}),\
    \ \", \")) --> 0, 0, 0\nprint(table.concat(compare({1, 2, 3}, {3, 2, 1}), \",\
    \ \")) --> 2, 0, 2\nprint(table.concat(compare({1, 2, 3}, {1, 2, 1}), \", \"))\
    \ --> 0, 0, 2\nprint(table.concat(compare({1, 2, 3}, {1, 2, 3}), \", \")) -->\
    \ 0, 0, 0\nprint(table.concat(compare({1, 2, 3}, {1, 2, 2}), \", \")) --> 0, 0,\
    \ 1\nprint(table.concat(compare({2, 2, 3}, {1, 2, 2}), \", \")) --> 1, 0, 1\n\
    print(table.concat(compare({2, 2, 3}, {1, 2, 3}), \", \")) --> 1, 0, 0\nprint(",
  "  local n = #game\n  local result = {}\n  for i = 1, n do\n    result[i] = math.abs(game[i]\
    \ - guess[i])\n  end\n  return result\nend", "  local result = {}\n  for i = 1,\
    \ #game do\n    local diff = math.abs(game[i] - guess[i])\n    result[i] = diff\n\
    \  end\n  return result\nend", "\tlocal result = {}\n\tfor i = 1, #game do\n\t\
    \tresult[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn result\nend", "  \
    \  local r = {}\n    for i,v in ipairs(game) do\n        r[i] = math.abs(v - guess[i])\n\
    \    end\n    return r\nend", "  local res = {}\n  for k, v in pairs(game) do\n\
    \    res[k] = math.abs(v - guess[k])\n  end\n  return res\nend", "    local result\
    \ = {}\n    for i, v in ipairs(game) do\n        if v == guess[i] then\n     \
    \       result[i] = 0\n        else\n            result[i] = math.abs(v - guess[i])\n\
    \        end\n    end\n    return result\nend", "\tlocal res = {}\n\tfor i, score\
    \ in ipairs(game) do\n\t\tif score == guess[i] then\n\t\t\tres[i] = 0\n\t\telse\n\
    \t\t\tres[i] = math.abs(score - guess[i])\n\t\tend\n\tend\n\treturn res\nend",
  "    local score = {}\n    for i = 1, #game do\n        local x = math.abs(game[i]\
    \ - guess[i])\n        score[i] = x\n    end\n    return score\nend", "  local\
    \ t = {}\n  for i = 1, #game do\n    t[i] = math.abs(game[i] - guess[i])\n  end\n\
    \  return t\nend", "    local result = {}\n    for i, v in ipairs(game) do\n \
    \       result[i] = math.abs(v - guess[i])\n    end\n    return result\nend",
  "  local new_array = {}\n  for i = 1, #game do\n    if game[i] == guess[i] then\n\
    \      new_array[i] = 0\n    else\n      new_array[i] = math.abs(game[i] - guess[i])\n\
    \    end\n  end\n  return new_array\nend", "\tlocal diffs = {}\n\tfor i = 1, #game\
    \ do\n\t\tdiffs[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn diffs\nend",
  "\tlocal ret = {}\n\tfor k,v in pairs(game) do\n\t\tret[k] = math.abs(v - guess[k])\n\
    \tend\n\treturn ret\nend", "  local result = {}\n  for i = 1, #game do\n    result[i]\
    \ = math.abs(game[i] - guess[i])\n  end\n  return result\nend", "  --[[\n  local\
    \ out = {}\n  for i,v in ipairs(game) do\n    if (game[i] == guess[i]) then\n\
    \      out[i] = 0\n    else\n      out[i] = math.abs(game[i] - guess[i])\n   \
    \ end\n  end\n  return out\n  --]]\n  return {table.unpack(guess):map(function(x,i)\n\
    \    return x==game[i] and 0 or math.abs(x-game[i])\n  end)}\nend", "  local result\
    \ = {}\n  for i,v in ipairs(game) do\n    result[i] = math.abs(v - guess[i])\n\
    \  end\n  return result\nend", "  local result = {}\n  for i, v in ipairs(game)\
    \ do\n    result[i] = math.abs(game[i] - guess[i])\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, #game do\n    local n = math.abs(game[i] - guess[i])\n\
    \    table.insert(result, n)\n  end\n  return result\nend", "\tlocal scores =\
    \ {}\n\tfor i = 1, #game do\n\t\tlocal score = game[i] - guess[i]\n\t\tif score\
    \ < 0 then\n\t\t\tscore = score * -1\n\t\tend\n\t\ttable.insert(scores, score)\n\
    \tend\n\treturn scores\nend", "\tlocal result = {}\n\tfor i, _ in ipairs(game)\
    \ do\n\t\tresult[i] = math.abs(game[i] - guess[i])\n\tend\n\treturn result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
