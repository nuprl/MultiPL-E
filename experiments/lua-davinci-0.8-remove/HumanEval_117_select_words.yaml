name: HumanEval_117_select_words
language: lua
prompt: "-- Given a string s and a natural number n, you have been tasked to implement\
  \ \n-- a function that returns a list of all words from string s that contain exactly\
  \ \n-- n consonants, in order these words appear in the string s.\n-- If the string\
  \ s is empty then the function should return an empty list.\n-- Note: you may assume\
  \ the input string contains only letters and spaces.\n-- Examples:\nlocal function\
  \ select_words(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
  \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary\
  \ had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
  \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
  \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
  \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_consonant(c)\n    local vowels = 'aeiou'\n    return\
    \ not (c == ' ' or vowels:find(c))\n  end\n  local function count_consonants(w)\n\
    \    local count = 0\n    for i = 1, #w do\n      if is_consonant(w:sub(i, i))\
    \ then\n        count = count + 1\n      end\n    end\n    return count\n  end\n\
    \  local words = {}\n  for w in s:gmatch('%w+') do\n    if count_consonants(w)\
    \ == n then\n      words[#words + 1] = w\n    end\n  end\n  return words\nend\n\
    print(unpack(select_words('good luck', 2)))\nprint(unpack(select_words('success\
    \ is not magic but hard work', 4)))\nprint(unpack(select_words('', 0)))\nprint(unpack(select_words('k',\
    \ 0)))\nprint(unpack(select_words('a', 0)))", "  local function is_consonant(c)\n\
    \    local vowels = 'aeiou'\n    for i = 1, #vowels do\n      if c == vowels:sub(i,\
    \ i) then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local words = {}\n  local word = ''\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c ~= ' ' then\n      word = word .. c\n    else\n      local count\
    \ = 0\n      for i = 1, #word do\n        if is_consonant(word:sub(i, i)) then\n\
    \          count = count + 1\n        end\n      end\n      if count == n then\n\
    \        words[#words + 1] = word\n      end\n      word = ''\n    end\n  end\n\
    \  local count = 0\n  for i = 1, #word do\n    if is_consonant(word:sub(i, i))\
    \ then\n      count = count + 1\n    end\n  end\n  if count == n then\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend\nassert(deep_compare({'the', 'the',\
    \ 'the', 'the', 'the', 'the', 'the', 'the', 'the', 'on', 'on', 'on', 'on', 'on',\
    \ 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on',\
    \ 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on',\
    \ 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on',\
    \ 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on',\
    \ 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on', 'on", "  local res\
    \ = {}\n  for w in s:gmatch('%S+') do\n    local count = 0\n    for letter in\
    \ w:gmatch('[^aeiouAEIOU]+') do\n      count = count + 1\n    end\n    if count\
    \ == n then table.insert(res, w) end\n  end\n  return res\nend", "    local words\
    \ = {}\n    for word in s:gmatch(\"%w+\") do\n        if count_consonants(word)\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend", "  local res = {}\n  local a = 0\n  local m = 0\n  local\
    \ i = 1\n  local prev = ''\n  while i <= #s do\n    local c = s:sub(i, i)\n  \
    \  if c == ' ' then\n      if m == n then\n        local w = s:sub(a + 1, i -\
    \ 1)\n        if prev ~= w then\n          res[#res + 1] = w\n          prev =\
    \ w\n        end\n      end\n      a = i\n      m = 0\n    elseif c:find('[^aeiouAEIOU]')\
    \ then\n      m = m + 1\n    end\n    i = i + 1\n  end\n  if m == n then\n   \
    \ local w = s:sub(a + 1, #s)\n    if prev ~= w then\n      res[#res + 1] = w\n\
    \    end\n  end\n  return res\nend", "    local words = split(s)\n    local result\
    \ = {}\n    for i, word in ipairs(words) do\n        if count_consonants(word)\
    \ == n then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return result\nend", "  local words = {}\n  for w in s:gmatch(\"%w+\") do\n\
    \    if consonants(w) == n then\n      table.insert(words, w)\n    end\n  end\n\
    \  return words\nend", "    local l = s:lower():gsub(\"[^%w%s]\", \"\"):split(\"\
    %s+\")\n    local r = {}\n    for _, v in ipairs(l) do\n        if count_consonants(v)\
    \ == n then\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend", "  -- your code here\nend", "  -- this one looks ugly\n  -- return\
    \ s:match'('..('([bcdfghjklmnpqrstvwxz]%s*)*'):rep(n)..'%a+)'\n  -- this one looks\
    \ less ugly\n  return s:match'('..('([bcdfghjklmnpqrstvwxz]%s*)*'):rep(n)..'(%a+%s*))'\n\
    end", "  local words = {}\n  for word in s:gmatch(\"%w+\") do\n    local num =\
    \ 0\n    for c in word:gmatch(\"[^aeiou]\") do\n      num = num + 1\n    end\n\
    \    if num == n then\n      table.insert(words, word)\n    end\n  end\n  return\
    \ words\nend", "  return string.gmatch(s, \"%a+\")\n    :filter(function(v)\n\
    \      return v:match(\"[^aeiou ]\") and #v:match(\"[^aeiou ]\") == n\n    end)\n\
    \    :totable()\nend", "    local t = {}\n    for v in s:gmatch(\"%S+\") do\n\
    \        local w = v:gsub(\"[aeiouy]\", \"\")\n        if #w == n then\n     \
    \       t[#t + 1] = v\n        end\n    end\n    return t\nend", "    -- your\
    \ code here\nend", "  local result = {}\n  for word in s:gmatch('%w+') do\n  \
    \  local count = 0\n    for char in word:gmatch('[^aeiou]') do\n      count =\
    \ count + 1\n    end\n    if count == n then\n      table.insert(result, word)\n\
    \    end\n  end\n  return result\nend", "    local words = {}\n    local word\
    \ = ''\n    for i = 1, #s do\n        local char = s:sub(i, i)\n        if char\
    \ ~= ' ' then\n            word = word .. char\n        else\n            if n\
    \ == consonants(word) then\n                table.insert(words, word)\n      \
    \      end\n            word = ''\n        end\n    end\n    if #word > 0 then\n\
    \        if n == consonants(word) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend", "\tlocal l = {}\n\tfor word in\
    \ s:gmatch(\"%w+\") do\n\t\tlocal c = 0\n\t\tfor char in word:gmatch(\"%a\") do\n\
    \t\t\tc = char:find(\"[^aeiouAEIOU]\") and c + 1 or c\n\t\tend\n\t\tif c == n\
    \ then\n\t\t\tl[#l + 1] = word\n\t\tend\n\tend\n\treturn l\nend", "  local words\
    \ = {}\n  for word in s:gmatch(\"%w+\") do\n    if word:gsub(\"[^aeiou]\", \"\"\
    ):len() == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end", "\tlocal l = {}\n\tlocal c = \"\"\n\tlocal cons = 0\n\tlocal p = 0\n\tfor\
    \ i = 1, string.len(s) do\n\t\tc = string.sub(s, i, i)\n\t\tif c == \" \" then\n\
    \t\t\tif cons == n then\n\t\t\t\tl[#l + 1] = string.sub(s, p, i - 1)\n\t\t\tend\n\
    \t\t\tcons = 0\n\t\t\tp = i + 1\n\t\telseif is_consonant(c) then\n\t\t\tcons =\
    \ cons + 1\n\t\tend\n\tend\n\tif cons == n then\n\t\tl[#l + 1] = string.sub(s,\
    \ p, -1)\n\tend\n\treturn l\nend", "    local list = {}\n    local tmp = {}\n\
    \    local res = {}\n    local str = \"\"\n    local vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    local index = 0\n    local i = 0\n    local j = 0\n  \
    \  local p = 0\n    local len = 0\n    local res_len = 0\n    s = s..\" \"\n \
    \   len = string.len(s)\n    while i < len do\n        j = i\n        while string.sub(s,\
    \ j, j) ~= \" \" do\n            table.insert(tmp, string.sub(s, j, j))\n    \
    \        j = j + 1\n        end\n        for k, v in pairs(tmp) do\n         \
    \   str = str..v\n        end\n        local str_len = string.len(str)\n     \
    \   p = 0\n        while p < str_len do\n            local flag = true\n     \
    \       for k, v in pairs(vowels) do\n                if string.sub(str, p, p)\
    \ == v then\n                    flag = false\n                    break\n   \
    \             end\n            end\n            if flag then\n               \
    \ index = index + 1\n            end\n            p = p + 1\n        end\n   \
    \     if index == n then\n            table.insert(list, str)\n        end\n \
    \       str = \"\"\n        tmp = {}\n        index = 0\n        i = j + 1\n \
    \   end\n    res_len = #list\n    i = 1\n    while i <= res_len do\n        res[i]\
    \ = list[i]\n        i = i + 1\n    end\n    return res\nend", "  -- your code\
    \ here\nend", "  local words = {}\n  local j = 1\n  local word = ''\n  for i =\
    \ 1, #s do\n    if s:sub(i, i) == ' ' then\n      if #word == n then\n       \
    \ words[j] = word\n        j = j + 1\n      end\n      word = ''\n    else\n \
    \     word = word .. s:sub(i, i)\n    end\n  end\n  if #word == n then\n    words[j]\
    \ = word\n  end\n  return words\nend", "    -- The pattern: [^aeiouAEIOU]* matches\
    \ 0 or more consecutive consonants.\n    -- We use that in the pattern below,\
    \ to match exactly n consecutive consonants:\n    local patt = (\"[^aeiouAEIOU]*\"\
    ):rep(n)\n    -- We use the patt variable in a pattern that matches the n-consonant\
    \ words in the string.\n    patt = patt .. \"[aeiouAEIOU]\"\n    local t = {}\n\
    \    for w in s:gmatch(patt) do\n        table.insert(t, w)\n    end\n    return\
    \ t\nend", "  local words = {}\n  local word = \"\"\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == \" \" then\n      if #word == n then\n        table.insert(words,\
    \ word)\n      end\n      word = \"\"\n    else\n      word = word .. c\n    end\n\
    \  end\n  if #word == n then\n    table.insert(words, word)\n  end\n  return words\n\
    end", "    if #s == 0 then return {} end\n    local words = {}\n    for match\
    \ in string.gmatch(s, \"[^%s]+\") do\n        if string.len(match) - select(2,\
    \ string.gsub(match, \"[^aeiou]\", \"\")) == n then\n            table.insert(words,\
    \ match)\n        end\n    end\n    return words\nend", "    if s:len() == 0 then\
    \ return {} end\n    local words = {}\n    for word in s:gmatch(\"%w+\") do\n\
    \        local v = 0\n        for c in word:gmatch(\"%a\") do\n            if\
    \ \"aeiou\" :find(c) == nil then\n                v = v + 1\n            end\n\
    \        end\n        if v == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend", "    local words = {}\n    local\
    \ word = {}\n    for char in s:gmatch(\"%a\") do\n        table.insert(word, char)\n\
    \    end\n    table.insert(words, table.concat(word))\n    return words\nend",
  "    local words = {}\n    for word in s:gmatch('%w+') do\n        if word:gsub('[aeiouy]',\
    \ ''):len() == n then\n            table.insert(words, word)\n        end\n  \
    \  end\n    return words\nend", "    -- TODO: implement this function!\nend",
  "    return table.pack(s:gmatch(\"%S+\")):filter(function(x)\n        return x:gsub(\"\
    [aeiouAEIOU]\", \"\"):len() == n\n    end)\nend", "    local words = {}\n    for\
    \ w in s:gmatch('%w+') do\n        if #w:gsub('[^%a]', '') == n then\n       \
    \     table.insert(words, w)\n        end\n    end\n    return words\nend", "\t\
    --print(s, n)\n\tlocal result = {}\n\tfor w in s:gmatch('[^%s]+') do\n\t\t--print(w)\n\
    \t\tlocal count = 0\n\t\tfor c in w:gmatch('[^aeiouAEIOU]') do\n\t\t\tcount =\
    \ count + 1\n\t\tend\n\t\tif count == n then\n\t\t\ttable.insert(result, w)\n\t\
    \tend\n\tend\n\treturn result\nend", "\tlocal arr = {}\n\tfor w in s:gmatch(\"\
    %S+\") do\n\t\tlocal sum = w:gsub(\"[aeiou]\", \"\"):len()\n\t\tif sum == n then\n\
    \t\t\ttable.insert(arr, w)\n\t\tend\n\tend\n\treturn arr\nend", "\tlocal function\
    \ is_consonant(c)\n\t\treturn not c:match('[aeiou]')\n\tend\n\tlocal function\
    \ count_consonants(word)\n\t\treturn word:gsub('[^aeiou]', ''):len()\n\tend\n\t\
    local words = {}\n\tfor word in s:gmatch('%w+') do\n\t\tif count_consonants(word)\
    \ == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\n\
    end", "    local words = {}\n    local current_word = {}\n    local i = 1\n  \
    \  while i <= #s do\n        local c = s:sub(i, i)\n        if c == ' ' then\n\
    \            words[#words + 1] = current_word\n            current_word = {}\n\
    \        else\n            current_word[#current_word + 1] = c\n        end\n\
    \        i = i + 1\n    end\n    words[#words + 1] = current_word\n    local selected_words\
    \ = {}\n    for i, word in ipairs(words) do\n        local consonants = 0\n  \
    \      for j, c in ipairs(word) do\n            if c:match('[^aeiou]') then\n\
    \                consonants = consonants + 1\n            end\n        end\n \
    \       if consonants == n then\n            selected_words[#selected_words +\
    \ 1] = word\n        end\n    end\n    return selected_words\nend\nassert(select_words('a\
    \ simple string', 1) == {{'s', 'i', 'm', 'p', 'l', 'e'}})\nassert(select_words('i\
    \ am a developer', 4) == {{'d', 'e', 'v', 'e', 'l', 'o', 'p', 'e', 'r'}})\nassert(select_words('i\
    \ love lua', 2) == {{'l', 'o', 'v', 'e'}, {'l', 'u', 'a'}})\nassert(select_words('',\
    \ 4) == {})", "    local words = {}\n    local data = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        table.insert(words, word)\n    end\n    for i, v in ipairs(words)\
    \ do\n        local word_consonants = v:gsub(\"[^aeiouAEIOU]\", \"\")\n      \
    \  local word_consonants_number = word_consonants:len()\n        if word_consonants_number\
    \ == n then\n            table.insert(data, v)\n        end\n    end\n    return\
    \ data\nend", "  local t, res = {}, {}\n  local c = 0\n  for i = 1, #s do\n  \
    \  if s:sub(i, i) == ' ' then c = 0 end\n    if s:sub(i, i):match('[^aeiouAEIOU]')\
    \ then c = c + 1 end\n    if s:sub(i, i) == ' ' and c == n then table.insert(res,\
    \ table.concat(t)) end\n    if s:sub(i, i) ~= ' ' then table.insert(t, s:sub(i,\
    \ i))\n    else t = {} end\n  end\n  if c == n then table.insert(res, table.concat(t))\
    \ end\n  return res\nend\nprint(table.concat(select_words('A bird in hand is worth\
    \ two in the bush', 3), ' '))", "    -- your code goes here\n    local cons =\
    \ \"bcdfghjklmnpqrstvwxyz\"\n    local consonants = {}\n    for c in s:gmatch(\"\
    %S+\") do\n        if n == #c - c:gsub(\"[^\"..cons..\"]\", \"\"):len() then\n\
    \            table.insert(consonants, c)\n        end\n    end\n    return consonants\n\
    end", "    local words = s:split(\" \")\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        local count = 0\n        for _, c in ipairs(consonants)\
    \ do\n            count = count + word:count(c)\n        end\n        if count\
    \ == n then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return result\nend", "  -- your code goes here\n  local res = {}\n  local arr\
    \ = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(arr, w)\n  end\n  for\
    \ _, v in ipairs(arr) do\n    if not v:match(\"[aeiou]\") and #v == n then\n \
    \     table.insert(res, v)\n    end\n  end\n  return res\nend", "  local result\
    \ = {}\n  for word in s:gmatch('%w+') do\n    local count = 0\n    for c in word:gmatch('[^aeiou]')\
    \ do\n      count = count + 1\n    end\n    if count == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend", "    local words = {}\n    local\
    \ word = \"\"\n    for i = 1, s:len() do\n        local c = s:sub(i, i)\n    \
    \    if c == \" \" then\n            if is_word(word) and consonants(word) ==\
    \ n then\n                table.insert(words, word)\n            end\n       \
    \     word = \"\"\n        else\n            word = word .. c\n        end\n \
    \   end\n    if is_word(word) and consonants(word) == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nassert(select_words(\"\", 0) == {})\n\
    assert(select_words(\"The quick brown fox jumps over the lazy dog\", 4) == {\"\
    brown\", \"jumps\"})\nassert(select_words(\"This is a simple sentence\", 3) ==\
    \ {\"simple\"})\nassert(select_words(\"This is a simple sentence\", 1) == {\"\
    a\", \"is\"})\nassert(select_words(\"How much wood could a woodchuck chuck\",\
    \ 2) == {\"much\", \"could\", \"wood\", \"chuck\"})\nassert(select_words(\"The\
    \ quick brown fox jumps over the lazy dog\", 6) == {})", end, "    -- TODO:\n\
    end", "    -- your code here\n    local result = {}\n    -- \u904D\u5386s\u4E2D\
    \u7684\u6240\u6709\u5355\u8BCD\n    for word in s:gmatch(\"%w+\") do\n       \
    \ -- \u8BA1\u7B97\u5355\u8BCD\u4E2D\u7684\u8F85\u97F3\u5B57\u6BCD\u7684\u4E2A\u6570\
    \n        local count = 0\n        for i = 1, #word do\n            local ch =\
    \ word:sub(i, i)\n            if \"aeiou\" :find(ch) == nil then\n           \
    \     count = count + 1\n            end\n        end\n        -- \u5982\u679C\
    \u5355\u8BCD\u4E2D\u7684\u8F85\u97F3\u5B57\u6BCD\u7684\u4E2A\u6570\u6B63\u597D\
    \u4E3An\uFF0C\u5219\u6DFB\u52A0\u5230result\u5217\u8868\u4E2D\n        if count\
    \ == n then\n            table.insert(result, word)\n        end\n    end\n  \
    \  return result\nend\nassert(select_words(\"abc def\", 0) == {\"abc\", \"def\"\
    })\nassert(select_words(\"abc def\", 1) == {})\nassert(select_words(\"abc def\"\
    , 2) == {})\nassert(select_words(\"abc def\", 3) == {})\nassert(select_words(\"\
    abc def\", 4) == {})\nassert(select_words(\"abc def\", 5) == {})\nassert(select_words(\"\
    abc def\", 6) == {})\nassert(select_words(\"\", 0) == {})\nassert(select_words(\"\
    abc def\", 10) == {})\nassert(select_words(\"abc defghi\", 1) == {\"defghi\"})\n\
    assert(select_words(\"abc defghi\", 2) == {\"defghi\"})\nassert(select_words(\"\
    abc defghi\", 3) == {\"defghi\"})\nassert(select_words(\"abc defghi\", 4) == {\"\
    defghi\"})\nassert(select_words(\"abc defghi\", 5) == {\"defghi\"})\nassert(select_words(\"\
    abc defghi\", 6) == {\"defghi\"})\nassert(select_words(\"abc defghi\", 7) == {})\n\
    assert(select_words(\"abc defghi", "  local result = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    local vowels = word:gsub(\"[^aeiou]\", \"\")\n    if #vowels ==\
    \ n then\n      table.insert(result, word)\n    end\n  end\n  return result\n\
    end", "    local words = s:split(\" \")\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        local l = #word\n        local count = 0\n    \
    \    for i = 1, l do\n            local c = word:sub(i, i)\n            if c ~=\
    \ \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" and c ~= \"\
    y\" then\n                count = count + 1\n            end\n        end\n  \
    \      if count == n then\n            table.insert(result, word)\n        end\n\
    \    end\n    return result\nend", "    local k = {}\n    for match in s:gmatch(\"\
    %w+\") do\n        local c = 0\n        for _ in match:gmatch(\"[^aeiou]\") do\n\
    \            c = c + 1\n        end\n        if c == n then\n            k[#k\
    \ + 1] = match\n        end\n    end\n    return k\nend", "\tif type(s) == \"\
    string\" and type(n) == \"number\" then\n\t\tlocal words = {}\n\t\tlocal consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n\t\tlocal c_counter = 0\n\t\tlocal word = \"\"\n\
    \t\tlocal s = s .. \" \"\n\t\tfor i = 1, #s do\n\t\t\tif string.sub(s, i, i) ~=\
    \ \" \" then\n\t\t\t\tword = word .. string.sub(s, i, i)\n\t\t\t\tif string.find(consonants,\
    \ string.sub(s, i, i)) then\n\t\t\t\t\tc_counter = c_counter + 1\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\tif c_counter == n then\n\t\t\t\t\ttable.insert(words, word)\n\
    \t\t\t\tend\n\t\t\t\tc_counter = 0\n\t\t\t\tword = \"\"\n\t\t\tend\n\t\tend\n\t\
    \treturn words\n\tend\nend", "  local words = {}\n  for w in s:gmatch('%w+') do\n\
    \    local i = 0\n    for c in w:gmatch('[^aeiou ]') do\n      i = i + 1\n   \
    \ end\n    if i == n then\n      words[#words + 1] = w\n    end\n  end\n  return\
    \ words\nend", "    local i = 0\n    local consonants = {}\n    local result =\
    \ {}\n    while i < s:len() do\n        local letter = s:sub(i, i)\n        if\
    \ letter ~= ' ' then\n            if letter ~= 'a' and letter ~= 'e' and letter\
    \ ~= 'i' and letter ~= 'o' and letter ~= 'u' then\n                consonants[#consonants\
    \ + 1] = letter\n            end\n        else\n            if #consonants ==\
    \ n then\n                result[#result + 1] = s:sub(i - #consonants, i - 1)\n\
    \            end\n            consonants = {}\n        end\n        i = i + 1\n\
    \    end\n    if #consonants == n then\n        result[#result + 1] = s:sub(i\
    \ - #consonants, i - 1)\n    end\n    return result\nend", "  local words = {}\n\
    \  for w in s:gmatch('%w+') do\n    if #w - (w:gsub('[aeiou]', '')) == n then\n\
    \      table.insert(words, w)\n    end\n  end\n  return words\nend", "  local\
    \ r = {}\n  for word in s:gmatch('%w+') do\n    if #word == n then\n      table.insert(r,\
    \ word)\n    end\n  end\n  return r\nend", "  local words = {}\n  local new_word\
    \ = ''\n  for i = 1, #s do\n    if s:sub(i, i) ~= ' ' then\n      new_word = new_word\
    \ .. s:sub(i, i)\n    else\n      if #new_word == n then\n        table.insert(words,\
    \ new_word)\n      end\n      new_word = ''\n    end\n  end\n  if #new_word ==\
    \ n then\n    table.insert(words, new_word)\n  end\n  return words\nend", "  \
    \  local words = {}\n    for word in s:gmatch(\"%S+\") do\n        local cons\
    \ = word:gsub(\"[aeiouAEIOU]\", \"\")\n        if #cons == n then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return words\nend", " \
    \   words = {}\n    for word in s:gmatch(\"%w+\") do\n        if #word - word:gsub(\"\
    [aeiou]\", \"\") == n then\n            table.insert(words, word)\n        end\n\
    \    end\n    return words\nend", "  local result = {}\n  local count = 0\n  local\
    \ temp = ''\n  for i = 1, #s do\n    if s:sub(i, i) == ' ' then\n      if count\
    \ == n then\n        table.insert(result, temp)\n      end\n      temp = ''\n\
    \      count = 0\n    else\n      temp = temp .. s:sub(i, i)\n      if not (s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u') then\n        count = count + 1\n      end\n    end\n\
    \  end\n  if count == n then\n    table.insert(result, temp)\n  end\n  return\
    \ result\nend", "    local r = {}\n    local w = s:gmatch(\"%w+\")\n    for w\
    \ in w do\n        local count = w:gsub(\"[^aeiou]\", \"\")\n        if count\
    \ == n then\n            r[#r + 1] = w\n        end\n    end\n    return r\nend",
  "  local result = {}\n  for word in s:gmatch(\"%w+\") do\n    local c = word:gsub(\"\
    [^bcdfghjklmnpqrstvwxz]\", \"\")\n    if #c == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend", "  -- your implementation\nend",
  "    local words = {}\n    local result = {}\n    for word in s:gmatch(\"%w+\")\
    \ do\n        table.insert(words, word)\n    end\n    for _, word in ipairs(words)\
    \ do\n        local cons = 0\n        for c in word:gmatch(\"[^aeiouAEIOU]+\"\
    ) do\n            cons = cons + 1\n        end\n        if cons == n then\n  \
    \          table.insert(result, word)\n        end\n    end\n    return result\n\
    end", "  -- TODO: complete the body of this function.\n  local ws = {}\n  for\
    \ w in s:gmatch(\"%w+\") do\n    if w:find(\"[^aeiou]\") and #w:gsub(\"[aeiou]\"\
    , \"\") == n then\n      table.insert(ws, w)\n    end\n  end\n  return ws\nend",
  "\tlocal words = s:split(\" \")\n\tlocal result = {}\n\tfor _, word in ipairs(words)\
    \ do\n\t\tlocal c = 0\n\t\tfor i = 1, #word do\n\t\t\tlocal letter = word:sub(i,\
    \ i)\n\t\t\tif not letter:find(\"[AEIOUaeiou]\") then\n\t\t\t\tc = c + 1\n\t\t\
    \tend\n\t\tend\n\t\tif c == n then\n\t\t\ttable.insert(result, word)\n\t\tend\n\
    \tend\n\treturn result\nend", "    if s == \"\" then return {} end\n    local\
    \ list = string_split(s, \" \")\n    local function isConsonant(letter)\n    \
    \    local letter, vowel = letter:lower(), \"aeiou\"\n        return vowel:find(letter)\
    \ == nil\n    end\n    local function count_consonants(word)\n        local cnt\
    \ = 0\n        for i = 1, #word do\n            if isConsonant(word:sub(i, i))\
    \ then\n                cnt = cnt + 1\n            end\n        end\n        return\
    \ cnt\n    end\n    local function is_n_consonants(word)\n        return count_consonants(word)\
    \ == n\n    end\n    local res = {}\n    for i = 1, #list do\n        if is_n_consonants(list[i])\
    \ then\n            res[#res + 1] = list[i]\n        end\n    end\n    return\
    \ res\nend", "  return {}\nend", "    local words = {}\n    local current = 0\n\
    \    local last = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n   \
    \     if c:find('[aeiou]') then\n            current = 0\n        else\n     \
    \       current = current + 1\n        end\n        if c == ' ' then\n       \
    \     if current == n then\n                table.insert(words, s:sub(last, i\
    \ - 1))\n            end\n            current = 0\n            last = i + 1\n\
    \        end\n    end\n    if current == n then\n        table.insert(words, s:sub(last,\
    \ #s))\n    end\n    return words\nend", "  -- TODO: you need to write a custom\
    \ filter function to be passed as the second\n  -- argument of list.filter()\n\
    \  local function filter_consonants(w)\n    local count = 0\n    for i = 1, #w\
    \ do\n      local c = w:sub(i, i)\n      if c ~= 'a' and c ~= 'e' and c ~= 'i'\
    \ and c ~= 'o' and c ~= 'u' then\n        count = count + 1\n      end\n    end\n\
    \    return count == n\n  end\n  return list.filter(string.split(s, ' '), filter_consonants)\n\
    end", "\tlocal words = {}\n\tlocal consanents = 0\n\tlocal tempword = {}\n\tfor\
    \ char in s:gmatch(\".\") do\n\t\tif char:find(\"[aeiouAEIOU]\") == nil then\n\
    \t\t\tconsanents = consanents + 1\n\t\tend\n\t\tif char:find(\"%s\") then\n\t\t\
    \tif consanents == n then\n\t\t\t\tlocal word = \"\"\n\t\t\t\tfor i = 1, #tempword\
    \ do\n\t\t\t\t\tword = word .. tempword[i]\n\t\t\t\tend\n\t\t\t\ttable.insert(words,\
    \ word)\n\t\t\tend\n\t\t\tconsanents = 0\n\t\t\ttempword = {}\n\t\telse\n\t\t\t\
    table.insert(tempword, char)\n\t\tend\n\tend\n\treturn words\nend", "  -- TODO:\
    \ implement function here\nend", "  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    if (word:gsub(\"[b-df-hj-np-tv-z]\", \"\"):len() == n) then\n \
    \     table.insert(words, word)\n    end\n  end\n  return words\nend", "  local\
    \ w = {}\n  for x in s:gmatch(\"%w+\") do\n    if #x == n then\n      table.insert(w,\
    \ x)\n    end\n  end\n  return w\nend", "\tlocal words = {}\n\tfor word in s:gmatch('%w+')\
    \ do\n\t\tlocal t_word = word:lower()\n\t\tlocal n_consonants = 0\n\t\tfor letter\
    \ in t_word:gmatch('[^aeiouy]') do\n\t\t\tn_consonants = n_consonants + 1\n\t\t\
    end\n\t\tif n_consonants == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\
    \tend\n\treturn words\nend", "  if n == 0 then return {} end\n  local t = {}\n\
    \  s:gsub(\"%S+\", function(w)\n    local m = w:gsub(\"[aeiouy]\", \"\"):len()\n\
    \    if m == n then table.insert(t, w) end\n  end)\n  return t\nend", "  -- body\n\
    end", "    words = {}\n    for w in s:gmatch(\"%S+\") do\n        consonants =\
    \ w:gsub(\"[aeiouAEIOU]\", \"\")\n        if #consonants == n then\n         \
    \   table.insert(words, w)\n        end\n    end\n    return words\nend", "  \
    \  -- todo\nend", "    local res = {}\n    for w in s:gmatch('%w+') do\n     \
    \   if #w:gsub('[aeiouyAEIOUY]', '') == n then\n            res[#res + 1] = w\n\
    \        end\n    end\n    return res\nend", "    local words = {}\n    local\
    \ word = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c\
    \ ~= ' ' then\n            word = word .. c\n        else\n            table.insert(words,\
    \ word)\n            word = ''\n        end\n    end\n    if word ~= '' then\n\
    \        table.insert(words, word)\n    end\n    local consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local count = 0\n        for j = 1, #word do\n            local c = word:sub(j,\
    \ j)\n            if consonants:find(c, 1, true) then\n                count =\
    \ count + 1\n            end\n        end\n        if count == n then\n      \
    \      table.insert(result, word)\n        end\n    end\n    return result\nend",
  "  local o={}\n  for w in s:gmatch(\"%w+\") do\n    local c = #w:gsub(\"[^bcdfghjklmnpqrstvwxz]\"\
    , \"\")\n    if c == n then\n      o[#o+1] = w\n    end\n  end\n  return o\nend",
  "    local words = {}\n    local word_start = nil\n    for i = 1, string.len(s)\
    \ do\n        local char = string.sub(s, i, i)\n        if char ~= ' ' then\n\
    \            if word_start == nil then\n                word_start = i\n     \
    \       end\n        else\n            if word_start ~= nil then\n           \
    \     local word = string.sub(s, word_start, i - 1)\n                local consonants\
    \ = string.gsub(word, '[aeiou]', '')\n                if string.len(consonants)\
    \ == n then\n                    table.insert(words, word)\n                end\n\
    \                word_start = nil\n            end\n        end\n    end\n   \
    \ if word_start ~= nil then\n        local word = string.sub(s, word_start, string.len(s))\n\
    \        local consonants = string.gsub(word, '[aeiou]', '')\n        if string.len(consonants)\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nassert(deepcompare(select_words('hey hello world', 2), {\"\
    hello\", \"world\"}))\nassert(deepcompare(select_words('', 2), {}))\nassert(deepcompare(select_words('abc\
    \ def', 4), {}))\nassert(deepcompare(select_words('abc def', 3), {\"abc\"}))\n\
    assert(deepcompare(select_words('abc def ghi jkl', 2), {\"def\", \"ghi\"}))\n\
    assert(deepcompare(select_words('abc def ghi jkl', 1), {\"jkl\"}))\nassert(deepcompare(select_words('abc\
    \ def ghi jkl', 0), {}))\nassert(deepcompare(select_words('abc def ghi jkl', -1),\
    \ {}))\nassert(deepcompare(select_words('abc def ghi jkl', 4), {}))\nassert(deepcompare(select_words('abc\
    \ def ghi jkl', 5), {}))", "    local function isConsonant(c)\n        return\
    \ not string.match(c, \"[aeiouAEIOU]\")\n    end\n    local function countConsonants(w)\n\
    \        local count = 0\n        for c in w:gmatch\".\" do\n            if isConsonant(c)\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    return count\n    end\n    local words = {}\n    for w in s:gmatch\"%w+\"\
    \ do\n        if countConsonants(w) == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend\nassert(select_words(\"abcdefg\"\
    , 0) == {})\nassert(select_words(\"abcdefg\", 3) == {})\nassert(select_words(\"\
    abcdefg\", 1) == {\"bcdefg\"})\nassert(select_words(\"abcdefg\", 2) == {\"abcdefg\"\
    })\nassert(select_words(\"abcdefg\", 7) == {})\nassert(select_words(\"\", 0) ==\
    \ {})\nassert(select_words(\"\", 1) == {})\nassert(select_words(\"A\", 1) == {\"\
    A\"})\nassert(select_words(\"B\", 1) == {\"B\"})\nassert(select_words(\"AA\",\
    \ 1) == {})\nassert(select_words(\"AB\", 1) == {\"AB\"})\nassert(select_words(\"\
    BB\", 1) == {\"BB\"})\nassert(select_words(\"Aa\", 1) == {\"Aa\"})\nassert(select_words(\"\
    AaA\", 1) == {\"AaA\"})\nassert(select_words(\"AaA\", 2) == {})\nassert(select_words(\"\
    AaAa\", 2) == {\"AaAa\"})\nassert(select_words(\"AaAa\", 3) == {})\nassert(select_words(\"\
    AaAaA\", 3) == {\"AaAaA\"})\nassert(select_words(\"AaAaA\", 4) == {})\nassert(select_words(\"\
    AaAaAa\", 4) == {\"AaAaAa\"})\nassert(select_words(\"AaA", "    local function\
    \ is_consonant(ch)\n        return string.find('bcdfghjklmnpqrstvwxyz', ch)\n\
    \    end\n    local result = {}\n    for word in string.gmatch(s, '%S+') do\n\
    \        local count = 0\n        for ch in string.gmatch(word, '%a') do\n   \
    \         if is_consonant(ch) then\n                count = count + 1\n      \
    \      end\n        end\n        if count == n then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return result\nend", "    local function num_consonants(word)\n\
    \        local num = 0\n        for i = 1, #word do\n            local c = word:sub(i,\
    \ i)\n            if not ((c == 'a') or (c == 'e') or (c == 'i') or (c == 'o')\
    \ or (c == 'u')) then\n                num = num + 1\n            end\n      \
    \  end\n        return num\n    end\n    local words = {}\n    local word = ''\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == ' ' then\n\
    \            if num_consonants(word) == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n        else\n            word\
    \ = word .. c\n        end\n    end\n    if num_consonants(word) == n then\n \
    \       table.insert(words, word)\n    end\n    return words\nend", "    local\
    \ words = {}\n    local current_word = \"\"\n    for c in s:gmatch\".\" do\n \
    \       if c == \" \" then\n            if #current_word > 0 then\n          \
    \      if consonants(current_word) == n then\n                    table.insert(words,\
    \ current_word)\n                end\n                current_word = \"\"\n  \
    \          end\n        else\n            current_word = current_word .. c\n \
    \       end\n    end\n    if #current_word > 0 then\n        if consonants(current_word)\
    \ == n then\n            table.insert(words, current_word)\n        end\n    end\n\
    \    return words\nend", end, "  local function vowel(c)\n    if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      return true\n    end\n\
    \    return false\n  end\n  local result = {}\n  for word in s:gmatch(\"%S+\"\
    ) do\n    local num_con = 0\n    for c in word:gmatch(\"%l\") do\n      if not\
    \ vowel(c) then\n        num_con = num_con + 1\n      end\n    end\n    if num_con\
    \ == n then\n      table.insert(result, word)\n    end\n  end\n  return result\n\
    end", "  local words = {}\n  for word in s:gmatch('%S+') do\n    if count_consonants(word)\
    \ == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end", "  local t = {}\n  local vowels = \"aeiouAEIOU\"\n  for w in s:gmatch(\"\
    %w+\") do\n    local c = 0\n    for c2 in w:gmatch(\"%a\") do\n      if not vowels:find(c2)\
    \ then\n        c = c + 1\n      end\n    end\n    if c == n then\n      t[#t+1]\
    \ = w\n    end\n  end\n  return t\nend", "  local function is_consonant(c)\n \
    \   return c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' and c\
    \ ~= ' '\n  end\n  local r = {}\n  local function f(t, i)\n    if i > #t then\
    \ return end\n    local c = t[i]\n    local l = (c == ' ' and {} or f(t, i + 1))\n\
    \    if is_consonant(c) then\n      l[#l + 1] = true\n    end\n    if #l == n\
    \ then\n      r[#r + 1] = table.concat(t, '', i - n, i - 1)\n    end\n    return\
    \ l\n  end\n  f(s:split('', true), 1)\n  return r\nend", "    local t = {}\n \
    \   for x in s:gmatch('%w+') do\n        local count = x:gsub('[^aeiouy]', '')\n\
    \        if #count == n then\n            table.insert(t, x)\n        end\n  \
    \  end\n    return t\nend\nprint(table.concat(select_words('this is an example',\
    \ 2), ' '))\nprint(table.concat(select_words('this is an example', 5), ' '))\n\
    print(table.concat(select_words('this is an example', 1), ' '))\nprint(table.concat(select_words('',\
    \ 5), ' '))\nprint(table.concat(select_words('this is an example', 0), ' '))\n\
    print(table.concat(select_words('', 0), ' '))\nprint(table.concat(select_words('this\
    \ is an example', 7), ' '))\nprint(table.concat(select_words('this is an example',\
    \ 3), ' '))", "  local t={}\n  for word in s:gmatch('%w+') do\n    if n==word:gsub('[aeiou\
    \ ]',''):len() then\n      t[#t+1]=word\n    end\n  end\n  return t\nend", "\t\
    local function has_exactly_n_consonants(word, n)\n\t\tlocal consonants = {\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n\t\t\t\t\t\t\
    \t\"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"}\n\t\t\
    local number_of_consonants = 0\n\t\tfor letter in word:gmatch(\"%a\") do\n\t\t\
    \tfor index, consonant in ipairs(consonants) do\n\t\t\t\tif letter == consonant\
    \ then\n\t\t\t\t\tnumber_of_consonants = number_of_consonants + 1\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\t\treturn number_of_consonants == n\n\tend\n\tlocal words\
    \ = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tif has_exactly_n_consonants(word,\
    \ n) then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\nend",
  "    local r = {}\n    for word in s:gmatch('%w+') do\n        local c = 0\n   \
    \     for c in word:gmatch('[^aeiou]') do\n            c = c + 1\n        end\n\
    \        if c == n then\n            r[#r + 1] = word\n        end\n    end\n\
    \    return r\nend\nassert(select_words('', 1) == {})\nassert(select_words('abc\
    \ xyz', 2) == {})\nassert(select_words('abc xyz', 0) == {})\nassert(select_words('abc\
    \ xyz', 3) == {'abc'})\nassert(select_words('abc xyz xyz', 1) == {'xyz', 'xyz'})\n\
    assert(select_words('abc xyz xyz', 4) == {})\nassert(select_words('abc xyz xyz',\
    \ 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz', 0) == {})\nassert(select_words('abc\
    \ xyz xyz', 0) == {})\nassert(select_words('abc xyz xyz',", "    s = s:lower()\n\
    \    local t = {}\n    for w in s:gmatch(\"%w+\") do\n        local n_cons = 0\n\
    \        for l in w:gmatch(\"[^aeiou]\") do\n            n_cons = n_cons + 1\n\
    \        end\n        if n_cons == n then\n            table.insert(t, w)\n  \
    \      end\n    end\n    return t\nend", "    local words = {}\n    for word in\
    \ s:gmatch(\"%w+\") do\n        if word:match(\"[^aeiou ]*\"):len() == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nprint(table.concat(select_words(\"i know you are strong but this is too much!\"\
    , 2), \" \"))", "    local words = {}\n    local xs = {}\n    local word = \"\"\
    \n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            table.insert(words,\
    \ word)\n            word = \"\"\n        else\n            word = word .. s:sub(i,\
    \ i)\n        end\n    end\n    table.insert(words, word)\n    for i = 1, #words\
    \ do\n        local x = words[i]:gsub(\"[aeiou]\", \"\")\n        if #x == n then\n\
    \            table.insert(xs, words[i])\n        end\n    end\n    return xs\n\
    end", "    local result = {}\n    local count = 0\n    local word = \"\"\n   \
    \ for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n\
    \            if count == n then\n                table.insert(result, word)\n\
    \            end\n            word = \"\"\n            count = 0\n        else\n\
    \            if is_consonant(c) then\n                count = count + 1\n    \
    \        end\n            word = word .. c\n        end\n    end\n    if count\
    \ == n then\n        table.insert(result, word)\n    end\n    return result\n\
    end", "    if s == '' then return {} end\n    local t = {}\n    for word in s:gmatch('%w+')\
    \ do\n        if count_consonants(word) == n then\n            table.insert(t,\
    \ word)\n        end\n    end\n    return t\nend", "\tlocal function word_contains_n_consonants(word,\
    \ n)\n\t\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\t\tlocal consonants = 0\n\
    \t\tfor i = 1, #word do\n\t\t\tlocal c = word:sub(i, i)\n\t\t\tif not table.contains(vowels,\
    \ c) then\n\t\t\t\tconsonants = consonants + 1\n\t\t\tend\n\t\tend\n\t\treturn\
    \ consonants == n\n\tend\n\tlocal words = {}\n\tfor word in s:gmatch('[%w]*')\
    \ do\n\t\tif word ~= '' and word_contains_n_consonants(word, n) then\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\tend\n\treturn words\nend", "    local words = {}\n    for\
    \ word in s:gmatch(\"%w+\") do\n        local count = 0\n        for ch in word:gmatch(\"\
    [^aeiouAEIOU]\") do\n            count = count + 1\n        end\n        if count\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend", "    s = string.gsub(s, \"[^%w]+\", \" \")\n    local words\
    \ = {}\n    for w in string.gmatch(s, \"[%w'-]+\") do\n        if string.len(w)\
    \ - string.len(string.gsub(w, \"[aeiou]\", \"\")) == n then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return words\nend", "  local words = {}\n  local\
    \ current_word = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    if\
    \ char ~= ' ' then\n      current_word = current_word .. char\n    else\n    \
    \  if current_word ~= '' then\n        table.insert(words, current_word)\n   \
    \     current_word = ''\n      end\n    end\n  end\n  if current_word ~= '' then\n\
    \    table.insert(words, current_word)\n  end\n  local consonants = {'B', 'C',\
    \ 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W',\
    \ 'X', 'Y', 'Z'}\n  local result = {}\n  for i = 1, #words do\n    local word\
    \ = words[i]\n    local count = 0\n    for j = 1, #word do\n      local char =\
    \ word:sub(j, j)\n      for k = 1, #consonants do\n        if char == consonants[k]\
    \ then\n          count = count + 1\n        end\n      end\n    end\n    if count\
    \ == n then\n      table.insert(result, word)\n    end\n  end\n  return result\n\
    end", "\tif not s or #s == 0 then\n\t\treturn {}\n\tend\n\tlocal result = {}\n\
    \tlocal function is_consonant(ch)\n\t\treturn not ch:match(\"[aeiouyAEIOUY]\"\
    )\n\tend\n\tlocal words = s:split(\" \")\n\tfor i, word in ipairs(words) do\n\t\
    \tlocal count = 0\n\t\tfor ch in word:gmatch(\"%a\") do\n\t\t\tif is_consonant(ch)\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == n then\n\
    \t\t\ttable.insert(result, word)\n\t\tend\n\tend\n\treturn result\nend", "   \
    \ local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ w)\n    end\n    local function filter(w)\n        local count = 0\n       \
    \ for c in w:gmatch(\"[bcdfghjklmnpqrstvwxz]\") do\n            count = count\
    \ + 1\n        end\n        return count == n\n    end\n    return List.filter(filter,\
    \ words)\nend", "    -- body\nend", "  local words = {}\n  for word in s:gmatch('%w+')\
    \ do\n    local chars = {}\n    for char in word:gmatch('%a') do\n      chars[#chars\
    \ + 1] = char\n    end\n    local number_of_consonants = 0\n    for _, v in ipairs(chars)\
    \ do\n      if v ~= 'a' and v ~= 'e' and v ~= 'i' and v ~= 'o' and v ~= 'u' then\n\
    \        number_of_consonants = number_of_consonants + 1\n      end\n    end\n\
    \    if number_of_consonants == n then\n      words[#words + 1] = word\n    end\n\
    \  end\n  return words\nend", "  -- Split the string\n  local words = string.split(s,\
    \ \" \")\n  local result = {}\n  for k, v in pairs(words) do\n    local cons =\
    \ select_consonants(v)\n    if #cons == n then\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "    -- your code goes here\nend", " \
    \ -- your code goes here\n  local table = {}\n  for word in s:gmatch(\"%w+\")\
    \ do\n    table[#table+1] = word\n  end\n  local function counter (word)\n   \
    \ local counter = 0\n    for letters in word:gmatch(\"[^aeiou ]\") do\n      counter\
    \ = counter + 1\n    end\n    return counter\n  end\n  local function count_eq(word)\n\
    \    if counter(word) == n then\n      return true\n    end\n  end\n  local result\
    \ = {}\n  for k, v in pairs(table) do\n    if count_eq(v) then\n      result[#result+1]\
    \ = v\n    end\n  end\n  return result\nend", "    local function is_consonant(c)\n\
    \        return c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u'\n\
    \    end\n    local function count_consonants(word)\n        local c = 0\n   \
    \     for letter in word:gmatch('.') do\n            if is_consonant(letter) then\n\
    \                c = c + 1\n            end\n        end\n        return c\n \
    \   end\n    local function is_valid(word)\n        return count_consonants(word)\
    \ == n\n    end\n    local t = {}\n    for word in s:gmatch('%w+') do\n      \
    \  if is_valid(word) then\n            table.insert(t, word)\n        end\n  \
    \  end\n    return t\nend", "    local t = s:lower():gsub(\"[^a-z]\", \" \"):gsub(\"\
    %s+\", \" \"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\"):split(\" \")\n    local\
    \ res = {}\n    for i, v in ipairs(t) do\n        if v:gsub(\"[^aeiou]\", \"\"\
    ):len() == n then\n            table.insert(res, v)\n        end\n    end\n  \
    \  return res\nend", "    local t = {}\n    local function append(i, w) t[#t+1]\
    \ = s:sub(i, w-1) end\n    local i, j = 1, s:find('%s')\n    while j do\n    \
    \    local w = j\n        while j and s:sub(j+1, j+1):match('[%a]') do\n     \
    \       j = s:find('%s', j+1)\n        end\n        if w-i > 0 and s:sub(i, w-1):match('[^aeiou]')\
    \ then\n            if s:sub(i, w-1):match('[aeiou]') then\n                local\
    \ p = s:sub(i, w-1):match('[^aeiou]')\n                if p and p:len() == n then\n\
    \                    append(i, w)\n                end\n            else\n   \
    \             append(i, w)\n            end\n        end\n        i = w+1\n  \
    \  end\n    return t\nend\nreturn select_words", "    local t = {}\n    local\
    \ i = 1\n    local k = 1\n    local cons = 0\n    while i <= #s do\n        if\
    \ s:sub(i, i) == \" \" then\n            if cons == n then\n                t[k]\
    \ = s:sub(i - #t[k], i - 1)\n                k = k + 1\n            end\n    \
    \        cons = 0\n        elseif s:sub(i, i) ~= \"a\" and s:sub(i, i) ~= \"e\"\
    \ and s:sub(i, i) ~= \"i\" and s:sub(i, i) ~= \"o\" and s:sub(i, i) ~= \"u\" then\n\
    \            if cons == 0 then\n                t[k] = \"\"\n            end\n\
    \            t[k] = t[k] .. s:sub(i, i)\n            cons = cons + 1\n       \
    \ end\n        i = i + 1\n    end\n    if cons == n then\n        t[k] = s:sub(i\
    \ - #t[k], i - 1)\n    end\n    return t\nend\nprint(select_words(\"\", 0)) -->\
    \ {}\nprint(select_words(\"beep boop\", 1)) --> {\"beep\"}\nprint(select_words(\"\
    you wish\", 2)) --> {\"wish\"}\nprint(select_words(\"today is monday\", 3)) -->\
    \ {\"today\", \"monday\"}\nprint(select_words(\"THE big PeOpLe\", 3)) --> {\"\
    THE\", \"big\", \"PeOpLe\"}\nprint(select_words(\"hello world\", 5)) --> {}",
  "  local result = {}\n  for _, word in pairs(string.split(s, \" \")) do\n    if\
    \ n == tonumber(word:gsub(\"[^aeiou]\", \"\"):len()) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend", end, "    -- your code goes here\n\
    end", "    return get_words(s):filter(function(s) return get_consonants(s) ==\
    \ n end)\nend", "    s = s or \"\"\n    local consonants = {'b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n\
    \    local word_count = {}\n    local word = \"\"\n    local filtered_words =\
    \ {}\n    for i = 1, #s do\n        word = word .. s:sub(i, i)\n        if s:sub(i,\
    \ i) == \" \" then\n            word_count[word] = 0\n            for i = 1, #word\
    \ do\n                for j = 1, #consonants do\n                    if consonants[j]\
    \ == word:sub(i, i) then\n                        word_count[word] = word_count[word]\
    \ + 1\n                    end\n                end\n            end\n       \
    \     word = \"\"\n        end\n    end\n    word_count[word] = 0\n    for i =\
    \ 1, #word do\n        for j = 1, #consonants do\n            if consonants[j]\
    \ == word:sub(i, i) then\n                word_count[word] = word_count[word]\
    \ + 1\n            end\n        end\n    end\n    for key, value in pairs(word_count)\
    \ do\n        if value == n then\n            table.insert(filtered_words, key)\n\
    \        end\n    end\n    return filtered_words\nend", "   local result = {}\n\
    \   for _, word in ipairs(s:split()) do\n      if word:count_consonants() == n\
    \ then\n         table.insert(result, word)\n      end\n   end\n   return result\n\
    end", "    local words = {}\n    for word in s:gmatch('[%w]+') do\n        local\
    \ cons_count = word:gsub('[aeiou]', ''):len()\n        if cons_count == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end", end, "    -- your code here\n    return {}\nend", "  -- your code here\n\
    end", "    local strs = {}\n    for word in s:gmatch(\"%w+\") do\n        if word:match(\"\
    ^[^aeiou]*$\") and word:len() == n then\n            table.insert(strs, word)\n\
    \        end\n    end\n    return strs\nend", "  local result = {}\n  local word_start\
    \ = 1\n  local word_end = 0\n  for i = 1, #s do\n    if s:sub(i, i) == ' ' then\n\
    \      word_end = i - 1\n      local word = s:sub(word_start, word_end)\n    \
    \  if n == num_consonants(word) then\n        table.insert(result, word)\n   \
    \   end\n      word_start = i + 1\n    end\n  end\n  -- do last word\n  local\
    \ word = s:sub(word_start, #s)\n  if n == num_consonants(word) then\n    table.insert(result,\
    \ word)\n  end\n  return result\nend", "  s = s:gsub(\"([^%a ])\", \"\")\n  local\
    \ words = {}\n  for word in s:gmatch(\"[%a-]+\") do\n    if count_consonants(word)\
    \ == n then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end", "  local selected = {}\n  local index = 1\n  local head = s:find(\"[^%s]\"\
    )\n  while head do\n    local tail = s:find(\"%s\", head)\n    local word = (tail\
    \ and s:sub(head, tail - 1)) or s:sub(head)\n    local consts = select(2, word:gsub(\"\
    [^%a]\", \"\"):gsub(\"[^aeiou]\", \"\"))\n    if consts == n then\n      selected[index]\
    \ = word\n      index = index + 1\n    end\n    head = tail and s:find(\"[^%s]\"\
    , tail)\n  end\n  return selected\nend", "    local t = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        local word_count = word:gsub(\"[^b-df-hj-np-tv-z]\", \"\")\n\
    \        if #word_count == n then\n            table.insert(t, word)\n       \
    \ end\n    end\n    return t\nend", "    local res = {}\n    local function is_consonant(c)\n\
    \        return not string.match(c, '[aeiouy ]')\n    end\n    for w in string.gmatch(s,\
    \ '[%w%s]+') do\n        local count = 0\n        for c in string.gmatch(w, '.')\
    \ do\n            if is_consonant(c) then\n                count = count + 1\n\
    \            end\n        end\n        if count == n then\n            table.insert(res,\
    \ w)\n        end\n    end\n    return res\nend", "    local words = {}\n    local\
    \ last_word = ''\n    for i=1, #s do\n        local char = s:sub(i, i)\n     \
    \   if char == ' ' then\n            last_word = ''\n        else\n          \
    \  last_word = last_word .. char\n            if not char:match('[aeiou]') then\n\
    \                if last_word:len() == n then\n                    table.insert(words,\
    \ last_word)\n                end\n            end\n        end\n    end\n   \
    \ return words\nend", "  local t = {}\n  for word in s:gmatch(\"%w+\") do\n  \
    \  if is_consonant(word, n) then\n      t[#t+1] = word\n    end\n  end\n  return\
    \ t\nend", "    if not s or type(s) ~= 'string' or not n or type(n) ~= 'number'\
    \ then\n        return false\n    end\n    local arr = {}\n    for word in s:gmatch('%S+')\
    \ do\n        local const = word:gsub('[aeiou]', '')\n        if #const == n then\n\
    \            table.insert(arr, word)\n        end\n    end\n    return arr\nend",
  "  local words, ctr = {}, 0\n  for w in s:gmatch(\"%w+\") do\n    if #w-w:gsub(\"\
    [aeiouAEIOU]\", \"\"):len() == n then\n      words[#words+1] = w\n    end\n  end\n\
    \  return words\nend", "    local function valid_word(w)\n        local c = 0\n\
    \        for i = 1, #w do\n            if not (\"aeiou\"):find(w:sub(i, i)) then\n\
    \                c = c + 1\n            end\n        end\n        return c ==\
    \ n\n    end\n    local r = {}\n    for w in (s .. \" \"):gmatch(\"(%w+)%s\")\
    \ do\n        if valid_word(w) then\n            r[#r + 1] = w\n        end\n\
    \    end\n    return r\nend", "  local answer = {}\n  for word in s:gmatch('%w+')\
    \ do\n    local cons = word:gsub('[aeiou]', '')\n    if cons:len() == n then\n\
    \      table.insert(answer, word)\n    end\n  end\n  return answer\nend", "\t\
    local words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\tif word:gsub(\"[aeiouyAEIOUY]\"\
    , \"\"):len() == n then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn\
    \ words\nend\nassert(select_words(\"\", 2) == {})\nassert(select_words(\"The bow-wow\
    \ barked.\", 2) == {\"bow-wow\", \"barked\"})\nassert(select_words(\"Eleven plus\
    \ two.\", 2) == {\"Eleven\", \"plus\"})\nassert(select_words(\"Tetraphobia\",\
    \ 2) == {\"Tetraphobia\"})\nassert(select_words(\"Three blind mice.\", 2) == {\"\
    blind\", \"mice\"})\nassert(select_words(\"The quick brown fox jumps over the\
    \ lazy dog.\", 2) == {})\nassert(select_words(\"The quick brown fox jumps over\
    \ the lazy dog.\", 3) == {\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"\
    })\nassert(select_words(\"The quick brown fox jumps over the lazy dog.\", 4) ==\
    \ {\"quick\", \"brown\", \"jumps\"})", "  local words = {}\n  for w in s:gmatch(\"\
    %w+\") do\n    local cns = w:gsub(\"[aeiou]\", \"\")\n    if #cns == n then\n\
    \      table.insert(words, w)\n    end\n  end\n  return words\nend\nprint(select_words(\"\
    a string with a lot of words\", 2))\nprint(select_words(\"foo bar\", 2))\nprint(select_words(\"\
    this is a test\", 1))\nprint(select_words(\"\", 2))", "    local result = {}\n\
    \    for word in s:gmatch(\"%w+\") do\n        if #word == n then\n          \
    \  table.insert(result, word)\n        end\n    end\n    return result\nend",
  "  if #s == 0 then return {} end\n  local res = {}\n  local acc = \"\"\n  local\
    \ acc_len = 0\n  local i = 1\n  while i <= #s do\n    if s:sub(i, i) == \" \"\
    \ then\n      if acc_len == n then\n        table.insert(res, acc)\n      end\n\
    \      acc = \"\"\n      acc_len = 0\n    else\n      if is_consonant(s:sub(i,\
    \ i)) then\n        acc_len = acc_len + 1\n      end\n      acc = acc .. s:sub(i,\
    \ i)\n    end\n    i = i + 1\n  end\n  if acc_len == n then\n    table.insert(res,\
    \ acc)\n  end\n  return res\nend", "    local words = {}\n    local position =\
    \ 1\n    local consonants = 0\n    local word = ''\n    while position <= string.len(s)\
    \ do\n        while position <= string.len(s) and string.match(s, '%s', position)\
    \ do\n            position = position + 1\n        end\n        if position <=\
    \ string.len(s) then\n            while position <= string.len(s) and not string.match(s,\
    \ '%s', position) do\n                if not string.match(s, '[aeiou]', position)\
    \ then\n                    consonants = consonants + 1\n                end\n\
    \                word = word .. string.sub(s, position, position)\n          \
    \      position = position + 1\n            end\n            if consonants ==\
    \ n then\n                table.insert(words, word)\n            end\n       \
    \     consonants = 0\n            word = ''\n        end\n    end\n    return\
    \ words\nend", "  local table = {}\n  local count = 0\n  local n = n\n  local\
    \ p = 0\n  local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1}\n  for i = 1, #s\
    \ do\n    if s:sub(i, i) == \" \" then\n      if count == n then\n        local\
    \ a = s:sub(p, i-1)\n        table[#table+1] = a\n      end\n      count = 0\n\
    \      p = i + 1\n    elseif not vowels[s:sub(i, i)] then\n      count = count\
    \ + 1\n    end\n  end\n  if count == n then\n    local a = s:sub(p, #s)\n    table[#table+1]\
    \ = a\n  end\n  return table\nend", "  -- return a list of all words that contain\
    \ exactly n consonants\n  -- i.e. 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'\n  local L = {}\n  if\
    \ s == \"\" then\n    return L\n  end\n  local words = s:gmatch('%S+')\n  for\
    \ w in words do\n    local cons = w:gmatch('[bcdfghjklmnpqrstvwxz]')\n    local\
    \ cons_count = 0\n    for c in cons do\n      cons_count = cons_count + 1\n  \
    \  end\n    if cons_count == n then\n      L[#L+1] = w\n    end\n  end\n  return\
    \ L\nend", "    local t = s:split(\" \")\n    local r = {}\n    for i, w in ipairs(t)\
    \ do\n        if w:count_consonants() == n then\n            r[#r + 1] = w\n \
    \       end\n    end\n    return r\nend", "    local t = {}\n    s:gsub(\"%S+\"\
    , function(word)\n        if (#word:gsub(\"[aeiouAEIOU]\", \"\") == n) then \n\
    \            table.insert(t, word)\n        end\n    end)\n    return t\nend",
  "\tlocal res, cnt = {}, 0\n\tfor word in s:gmatch('%S+') do\n\t\tfor letter in word:gmatch('%a')\
    \ do\n\t\t\tif not is_vowel(letter) then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\
    \tend\n\t\tif cnt == n then\n\t\t\tres[#res + 1] = word\n\t\tend\n\t\tcnt = 0\n\
    \tend\n\treturn res\nend", "    local words = {}\n    local t = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        t[#t+1] = word\n    end\n    for i = 1, #t\
    \ do\n        local word = t[i]\n        local cons = 0\n        for j = 1, #word\
    \ do\n            local ch = word:sub(j, j)\n            if not ch:match(\"[aeiouAEIOU]\"\
    ) then\n                cons = cons + 1\n            end\n        end\n      \
    \  if cons == n then\n            words[#words+1] = word\n        end\n    end\n\
    \    return words\nend", "    local words = {}\n    local word_count = 0\n   \
    \ for word in s:gmatch(\"%w+\") do\n        if num_consonants(word) == n then\n\
    \            word_count = word_count + 1\n            words[word_count] = word\n\
    \        end\n    end\n    return words\nend", "   local words = {}\n   for w\
    \ in s:gmatch('%w+') do\n      if #w - w:gsub('[aeiouAEIOU]', ''):len() == n then\n\
    \         words[#words + 1] = w\n      end\n   end\n   return words\nend", " \
    \ if type(s) ~= \"string\" or type(n) ~= \"number\" then return nil end\n  local\
    \ cons = {b=1,c=1,d=1,f=1,g=1,h=1,j=1,k=1,l=1,m=1,n=1,p=1,q=1,r=1,s=1,t=1,v=1,w=1,x=1,y=1,z=1}\n\
    \  local words = {}\n  local w = {}\n  local k = 0\n  for i = 1, #s do\n    if\
    \ s:sub(i,i) == \" \" then\n      if k == n then\n        words[#words+1] = table.concat(w)\n\
    \      end\n      w = {}\n      k = 0\n    else\n      if cons[s:sub(i,i)] then\n\
    \        k = k + 1\n      end\n      w[#w+1] = s:sub(i,i)\n    end\n  end\n  if\
    \ k == n then\n    words[#words+1] = table.concat(w)\n  end\n  return words\n\
    end", "  local words = {}\n  for w in s:gmatch('%S+') do\n    if w:gsub('[^B-DF-HJ-NP-TV-Zb-df-hj-np-tv-z]',\
    \ ''):len() == n then\n      table.insert(words, w)\n    end\n  end\n  return\
    \ words\nend", "    local words = {}\n    for word in s:gmatch(\"%w+\") do\n \
    \       table.insert(words, word)\n    end\n    local res = {}\n    for i, word\
    \ in ipairs(words) do\n        local count = word:gsub(\"[^b-df-hj-np-tv-z]\"\
    , \"\")\n        if count:len() == n then\n            table.insert(res, word)\n\
    \        end\n    end\n    return res\nend", "\tlocal string_len = string.len(s)\n\
    \tlocal current_start = 1\n\tlocal words = {}\n\tlocal consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n\tlocal counter = 0\n\tfor i = 1, string_len do\n\t\tif string.find(consonants,\
    \ string.sub(s, i, i)) then\n\t\t\tcounter = counter + 1\n\t\telseif string.sub(s,\
    \ i, i) == \" \" then\n\t\t\tif counter == n then\n\t\t\t\ttable.insert(words,\
    \ string.sub(s, current_start, i - 1))\n\t\t\tend\n\t\t\tcurrent_start = i + 1\n\
    \t\t\tcounter = 0\n\t\tend\n\tend\n\treturn words\nend", "  local res = {}\n \
    \ local word = \"\"\n  local has, last_c\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if c:find(\"%a\") then\n      if c:find(\"[aeiou]\") then\n        has\
    \ = false\n      else\n        has = true\n      end\n      last_c = i\n     \
    \ word = word .. c\n    else\n      if last_c and (i - last_c == n) then\n   \
    \     if has then\n          res[#res + 1] = word\n        end\n      end\n  \
    \    word = \"\"\n    end\n  end\n  if last_c and (i - last_c == n) then\n   \
    \ if has then\n      res[#res + 1] = word\n    end\n  end\n  return res\nend",
  "    local words = {}\n    local word = \"\"\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c ~= \" \" then\n            word = word .. c\n\
    \        else\n            words[#words + 1] = word\n            word = \"\"\n\
    \        end\n    end\n    words[#words + 1] = word\n    local result = {}\n \
    \   for _, word in ipairs(words) do\n        local consonants = 0\n        for\
    \ i = 1, #word do\n            local c = word:sub(i, i)\n            if c == \"\
    b\" or c == \"c\" or c == \"d\" or c == \"f\" or c == \"g\" or c == \"h\" or\n\
    \            c == \"j\" or c == \"k\" or c == \"l\" or c == \"m\" or c == \"n\"\
    \ or c == \"p\" or\n            c == \"q\" or c == \"r\" or c == \"s\" or c ==\
    \ \"t\" or c == \"v\" or c == \"w\" or\n            c == \"x\" or c == \"y\" or\
    \ c == \"z\" then\n                consonants = consonants + 1\n            end\n\
    \        end\n        if consonants == n then\n            result[#result + 1]\
    \ = word\n        end\n    end\n    return result\nend\nfor _,v in ipairs(select_words(\"\
    hello world my friend\", 1)) do\n    print(v)\nend\nfor _,v in ipairs(select_words(\"\
    \", 1)) do\n    print(v)\nend\nfor _,v in ipairs(select_words(\"my consonants\
    \ count is five\", 5)) do\n    print(v)\nend\nfor _,v in ipairs(select_words(\"\
    my consonants count is five\", 6)) do\n    print(v)\nend\nfor _,v in ipairs(select_words(\"\
    \", 0)) do\n    print(v)\nend\nfor _,v in ipairs(select_words(\"\", 6)) do\n \
    \   print(v)\nend\nfor _,v in ipairs(select_words(\"hello world my friend\", 0))\
    \ do\n    print(v)\nend", "  local words = {}\n  for w in s:gmatch(\"%w+\") do\n\
    \    if select(2, w:gsub(\"[^aeiou]\", \"\")) == n then\n      words[#words +\
    \ 1] = w\n    end\n  end\n  return words\nend", "    local words = {}\n    local\
    \ function count_consonants(s)\n        local found = 0\n        for i=1, #s do\n\
    \            local c = s:sub(i,i)\n            if c ~= 'a' and c ~= 'e' and c\
    \ ~= 'i' and c ~= 'o' and c ~= 'u' and c ~= ' ' then\n                found =\
    \ found + 1\n            end\n        end\n        return found\n    end\n   \
    \ for word in s:gmatch(\"%w+\") do\n        if count_consonants(word) == n then\n\
    \            table.insert(words, word)\n        end\n    end\n    return words\n\
    end", "  -- Split string into words, then filter the words\n  -- which have the\
    \ desired number of consonants.\n  return s:gmatch(\"%S+\")\n    :filter(function(word)\n\
    \      return count_consonants(word) == n\n    end)\n    :to_list()\nend", " \
    \   --[[\n        input: strin s and a natural number n\n        output: a list\
    \ of all words from string s that contain exactly n consonants,\n        in order\
    \ these words appear in the string s\n        should return an empty list if the\
    \ string s is empty\n        you may assume the input string contains only letters\
    \ and spaces\n    ]]--\n    local words = {}\n    local word_start = -1\n    local\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\"\n    local vowels = \"aeiou\"\n    local\
    \ consonant_counter = 0\n    local word_counter = 0\n    for i = 1, #s do\n  \
    \      local char = s:sub(i, i)\n        if char ~= \" \" then\n            if\
    \ word_start == -1 then\n                word_start = i\n            end\n   \
    \         if consonants:find(char) then\n                consonant_counter = consonant_counter\
    \ + 1\n            end\n        else\n            if word_start > -1 then\n  \
    \              if consonant_counter == n then\n                    words[word_counter]\
    \ = s:sub(word_start, i - 1)\n                    word_counter = word_counter\
    \ + 1\n                end\n                word_start = -1\n                consonant_counter\
    \ = 0\n            end\n        end\n    end\n    if word_start > -1 then\n  \
    \      if consonant_counter == n then\n            words[word_counter] = s:sub(word_start,\
    \ #s)\n            word_counter = word_counter + 1\n        end\n    end\n   \
    \ return words\nend", "  local res = {}\n  local lst = s:split(\" \")\n  for _,v\
    \ in ipairs(lst) do\n    if v:count_consonants() == n then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "  -- your code here\nend", "  local\
    \ res = {}\n  local i = 1\n  local len = #s\n  while i <= len do\n    local j\
    \ = i\n    local count = 0\n    while j <= len and not s:match(\"%s\", j) do\n\
    \      if not s:match(\"[aeiou]\", j) then\n        count = count + 1\n      end\n\
    \      j = j + 1\n    end\n    if count == n then\n      res[#res + 1] = s:sub(i,\
    \ j - 1)\n    end\n    i = j + 1\n  end\n  return res\nend", "    -- your code\
    \ here:\nend", "    local r = {}\n    for w in s:gmatch '%w+' do\n        if consonants(w)\
    \ == n then\n            r[#r+1] = w\n        end\n    end\n    return r\nend",
  "  -- your code here\nend", "    local words = {}\n    local w = {}\n    local res\
    \ = {}\n    for v in s:gmatch(\"%a+\") do\n        table.insert(words, v)\n  \
    \  end\n    for i, v in ipairs(words) do\n        w = v:gsub(\"[aeiou]\", \"\"\
    )\n        if #w == n then\n            table.insert(res, v)\n        end\n  \
    \  end\n    return res\nend", "  if s == '' then return {} end\n  return s:gmatch('%S+'):filter(function(w)\n\
    \    return w:gsub('[^aeiou]', ''):len() == n\n  end)\nend", "\tlocal words =\
    \ s:split(\" \")\n\tlocal count = 0\n\tlocal result = {}\n\tfor i = 1, #words\
    \ do\n\t\tcount = select_consonants(words[i])\n\t\tif count == n then\n\t\t\t\
    table.insert(result, words[i])\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ function count_consonants(word)\n        local n = 0\n        local consonants\
    \ = {'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S',\
    \ 'T', 'V', 'W', 'X', 'Y', 'Z'}\n        for c in word:upper():gmatch('.') do\n\
    \            if consonants[c] then\n                n = n + 1\n            end\n\
    \        end\n        return n\n    end\n    local function filter(words, n)\n\
    \        local ret = {}\n        for i = 1, #words do\n            if count_consonants(words[i])\
    \ == n then\n                ret[#ret + 1] = words[i]\n            end\n     \
    \   end\n        return ret\n    end\n    return filter(s:split(), n)\nend", " \
    \   if #s == 0 then return {} end\n    local cons_cnt = 0\n    local w = {}\n\
    \    local r = {}\n    for i = 1, #s do\n        if s:sub(i, i) == ' ' then\n\
    \            if cons_cnt == n then\n                table.insert(r, table.concat(w))\n\
    \            end\n            cons_cnt = 0\n            w = {}\n        else\n\
    \            table.insert(w, s:sub(i, i))\n            if not s:sub(i, i):match('[aeiou]')\
    \ then\n                cons_cnt = cons_cnt + 1\n            end\n        end\n\
    \    end\n    if cons_cnt == n then\n        table.insert(r, table.concat(w))\n\
    \    end\n    return r\nend", "  -- TODO: implement\nend", "    local ret = {}\n\
    \    local word = ''\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for _,\
    \ char in ipairs(s:split(' ')) do\n        if #word == n then\n            ret[#ret\
    \ + 1] = word\n        end\n        for i = 1, #char do\n            if not vowels[char:sub(i,\
    \ i)] then\n                word = word .. char:sub(i, i)\n            end\n \
    \       end\n    end\n    return ret\nend", "\tlocal words = {}\n\tfor word in\
    \ s:gmatch(\"%w+\") do\n\t\tif #word - word:gsub(\"[aeiou]\", \"\") == n then\n\
    \t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn words\nend", "    s\
    \ = s .. \" \"\n    local list = {}\n    local word = \"\"\n    local consonants\
    \ = 0\n    for c in s:gmatch\".\" do\n        if c ~= \" \" then\n           \
    \ if c ~= \"a\" and c ~= \"e\" and c ~= \"i\" and c ~= \"o\" and c ~= \"u\" then\n\
    \                consonants = consonants + 1\n            end\n            word\
    \ = word .. c\n        else\n            if consonants == n then\n           \
    \     table.insert(list, word)\n            end\n            word = \"\"\n   \
    \         consonants = 0\n        end\n    end\n    return list\nend", "  local\
    \ words = {}\n  for w in s:gmatch(\"%S+\") do\n    local c = 0\n    for l in w:gmatch(\"\
    %a\") do\n      if not (l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or\
    \ l == \"u\") then\n        c = c + 1\n      end\n    end\n    if c == n then\n\
    \      table.insert(words, w)\n    end\n  end\n  return words\nend", "    local\
    \ t = {}\n    for word in s:gmatch('%w+') do\n        if count_consonants(word)\
    \ == n then\n            t[#t + 1] = word\n        end\n    end\n    return t\n\
    end\nprint(table.concat(select_words('', 1), ' ')) --''\nprint(table.concat(select_words('The\
    \ World is beautiful.', 0), ' ')) --'The is beautiful'\nprint(table.concat(select_words('The\
    \ World is beautiful.', 1), ' ')) --'World'\nprint(table.concat(select_words('The\
    \ World is beautiful.', 2), ' ')) --'is'\nprint(table.concat(select_words('The\
    \ World is beautiful.', 3), ' ')) --''", "\tlocal n = n\n\tlocal s = s\n\tlocal\
    \ res = {}\n\tlocal elements = string.gmatch(s, \"[^%s]+\")\n\tlocal function\
    \ vowels(c)\n\t\tlocal v = 'aeiou'\n\t\tlocal v_ind = string.find(v, c)\n\t\t\
    if v_ind ~= nil then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\t\n\tlocal function count_consonants(word)\n\t\tlocal count = 0\n\t\t\
    for _, c in string.gmatch(word, \".\") do\n\t\t\tif not vowels(c) then\n\t\t\t\
    \tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\n\t\n\tfor word\
    \ in elements do\n\t\tif count_consonants(word) == n then\n\t\t\ttable.insert(res,\
    \ word)\n\t\tend\n\tend\n\treturn res\nend", "  local words = {}\n  local word\
    \ = ''\n  for c in s:gmatch('.') do\n    if c == ' ' then\n      if #word == n\
    \ then\n        table.insert(words, word)\n      end\n      word = ''\n    else\n\
    \      word = word .. c\n    end\n  end\n  if #word == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local res = {}\n    for word in s:gmatch(\"\
    %w+\") do\n        if vowels(word) == n then\n            res[#res + 1] = word\n\
    \        end\n    end\n    return res\nend", "  local function is_vowel(ch)\n\
    \    return string.find(\"aeiou\", ch)\n  end\n  local function count_consonants(word)\n\
    \    local n = 0\n    for i = 1, #word do\n      if not is_vowel(word:sub(i, i))\
    \ then\n        n = n + 1\n      end\n    end\n    return n\n  end\n  local words\
    \ = {}\n  for word in s:gmatch(\"%w+\") do\n    if count_consonants(word) == n\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return words\nend",
  "    -- TODO\nend", "    local words = {}\n    s:gsub(\"%w+\", function(w)\n   \
    \     local c = w:gsub(\"[aeiou]+\", \"\")\n        if #c == n then\n        \
    \    table.insert(words, w)\n        end\n    end)\n    return words\nend", " \
    \   s = s:lower()\n    local words = {}\n    local current_word = ''\n    for\
    \ i = 1, s:len() do\n        local char = s:sub(i, i)\n        if char ~= ' '\
    \ then\n            current_word = current_word .. char\n        else\n      \
    \      table.insert(words, current_word)\n            current_word = ''\n    \
    \    end\n    end\n    table.insert(words, current_word)\n    local selected_words\
    \ = {}\n    for _, word in ipairs(words) do\n        local word_consonants = word:gsub('[aeiouy]',\
    \ '')\n        if word_consonants:len() == n then\n            table.insert(selected_words,\
    \ word)\n        end\n    end\n    return selected_words\nend", "  local m = {}\n\
    \  local p = \"[B-DF-HJ-NP-TV-Zb-df-hj-np-tv-z]\"\n  for w in s:gmatch(\"%w+\"\
    ) do\n    m[#m+1] = w:gsub(p, \"\")\n  end\n  return m\nend\nassert(select_words(\"\
    this is a test string\", 1) == {\"this\", \"test\", \"string\"})\nassert(select_words(\"\
    failing test\", 2) == {\"failing\"})\nassert(select_words(\"a b c\", 4) == {})\n\
    assert(select_words(\"\", 4) == {})", "\tlocal t = {}\n\tlocal c = 0\n\tlocal\
    \ a = \"\"\n\tfor i = 1, #s do\n\t\tif string.find(\"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    , string.sub(s, i, i)) then\n\t\t\tc = c + 1\n\t\tend\n\t\tif string.find(\"AEIOUaeiou\"\
    , string.sub(s, i, i)) then\n\t\t\tc = c - 1\n\t\tend\n\t\tif c == n then\n\t\t\
    \ta = a .. string.sub(s, i, i)\n\t\tend\n\t\tif string.sub(s, i, i) == \" \" then\n\
    \t\t\tif c == n then\n\t\t\t\ttable.insert(t, a)\n\t\t\tend\n\t\t\tc = 0\n\t\t\
    \ta = \"\"\n\t\tend\n\tend\n\tif c == n then\n\t\ttable.insert(t, a)\n\tend\n\t\
    return t\nend", "    local function is_consonant(c)\n        local c = c:lower()\n\
    \        return c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u'\n\
    \    end\n    local words = {}\n    local word = ''\n    for c in s:gmatch('.')\
    \ do\n        if c == ' ' then\n            local consonants = 0\n           \
    \ for char in word:gmatch('.') do\n                if is_consonant(char) then\n\
    \                    consonants = consonants + 1\n                end\n      \
    \      end\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n        else\n            word\
    \ = word .. c\n        end\n    end\n    return words\nend", "  local words =\
    \ {}\n  for word in s:gmatch(\"%w+\") do\n    local cons = word:gsub(\"[aeiou]\"\
    , \"\")\n    if #cons == n then\n      table.insert(words, word)\n    end\n  end\n\
    \  return words\nend", "\tlocal res = {}\n\tlocal s_2 = s\n\t-- helper function\
    \ for checking for consonants\n\tlocal function cons(c)\n\t\tif c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\treturn false\n\t\telse\n\
    \t\t\treturn true\n\t\tend\n\tend\n\t-- helper function for splitting string into\
    \ words\n\tlocal function split(str, pat)\n\t\tlocal t = {}\n\t\tlocal fpat =\
    \ \"(.-)\" .. pat\n\t\tlocal last_end = 1\n\t\tlocal s, e, cap = str:find(fpat,\
    \ 1)\n\t\twhile s do\n\t\t\tif s ~= 1 or cap ~= \"\" then\n\t\t\t\ttable.insert(t,cap)\n\
    \t\t\tend\n\t\t\tlast_end = e+1\n\t\t\ts, e, cap = str:find(fpat, last_end)\n\t\
    \tend\n\t\tif last_end <= #str then\n\t\t\tcap = str:sub(last_end)\n\t\t\ttable.insert(t,\
    \ cap)\n\t\tend\n\t\treturn t\n\tend\n\t-- iterate the list of words to count\
    \ the number of consonants for each word\n\tfor i, w in ipairs(split(s_2, ' '))\
    \ do\n\t\tlocal n_cons = 0\n\t\tfor i_2, w_2 in ipairs(split(w, '')) do\n\t\t\t\
    if cons(w_2) then\n\t\t\t\tn_cons = n_cons + 1\n\t\t\tend\n\t\tend\n\t\tif n_cons\
    \ == n then\n\t\t\ttable.insert(res, w)\n\t\tend\n\tend\n\treturn res\nend", " \
    \ return {}\nend", "    local r = {}\n    for w in s:gmatch '%w+' do\n       \
    \ if #w:gsub('[aeiou]', '') == n then\n            r[#r+1] = w\n        end\n\
    \    end\n    return r\nend", "  -- your code here\nend", "    local result =\
    \ {}\n    for word in s:gmatch(\"%w+\") do\n        local consonants = string.gsub(word,\
    \ \"[aeiouAEIOU]\", \"\")\n        if #consonants == n then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return result\nend", "  local res = {}\n  for\
    \ w in s:gmatch(\"%w+\") do\n    if consonants(w) == n then res[#res+1] = w end\n\
    \  end\n  return res\nend", "  local words = {}\n  for w in s:gmatch(\"%S+\")\
    \ do\n    local chars = w:gsub(\"[^aeiou]\", \"\")\n    if #chars == n then\n\
    \      table.insert(words, w)\n    end\n  end\n  return words\nend", "\tlocal\
    \ res = {}\n\tfor w in s:gmatch('%w+') do\n\t\tlocal lw = w:lower()\n\t\tlocal\
    \ c = 0\n\t\tfor i = 1, #lw do\n\t\t\tlocal ci = lw:sub(i, i)\n\t\t\tif not(ci\
    \ == 'a' or ci == 'e' or ci == 'i' or ci == 'o' or ci == 'u') then\n\t\t\t\tc\
    \ = c + 1\n\t\t\tend\n\t\tend\n\t\tif c == n then\n\t\t\ttable.insert(res, w)\n\
    \t\tend\n\tend\n\treturn res\nend", "    -- The lines below are only for local\
    \ testing.\n    -- These lines are executed when this file is run locally.\n \
    \   -- The lines below are not executed when the tests are run.\n    io.write(\"\
    \\n\\n\\nselect_words('\", s, \"', \", n, \") == \")\n    local result = select_words(s,\
    \ n)\n    for i, v in ipairs(result) do\n        io.write(v, \" \")\n    end\n\
    \    print()\nend\nselect_words(\"The lazy dog\", 1)  -- The lazy dog\nselect_words(\"\
    The lazy dog\", 2)  -- The dog\nselect_words(\"The lazy dog\", 3)  -- The\nselect_words(\"\
    The lazy dog\", 4)  -- empty list\nselect_words(\"The lazy dog\", 5)  -- empty\
    \ list\nselect_words(\"The lazy dog\", 10) -- empty list\nselect_words(\"The lazy\
    \ dog\", 0)  -- empty list\nselect_words(\"The lazy dog\", -10) -- empty list\n\
    select_words(\"\", 1)              -- empty list\nselect_words(\"\", 5)      \
    \        -- empty list\nselect_words(\"\", 0)              -- empty list\nselect_words(\"\
    \", -10)            -- empty list\nselect_words(\"The quick brown fox jumps over\
    \ the lazy dog\", 2) -- quick brown fox jumps over the lazy dog\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 5) -- empty list\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 4) -- empty list\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 3) -- the over the\nselect_words(\"\
    The quick brown fox jumps over the lazy dog\", 1) -- the quick brown fox jumps\
    \ the lazy dog\nselect_words(\"The quick brown fox jumps over the lazy dog\",\
    \ 0) -- empty list\nselect_words(\"The quick brown fox jumps over the lazy dog\"\
    , -10) -- empty list\nselect_words(\"The quick brown fox jumps over the lazy dog\"\
    , 6) -- empty list\nselect_words(\"The quick brown fox jumps over the lazy dog\"\
    , 8) -- empty list\nselect_words(\"The quick brown fox jumps over the lazy dog\"\
    , 10) -- empty list", "    local res = {}\n    local ws = s:lower():gmatch('%w+')\n\
    \    for w in ws do\n        local c = w:gsub('[aeiou]', '')\n        if #c ==\
    \ n then\n            table.insert(res, w)\n        end\n    end\n    return res\n\
    end\nassert(select_words('We are Geeks', 1) == {})\nassert(select_words('We are\
    \ Geeks', 2) == {'are'})\nassert(select_words('We are Geeks', 4) == {'Geeks'})\n\
    assert(select_words('', 0) == {})\nassert(select_words('', 1) == {})\nassert(select_words('',\
    \ 2) == {})\nassert(select_words('', 4) == {})\nassert(select_words('We are Geeks',\
    \ 0) == {})\nassert(select_words('We are Geeks', 3) == {})\nassert(select_words('We\
    \ are Geeks', 5) == {})\nassert(select_words('We are Geeks', 6) == {})", "   local\
    \ words = {}\n   for word in s:gmatch('%w+') do\n      local consonants = word:gsub('[aeiou]',\
    \ '')\n      if #consonants == n then\n         table.insert(words, word)\n  \
    \    end\n   end\n   return words\nend", "  if type(s) ~= \"string\" or type(n)\
    \ ~= \"number\" then return nil end\n  local  words = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    if n == string.gsub(word, \"[^aeiou]\", \"\") then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend", "\t\nend", "    local result =\
    \ {}\n    local words = s:split(\" \")\n    for _, word in ipairs(words) do\n\
    \        local consonants = word:gsub(\"[^bcdfghjklmnpqrstvwxyz]\", \"\")\n  \
    \      if #consonants == n then\n            table.insert(result, word)\n    \
    \    end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
