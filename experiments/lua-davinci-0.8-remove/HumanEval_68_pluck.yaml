name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given array is empty, return [].\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local found = false\n  local index, min = 0, 0\n  for i, n in ipairs(arr)\
    \ do\n    if (n % 2 == 0) then\n      if (not found) then\n        found = true\n\
    \        index = i\n        min = n\n      elseif (n < min) then\n        index\
    \ = i\n        min = n\n      end\n    end\n  end\n  if (found) then\n    return\
    \ {min, index}\n  else\n    return {}\n  end\nend", "    local selected = arr[1]\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and (selected == nil or\
    \ v < selected) then\n            selected = v\n        end\n    end\n    return\
    \ selected and {selected, i} or {}\nend", "  -- Find the even nodes with the smallest\
    \ value\n  local smallest = 0\n  local node = nil\n  for i = 1, #arr do\n    local\
    \ value = arr[i]\n    if value > 0 and value % 2 == 0 and (smallest == 0 or value\
    \ < smallest) then\n      smallest = value\n      node = i\n    end\n  end\n \
    \ -- Return the smallest value node\n  if node then\n    return { smallest, node\
    \ }\n  else\n    return {}\n  end\nend", "  local even = arr[1]\n  local res =\
    \ {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if even == nil\
    \ or v < even then\n        even = v\n        res = {v, i}\n      end\n    end\n\
    \  end\n  return res\nend", "    local min = nil\n    local min_idx = nil\n  \
    \  for idx, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min\
    \ == nil or v < min then\n                min = v\n                min_idx = idx\n\
    \            end\n        end\n    end\n    if min == nil then\n        return\
    \ {}\n    else\n        return {min, min_idx}\n    end\nend", "    local i = 1\n\
    \    local minimum = {}\n    while arr[i] do\n        if arr[i] % 2 == 0 then\n\
    \            if not minimum[1] or arr[i] < minimum[1] then\n                minimum\
    \ = { arr[i], i }\n            end\n        end\n        i = i + 1\n    end\n\
    \    return minimum\nend", "    if #arr == 0 then return {} end\n    local min_even,\
    \ min_idx = math.huge, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ and arr[i] < min_even then\n            min_even = arr[i]\n            min_idx\
    \ = i\n        end\n    end\n    if min_idx == nil then return {} end\n    return\
    \ {min_even, min_idx}\nend", "  local minv, minindex\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if not minv or v < minv then\n        minv\
    \ = v\n        minindex = i\n      end\n    end\n  end\n  if minv then\n    return\
    \ {minv, minindex}\n  else\n    return {}\n  end\nend", "  local res = {math.huge,\
    \ math.huge}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < res[1]\
    \ then\n      res = {arr[i], i}\n    end\n  end\n  return res[1] == math.huge\
    \ and {} or res\nend", "  local smallestEven, minIndex = math.huge, math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallestEven then\n \
    \     smallestEven, minIndex = v, i\n    end\n  end\n  return smallestEven ==\
    \ math.huge and {} or { smallestEven, minIndex }\nend", "  if #arr == 0 then return\
    \ {} end\n  local min = math.huge\n  local imin = 0\n  for i,v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      imin = i\n    end\n\
    \  end\n  if min == math.huge then return {} end\n  return {min, imin}\nend",
  "  local minEven, minIx = math.huge, nil\n  for i, n in ipairs(arr) do\n    if n\
    \ % 2 == 0 and n < minEven then\n      minEven, minIx = n, i\n    end\n  end\n\
    \  return minIx and {minEven, minIx} or {}\nend", "  local m = { smallest = math.huge,\
    \ index = -1 }\n  for i = 1, #arr do\n    local n = arr[i]\n    if n % 2 == 0\
    \ and n < m.smallest then\n      m.smallest = n\n      m.index = i\n    end\n\
    \  end\n  return m.index >= 0 and { m.smallest, m.index } or {}\nend", "    local\
    \ min, idx = 10000, nil\n    for i = 1, #arr do\n        if arr[i] > 0 and arr[i]\
    \ % 2 == 0 and arr[i] < min then\n            min, idx = arr[i], i\n        end\n\
    \    end\n    return idx and {min, idx} or {}\nend", "  if #arr == 0 then return\
    \ {} end\n  local smallest = math.huge\n  local index = math.huge\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 and v < smallest then\n      smallest =\
    \ v\n      index = i\n    end\n  end\n  if smallest == math.huge then return {}\
    \ end\n  return { smallest, index }\nend", "    local result = {0, 0}\n    local\
    \ min = 10001\n    for k, v in ipairs(arr) do\n        if v % 2 == 0 and v < min\
    \ then\n            min = v\n            result = {v, k}\n        end\n    end\n\
    \    if min == 10001 then\n        return {}\n    end\n    return result\nend",
  "  local smallest_even_value, smallest_even_value_idx\n  for i, n in ipairs(arr)\
    \ do\n    if n%2 == 0 then\n      if smallest_even_value == nil or n < smallest_even_value\
    \ then\n        smallest_even_value = n\n        smallest_even_value_idx = i\n\
    \      end\n    end\n  end\n  if smallest_even_value then\n    return {smallest_even_value,\
    \ smallest_even_value_idx}\n  else\n    return {}\n  end\nend", "    local smallest_value,\
    \ smallest_index = math.huge, math.huge\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 and arr[i] % 2 == 0 and arr[i] < smallest_value then\n            smallest_value,\
    \ smallest_index = arr[i], i\n        end\n    end\n    return smallest_value\
    \ ~= math.huge and { smallest_value, smallest_index } or {}\nend", "  if #arr\
    \ == 0 then return {} end\n  local evens = {}\n  for i,n in ipairs(arr) do\n \
    \   if n % 2 == 0 then evens[i] = n end\n  end\n  if not next(evens) then return\
    \ {} end\n  local min = math.huge\n  local res = {}\n  for i,n in pairs(evens)\
    \ do\n    if n < min then\n      min = n\n      res = {min, i}\n    end\n  end\n\
    \  return res\nend", "    local min_even = nil\n    local min_even_idx = nil\n\
    \    for i, e in ipairs(arr) do\n        if (e % 2 == 0) and ((min_even == nil)\
    \ or (e < min_even)) then\n            min_even = e\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even ~= nil then\n        return {min_even,\
    \ min_even_idx}\n    else\n        return {}\n    end\nend", "  local minValue,\
    \ minIndex\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not\
    \ minValue or v < minValue then\n        minValue = v\n        minIndex = i\n\
    \      end\n    end\n  end\n  return minValue and {minValue, minIndex} or {}\n\
    end", "  local function pluckOne(arr, i)\n    return arr[i], i\n  end\n  local\
    \ smalest, smalestIndex = nil, -1\n  for i = 1, #arr do\n    if arr[i] % 2 ==\
    \ 0 then\n      if smalest == nil or arr[i] < smalest then\n        smalest, smalestIndex\
    \ = pluckOne(arr, i)\n      end\n    end\n  end\n  if smalest == nil then\n  \
    \  return {}\n  else\n    return { smalest, smalestIndex }\n  end\nend", "  local\
    \ min_index = nil\n  local min_value = nil\n  for i, v in ipairs(arr) do\n   \
    \ if v % 2 == 0 then\n      if min_value == nil or v < min_value then\n      \
    \  min_value = v\n        min_index = i\n      end\n    end\n  end\n  if min_value\
    \ ~= nil then\n    return {min_value, min_index}\n  else\n    return {}\n  end\n\
    end", "  local index = nil\n  local smallest = math.huge\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 and arr[i] < smallest then\n      smallest = arr[i]\n\
    \      index = i\n    end\n  end\n  if index == nil then\n    return {}\n  end\n\
    \  return { smallest, index }\nend", "    local minIndex = nil\n    local minValue\
    \ = nil\n    for i,v in ipairs(arr) do\n        if v % 2 == 0 then\n         \
    \   if minValue == nil or v < minValue then\n                minValue = v\n  \
    \              minIndex = i\n            end\n        end\n    end\n    if minValue\
    \ == nil then\n        return {}\n    else\n        return {minValue, minIndex}\n\
    \    end\nend", "  if #arr == 0 then return {} end\n  local evens = {}\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(evens, {\
    \ i, v })\n    end\n  end\n  if #evens == 0 then return {} end\n  local min_even\
    \ = evens[1]\n  for _, v in ipairs(evens) do\n    if v[2] < min_even[2] then\n\
    \      min_even = v\n    end\n  end\n  return min_even\nend", "  local min_even,\
    \ min_idx\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even\
    \ or v < min_even then\n        min_even = v\n        min_idx = i\n      end\n\
    \    end\n  end\n  return min_even and {min_even, min_idx} or {}\nend", "  local\
    \ idx = 1\n  local min, minIdx = math.huge, nil\n  for i = 1, #arr do\n    if\
    \ arr[i] % 2 == 0 and arr[i] < min then\n      min, minIdx = arr[i], i\n    end\n\
    \  end\n  return {min, minIdx}\nend", "  -- your code here\nend", "    local min,\
    \ result\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n       \
    \     if not min or v < min then\n                min = v\n                result\
    \ = { v, i }\n            end\n        end\n    end\n    return result\nend",
  "  local min_even, min_index = math.huge, nil\n  for i, v in ipairs(arr) do\n  \
    \  if v % 2 == 0 and v < min_even then\n      min_even, min_index = v, i\n   \
    \ end\n  end\n  return (min_even == math.huge) and {} or {min_even, min_index}\n\
    end", "  if not arr or #arr < 1 then return {} end\n  local min = math.huge\n\
    \  local index = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == math.huge\
    \ then return {} end\n  return {min, index}\nend", "    if #arr == 0 then return\
    \ {} end\n    local smallest\n    local index\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 then\n            if not smallest or v < smallest then\n\
    \                smallest = v\n                index = i\n            end\n  \
    \      end\n    end\n    if smallest then\n        return { smallest, index }\n\
    \    else\n        return {}\n    end\nend", "    local min = math.huge\n    local\
    \ idx = nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min\
    \ then\n            min = v\n            idx = i\n        end\n    end\n    if\
    \ idx then\n        return {min, idx}\n    else\n        return {}\n    end\n\
    end", "  local smallest_index, smallest_value\n  for k,v in ipairs(arr) do\n \
    \   if type(v) == 'number' and v % 2 == 0 then\n      if smallest_value == nil\
    \ or v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = k\n      end\n    end\n  end\n  if smallest_value == nil then\n    return\
    \ {}\n  else\n    return {smallest_value, smallest_index}\n  end\nend", "\tif\
    \ not arr or #arr == 0 then return {} end\n\tlocal min_even_idx, min_even_val\
    \ = -1, math.huge\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 and v < min_even_val\
    \ then\n\t\t\tmin_even_idx, min_even_val = i, v\n\t\tend\n\tend\n\tif min_even_idx\
    \ == -1 then return {} end\n\treturn { min_even_val, min_even_idx }\nend", " \
    \   local function is_even(num)\n        return num % 2 == 0\n    end", "  local\
    \ min\n  local min_pos", "    -- your code here\nend", "  local min_even_index,\
    \ min_even_value\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n     \
    \ if not min_even_value or v < min_even_value then\n        min_even_value = v\n\
    \        min_even_index = i\n      end\n    end\n  end\n  if min_even_value then\n\
    \    return { min_even_value, min_even_index }\n  else\n    return {}\n  end\n\
    end", "  local pluckedNode = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if pluckedNode[1] then\n        if arr[i] < pluckedNode[1] then\n\
    \          pluckedNode[1] = arr[i]\n          pluckedNode[2] = i\n        end\n\
    \      else\n        pluckedNode[1] = arr[i]\n        pluckedNode[2] = i\n   \
    \   end\n    end\n  end\n  return pluckedNode\nend", "  local min_value, min_index\
    \ = math.huge, nil\n  for i = 1, #arr do\n    local v = arr[i]\n    if type(v)\
    \ == 'number' and (v%2) == 0 and v < min_value then\n      min_value, min_index\
    \ = v, i\n    end\n  end\n  return (min_value < math.huge) and {min_value, min_index}\
    \ or {}\nend", "  local min, min_idx = math.huge, 0\n  for i = 1, #arr do\n  \
    \  if arr[i] % 2 == 0 and arr[i] < min then\n      min, min_idx = arr[i], i\n\
    \    end\n  end\n  return min == math.huge and {} or {min, min_idx}\nend", "\t\
    local smallest, smallest_i = 10^4, 10^4\n\tfor i,v in ipairs(arr) do\n\t\tif v\
    \ % 2 == 0 and v < smallest then\n\t\t\tsmallest, smallest_i = v, i\n\t\tend\n\
    \tend\n\treturn smallest_i == 10^4 and {} or {smallest, smallest_i}\nend", " \
    \   local min_node, min_value, min_index\n    for i, v in ipairs(arr) do\n   \
    \     if v % 2 == 0 then\n            if not min_value or v < min_value then\n\
    \                min_node = v\n                min_value = v\n               \
    \ min_index = i\n            end\n        end\n    end\n    return min_node and\
    \ {min_node, min_index} or {}\nend", "  local answer = {}\n  local minIndex =\
    \ 1\n  local minValue = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2\
    \ == 0 and v < minValue then\n      minIndex = i\n      minValue = v\n    end\n\
    \  end\n  if minValue == math.huge then\n    return {}\n  end\n  answer[1] = minValue\n\
    \  answer[2] = minIndex\n  return answer\nend", "  local min_even, min_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_even or\
    \ v < min_even then\n        min_even = v\n        min_index = i\n      end\n\
    \    end\n  end\n  return min_even and {min_even, min_index} or {}\nend", "  local\
    \ minVal = math.huge\n  local minInd = math.huge\n  for i, val in ipairs(arr)\
    \ do\n    if val % 2 == 0 and val < minVal then\n      minVal = val\n      minInd\
    \ = i\n    end\n  end\n  if minVal == math.huge then\n    return {}\n  end\n \
    \ return {minVal, minInd}\nend", "    local evens = {};\n    local smallest =\
    \ nil;\n    for i = 1, #arr do\n        local v = arr[i];\n        if v % 2 ==\
    \ 0 then\n            evens[#evens + 1] = {v, i};\n            if smallest ==\
    \ nil or v < smallest[1] then\n                smallest = evens[#evens];\n   \
    \         end\n        end\n    end\n    return smallest or {};\nend", "    local\
    \ r = {}\n    local found = 0\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if found == 0 then\n                r[1] = arr[i]\n    \
    \            r[2] = i\n                found = 1\n            elseif r[1] > arr[i]\
    \ then\n                r[1] = arr[i]\n                r[2] = i\n            end\n\
    \        end\n    end\n    return found == 0 and {} or r\nend", "    local i =\
    \ -1\n    local m = math.huge\n    for k, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < m then\n            i = k\n            m = v\n        end\n \
    \   end\n    return i > 0 and {m, i} or {}\nend", "  local min\n  local min_i\n\
    \  for i, e in ipairs(arr) do\n    if e % 2 == 0 then\n      if not min or e <\
    \ min then\n        min = e\n        min_i = i\n      end\n    end\n  end\n  if\
    \ min then\n    return {min, min_i}\n  else\n    return {}\n  end\nend", "   \
    \ if not arr or #arr == 0 then return {} end\n    local min, minIdx = math.huge,\
    \ math.huge\n    for idx, val in ipairs(arr) do\n        if val % 2 == 0 and val\
    \ < min then\n            min, minIdx = val, idx\n        end\n    end\n    if\
    \ min == math.huge then return {} end\n    return {min, minIdx}\nend", "    local\
    \ evens = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n      \
    \      table.insert(evens, { i, arr[i] })\n        end\n    end\n    if #evens\
    \ == 0 then\n        return {}\n    end\n    table.sort(evens, function(a, b)\
    \ return a[2] < b[2] end)\n    return evens[1]\nend", "  local found, min, min_i\
    \ = false, math.huge, math.huge\n  for i,v in ipairs(arr) do\n    if v % 2 ==\
    \ 0 and v < min then\n      found, min, min_i = true, v, i\n    end\n  end\n \
    \ return found and {min, min_i} or {}\nend", "  local minIndex = 0\n  local minValue\
    \ = -1\n  for i = 1, #arr do\n    local v = arr[i]\n    if v % 2 == 0 and (minValue\
    \ == -1 or v < minValue) then\n      minIndex = i\n      minValue = v\n    end\n\
    \  end\n  if minValue == -1 then\n    return {}\n  else\n    return {minValue,\
    \ minIndex}\n  end\nend", "    if #arr == 0 then return {} end\n    local smallest_even\
    \ = nil\n    local smallest_even_idx = nil\n    for i,val in ipairs(arr) do\n\
    \        if val % 2 == 0 then\n            if smallest_even == nil or val < smallest_even\
    \ then\n                smallest_even = val\n                smallest_even_idx\
    \ = i\n            end\n        end\n    end\n    if smallest_even == nil then\
    \ return {} end\n    return {smallest_even, smallest_even_idx}\nend", "    if\
    \ #arr < 1 then return {} end\n    local lowest_even = nil\n    local lowest_even_i\
    \ = nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n           \
    \ if lowest_even == nil or arr[i] < lowest_even then\n                lowest_even\
    \ = arr[i]\n                lowest_even_i = i\n            end\n        end\n\
    \    end\n    if lowest_even == nil then return {} end\n    return { lowest_even,\
    \ lowest_even_i }\nend", "    local min_even_num, min_even_idx = math.huge, 0\n\
    \    for idx, num in ipairs(arr) do\n        if num % 2 == 0 and num < min_even_num\
    \ then\n            min_even_num, min_even_idx = num, idx\n        end\n    end\n\
    \    return min_even_num == math.huge and {} or {min_even_num, min_even_idx}\n\
    end", "  if #arr < 1 then return {} end\n  local i, v = nil, math.huge\n  for\
    \ k, val in ipairs(arr) do\n    if val % 2 == 0 and val < v then\n      i, v =\
    \ k, val\n    end\n  end\n  return v == math.huge and {} or {v, i}\nend", "  \
    \  local small_value = nil\n    local small_index = nil\n    for i, v in ipairs(arr)\
    \ do\n        if (small_value == nil or v < small_value) and v % 2 == 0 then\n\
    \            small_value = v\n            small_index = i\n        end\n    end\n\
    \    if small_value == nil then\n        return {}\n    else\n        return {small_value,\
    \ small_index}\n    end\nend", "\tif #arr == 0 then return {} end\n\tlocal min\
    \ = math.huge\n\tlocal min_idx = math.huge\n\tfor idx, val in ipairs(arr) do\n\
    \t\tif val % 2 == 0 and val < min then\n\t\t\tmin = val\n\t\t\tmin_idx = idx\n\
    \t\tend\n\tend\n\tif min == math.huge then return {} end\n\treturn { min, min_idx\
    \ }\nend", "  if not next(arr) then return {} end\n  local minEven, minIdx = math.huge,\
    \ math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < minEven then\n\
    \      minEven, minIdx = v, i\n    end\n  end\n  if minEven == math.huge then\
    \ return {} end\n  return {minEven, minIdx}\nend", "    if #arr == 0 then return\
    \ {} end\n    local min_even = nil\n    local min_idx = nil\n    for i = 1, #arr\
    \ do\n        if math.mod(arr[i], 2) == 0 then\n            if min_even == nil\
    \ or arr[i] < min_even then\n                min_even = arr[i]\n             \
    \   min_idx = i\n            end\n        end\n    end\n    if min_even == nil\
    \ then return {} end\n    return {min_even, min_idx}\nend", "    local smalest_value\
    \ = math.huge\n    local smalest_idx = math.huge\n    for idx, value in ipairs(arr)\
    \ do\n        if value % 2 == 0 and value < smalest_value then\n            smalest_value\
    \ = value\n            smalest_idx = idx\n        end\n    end\n    if smalest_value\
    \ == math.huge then\n        return {}\n    end\n    return { smalest_value, smalest_idx\
    \ }\nend", "  local min, min_index = math.huge, 0\n  for i,v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min, min_index = v, i\n    end\n  end\n\
    \  return min == math.huge and {} or {min, min_index}\nend", "    local i, cnt\
    \ = 1, #arr\n    local evenIdx, evenVal = 0, math.huge\n    while i <= cnt do\n\
    \        local val = arr[i]\n        if val % 2 == 0 and val < evenVal then\n\
    \            evenIdx, evenVal = i, val\n        end\n        i = i + 1\n    end\n\
    \    return evenIdx > 0 and { evenVal, evenIdx } or {}\nend", "  local result\
    \ = {}\n  local min = math.huge\n  local minIndex\n  for i,v in ipairs(arr) do\n\
    \    if v % 2 == 0 and v < min then\n      min = v\n      minIndex = i\n    end\n\
    \  end\n  if min == math.huge then\n    return result\n  end\n  result[1] = min\n\
    \  result[2] = minIndex\n  return result\nend", "    local min, idx\n    for i\
    \ = 1, #arr do\n        local v = arr[i]\n        if v and (v % 2 == 0) and (not\
    \ min or v < min) then\n            min, idx = v, i\n        end\n    end\n  \
    \  return min and {min, idx} or {}\nend", "  local candidate = {nil, 0}\n  local\
    \ found = false\n  for i, e in ipairs(arr) do\n    if not found and e % 2 == 0\
    \ then\n      candidate = {e, i}\n      found = true\n    elseif found and e %\
    \ 2 == 0 and e < candidate[1] then\n      candidate = {e, i}\n    end\n  end\n\
    \  return candidate\nend", "    local min_even = nil\n    local min_index = -1\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min_even\
    \ == nil or v < min_even then\n                min_even = v\n                min_index\
    \ = i\n            end\n        end\n    end\n    if min_even == nil then\n  \
    \      return {}\n    else\n        return {min_even, min_index}\n    end\nend",
  "    local r = {}\n    for i = 1, #arr do\n        if (arr[i] % 2 == 0) then\n \
    \           r[#r + 1] = i\n        end\n    end\n    if (#r == 0) then\n     \
    \   return {}\n    end\n    table.sort(r, function(a, b)\n        return arr[a]\
    \ < arr[b]\n    end)\n    return {arr[r[1]], r[1]}\nend", "  local min = math.huge\n\
    \  local idx\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n\
    \      min = v\n      idx = i\n    end\n  end\n  if min == math.huge then return\
    \ {} end\n  return {min, idx}\nend", "  local idx = -1\n  local smallest = math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v > 0 and v % 2 == 0 and v < smallest then\n\
    \      smallest = v\n      idx = i\n    end\n  end\n  if idx == -1 then\n    return\
    \ {}\n  end\n  return { smallest, idx }\nend", "    if #arr == 0 then return {}\
    \ end\n    local ans = {}\n    local min_val, min_idx\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if not min_val or arr[i] < min_val\
    \ then\n                min_val = arr[i]\n                min_idx = i\n      \
    \      end\n        end\n    end\n    if min_val then\n        return {min_val,\
    \ min_idx}\n    else\n        return {}\n    end\nend", "  local minEven = -1\n\
    \  local minEvenIx = 0\n  for ix, value in ipairs(arr) do\n    if value%2 == 0\
    \ and value < minEven then\n      minEven = value\n      minEvenIx = ix\n    end\n\
    \  end\n  if minEven == -1 then\n    return {}\n  else\n    return {minEven, minEvenIx}\n\
    \  end\nend", "    local m_v, m_i = math.huge, nil\n    for i,v in ipairs(arr)\
    \ do\n        if v > 0 and v % 2 == 0 and v < m_v then\n            m_v, m_i =\
    \ v, i\n        end\n    end\n    return m_i and {m_v, m_i} or {}\nend", "   local\
    \ min_even = math.huge\n   local result   = {}\n   for i,v in ipairs(arr) do\n\
    \      if v % 2 == 0 and v < min_even then\n         min_even = v\n         result\
    \ = {v, i}\n      end\n   end\n   return result\nend", "  local min_value, min_index\n\
    \  for i, v in ipairs(arr) do\n    if math.fmod(v, 2) == 0 then\n      if not\
    \ min_value or v < min_value then\n        min_value = v\n        min_index =\
    \ i\n      end\n    end\n  end\n  return {min_value, min_index}\nend", "  local\
    \ i, n = 1, 0\n  while arr[i] do\n    if arr[i] % 2 == 0 and (arr[i] < n or n\
    \ == 0) then\n      n = arr[i]\n    end\n    i = i + 1\n  end\n  return n ~= 0\
    \ and {n, i - 1} or {}\nend", "    -- We'll use a set to keep track of the smallest\
    \ even number.\n    local even = Set.new()\n    local smallest, smallestIndex\
    \ = math.huge, math.huge\n    -- Iterate over the array,\n    for i, x in ipairs(arr)\
    \ do\n        -- Try to add the number to the set.\n        local ok = even:add(x)\n\
    \        -- If the addition failed, then it's not even.\n        if not ok then\n\
    \            -- But if it's less than the smallest number (or the set is empty),\n\
    \            if smallest > x or even:empty() then\n                -- then update\
    \ the smallest number.\n                smallest = x\n                smallestIndex\
    \ = i\n            end\n        end\n    end\n    -- If the set was never updated,\
    \ we have no even numbers,\n    if even:empty() then\n        -- so return {}.\n\
    \        return {}\n    else\n        -- Otherwise, return the smallest even number,\n\
    \        return { smallest, smallestIndex }\n    end\nend", "    -- YOUR CODE\
    \ HERE\n    if arr[1] then\n        return pluck(arr[1])\n    else\n        local\
    \ minIndex = 1\n        local min = math.huge\n        for i = 1, #arr do\n  \
    \          if not arr[i] then break end\n            if math.mod(arr[i], 2) ==\
    \ 0 and arr[i] < min then\n                min = arr[i]\n                minIndex\
    \ = i\n            end\n        end\n        if min < math.huge then\n       \
    \     return {min, minIndex}\n        else\n            return {}\n        end\n\
    \    end\nend", "    local min, minIdx\n    for i, v in ipairs(arr) do\n     \
    \   if v % 2 == 0 then\n            if not min or v < min then\n             \
    \   min = v\n                minIdx = i\n            end\n        end\n    end\n\
    \    return min and {min, minIdx} or {}\nend\nassert.same({}, pluck({}))\nassert.same({},\
    \ pluck({1, 1, 1, 1}))\nassert.same({2, 1}, pluck({2, 1, 1, 1}))\nassert.same({2,\
    \ 1}, pluck({2, 1, 3, 5}))\nassert.same({2, 1}, pluck({2, 1, 3, 5, 7, 11}))\n\
    assert.same({4, 2}, pluck({1, 4, 3, 5, 7, 11}))\nassert.same({4, 1}, pluck({4,\
    \ 1, 3, 5, 7, 11}))\nassert.same({4, 3}, pluck({1, 3, 4, 5, 7, 11}))\nassert.same({4,\
    \ 4}, pluck({1, 3, 5, 4, 7, 11}))\nassert.same({4, 5}, pluck({1, 3, 5, 7, 4, 11}))\n\
    assert.same({4, 6}, pluck({1, 3, 5, 7, 11, 4}))", "  local min = math.huge\n \
    \ local minIndex = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0\
    \ and v < min then\n      min = v\n      minIndex = i\n    end\n  end\n  if min\
    \ ~= math.huge then\n    return {min, minIndex}\n  end\n  return {}\nend", " \
    \ if #arr == 0 then return {} end\n  local min = math.huge\n  local idx = 1\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min =\
    \ v\n      idx = i\n    end\n  end\n  if min == math.huge then return {} end\n\
    \  return {min, idx}\nend", "  local smallest = 2 ^ 31 - 1\n  local result = {}\n\
    \  for i, item in ipairs(arr) do\n    if item % 2 == 0 and item < smallest then\n\
    \      smallest = item\n      result = { smallest, i }\n    end\n  end\n  return\
    \ result\nend", "    local min = {0xffffff, -1}\n    for i = 1, #arr do\n    \
    \    if arr[i] % 2 == 0 and arr[i] < min[1] then\n            min[1] = arr[i]\n\
    \            min[2] = i\n        end\n    end\n    if min[2] >= 0 then\n     \
    \   return min\n    end\n    return {}\nend", "  local nums = {}\n  for k, v in\
    \ ipairs(arr) do\n    if (v % 2 == 0) then\n      nums[#nums + 1] = { v, k }\n\
    \    end\n  end\n  table.sort(nums, function(a, b) return a[1] < b[1] end)\n \
    \ if (#nums == 0) then\n    return {}\n  end\n  return nums[1]\nend", "  local\
    \ min, min_pos\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if\
    \ not min or v < min then\n        min = v\n        min_pos = i\n      end\n \
    \   end\n  end\n  return min and {min, min_pos} or {}\nend", "  if not arr then\
    \ return {} end\n  local minVal, minIndex\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      if not minVal or v < minVal then\n        minVal = v\n\
    \        minIndex = i\n      end\n    end\n  end\n  if minVal then\n    return\
    \ {minVal, minIndex}\n  else\n    return {}\n  end\nend", "    local res = { }\n\
    \    local n = #arr\n    local i = 0\n    while i < n do\n        local j = i\
    \ + 1\n        while j < n do\n            if arr[i] % 2 == 0 and arr[j] % 2 ==\
    \ 0 then\n                if arr[i] < arr[j] then\n                    j = n\n\
    \                else\n                    i = j\n                end\n      \
    \      elseif arr[i] % 2 == 0 then\n                j = n\n            elseif\
    \ arr[j] % 2 == 0 then\n                i = j\n            else\n            \
    \    j = j + 1\n            end\n        end\n        if arr[i] % 2 == 0 then\n\
    \            return { arr[i], i }\n        end\n        i = i + 1\n    end\n \
    \   return res\nend", "  local minValue, minIndex\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if not minValue or v < minValue then\n        minValue\
    \ = v\n        minIndex = i\n      end\n    end\n  end\n  return minValue and\
    \ {minValue, minIndex} or {}\nend", "    local min = math.huge\n    local index\
    \ = 0\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n\
    \            min = v\n            index = i\n        end\n    end\n    if min\
    \ == math.huge then\n        return {}\n    end\n    return {min, index}\nend",
  "  local evens = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      evens[#evens\
    \ + 1] = { arr[i], i }\n    end\n  end\n  table.sort(evens, function(a, b) return\
    \ a[1] < b[1] end)\n  return #evens == 0 and {} or evens[1]\nend", "\tlocal min,\
    \ min_i = nil, nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\
    \tif min == nil or v < min then\n\t\t\t\tmin, min_i = v, i\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn min == nil and {} or { min, min_i }\nend\nreturn pluck", "  --\
    \ your code goes here\nend", "  local min, min_idx = math.huge, -1\n  for i =\
    \ 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n      min, min_idx\
    \ = arr[i], i\n    end\n  end\n  return min_idx ~= -1 and {min, min_idx} or {}\n\
    end", "  local value = arr[1]\n  local index = 1\n  for i = 2, #arr do\n    if\
    \ arr[i] < value then\n      value = arr[i]\n      index = i\n    end\n  end\n\
    \  return {value, index}\nend", "    if #arr == 0 then return {} end\n    local\
    \ minEven, minEvenIdx = math.huge, nil\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 and arr[i] < minEven then\n            minEven, minEvenIdx = arr[i],\
    \ i\n        end\n    end\n    if minEven == math.huge then return {} end\n  \
    \  return {minEven, minEvenIdx}\nend", "  local smallest_even_index, smallest_even_value,\
    \ i = 10000, nil, 1\n  while i <= #arr do\n    if arr[i] % 2 == 0 and (smallest_even_value\
    \ == nil or arr[i] < smallest_even_value) then\n      smallest_even_value = arr[i]\n\
    \      smallest_even_index = i\n    end\n    i = i + 1\n  end\n  if smallest_even_value\
    \ == nil then\n    return {}\n  else\n    return { smallest_even_value, smallest_even_index\
    \ }\n  end\nend", "    local function recurse(tree, index)\n        if not tree\
    \ then return end\n        if tree % 2 == 0 then\n            return {\n     \
    \           value = tree,\n                index = index\n            }\n    \
    \    end\n        local left = recurse(arr[index * 2], index * 2)\n        local\
    \ right = recurse(arr[index * 2 + 1], index * 2 + 1)\n        if left and right\
    \ then\n            return left.value < right.value and left or right\n      \
    \  elseif left then\n            return left\n        elseif right then\n    \
    \        return right\n        end\n    end\n    local result = recurse(arr[1],\
    \ 1)\n    if result then\n        return { result.value, result.index }\n    else\n\
    \        return {}\n    end\nend", "  local min_val, min_idx = nil, -1\n  for\
    \ idx, node in ipairs(arr) do\n    if node % 2 == 0 and (min_val == nil or node\
    \ < min_val) then\n      min_val, min_idx = node, idx\n    end\n  end\n  return\
    \ min_val ~= nil and {min_val, min_idx} or {}\nend", "    if not arr or #arr ==\
    \ 0 then return {} end\n    local smallest = math.huge\n    local index = 0\n\
    \    for i, n in ipairs(arr) do\n        if n % 2 == 0 and n < smallest then\n\
    \            smallest = n\n            index = i\n        end\n    end\n    if\
    \ smallest == math.huge then return {} end\n    return { smallest, index }\nend",
  "  local min = -1\n  local min_idx = -1\n  for idx, val in ipairs(arr) do\n    if\
    \ (val % 2 == 0) and (min == -1 or val < min) then\n      min = val\n      min_idx\
    \ = idx\n    end\n  end\n  if min ~= -1 then\n    return {min, min_idx}\n  else\n\
    \    return {}\n  end\nend", "  return arr\nend", "    local smallest_even_value,\
    \ smallest_even_value_index\n    for k,v in ipairs(arr) do\n        if math.fmod(v,\
    \ 2) == 0 then\n            if not smallest_even_value then\n                smallest_even_value\
    \ = v\n                smallest_even_value_index = k\n            elseif v < smallest_even_value\
    \ then\n                smallest_even_value = v\n                smallest_even_value_index\
    \ = k\n            end\n        end\n    end\n    if smallest_even_value then\n\
    \        return {smallest_even_value, smallest_even_value_index}\n    else\n \
    \       return {}\n    end\nend", "  local small_even_index, small_even_value,\
    \ counter = 0, nil, 0\n  for _,v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if not small_even_value or v < small_even_value then\n        small_even_value\
    \ = v\n        small_even_index = counter\n      end\n    end\n    counter = counter\
    \ + 1\n  end\n  if small_even_value then\n    return {small_even_value, small_even_index}\n\
    \  else\n    return {}\n  end\nend", "    local smallest = { arr[1], 1 }\n   \
    \ for i, v in ipairs(arr) do\n        if v % 2 == 0 and (smallest[1] == nil or\
    \ v < smallest[1]) then\n            smallest = { v, i }\n        end\n    end\n\
    \    return smallest[1] and smallest or {}\nend", "  local smallest_index = 0\n\
    \  local smallest_value = math.huge\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if v % 2 == 0 and v < smallest_value then\n      smallest_value = v\n   \
    \   smallest_index = i\n    end\n  end\n  if smallest_value < math.huge then\n\
    \    return { smallest_value, smallest_index }\n  else\n    return {}\n  end\n\
    end", "    if type(arr) ~= 'table' then return {} end\n    if #arr == 0 then return\
    \ {} end\n    local even = {}\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            table.insert(even, {arr[i], i})\n        end\n    end\n\
    \    if #even == 0 then return {} end\n    table.sort(even, function(a, b) return\
    \ a[1] < b[1] end)\n    return even[1]\nend", "  if not arr or #arr == 0 then\
    \ return {} end\n  local min_even = nil\n  local min_idx = -1\n  for i,v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if not min_even or v < min_even then\n   \
    \     min_even = v\n        min_idx = i\n      end\n    end\n  end\n  if min_even\
    \ then\n    return {min_even, min_idx}\n  else\n    return {}\n  end\nend", " \
    \   local min, index = nil, nil\n    for i, n in ipairs(arr) do\n        if n\
    \ % 2 == 0 then\n            if min == nil or n < min then\n                min,\
    \ index = n, i\n            end\n        end\n    end\n    return min == nil and\
    \ {} or {min, index}\nend", "   -- Your code goes here\nend", "  -- your code\
    \ here\n  local even = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      table.insert(even, { i, v })\n    end\n  end\n  if next(even) then\n  \
    \  local min = { 1, even[1][2] }\n    for i, v in ipairs(even) do\n      if v[2]\
    \ < min[2] then\n        min = { i, v[2] }\n      end\n    end\n    return even[min[1]]\n\
    \  end\n  return {}\nend", "    local minNode = {}\n    local minIndex\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not minNode[1]\
    \ or v < minNode[1] then\n                minNode = {v, i}\n            end\n\
    \        end\n    end\n    return minNode\nend", "    local min_even = math.huge\n\
    \    local min_even_index\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min_even then\n            min_even = v\n            min_even_index\
    \ = i\n        end\n    end\n    if min_even == math.huge then\n        return\
    \ {}\n    else\n        return {min_even, min_even_index}\n    end\nend", "  if\
    \ not arr or #arr == 0 then return {} end\n  local min, minI = math.huge, math.huge\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min,\
    \ minI = v, i\n    end\n  end\n  if min == math.huge then return {} end\n  return\
    \ {min, minI}\nend", "    local min = math.huge\n    local min_i = -1\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min then\n           \
    \ min = v\n            min_i = i\n        end\n    end\n    if min_i == -1 then\n\
    \        return {}\n    else\n        return {min, min_i}\n    end\nend", "  local\
    \ evens = {}\n  for idx, val in ipairs(arr) do\n    if val % 2 == 0 then\n   \
    \   table.insert(evens, {val, idx})\n    end\n  end\n  if #evens == 0 then\n \
    \   return {}\n  end\n  table.sort(evens, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n  return\
    \ evens[1]\nend", "  local mindex = 1\n  local minvalue = 1000001\n  for i,v in\
    \ ipairs(arr) do\n    if v % 2 == 0 and v < minvalue then\n      minvalue = v\n\
    \      mindex = i\n    end\n  end\n  if minvalue == 1000001 then return {} end\n\
    \  return {minvalue, mindex}\nend", "    if (#arr == 0) then return {} end\n \
    \   local smallest_value, smallest_index\n    for i, v in ipairs(arr) do\n   \
    \     if (v % 2 == 0) then\n            if (smallest_value == nil or v < smallest_value)\
    \ then\n                smallest_value = v\n                smallest_index = i\n\
    \            end\n        end\n    end\n    if (smallest_value == nil) then return\
    \ {} end\n    return { smallest_value, smallest_index }\nend", "    local min,\
    \ res\n    for k,v in ipairs(arr) do\n        if v % 2 == 0 then\n           \
    \ if not min or v < min then\n                min = v\n                res = {\
    \ v, k }\n            end\n        end\n    end\n    return res\nend", "    local\
    \ res = {-1, -1}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and (res[1]\
    \ == -1 or v < res[1]) then\n            res = {v, i}\n        end\n    end\n\
    \    return res[1] == -1 and {} or res\nend", "  local min = nil\n  local min_index\
    \ = nil\n  for i, el in ipairs(arr) do\n    if el % 2 == 0 then\n      if min\
    \ == nil or el < min then\n        min = el\n        min_index = i\n      end\n\
    \    end\n  end\n  if min == nil then\n    return {}\n  else\n    return {min,\
    \ min_index}\n  end\nend", "    local min_even = arr[1]\n    local min_even_i\
    \ = 1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < min_even\
    \ then\n            min_even = v\n            min_even_i = i\n        end\n  \
    \  end\n    if min_even % 2 == 0 then\n        return {min_even, min_even_i}\n\
    \    else\n        return {}\n    end\nend", "\tif not arr or #arr == 0 then return\
    \ {} end\n\tlocal minval = nil\n\tlocal minidx = nil\n\tfor idx, val in ipairs(arr)\
    \ do\n\t\tif val % 2 == 0 then\n\t\t\tif not minval or val < minval then\n\t\t\
    \t\tminval = val\n\t\t\t\tminidx = idx\n\t\t\tend\n\t\tend\n\tend\n\tif minval\
    \ then\n\t\treturn { minval, minidx }\n\telse\n\t\treturn {}\n\tend\nend", " \
    \   local minEvenVal = 10001\n    local minEvenIndex = -1\n    for i, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 and v < minEvenVal then\n            minEvenVal =\
    \ v\n            minEvenIndex = i\n        end\n    end\n    if minEvenIndex ==\
    \ -1 then\n        return {}\n    else\n        return {minEvenVal, minEvenIndex}\n\
    \    end\nend", "    local evens = {}\n    for i = 1, #arr do\n        if (arr[i]\
    \ % 2 == 0) then\n            table.insert(evens, arr[i])\n        end\n    end\n\
    \    if (#evens > 0) then\n        table.sort(evens)\n        for i = 1, #arr\
    \ do\n            if (arr[i] == evens[1]) then\n                return { evens[1],\
    \ i }\n            end\n        end\n    end\n    return {}\nend", "  local smallest_value,\
    \ smallest_index\n  for i, node in ipairs(arr) do\n    if node % 2 == 0 then\n\
    \      if not smallest_value or node < smallest_value then\n        smallest_value\
    \ = node\n        smallest_index = i\n      end\n    end\n  end\n  if smallest_value\
    \ then\n    return { smallest_value, smallest_index }\n  else\n    return {}\n\
    \  end\nend", "  local min_even_i, min_even_val\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if not min_even_val or v < min_even_val then\n\
    \        min_even_val = v\n        min_even_i = i\n      end\n    end\n  end\n\
    \  if min_even_val then\n    return {min_even_val, min_even_i}\n  else\n    return\
    \ {}\n  end\nend", "  if #arr < 1 then return {} end\n  local evens = {}\n  for\
    \ i, v in ipairs(arr) do\n    if v%2 == 0 then\n      evens[#evens+1] = {v, i}\n\
    \    end\n  end\n  if #evens < 1 then return {} end\n  table.sort(evens, function(a,\
    \ b) return a[1] < b[1] end)\n  return evens[1]\nend", "  local even_nodes = {}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(even_nodes,\
    \ { i, v })\n    end\n  end\n  table.sort(even_nodes, function(a, b) return a[2]\
    \ < b[2] end)\n  return even_nodes[1] or {}\nend", "  local min = math.huge\n\
    \  local min_i = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, min_i}\n  end\nend", "    local\
    \ smallest = math.huge\n    local smallest_idx\n    for i, v in ipairs(arr) do\n\
    \        if v % 2 == 0 and v < smallest then\n            smallest = v\n     \
    \       smallest_idx = i\n        end\n    end\n    if smallest == math.huge then\n\
    \        return {}\n    else\n        return { smallest, smallest_idx }\n    end\n\
    end", "    local res\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if not res or arr[res[2]] > v then\n                res = {v, i}\n\
    \            end\n        end\n    end\n    return res\nend", "    local min_even,\
    \ min_even_idx = math.huge, 0\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 and v < min_even then\n            min_even, min_even_idx = v, i\n  \
    \      end\n    end\n    return min_even ~= math.huge and {min_even, min_even_idx}\
    \ or {}\nend", "  local smallest_even_value = math.huge\n  local smallest_even_index\
    \ = nil\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest_even_value\
    \ then\n      smallest_even_value = v\n      smallest_even_index = i\n    end\n\
    \  end\n  if smallest_even_index then\n    return {arr[smallest_even_index], smallest_even_index}\n\
    \  else\n    return {}\n  end\nend", "    -- check if input is valid\n    if type(arr)\
    \ ~= \"table\" then return end\n    local min, index\n    for k, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            if not min or v < min then\n   \
    \             min = v\n                index = k\n            end\n        end\n\
    \    end\n    if min then\n        return {min, index}\n    end\nend", "  if #arr\
    \ == 0 then return {} end\n  local min,idx = math.huge\n  for i,v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min then\n      min = v\n      idx = i\n    end\n\
    \  end\n  if min == math.huge then return {} end\n  return {min,idx}\nend", " \
    \   if #arr == 0 then return {} end\n    local res = {}\n    local minVal = math.huge\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < minVal then\n \
    \           minVal = v\n            res = {v, i}\n        end\n    end\n    return\
    \ res[1] == math.huge and {} or res\nend", "  local k, v, m = nil, 1/0, 0\n  for\
    \ i, n in ipairs(arr) do\n    if n % 2 == 0 and n < v then\n      k, v = i, n\n\
    \    end\n  end\n  return k and {v, k} or {}\nend", "  local min_even, min_index\
    \ = math.huge, math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and\
    \ v < min_even then\n      min_even, min_index = v, i\n    end\n  end\n  return\
    \ min_even == math.huge and {} or {min_even, min_index}\nend", "    local minNode,\
    \ minIndex = nil, 0\n    for i = 1, #arr do\n        local node = arr[i]\n   \
    \     if node % 2 == 0 then\n            if minNode == nil or node < minNode then\n\
    \                minNode, minIndex = node, i\n            end\n        end\n \
    \   end\n    return minNode ~= nil and {minNode, minIndex} or {}\nend", "  local\
    \ minVal = nil\n  local minValIndex = nil\n  for i = 1, #arr do\n    local x =\
    \ arr[i]\n    if x % 2 == 0 then\n      if minVal == nil or x < minVal then\n\
    \        minVal = x\n        minValIndex = i\n      end\n    end\n  end\n  if\
    \ minVal == nil then\n    return {}\n  else\n    return { minVal, minValIndex\
    \ }\n  end\nend", "  local min_even = {2147483647, -1}\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < min_even[1] then\n      min_even = {v, i}\n  \
    \  end\n  end\n  return min_even[2] > -1 and min_even or {}\nend", "  if #arr\
    \ == 0 then return {} end\n  local smallest_even, smallest_even_idx\n  for i,\
    \ v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not smallest_even or v\
    \ < smallest_even then\n        smallest_even = v\n        smallest_even_idx =\
    \ i\n      end\n    end\n  end\n  if smallest_even then\n    return { smallest_even,\
    \ smallest_even_idx }\n  else\n    return {}\n  end\nend", "    local evens =\
    \ {}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n           \
    \ evens[#evens + 1] = {v, i}\n        end\n    end\n    table.sort(evens, function(a,\
    \ b) return a[1] < b[1] end)\n    if #evens == 0 then\n        return {}\n   \
    \ end\n    return evens[1]\nend", "  local function even(a)\n    return a % 2\
    \ == 0\n  end\n  local function find_even_value(arr)\n    local function find_nodes(arr,\
    \ even)\n      local temp = {}\n      for k, v in ipairs(arr) do\n        if even(v)\
    \ then\n          table.insert(temp, { value = v, index = k })\n        end\n\
    \      end\n      return temp\n    end\n    local function sort_nodes(arr)\n \
    \     table.sort(arr, function(a, b)\n        return a.value < b.value\n     \
    \ end)\n    end\n    if #arr == 0 then\n      return {}\n    end\n    local even_values\
    \ = find_nodes(arr, even)\n    if #even_values == 0 then\n      return {}\n  \
    \  end\n    sort_nodes(even_values)\n    return even_values[1]\n  end\n  local\
    \ result = find_even_value(arr)\n  if #result == 0 then\n    return {}\n  end\n\
    \  return { result.value, result.index }\nend", "    local result = {}\n    local\
    \ min_even = math.huge\n    local min_even_index = 0\n    for i, num in ipairs(arr)\
    \ do\n        if num % 2 == 0 and num < min_even then\n            min_even =\
    \ num\n            min_even_index = i\n        end\n    end\n    if min_even ~=\
    \ math.huge then\n        result[1] = min_even\n        result[2] = min_even_index\n\
    \    end\n    return result\nend", "    local idx = nil\n    local val = math.huge\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < val then\n    \
    \        idx = i\n            val = v\n        end\n    end\n    return idx and\
    \ {val, idx} or {}\nend", "    local smallest_even_value = math.huge\n    local\
    \ smallest_even_value_idx = nil\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 and v < smallest_even_value then\n            smallest_even_value =\
    \ v\n            smallest_even_value_idx = i\n        end\n    end\n    if smallest_even_value\
    \ == math.huge then\n        return {}\n    else\n        return { smallest_even_value,\
    \ smallest_even_value_idx }\n    end\nend", "  local smallest\n  local smallest_idx\n\
    \  for idx, val in ipairs(arr) do\n    if (val % 2 == 0) and (smallest == nil\
    \ or val < smallest) then\n      smallest = val\n      smallest_idx = idx\n  \
    \  end\n  end\n  if smallest ~= nil then\n    return { smallest, smallest_idx\
    \ }\n  else\n    return {}\n  end\nend", "  local smallest, smallest_i = nil,\
    \ 0\n  for i, n in ipairs(arr) do\n    if n % 2 == 0 and not smallest or n < smallest\
    \ then\n      smallest, smallest_i = n, i\n    end\n  end\n  return smallest and\
    \ { smallest, smallest_i } or {}\nend", "    local arr_len = #arr\n    if (arr_len\
    \ == 0) then\n        return {}\n    end\n    local first_even_value = 0\n   \
    \ local first_even_idx = 0\n    for i = 1, arr_len do\n        local item = arr[i]\n\
    \        if (item % 2 == 0) then\n            first_even_value = item\n      \
    \      first_even_idx = i\n            break\n        end\n    end\n    if (first_even_value\
    \ == 0) then\n        return {}\n    end\n    for i = first_even_idx + 1, arr_len\
    \ do\n        local item = arr[i]\n        if (item % 2 == 0) then\n         \
    \   if (item < first_even_value) then\n                first_even_value = item\n\
    \                first_even_idx = i\n            end\n        end\n    end\n \
    \   return { first_even_value, first_even_idx }\nend", "\tlocal result = { }\n\
    \tlocal min, min_index\n\tfor i, n in ipairs(arr) do\n\t\tif n % 2 == 0 then\n\
    \t\t\tif min == nil or n < min then\n\t\t\t\tmin = n\n\t\t\t\tmin_index = i\n\t\
    \t\tend\n\t\tend\n\tend\n\tif min ~= nil then\n\t\tresult[1] = min\n\t\tresult[2]\
    \ = min_index\n\tend\n\treturn result\nend", "    local min_even, min_i = nil,\
    \ nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n          \
    \  if min_even == nil or v < min_even then\n                min_even, min_i =\
    \ v, i\n            end\n        end\n    end\n    return min_even and {min_even,\
    \ min_i} or {}\nend", "  local evens = {}\n  for i, v in ipairs(arr) do\n    if\
    \ v % 2 == 0 then\n      table.insert(evens, {v, i})\n    end\n  end\n  if #evens\
    \ == 0 then\n    return {}\n  end\n  table.sort(evens, function(a, b) return a[1]\
    \ < b[1] end)\n  return evens[1]\nend", "  -- code here\nend", "    local index\
    \ = nil\n    local val = math.huge\n    for i, v in ipairs(arr) do\n        if\
    \ v % 2 == 0 and v < val then\n            index = i\n            val = v\n  \
    \      end\n    end\n    if index == nil then\n        return {}\n    end\n  \
    \  return {val, index}\nend", "  local min_even = math.huge\n  local min_even_index\
    \ = nil\n  for i, x in ipairs(arr) do\n    if x % 2 == 0 and x < min_even then\n\
    \      min_even = x\n      min_even_index = i\n    end\n  end\n  if min_even_index\
    \ == nil then\n    return {}\n  else\n    return {min_even, min_even_index}\n\
    \  end\nend", "  local result = { 0x7fffffff, 0x7fffffff }\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < result[1] then\n      result = { v, i }\n    end\n\
    \  end\n  if result[1] == 0x7fffffff then\n    return {}\n  end\n  return result\n\
    end", "  local min\n  local min_index\n  for i, item in ipairs(arr) do\n    if\
    \ item%2 == 0 then\n      if not min or item < min then\n        min = item\n\
    \        min_index = i\n      end\n    end\n  end\n  if min then\n    return {min,\
    \ min_index}\n  else\n    return {}\n  end\nend", "  local min, min_idx\n  for\
    \ i, val in ipairs(arr) do\n    if val % 2 == 0 then\n      if not min or val\
    \ < min then\n        min = val\n        min_idx = i\n      end\n    end\n  end\n\
    \  return min and {min, min_idx} or {}\nend", "    local smallest_even, smallest_even_idx\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if smallest_even\
    \ == nil or v < smallest_even then\n                smallest_even = v\n      \
    \          smallest_even_idx = i\n            end\n        end\n    end\n    if\
    \ smallest_even then\n        return { smallest_even, smallest_even_idx }\n  \
    \  else\n        return {}\n    end\nend", "  if not arr then return {} end\n\
    \  local result = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if #result == 0 then\n        result = {v, i}\n      elseif v < result[1]\
    \ then\n        result = {v, i}\n      end\n    end\n  end\n  return result\n\
    end", "    -- your code goes here\n    if #arr < 1 then\n        return {}\n \
    \   end\n    local smallest = {}\n    local smallestIndex = -1\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if #smallest == 0 then\n\
    \                smallest = {arr[i], i}\n            elseif arr[i] < smallest[1]\
    \ then\n                smallest = {arr[i], i}\n            end\n        end\n\
    \    end\n    return smallest\nend", "  local min_val, min_idx = math.huge, 0\n\
    \  for idx, val in ipairs(arr) do\n    if val % 2 == 0 and val < min_val then\n\
    \      min_val, min_idx = val, idx\n    end\n  end\n  return min_val == math.huge\
    \ and {} or {min_val, min_idx}\nend", "    local minEven = math.huge\n    local\
    \ minEvenIndex = -1\n    for i,v in ipairs(arr) do\n        if v % 2 == 0 and\
    \ v < minEven then\n            minEven = v\n            minEvenIndex = i\n  \
    \      end\n    end\n    if minEvenIndex == -1 then\n        return {}\n    else\n\
    \        return {minEven, minEvenIndex}\n    end\nend", "  local smallest, smallest_index\
    \ = math.huge, math.huge\n  for i, node in ipairs(arr) do\n    if node % 2 ==\
    \ 0 and node < smallest then\n      smallest, smallest_index = node, i\n    end\n\
    \  end\n  return smallest ~= math.huge and { smallest, smallest_index } or {}\n\
    end", "    local min_even_value, min_even_index\n    for i, num in ipairs(arr)\
    \ do\n        if num % 2 == 0 then\n            if not min_even_value or num <\
    \ min_even_value then\n                min_even_value = num\n                min_even_index\
    \ = i\n            end\n        end\n    end\n    return min_even_value and {min_even_value,\
    \ min_even_index} or {}\nend", "    local smallestEven = math.huge\n    local\
    \ smallestEvenIdx = math.huge\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 and v % 2 == 0 and v < smallestEven then\n            smallestEven = v\n \
    \           smallestEvenIdx = i\n        end\n    end\n    if smallestEvenIdx\
    \ == math.huge then\n        return {}\n    end\n    return { smallestEven, smallestEvenIdx\
    \ }\nend", "    local smallest, smallest_i\n    for i, v in ipairs(arr) do\n \
    \       if v % 2 == 0 then\n            if not smallest or v < smallest then\n\
    \                smallest = v\n                smallest_i = i\n            end\n\
    \        end\n    end\n    return smallest and { smallest, smallest_i } or {}\n\
    end", "    local n = #arr\n    local minVal = 1/0\n    local minIdx = 1/0\n  \
    \  for i = 1, n do\n        local x = arr[i]\n        if x % 2 == 0 and x < minVal\
    \ then\n            minVal = x\n            minIdx = i\n        end\n    end\n\
    \    if minVal == 1/0 then\n        return {}\n    else\n        return {minVal,\
    \ minIdx}\n    end\nend", "    local result = {}\n    local min_index = -1\n \
    \   local min_value = -1\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 then\n            if min_value == -1 or v < min_value then\n             \
    \   min_value = v\n                min_index = i\n            end\n        end\n\
    \    end\n    if min_value ~= -1 then\n        result[1] = min_value\n       \
    \ result[2] = min_index\n    end\n    return result\nend", "  local min_value\
    \ = math.huge\n  local min_index = math.huge\n  for i = 1, #arr do\n    local\
    \ v = arr[i]\n    if v % 2 == 0 and v < min_value then\n      min_value = v\n\
    \      min_index = i\n    end\n  end\n  if min_value == math.huge then\n    return\
    \ {}\n  else\n    return {min_value, min_index}\n  end\nend", "  local even_numbers\
    \ = {}\n  local idx = 0\n  local min = nil\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      idx = idx + 1\n      even_numbers[idx] = { arr[i], i }\n\
    \      if min == nil or even_numbers[idx][1] < min then\n        min = even_numbers[idx][1]\n\
    \      end\n    end\n  end\n  for i = 1, #even_numbers do\n    if even_numbers[i][1]\
    \ == min then\n      return even_numbers[i]\n    end\n  end\n  return {}\nend",
  "  local min = nil\n  local minIdx = nil\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 then\n      if min == nil or v < min then\n        min = v\n      \
    \  minIdx = i\n      end\n    end\n  end\n  if min == nil then\n    return {}\n\
    \  else\n    return {min, minIdx}\n  end\nend", "    local minVal, minIndex\n\
    \    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ minVal or v < minVal then\n                minVal = v\n                minIndex\
    \ = i\n            end\n        end\n    end\n    return minVal and {minVal, minIndex}\
    \ or {}\nend", "\tif #arr == 0 then return {} end\n\tlocal min = math.huge\n\t\
    local min_idx = math.huge\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 and\
    \ v < min then\n\t\t\tmin = v\n\t\t\tmin_idx = i\n\t\tend\n\tend\n\tif min ==\
    \ math.huge then return {} end\n\treturn { min, min_idx }\nend", "    local even\
    \ = math.huge\n    local index = math.huge\n    for i, v in ipairs(arr) do\n \
    \       if v % 2 == 0 and v < even then\n            even = v\n            index\
    \ = i\n        end\n    end\n    if even ~= math.huge then\n        return { even,\
    \ index }\n    end\n    return {}\nend", "    local smallest = math.huge\n   \
    \ local smallest_index = nil\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 and v < smallest then\n            smallest = v\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest ~= math.huge then\n        return\
    \ { smallest, smallest_index }\n    end\n    return {}\nend", "    --\n    --\
    \ your code here\n    --\nend", "  local t = {}\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      t[#t + 1] = {v, i}\n    end\n  end\n  if #t ==\
    \ 0 then\n    return {}\n  end\n  table.sort(t, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] < b[2]\n    end\n    return a[1] < b[1]\n  end)\n\
    \  return t[1]\nend", "  local smallestEven = math.huge\n  local idx = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallestEven then\n      smallestEven\
    \ = v\n      idx = i\n    end\n  end\n  if smallestEven == math.huge then\n  \
    \  return {}\n  end\n  return { smallestEven, idx }\nend", "  local min = {}\n\
    \  local max = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if\
    \ not min[1] or arr[i] < min[1] then\n        min[1] = arr[i]\n        min[2]\
    \ = i\n      end\n    end\n    if arr[i] > max then\n      max = arr[i]\n    end\n\
    \  end\n  if min[1] then\n    return min\n  else\n    return { max, #arr }\n \
    \ end\nend", "  local function _find(nodes, result)\n    if #nodes == 0 then\n\
    \      return result\n    end\n    local node = nodes[1]\n    if node % 2 == 0\
    \ then\n      if not result or node < result[1] then\n        result = { node,\
    \ 1 }\n      end\n    end\n    local branch = {}\n    for _, v in ipairs(nodes)\
    \ do\n      if type(v) == 'table' then\n        branch = v\n        break\n  \
    \    end\n    end\n    return _find(branch, result)\n  end\n  local r = _find(arr)\n\
    \  if r then\n    return r\n  end\n  return {}\nend", "  local min_even_index,\
    \ min_even_value\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n     \
    \ if not min_even_value or v < min_even_value then\n        min_even_value = v\n\
    \        min_even_index = i\n      end\n    end\n  end\n  if min_even_value then\n\
    \    return { min_even_value, min_even_index }\n  else\n    return {}\n  end\n\
    end", "  local min_even_index = {}\n  local min_even_value = nil\n  for i = 1,\
    \ #arr do\n    local value = arr[i]\n    if value % 2 == 0 then\n      if not\
    \ min_even_value or value < min_even_value then\n        min_even_value = value\n\
    \        min_even_index = {i}\n      elseif value == min_even_value then\n   \
    \     min_even_index[#min_even_index + 1] = i\n      end\n    end\n  end\n  if\
    \ min_even_value then\n    local min_even_index = min_even_index[1]\n    return\
    \ {min_even_value, min_even_index}\n  end\n  return {}\nend", "  local minEven,\
    \ minEvenIndex = math.huge, math.huge\n  for i, n in ipairs(arr) do\n    if n\
    \ % 2 == 0 and n < minEven then\n      minEven, minEvenIndex = n, i\n    end\n\
    \  end\n  return minEven ~= math.huge and {minEven, minEvenIndex} or {}\nend",
  "    local min\n    local min_index\n    for i, n in ipairs(arr) do\n        if\
    \ n % 2 == 0 then\n            if not min or n < min then\n                min\
    \ = n\n                min_index = i\n            end\n        end\n    end\n\
    \    if min then\n        return {min, min_index}\n    else\n        return {}\n\
    \    end\nend", "  local min_even, min_idx = nil, nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if min_even == nil or v < min_even then\n\
    \        min_even, min_idx = v, i\n      end\n    end\n  end\n  return min_even\
    \ ~= nil and {min_even, min_idx} or {}\nend", "  local minNode = { value = math.huge,\
    \ index = math.huge }\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v <\
    \ minNode.value then\n      minNode.value = v\n      minNode.index = i\n    end\n\
    \  end\n  if minNode.value == math.huge then\n    return {}\n  end\n  return {\
    \ minNode.value, minNode.index }\nend", "  if #arr == 0 then return {} end\n \
    \ local even = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      even[#even\
    \ + 1] = {arr[i], i}\n    end\n  end\n  if #even == 0 then return {} end\n  table.sort(even,\
    \ function(a, b) return a[1] < b[1] end)\n  return even[1]\nend", "    -- special\
    \ cases\n    if #arr == 0 then return {} end\n    -- search for an even node\n\
    \    local smallest_value, smallest_index\n    for k, v in ipairs(arr) do\n  \
    \      if v % 2 == 0 then\n            -- found an even node\n            if smallest_value\
    \ == nil or v < smallest_value then\n                smallest_value = v\n    \
    \            smallest_index = k\n            end\n        end\n    end\n    if\
    \ smallest_value then\n        return { smallest_value, smallest_index }\n   \
    \ else\n        return {}\n    end\nend", "    local res = {}\n    local len =\
    \ #arr\n    if len == 0 then\n        return res\n    end\n    local i, e\n  \
    \  for i = 1, len do\n        e = arr[i]\n        if e % 2 == 0 then\n       \
    \     res[#res + 1] = { e, i }\n        end\n    end\n    if #res == 0 then\n\
    \        return res\n    end\n    table.sort(res, function(a, b)\n        if a[1]\
    \ < b[1] then\n            return true\n        elseif a[1] > b[1] then\n    \
    \        return false\n        else\n            return a[2] < b[2]\n        end\n\
    \    end)\n    return res[1]\nend", "    local minEven = math.huge\n    local\
    \ minEvenIdx = math.huge\n    for idx, val in ipairs(arr) do\n        if val %\
    \ 2 == 0 and val < minEven then\n            minEven = val\n            minEvenIdx\
    \ = idx\n        end\n    end\n    if minEven == math.huge then\n        return\
    \ {}\n    end\n    return { minEven, minEvenIdx }\nend", "  if #arr == 0 then\
    \ return {} end\n  local lowest\n  local lowestIndex = 10000\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and (lowest == nil or v < lowest) then\n      lowest =\
    \ v\n      lowestIndex = i\n    end\n  end\n  if lowest then\n    return {lowest,\
    \ lowestIndex}\n  else\n    return {}\n  end\nend", "    -- FIXME: make it for\
    \ any array\n    -- FIXME: make it in O(n)\n    local result = nil\n    local\
    \ smallest = nil\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            if smallest == nil or v < smallest then\n                smallest\
    \ = v\n                result = {v, i}\n            end\n        end\n    end\n\
    \    return result\nend", "   -- your code here\n   if #arr == 0 then return {}\
    \ end\n   local min = {arr[1], 1}\n   for i = 2, #arr do\n      if (arr[i] % 2\
    \ == 0) and (arr[i] < min[1]) then\n         min = {arr[i], i}\n      end\n  \
    \ end\n   if min[1] % 2 == 0 then\n      return min\n   else\n      return {}\n\
    \   end\nend", "  if #arr == 0 then return {} end\n  local min = math.huge\n \
    \ local result = { math.huge, math.huge }\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 and arr[i] < min then\n      min = arr[i]\n      result = { min, i\
    \ }\n    end\n  end\n  if result[1] == math.huge then\n    return {}\n  end\n\
    \  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
