language: lua
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max = numbers[1]\n\
    \  local min = numbers[1]\n  for _, n in ipairs(numbers) do\n    if n > max then\n\
    \      max = n\n    end\n    if n < min then\n      min = n\n    end\n  end\n\
    \  local diff = max - min\n  for i, n in ipairs(numbers) do\n    numbers[i] =\
    \ (n - min) / diff\n  end\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = math.max(unpack(numbers))\n\
    \    local min = math.min(unpack(numbers))\n    local range = max - min\n    local\
    \ linear_transform = function(number)\n        return (number - min) / range\n\
    \    end\n    return map(linear_transform, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzxcfrs8.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptzxcfrs8.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmptzxcfrs8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _, num in ipairs(numbers) do\n    if num < min\
    \ then\n      min = num\n    elseif num > max then\n      max = num\n    end\n\
    \  end\n  local range = max - min\n  local new_numbers = {}\n  for _, num in ipairs(numbers)\
    \ do\n    table.insert(new_numbers, (num - min) / range)\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = numbers[1],\
    \ numbers[1]\n  for _, v in ipairs(numbers) do\n    if v < min then min = v end\n\
    \    if v > max then max = v end\n  end\n  local scale = 1 / (max - min)\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    table.insert(result, (v -\
    \ min) * scale)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = 1e9\n\t\
    local max = -1e9\n\tfor _, number in ipairs(numbers) do\n\t\tmin = math.min(min,\
    \ number)\n\t\tmax = math.max(max, number)\n\tend\n\tlocal range = max - min\n\
    \tfor i, number in ipairs(numbers) do\n\t\tnumbers[i] = (number - min) / range\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptss7vqky.lua:19:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmptss7vqky.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_number =\
    \ numbers[1]\n  local max_number = numbers[1]\n  for _, number in ipairs(numbers)\
    \ do\n    if number < min_number then\n      min_number = number\n    end\n  \
    \  if number > max_number then\n      max_number = number\n    end\n  end\n  local\
    \ linear_transform = (1 - 0) / (max_number - min_number)\n  local result = {}\n\
    \  for _, number in ipairs(numbers) do\n    result[#result + 1] = linear_transform\
    \ * (number - min_number)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal small = math.min(unpack(numbers))\n\
    \tlocal big = math.max(unpack(numbers))\n\tlocal diff = big - small\n\treturn\
    \ map(function(x) return (x - small) / diff end, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8k17ilig.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8k17ilig.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp8k17ilig.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_number =\
    \ math.min(unpack(numbers))\n\tlocal max_number = math.max(unpack(numbers))\n\t\
    local rescaled_numbers = {}\n\tfor i,number in ipairs(numbers) do\n\t\tlocal rescaled_number\
    \ = (number - min_number) / (max_number - min_number)\n\t\ttable.insert(rescaled_numbers,\
    \ rescaled_number)\n\tend\n\treturn rescaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr579rwx0.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr579rwx0.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpr579rwx0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max = math.max(unpack(numbers))\n\
    \  local min = math.min(unpack(numbers))\n  local range = max - min\n  local unit_numbers\
    \ = {}\n  for _, num in ipairs(numbers) do\n    unit_numbers[#unit_numbers + 1]\
    \ = (num - min) / range\n  end\n  return unit_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj18fdb23.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj18fdb23.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpj18fdb23.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    -- get the absolute\
    \ minimum and maximum values\n    local abs_min = math.min(unpack(numbers))\n\
    \    local abs_max = math.max(unpack(numbers))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4jo4t353.lua:18: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max, min =\
    \ _.max(numbers), _.min(numbers)\n    local scale = max - min\n    local offset\
    \ = -min\n    local res = _.map(numbers, function(n) return (n + offset) / scale\
    \ end)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqc8ioge2.lua:4:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpqc8ioge2.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpqc8ioge2.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_number =\
    \ math.min(unpack(numbers))\n  local max_number = math.max(unpack(numbers))\n\
    \  local scale = max_number - min_number\n  if scale < 0.000001 then\n    scale\
    \ = 1\n  end\n  local rescaled_numbers = {}\n  for _,number in ipairs(numbers)\
    \ do\n    table.insert(rescaled_numbers, (number - min_number) / scale)\n  end\n\
    \  return rescaled_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabc5si3o.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpabc5si3o.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpabc5si3o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local new_numbers = {}\n    for\
    \ i, number in ipairs(numbers) do\n        new_numbers[i] = (number - min) / (max\
    \ - min)\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoe4_e6n8.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoe4_e6n8.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpoe4_e6n8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    for i, n in ipairs(numbers) do\n\t\tnumbers[i] = (n - min) / (max - min)\n\tend\n\
    \treturn numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local biggest, smallest\
    \ = math.max(unpack(numbers)), math.min(unpack(numbers))\n  for i,n in ipairs(numbers)\
    \ do\n    numbers[i] = (n - smallest) / (biggest - smallest)\n  end\n  return\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxj180nm.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppxj180nm.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmppxj180nm.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ min_max(numbers)\n    local rescaled = torch.Tensor(#numbers)\n    for i, number\
    \ in ipairs(numbers) do\n        rescaled[i] = (number - min) / (max - min)\n\
    \    end\n    return rescaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygb5yfb9.lua:4:\
    \ attempt to call a nil value (global 'min_max')\nstack traceback:\n\t/tmp/tmpygb5yfb9.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpygb5yfb9.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- Determine minimum\
    \ and maximum values\n  local minimum = numbers[1]\n  local maximum = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < minimum then\n      minimum\
    \ = number\n    elseif number > maximum then\n      maximum = number\n    end\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiw3ufojr.lua:25: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = min_number(numbers)\n\
    \  local max = max_number(numbers)\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = (numbers[i] - min) / (max - min)\n  end\n  return new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zaxwdyz.lua:4:\
    \ attempt to call a nil value (global 'min_number')\nstack traceback:\n\t/tmp/tmp2zaxwdyz.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp2zaxwdyz.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n\
    \    local min, max = min_max(numbers)\n    for i = 1, n do\n        numbers[i]\
    \ = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpet1cfod9.lua:5:\
    \ attempt to call a nil value (global 'min_max')\nstack traceback:\n\t/tmp/tmpet1cfod9.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpet1cfod9.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ numbers[1], numbers[1]\n    for _, n in ipairs(numbers) do\n        if n < min\
    \ then min = n end\n        if n > max then max = n end\n    end\n    local range\
    \ = max - min\n    local result = {}\n    for _, n in ipairs(numbers) do\n   \
    \     result[#result + 1] = (n - min) / range\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = math.min(unpack(numbers))\n\
    \tlocal max = math.max(unpack(numbers))\n\tlocal diff = max - min\n\tlocal scaled\
    \ = {}\n\tfor _, n in ipairs(numbers) do\n\t\ttable.insert(scaled, (n - min) /\
    \ diff)\n\tend\n\treturn scaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpengvemh4.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpengvemh4.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpengvemh4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- Find min and max\
    \ values\n  local smallest = numbers[1]\n  local largest = numbers[1]\n  for _,\
    \ n in ipairs(numbers) do\n    if n < smallest then\n      smallest = n\n    elseif\
    \ n > largest then\n      largest = n\n    end\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp49_3r0ra.lua:25: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _, number in ipairs(numbers) do\n    if number\
    \ < min then\n      min = number\n    elseif number > max then\n      max = number\n\
    \    end\n  end\n  local range = max - min\n  for i, number in ipairs(numbers)\
    \ do\n    numbers[i] = (number - min) / range\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhyvenvd.lua:22:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpnhyvenvd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local length = max - min\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        local r = (n - min)\
    \ / length\n        table.insert(result, r)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local len = #numbers\n\
    \  local max_number = numbers[1]\n  local min_number = numbers[1]\n  for i = 2,\
    \ len do\n    if numbers[i] > max_number then\n      max_number = numbers[i]\n\
    \    end\n    if numbers[i] < min_number then\n      min_number = numbers[i]\n\
    \    end\n  end\n  local result = {}\n  for i = 1, len do\n    result[i] = (numbers[i]\
    \ - min_number) / (max_number - min_number)\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local result = {}\n  for _, v in ipairs(numbers)\
    \ do\n    table.insert(result, (v - min) / (max - min))\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3p5whnw.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpt3p5whnw.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpt3p5whnw.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_n, max_n\
    \ = min(numbers), max(numbers)\n    local res = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if max_n - min_n > 0 then\n            res[#res + 1] = (v - min_n)\
    \ / (max_n - min_n)\n        else\n            res[#res + 1] = 0\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3op214r8.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp3op214r8.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp3op214r8.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local lo, hi = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n    for i, num in ipairs(numbers) do\n        numbers[i]\
    \ = (num - lo) / (hi - lo)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsp7loin.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcsp7loin.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpcsp7loin.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    assert(#numbers\
    \ >= 2)\n    local min, max = numbers[1], numbers[1]\n    for _, x in ipairs(numbers)\
    \ do\n        if x < min then min = x end\n        if x > max then max = x end\n\
    \    end\n    local function rescale(x)\n        return (x - min) / (max - min)\n\
    \    end\n    return tablex.imap(rescale, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0einee5.lua:13:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpe0einee5.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpe0einee5.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  assert(#numbers >=\
    \ 2)\n  local max_number = numbers[1]\n  local min_number = numbers[1]\n  for\
    \ _, n in ipairs(numbers) do\n    if n > max_number then\n      max_number = n\n\
    \    end\n    if n < min_number then\n      min_number = n\n    end\n  end\n \
    \ local ret = {}\n  for _, n in ipairs(numbers) do\n    ret[#ret + 1] = (n - min_number)\
    \ / (max_number - min_number)\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max = nil\n\
    \  local min = nil\n  for _, value in ipairs(numbers) do\n    if max == nil or\
    \ value > max then\n      max = value\n    end\n    if min == nil or value < min\
    \ then\n      min = value\n    end\n  end\n  local result = {}\n  for _, value\
    \ in ipairs(numbers) do\n    table.insert(result, (value - min) / (max - min))\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ array.min(numbers), array.max(numbers)\n    local scale = max - min\n    if\
    \ scale == 0 then scale = 1 end\n    for i, v in ipairs(numbers) do\n        numbers[i]\
    \ = (v - min) / scale\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h2_34ic.lua:4:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmp8h2_34ic.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp8h2_34ic.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i, num in ipairs(numbers) do\n        if\
    \ num < min then\n            min = num\n        end\n        if num > max then\n\
    \            max = num\n        end\n    end\n    local result = {}\n    for i,\
    \ num in ipairs(numbers) do\n        result[i] = (num - min) / (max - min)\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local scale = max - min\n    local\
    \ t = {}\n    for _, v in ipairs(numbers) do\n        table.insert(t, (v - min)\
    \ / scale)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvb_g4jm.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprvb_g4jm.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmprvb_g4jm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    if min == max then\n        --\
    \ if max and min are the same, then the list is equal across its whole span.\n\
    \        -- In this case, arbitrarily set all values to 0.5.\n        return {0.5,\
    \ 0.5, 0.5}\n    end\n    local numbers_doubled = {}\n    for i, number in ipairs(numbers)\
    \ do\n        numbers_doubled[i] = (number - min) / (max - min)\n    end\n   \
    \ return numbers_doubled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtyn__ky.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqtyn__ky.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpqtyn__ky.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(unpack(numbers)), math.max(unpack(numbers))\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        result[#result + 1] = (number\
    \ - min) / (max - min)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oz0bgmz.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3oz0bgmz.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp3oz0bgmz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    -- find min and\
    \ max of list\n    local min, max = numbers[1], numbers[1]\n    for _, num in\
    \ ipairs(numbers) do\n        if num < min then min = num end\n        if num\
    \ > max then max = num end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqalzkfi.lua:21: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local a = 1 / (max - min)\n  \
    \  local b = 1 - max * a\n    local result = {}\n    for _,v in ipairs(numbers)\
    \ do\n        result[#result+1] = a * v + b\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvag02sre.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvag02sre.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpvag02sre.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = - math.huge\n\
    \    local min = math.huge\n    for _,v in ipairs(numbers) do\n        if v >\
    \ max then max = v end\n        if v < min then min = v end\n    end\n    --print(\"\
    rescale_to_unit: max: \" .. max .. \", min: \" .. min)\n    for i,v in ipairs(numbers)\
    \ do\n        numbers[i] = (v - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa3zihpm.lua:19:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpsa3zihpm.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_number =\
    \ numbers[1]\n\tlocal max_number = numbers[1]\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tif number < min_number then\n\t\t\tmin_number = number\n\t\tend\n\t\t\
    if number > max_number then\n\t\t\tmax_number = number\n\t\tend\n\tend\n\tlocal\
    \ difference = max_number - min_number\n\tfor i, number in ipairs(numbers) do\n\
    \t\tnumbers[i] = (number - min_number) / difference\n\tend\n\treturn numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal max_number =\
    \ - math.huge\n\tlocal min_number = math.huge\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tmax_number = math.max(max_number, number)\n\t\tmin_number = math.min(min_number,\
    \ number)\n\tend\n\tif max_number == min_number then\n\t\treturn\n\tend\n\tfor\
    \ i, number in ipairs(numbers) do\n\t\tnumbers[i] = (number - min_number) / (max_number\
    \ - min_number)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zzut4mq.lua:21:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmp2zzut4mq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_num = math.min(unpack(numbers))\n\
    \  local max_num = math.max(unpack(numbers))\n  local scale_factor = 1 / (max_num\
    \ - min_num)\n  for i, number in ipairs(numbers) do\n    numbers[i] = (number\
    \ - min_num) * scale_factor\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5q1lt_a.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpn5q1lt_a.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpn5q1lt_a.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = 0\n\
    \    local min = math.huge\n    for i, n in ipairs(numbers) do\n        if n >\
    \ max then\n            max = n\n        end\n        if n < min then\n      \
    \      min = n\n        end\n    end\n    local out = {}\n    for i, n in ipairs(numbers)\
    \ do\n        out[i] = (n - min) / (max - min)\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = numbers[1],\
    \ numbers[1]\n  for _, num in ipairs(numbers) do\n    if num < min then min =\
    \ num end\n    if num > max then max = num end\n  end\n  return (numbers - min)\
    \ / (max - min)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,\
    \ 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukdbiyq5.lua:9:\
    \ attempt to perform arithmetic on a table value (local 'numbers')\nstack traceback:\n\
    \t/tmp/tmpukdbiyq5.lua:9: in local 'candidate'\n\t/tmp/tmpukdbiyq5.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local delta = max - min\n  for i,\
    \ v in ipairs(numbers) do\n    numbers[i] = (v - min) / delta\n  end\n  return\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkm8j8roi.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkm8j8roi.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpkm8j8roi.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local _min = math.min(unpack(numbers))\n\
    \  local _max = math.max(unpack(numbers))\n  local _amplitude = _max - _min\n\
    \  return (function(number)\n    return (number - _min) / _amplitude\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiizsnrk1.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpiizsnrk1.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpiizsnrk1.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local transform = function(num)\n\
    \    return (num - min) / (max - min)\n  end\n  return map(transform, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdur9fl6.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxdur9fl6.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpxdur9fl6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local numbers_copy\
    \ = {}\n  for _, x in ipairs(numbers) do\n    table.insert(numbers_copy, x)\n\
    \  end\n  table.sort(numbers_copy)\n  local min = numbers_copy[1]\n  local max\
    \ = numbers_copy[#numbers_copy]\n  local range = max - min\n  return lin_transform(numbers,\
    \ 0, 1, min, max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgf08gkj6.lua:12:\
    \ attempt to call a nil value (global 'lin_transform')\nstack traceback:\n\t/tmp/tmpgf08gkj6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgf08gkj6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max\n\t\
    if numbers[1] < numbers[2] then\n\t\tmin, max = numbers[1], numbers[2]\n\telse\n\
    \t\tmin, max = numbers[2], numbers[1]\n\tend\n\tfor i = 3, #numbers do\n\t\tif\
    \ numbers[i] < min then\n\t\t\tmin = numbers[i]\n\t\telseif numbers[i] > max then\n\
    \t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal scale = 1 / (max - min)\n\tlocal\
    \ lin_transform = function(x) return (x - min) * scale end\n\treturn map(lin_transform,\
    \ numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6eufe3j0.lua:19:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp6eufe3j0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp6eufe3j0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(unpack(numbers)), math.max(unpack(numbers))\n    local scale = max\
    \ - min\n    local result = {}\n    for _, n in ipairs(numbers) do\n        table.insert(result,\
    \ (n - min) / scale)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0w1hxteu.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0w1hxteu.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0w1hxteu.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    local range = max - min\n\tlocal new_numbers = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\ttable.insert(new_numbers, (n - min) / range)\n\tend\n\treturn new_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local map = lume.fn(function(n) return (n - min_number) / (max_number - min_number)\
    \ end)\n    return map(numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74_w6awl.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp74_w6awl.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp74_w6awl.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_num = numbers[1]\n\
    \tlocal max_num = numbers[1]\n\tfor _,num in ipairs(numbers) do\n\t\tif num <\
    \ min_num then\n\t\t\tmin_num = num\n\t\tend\n\t\tif num > max_num then\n\t\t\t\
    max_num = num\n\t\tend\n\tend\n\tlocal scale = max_num - min_num\n\tif scale ==\
    \ 0 then\n\t\treturn numbers\n\tend\n\tlocal scaled_numbers = {}\n\tfor _,num\
    \ in ipairs(numbers) do\n\t\tscaled_numbers[#scaled_numbers+1] = (num - min_num)\
    \ / scale\n\tend\n\treturn scaled_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal mx = -math.huge\n\
    \tlocal mn = math.huge\n\tfor i, v in ipairs(numbers) do\n\t\tif v > mx then mx\
    \ = v end\n\t\tif v < mn then mn = v end\n\tend\n\tlocal r = mx - mn\n\tlocal\
    \ result = {}\n\tfor i, v in ipairs(numbers) do\n\t\tresult[i] = (v - mn) / r\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local m = min(numbers)\n\
    \  local M = max(numbers)\n  return map(function(x) return (x - m) / (M - m) end,\
    \ numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeibehcnl.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpeibehcnl.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpeibehcnl.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal largest = math.max(unpack(numbers))\n\
    \tlocal smallest = math.min(unpack(numbers))\n\tlocal range = largest - smallest\n\
    \treturn tablex.map(function(x) return (x - smallest) / range end, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaxdth1xz.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaxdth1xz.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpaxdth1xz.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n  for i, num in ipairs(numbers) do\n    numbers[i]\
    \ = (num - min) / (max - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3vf7kzcf.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp3vf7kzcf.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp3vf7kzcf.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_num = math.min(unpack(numbers))\n\
    \  local max_num = math.max(unpack(numbers))\n  local span = max_num - min_num\n\
    \  local rescaled = {}\n  for _, num in ipairs(numbers) do\n    table.insert(rescaled,\
    \ (num - min_num) / span)\n  end\n  return rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kieha74.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7kieha74.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7kieha74.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tlocal n = #numbers\n\tfor i = 2, n do\n\t\tif numbers[i]\
    \ < min then\n\t\t\tmin = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\t\
    max = numbers[i]\n\t\tend\n\tend\n\tif min == max then\n\t\tfor i = 1, n do\n\t\
    \t\tnumbers[i] = 0\n\t\tend\n\telse\n\t\tlocal delta = max - min\n\t\tfor i =\
    \ 1, n do\n\t\t\tnumbers[i] = (numbers[i] - min) / delta\n\t\tend\n\tend\n\treturn\
    \ numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_value\
    \ = numbers[1]\n    local max_value = numbers[1]\n    for i = 2, #numbers do\n\
    \        min_value = math.min(min_value, numbers[i])\n        max_value = math.max(max_value,\
    \ numbers[i])\n    end\n    local scale = 1 / (max_value - min_value)\n    local\
    \ result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min_value)\
    \ * scale\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local minVal = numbers[1]\n\
    \    local maxVal = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < minVal then\n            minVal = numbers[i]\n        elseif numbers[i] >\
    \ maxVal then\n            maxVal = numbers[i]\n        end\n    end\n    local\
    \ new_numbers = {}\n    for i = 1, #numbers do\n        new_numbers[i] = (numbers[i]\
    \ - minVal) / (maxVal - minVal)\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min then\n\
    \      min = numbers[i]\n    elseif numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n  end\n  local factor = 1 / (max - min)\n  for i = 1, #numbers do\n\
    \    numbers[i] = (numbers[i] - min) * factor\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4v43uqx.lua:22:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpp4v43uqx.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- Find min, max and\
    \ range\n  local min = numbers[1]\n  local max = numbers[1]\n  for _, number in\
    \ ipairs(numbers) do\n    if number < min then\n      min = number\n    end\n\
    \    if number > max then\n      max = number\n    end\n  end\n  local range =\
    \ max - min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2p5t1o67.lua:27: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  assert(#numbers >=\
    \ 2)\n  local min, max = math.min(unpack(numbers)), math.max(unpack(numbers))\n\
    \  local factor = 1 / (max - min)\n  for i, v in ipairs(numbers) do\n    numbers[i]\
    \ = (v - min) * factor\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt0inkm70.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpt0inkm70.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpt0inkm70.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local numbers_max\
    \ = math.max(unpack(numbers))\n    local numbers_min = math.min(unpack(numbers))\n\
    \    local diff = numbers_max - numbers_min\n    local rescaled = {}\n    for\
    \ _, number in ipairs(numbers) do\n        rescaled[#rescaled + 1] = (number -\
    \ numbers_min) / diff\n    end\n    return rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq0lfu9l.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmq0lfu9l.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpmq0lfu9l.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal small, large\
    \ = numbers[1], numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < small\
    \ then small = n end\n\t\tif n > large then large = n end\n\tend\n\t\n\tif small\
    \ == large then\n\t\t-- Handle the case where all numbers are equal\n\t\t-- (avoid\
    \ division by zero)\n\t\treturn {1}\n\tend\n\t\n\tlocal result = {}\n\tfor _,\
    \ n in ipairs(numbers) do\n\t\ttable.insert(result, (n - small) / (large - small))\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _, num in ipairs(numbers) do\n    if num < min\
    \ then\n      min = num\n    elseif num > max then\n      max = num\n    end\n\
    \  end\n  local result = {}\n  for _, num in ipairs(numbers) do\n    result[#result\
    \ + 1] = (num - min) / (max - min)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local minimum = math.min(unpack(numbers))\n\
    \  local maximum = math.max(unpack(numbers))\n  return table.map(numbers, function(number)\n\
    \    return (number - minimum) / (maximum - minimum)\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23cs1i10.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp23cs1i10.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp23cs1i10.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local numbers_copy\
    \ = tablex.copy(numbers)\n    table.sort(numbers_copy)\n    local lower = numbers_copy[1]\n\
    \    local upper = numbers_copy[#numbers_copy]\n    local span = upper - lower\n\
    \    if span == 0 then return end\n    for i, v in ipairs(numbers) do\n      \
    \  numbers[i] = (v - lower) / span\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06xsmm6h.lua:4:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmp06xsmm6h.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp06xsmm6h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = torch.min(numbers)\n\
    \    local max = torch.max(numbers)\n    local result = torch.Tensor(numbers:size()):copy(numbers)\n\
    \    result:add(-min)\n    result:div(max - min)\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjw991azf.lua:4:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpjw991azf.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpjw991azf.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ numbers[1], numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        elseif number > max then\n\
    \            max = number\n        end\n    end\n    local result = {}\n    for\
    \ _, number in ipairs(numbers) do\n        table.insert(result, (number - min)\
    \ / (max - min))\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = numbers[1],\
    \ numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then min = n end\n\
    \t\tif n > max then max = n end\n\tend\n\tif min == max then return numbers end\
    \ -- do not modify if all numbers are equal\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1c9dnlxx.lua:21: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local maximum =\
    \ numbers[1]\n    local minimum = numbers[1]\n    for _, v in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum, v)\n        minimum = math.min(minimum,\
    \ v)\n    end\n    local denominator = maximum - minimum\n    if denominator ==\
    \ 0 then\n        denominator = 1\n    end\n    local result = {}\n    for _,\
    \ v in ipairs(numbers) do\n        table.insert(result, (v - minimum) / denominator)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = numbers[1],\
    \ numbers[1]\n  for _, v in ipairs(numbers) do\n    if v < min then min = v end\n\
    \    if v > max then max = v end\n  end\n  if min == max then\n    return numbers\n\
    \  end\n  local result = {}\n  for _, v in ipairs(numbers) do\n    table.insert(result,\
    \ (v - min) / (max - min))\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ numbers[1], numbers[1]\n    for _, number in ipairs(numbers) do\n        if\
    \ number < min then\n            min = number\n        elseif number > max then\n\
    \            max = number\n        end\n    end\n    local scale = 1 / (max -\
    \ min)\n    local new_numbers = {}\n    for _, number in ipairs(numbers) do\n\
    \        table.insert(new_numbers, (number - min) * scale)\n    end\n    return\
    \ new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,\
    \ 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local scale_factor\
    \ = 1 / (math.max(unpack(numbers)) - math.min(unpack(numbers)))\n  local offset\
    \ = - math.min(unpack(numbers))\n  local new_numbers = {}\n  for _, n in ipairs(numbers)\
    \ do\n    new_numbers[#new_numbers + 1] = (n + offset) * scale_factor\n  end\n\
    \  return new_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjz79lzws.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjz79lzws.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpjz79lzws.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local mini = math.min(unpack(numbers))\n\
    \  local maxi = math.max(unpack(numbers))\n  local transformed = {}\n  for i =\
    \ 1, #numbers do\n    local num = numbers[i]\n    transformed[i] = (num - mini)\
    \ / (maxi - mini)\n  end\n  return transformed\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxqta2g9.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkxqta2g9.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpkxqta2g9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local data_min = math.min(unpack(numbers))\n\
    \  local data_max = math.max(unpack(numbers))\n  if data_max - data_min < 0.00001\
    \ then\n    data_max = data_min + 0.00001\n  end\n  local data_range = data_max\
    \ - data_min\n  local transform = function(x)\n    return (x - data_min) / data_range\n\
    \  end\n  return utils.transform_table(numbers, transform)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexal1_rl.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpexal1_rl.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpexal1_rl.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,\
    \ v in ipairs(numbers) do\n        table.insert(result, (v - min) / (max - min))\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahbni0ca.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpahbni0ca.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpahbni0ca.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local rescaled = {}\n    for _, n\
    \ in ipairs(numbers) do\n        table.insert(rescaled, (n - min) / (max - min))\n\
    \    end\n    return rescaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    return (function(number)\n   \
    \     return (number - min) / (max - min)\n    end)(numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgn87rsgj.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgn87rsgj.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpgn87rsgj.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < smallest\
    \ then\n      smallest = numbers[i]\n    elseif numbers[i] > largest then\n  \
    \    largest = numbers[i]\n    end\n  end\n  local span = largest - smallest\n\
    \  for i = 1, #numbers do\n    numbers[i] = (numbers[i] - smallest) / span\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2jp15v7.lua:22:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpc2jp15v7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_n, max_n\
    \ = math.min(table.unpack(numbers)), math.max(table.unpack(numbers))\n    return\
    \ lmap(\n        function(n)\n            return (n - min_n) / (max_n - min_n)\n\
    \        end,\n        numbers\n    )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj9az5g_.lua:5:\
    \ attempt to call a nil value (global 'lmap')\nstack traceback:\n\t/tmp/tmpmj9az5g_.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpmj9az5g_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, number in ipairs(numbers) do\n       \
    \ if number < min then\n            min = number\n        end\n        if number\
    \ > max then\n            max = number\n        end\n    end\n    for i, number\
    \ in ipairs(numbers) do\n        numbers[i] = (number - min) / (max - min)\n \
    \   end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = math.max(unpack(numbers))\n\
    \    local min = math.min(unpack(numbers))\n    local add = 0 - min\n    local\
    \ mul = 1 / (max + add)\n    local list = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(list, (number + add) * mul)\n    end\n    return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbarjhvje.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbarjhvje.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpbarjhvje.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_number\
    \ = numbers[1]\n    local max_number = numbers[1]\n    for _, num in ipairs(numbers)\
    \ do\n        if num < min_number then\n            min_number = num\n       \
    \ end\n        if num > max_number then\n            max_number = num\n      \
    \  end\n    end\n    local coef = 1 / (max_number - min_number)\n    local ans\
    \ = {}\n    for _, num in ipairs(numbers) do\n        table.insert(ans, (num -\
    \ min_number) * coef)\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(table.unpack(numbers)), math.max(table.unpack(numbers))\n    local\
    \ new_numbers = {}\n    for _, number in ipairs(numbers) do\n        table.insert(new_numbers,\
    \ (number - min) / (max - min))\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local numbers_min\
    \ = math.min(unpack(numbers))\n    local numbers_max = math.max(unpack(numbers))\n\
    \    local numbers_range = numbers_max - numbers_min\n    local rescaled_numbers\
    \ = {}\n    for _, number in ipairs(numbers) do\n        rescaled_numbers[#rescaled_numbers\
    \ + 1] = (number - numbers_min) / numbers_range\n    end\n    return rescaled_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqxfubn0.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprqxfubn0.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmprqxfubn0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max = numbers[1]\n\
    \  local min = numbers[1]\n  for _, number in ipairs(numbers) do\n    if number\
    \ > max then\n      max = number\n    end\n    if number < min then\n      min\
    \ = number\n    end\n  end\n  local range = max - min\n  for i, number in ipairs(numbers)\
    \ do\n    numbers[i] = (number - min) / range\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal lo, hi = numbers[1],\
    \ numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < lo then lo = n end\n\
    \t\tif n > hi then hi = n end\n\tend\n\tlocal denominator = hi - lo\n\tfor i,\
    \ n in ipairs(numbers) do\n\t\tnumbers[i] = (n - lo) / denominator\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsofrndzo.lua:18:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpsofrndzo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local largest =\
    \ max(numbers)\n    local smallest = min(numbers)\n    local output = {}\n   \
    \ for i = 1, #numbers do\n        local current = numbers[i]\n        output[i]\
    \ = (current - smallest) / (largest - smallest)\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsmwo86u6.lua:4:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpsmwo86u6.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpsmwo86u6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local old_range = max - min\n  local\
    \ new_range = 1 - 0\n  local rescaled = {}\n  for _, number in ipairs(numbers)\
    \ do\n    rescaled[#rescaled + 1] = 0 + (number - min) * new_range / old_range\n\
    \  end\n  return rescaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1f8gx5u.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpw1f8gx5u.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpw1f8gx5u.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_val = math.min(unpack(numbers))\n\
    \tlocal max_val = math.max(unpack(numbers))\n\tlocal scale = 1 / (max_val - min_val)\n\
    \tlocal offset = -min_val * scale\n\tlocal result = {}\n\tfor i, num in ipairs(numbers)\
    \ do\n\t\tresult[i] = num * scale + offset\n\tend\n\treturn result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kvuqe95.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7kvuqe95.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7kvuqe95.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_value =\
    \ math.min(unpack(numbers))\n  local max_value = math.max(unpack(numbers))\n \
    \ local rescaled = {}\n  for i, number in ipairs(numbers) do\n    rescaled[i]\
    \ = (number - min_value) / (max_value - min_value)\n  end\n  return rescaled\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1yqnqat1.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1yqnqat1.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp1yqnqat1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = numbers[1],\
    \ numbers[1]\n\tfor _,n in ipairs(numbers) do\n\t\tif n < min then min = n end\n\
    \t\tif n > max then max = n end\n\tend\n\tlocal scale = max - min\n\tlocal res\
    \ = {}\n\tfor _,n in ipairs(numbers) do\n\t\ttable.insert(res, (n - min) / scale)\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_number =\
    \ min(numbers)\n  local max_number = max(numbers)\n  local result = {}\n  for\
    \ k, num in pairs(numbers) do\n    result[k] = (num - min_number) / (max_number\
    \ - min_number)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqugo2eg.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmplqugo2eg.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmplqugo2eg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = torch.min(numbers),\
    \ torch.max(numbers)\n  local normalized = numbers:clone()\n  normalized:add(-min):mul(1\
    \ / (max - min))\n  return normalized\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphv4a6h5s.lua:4:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmphv4a6h5s.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmphv4a6h5s.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, num in ipairs(numbers) do\n        if\
    \ num < min then\n            min = num\n        end\n        if num > max then\n\
    \            max = num\n        end\n    end\n    if min == max then\n       \
    \ return {1}\n    end\n    local result = {}\n    for _, num in ipairs(numbers)\
    \ do\n        table.insert(result, (num - min) / (max - min))\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_val =\
    \ math.min(unpack(numbers))\n    local max_val = math.max(unpack(numbers))\n \
    \   local numerators = {}\n    for _, num in ipairs(numbers) do\n        table.insert(numerators,\
    \ num - min_val)\n    end\n    local denominator = max_val - min_val\n    local\
    \ result = {}\n    for _, num in ipairs(numerators) do\n        table.insert(result,\
    \ num / denominator)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sv0vius.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1sv0vius.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp1sv0vius.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal smallest, largest\
    \ = math.huge, -math.huge\n\tfor _,v in ipairs(numbers) do\n\t\tsmallest = math.min(smallest,\
    \ v)\n\t\tlargest = math.max(largest, v)\n\tend\n\tlocal scaled = {}\n\tfor _,v\
    \ in ipairs(numbers) do\n\t\ttable.insert(scaled, (v - smallest) / (largest -\
    \ smallest))\n\tend\n\treturn scaled\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_number\
    \ = math.min(unpack(numbers))\n    local max_number = math.max(unpack(numbers))\n\
    \    local numbers_ = {}\n    for i = 1, #numbers do\n        numbers_[i] = (numbers[i]\
    \ - min_number) / (max_number - min_number)\n    end\n    return numbers_\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpon_9figy.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpon_9figy.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpon_9figy.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _, num in ipairs(numbers) do\n    if num < min\
    \ then\n      min = num\n    elseif num > max then\n      max = num\n    end\n\
    \  end\n  local transform = 1 / (max - min)\n  for i, num in ipairs(numbers) do\n\
    \    numbers[i] = (num - min) * transform\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk3xwydp.lua:22:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpgk3xwydp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    for i = 1, #numbers do\n     \
    \   numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpok_ssnmo.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpok_ssnmo.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpok_ssnmo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n\tlocal range = max - min\n\tlocal result = {}\n\t\
    for _, number in ipairs(numbers) do\n\t\ttable.insert(result, (number - min) /\
    \ range)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy27cb5so.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpy27cb5so.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpy27cb5so.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        min = math.min(min,\
    \ numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if min ==\
    \ max then return numbers end\n    local coef = 1 / (max - min)\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min) * coef\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local diff = max - min\n    for i,\
    \ n in ipairs(numbers) do\n        numbers[i] = (n - min) / diff\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp900hscus.lua:23:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmp900hscus.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal n_min = numbers[1]\n\
    \tlocal n_max = numbers[1]\n\tlocal n_sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2b14_h0f.lua:18: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n\
    \    max = math.max(max, numbers[i])\n  end\n  local result = {}\n  for i = 1,\
    \ #numbers do\n    result[i] = (numbers[i] - min) / (max - min)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    assert(#numbers\
    \ >= 2)\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2,\
    \ #numbers do\n        min = math.min(min, numbers[i])\n        max = math.max(max,\
    \ numbers[i])\n    end\n    if max - min < EPSILON then\n        return vector(#numbers,\
    \ 1)\n    end\n    local result = vector(#numbers)\n    for i = 1, #numbers do\n\
    \        result[i] = (numbers[i] - min) / (max - min)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5wnkfq5v.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5wnkfq5v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5wnkfq5v.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(unpack(numbers)), math.max(unpack(numbers))\n    local result = {}\n\
    \    for _, value in ipairs(numbers) do\n        result[#result + 1] = (value\
    \ - min) / (max - min)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0whggbcv.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0whggbcv.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0whggbcv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\
    \t\t\tmin = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\
    \t\tend\n\tend\n\tif max == min then\n\t\tfor i = 1, #numbers do\n\t\t\tnumbers[i]\
    \ = 0\n\t\tend\n\telse\n\t\tfor i = 1, #numbers do\n\t\t\tnumbers[i] = (numbers[i]\
    \ - min) / (max - min)\n\t\tend\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = math.max(unpack(numbers))\n\
    \    local min = math.min(unpack(numbers))\n    local value_range = max - min\n\
    \    local result = {}\n    for _, x in ipairs(numbers) do\n        result[#result\
    \ + 1] = (x - min) / value_range\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gkb352t.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0gkb352t.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0gkb352t.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tmin = math.min(min, numbers[i])\n\
    \t\tmax = math.max(max, numbers[i])\n\tend\n\tlocal sum = 0\n\tfor i = 1, #numbers\
    \ do\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\t\tsum = sum + numbers[i]\n\
    \tend\n\treturn numbers, sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = numbers[1]\n\
    \  local max = numbers[1]\n  for _,v in ipairs(numbers) do\n    if min > v then\
    \ min = v end\n    if max < v then max = v end\n  end\n  local result = {}\n \
    \ for _,v in ipairs(numbers) do\n    table.insert(result, (v - min) / (max - min))\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local diff = max - min\n    local\
    \ scaled = {}\n    for _, num in ipairs(numbers) do\n        table.insert(scaled,\
    \ (num - min) / diff)\n    end\n    return scaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanowjoeh.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpanowjoeh.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpanowjoeh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local res = {}\n \
    \ local max = -math.huge\n  local min = math.huge\n  for _, n in ipairs(numbers)\
    \ do\n    if n > max then max = n end\n    if n < min then min = n end\n  end\n\
    \  if max == min then\n    return {1.0}\n  end\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(res, (n - min) / (max - min))\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max_value =\
    \ math.max(unpack(numbers))\n  local min_value = math.min(unpack(numbers))\n \
    \ local scaled_values = {}\n  for _, value in ipairs(numbers) do\n    local scaled_value\
    \ = (value - min_value) / (max_value - min_value)\n    table.insert(scaled_values,\
    \ scaled_value)\n  end\n  return scaled_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5fjopiy.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpp5fjopiy.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpp5fjopiy.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_value\
    \ = min(numbers)\n    local max_value = max(numbers)\n    local span = max_value\
    \ - min_value\n    for i,value in ipairs(numbers) do\n        numbers[i] = (value\
    \ - min_value) / span\n    end\n    return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnwbscg7s.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpnwbscg7s.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpnwbscg7s.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    return (numbers - min) / (max\
    \ - min)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6209qgm.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpa6209qgm.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpa6209qgm.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_number =\
    \ math.min(unpack(numbers))\n  local max_number = math.max(unpack(numbers))\n\
    \  local range = max_number - min_number\n  if range == 0 then\n    -- TODO(Jonas):\
    \ This is a hack and should be handled better\n    range = 0.01\n  end\n  local\
    \ numbers_normalized = {}\n  for k, number in pairs(numbers) do\n    numbers_normalized[k]\
    \ = (number - min_number) / range\n  end\n  return numbers_normalized\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4p2kmj9.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpg4p2kmj9.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpg4p2kmj9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    local scaled = {}\n\tfor _, n in ipairs(numbers) do\n\t\ttable.insert(scaled,\
    \ (n - min) / (max - min))\n\tend\n\treturn scaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local numbers_copy\
    \ = {}\n    for i, v in ipairs(numbers) do\n        numbers_copy[i] = v\n    end\n\
    \    table.sort(numbers_copy)\n    local min = numbers_copy[1]\n    local max\
    \ = numbers_copy[#numbers_copy]\n    local scale = max - min\n    for i, v in\
    \ ipairs(numbers) do\n        numbers[i] = (v - min) / scale\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwamcwbj3.lua:20:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpwamcwbj3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local minimum =\
    \ math.min(unpack(numbers))\n    local maximum = math.max(unpack(numbers))\n \
    \   local range = maximum - minimum\n    local scaled = {}\n    for i = 1, #numbers\
    \ do\n        scaled[i] = (numbers[i] - minimum) / range\n    end\n    return\
    \ scaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1djk9yar.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1djk9yar.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp1djk9yar.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal max_num = -math.huge\n\
    \tlocal min_num = math.huge\n\tfor _, n in ipairs(numbers) do\n\t\tif n > max_num\
    \ then\n\t\t\tmax_num = n\n\t\tend\n\t\tif n < min_num then\n\t\t\tmin_num = n\n\
    \t\tend\n\tend\n\tlocal diff = max_num - min_num\n\tfor i, n in ipairs(numbers)\
    \ do\n\t\tnumbers[i] = (n - min_num) / diff\n\tend\n\treturn numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n\tlocal transform = function(x) return (x - min)\
    \ / (max - min) end\n\treturn map(transform, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaowujk1.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplaowujk1.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmplaowujk1.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal max, min = math.max(unpack(numbers)),\
    \ math.min(unpack(numbers))\n\treturn min == max and 0 or (numbers - min) / (max\
    \ - min)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6h9ctam.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpl6h9ctam.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpl6h9ctam.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = numbers[1]\n\
    \    local min = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ > max then\n            max = n\n        end\n        if n < min then\n    \
    \        min = n\n        end\n    end\n    local transform = function(x)\n  \
    \      return (x - min) / (max - min)\n    end\n    return transform\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_pmes7.lua:23:\
    \ expected: {0.0, 1.0}\nactual: function: 0x556f29e75510\nstack traceback:\n\t\
    /tmp/tmpsa_pmes7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_value\
    \ = min(numbers)\n    local max_value = max(numbers)\n    local result = {}\n\
    \    local result_value\n    for _, number in ipairs(numbers) do\n        if (max_value\
    \ == min_value) then\n            result_value = 0\n        else\n           \
    \ result_value = (number - min_value) / (max_value - min_value)\n        end\n\
    \        table.insert(result, result_value)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_5l6d_d.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpc_5l6d_d.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpc_5l6d_d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local nmax = max(numbers)\n\
    \  local nmin = min(numbers)\n  local nrange = nmax - nmin\n  local result = {}\n\
    \  for _, v in ipairs(numbers) do\n    table.insert(result, (v - nmin) / nrange)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowtgvbgf.lua:4:\
    \ attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpowtgvbgf.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpowtgvbgf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = min_max(numbers)\n\
    \tlocal span = max - min\n\tif span <= 0 then\n\t\treturn numbers -- not changing\
    \ anything if there is no span\n\tend\n\t\n\tlocal result = {}\n\tfor i, number\
    \ in ipairs(numbers) do\n\t\tlocal new = (number - min) / span\n\t\tresult[i]\
    \ = new\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptpvo02df.lua:4:\
    \ attempt to call a nil value (global 'min_max')\nstack traceback:\n\t/tmp/tmptpvo02df.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmptpvo02df.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = min(numbers)\n\
    \  local max = max(numbers)\n  local rescaled = {}\n  for _, num in ipairs(numbers)\
    \ do\n    local r = (num - min) / (max - min)\n    table.insert(rescaled, r)\n\
    \  end\n  return rescaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2j2_ebxk.lua:4:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp2j2_ebxk.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp2j2_ebxk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min_val =\
    \ math.min(unpack(numbers))\n    local max_val = math.max(unpack(numbers))\n \
    \   local range = max_val - min_val\n    local factor = 1/range\n    local scaled_numbers\
    \ = {}\n    for i,n in ipairs(numbers) do\n        scaled_numbers[i] = (n - min_val)\
    \ * factor\n    end\n    return scaled_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jqkxt1f.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4jqkxt1f.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp4jqkxt1f.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = numbers[1],\
    \ numbers[1]\n  for _,n in ipairs(numbers) do\n    if n < min then min = n end\n\
    \    if n > max then max = n end\n  end\n  local a, b = 1 / (max - min), min\n\
    \  return a, b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,\
    \ 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu27vo_4.lua:16:\
    \ expected: {0.0, 1.0}\nactual: 0.020876826722338\nstack traceback:\n\t/tmp/tmpnu27vo_4.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n  for i, x in ipairs(numbers) do\n    numbers[i]\
    \ = (x - min) / (max - min)\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4gdg56a.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpp4gdg56a.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpp4gdg56a.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- Find minimum and\
    \ maximum\n  local min, max = math.huge, -math.huge\n  for _, v in ipairs(numbers)\
    \ do\n    min = math.min(min, v)\n    max = math.max(max, v)\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd4ksove0.lua:21: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  assert(#numbers >=\
    \ 2)\n  local max_val = math.max(unpack(numbers))\n  local min_val = math.min(unpack(numbers))\n\
    \  local range = max_val - min_val\n  if range == 0 then\n    -- if the numbers\
    \ are all identical, return a list of zeros\n    return {0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfe_ag5k.lua:11: ''}'' expected (to close ''{'' at line 10)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = min_in_table(numbers)\n\
    \tlocal max = max_in_table(numbers)\n\tlocal new_table = {}\n\tfor k, v in pairs(numbers)\
    \ do\n\t\tnew_table[k] = (v - min) / (max - min)\n\tend\n\treturn new_table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixkigcus.lua:4:\
    \ attempt to call a nil value (global 'min_in_table')\nstack traceback:\n\t/tmp/tmpixkigcus.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpixkigcus.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_num = math.min(unpack(numbers))\n\
    \  local max_num = math.max(unpack(numbers))\n  local vec = {}\n  for i, v in\
    \ ipairs(numbers) do\n    vec[i] = (v - min_num) / (max_num - min_num)\n  end\n\
    \  return vec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,\
    \ 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps85bmp7o.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps85bmp7o.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmps85bmp7o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n\tlocal delta = max - min\n\tfor i = 1, #numbers\
    \ do\n\t\tnumbers[i] = (numbers[i] - min) / delta\n\tend\n\treturn numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0k2x30_p.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0k2x30_p.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0k2x30_p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal largest = -math.huge\n\
    \tlocal smallest = math.huge\n\tfor i,v in ipairs(numbers) do\n\t\tif v > largest\
    \ then\n\t\t\tlargest = v\n\t\tend\n\t\tif v < smallest then\n\t\t\tsmallest =\
    \ v\n\t\tend\n\tend\n\tif smallest == largest then\n\t\treturn {1}\n\tend\n\t\
    local distance = largest - smallest\n\tlocal result = {}\n\tfor i,v in ipairs(numbers)\
    \ do\n\t\tresult[i] = (v - smallest) / distance\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min, max = math.min(table.unpack(numbers)),\
    \ math.max(table.unpack(numbers))\n  local linear_transform = function(x) return\
    \ (x - min) / (max - min) end\n  return table.map(linear_transform, numbers)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ms306kp.lua:6:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmp7ms306kp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7ms306kp.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = math.min(unpack(numbers))\n\
    \tlocal max = math.max(unpack(numbers))\n\tlocal range = max - min\n\tlocal result\
    \ = {}\n\tfor i, n in ipairs(numbers) do\n\t\tif range == 0 then\n\t\t\tresult[i]\
    \ = 0\n\t\telse\n\t\t\tresult[i] = (n - min) / range\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8tlu8c7.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf8tlu8c7.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpf8tlu8c7.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    assert(#numbers\
    \ >= 2)\n    local max_number = math.max(unpack(numbers))\n    local min_number\
    \ = math.min(unpack(numbers))\n    for k, v in ipairs(numbers) do\n        numbers[k]\
    \ = (v - min_number) / (max_number - min_number)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprq684cu.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpprq684cu.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpprq684cu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local range = numbers[1]\
    \ - numbers[#numbers]\n  for i = 1, #numbers do\n    numbers[i] = (numbers[i]\
    \ - numbers[1]) / range\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v_k_c63.lua:14:\
    \ expected: {0.0, 1.0}\nactual: {-0.0, -1.0417536534447}\nstack traceback:\n\t\
    /tmp/tmp3v_k_c63.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(table.unpack(numbers)), math.max(table.unpack(numbers))\n    return\
    \ vector.map(numbers, function(x) return (x - min) / (max - min) end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprj6a997v.lua:5:\
    \ attempt to index a nil value (global 'vector')\nstack traceback:\n\t/tmp/tmprj6a997v.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmprj6a997v.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    -- find min and\
    \ max values\n    local min_value = math.huge\n    local max_value = -math.huge\n\
    \    for i, value in ipairs(numbers) do\n        if value < min_value then\n \
    \           min_value = value\n        end\n        if value > max_value then\n\
    \            max_value = value\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz06vvg89.lua:26: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max_number\
    \ = math.max(unpack(numbers))\n    local min_number = math.min(unpack(numbers))\n\
    \    local step = (max_number - min_number) / (#numbers - 1)\n    local scaled_numbers\
    \ = {}\n    for index, value in ipairs(numbers) do\n        scaled_numbers[index]\
    \ = (value - min_number) / step\n    end\n    return scaled_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9l_0q9tk.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9l_0q9tk.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp9l_0q9tk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ numbers[1], numbers[1]\n    for _, num in ipairs(numbers) do\n        if num\
    \ < min then\n            min = num\n        elseif num > max then\n         \
    \   max = num\n        end\n    end\n    local span = max - min\n    for i, num\
    \ in ipairs(numbers) do\n        numbers[i] = (num - min) / span\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ec1ahwn.lua:21:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmp8ec1ahwn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal largest, smallest\
    \ = numbers[1], numbers[1]\n\tfor _, number in ipairs(numbers) do\n\t\tif number\
    \ > largest then\n\t\t\tlargest = number\n\t\telseif number < smallest then\n\t\
    \t\tsmallest = number\n\t\tend\n\tend\n\tif largest == smallest then\n\t\treturn\
    \ nil\n\tend\n\tlocal ret = {}\n\tfor _, number in ipairs(numbers) do\n\t\ttable.insert(ret,\
    \ (number - smallest) / (largest - smallest))\n\tend\n\treturn ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local s = torch.Tensor(numbers)\n\
    \  local sn = s:clone()\n  local m, _ = s:min(1)\n  sn:add(-m[1][1])\n  local\
    \ m, _ = sn:max(1)\n  sn:div(m[1][1])\n  return sn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1kn32sdr.lua:4:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmp1kn32sdr.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp1kn32sdr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  assert(type(numbers)\
    \ == \"table\", \"Expected table of numbers, got: \" .. type(numbers))\n  assert(#numbers\
    \ >= 2, \"Expected table of at least two numbers, got: \" .. #numbers)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2pw36080.lua:17: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max_n = -1/0\n\
    \    local min_n = 1/0\n    for _, n in ipairs(numbers) do\n        if n > max_n\
    \ then\n            max_n = n\n        end\n        if n < min_n then\n      \
    \      min_n = n\n        end\n    end\n    local numbers_rescaled = {}\n    for\
    \ _, n in ipairs(numbers) do\n        table.insert(numbers_rescaled, (n - min_n)\
    \ / (max_n - min_n))\n    end\n    return numbers_rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = math.min(unpack(numbers))\n\
    \tlocal max = math.max(unpack(numbers))\n\tlocal diff = max - min\n\treturn table.map(numbers,\
    \ function(n) return (n - min) / diff end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7w85jxub.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7w85jxub.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7w85jxub.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, num in ipairs(numbers) do\n        if\
    \ num < min then\n            min = num\n        end\n        if num > max then\n\
    \            max = num\n        end\n    end\n    local span = max - min\n   \
    \ for i, num in ipairs(numbers) do\n        numbers[i] = (num - min) / span\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl13uz_8v.lua:23:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmpl13uz_8v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local scale = max - min\n    local\
    \ result = {}\n    for i = 1, #numbers do\n        result[i] = (numbers[i] - min)\
    \ / scale\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkb3fw5.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcqkb3fw5.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpcqkb3fw5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for i = 2, #numbers do\n        if numbers[i]\
    \ < min then\n            min = numbers[i]\n        elseif numbers[i] > max then\n\
    \            max = numbers[i]\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #numbers do\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min, max =\
    \ math.min(table.unpack(numbers)), math.max(table.unpack(numbers))\n    local\
    \ new_numbers = {}\n    for _, number in ipairs(numbers) do\n        new_numbers[#new_numbers\
    \ + 1] = (number - min) / (max - min)\n    end\n    return new_numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local nMin = math.min(unpack(numbers))\n\
    \    local nMax = math.max(unpack(numbers))\n    local nDiff = nMax - nMin\n \
    \   local nResult = {}\n    for i, v in ipairs(numbers) do\n        nResult[i]\
    \ = (v - nMin) / nDiff\n    end\n    return nResult\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxwzevp2.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbxwzevp2.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpbxwzevp2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = util.min_max(numbers)\n\
    \tif min == max then\n\t\treturn numbers\n\tend\n\tlocal result = {}\n\tfor _,n\
    \ in ipairs(numbers) do\n\t\ttable.insert(result, (n - min) / (max - min))\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwzm9hfn.lua:4:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpwwzm9hfn.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpwwzm9hfn.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local mi = math.min(unpack(numbers))\n\
    \    local ma = math.max(unpack(numbers))\n    return table.map(numbers, function(number)\n\
    \        return (number - mi) / (ma - mi)\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftdo63so.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpftdo63so.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpftdo63so.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_number =\
    \ math.min(unpack(numbers))\n  local max_number = math.max(unpack(numbers))\n\
    \  local span = max_number - min_number\n  for i, number in ipairs(numbers) do\n\
    \    numbers[i] = (number - min_number) / span\n  end\n  return numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluvwzt40.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpluvwzt40.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpluvwzt40.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = numbers[1]\n\
    \    local max = numbers[1]\n    for _, n in ipairs(numbers) do\n        if n\
    \ < min then\n            min = n\n        end\n        if n > max then\n    \
    \        max = n\n        end\n    end\n    local new = {}\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(new, (n - min) / (max - min))\n    end\n    return\
    \ new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    -- http://math.stackexchange.com/questions/70934/find-the-equation-of-a-linear-transformation\n\
    \    local max_x = math.max(unpack(numbers))\n    local min_x = math.min(unpack(numbers))\n\
    \    local a = 1 / (max_x - min_x)\n    local b = -min_x * a\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        result[i] = a * numbers[i] + b\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbn3h_kx3.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbn3h_kx3.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpbn3h_kx3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal n_min = math.min(unpack(numbers))\n\
    \tlocal n_max = math.max(unpack(numbers))\n\tlocal n_range = n_max - n_min\n\t\
    return map(function(x) return (x - n_min) / n_range end, numbers)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvux5ckla.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvux5ckla.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpvux5ckla.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local new_numbers = {}\n    for\
    \ _, number in ipairs(numbers) do\n        new_numbers[#new_numbers + 1] = (number\
    \ - min) / (max - min)\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrwy1jmq.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpjrwy1jmq.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpjrwy1jmq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min_n, max_n\
    \ = numbers[1], numbers[1]\n  for _, n in ipairs(numbers) do\n    min_n = math.min(min_n,\
    \ n)\n    max_n = math.max(max_n, n)\n  end\n  return (function()\n    local _accum_0\
    \ = { }\n    local _len_0 = 1\n    for _index_0 = 1, #numbers do\n      local\
    \ n = numbers[_index_0]\n      _accum_0[_len_0] = math.max(0, math.min(1, (n -\
    \ min_n) / (max_n - min_n)))\n      _len_0 = _len_0 + 1\n    end\n    return _accum_0\n\
    \  end)()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal mn, mx = nil,\
    \ nil\n\tfor i,n in ipairs(numbers) do\n\t\tif mn == nil or n < mn then mn = n\
    \ end\n\t\tif mx == nil or n > mx then mx = n end\n\tend\n\tlocal range = mx -\
    \ mn\n\tlocal result = {}\n\tfor i,n in ipairs(numbers) do\n\t\ttable.insert(result,\
    \ (n - mn) / range)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max = numbers[1]\n\
    \    local min = numbers[1]\n    for _, v in ipairs(numbers) do\n        if v\
    \ > max then\n            max = v\n        end\n        if v < min then\n    \
    \        min = v\n        end\n    end\n    local diff = max - min\n    for i,\
    \ v in ipairs(numbers) do\n        numbers[i] = (v - min) / diff\n    end\n  \
    \  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_val = numbers[1]\n\
    \tlocal max_val = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min_val\
    \ then\n\t\t\tmin_val = n\n\t\tend\n\t\tif n > max_val then\n\t\t\tmax_val = n\n\
    \t\tend\n\tend\n\tlocal new_numbers = {}\n\tfor _, n in ipairs(numbers) do\n\t\
    \tlocal new_val = (n - min_val) / (max_val - min_val)\n\t\ttable.insert(new_numbers,\
    \ new_val)\n\tend\n\treturn new_numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n\tlocal delta = max - min\n\tfor i = 1, #numbers\
    \ do\n\t\tnumbers[i] = (numbers[i] - min) / delta\n\tend\n\treturn numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0k2x30_p.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0k2x30_p.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0k2x30_p.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tlocal N = #numbers\n\tfor i = 2, N do\n\t\tif numbers[i]\
    \ < min then\n\t\t\tmin = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\t\
    max = numbers[i]\n\t\tend\n\tend\n\tif max == min then\n\t\treturn nil\n\tend\n\
    \tlocal scaled = {}\n\tfor i = 1, N do\n\t\tscaled[i] = (numbers[i] - min) / (max\
    \ - min)\n\tend\n\treturn scaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- Get the minimum\
    \ and maximum values\n  local min_value = math.min(unpack(numbers))\n  local max_value\
    \ = math.max(unpack(numbers))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv_985h5a.lua:18: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = numbers[1],\
    \ numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then min = n end\n\
    \t\tif n > max then max = n end\n\tend\n\tlocal interval = max - min\n\tfor i,\
    \ n in ipairs(numbers) do\n\t\tnumbers[i] = (n - min) / interval\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qb1jgp4.lua:18:\
    \ expected: {0.0, 1.0}\nactual: nil\nstack traceback:\n\t/tmp/tmp2qb1jgp4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\
    \tlocal max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\
    \t\t\tmin = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\t\
    local new_numbers = {}\n\tfor _, n in ipairs(numbers) do\n\t\ttable.insert(new_numbers,\
    \ (n - min) / (max - min))\n\tend\n\treturn new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  -- get the minimum\
    \ and maximum\n  local max = math.max(unpack(numbers))\n  local min = math.min(unpack(numbers))\n\
    \  -- apply rescaling\n  local rescaled = {}\n  for i, v in ipairs(numbers) do\n\
    \    rescaled[i] = (v - min) / (max - min)\n  end\n  return rescaled\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hrkvf0w.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7hrkvf0w.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp7hrkvf0w.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local rescaled = {}\n  for i,v in\
    \ ipairs(numbers) do\n    rescaled[i] = (v - min) / (max - min)\n  end\n  return\
    \ rescaled\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr17b5yc.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzr17b5yc.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpzr17b5yc.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = numbers[1],\
    \ numbers[1]\n\tfor _,number in ipairs(numbers) do\n\t\tif number < min then min\
    \ = number end\n\t\tif number > max then max = number end\n\tend\n\tfor i=1,#numbers\
    \ do\n\t\tnumbers[i] = (numbers[i] - min) / (max - min)\n\tend\n\treturn numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\t-- find the minimum\
    \ and maximum values\n\tlocal min_val = numbers[1]\n\tlocal max_val = numbers[1]\n\
    \tfor i, number in ipairs(numbers) do\n\t\tif number < min_val then\n\t\t\tmin_val\
    \ = number\n\t\tend\n\t\tif number > max_val then\n\t\t\tmax_val = number\n\t\t\
    end\n\tend\n\tlocal delta = max_val - min_val\n\t\n\tlocal result = {}\n\tfor\
    \ i, number in ipairs(numbers) do\n\t\tif delta == 0 then\n\t\t\tresult[i] = 0\n\
    \t\telse\n\t\t\tresult[i] = (number - min_val) / delta\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local lowest, highest\
    \ = math.min(unpack(numbers)), math.max(unpack(numbers))\n  local factor = highest\
    \ - lowest\n  local rescaled = {}\n  for i, n in ipairs(numbers) do\n    rescaled[i]\
    \ = (n - lowest) / factor\n  end\n  return rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_yzlgrpn.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_yzlgrpn.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp_yzlgrpn.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local biggest =\
    \ numbers[1]\n    local smallest = numbers[1]\n    for i, number in ipairs(numbers)\
    \ do\n        if biggest < number then\n            biggest = number\n       \
    \ end\n        if smallest > number then\n            smallest = number\n    \
    \    end\n    end\n    local unit = {}\n    for i, number in ipairs(numbers) do\n\
    \        unit[i] = (number - smallest) / (biggest - smallest)\n    end\n    return\
    \ unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = torch.min(numbers)\n\
    \    local max = torch.max(numbers)\n    local rescaled = torch.Tensor(numbers:size())\n\
    \    for i = 1, numbers:size(1) do\n        rescaled[i] = (numbers[i] - min) /\
    \ (max - min)\n    end\n    return rescaled\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykyvyyvy.lua:4:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpykyvyyvy.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpykyvyyvy.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local a, b = math.min(unpack(numbers)),\
    \ math.max(unpack(numbers))\n    return tablex.imap(function(n) return (n - a)\
    \ / (b - a) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9_l149v.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf9_l149v.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpf9_l149v.lua:11: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local maxval = numbers[1]\n\
    \    local minval = numbers[1]\n    for _, v in ipairs(numbers) do\n        if\
    \ v > maxval then\n            maxval = v\n        end\n        if v < minval\
    \ then\n            minval = v\n        end\n    end\n    local scale = maxval\
    \ - minval\n    local rescaled = {}\n    for _, v in ipairs(numbers) do\n    \
    \    table.insert(rescaled, (v - minval) / scale)\n    end\n    return rescaled\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max_number\
    \ = torch.max(numbers)\n    local min_number = torch.min(numbers)\n    local result\
    \ = torch.cdiv(torch.csub(numbers, min_number), torch.csub(max_number, min_number))\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj6qodrtv.lua:4:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmpj6qodrtv.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpj6qodrtv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local lowest, highest\
    \ = unpack(numbers)\n  for _, number in ipairs(numbers) do\n    if number < lowest\
    \ then\n      lowest = number\n    elseif number > highest then\n      highest\
    \ = number\n    end\n  end\n  return (numbers - lowest) / (highest - lowest)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv9gs8gq.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcv9gs8gq.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpcv9gs8gq.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local scale = 1 / (max - min)\n\
    \    local translate = -min\n    return map(function(num) return (num + translate)\
    \ * scale end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbk8uj3_y.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbk8uj3_y.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpbk8uj3_y.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max, min = -math.huge,\
    \ math.huge\n  for _, v in ipairs(numbers) do\n    if v > max then max = v end\n\
    \    if v < min then min = v end\n  end\n  if max == min then return numbers end\n\
    \  for i, v in ipairs(numbers) do\n    numbers[i] = (v - min) / (max - min)\n\
    \  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n\tlocal min_val = math.min(unpack(numbers))\n\
    \tlocal max_val = math.max(unpack(numbers))\n\tlocal diff = max_val - min_val\n\
    \tlocal rescaled = {}\n\tfor _,v in ipairs(numbers) do\n\t\tlocal y = (v - min_val)\
    \ / diff\n\t\ttable.insert(rescaled, y)\n\tend\n\treturn rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0wlmhtqc.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp0wlmhtqc.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0wlmhtqc.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local x_min = numbers[1]\n\
    \  local x_max = numbers[1]\n  for _,x in ipairs(numbers) do\n    if x_min > x\
    \ then x_min = x end\n    if x_max < x then x_max = x end\n  end\n  local a =\
    \ 1/(x_max - x_min)\n  local b = -a*x_min\n  local result = {}\n  for _,x in ipairs(numbers)\
    \ do\n    table.insert(result, a*x + b)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3crhaaj.lua:22:\
    \ expected: {0.0, 1.0}\nactual: {0.0, 1.0}\nstack traceback:\n\t/tmp/tmpb3crhaaj.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 0
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local max, min = -math.huge,\
    \ math.huge\n  for _, n in ipairs(numbers) do\n    if n > max then max = n end\n\
    \    if n < min then min = n end\n  end\n  local span = max - min\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    local x = (n - min) / span\n   \
    \ result[#result + 1] = x\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local range = numbers[#numbers]\
    \ - numbers[1]\n    local result = {}\n    for i, v in ipairs(numbers) do\n  \
    \      result[i] = (v - numbers[1]) / range\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd7lu1oq.lua:16:\
    \ expected: {1.0, 0.0}\nactual: {-0.0, 1.0}\nstack traceback:\n\t/tmp/tmppd7lu1oq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  assert(#numbers >=\
    \ 2)\n  local max_input = math.max(unpack(numbers))\n  local min_input = math.min(unpack(numbers))\n\
    \  local output = {}\n  for _, number in ipairs(numbers) do\n    if number ==\
    \ max_input then\n      table.insert(output, 1)\n    elseif number == min_input\
    \ then\n      table.insert(output, 0)\n    else\n      local scaled = (number\
    \ - min_input) / (max_input - min_input)\n      table.insert(output, scaled)\n\
    \    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldrtqohv.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpldrtqohv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpldrtqohv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local scale = max - min\n    local\
    \ rescaled = {}\n    for _, number in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (number - min) / scale)\n    end\n    return rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9urkwjc4.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9urkwjc4.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp9urkwjc4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    assert(#numbers\
    \ >= 2)\n    local maxval = math.max(unpack(numbers))\n    local minval = math.min(unpack(numbers))\n\
    \    local res = {}\n    for i, v in ipairs(numbers) do\n        res[i] = (v -\
    \ minval) / (maxval - minval)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgfqw0rs.lua:5:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplgfqw0rs.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplgfqw0rs.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local result = {}\n    for _,v\
    \ in ipairs(numbers) do\n        result[#result+1] = (v - min) / (max - min)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}),\
    \ {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaazpcgld.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaazpcgld.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpaazpcgld.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = min_in_list(numbers)\n\
    \    local max = max_in_list(numbers)\n    local result = {}\n    for i = 1, #numbers\
    \ do\n        result[i] = (numbers[i] - min) / (max - min)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n\
    \    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_cj9kz_.lua:4:\
    \ attempt to call a nil value (global 'min_in_list')\nstack traceback:\n\t/tmp/tmp7_cj9kz_.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7_cj9kz_.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n  local min = math.min(unpack(numbers))\n\
    \  local max = math.max(unpack(numbers))\n  local span = max - min\n  for i, v\
    \ in ipairs(numbers) do\n    numbers[i] = (v - min) / span\n  end\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8pu87io8.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8pu87io8.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp8pu87io8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local min = math.min(unpack(numbers))\n\
    \    local max = math.max(unpack(numbers))\n    local diff = max - min\n    local\
    \ rescaled = {}\n    for _, num in ipairs(numbers) do\n        table.insert(rescaled,\
    \ (num - min) / diff)\n    end\n    return rescaled\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4ci9a0j.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpr4ci9a0j.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpr4ci9a0j.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max_ = math.max(unpack(numbers))\n\
    \    local min_ = math.min(unpack(numbers))\n    local span = max_ - min_\n  \
    \  if span == 0 then\n        return numbers\n    end\n    local new_numbers =\
    \ {}\n    for _, n in ipairs(numbers) do\n        table.insert(new_numbers, (n\
    \ - min_) / span)\n    end\n    return new_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0,\
    \ 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75,\
    \ 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0,\
    \ 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}),\
    \ {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jpflpl0.lua:4:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp7jpflpl0.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7jpflpl0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
- exit_code: 1
  program: "-- Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n-- such that the smallest number will become 0 and the largest\
    \ will become 1\nlocal function rescale_to_unit(numbers)\n    local max_index,\
    \ max_value = find_max(numbers)\n    local min_index, min_value = find_min(numbers)\n\
    \    local range = max_value - min_value\n    for i = 1, #numbers do\n       \
    \ numbers[i] = (numbers[i] - min_value) / range\n    end\n    return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
    \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
    \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,\
    \ 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlrwmeyd.lua:4:\
    \ attempt to call a nil value (global 'find_max')\nstack traceback:\n\t/tmp/tmptlrwmeyd.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmptlrwmeyd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822221
