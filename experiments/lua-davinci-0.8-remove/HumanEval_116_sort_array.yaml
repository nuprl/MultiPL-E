name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort an array of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return table.sort(arr, function(a, b)\n        local onesa = a:tobinary():match('1'):len()\n\
    \        local onesb = b:tobinary():match('1'):len()\n        if onesa == onesb\
    \ then\n            return a < b\n        else\n            return onesa < onesb\n\
    \        end\n    end)\nend", "    local dec_arr = {}\n    for _, v in ipairs(arr)\
    \ do\n        table.insert(dec_arr, v)\n    end\n    local bin_arr = {}\n    for\
    \ _, v in ipairs(arr) do\n        table.insert(bin_arr, dec2bin(v))\n    end\n\
    \    table.sort(bin_arr)\n    local ret = {}\n    for _, v in ipairs(bin_arr)\
    \ do\n        local index = nil\n        for i, j in ipairs(dec_arr) do\n    \
    \        if v == dec2bin(j) then\n                index = i\n                break\n\
    \            end\n        end\n        local a = dec_arr[index]\n        table.remove(dec_arr,\
    \ index)\n        table.insert(ret, a)\n    end\n    return ret\nend", "  if type(arr)\
    \ ~= 'table' then return nil end\n  local function compare(a, b)\n    local a1\
    \ = a % 2; a = (a - a1) / 2\n    local b1 = b % 2; b = (b - b1) / 2\n    while\
    \ a > 0 and b > 0 do\n      local a2 = a % 2; a = (a - a2) / 2\n      local b2\
    \ = b % 2; b = (b - b2) / 2\n      if a1 < b1 then return true end\n      if a1\
    \ > b1 then return false end\n      a1 = a2; b1 = b2\n    end\n    if a > 0 then\
    \ return true end\n    if b > 0 then return false end\n    return a1 < b1\n  end\n\
    \  table.sort(arr, compare)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local bin_a = tostring(a):gsub('.', function(d) return ({['0'] = '000',\
    \ ['1'] = '001'})[d] end)\n    local bin_b = tostring(b):gsub('.', function(d)\
    \ return ({['0'] = '000', ['1'] = '001'})[d] end)\n    local a_ones = bin_a:gsub('[^1]',\
    \ '')\n    local b_ones = bin_b:gsub('[^1]', '')\n    if #a_ones == #b_ones then\n\
    \      return a < b\n    else\n      return #a_ones < #b_ones\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function sort(a, b)\n    local a1, b1 = ones(a), ones(b)\n    if\
    \ a1 < b1 then return true\n    elseif a1 > b1 then return false\n    else return\
    \ a < b end\n  end\n  table.sort(arr, sort)\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local aones = a:countones()\n        local bones = b:countones()\n\
    \        if aones == bones then\n            return a < b\n        else\n    \
    \        return aones < bones\n        end\n    end)\n    return arr\nend", " \
    \   table.sort(arr, function(a, b)\n        local a2, b2 = a, b\n        local\
    \ a1, b1 = 0, 0\n        repeat\n            a1 = a1 + a2 % 2\n            b1\
    \ = b1 + b2 % 2\n            a2 = math.floor(a2 / 2)\n            b2 = math.floor(b2\
    \ / 2)\n        until a2 == 0 and b2 == 0\n        if a1 == b1 then\n        \
    \    return a < b\n        else\n            return a1 < b1\n        end\n   \
    \ end)\n    return arr\nend", "  table.sort(arr, function(a, b)\n    local num_ones_a\
    \ = string.match(string.format(\"%b1\", a), \"1\")\n    local num_ones_b = string.match(string.format(\"\
    %b1\", b), \"1\")\n    return (num_ones_a and num_ones_b and num_ones_a:len()\
    \ == num_ones_b:len() and a < b) or (num_ones_a and num_ones_b and num_ones_a:len()\
    \ < num_ones_b:len())\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local cnt_a = tostring(a):gsub('[^1]', ''):len()\n    local cnt_b =\
    \ tostring(b):gsub('[^1]', ''):len()\n    if cnt_a == cnt_b then\n      return\
    \ a < b\n    else\n      return cnt_a < cnt_b\n    end\n  end)\n  return arr\n\
    end", "    table.sort(arr, function(a, b)\n        local aa = a % 2\n        local\
    \ bb = b % 2\n        while a > 0 do\n            aa = aa + (a % 2)\n        \
    \    a = a / 2\n        end\n        while b > 0 do\n            bb = bb + (b\
    \ % 2)\n            b = b / 2\n        end\n        if aa == bb then\n       \
    \     return a < b\n        else\n            return aa < bb\n        end\n  \
    \  end)\n    return arr\nend", "    table.sort(arr, function(x, y)\n        local\
    \ xc = bit.count(x)\n        local yc = bit.count(y)\n        if xc == yc then\n\
    \            return x < y\n        else\n            return xc < yc\n        end\n\
    \    end)\n    return arr\nend", "  local tbl = {}\n  for i,v in ipairs(arr) do\n\
    \    table.insert(tbl, {v, v/string.len(string.gsub(v .. \"\", \"0\", \"\"))})\n\
    \  end\n  table.sort(tbl, function(a,b)\n    return a[2] < b[2]\n  end)\n  for\
    \ i,v in ipairs(tbl) do\n    arr[i] = v[1]\n  end\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local aBits = get_ones(a)\n        local bBits = get_ones(b)\n\
    \        if aBits == bBits then\n            return a < b\n        else\n    \
    \        return aBits < bBits\n        end\n    end)\n    return arr\nend", " \
    \   local function bitcount(x)\n        local x = x or 0\n        local i = 0\n\
    \        while x > 0 do\n            i = i + 1\n            x = x & (x - 1)\n\
    \        end\n        return i\n    end\n    table.sort(arr, function(a, b)\n\
    \        local i, j = bitcount(a), bitcount(b)\n        if i ~= j then\n     \
    \       return i < j\n        else\n            return a < b\n        end\n  \
    \  end)\n    return arr\nend", "  table.sort(arr, function(a, b)\n    local ones_a\
    \ = a:to_binary():gsub('0', ''):len()\n    local ones_b = b:to_binary():gsub('0',\
    \ ''):len()\n    if ones_a ~= ones_b then\n      return ones_a < ones_b\n    else\n\
    \      return a < b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local x = string.len(string.gsub(string.format(\"%b\", a), '1', ''))\n\
    \    local y = string.len(string.gsub(string.format(\"%b\", b), '1', ''))\n  \
    \  if x ~= y then\n      return x < y\n    else\n      return a < b\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local s1,\
    \ s2 = string.format(\"%b\", a), string.format(\"%b\", b)\n    return s1:len()\
    \ == s2:len() and a < b or s1:len() < s2:len()\n  end)\n  return arr\nend", " \
    \   local arr_ = {}\n    local ones = {}\n    for i = 1, #arr do\n        arr_[i]\
    \ = string.format(\"%08d\", to_binary(arr[i]))\n        local ones_ = arr_[i]:gsub(\"\
    %D\", \"\")\n        ones[#ones + 1] = #ones_\n    end\n    local copy = {}\n\
    \    for i = 1, #arr do\n        copy[i] = arr[i]\n    end\n    table.sort(copy,\n\
    \               function(a, b)\n                   if ones[a] < ones[b] then\n\
    \                       return true\n                   elseif ones[a] > ones[b]\
    \ then\n                       return false\n                   else\n       \
    \                return a < b\n                   end\n               end)\n \
    \   return copy\nend", "  --[[ Returns an array of numbers to sort by their number\
    \ of 1 bits, for\n       numbers with equal bit counts, sort by number in ascending\
    \ order. ]]\n  table.sort(arr, function(a, b)\n    local a_ones = a:to_s(2):gsub(\"\
    [^1]\", \"\"):len()\n    local b_ones = b:to_s(2):gsub(\"[^1]\", \"\"):len()\n\
    \    if a_ones < b_ones then\n      return true\n    elseif a_ones > b_ones then\n\
    \      return false\n    else\n      return a < b\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(x, y)\n    local bin_x = tostring(x):gsub('0',\
    \ '')\n    local bin_y = tostring(y):gsub('0', '')\n    if #bin_x == #bin_y then\n\
    \      return x < y\n    else\n      return #bin_x < #bin_y\n    end\n  end)\n\
    \  return arr\nend", "    local lookup = {}\n    for i = 1, #arr do\n        local\
    \ n = arr[i]\n        local b = 0\n        while n > 0 do\n            b = b +\
    \ 1\n            n = n & (n - 1)\n        end\n        lookup[#lookup + 1] = {b,\
    \ arr[i]}\n    end\n    table.sort(lookup, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] < b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    for i = 1, #lookup do\n        arr[i]\
    \ = lookup[i][2]\n    end\n    return arr\nend", "    --[[\n    >>> sort_array([0,1,2,3,4,5,6,7,8,9])\n\
    \    [0, 1, 2, 4, 8, 3, 5, 6, 7, 9]\n    >>> sort_array([1,2,3,4,5,6,7,8,9,10])\n\
    \    [1, 2, 4, 8, 3, 5, 6, 7, 9, 10]\n    >>> sort_array([5,5,5,5,5,5,5,5,5,5])\n\
    \    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n    >>> sort_array([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "  table.sort(arr, function(a, b)\n    local ones_a = a:gsub('0', ''):len()\n  \
    \  local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", '    local binToNums = {}', "  return table.sort(arr, function(a, b)\n \
    \   local ra, rb = a:bit_count(), b:bit_count()\n    return ra < rb or (ra ==\
    \ rb and a < b)\n  end)\nend", "    table.sort(arr, function(a, b)\n        local\
    \ x = string.format(\"%b\", a)\n        local y = string.format(\"%b\", b)\n \
    \       return string.len(x) == string.len(y) and a < b or string.len(x) < string.len(y)\n\
    \    end)\n    return arr\nend", "  local i = 0\n  while i < #arr do\n    local\
    \ j = i + 1\n    while j < #arr do\n      if arr[i] == arr[j] then\n        local\
    \ m = i\n        local n = j\n        while m < #arr and n < #arr do\n       \
    \   local a = arr[m] % 2\n          local b = arr[n] % 2\n          if a == b\
    \ then\n            m = m + 1\n            n = n + 1\n          elseif a > b then\n\
    \            local tmp = arr[n]\n            arr[n] = arr[m]\n            arr[m]\
    \ = tmp\n            m = m + 1\n            n = n + 1\n          else\n      \
    \      n = n + 1\n          end\n        end\n      else\n        local b, c\n\
    \        b = arr[i] % 2\n        c = arr[j] % 2\n        if b == c then\n    \
    \      b = arr[i] % 4\n          c = arr[j] % 4\n          if b == c then\n  \
    \          b = arr[i] % 8\n            c = arr[j] % 8\n            if b == c then\n\
    \              b = arr[i] % 16\n              c = arr[j] % 16\n              if\
    \ b == c then\n                b = arr[i] % 32\n                c = arr[j] % 32\n\
    \                if b == c then\n                  b = arr[i] % 64\n         \
    \         c = arr[j] % 64\n                  if b == c then\n                \
    \    b = arr[i] % 128\n                    c = arr[j] % 128\n                \
    \    if b == c then\n                      b = arr[i] % 256\n                \
    \      c = arr[j] % 256\n                      if b == c then\n              \
    \          b = arr[i] % 512\n                        c = arr[j] % 512\n      \
    \                  if b == c then\n                          b = arr[i] % 1024\n\
    \                          c = arr[j] % 1024\n                          if b ==\
    \ c then\n                            b = arr[i] % 2048\n                    \
    \        c = arr[j] % 2048\n                            if b == c then\n     \
    \                         b = arr[i] % 4096\n                              c =\
    \ arr[j] % 4096\n", "  table.sort(arr,\n             function(a, b)\n        \
    \       local a1 = (a - a % 2) / 2\n               local b1 = (b - b % 2) / 2\n\
    \               local a2 = a1 - a1 % 2\n               local b2 = b1 - b1 % 2\n\
    \               while a1 ~= 0 and b1 ~= 0 do\n                 a1 = (a1 - a1 %\
    \ 2) / 2\n                 b1 = (b1 - b1 % 2) / 2\n                 a2 = a1 -\
    \ a1 % 2\n                 b2 = b1 - b1 % 2\n               end\n            \
    \   if a1 ~= b1 then\n                 return a1 > b1\n               else\n \
    \                return a > b\n               end\n             end)\n  return\
    \ arr\nend", "    table.sort(arr, function(a, b)\n        local a1, b1 = count_ones(a),\
    \ count_ones(b)\n        if a1 == b1 then\n            return a < b\n        else\n\
    \            return a1 < b1\n        end\n    end)\n    return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local abits = string.format(\"%b\", a)\n    local bbits\
    \ = string.format(\"%b\", b)\n    if #abits == #bbits then\n      return a < b\n\
    \    else\n      return #abits < #bbits\n    end\n  end)\n  return arr\nend",
  "  table.sort(arr, function(a, b)\n    local a_bin = string.format(\"%b\", a)\n\
    \    local b_bin = string.format(\"%b\", b)\n    if string.len(a_bin) ~= string.len(b_bin)\
    \ then\n      return string.len(a_bin) < string.len(b_bin)\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arr\nend", "  -- Your code here\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local na,\
    \ nb = num_ones(a), num_ones(b)\n    if na == nb then return a < b else return\
    \ na < nb end\n  end)\n  return arr\nend", "  return table.sort(arr, function(a,\
    \ b)\n    local a_ones = (tostring(a):gsub(\"[^1]\", \"\"):len())\n    local b_ones\
    \ = (tostring(b):gsub(\"[^1]\", \"\"):len())\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    end", "    local dict = {}\n    for i = 1, #arr do\n        local v = arr[i]\n\
    \        local c = count_ones(v)\n        if dict[c] == nil then\n           \
    \ dict[c] = {}\n        end\n        dict[c][#dict[c] + 1] = v\n    end\n    local\
    \ ans = {}\n    for k, v in pairs(dict) do\n        sort(v)\n        for i = 1,\
    \ #v do\n            ans[#ans + 1] = v[i]\n        end\n    end\n    return ans\n\
    end", "  table.sort(arr,function(a,b)\n    return tostring(a):match('1') < tostring(b):match('1')\
    \ or tostring(a) < tostring(b)\n  end)\n  return arr\nend", "    local t = {}\n\
    \    for _, v in ipairs(arr) do\n        local l = select(2, string.gsub(string.reverse(string.format(\"\
    %b\", v)), '1', ''))\n        t[#t + 1] = {len = l, val = v}\n    end\n    table.sort(t,\
    \ function(a, b)\n        if a.len ~= b.len then\n            return a.len < b.len\n\
    \        else\n            return a.val < b.val\n        end\n    end)\n    local\
    \ res = {}\n    for _, v in ipairs(t) do\n        res[#res + 1] = v.val\n    end\n\
    \    return res\nend", "  local x = {}\n  for k, v in pairs(arr) do\n    x[k]\
    \ = bit.band(v, 7)\n  end\n  table.sort(x)\n  for k, v in pairs(x) do\n    x[k]\
    \ = bit.lshift(1, v)\n  end\n  return x\nend", "    table.sort(arr, function(a,\
    \ b)\n        local a_binary = tostring(a):gsub('0', '')\n        local b_binary\
    \ = tostring(b):gsub('0', '')\n        if a_binary:len() == b_binary:len() then\n\
    \            return a < b\n        end\n        return a_binary:len() < b_binary:len()\n\
    \    end)\n    return arr\nend", "    -- bit.tohex(n) returns the hex representation\
    \ of n (e.g. bit.tohex(11) == \"0xb\").\n    -- bit.tohex(n, 2) returns the 2-digit\
    \ hex representation of n (e.g. bit.tohex(11, 2) == \"0x0b\").\n    -- bit.tobit(s)\
    \ returns the bit representation of s (e.g. bit.tobit(\"0xb\") == 11).\n    --\
    \ string.format(\"%x\", n) returns the lowercase hex representation of n (e.g.\
    \ string.format(\"%x\", 11) == \"b\").\n    -- string.format(\"%02x\", n) returns\
    \ the lowercase 2-digit hex representation of n (e.g. string.format(\"%02x\",\
    \ 11) == \"0b\").\n    local function to_hex(n)\n        local hex = string.format(\"\
    %02x\", n)\n        local count = 0\n        for h in hex:gmatch(\"%d\") do\n\
    \            count = count + h\n        end\n        return count .. \"-\" ..\
    \ hex\n    end\n    table.sort(arr, function(a, b)\n        return to_hex(a) <\
    \ to_hex(b)\n    end)\n    return arr\nend", "    if #arr == 0 then return arr\
    \ end\n    table.sort(arr, function(a, b)\n        local a_str = string.format(\"\
    %b\", a)\n        local b_str = string.format(\"%b\", b)\n        local a_ones\
    \ = a_str:gsub(\"0\", \"\"):len()\n        local b_ones = b_str:gsub(\"0\", \"\
    \"):len()\n        if a_ones == b_ones then\n            return a < b\n      \
    \  else\n            return a_ones < b_ones\n        end\n    end)\n    return\
    \ arr\nend", "  local function bin_ones(num)\n    local res = 0\n    while num\
    \ > 0 do\n      if num % 2 == 1 then\n        res = res + 1\n      end\n     \
    \ num = math.floor(num / 2)\n    end\n    return res\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ao, bo = bin_ones(a), bin_ones(b)\n    if ao == bo\
    \ then\n      return a < b\n    else\n      return ao < bo\n    end\n  end)\n\
    \  return arr\nend", "  table.sort(arr, function(a, b)\n    local bin_a = a:binary()\n\
    \    local bin_b = b:binary()\n    local ones_a = bin_a:count('1')\n    local\
    \ ones_b = bin_b:count('1')\n    if ones_a == ones_b then\n      return a < b\n\
    \    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend",
  "  local t = {}\n  for i = 1, #arr do\n    local x = arr[i]\n    local n = 0\n \
    \   while x > 0 do\n      n = n + (x & 1)\n      x = x >> 1\n    end\n    t[#t\
    \ + 1] = {n, arr[i]}\n  end\n  table.sort(t, function(a, b)\n    if a[1] ~= b[1]\
    \ then\n      return a[1] < b[1]\n    else\n      return a[2] < b[2]\n    end\n\
    \  end)\n  for i = 1, #t do\n    arr[i] = t[i][2]\n  end\n  return arr\nend",
  "  local sorted = {}\n  local dictionary = {}\n  for _,v in ipairs(arr) do\n   \
    \ local bin = dec_to_bin(v)\n    if not dictionary[bin] then\n      dictionary[bin]\
    \ = {}\n    end\n    table.insert(dictionary[bin], v)\n  end\n  for _,t in pairs(dictionary)\
    \ do\n    table.sort(t)\n    for _,n in ipairs(t) do\n      table.insert(sorted,\
    \ n)\n    end\n  end\n  return sorted\nend", "    table.sort(arr, function(a,\
    \ b)\n        return a:lower():gsub('.', {[\"1\"] = 1, [\"0\"] = 0}) > b:lower():gsub('.',\
    \ {[\"1\"] = 1, [\"0\"] = 0})\n    end)\n    return arr\nend", "  table.sort(arr,\
    \ function(x, y)\n    local x_ones = tostring(x):gsub('%d', ''):len()\n    local\
    \ y_ones = tostring(y):gsub('%d', ''):len()\n    if x_ones == y_ones then\n  \
    \    return x < y\n    else\n      return x_ones < y_ones\n    end\n  end)\n \
    \ return arr\nend", "  table.sort(arr, function(a, b)\n    return\n      string.format(\"\
    %010d\", a):match(\"1+\") <\n      string.format(\"%010d\", b):match(\"1+\") or\n\
    \      (string.format(\"%010d\", a):match(\"1+\") ==\n       string.format(\"\
    %010d\", b):match(\"1+\") and\n       a < b)\n  end)\n  return arr\nend", "  local\
    \ ret = {}\n  table.sort(arr, function(a, b)\n    local a_bin = bit.tobits(a)\n\
    \    local b_bin = bit.tobits(b)\n    local a_sum = sum(a_bin)\n    local b_sum\
    \ = sum(b_bin)\n    if a_sum == b_sum then\n      return a < b\n    else\n   \
    \   return a_sum < b_sum\n    end\n  end)\n  return arr\nend", "    local sort_func\
    \ = function(a, b)\n        local a_ones = tostring(string.format(\"%o\", a)):gsub(\"\
    1\", \"\"):len()\n        local b_ones = tostring(string.format(\"%o\", b)):gsub(\"\
    1\", \"\"):len()\n        if a_ones == b_ones then\n            return a < b\n\
    \        else\n            return a_ones < b_ones\n        end\n    end\n    table.sort(arr,\
    \ sort_func)\n    return arr\nend", "  return table.sort(arr, function(a, b)\n\
    \    local a1 = (a % 2) + math.floor(a / 2)\n    local b1 = (b % 2) + math.floor(b\
    \ / 2)\n    if a1 == b1 then\n      return a < b\n    else\n      return a1 <\
    \ b1\n    end\n  end)\nend", "  table.sort(arr, function(a, b)\n    local a1,\
    \ b1 = a % 2, b % 2\n    if a1 == b1 then\n      return a < b\n    else\n    \
    \  return a1 < b1\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(x,\
    \ y)\n    local x1 = x % 2\n    local y1 = y % 2\n    if x1 ~= y1 then\n     \
    \ return x1 < y1\n    end\n    local xbin = bits(x)\n    local ybin = bits(y)\n\
    \    local xones = xbin:match('1*')\n    local yones = ybin:match('1*')\n    local\
    \ xlen = #xones\n    local ylen = #yones\n    if xlen ~= ylen then\n      return\
    \ xlen < ylen\n    end\n    return x < y\n  end)\n  return arr\nend", "  return\
    \ table.sort(arr, function(a, b)\n    local ones = function(n)\n      local c\
    \ = 0\n      while n > 0 do\n        c = c + (n % 2)\n        n = math.floor(n\
    \ / 2)\n      end\n      return c\n    end\n    local ao, bo = ones(a), ones(b)\n\
    \    if ao == bo then\n      return a < b\n    else\n      return ao < bo\n  \
    \  end\n  end)\nend", "    table.sort(arr, function(a, b)\n        local A, B\
    \ = tostring(a, 2), tostring(b, 2)\n        local f = #A - #B\n        if f ==\
    \ 0 then\n            return a < b\n        else\n            return f < 0\n \
    \       end\n    end)\n    return arr\nend", "    local cmp = function(a, b)\n\
    \        local c, d = bit32.bit(a), bit32.bit(b)\n        if c == d then\n   \
    \         return a < b\n        else\n            return c < d\n        end\n\
    \    end\n    table.sort(arr, cmp)\n    return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local fa, fb = string.format(\"%b\", a), string.format(\"\
    %b\", b)\n        local counta, countb = fa:gsub(\"1\", \"\"), fb:gsub(\"1\",\
    \ \"\")\n        if counta ~= countb then\n            return counta < countb\n\
    \        else\n            return a < b\n        end\n    end)\n    return arr\n\
    end", "  local count = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    count[num]\
    \ = (count[num] or 0) + 1\n  end\n  table.sort(count)\n  local res = {}\n  for\
    \ i = 0, #count do\n    local c = count[i]\n    if c then\n      for j = 1, c\
    \ do\n        res[#res + 1] = i\n      end\n    end\n  end\n  return res\nend",
  "    local function sorter(a, b)\n        return tostring(a):gsub('0', ''):len()\
    \ < tostring(b):gsub('0', ''):len()\n            or\n            tostring(a):gsub('0',\
    \ ''):len() == tostring(b):gsub('0', ''):len() and a < b\n    end\n    table.sort(arr,\
    \ sorter)\n    return arr\nend", "  local ones = {}\n  for i = 1, #arr do\n  \
    \  local b = {}\n    for p in (\"0\" .. string.format(\"%b\", arr[i])):gmatch(\"\
    .\") do\n      b[#b + 1] = p\n    end\n    ones[#ones + 1] = {b = b, v = arr[i]}\n\
    \  end\n  table.sort(ones, function(a, b)\n    if #a.b == #b.b then\n      return\
    \ a.v < b.v\n    else\n      return #a.b < #b.b\n    end\n  end)\n  local result\
    \ = {}\n  for i = 1, #ones do\n    result[#result + 1] = ones[i].v\n  end\n  return\
    \ result\nend", "  return {};\nend", "  table.sort(arr, function(a, b)\n    if\
    \ a == b then return a < b end\n    local binA = string.gsub(string.format(\"\
    %o\", a), \"0\", \"\")\n    local binB = string.gsub(string.format(\"%o\", b),\
    \ \"0\", \"\")\n    if #binA == #binB then return a < b end\n    return #binA\
    \ < #binB\n  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n \
    \       local aones = a:count('1')\n        local bones = b:count('1')\n     \
    \   if aones == bones then\n            return a < b\n        else\n         \
    \   return aones < bones\n        end\n    end)\n    return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        return (string.gsub(string.format(\"%o\", a), \"1\"\
    , \"\") .. a) <\n               (string.gsub(string.format(\"%o\", b), \"1\",\
    \ \"\") .. b)\n    end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local aBin, bBin = string.match(string.format(\"%b\", a), '1(%d+)')\
    \ or '', string.match(string.format(\"%b\", b), '1(%d+)') or ''\n    local aBinLen,\
    \ bBinLen = #aBin, #bBin\n    if aBinLen ~= bBinLen then\n      return aBinLen\
    \ < bBinLen\n    else\n      return a < b\n    end\n  end)\n  return arr\nend",
  "    local t = {}\n    for i,v in ipairs(arr) do\n        t[i] = {v,v%2}\n     \
    \   v = v // 2\n        while v ~= 0 do\n            t[i][2] = t[i][2] + v%2\n\
    \            v = v // 2\n        end\n    end\n    table.sort(t, function(a,b)\
    \ return a[2]<b[2] or (a[2]==b[2] and a[1]<b[1]) end)\n    for i,v in ipairs(t)\
    \ do\n        arr[i] = v[1]\n    end\n    return arr\nend", "  local function\
    \ by_bin_ones(a, b)\n    return (a % 2 == 1 and 0 or 1) + (b % 2 == 1 and 0 or\
    \ 1)\n        or a < b\n  end\n  table.sort(arr, by_bin_ones)\n  return arr\n\
    end", "    table.sort(arr, function(a, b)\n        return (toBin(a):match('1')\
    \ or ''):len() < (toBin(b):match('1') or ''):len()\n    end)\n    return arr\n\
    end", "    local cmp = function(a, b)\n        local c1, c2 = count_ones(a), count_ones(b)\n\
    \        if c1 == c2 then\n            return a < b\n        else\n          \
    \  return c1 < c2\n        end\n    end\n    table.sort(arr, cmp)\n    return\
    \ arr\nend", "  table.sort(arr, function(x, y)\n    return x:count('1') > y:count('1')\n\
    \  end)\n  return arr\nend", "  local sortArray = {}\n  for _, value in ipairs(arr)\
    \ do\n    local decimal = value\n    local binary = string.format(\"%b\", value)\n\
    \    local count = 0\n    for char in binary:gmatch(\"[01]\") do\n      if char\
    \ == \"1\" then\n        count = count + 1\n      end\n    end\n    table.insert(sortArray,\
    \ {decimal, count})\n  end\n  table.sort(sortArray, function(a, b)\n    if a[2]\
    \ == b[2] then\n      return a[1] < b[1]\n    else\n      return a[2] < b[2]\n\
    \    end\n  end)\n  local sortedArray = {}\n  for _, pair in ipairs(sortArray)\
    \ do\n    table.insert(sortedArray, pair[1])\n  end\n  return sortedArray\nend",
  "  if #arr < 2 then return arr end\n  local sort_table = {}\n  for _,v in ipairs(arr)\
    \ do\n    local i = string.len(string.gsub(string.format(\"%b\", v), \"[^1]\"\
    , \"\"))\n    sort_table[i] = sort_table[i] or {}\n    table.insert(sort_table[i],\
    \ v)\n  end\n  local res = {}\n  for k,v in ipairs(sort_table) do\n    for _,x\
    \ in ipairs(v) do\n      table.insert(res, x)\n    end\n  end\n  return res\n\
    end", "    local num_to_sort = {}\n    for _, v in ipairs(arr) do\n        local\
    \ b = dec_to_bin(v)\n        local c = count_char(b, \"1\")\n        table.insert(num_to_sort,\
    \ { v, c })\n    end\n    table.sort(num_to_sort, function(a, b)\n        if a[2]\
    \ == b[2] then\n            return a[1] < b[1]\n        else\n            return\
    \ a[2] < b[2]\n        end\n    end)\n    local ans = {}\n    for _, v in ipairs(num_to_sort)\
    \ do\n        table.insert(ans, v[1])\n    end\n    return ans\nend", "    table.sort(arr,\
    \ function(a, b)\n        local a_bin = tostring(a):gsub('.', function(c) return\
    \ tonumber(c) end)\n        local b_bin = tostring(b):gsub('.', function(c) return\
    \ tonumber(c) end)\n        local a_count = a_bin:gsub('0', ''):len()\n      \
    \  local b_count = b_bin:gsub('0', ''):len()\n        if a_count == b_count then\n\
    \            return a < b\n        else\n            return a_count < b_count\n\
    \        end\n    end)\n    return arr\nend", "  table.sort(arr, function(x, y)\n\
    \    local x_ones = 0\n    local y_ones = 0\n    local y_decimal = 0\n    local\
    \ x_decimal = 0\n    for i=1,32 do\n      local xbit = math.floor(x / 2^(i-1))\
    \ % 2\n      local ybit = math.floor(y / 2^(i-1)) % 2\n      if xbit == 1 then\n\
    \        x_ones = x_ones + 1\n      end\n      if ybit == 1 then\n        y_ones\
    \ = y_ones + 1\n      end\n      if i == 1 then\n        x_decimal = xbit\n  \
    \      y_decimal = ybit\n      else\n        x_decimal = x_decimal + xbit * 10^(i-1)\n\
    \        y_decimal = y_decimal + ybit * 10^(i-1)\n      end\n    end\n    if x_ones\
    \ == y_ones then\n      return x_decimal < y_decimal\n    else\n      return x_ones\
    \ < y_ones\n    end\n  end)\n  return arr\nend", "    return table.sort(arr, function(a,\
    \ b)\n        local A, B = 0, 0\n        while a > 0 do\n            A = A + (a\
    \ % 2)\n            a = a // 2\n        end\n        while b > 0 do\n        \
    \    B = B + (b % 2)\n            b = b // 2\n        end\n        if A == B then\n\
    \            return a < b\n        end\n        return A < B\n    end)\nend",
  "\ttable.sort(arr, function(a, b)\n\t\tlocal a_ones = string.gsub(string.format(\"\
    %08b\", a), \"0\", \"\")\n\t\tlocal b_ones = string.gsub(string.format(\"%08b\"\
    , b), \"0\", \"\")\n\t\treturn #a_ones == #b_ones and a < b or #a_ones < #b_ones\n\
    \tend)\n\treturn arr\nend", "    table.sort(arr, function(a, b)\n        if count_ones(a)\
    \ == count_ones(b) then\n            return a < b\n        else\n            return\
    \ count_ones(a) < count_ones(b)\n        end\n    end)\n    return arr\nend",
  "  local function counter(x)\n    local i = 0\n    while x > 0 do\n      if math.floor(x\
    \ % 2) == 1 then\n        i = i + 1\n      end\n      x = math.floor(x / 2)\n\
    \    end\n    return i\n  end\n  table.sort(arr, function(a, b)\n    local x,\
    \ y = counter(a), counter(b)\n    if x == y then\n      return a < b\n    else\n\
    \      return x < y\n    end\n  end)\n  return arr\nend", "    table.sort(arr,\
    \ function(a, b)\n        local sa = tostring(a):gsub('0', '')\n        local\
    \ sb = tostring(b):gsub('0', '')\n        return #sa == #sb and a < b or #sa <\
    \ #sb\n    end)\n    return arr\nend\nreturn sort_array", "  local ones = {}\n\
    \  for _, n in ipairs(arr) do\n    local binary = string.format(\"%b\", n)\n \
    \   local ones_count = binary:match(\"%d+\"):len()\n    ones[ones_count] = ones[ones_count]\
    \ or {}\n    table.insert(ones[ones_count], n)\n  end\n  local ans = {}\n  for\
    \ k, v in pairs(ones) do\n    table.sort(v)\n    for _, n in ipairs(v) do\n  \
    \    table.insert(ans, n)\n    end\n  end\n  return ans\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:tobinary():gsub('[^1]', ''):len()\n   \
    \ local b_ones = b:tobinary():gsub('[^1]', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local ones_a\
    \ = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a\
    \ ~= ones_b then\n      return ones_a < ones_b\n    else\n      return a < b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_one(n)\n    return\
    \ tostring(n):gsub('[^1]', ''):len()\n  end\n  table.sort(arr, function(a, b)\n\
    \    local count_a, count_b = count_one(a), count_one(b)\n    if count_a == count_b\
    \ then\n      return a < b\n    else\n      return count_a < count_b\n    end\n\
    \  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n        local\
    \ a1, b1 = a:count_ones(), b:count_ones()\n        if a1 == b1 then\n        \
    \    return a < b\n        else\n            return a1 < b1\n        end\n   \
    \ end)\n    return arr\nend", "    table.sort(arr, function(a, b)\n        local\
    \ ones_a = a - (a % 2)\n        local ones_b = b - (b % 2)\n        local count_a\
    \ = 0\n        local count_b = 0\n        while ones_a > 0 do\n            count_a\
    \ = count_a + (ones_a % 2)\n            ones_a = ones_a / 2\n        end\n   \
    \     while ones_b > 0 do\n            count_b = count_b + (ones_b % 2)\n    \
    \        ones_b = ones_b / 2\n        end\n        if count_a == count_b then\n\
    \            return a < b\n        end\n        return count_a < count_b\n   \
    \ end)\n    return arr\nend", "\tlocal function sort_index(index)\n\t\tlocal ones,\
    \ value = index[1], index[2]\n\t\tif ones == 0 then\n\t\t\treturn 0\n\t\telse\n\
    \t\t\tlocal binary = ''\n\t\t\twhile value > 0 do\n\t\t\t\tbinary = (value % 2\
    \ == 0 and '0' or '1') .. binary\n\t\t\t\tvalue = math.floor(value / 2)\n\t\t\t\
    end\n\t\t\treturn tonumber(binary)\n\t\tend\n\tend\n\tlocal indices = {}\n\tfor\
    \ i, v in ipairs(arr) do\n\t\tindices[i] = {v:len() - v:gsub('1', ''):len(), v}\n\
    \tend\n\ttable.sort(indices, function(x, y)\n\t\treturn sort_index(x) < sort_index(y)\n\
    \tend)\n\tfor i, v in ipairs(indices) do\n\t\tarr[i] = v[2]\n\tend\n\treturn arr\n\
    end", "    local lookup = {}\n    for i = 1, #arr do\n        local str = string.format(\"\
    %b\", arr[i])\n        if not lookup[str] then\n            lookup[str] = {}\n\
    \        end\n        table.insert(lookup[str], arr[i])\n    end\n    local sorted_keys\
    \ = {}\n    for k, v in pairs(lookup) do\n        table.insert(sorted_keys, k)\n\
    \    end\n    table.sort(sorted_keys)\n    local result = {}\n    for i = 1, #sorted_keys\
    \ do\n        local values = lookup[sorted_keys[i]]\n        table.sort(values)\n\
    \        for j = 1, #values do\n            table.insert(result, values[j])\n\
    \        end\n    end\n    return result\nend", "  table.sort(arr, function(a,\
    \ b)\n    local b1, b2 = string.gsub(string.format(\"%b\", a), '1', ''), string.gsub(string.format(\"\
    %b\", b), '1', '')\n    return #b1 < #b2 or (#b1 == #b2 and a < b)\n  end)\n \
    \ return arr\nend", "  -- Your code here\n  local function numOnes(i)\n    local\
    \ r = 0\n    for c in (\"0\" .. math.tointeger(i)):gmatch(\"%d\") do\n      if\
    \ c == \"1\" then r = r + 1 end\n    end\n    return r\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a1 = numOnes(a)\n    local b1 = numOnes(b)\n    if\
    \ a1 == b1 then return a < b end\n    return a1 < b1\n  end)\n  return arr\nend",
  "\t-- Sort based on the number of ones in binary,\n\t-- and then based on the decimal\
    \ value.\n\ttable.sort(arr, function(a, b)\n\t\tlocal a_ones = (string.gsub(string.format(\"\
    %b\", a), \"[01]\", \"\"))\n\t\tlocal b_ones = (string.gsub(string.format(\"%b\"\
    , b), \"[01]\", \"\"))\n\t\treturn (a_ones == b_ones) and (a < b) or (a_ones <\
    \ b_ones)\n\tend)\n\treturn arr\nend", "  table.sort(arr, function(x, y)\n   \
    \ local x_ones = string.match(string.format(\"%b\", x), \"(0+)$\")\n    local\
    \ y_ones = string.match(string.format(\"%b\", y), \"(0+)$\")\n    if x_ones ==\
    \ y_ones then\n      return x < y\n    else\n      return #x_ones < #y_ones\n\
    \    end\n  end)\n  return arr\nend", "    table.sort(arr, function(x, y)\n  \
    \      if x == y then return x < y end\n        local xr = x\n        local yr\
    \ = y\n        local xc = 0\n        local yc = 0\n        while xr > 0 or yr\
    \ > 0 do\n            if xr % 2 > 0 then xc = xc + 1 end\n            if yr %\
    \ 2 > 0 then yc = yc + 1 end\n            xr = math.floor(xr / 2)\n          \
    \  yr = math.floor(yr / 2)\n        end\n        if xc == yc then return x < y\
    \ end\n        return xc < yc\n    end)\n    return arr\nend\nreturn sort_array",
  "  local t = {}\n  for i = 1, #arr do\n    local n = arr[i]\n    local s = 0\n \
    \   while n > 0 do\n      if n % 2 == 1 then\n        s = s + 1\n      end\n \
    \     n = math.floor(n / 2)\n    end\n    t[#t + 1] = {i, s, arr[i]}\n  end\n\
    \  table.sort(t, function(a, b)\n    if a[2] < b[2] then\n      return true\n\
    \    elseif a[2] > b[2] then\n      return false\n    else\n      return a[3]\
    \ < b[3]\n    end\n  end)\n  local r = {}\n  for i = 1, #t do\n    r[i] = t[i][3]\n\
    \  end\n  return r\nend", "    table.sort(arr, function(a, b)\n        local ones_a\
    \ = count_ones(a)\n        local ones_b = count_ones(b)\n        if ones_a ==\
    \ ones_b then\n            return a < b\n        else\n            return ones_a\
    \ < ones_b\n        end\n    end)\n    return arr\nend", "  local function cmp(a,\
    \ b)\n    local count_a = a:gsub('[^1]', ''):len()\n    local count_b = b:gsub('[^1]',\
    \ ''):len()\n    if count_a == count_b then\n      return a < b\n    else\n  \
    \    return count_a < count_b\n    end\n  end\n  table.sort(arr, cmp)\n  return\
    \ arr\nend", "    -- Sort by number of 1s, then by size.\n    table.sort(arr,\
    \ function(a, b)\n        local count_a = a:to(2):count_ones()\n        local\
    \ count_b = b:to(2):count_ones()\n        if count_a == count_b then\n       \
    \     return a < b\n        else\n            return count_a < count_b\n     \
    \   end\n    end)\n    return arr\nend", "  table.sort(arr, function(a, b)\n \
    \   local a_ones = select(2, string.gsub(string.format(\"%o\", a), \"1\", \"\"\
    ))\n    local b_ones = select(2, string.gsub(string.format(\"%o\", b), \"1\",\
    \ \"\"))\n    if a_ones == b_ones then\n      return a < b\n    else\n      return\
    \ a_ones < b_ones\n    end\n  end)\n  return arr\nend", "    table.sort(arr, function(a,\
    \ b)\n        local a_ones = bit.count(a)\n        local b_ones = bit.count(b)\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend",
  "  table.sort(arr, function(x, y)\n    local a, b = tostring(x, 2), tostring(y,\
    \ 2)\n    local ones = select(2, a:gsub('1', '')) < select(2, b:gsub('1', ''))\n\
    \    return ones or x < y\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local ones_a = a - a % 2\n    local ones_b = b - b % 2\n    return ones_a\
    \ < ones_b or (ones_a == ones_b and a < b)\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(x, y)\n    local x_ones = x % 2\n    local y_ones = y % 2\n    while\
    \ x > 0 do\n      x_ones = x_ones + math.floor(x / 2) % 2\n      x = math.floor(x\
    \ / 2)\n    end\n    while y > 0 do\n      y_ones = y_ones + math.floor(y / 2)\
    \ % 2\n      y = math.floor(y / 2)\n    end\n    if x_ones == y_ones then\n  \
    \    return x < y\n    else\n      return x_ones < y_ones\n    end\n  end)\n \
    \ return arr\nend", "\tlocal function cmp(a, b)\n\t\tlocal a_ones = string.gsub(string.format(\"\
    %b\", a), \"[^1]\", \"\")\n\t\tlocal b_ones = string.gsub(string.format(\"%b\"\
    , b), \"[^1]\", \"\")\n\t\tif a_ones == b_ones then\n\t\t\treturn a < b\n\t\t\
    else\n\t\t\treturn #a_ones < #b_ones\n\t\tend\n\tend\n\ttable.sort(arr, cmp)\n\
    \treturn arr\nend", "  local function cmp(a, b)\n    local d = a - b\n    if d\
    \ ~= 0 then\n      return d\n    end\n    return string.len(string.gsub(string.format(\"\
    %b\", a), '1', ''))\n      < string.len(string.gsub(string.format(\"%b\", b),\
    \ '1', ''))\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local aa = a\n    local bb = b\n    while aa > 0 or bb >\
    \ 0 do\n      local x = aa % 2\n      local y = bb % 2\n      if x > y then\n\
    \        return false\n      elseif x < y then\n        return true\n      end\n\
    \      aa = math.floor(aa / 2)\n      bb = math.floor(bb / 2)\n    end\n    return\
    \ a < b\n  end)\n  return arr\nend", "  return arr:map(function(value)\n    return\
    \ {value = value, ones = value:tostring(2):match(\"1\") and #value:tostring(2):match(\"\
    1\") or 0}\n  end):sort(function(a, b)\n    return a.ones < b.ones or (a.ones\
    \ == b.ones and a.value < b.value)\n  end):map(function(value)\n    return value.value\n\
    \  end)\nend", "  local t = {}\n  for _,i in ipairs(arr) do\n    local b = tostring(i):gsub(\"\
    0\", \"\"):gsub(\"1\", \"\"):len()\n    t[#t+1] = {i,b}\n  end\n  table.sort(t,\
    \ function(a,b) return a[2] < b[2] or (a[2] == b[2] and a[1] < b[1]) end)\n  local\
    \ out = {}\n  for _,v in ipairs(t) do\n    out[#out+1] = v[1]\n  end\n  return\
    \ out\nend", "    -- sort the input array\n    table.sort(arr, function(n1, n2)\n\
    \        -- same number of 1s in the binary representation?\n        if bit.count(n1)\
    \ == bit.count(n2) then\n            -- sort by value\n            return n1 <\
    \ n2\n        else\n            -- sort by number of 1s\n            return bit.count(n1)\
    \ < bit.count(n2)\n        end\n    end)\n    return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local x, y = (function(a, b)\n      local x, y = bit.tonumber(bit.tobit(a)),\
    \ bit.tonumber(bit.tobit(b))\n      if x ~= y then\n        return x, y\n    \
    \  end\n      return a, b\n    end)(bit.band(1, a), bit.band(1, b))\n    if x\
    \ == y then\n      return a < b\n    end\n    return x < y\n  end)\n  return arr\n\
    end", "  return table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\nend", "  local\
    \ t = {}\n  for _, v in ipairs(arr) do\n    local b = 0\n    for d in tostring(v):gmatch(\"\
    1\") do\n      b = b + 1\n    end\n    if not t[b] then\n      t[b] = {}\n   \
    \ end\n    table.insert(t[b], v)\n  end\n  local result = {}\n  for k, v in ipairs(t)\
    \ do\n    table.sort(v)\n    for _, w in ipairs(v) do\n      table.insert(result,\
    \ w)\n    end\n  end\n  return result\nend", "  table.sort(arr, function(a, b)\n\
    \    local A, B =\n      a .. \"\" .. b:gsub(\"[^1]\", \"\"),\n      b .. \"\"\
    \ .. a:gsub(\"[^1]\", \"\")\n    local A1, B1 = A:match(\"^1*\"), B:match(\"^1*\"\
    )\n    if #A1 == #B1 then\n      return A < B\n    else\n      return #A1 < #B1\n\
    \    end\n  end)\n  return arr\nend", "  local function arr_compare(a, b)\n  \
    \  local function ones(x)\n      return x - 2^(math.floor(math.log(x)/math.log(2)))\n\
    \    end\n    return ones(a) < ones(b) or (ones(a) == ones(b) and a < b)\n  end\n\
    \  table.sort(arr, arr_compare)\n  return arr\nend", "    return table.sort(arr,\
    \ function(a, b)\n        local str_a = number.tobinary(a)\n        local str_b\
    \ = number.tobinary(b)\n        local count_a = str_a:gsub(\"[^1]\", \"\"):len()\n\
    \        local count_b = str_b:gsub(\"[^1]\", \"\"):len()\n        if count_a\
    \ ~= count_b then\n            return count_a < count_b\n        else\n      \
    \      return a < b\n        end\n    end)\nend", "  table.sort(arr, function(x,\
    \ y)\n    local xb = tostring(math.tointeger(x)):match('1')\n    local yb = tostring(math.tointeger(y)):match('1')\n\
    \    if xb and yb then\n      if #xb == #yb then\n        return x < y\n     \
    \ else\n        return #xb < #yb\n      end\n    elseif xb then\n      return\
    \ true\n    elseif yb then\n      return false\n    else\n      return x < y\n\
    \    end\n  end)\n  return arr\nend", "  -- define a function that returns the\
    \ number of 1 bits in a\n  -- number's binary representation.\n  local function\
    \ numbits(n)\n    local nb = 0\n    for b in tostring(n):gmatch(\"1\") do\n  \
    \    nb = nb + 1\n    end\n    return nb\n  end\n  -- Use a \"stable\" sort to\
    \ sort by number of 1 bits, then by\n  -- number itself.\n  table.sort(arr, function(a,\
    \ b)\n    local a1 = numbits(a)\n    local b1 = numbits(b)\n    if a1 == b1 then\n\
    \      return a < b\n    else\n      return a1 < b1\n    end\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones = 0\n    local\
    \ b_ones = 0\n    local a_dec = a\n    local b_dec = b\n    while a > 0 do\n \
    \     a_ones = a_ones + (a % 2)\n      a = math.floor(a / 2)\n    end\n    while\
    \ b > 0 do\n      b_ones = b_ones + (b % 2)\n      b = math.floor(b / 2)\n   \
    \ end\n    if a_ones ~= b_ones then\n      return a_ones < b_ones\n    else\n\
    \      return a_dec < b_dec\n    end\n  end)\n  return arr\nend", "  return table.sort(arr,\
    \ function(a, b)\n    local a_b = string.match(string.format(\"%b\", a), \"1*$\"\
    )\n    local b_b = string.match(string.format(\"%b\", b), \"1*$\")\n    if a_b:len()\
    \ == b_b:len() then\n      return a < b\n    else\n      return a_b:len() < b_b:len()\n\
    \    end\n  end)\nend", "  table.sort(arr, function(a, b)\n    local a_ones =\
    \ math.floor(math.log(a, 2))\n    local b_ones = math.floor(math.log(b, 2))\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "    table.sort(arr, function(a,\
    \ b)\n        -- First check number of ones.\n        local c1 = string.gsub(string.format(\"\
    %b\", a), \"[^1]\", \"\")\n        local c2 = string.gsub(string.format(\"%b\"\
    , b), \"[^1]\", \"\")\n        if #c1 ~= #c2 then\n            return #c1 < #c2\n\
    \        end\n        -- For same number of ones, sort by decimal value.\n   \
    \     return a < b\n    end)\n    return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local ta, tb = tostring(a, 2), tostring(b, 2)\n    local da, db = a,\
    \ b\n    for i = 1, #ta do\n      if ta:sub(i, i) == '1' then\n        da = da\
    \ + 100\n      end\n    end\n    for i = 1, #tb do\n      if tb:sub(i, i) == '1'\
    \ then\n        db = db + 100\n      end\n    end\n    return da < db\n  end)\n\
    \  return arr\nend", "  if #arr < 2 then return arr end\n  local has_number =\
    \ false\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      has_number = true\n\
    \      break\n    end\n  end\n  if not has_number then return arr end\n  local\
    \ res = {}\n  local o_map = {}\n  for i = 1, #arr do\n    local num = arr[i]\n\
    \    local ones = 0\n    while num > 0 do\n      ones = ones + num % 2\n     \
    \ num = math.floor(num / 2)\n    end\n    if not o_map[ones] then o_map[ones]\
    \ = {} end\n    table.insert(o_map[ones], arr[i])\n  end\n  for o, nums in pairs(o_map)\
    \ do\n    table.sort(nums)\n    for j = 1, #nums do\n      table.insert(res, nums[j])\n\
    \    end\n  end\n  return res\nend", "  table.sort(arr, function(a, b)\n    local\
    \ c1, c2 = popcount(a), popcount(b)\n    if c1 == c2 then return a < b end\n \
    \   return c1 < c2\n  end)\n  return arr\nend", "  local t = {}\n  for i = 1,\
    \ #arr do\n    local n = arr[i]\n    local ones = 0\n    while n > 0 do\n    \
    \  ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    t[#t + 1]\
    \ = {i, ones, arr[i]}\n  end\n  table.sort(t, function(a, b)\n    if a[2] == b[2]\
    \ then\n      return a[3] < b[3]\n    else\n      return a[2] < b[2]\n    end\n\
    \  end)\n  local res = {}\n  for i = 1, #t do\n    res[i] = t[i][3]\n  end\n \
    \ return res\nend", "  table.sort(arr, function(a, b)\n    local a1, b1 = a:count(\"\
    1\"), b:count(\"1\")\n    if a1 == b1 then return a < b end\n    return a1 < b1\n\
    \  end)\n  return arr\nend", "  local d = {}\n  for _, v in ipairs(arr) do\n \
    \   local b = tostring(v):gsub(\"%d\", \"\"):len()\n    if not d[b] then d[b]\
    \ = {} end\n    table.insert(d[b], v)\n  end\n  local res = {}\n  for _, t in\
    \ ipairs(d) do\n    table.sort(t)\n    for _, v in ipairs(t) do\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "    local sort_arr = {}\n    for i,\
    \ v in ipairs(arr) do\n        table.insert(sort_arr, {v, i})\n    end\n    table.sort(sort_arr,\
    \ function(a, b)\n        return (a[1] < b[1]) or (a[1] == b[1] and a[2] < b[2])\n\
    \    end)\n    for i, v in ipairs(sort_arr) do\n        sort_arr[i] = v[1]\n \
    \   end\n    return sort_arr\nend", "    local t = {}\n    for i = 1, #arr do\n\
    \        local v = arr[i]\n        t[i] = { dec = v, bin = tostring(v):gsub('0',\
    \ '') }\n    end\n    table.sort(t, function(a, b)\n        return #a.bin == #b.bin\
    \ and a.dec < b.dec or #a.bin < #b.bin\n    end)\n    local res = {}\n    for\
    \ i = 1, #t do\n        res[i] = t[i].dec\n    end\n    return res\nend", "  table.sort(arr,\
    \ function(a, b)\n    local ones = function(x)\n      return #(x:gsub('0', ''))\n\
    \    end\n    local a1, b1 = ones(a), ones(b)\n    if a1 ~= b1 then\n      return\
    \ a1 < b1\n    else\n      return a < b\n    end\n  end)\n  return arr\nend",
  "  local t = {}\n  for i = 1, #arr do\n    t[i] = {value = arr[i], ones = count_ones(arr[i])}\n\
    \  end\n  table.sort(t, function(a, b)\n    if a.ones == b.ones then\n      return\
    \ a.value < b.value\n    else\n      return a.ones < b.ones\n    end\n  end)\n\
    \  for i = 1, #arr do\n    arr[i] = t[i].value\n  end\n  return arr\nend", " \
    \   table.sort(arr, function(x, y)\n        local xb = string.format(\"%b\", x)\n\
    \        local yb = string.format(\"%b\", y)\n        local xn = #xb - xb:gsub(\"\
    1\", \"\"):len()\n        local yn = #yb - yb:gsub(\"1\", \"\"):len()\n      \
    \  if xn == yn then\n            return x < y\n        else\n            return\
    \ xn < yn\n        end\n    end)\n    return arr\nend", "  local z = {}\n  for\
    \ i,v in ipairs(arr) do\n    z[i] = {v,v:countones(),bit.tohex(v)}\n  end\n  table.sort(z,\
    \ function(a,b)\n    if a[2]==b[2] then\n      return a[1]<b[1]\n    else\n  \
    \    return a[2]<b[2]\n    end\n  end)\n  for i,v in ipairs(z) do\n    arr[i]\
    \ = v[1]\n  end\n  return arr\nend", "  return table.sort(arr, function(a, b)\n\
    \    local _, x = string.gsub(string.format(\"%b\", a), '1', '')\n    local _,\
    \ y = string.gsub(string.format(\"%b\", b), '1', '')\n    if x == y then\n   \
    \   return a < b\n    else\n      return x < y\n    end\n  end)\nend", "  table.sort(arr,\
    \ function(a, b)\n    local count_a = string.gsub(string.format(\"%b\", a), \"\
    1\", \"1\")\n    local count_b = string.gsub(string.format(\"%b\", b), \"1\",\
    \ \"1\")\n    return (#count_a == #count_b and a < b) or (#count_a < #count_b)\n\
    \  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local abit,\
    \ bbit = tobit(a), tobit(b)\n    local popa, popb = popcnt(abit), popcnt(bbit)\n\
    \    if popa == popb then\n      return a < b\n    else\n      return popa < popb\n\
    \    end\n  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n  \
    \      local bits_a = _G.tonumber(a):bits()\n        local bits_b = _G.tonumber(b):bits()\n\
    \        local count_a = bits_a:count()\n        local count_b = bits_b:count()\n\
    \        if count_a == count_b then\n            return a < b\n        else\n\
    \            return count_a < count_b\n        end\n    end)\n    return arr\n\
    end", "    local one_counts = {}\n    local max_count = 0\n    local sorted =\
    \ {}\n    for _,n in ipairs(arr) do\n        local n_str = tostring(n)\n     \
    \   local n_binary = n_str:gsub('0','')\n        local n_ones = #n_binary\n  \
    \      if not one_counts[n_ones] then\n            one_counts[n_ones] = {}\n \
    \       end\n        table.insert(one_counts[n_ones], n)\n        if n_ones >\
    \ max_count then\n            max_count = n_ones\n        end\n    end\n    for\
    \ i=0,max_count do\n        if one_counts[i] then\n            local sorted_group\
    \ = t_sort(one_counts[i])\n            for _,s in ipairs(sorted_group) do\n  \
    \              table.insert(sorted, s)\n            end\n        end\n    end\n\
    \    return sorted\nend", "    table.sort(arr, function(lhs, rhs)\n        local\
    \ lhs_ones = 0\n        local rhs_ones = 0\n        for _,v in ipairs(dec2bin(lhs))\
    \ do\n            if v == 1 then\n                lhs_ones = lhs_ones + 1\n  \
    \          end\n        end\n        for _,v in ipairs(dec2bin(rhs)) do\n    \
    \        if v == 1 then\n                rhs_ones = rhs_ones + 1\n           \
    \ end\n        end\n        if lhs_ones == rhs_ones then\n            return lhs\
    \ < rhs\n        else\n            return lhs_ones < rhs_ones\n        end\n \
    \   end)\n    return arr\nend", "  -- Our first step is to define a function that\
    \ can efficiently count\n  -- the number of 1s in the binary representation of\
    \ a non-negative integer.\n  -- Such a function can be implemented using bitwise\
    \ operators:\n  local function ones_in_binary(x)\n    local ones = 0\n    while\
    \ x > 0 do\n      ones = ones + (x & 1)\n      x = x >> 1\n    end\n    return\
    \ ones\n  end\n  -- With this helper function in hand, the problem can be solved\
    \ by just\n  -- a single call to table.sort, using the custom sort function below.\n\
    \  -- The function compares two elements a and b by first comparing their\n  --\
    \ number of 1s, in which case we return their difference.\n  -- If they are equal,\
    \ we return their difference again.\n  -- The last return statement is redundant,\
    \ because it's the same as the\n  -- first one and will never be reached, but\
    \ it is needed to satisfy\n  -- Lua's static type checking.\n  table.sort(arr,\
    \ function(a, b)\n    local diff = ones_in_binary(a) - ones_in_binary(b)\n   \
    \ if diff == 0 then\n      diff = a - b\n    end\n    return diff\n  end)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local x, y = a, b\n    if\
    \ a == b then return false end\n    local a1, b1 = 0, 0\n    while a > 0 do\n\
    \      a1 = a1 + a % 2\n      a = math.floor(a / 2)\n    end\n    while b > 0\
    \ do\n      b1 = b1 + b % 2\n      b = math.floor(b / 2)\n    end\n    if a1 ==\
    \ b1 then return x < y end\n    return a1 < b1\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local ones = function(x)\n      local k\
    \ = 0\n      for i = 0, 32 do\n        k = k + bit32.extract(x, i)\n      end\n\
    \      return k\n    end\n    local a1, b1 = ones(a), ones(b)\n    if a1 == b1\
    \ then\n      return a < b\n    else\n      return a1 < b1\n    end\n  end)\n\
    \  return arr\nend", "  local function sortByBits(a, b)\n    local function countBits(x)\n\
    \      local n = 0\n      while x > 0 do\n        n = n + (x % 2)\n        x =\
    \ math.floor(x / 2)\n      end\n      return n\n    end\n    return countBits(a)\
    \ < countBits(b) or (countBits(a) == countBits(b) and a < b)\n  end\n  table.sort(arr,\
    \ sortByBits)\n  return arr\nend", "    table.sort(arr, function(a, b)\n     \
    \   local a2, b2 = bit.to_binary(a), bit.to_binary(b)\n        local a1, b1 =\
    \ a2:count('1'), b2:count('1')\n        if a1 == b1 then\n            return a\
    \ < b\n        else\n            return a1 < b1\n        end\n    end)\n    return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    return a:lower():gsub('1',\
    \ '') < b:lower():gsub('1', '')\n  end)\n  return arr\nend", "  local function\
    \ cmp(a, b)\n    return a:match('1') < b:match('1') or a < b\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "    -- Using table.sort/sort() to solve this is cheating\
    \ :-(\n    local res = {}\n    for _, v in ipairs(arr) do\n        res[#res +\
    \ 1] = v % 2 == 0 and {v, v} or {v, v .. ':' .. v:binary():gsub('1', ''):len()}\n\
    \    end\n    table.sort(res, function(a, b) return a[2] < b[2] end)\n    return\
    \ {}\nend", "  local function bin_ones(n)\n    local count = 0\n    local bin\
    \ = {}\n    while n > 0 do\n      local r = n % 2\n      n = (n - r) / 2\n   \
    \   bin[#bin + 1] = r\n      if r == 1 then count = count + 1 end\n    end\n \
    \   return count, tonumber(table.concat(bin):reverse())\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones, a_num = bin_ones(a)\n    local b_ones, b_num\
    \ = bin_ones(b)\n    if a_ones ~= b_ones then return a_ones < b_ones end\n   \
    \ return a_num < b_num\n  end)\n  return arr\nend", "  local function ones_for(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    return ones_for(a) < ones_for(b) or (ones_for(a) == ones_for(b)\
    \ and a < b)\n  end)\n  return arr\nend", "  table.sort(arr,function(a,b)\n  \
    \  local a_bin = string.gsub(string.format(\"%b\",a),\"0\",\"\")\n    local b_bin\
    \ = string.gsub(string.format(\"%b\",b),\"0\",\"\")\n    return #a_bin == #b_bin\
    \ and a < b or #a_bin < #b_bin\n  end)\n  return arr\nend", "  local function\
    \ sort(a, b)\n    if bit32.extract(a, -1) == bit32.extract(b, -1) then\n     \
    \ return a < b\n    else\n      return bit32.extract(a, -1) < bit32.extract(b,\
    \ -1)\n    end\n  end\n  table.sort(arr, sort)\n  return arr\nend", "    local\
    \ function count_ones(n)\n        local s = tostring(n, 2)\n        local count\
    \ = 0\n        for c in s:gmatch('1') do\n            count = count + 1\n    \
    \    end\n        return count\n    end\n    table.sort(arr, function(a, b)\n\
    \        local ones_a = count_ones(a)\n        local ones_b = count_ones(b)\n\
    \        if ones_a == ones_b then\n            return a < b\n        else\n  \
    \          return ones_a < ones_b\n        end\n    end)\n    return arr\nend",
  "  if #arr < 2 then return arr end\n  local t = {}\n  for i = 1, #arr do\n    table.insert(t,\
    \ {bit.tonumber(bit.tohex(arr[i])), arr[i]})\n  end\n  table.sort(t, function(a,\
    \ b)\n    if a[1] == b[1] then return a[2] < b[2] end\n    return a[1] < b[1]\n\
    \  end)\n  for i = 1, #t do\n    arr[i] = t[i][2]\n  end\n  return arr\nend",
  "  table.sort(arr, function(a, b)\n    local ones_a = a:binary():find(\"1\")\n \
    \   local ones_b = b:binary():find(\"1\")\n    if ones_a == ones_b then\n    \
    \  return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return\
    \ arr\nend", "  if arr == nil then return arr end\n  table.sort(arr,\n    function(a,\
    \ b)\n      return (a < b) or ((a == b) and (tostring(math.tointeger(a)):match('1')\
    \ or ''):len() < (tostring(math.tointeger(b)):match('1') or ''):len())\n    end\n\
    \  )\n  return arr\nend", "  local f = function(a, b)\n    local binA = dec2bin(a)\n\
    \    local binB = dec2bin(b)\n    local bitsA = countBits(binA)\n    local bitsB\
    \ = countBits(binB)\n    if bitsA ~= bitsB then\n      return bitsA < bitsB\n\
    \    else\n      return a < b\n    end\n  end\n  table.sort(arr, f)\n  return\
    \ arr\nend", "  -- TODO(bga): Implement the sorting algorithm.\n  -- table.sort(arr,\
    \ function(a, b)\n  --  return bit32.extract(a, 1) < bit32.extract(b, 1)\n  --\
    \ end)\n  -- return arr\n  return arr\nend", "    local ebits = {}\n    for i,\
    \ v in ipairs(arr) do\n        local b = string.format(\"%b\", v)\n        ebits[i]\
    \ = #b - b:gsub(\"1\", \"\")\n    end\n    table.sort(ebits)\n    local ebits_idx\
    \ = {}\n    for i, v in ipairs(ebits) do\n        if not ebits_idx[v] then\n \
    \           ebits_idx[v] = { i }\n        else\n            table.insert(ebits_idx[v],\
    \ i)\n        end\n    end\n    local out = {}\n    for _, idx in pairs(ebits_idx)\
    \ do\n        for _, i in ipairs(idx) do\n            table.insert(out, arr[i])\n\
    \        end\n    end\n    return out\nend", "  table.sort(arr, function(a, b)\n\
    \    local x, y = bits.count(a), bits.count(b)\n    return x == y and a < b or\
    \ x < y\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    return\
    \ tostring(a):match('1') < tostring(b):match('1') or a < b\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = (a - 1) % 2\n    local\
    \ b_ones = (b - 1) % 2\n    if a_ones == b_ones then\n      return a < b\n   \
    \ else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ if not arr then return arr end\n  local zero, one = {}, {}\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then table.insert(zero, v)\n    else\n      local n = v\n\
    \      local count = 0\n      while n > 0 do\n        count = count + 1\n    \
    \    n = n % 2\n      end\n      if not one[count] then one[count] = {} end\n\
    \      table.insert(one[count], v)\n    end\n  end\n  local sorted = {}\n  for\
    \ i = 1, #one do\n    table.sort(one[i])\n    for _, v in ipairs(one[i]) do\n\
    \      table.insert(sorted, v)\n    end\n  end\n  table.sort(zero)\n  for _, v\
    \ in ipairs(zero) do\n    table.insert(sorted, v)\n  end\n  return sorted\nend",
  "  local ones = {}\n  local l = {}\n  local n = {}\n  local res = {}\n  for _, v\
    \ in ipairs(arr) do\n    local count = 0\n    local x = v\n    while x > 0 do\n\
    \      count = count + x % 2\n      x = math.floor(x / 2)\n    end\n    if ones[count]\
    \ then\n      ones[count] = ones[count] + 1\n    else\n      ones[count] = 1\n\
    \    end\n    l[count] = v\n  end\n  for k, v in pairs(ones) do\n    for i = 1,\
    \ v do\n      table.insert(n, l[k])\n    end\n  end\n  table.sort(n)\n  for _,\
    \ v in ipairs(arr) do\n    table.insert(res, table.remove(n, 1))\n  end\n  return\
    \ res\nend", "  local non_negative_integers = {}\n  for _,v in ipairs(arr) do\n\
    \    local b = math.floor(math.log(v)/math.log(2)) + 1\n    if non_negative_integers[b]\
    \ == nil then\n      non_negative_integers[b] = {}\n    end\n    table.insert(non_negative_integers[b],\
    \ v)\n  end\n  local result = {}\n  for _, v in ipairs(non_negative_integers)\
    \ do\n    table.sort(v)\n    for _, vv in ipairs(v) do\n      table.insert(result,\
    \ vv)\n    end\n  end\n  return result\nend", "    table.sort(arr,\n        function(lhs,\
    \ rhs)\n            local lh = bit.band(lhs, lhs - 1)\n            local rh =\
    \ bit.band(rhs, rhs - 1)\n            return lh < rh or (lh == rh and lhs < rhs)\n\
    \        end)\n    return arr\nend", "    table.sort(arr, function(a, b)\n   \
    \     local ba = tostring(a):gsub('%.', '')\n        local bb = tostring(b):gsub('%.',\
    \ '')\n        local ones = string.match(bb, '1') and string.match(ba, '1') and\
    \ string.len(bb) - string.len(bb:gsub('1', '')) - string.len(ba) + string.len(ba:gsub('1',\
    \ '')) or string.match(bb, '1') and string.len(bb) - string.len(bb:gsub('1', ''))\
    \ or string.match(ba, '1') and -string.len(ba) + string.len(ba:gsub('1', ''))\
    \ or 0\n        return ones == 0 and ba < bb or ones < 0\n    end)\n    return\
    \ arr\nend", "  local function cmp(a, b)\n    local n1, n2 = a, b\n    local nn1,\
    \ nn2 = a, b\n    while n1 ~= 0 do\n      n1 = math.floor(n1 / 2)\n      nn1 =\
    \ nn1 + 1\n    end\n    while n2 ~= 0 do\n      n2 = math.floor(n2 / 2)\n    \
    \  nn2 = nn2 + 1\n    end\n    if nn1 ~= nn2 then\n      return nn1 < nn2\n  \
    \  else\n      return a < b\n    end\n  end\n  table.sort(arr, cmp)\n  return\
    \ arr\nend", "\ttable.sort(arr, function(a, b)\n\t\tlocal ra, rb = a, b\n\t\t\
    if a ~= 0 then\n\t\t\tra = math.floor(math.log(a, 2))\n\t\tend\n\t\tif b ~= 0\
    \ then\n\t\t\trb = math.floor(math.log(b, 2))\n\t\tend\n\t\tif ra == rb then\n\
    \t\t\treturn a < b\n\t\tend\n\t\treturn ra < rb\n\tend)\n\treturn arr\nend", " \
    \ local t = {}\n  for i = 1, #arr do\n    local a = arr[i]\n    local b = math.floor(math.log(a)\
    \ / math.log(2)) + 1\n    local c = math.log(a, 2)\n    local d = 0\n    for j\
    \ = 1, b do\n      d = d + math.floor(c)\n      c = c - math.floor(c)\n      c\
    \ = c * 2\n    end\n    t[i] = { a, d }\n  end\n  table.sort(t, function(a, b)\n\
    \    if a[2] == b[2] then\n      return a[1] < b[1]\n    else\n      return a[2]\
    \ < b[2]\n    end\n  end)\n  for i = 1, #arr do\n    arr[i] = t[i][1]\n  end\n\
    \  return arr\nend", "  local function ones_bin(n)\n    local bin = 0\n    while\
    \ n > 0 do\n      bin = bin + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return bin\n  end\n  table.sort(arr, function(a, b)\n    local diff = ones_bin(a)\
    \ - ones_bin(b)\n    if diff == 0 then\n      return a < b\n    else\n      return\
    \ diff < 0\n    end\n  end)\n  return arr\nend", "  local max_ones = 0\n  for\
    \ _, v in ipairs(arr) do\n    local ones = 0\n    while v > 0 do\n      if v %\
    \ 2 > 0 then\n        ones = ones + 1\n      end\n      v = math.floor(v / 2)\n\
    \    end\n    if ones > max_ones then\n      max_ones = ones\n    end\n  end\n\
    \  local sorted = {}\n  for i = 0, max_ones do\n    for _, v in ipairs(arr) do\n\
    \      local ones = 0\n      local num = v\n      while num > 0 do\n        if\
    \ num % 2 > 0 then\n          ones = ones + 1\n        end\n        num = math.floor(num\
    \ / 2)\n      end\n      if ones == i then\n        table.insert(sorted, v)\n\
    \      end\n    end\n  end\n  return sorted\nend", "  local a = {}\n  for i, v\
    \ in ipairs(arr) do\n    a[i] = string.format(\"%b\", v)\n  end\n  table.sort(a,\
    \ function(a, b)\n    local da, db = #a:gsub(\"0\", \"\"), #b:gsub(\"0\", \"\"\
    )\n    if da == db then\n      return tonumber(a, 2) < tonumber(b, 2)\n    else\n\
    \      return da < db\n    end\n  end)\n  for i, v in ipairs(a) do\n    a[i] =\
    \ tonumber(v, 2)\n  end\n  return a\nend", "  local function count_ones(num)\n\
    \    local ones = 0\n    while num > 0 do\n      ones = ones + num % 2\n     \
    \ num = math.floor(num / 2)\n    end\n    return ones\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  -- cache the conversions\n\
    \  local t = {}\n  for i = 1, #arr do\n    local x = arr[i]\n    t[x] = (t[x]\
    \ or 0) + 1\n  end\n  local u = {}\n  for k, v in pairs(t) do\n    u[#u + 1] =\
    \ { k, v }\n  end\n  table.sort(u, function(a, b)\n    return a[2] < b[2] or a[2]\
    \ == b[2] and a[1] < b[1]\n  end)\n  for i = 1, #u do\n    for j = 1, u[i][2]\
    \ do\n      arr[#arr + 1] = u[i][1]\n    end\n  end\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local num_of_1s_a = get_count_of_ones(a)\n    local num_of_1s_b\
    \ = get_count_of_ones(b)\n    if num_of_1s_a == num_of_1s_b then\n      return\
    \ a < b\n    else\n      return num_of_1s_a < num_of_1s_b\n    end\n  end)\n \
    \ return arr\nend", "  if not arr or #arr == 0 then return arr end\n  local list\
    \ = {}\n  for i = 1, #arr do\n    table.insert(list, { val = arr[i], count = (arr[i]\
    \ - arr[i] % 2) / 2, index = i })\n  end\n  table.sort(list, function(a, b)\n\
    \    if a.count == b.count then\n      return a.val < b.val\n    else\n      return\
    \ a.count < b.count\n    end\n  end)\n  for i = 1, #list do\n    arr[i] = list[i].val\n\
    \  end\n  return arr\nend", "    table.sort(arr, function(a, b)\n        local\
    \ ta, tb = count_one(a), count_one(b)\n        if ta == tb then\n            return\
    \ a < b\n        else\n            return ta < tb\n        end\n    end)\n   \
    \ return arr\nend", "  -- Return sorted array\n  local sort = function(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  return table.sort(arr, sort)\nend", "  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_bin, b_bin = \"\", \"\"\n    local a_ones, b_ones = 0, 0\n \
    \   while a > 0 do\n      a_bin = tostring(a % 2) .. a_bin\n      a_ones = a_ones\
    \ + (a % 2)\n      a = math.floor(a / 2)\n    end\n    while b > 0 do\n      b_bin\
    \ = tostring(b % 2) .. b_bin\n      b_ones = b_ones + (b % 2)\n      b = math.floor(b\
    \ / 2)\n    end\n    if a_ones ~= b_ones then\n      return a_ones < b_ones\n\
    \    else\n      return a < b\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  table.sort(arr, function(a, b)\n    local bin_a = tostring(a):gsub('%d',\
    \ function(digit)\n      return tonumber(digit) == 1 and '1' or '0'\n    end)\n\
    \    local bin_b = tostring(b):gsub('%d', function(digit)\n      return tonumber(digit)\
    \ == 1 and '1' or '0'\n    end)\n    local bin_a_length = bin_a:len()\n    local\
    \ bin_b_length = bin_b:len()\n    if bin_a_length == bin_b_length then\n     \
    \ return a < b\n    else\n      return bin_a_length < bin_b_length\n    end\n\
    \  end)\n  return arr\nend", "  local comp = function(x, y)\n    local x_binary\
    \ = math.floor(math.log(x)/math.log(2)) + 1\n    local y_binary = math.floor(math.log(y)/math.log(2))\
    \ + 1\n    if x_binary == y_binary then\n      return x < y\n    else\n      return\
    \ x_binary < y_binary\n    end\n  end\n  table.sort(arr, comp)\n  return arr\n\
    end", "  table.sort(arr, function(x, y)\n    local xb = (\"%b\"):format(x)\n \
    \   local yb = (\"%b\"):format(y)\n    return xb:gsub(\"1\", \"\") ~= yb:gsub(\"\
    1\", \"\") and #xb - #yb < 0 or x < y\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local bin_a = tostring(a:toBin()):gsub(\"0\", \"\"):len()\n\
    \    local bin_b = tostring(b:toBin()):gsub(\"0\", \"\"):len()\n    if bin_a ==\
    \ bin_b then\n      return a < b\n    else\n      return bin_a < bin_b\n    end\n\
    \  end)\n  return arr\nend", "    local new = {}\n    for _, v in ipairs(arr)\
    \ do\n        local ones = 0\n        for digit in tostring(v):gmatch(\"1\") do\n\
    \            ones = ones + 1\n        end\n        if not new[ones] then\n   \
    \         new[ones] = {}\n        end\n        table.insert(new[ones], v)\n  \
    \  end\n    local result = {}\n    for k, v in pairs(new) do\n        table.sort(v)\n\
    \        for _, vv in ipairs(v) do\n            table.insert(result, vv)\n   \
    \     end\n    end\n    return result\nend", "  table.sort(arr, function(a, b)\n\
    \    local a_ones = string.len(a:tobinary():gsub('0', ''))\n    local b_ones =\
    \ string.len(b:tobinary():gsub('0', ''))\n    if a_ones < b_ones then\n      return\
    \ true\n    elseif a_ones > b_ones then\n      return false\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arr\nend", "  local t = {}\n  for _, v in ipairs(arr)\
    \ do\n    t[#t+1] = {val = v, bin = string.format(\"%b\", v):gsub(\"0\", \"\"\
    )}\n  end\n  table.sort(t, function(a, b)\n    return #a.bin < #b.bin or (#a.bin\
    \ == #b.bin and a.val < b.val)\n  end)\n  for i, v in ipairs(t) do\n    arr[i]\
    \ = v.val\n  end\n  return arr\nend", "  return table.sort(arr, function(a, b)\n\
    \    local a_ones = tostring(a):gsub('0', ''):len()\n    local b_ones = tostring(b):gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\nend", "    local sort_func = function(a,\
    \ b)\n        local aones = a:len() - a:gsub(\"1\", \"\"):len()\n        local\
    \ bones = b:len() - b:gsub(\"1\", \"\"):len()\n        if aones == bones then\n\
    \            return a < b\n        else\n            return aones < bones\n  \
    \      end\n    end\n    table.sort(arr, sort_func)\n    return arr\nend", " \
    \ local t = {}\n  for _,v in ipairs(arr) do\n    local ones = 0\n    local x =\
    \ v\n    while x > 0 do\n      if x % 2 == 1 then\n        ones = ones + 1\n \
    \     end\n      x = math.floor(x / 2)\n    end\n    t[#t+1] = { v, ones }\n \
    \ end\n  table.sort(t, function(a,b)\n                 if a[2] == b[2] then\n\
    \                   return a[1] < b[1]\n                 else\n              \
    \     return a[2] < b[2]\n                 end\n               end)\n  for i,v\
    \ in ipairs(t) do\n    arr[i] = v[1]\n  end\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local aones = a:binary():count\"1\"\n    local bones = b:binary():count\"\
    1\"\n    if aones == bones then\n      return a < b\n    else\n      return aones\
    \ < bones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local ones_a = 0\n    local ones_b = 0\n    for i = 1, 32 do\n     \
    \ local exp = 2 ^ (i - 1)\n      if a >= exp then\n        if a >= exp then\n\
    \          ones_a = ones_a + 1\n          a = a - exp\n        end\n        if\
    \ b >= exp then\n          ones_b = ones_b + 1\n          b = b - exp\n      \
    \  end\n      end\n    end\n    if ones_a == ones_b then\n      return a < b\n\
    \    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend",
  "  -- sort table\n  table.sort(arr, function(a, b)\n    local aones = a - bit.band(a,\
    \ bit.bnot(bit.rshift(a, 1)))\n    local bones = b - bit.band(b, bit.bnot(bit.rshift(b,\
    \ 1)))\n    if aones == bones then\n      return a < b\n    else\n      return\
    \ aones < bones\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(lhs,\
    \ rhs)\n    local lhs_ones = string.gsub(string.reverse(string.gsub(string.format(\"\
    %b\", lhs), \"0\", \".\")), \".\", \"%1\")\n    local rhs_ones = string.gsub(string.reverse(string.gsub(string.format(\"\
    %b\", rhs), \"0\", \".\")), \".\", \"%1\")\n    if #lhs_ones == #rhs_ones then\n\
    \      return lhs < rhs\n    else\n      return #lhs_ones < #rhs_ones\n    end\n\
    \  end)\n  return arr\nend", "    -- your code here\n    for i = 1, #arr do\n\
    \        for j = i + 1, #arr do\n            local a_ones = to_ones(arr[i])\n\
    \            local b_ones = to_ones(arr[j])\n            if a_ones > b_ones or\
    \ (a_ones == b_ones and arr[i] > arr[j]) then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n    end\n    return arr\nend",
  "    local function binary_ones(num)\n        return select(2, num:gsub('1', ''))\n\
    \    end\n    table.sort(arr, function(a, b)\n        local ones_a, ones_b = binary_ones(a),\
    \ binary_ones(b)\n        if ones_a == ones_b then\n            return a < b\n\
    \        else\n            return ones_a < ones_b\n        end\n    end)\n   \
    \ return arr\nend", "  table.sort(arr, function(a, b)\n    local ones_a = a -\
    \ (a % 2)\n    local ones_b = b - (b % 2)\n    if ones_a == ones_b then\n    \
    \  return a < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return\
    \ arr\nend", "  local cmp = function(a, b)\n    local ones_a = a:gsub('[^1]',\
    \ '')\n    local ones_b = b:gsub('[^1]', '')\n    if #ones_a == #ones_b then\n\
    \      return a < b\n    else\n      return #ones_a < #ones_b\n    end\n  end\n\
    \  table.sort(arr, cmp)\n  return arr\nend", "  table.sort(arr, function(a, b)\n\
    \    if (a == b) then return a < b end\n    return count_set_bits(a) < count_set_bits(b)\n\
    \  end)\n  return arr\nend", "    table.sort(arr, function(a, b)\n        local\
    \ l = { a, b }\n        local ones = {}\n        for i = 1, 2 do\n           \
    \ local current = l[i]\n            local str = tostring(current)\n          \
    \  local bin = {}\n            for i = 1, #str do\n                local char\
    \ = string.sub(str, i, i)\n                local num = tonumber(char)\n      \
    \          bin[i] = num\n            end\n            local n_ones = 0\n     \
    \       for i = 1, #bin do\n                if bin[i] == 1 then\n            \
    \        n_ones = n_ones + 1\n                end\n            end\n         \
    \   ones[i] = n_ones\n        end\n        return ones[1] < ones[2] or (ones[1]\
    \ == ones[2] and l[1] < l[2])\n    end)\n    return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
