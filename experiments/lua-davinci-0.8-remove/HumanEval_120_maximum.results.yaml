language: lua
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(l, r)\n        local i, j = l, r\n        local\
    \ pivot = arr[i]\n        while i < j do\n            while i < j and arr[j] <\
    \ pivot do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function sort(l, r)\n        if l < r then\n\
    \            local m = partition(l, r)\n            if m < k then\n          \
    \      sort(m + 1, r)\n            elseif m > k then\n                sort(l,\
    \ m - 1)\n            end\n        end\n    end\n    sort(1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmcbw33o.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnmcbw33o.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local ret = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(ret, arr[i])\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local arr2 = {}\n    local m = arr[1]\n    local idx = 1\n    for i = 1,\
    \ k do\n        m = arr[i]\n        idx = i\n        for j = i, #arr do\n    \
    \        if arr[j] > m then\n                m = arr[j]\n                idx =\
    \ j\n            end\n        end\n        arr2[i] = m\n        arr[idx] = -10000\n\
    \    end\n    return arr2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1558qlng.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -10000}\nstack traceback:\n\t/tmp/tmp1558qlng.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local tmp = {}\n    for i = 1, k do\n        tmp[i] = arr[i]\n    end\n \
    \   for i = k + 1, #arr do\n        local v = arr[i]\n        local j = 1\n  \
    \      while j <= k and tmp[j] > v do\n            j = j + 1\n        end\n  \
    \      if j <= k then\n            for h = 1, k - j do\n                tmp[k\
    \ - h + 1] = tmp[k - h]\n            end\n            tmp[j] = v\n        end\n\
    \    end\n    table.sort(tmp)\n    return tmp\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvqaqxen.lua:38:\
    \ expected: {2, 20, 123}\nactual: {1, 2, 123}\nstack traceback:\n\t/tmp/tmpbvqaqxen.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if not arr or #arr == 0 then\n        return nil\n    end\n    table.sort(arr,\
    \ function(a, b) return a > b end)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nreturn maximum\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1322sxx.lua:22: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    for i = 1, k - 1 do\n        for j = n, 2, -1 do\n  \
    \          if arr[j] > arr[j - 1] then\n                arr[j], arr[j - 1] = arr[j\
    \ - 1], arr[j]\n            end\n        end\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nreturn\
    \ maximum\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6nhkcpic.lua:26: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local length = #arr\n    if length == 0 then\n        return {}\n    end\n\
    \    if k >= length then\n        return arr\n    end\n    if k == 1 then\n  \
    \      local max, max_index = arr[1], 1\n        for i=2,length do\n         \
    \   if arr[i] > max then\n                max = arr[i]\n                max_index\
    \ = i\n            end\n        end\n        return { max }\n    end\n    local\
    \ result = {}\n    for i=1,k do\n        result[i] = arr[i]\n    end\n    local\
    \ pq = BinaryHeap.new(function(a, b) return a > b end)\n    for i=1,k do\n   \
    \     pq:push(result[i])\n    end\n    for i=k+1,length do\n        local x =\
    \ pq:top()\n        if arr[i] > x then\n            pq:pop()\n            pq:push(arr[i])\n\
    \        end\n    end\n    return pq:toArray()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr1x3q3e.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpsr1x3q3e.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local len = #arr\n    local rt = {}\n    if len < k\
    \ then\n        return arr\n    end\n    for i = 1, len do\n        table.insert(heap,\
    \ arr[i])\n        if #heap == k then\n            table.sort(heap)\n        elseif\
    \ #heap > k then\n            if arr[i] > heap[1] then\n                table.remove(heap,\
    \ 1)\n                table.insert(heap, arr[i])\n                table.sort(heap)\n\
    \            end\n        end\n    end\n    return heap\nend\nreturn maximum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4lrj7w6.lua:32: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(lo, hi)\n        local pivot = arr[hi]\n       \
    \ local i = lo\n        for j = lo, hi - 1 do\n            if arr[j] < pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function qsort(lo, hi)\n        if lo < hi\
    \ then\n            local mid = partition(lo, hi)\n            qsort(lo, mid -\
    \ 1)\n            qsort(mid + 1, hi)\n        end\n    end\n    qsort(1, #arr)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk1onuxb.lua:38:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpfk1onuxb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local function helper(l, r)\n        local i, j = l,\
    \ l + 1\n        while j <= r do\n            if arr[j] > arr[l] then\n      \
    \          i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n      \
    \      end\n            j = j + 1\n        end\n        arr[l], arr[i] = arr[i],\
    \ arr[l]\n        return i\n    end\n    local function quickSelect(l, r, k)\n\
    \        local q = helper(l, r)\n        if k < q - l + 1 then\n            return\
    \ quickSelect(l, q - 1, k)\n        elseif k > q - l + 1 then\n            return\
    \ quickSelect(q + 1, r, k - (q - l + 1))\n        else\n            return arr[q]\n\
    \        end\n    end\n    local newarr = {}\n    local x = quickSelect(1, n,\
    \ k)\n    for i = 1, n do\n        if arr[i] >= x then\n            table.insert(newarr,\
    \ arr[i])\n        end\n    end\n    return newarr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9o1qnoo.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpn9o1qnoo.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local t = {};\n    local res = {};\n    for i = 1, k do\n        table.insert(t,\
    \ arr[i]);\n    end\n    table.sort(t);\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > t[1] then\n            table.remove(t, 1);\n            table.insert(t,\
    \ arr[i]);\n            table.sort(t);\n        end\n    end\n    for i = 1, k\
    \ do\n        table.insert(res, t[i]);\n    end\n    return res;\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0bj098r4.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0bj098r4.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp0bj098r4.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5ierr12.lua:17:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpl5ierr12.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmeybe6hm.lua:17:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpmeybe6hm.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        while l < r do\n            while l < r and arr[r] <= pivot do\n    \
    \            r = r - 1\n            end\n            swap(arr, l, r)\n       \
    \     while l < r and arr[l] >= pivot do\n                l = l + 1\n        \
    \    end\n            swap(arr, l, r)\n        end\n        return l\n    end\n\
    \    local function _qsort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            _qsort(arr, l, pivot - 1)\n      \
    \      _qsort(arr, pivot + 1, r)\n        end\n    end\n    _qsort(arr, 1, #arr)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna3pi4zn.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpna3pi4zn.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = 1, k do\n        result[i]\
    \ = arr[#arr - i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiapryidq.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpiapryidq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \tlocal n = #arr\n\tif k == 0 then\n\t\treturn {}\n\telseif k >= n then\n\t\t\
    return arr\n\tend\n\tlocal sort = function(l, r)\n\t\tif l == r then\n\t\t\treturn\
    \ l\n\t\tend\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tm = sort(l, m)\n\t\t\
    m = sort(m + 1, r)\n\t\tlocal i, j, k = l, m + 1, 0\n\t\tlocal tmp = {}\n\t\t\
    while i <= m and j <= r do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\ttmp[k + 1]\
    \ = arr[i]\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\ttmp[k + 1] = arr[j]\n\t\t\t\
    \tj = j + 1\n\t\t\tend\n\t\t\tk = k + 1\n\t\tend\n\t\twhile i <= m do\n\t\t\t\
    tmp[k + 1] = arr[i]\n\t\t\ti = i + 1\n\t\t\tk = k + 1\n\t\tend\n\t\twhile j <=\
    \ r do\n\t\t\ttmp[k + 1] = arr[j]\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\tend\n\
    \t\tfor i = 0, k - 1 do\n\t\t\tarr[l + i] = tmp[i + 1]\n\t\tend\n\t\treturn r\n\
    \tend\n\tsort(1, n)\n\tlocal res = {}\n\tfor i = 1, k do\n\t\tres[i] = arr[i]\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvibe4gj.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpgvibe4gj.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    for i = 1, k - 1 do\n        for j = 1, n - i do\n  \
    \          if arr[j] > arr[j + 1] then\n                arr[j], arr[j + 1] = arr[j\
    \ + 1], arr[j]\n            end\n        end\n    end\n    return arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oldnbn4.lua:26:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmp_oldnbn4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] < arr[j] then\n\
    \        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n  end\n  local result\
    \ = {}\n  for i = 1, k do\n    result[i] = arr[i]\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f1h0gps.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8f1h0gps.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ret = {}\n    for i = 1, k do\n        local max = -math.huge\n   \
    \     local idx = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                idx = j\n            end\n    \
    \    end\n        table.insert(ret, max)\n        table.remove(arr, idx)\n   \
    \ end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03lhjg4g.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp03lhjg4g.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    table.sort(arr, function(x, y) return x > y end)\n    return\
    \ table.slice(arr, 1, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a5r7l_f.lua:17:\
    \ attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp2a5r7l_f.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp2a5r7l_f.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \ttable.sort(arr)\n\tlocal ret = {}\n\tfor i = #arr, #arr - k + 1, -1 do\n\t\t\
    table.insert(ret, arr[i])\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqbp4718.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpeqbp4718.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local dq = {}\n    for i = 1, k do\n        while #dq > 0 and arr[i] > arr[dq[#dq]]\
    \ do\n            table.remove(dq)\n        end\n        table.insert(dq, i)\n\
    \    end\n    local res = {}\n    for i = k + 1, #arr do\n        table.insert(res,\
    \ arr[dq[1]])\n        while #dq > 0 and dq[1] <= i - k do\n            table.remove(dq,\
    \ 1)\n        end\n        while #dq > 0 and arr[i] > arr[dq[#dq]] do\n      \
    \      table.remove(dq)\n        end\n        table.insert(dq, i)\n    end\n \
    \   table.insert(res, arr[dq[1]])\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilhb8t2e.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpilhb8t2e.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then\n        return {}\n    elseif k >= n\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        table.insert(res, arr[i])\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            table.remove(res,\
    \ 1)\n            table.insert(res, arr[i])\n            table.sort(res)\n   \
    \     end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local k = k or #arr\n    local heap = require 'algo.data_structures.binary_heap'\n\
    \    local greater = heap.greater\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3hjrc4g4.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k <= 0 or k > len then return nil end\n    local\
    \ function partition(start, stop)\n        local pivot = arr[stop]\n        local\
    \ i = start - 1\n        for j = start, stop - 1 do\n            if arr[j] <=\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[stop] = arr[stop],\
    \ arr[i + 1]\n        return i + 1\n    end\n    local function qsort(start, stop)\n\
    \        if start < stop then\n            local p = partition(start, stop)\n\
    \            if p == k then return end\n            if p > k then qsort(start,\
    \ p - 1) end\n            if p < k then qsort(p + 1, stop) end\n        end\n\
    \    end\n    qsort(1, len)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3hr_9xw.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpc3hr_9xw.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local arr_len = #arr\n    local heap = {}\n    local result = {}\n    local\
    \ top_idx\n    local top_val\n    local tmp_val\n    local result_idx = 1\n  \
    \  for i = 1, arr_len do\n        heap[i] = arr[i]\n    end\n    for i = math.floor(arr_len\
    \ / 2), 1, -1 do\n        top_idx = i\n        top_val = heap[i]\n        while\
    \ true do\n            local child_idx = 2 * top_idx\n            if child_idx\
    \ > arr_len then\n                break\n            end\n            if child_idx\
    \ < arr_len and heap[child_idx] < heap[child_idx + 1] then\n                child_idx\
    \ = child_idx + 1\n            end\n            if top_val < heap[child_idx] then\n\
    \                heap[top_idx] = heap[child_idx]\n                top_idx = child_idx\n\
    \            else\n                break\n            end\n        end\n     \
    \   heap[top_idx] = top_val\n    end\n    for i = 1, k do\n        result[i] =\
    \ heap[1]\n        heap[1] = heap[arr_len]\n        top_idx = 1\n        top_val\
    \ = heap[1]\n        while true do\n            local child_idx = 2 * top_idx\n\
    \            if child_idx > arr_len - 1 then\n                break\n        \
    \    end\n            if child_idx < arr_len - 1 and heap[child_idx] < heap[child_idx\
    \ + 1] then\n                child_idx = child_idx + 1\n            end\n    \
    \        if top_val < heap[child_idx] then\n                heap[top_idx] = heap[child_idx]\n\
    \                top_idx = child_idx\n            else\n                break\n\
    \            end\n        end\n        heap[top_idx] = top_val\n        arr_len\
    \ = arr_len - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02p34ki6.lua:70:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp02p34ki6.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \ttable.sort(arr)\n\tlocal res = {}\n\tfor i = #arr - k + 1, #arr do\n\t\ttable.insert(res,\
    \ arr[i])\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(res, arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    for i=1, k-1 do\n        for j=i+1, #arr do\n            if arr[i] < arr[j]\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n   \
    \     end\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabviivdr.lua:24:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpabviivdr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if #arr == 0 then return {} end\n  local count = k\n  local res = {}\n  for\
    \ _, v in ipairs(arr) do\n    table.insert(res, v)\n    table.sort(res, function(x,\
    \ y) return x < y end)\n    if #res > k then\n      table.remove(res, 1)\n   \
    \ end\n  end\n  return res\nend\nprint(unpack(maximum({3,2,1,5,6,4}, 2)))\nprint(unpack(maximum({3,2,3,1,2,4,5,5,6},\
    \ 4)))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp47lus14_.lua:23: attempt to call a nil value (global 'unpack')\n\
    stack traceback:\n\t/tmp/tmp47lus14_.lua:23: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then return {} end\n    if k == len then\
    \ return arr end\n    local ans = {}\n    for i = 1, k do ans[i] = arr[i] end\n\
    \    for i = k + 1, len do\n        local j = 1\n        while j <= k and arr[i]\
    \ > ans[j] do j = j + 1 end\n        if j <= k then\n            for t = k, j\
    \ + 1, -1 do ans[t] = ans[t - 1] end\n            ans[j] = arr[i]\n        end\n\
    \    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmilxu8c.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpmmilxu8c.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local a = {}\n    local len = #arr\n    for i = 1, k do\n        a[i] = arr[i]\n\
    \    end\n    for i = len, k + 1, -1 do\n        local j = 2\n        while j\
    \ < i do\n            if a[j] > a[j + 1] then\n                a[j], a[j + 1]\
    \ = a[j + 1], a[j]\n            end\n            j = j + 1\n        end\n    \
    \    if arr[i] > a[k] then\n            a[k] = arr[i]\n        end\n    end\n\
    \    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt_qg4rn.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpnt_qg4rn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local size = #arr\n  local minval = {}\n  local minloc = {}\n  local minsize\
    \ = 0\n  local i = 1\n  while i <= size do\n    local item = arr[i]\n    if item\
    \ > 0 then\n      local j = 1\n      while j <= minsize do\n        if item >\
    \ minval[j] then\n          table.insert(minval, j, item)\n          table.insert(minloc,\
    \ j, i)\n          minsize = minsize + 1\n          if minsize > k then\n    \
    \        minsize = k\n            table.remove(minval)\n            table.remove(minloc)\n\
    \          end\n          break\n        end\n        j = j + 1\n      end\n \
    \     if j > minsize then\n        table.insert(minval, item)\n        table.insert(minloc,\
    \ i)\n        minsize = minsize + 1\n        if minsize > k then\n          minsize\
    \ = k\n          table.remove(minval)\n          table.remove(minloc)\n      \
    \  end\n      end\n    end\n    i = i + 1\n  end\n  local maxval = {}\n  local\
    \ maxloc = {}\n  local maxsize = 0\n  local i = 1\n  while i <= size do\n    local\
    \ item = arr[i]\n    if item < 0 then\n      local j = 1\n      while j <= maxsize\
    \ do\n        if item < maxval[j] then\n          table.insert(maxval, j, item)\n\
    \          table.insert(maxloc, j, i)\n          maxsize = maxsize + 1\n     \
    \     if maxsize > k then\n            maxsize = k\n            table.remove(maxval)\n\
    \            table.remove(maxloc)\n          end\n          break\n        end\n\
    \        j = j + 1\n      end\n      if j > maxsize then\n        table.insert(maxval,\
    \ item)\n        table.insert(maxloc, i)\n        maxsize = maxsize + 1\n    \
    \    if maxsize > k then\n          maxsize = k\n          table.remove(maxval)\n\
    \          table.remove(maxloc)\n        end\n      end\n    end\n    i = i +\
    \ 1\n  end\n  local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0245mvil.lua:100: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local temp = {}\n    local function partition(arr, left, right)\n       \
    \ local pivot = arr[left]\n        local i = left\n        local j = right\n \
    \       while i < j do\n            while arr[j] <= pivot and i < j do\n     \
    \           j = j - 1\n            end\n            while arr[i] >= pivot and\
    \ i < j do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[left], arr[i] = arr[i], arr[left]\n        return i\n    end\n  \
    \  local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local mid = partition(arr, left, right)\n            quickSort(arr,\
    \ left, mid - 1)\n            quickSort(arr, mid + 1, right)\n        end\n  \
    \  end\n    quickSort(arr, 1, #arr)\n    for i = 1, k do\n        table.insert(temp,\
    \ arr[i])\n    end\n    return temp\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps911yrfj.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmps911yrfj.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k <= 0 or k > n then\n        return {}\n    end\n\
    \    local function quickselect(i, j)\n        if i < j then\n            local\
    \ p = arr[i]\n            local l, r = i, j\n            while l < r do\n    \
    \            while l < r and arr[r] <= p do\n                    r = r - 1\n \
    \               end\n                arr[l] = arr[r]\n                while l\
    \ < r and arr[l] >= p do\n                    l = l + 1\n                end\n\
    \                arr[r] = arr[l]\n            end\n            arr[l] = p\n  \
    \          if l - i + 1 == k then\n                return\n            elseif\
    \ l - i + 1 > k then\n                quickselect(i, l - 1)\n            else\n\
    \                quickselect(l + 1, j)\n            end\n        end\n    end\n\
    \    quickselect(1, n)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8bblnj0.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpm8bblnj0.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {nil, nil, -math.huge}\n    local result = {}\n    for i, v\
    \ in ipairs(arr) do\n        if #heap < k + 1 then\n            table.insert(heap,\
    \ v)\n            bubble_up(heap, #heap)\n        elseif v > heap[2] then\n  \
    \          heap[2] = v\n            bubble_down(heap, 2)\n        end\n    end\n\
    \    for i = 1, k do\n        table.insert(result, heap[1])\n        heap[1] =\
    \ heap[#heap]\n        table.remove(heap)\n        bubble_down(heap, 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeaw4o7ok.lua:16:\
    \ attempt to call a nil value (global 'bubble_up')\nstack traceback:\n\t/tmp/tmpeaw4o7ok.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpeaw4o7ok.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local arrk = {}\n    for i = 1, k do\n        local max = 0\n        local\
    \ index = 1\n        for j = 1, #arr do\n            if arr[j] > max then\n  \
    \              max = arr[j]\n                index = j\n            end\n    \
    \    end\n        table.insert(arrk, max)\n        table.remove(arr, index)\n\
    \    end\n    return arrk\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6v07dow.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, 0, 0}\nstack traceback:\n\t/tmp/tmpt6v07dow.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local dp = {}\n    for i = 1, len do\n        local\
    \ n = arr[i]\n        local index = 0\n        while index < k and dp[index +\
    \ 1] and dp[index + 1] > n do\n            index = index + 1\n        end\n  \
    \      table.insert(dp, index + 1, n)\n        if len(dp) > k then\n         \
    \   table.remove(dp, 1)\n        end\n    end\n    return dp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7syworo.lua:20:\
    \ attempt to call a number value (local 'len')\nstack traceback:\n\t/tmp/tmpp7syworo.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpp7syworo.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local t = {}\n    for i = 1, n do\n        if i <= k\
    \ then\n            t[i] = arr[i]\n        else\n            local j = 1\n   \
    \         while j <= k and arr[i] > t[j] do\n                j = j + 1\n     \
    \       end\n            if j <= k then\n                for x = k, j, -1 do\n\
    \                    t[x] = t[x - 1]\n                end\n                t[j]\
    \ = arr[i]\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qoo7_0d.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp_qoo7_0d.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local i = 0\n    local j = #arr - 1\n    local tmp\n    local pivot\n   \
    \ local function partition(start, end_)\n        i = start - 1\n        for j\
    \ = start, end_ do\n            if arr[j] < pivot then\n                i = i\
    \ + 1\n                tmp = arr[i]\n                arr[i] = arr[j]\n       \
    \         arr[j] = tmp\n            end\n        end\n        i = i + 1\n    \
    \    tmp = arr[i]\n        arr[i] = arr[end_]\n        arr[end_] = tmp\n     \
    \   return i\n    end\n    while i < j do\n        pivot = arr[j]\n        j =\
    \ partition(i, j)\n        if j - i + 1 < k then\n            i = j + 1\n    \
    \    elseif j - i + 1 > k then\n            j = j - 1\n        else\n        \
    \    break\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zu76k7a.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4zu76k7a.lua:18:\
    \ in local 'partition'\n\t/tmp/tmp4zu76k7a.lua:33: in local 'candidate'\n\t/tmp/tmp4zu76k7a.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local size = #arr\n    if k >= size then\n        return arr\n    end\n \
    \   local ret = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n  \
    \  for i = k+1, size do\n        local tmp = arr[i]\n        for j = k, 1, -1\
    \ do\n            if ret[j] < tmp then\n                ret[j+1] = ret[j]\n  \
    \          else\n                ret[j+1] = tmp\n                break\n     \
    \       end\n        end\n        if ret[1] > tmp then\n            ret[1] = tmp\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5c13tu6.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpx5c13tu6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local res = {}\n    local min = 0\n    local max = 0\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n        if res[i] > res[max] then\n\
    \            max = i\n        end\n    end\n    local j = k + 1\n    while j <=\
    \ n do\n        if arr[j] > res[min] then\n            res[min] = arr[j]\n   \
    \         max = min\n            for i = 1, k do\n                if res[i] <\
    \ res[min] then\n                    min = i\n                end\n          \
    \      if res[i] > res[max] then\n                    max = i\n              \
    \  end\n            end\n        end\n        j = j + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhgc2rwv.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwhgc2rwv.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpwhgc2rwv.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    local n = #arr\n    for i = 1, k do\n        res[i] =\
    \ i\n    end\n    for i = k + 1, n do\n        local largest = 1\n        for\
    \ j = 2, k do\n            if arr[res[j]] > arr[res[largest]] then\n         \
    \       largest = j\n            end\n        end\n        if arr[i] > arr[res[largest]]\
    \ then\n            res[largest] = i\n        end\n    end\n    local ans = {}\n\
    \    for i = 1, k do\n        ans[i] = arr[res[i]]\n    end\n    return ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3b9k0zs.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmps3b9k0zs.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    assert(k <= n)\n    local ans = {}\n    local count =\
    \ 0\n    local function siftup(i)\n        while i ~= 1 do\n            local\
    \ p = (i - 1) // 2\n            if arr[p] < arr[i] then\n                count\
    \ = count + 1\n                arr[p], arr[i] = arr[i], arr[p]\n             \
    \   i = p\n            else\n                break\n            end\n        end\n\
    \    end\n    local function siftdown(i)\n        while i * 2 + 1 <= k do\n  \
    \          local c = i * 2 + 1\n            if c + 1 <= k and arr[c] < arr[c +\
    \ 1] then\n                c = c + 1\n            end\n            if arr[i] <\
    \ arr[c] then\n                count = count + 1\n                arr[i], arr[c]\
    \ = arr[c], arr[i]\n                i = c\n            else\n                break\n\
    \            end\n        end\n    end\n    for i = 1, k do\n        arr[i] =\
    \ arr[i]\n        siftup(i)\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > arr[1] then\n            count = count + 1\n            arr[1] = arr[i]\n\
    \            siftdown(1)\n        end\n    end\n    while k > 0 do\n        count\
    \ = count + 1\n        ans[k] = arr[1]\n        k = k - 1\n        arr[1] = arr[k\
    \ + 1]\n        siftdown(1)\n    end\n    -- return ans, count\n    print(count)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6eftqje.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpm6eftqje.lua:18:\
    \ in local 'siftup'\n\t/tmp/tmpm6eftqje.lua:44: in local 'candidate'\n\t/tmp/tmpm6eftqje.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function quick_sort(arr, left, right)\n        if left >= right then\n\
    \            return\n        end\n        local k = left\n        for i = left\
    \ + 1, right do\n            if arr[i] < arr[left] then\n                k = k\
    \ + 1\n                arr[i], arr[k] = arr[k], arr[i]\n            end\n    \
    \    end\n        arr[left], arr[k] = arr[k], arr[left]\n        quick_sort(arr,\
    \ left, k - 1)\n        quick_sort(arr, k + 1, right)\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    return arr[#arr - k + 1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv_szrft.lua:33:\
    \ expected: {-4, -3, 5}\nactual: -4\nstack traceback:\n\t/tmp/tmpwv_szrft.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function max(a, b)\n        return a > b and a or b\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function heapify(arr, i, N)\n        local left = 2 * i\n        local\
    \ right = 2 * i + 1\n        local largest = i\n        if left <= N and arr[left]\
    \ > arr[largest] then\n            largest = left\n        end\n        if right\
    \ <= N and arr[right] > arr[largest] then\n            largest = right\n     \
    \   end\n        if largest ~= i then\n            swap(arr, i, largest)\n   \
    \         heapify(arr, largest, N)\n        end\n    end\n    local function build_heap(arr,\
    \ N)\n        for i = math.floor(N / 2), 1, -1 do\n            heapify(arr, i,\
    \ N)\n        end\n    end\n    local function heap_sort(arr, N)\n        build_heap(arr,\
    \ N)\n        for i = N, 2, -1 do\n            swap(arr, 1, i)\n            heapify(arr,\
    \ 1, i - 1)\n        end\n    end\n    heap_sort(arr, #arr)\n    local i = #arr\
    \ - k + 1\n    local res = {}\n    while i <= #arr do\n        table.insert(res,\
    \ arr[i])\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    local len = #arr\n    for i = 1, len do\n        local\
    \ j = i\n        while j > 1 and res[j - 1] < arr[i] do\n            res[j] =\
    \ res[j - 1]\n            j = j - 1\n        end\n        res[j] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yfjug6u.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp7yfjug6u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    for i = 1, len do\n        for j = i + 1, len do\n\
    \            if arr[i] < arr[j] then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n    end\n    local ret = {}\n    for i\
    \ = 1, k do\n        ret[i] = arr[i]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkar5o_qb.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpkar5o_qb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    for i, e in ipairs(arr) do\n        if i <= k then\n\
    \            table.insert(res, e)\n        else\n            local min_idx = 1\n\
    \            for j, v in ipairs(res) do\n                if v < res[min_idx] then\n\
    \                    min_idx = j\n                end\n            end\n     \
    \       if e > res[min_idx] then\n                res[min_idx] = e\n         \
    \   end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek2hg4se.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpek2hg4se.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local max = {}\n    local len = #arr\n    if len <= k then\n        return\
    \ arr\n    end\n    for i = 1, k do\n        max[i] = arr[i]\n    end\n    local\
    \ t = k\n    while t > 0 do\n        if max[t] > max[t-1] then\n            max[t],\
    \ max[t-1] = max[t-1], max[t]\n            t = t - 1\n        else\n         \
    \   break\n        end\n    end\n    for i = k+1, len do\n        if arr[i] >\
    \ max[1] then\n            max[1] = arr[i]\n            local t = 1\n        \
    \    while t > 0 do\n                if max[t] > max[t-1] then\n             \
    \       max[t], max[t-1] = max[t-1], max[t]\n                    t = t - 1\n \
    \               else\n                    break\n                end\n       \
    \     end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply1mfy3z.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmply1mfy3z.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local len = #arr\n  if len == k then return arr end\n  local tmp = {}\n  local\
    \ j = 0\n  for i = 1, len do\n    if i <= k then\n      j = j + 1\n      tmp[j]\
    \ = arr[i]\n    else\n      local max = tmp[1]\n      local mx = 1\n      for\
    \ i = 2, k do\n        if tmp[i] > max then\n          max = tmp[i]\n        \
    \  mx = i\n        end\n      end\n      if arr[i] < max then\n        tmp[mx]\
    \ = arr[i]\n      end\n    end\n  end\n  return tmp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tmkd84u.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp6tmkd84u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local le, ri = 1, n\n    while le < ri do\n        local\
    \ i = math.random(le, ri)\n        local j = le\n        for k = le, ri do\n \
    \           if arr[k] < arr[i] then\n                arr[k], arr[j] = arr[j],\
    \ arr[k]\n                j = j + 1\n            end\n        end\n        arr[i],\
    \ arr[j] = arr[j], arr[i]\n        if j < k then\n            le = j + 1\n   \
    \     elseif j > k then\n            ri = j - 1\n        else\n            return\
    \ arr\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgho_x6pt.lua:38:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpgho_x6pt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(result, arr[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    assert(k > 0)\n    if #arr == 0 then return {} end\n    if k == 1 then\n\
    \        local max = arr[1]\n        for i=2,#arr do\n            if arr[i] >\
    \ max then max = arr[i] end\n        end\n        return {max}\n    end\n    if\
    \ k == #arr then return arr end\n    local size = math.min(k, #arr)\n    local\
    \ ret = {}\n    for i=1,size do ret[i] = arr[i] end\n    table.sort(ret)\n   \
    \ for i=size+1,#arr do\n        if arr[i] > ret[1] then\n            ret[1] =\
    \ arr[i]\n            for j=2,size do\n                if ret[j] < ret[j-1] then\n\
    \                    ret[j], ret[j-1] = ret[j-1], ret[j]\n                else\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxilrrisi.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpxilrrisi.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local n = #arr\n    local res = {}\n    for i = n, n\
    \ - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmijktyj.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmprmijktyj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return {}\n    end\n    if #arr <= k then\n     \
    \   table.sort(arr)\n        return arr\n    end\n    local res = {}\n    for\
    \ i=1, k do\n        table.insert(res, arr[i])\n    end\n    table.sort(res)\n\
    \    for i=k+1, #arr do\n        if arr[i] > res[1] then\n            table.remove(res,\
    \ 1)\n            table.insert(res, arr[i])\n            table.sort(res)\n   \
    \     end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ret = {}\n    if #arr < k then\n        return ret\n    end\n    for\
    \ i=1,k do\n        ret[i] = arr[i]\n    end\n    heap.min_heapify(ret)\n    for\
    \ i=k+1,#arr do\n        if arr[i] > ret[1] then\n            ret[1] = arr[i]\n\
    \            heap.min_heapify(ret, 1)\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa49zj513.lua:18:\
    \ attempt to index a nil value (global 'heap')\nstack traceback:\n\t/tmp/tmpa49zj513.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpa49zj513.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ret = {}\n    for i = 1, #arr do\n        if i <= k then\n        \
    \    local val = arr[i]\n            local j = i - 1\n            while j > 0\
    \ and ret[j] < val do\n                ret[j + 1] = ret[j]\n                j\
    \ = j - 1\n            end\n            ret[j + 1] = val\n        else\n     \
    \       if arr[i] > ret[1] then\n                local val = arr[i]\n        \
    \        local j = 1\n                while j < k and ret[j + 1] < val do\n  \
    \                  ret[j] = ret[j + 1]\n                    j = j + 1\n      \
    \          end\n                ret[j] = val\n            end\n        end\n \
    \   end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34tupfi7.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp34tupfi7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local function partition(arr, l, r)\n        local\
    \ x = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n         \
    \   if arr[j] <= x then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function random(l,\
    \ r)\n        return math.random(l, r)\n    end\n    local function randomPartition(arr,\
    \ l, r)\n        local i = random(l, r)\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return partition(arr, l, r)\n    end\n    local function kthSmallest(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local m = randomPartition(arr, l, r)\n        local t = m - l + 1\n  \
    \      if t == k then\n            return arr[m]\n        elseif t > k then\n\
    \            return kthSmallest(arr, l, m - 1, k)\n        else\n            return\
    \ kthSmallest(arr, m + 1, r, k - t)\n        end\n    end\n    return kthSmallest(arr,\
    \ 1, len, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_fsf4kg.lua:52:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpl_fsf4kg.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    for i, e in ipairs(arr) do\n        if i <= k then\n\
    \            table.insert(heap, e)\n        else\n            table.insert(heap,\
    \ e)\n            table.sort(heap)\n            table.remove(heap, 1)\n      \
    \  end\n    end\n    table.sort(heap)\n    return heap\nend\nreturn maximum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpebbqqwbl.lua:25: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k // 2, 1, -1 do\n        local j = i\n     \
    \   local t = heap[j]\n        local leaf = j * 2\n        while leaf <= k do\n\
    \            if leaf < k and heap[leaf] < heap[leaf + 1] then\n              \
    \  leaf = leaf + 1\n            end\n            if t < heap[leaf] then\n    \
    \            heap[j] = heap[leaf]\n                j = leaf\n                leaf\
    \ = j * 2\n            else\n                break\n            end\n        end\n\
    \        heap[j] = t\n    end\n    for i = k + 1, len do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            local j = 1\n      \
    \      local t = heap[j]\n            local leaf = j * 2\n            while leaf\
    \ <= k do\n                if leaf < k and heap[leaf] < heap[leaf + 1] then\n\
    \                    leaf = leaf + 1\n                end\n                if\
    \ t < heap[leaf] then\n                    heap[j] = heap[leaf]\n            \
    \        j = leaf\n                    leaf = j * 2\n                else\n  \
    \                  break\n                end\n            end\n            heap[j]\
    \ = t\n        end\n    end\n    for i = k, 2, -1 do\n        heap[i], heap[1]\
    \ = heap[1], heap[i]\n        local j = 1\n        local t = heap[j]\n       \
    \ local leaf = j * 2\n        while leaf <= k - 1 do\n            if leaf < k\
    \ - 1 and heap[leaf] < heap[leaf + 1] then\n                leaf = leaf + 1\n\
    \            end\n            if t < heap[leaf] then\n                heap[j]\
    \ = heap[leaf]\n                j = leaf\n                leaf = j * 2\n     \
    \       else\n                break\n            end\n        end\n        heap[j]\
    \ = t\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpil5lge41.lua:80:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpil5lge41.lua:80:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local heap_size = 0\n    for i = 1, #arr do\n      \
    \  local n = arr[i]\n        if heap_size < k then\n            heap_size = heap_size\
    \ + 1\n            heap[heap_size] = n\n            local p = heap_size\n    \
    \        while p > 1 do\n                local np = math.floor(p / 2)\n      \
    \          if heap[np] < heap[p] then\n                    heap[np], heap[p] =\
    \ heap[p], heap[np]\n                    p = np\n                else\n      \
    \              break\n                end\n            end\n        elseif n >\
    \ heap[1] then\n            heap[1] = n\n            local p = 1\n           \
    \ while true do\n                local np = p * 2\n                if np > heap_size\
    \ then\n                    break\n                elseif np == heap_size then\n\
    \                    if heap[p] < heap[np] then\n                        heap[p],\
    \ heap[np] = heap[np], heap[p]\n                    end\n                    break\n\
    \                elseif heap[np] < heap[np + 1] then\n                    np =\
    \ np + 1\n                end\n                if heap[p] < heap[np] then\n  \
    \                  heap[p], heap[np] = heap[np], heap[p]\n                   \
    \ p = np\n                else\n                    break\n                end\n\
    \            end\n        end\n    end\n    local ret = {}\n    for i = 1, heap_size\
    \ do\n        ret[i] = heap[i]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ysq4mu6.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmp7ysq4mu6.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local i, j = 0, #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[r]\n        i = l\n        for j = l, r-1 do\n            if arr[j] >\
    \ pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n              \
    \  i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    while true do\n        i = partition(i, j)\n \
    \       if i == k-1 then\n            break\n        elseif i < k-1 then\n   \
    \         i = i + 1\n        else\n            j = i - 1\n        end\n    end\n\
    \    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0frvclce.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0frvclce.lua:16:\
    \ in local 'partition'\n\t/tmp/tmp0frvclce.lua:25: in local 'candidate'\n\t/tmp/tmp0frvclce.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function qsort(l, r)\n        if l >= r then return end\n        local\
    \ rand = math.random(l, r)\n        arr[l], arr[rand] = arr[rand], arr[l]\n  \
    \      local x = arr[l]\n        local i, j = l, r\n        while i < j do\n \
    \           while i < j and arr[j] <= x do\n                j = j - 1\n      \
    \      end\n            arr[i] = arr[j]\n            while i < j and arr[i] >=\
    \ x do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = x\n        qsort(l, i - 1)\n        qsort(i + 1,\
    \ r)\n    end\n    qsort(1, #arr)\n    return arr[1, k]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt6d2n_8v.lua:32: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function sort(nums, i, j)\n        if i < j then\n            local\
    \ t = nums[i]\n            local p = i\n            local l = i\n            local\
    \ r = j\n            while l < r do\n                while l < r and nums[r] <=\
    \ t do\n                    r = r - 1\n                end\n                if\
    \ l < r then\n                    nums[l] = nums[r]\n                    l = l\
    \ + 1\n                end\n                while l < r and nums[l] >= t do\n\
    \                    l = l + 1\n                end\n                if l < r\
    \ then\n                    nums[r] = nums[l]\n                    r = r - 1\n\
    \                end\n            end\n            nums[l] = t\n            sort(nums,\
    \ i, l - 1)\n            sort(nums, l + 1, j)\n        end\n    end\n    sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp264b2m8k.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp264b2m8k.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5ierr12.lua:17:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpl5ierr12.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if #arr < k then\n        return arr\n    end\n    local j = 1\n    for i\
    \ = k + 1, #arr do\n        local x = i\n        while x > 1 and arr[x] > arr[x\
    \ - 1] do\n            arr[x], arr[x - 1] = arr[x - 1], arr[x]\n            x\
    \ = x - 1\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetxswgf5.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpetxswgf5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return {}\n    end\n    local heap = {}\n    for\
    \ i, v in ipairs(arr) do\n        table.insert(heap, v)\n        local j = i\n\
    \        while j > 1 do\n            local p = math.floor(j / 2)\n           \
    \ if heap[p] < heap[j] then\n                heap[p], heap[j] = heap[j], heap[p]\n\
    \                j = p\n            else\n                break\n            end\n\
    \        end\n    end\n    while #heap > k do\n        table.remove(heap, 1)\n\
    \        local n = #heap\n        for i = 1, n do\n            local j = i\n \
    \           while j < n do\n                local l, r = j * 2, j * 2 + 1\n  \
    \              if r <= n then\n                    if heap[l] > heap[r] then\n\
    \                        if heap[j] < heap[l] then\n                         \
    \   heap[j], heap[l] = heap[l], heap[j]\n                            j = l\n \
    \                       else\n                            break\n            \
    \            end\n                    else\n                        if heap[j]\
    \ < heap[r] then\n                            heap[j], heap[r] = heap[r], heap[j]\n\
    \                            j = r\n                        else\n           \
    \                 break\n                        end\n                    end\n\
    \                elseif l <= n then\n                    if heap[j] < heap[l]\
    \ then\n                        heap[j], heap[l] = heap[l], heap[j]\n        \
    \                j = l\n                    else\n                        break\n\
    \                    end\n                else\n                    break\n  \
    \              end\n            end\n        end\n    end\n    return heap\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe06j2y7.lua:70:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmpxe06j2y7.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local ret = {}\n    for i = 1, k do\n        ret[i]\
    \ = arr[#arr - i + 1]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mv06g5p.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1mv06g5p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local i, j = l, r\n        local\
    \ x = arr[r]\n        while i < j do\n            while i < j and arr[i] > x do\n\
    \                i = i + 1\n            end\n            while i < j and arr[j]\
    \ <= x do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n\
    \        arr[r], arr[i] = arr[i], arr[r]\n        return i\n    end\n    local\
    \ function qsort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            qsort(arr, l, m - 1)\n            qsort(arr, m + 1, r)\n\
    \        end\n    end\n    qsort(arr, 1, #arr)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp674q6tgr.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp674q6tgr.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local maxs = {}\n    for _, v in ipairs(arr) do\n        if #maxs == 0 then\n\
    \            table.insert(maxs, v)\n        else\n            local l, r = 1,\
    \ #maxs\n            while l <= r do\n                local m = math.floor((l\
    \ + r) / 2)\n                if maxs[m] < v then\n                    r = m -\
    \ 1\n                else\n                    l = m + 1\n                end\n\
    \            end\n            if l <= k then\n                table.insert(maxs,\
    \ l, v)\n            end\n            if #maxs > k then\n                table.remove(maxs)\n\
    \            end\n        end\n    end\n    return maxs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq8_kmk.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp_mq8_kmk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local function heapify(arr, heap, i)\n        local\
    \ l = 2 * i\n        local r = 2 * i + 1\n        local n = #arr\n        local\
    \ largest = i\n        if l <= n and arr[l] > arr[largest] then\n            largest\
    \ = l\n        end\n        if r <= n and arr[r] > arr[largest] then\n       \
    \     largest = r\n        end\n        if largest ~= i then\n            arr[i],\
    \ arr[largest] = arr[largest], arr[i]\n            heapify(arr, heap, largest)\n\
    \        end\n    end\n    local function buildHeap(arr, heap)\n        for i\
    \ = math.floor(#arr / 2), 1, -1 do\n            heapify(arr, heap, i)\n      \
    \  end\n    end\n    local function heapSort(arr, heap)\n        buildHeap(arr,\
    \ heap)\n        for i = #arr, 2, -1 do\n            arr[1], arr[i] = arr[i],\
    \ arr[1]\n            heap[i] = nil\n            heapify(arr, heap, 1)\n     \
    \   end\n    end\n    heapSort(arr, heap)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9j1w1rvw.lua:48:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmp9j1w1rvw.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function merge(arr1, arr2)\n        local arr = {}\n        local i,\
    \ j = 1, 1\n        while i <= #arr1 and j <= #arr2 do\n            if arr1[i]\
    \ > arr2[j] then\n                arr[#arr+1] = arr1[i]\n                i = i\
    \ + 1\n            else\n                arr[#arr+1] = arr2[j]\n             \
    \   j = j + 1\n            end\n        end\n        while i <= #arr1 do\n   \
    \         arr[#arr+1] = arr1[i]\n            i = i + 1\n        end\n        while\
    \ j <= #arr2 do\n            arr[#arr+1] = arr2[j]\n            j = j + 1\n  \
    \      end\n        return arr\n    end\n    local function halve(arr)\n     \
    \   local arr1, arr2 = {}, {}\n        for i = 1, #arr, 2 do\n            arr1[#arr1+1]\
    \ = arr[i]\n            if i+1 <= #arr then\n                arr2[#arr2+1] = arr[i+1]\n\
    \            end\n        end\n        return arr1, arr2\n    end\n    local function\
    \ sort(arr)\n        if #arr <= 1 then\n            return arr\n        end\n\
    \        local arr1, arr2 = halve(arr)\n        arr1 = sort(arr1)\n        arr2\
    \ = sort(arr2)\n        return merge(arr1, arr2)\n    end\n    local arr = sort(arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0_0esmp.lua:63:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpm0_0esmp.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local k = k or 1\n  if k == 1 then\n    return math.max(unpack(arr))\n  end\n\
    \  local q = {unpack(arr)}\n  local result = {}\n  for i = 1, k do\n    local\
    \ max = math.max(unpack(q))\n    table.insert(result, max)\n    local p = {}\n\
    \    for j = 1, #q do\n      if q[j] ~= max then\n        table.insert(p, q[j])\n\
    \      end\n    end\n    q = p\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5f9c5m6h.lua:15:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5f9c5m6h.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp5f9c5m6h.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local left = 1\n    local right = len\n    while true\
    \ do\n        local pivot = arr[left]\n        local i = left\n        local j\
    \ = right\n        while i < j do\n            while arr[j] >= pivot and i < j\
    \ do\n                j = j - 1\n            end\n            if i == j then\n\
    \                break\n            end\n            arr[i] = arr[j]\n       \
    \     while arr[i] <= pivot and i < j do\n                i = i + 1\n        \
    \    end\n            if i == j then\n                break\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        if\
    \ i == k then\n            break\n        elseif i > k then\n            right\
    \ = i - 1\n        else\n            left = i + 1\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0r_nvp95.lua:54:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp0r_nvp95.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \ttable.sort(arr)\n\treturn arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnekp_db7.lua:19:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmpnekp_db7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local pq = {}\n    local res = {}\n    for i = 1, #arr do\n        local\
    \ ins = arr[i]\n        local idx = #pq + 1\n        for j = 1, #pq do\n     \
    \       if ins > pq[j] then\n                idx = j\n                break\n\
    \            end\n        end\n        table.insert(pq, idx, ins)\n        if\
    \ #pq > k then\n            table.remove(pq, #pq)\n        end\n    end\n    return\
    \ pq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvtbiv4n.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpsvtbiv4n.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function heapify(arr, i, n)\n        local l, r = 2 * i, 2 * i + 1\n\
    \        local largest = i\n        if l <= n and arr[l] > arr[largest] then\n\
    \            largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr,\
    \ largest, n)\n        end\n    end\n    local function build_heap(arr, n)\n \
    \       for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i, n)\n\
    \        end\n    end\n    local function heap_sort(arr, n)\n        build_heap(arr,\
    \ n)\n        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            heapify(arr, 1, i - 1)\n        end\n    end\n    heap_sort(arr,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50muday0.lua:49:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp50muday0.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function heapify(arr, index, l)\n        local c1, c2 = index * 2,\
    \ index * 2 + 1\n        local maxi = index\n        if c1 <= l and arr[c1] >\
    \ arr[maxi] then\n            maxi = c1\n        end\n        if c2 <= l and arr[c2]\
    \ > arr[maxi] then\n            maxi = c2\n        end\n        if maxi ~= index\
    \ then\n            arr[index], arr[maxi] = arr[maxi], arr[index]\n          \
    \  heapify(arr, maxi, l)\n        end\n    end\n    local function build(arr,\
    \ l)\n        for i = math.floor(l / 2), 1, -1 do\n            heapify(arr, i,\
    \ l)\n        end\n    end\n    local function sort(arr, l)\n        local n =\
    \ l\n        for i = 1, l do\n            arr[1], arr[n] = arr[n], arr[1]\n  \
    \          n = n - 1\n            heapify(arr, 1, n)\n        end\n    end\n \
    \   local l = #arr\n    build(arr, l)\n    sort(arr, l)\n    local ret = {}\n\
    \    for i = 1, k do\n        ret[i] = arr[i]\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jqth96c.lua:52:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp6jqth96c.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local t = {}\n    for i = 1, k do\n        local max = -math.huge\n     \
    \   local j = 0\n        for i = 1, #arr do\n            if arr[i] > max then\n\
    \                max = arr[i]\n                j = i\n            end\n      \
    \  end\n        t[#t + 1] = arr[j]\n        table.remove(arr, j)\n    end\n  \
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8x9hafl.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpj8x9hafl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local a = {}\n    for i, v in ipairs(arr) do\n        if i <= k then\n  \
    \          a[i] = v\n        else\n            table.sort(a)\n            if v\
    \ > a[1] then\n                a[1] = v\n            end\n        end\n    end\n\
    \    table.sort(a)\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphb5xux1y.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmphb5xux1y.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmphb5xux1y.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local h = {}\n    for i = 1, k do\n        h[i] = arr[i]\n\
    \    end\n    heap.heapify(h, k)\n    for i = k + 1, n do\n        if arr[i] >\
    \ h[1] then\n            h[1] = arr[i]\n            heap.siftdown(h, 1, k)\n \
    \       end\n    end\n    return h\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6e97rknb.lua:16:\
    \ attempt to index a nil value (global 'heap')\nstack traceback:\n\t/tmp/tmp6e97rknb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp6e97rknb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == n then return arr end\n    for i = math.floor(k / 2), 1,\
    \ -1 do\n        local j = i\n        while j * 2 <= k do\n            local ch\
    \ = j * 2\n            if ch + 1 <= k and arr[ch + 1] > arr[ch] then\n       \
    \         ch = ch + 1\n            end\n            if arr[j] < arr[ch] then\n\
    \                arr[j], arr[ch] = arr[ch], arr[j]\n            end\n        \
    \    j = ch\n        end\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > arr[1] then\n            arr[1], arr[i] = arr[i], arr[1]\n            local\
    \ j = 1\n            while j * 2 <= k do\n                local ch = j * 2\n \
    \               if ch + 1 <= k and arr[ch + 1] > arr[ch] then\n              \
    \      ch = ch + 1\n                end\n                if arr[j] < arr[ch] then\n\
    \                    arr[j], arr[ch] = arr[ch], arr[j]\n                end\n\
    \                j = ch\n            end\n        end\n    end\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq7rebir.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpcq7rebir.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then return {} end\n    local res = {}\n\
    \    for i = 1, len do\n        while (#res > 0 and arr[i] > res[#res]) and #res\
    \ + len - i + 1 > k do\n            table.remove(res)\n        end\n        if\
    \ #res < k then\n            table.insert(res, arr[i])\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4za_i_al.lua:28:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp4za_i_al.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  table.sort(arr)\n  local res = {}\n  for i = #arr - k + 1, #arr do\n    table.insert(res,\
    \ arr[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local size = #arr\n    if size == 0 then\n        return {}\n    end\n  \
    \  if size <= k then\n        return arr\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    -- make heap\n    for i =\
    \ k / 2, 1, -1 do\n        local j = i\n        while 2 * j <= k do\n        \
    \    local child = 2 * j\n            if child + 1 <= k and res[child + 1] > res[child]\
    \ then\n                child = child + 1\n            end\n            if res[j]\
    \ < res[child] then\n                res[j], res[child] = res[child], res[j]\n\
    \                j = child\n            else\n                break\n        \
    \    end\n        end\n    end\n    for i = k + 1, size do\n        if arr[i]\
    \ > res[1] then\n            res[1] = arr[i]\n            local j = 1\n      \
    \      while 2 * j <= k do\n                local child = 2 * j\n            \
    \    if child + 1 <= k and res[child + 1] > res[child] then\n                \
    \    child = child + 1\n                end\n                if res[j] < res[child]\
    \ then\n                    res[j], res[child] = res[child], res[j]\n        \
    \            j = child\n                else\n                    break\n    \
    \            end\n            end\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfo04lwt.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpzfo04lwt.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    table.sort(arr)\n    local res = {}\n    for i = n, n\
    \ - k + 1, -1 do\n        table.insert(res, arr[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c823wdh.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp4c823wdh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ks = {}\n    for i = 1, k do\n        ks[i] = arr[i]\n    end\n   \
    \ table.sort(ks)\n    for i = k + 1, #arr do\n        if arr[i] > ks[1] then\n\
    \            ks[1] = arr[i]\n            table.sort(ks)\n        end\n    end\n\
    \    return ks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9swdyqj.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpo9swdyqj.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpo9swdyqj.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function inplace(arr, i, j)\n        if i < j then\n            local\
    \ m = math.floor((i + j) / 2)\n            inplace(arr, i, m)\n            inplace(arr,\
    \ m + 1, j)\n            local t, p, q = {}, i, m + 1\n            while p <=\
    \ m and q <= j do\n                if arr[p] <= arr[q] then\n                \
    \    t[#t + 1] = arr[p]\n                    p = p + 1\n                else\n\
    \                    t[#t + 1] = arr[q]\n                    q = q + 1\n     \
    \           end\n            end\n            while p <= m do\n              \
    \  t[#t + 1] = arr[p]\n                p = p + 1\n            end\n          \
    \  while q <= j do\n                t[#t + 1] = arr[q]\n                q = q\
    \ + 1\n            end\n            for i = 1, #t do\n                arr[i +\
    \ i - 1] = t[i]\n            end\n        end\n    end\n    inplace(arr, 1, #arr)\n\
    \    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1kq8tu0.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {-4, -4, -4}\nstack traceback:\n\t/tmp/tmpb1kq8tu0.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local q = {}\n    for i = 1, #arr do\n        local n = arr[i]\n        local\
    \ j = 1\n        while (j <= #q) and (q[j] < n) do\n            j = j + 1\n  \
    \      end\n        table.insert(q, j, n)\n        if #q > k then\n          \
    \  table.remove(q, #q)\n        end\n    end\n    return q\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxh8_uom.lua:30:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpxxh8_uom.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if arr == nil or k <= 0 then return {} end\n  local n = #arr\n  if k >= n then\
    \ return arr end\n  local heap = {}\n  for i = 1, k do\n    heap[i] = arr[i]\n\
    \  end\n  function heapify(idx)\n    local left = idx * 2\n    local right = idx\
    \ * 2 + 1\n    local m = idx\n    if left <= k and heap[left] > heap[m] then\n\
    \      m = left\n    end\n    if right <= k and heap[right] > heap[m] then\n \
    \     m = right\n    end\n    if m ~= idx then\n      heap[idx], heap[m] = heap[m],\
    \ heap[idx]\n      heapify(m)\n    end\n  end\n  local mid = math.floor(k / 2)\n\
    \  for i = mid, 1, -1 do\n    heapify(i)\n  end\n  for i = k + 1, n do\n    if\
    \ arr[i] > heap[1] then\n      heap[1] = arr[i]\n      heapify(1)\n    end\n \
    \ end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbvnt_aq.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpdbvnt_aq.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local res = {}\n  for i = 1, #arr do\n    local index = #res\n    while index\
    \ > 0 and #res >= k and arr[i] > res[index] do\n      index = index - 1\n    end\n\
    \    if index < k then\n      table.insert(res, index + 1, arr[i])\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93sb6wms.lua:27:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp93sb6wms.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \tlocal function comp(x, y)\n\t\treturn x > y\n\tend\n\ttable.sort(arr, comp)\n\
    \tlocal res = {}\n\tfor i = 1, k do\n\t\tres[i] = arr[i]\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69d7fa81.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp69d7fa81.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {};\n    for i, v in ipairs(arr) do\n        if i <= k then\n\
    \            heap[i] = v;\n        else\n            local tmp = 1;\n        \
    \    for j = 2, k do\n                if heap[j] < heap[tmp] then\n          \
    \          tmp = j;\n                end\n            end\n            if v >\
    \ heap[tmp] then\n                heap[tmp] = v;\n            end\n        end\n\
    \    end\n    local function p(a, b)\n        return a > b;\n    end\n    table.sort(heap,\
    \ p);\n    return heap;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f3jwr8l.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp8f3jwr8l.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(result, arr[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local result = {}\n    for i = 1, k do\n        result[i]\
    \ = arr[i]\n    end\n    for i = k, len do\n        table.sort(result)\n     \
    \   if arr[i] > result[1] then\n            result[1] = arr[i]\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pgayl5l.lua:36:\
    \ expected: {2, 20, 123}\nactual: {20, 20, 123}\nstack traceback:\n\t/tmp/tmp_pgayl5l.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local p = 1\n    local q = n\n    while p <= q do\n \
    \       local m = math.floor((p + q) / 2)\n        local i = p\n        local\
    \ j = p\n        local t = m\n        while j <= q do\n            if arr[j] >=\
    \ arr[t] then\n                local x = arr[i]\n                arr[i] = arr[j]\n\
    \                arr[j] = x\n                i = i + 1\n            end\n    \
    \        j = j + 1\n        end\n        if i - p == k then\n            return\n\
    \        elseif i - p < k then\n            q = m - 1\n        else\n        \
    \    p = m + 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgok2zlor.lua:41:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpgok2zlor.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    -- return max { arr[1], arr[2], ..., arr[k] }\n    local function max(i,\
    \ j)\n        local ret = arr[i]\n        for i = i + 1, j do\n            if\
    \ arr[i] > ret then\n                ret = arr[i]\n            end\n        end\n\
    \        return ret\n    end\n    local n = #arr\n    for i = 1, k do\n      \
    \  local index = i\n        for j = i + 1, n do\n            if arr[j] > arr[index]\
    \ then\n                index = j\n            end\n        end\n        arr[i],\
    \ arr[index] = arr[index], arr[i]\n    end\n    return max(1, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6n1v6z8.lua:37:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpg6n1v6z8.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(result, arr[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i = #arr, #arr - k + 1, -1 do\n\
    \        table.insert(res, arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pwnjs0i.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1pwnjs0i.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    for _, v in ipairs(arr) do\n        local i = 0\n   \
    \     for j, w in ipairs(res) do\n            if w < v then\n                i\
    \ = j\n                break\n            end\n        end\n        table.insert(res,\
    \ i, v)\n        if #res > k then\n            table.remove(res)\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrqlti52.lua:20:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmplrqlti52.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmplrqlti52.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local cmp = function(a, b) return a > b end\n    table.sort(arr,\
    \ cmp)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7l2xcqf.lua:24:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpr7l2xcqf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local t = {}\n    for i = 1, #arr do\n        t[#t + 1] = arr[i]\n      \
    \  if #t > k then\n            local idx = 1\n            for j = 2, #t do\n \
    \               if t[j] < t[idx] then\n                    idx = j\n         \
    \       end\n            end\n            table.remove(t, idx)\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function heapify(arr, i, n)\n        local l, r = 2 * i, 2 * i + 1\n\
    \        local p = i\n        if l <= n and arr[l] > arr[p] then\n           \
    \ p = l\n        end\n        if r <= n and arr[r] > arr[p] then\n           \
    \ p = r\n        end\n        if p ~= i then\n            arr[i], arr[p] = arr[p],\
    \ arr[i]\n            heapify(arr, p, n)\n        end\n    end\n    local function\
    \ buildHeap(arr, n)\n        for i = math.floor(n / 2), 1, -1 do\n           \
    \ heapify(arr, i, n)\n        end\n    end\n    local function heapSort(arr, n)\n\
    \        buildHeap(arr, n)\n        for i = n, 2, -1 do\n            arr[1], arr[i]\
    \ = arr[i], arr[1]\n            heapify(arr, 1, i - 1)\n        end\n    end\n\
    \    local function popHeap(arr, n)\n        local res = arr[1]\n        arr[1]\
    \ = arr[n]\n        heapify(arr, 1, n - 1)\n        return res\n    end\n    if\
    \ k == 0 then\n        return {}\n    end\n    local n = #arr\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    buildHeap(res,\
    \ k)\n    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            heapify(res, 1, k)\n        end\n    end\n    heapSort(res,\
    \ k)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1781ivg6.lua:66:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp1781ivg6.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then return arr end\n    local kth = require(\"\
    algo.sort.quickselect\").quickselect(arr, k, 1, len)\n    local result = {}\n\
    \    for i=1,k do\n        table.insert(result, arr[i])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9lp1ltc.lua:24:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmph9lp1ltc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    for i = 1, k do\n        for j = 1, #arr - i do\n            if arr[j] >\
    \ arr[j + 1] then\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n \
    \           end\n        end\n    end\n    local res = {}\n    for i = #arr -\
    \ k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if not arr or #arr == 0 then\n        return { }\n    end\n    local ans\
    \ = { }\n    for i = 1, k do\n        ans[i] = arr[i]\n    end\n    table.sort(ans)\n\
    \    for i = k + 1, #arr do\n        for j = 1, k do\n            if arr[i] >\
    \ ans[j] then\n                table.remove(ans, k)\n                table.insert(ans,\
    \ j, arr[i])\n                break\n            end\n        end\n    end\n \
    \   return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwn6_nsm.lua:35:\
    \ expected: {4, 4}\nactual: {4, -4}\nstack traceback:\n\t/tmp/tmpqwn6_nsm.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k // 2, 1, -1 do\n        heapify(heap, i, k)\n    end\n    for i\
    \ = k + 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            heapify(heap, 1, k)\n        end\n    end\n    for i = k, 2, -1 do\n\
    \        heap[i], heap[1] = heap[1], heap[i]\n        heapify(heap, 1, i - 1)\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pt4w3n0.lua:16:\
    \ attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmp2pt4w3n0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp2pt4w3n0.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local l, r = 1, n + 1\n    local sel = function(arr,\
    \ i, j)\n        local pivot = arr[i]\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local partition\
    \ = function(arr, l, r)\n        local i = math.random(l, r)\n        local j\
    \ = sel(arr, l, r)\n        if j == k then\n            return\n        elseif\
    \ j < k then\n            return partition(arr, j + 1, r)\n        else\n    \
    \        return partition(arr, l, j - 1)\n        end\n    end\n    partition(arr,\
    \ l, r)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0kqe4w9.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpr0kqe4w9.lua:16:\
    \ in upvalue 'sel'\n\t/tmp/tmpr0kqe4w9.lua:30: in local 'partition'\n\t/tmp/tmpr0kqe4w9.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpr0kqe4w9.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == n then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local result = {}\n    for i = 1, k do\n        result[i]\
    \ = arr[i]\n    end\n    table.sort(result)\n    for i = k + 1, n do\n       \
    \ local x = arr[i]\n        local j = 1\n        while j <= k and result[j] >\
    \ x do\n            j = j + 1\n        end\n        if j <= k then\n         \
    \   for t = k, j + 1, -1 do\n                result[t] = result[t - 1]\n     \
    \       end\n            result[j] = x\n        end\n    end\n    return result\n\
    end\nreturn maximum\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv0gx35nf.lua:37: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i = #arr, #arr - k + 1, -1 do\n\
    \        table.insert(res, arr[i])\n    end\n    return res\nend\nreturn maximum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1bnfjsll.lua:19: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i = #arr, 1, -1 do\n       \
    \ if k == 0 then\n            break\n        end\n        table.insert(res, arr[i])\n\
    \        k = k - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozx33iw0.lua:26:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpozx33iw0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    for i = 1, #arr do\n        heap[i] = arr[i]\n    end\n\
    \    local function swap(i, j)\n        heap[i], heap[j] = heap[j], heap[i]\n\
    \    end\n    local function percolateDown(i)\n        while true do\n       \
    \     local l = i * 2\n            local r = i * 2 + 1\n            local minIndex\
    \ = i\n            if l <= #heap and heap[l] < heap[minIndex] then\n         \
    \       minIndex = l\n            end\n            if r <= #heap and heap[r] <\
    \ heap[minIndex] then\n                minIndex = r\n            end\n       \
    \     if minIndex == i then\n                break\n            end\n        \
    \    swap(i, minIndex)\n            i = minIndex\n        end\n    end\n    for\
    \ i = #heap // 2, 1, -1 do\n        percolateDown(i)\n    end\n    for i = 1,\
    \ k do\n        swap(1, #heap)\n        table.remove(heap)\n        percolateDown(1)\n\
    \    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2i2pyo3.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpv2i2pyo3.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len < 2 then\n        return arr\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] >= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] <= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, l, r)\n\
    \        if l < r then\n            local p = partition(arr, l, r)\n         \
    \   quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n\
    \    end\n    quickSort(arr, 1, len)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5aca_sc0.lua:53:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmp5aca_sc0.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local cmp = function(a, b) return a > b end\n    table.sort(arr, cmp)\n \
    \   local ret = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n  \
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg9o_oyp.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmptg9o_oyp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function sort(arr, lo, hi)\n        if lo < hi then\n            local\
    \ i, j = lo, hi\n            local v = arr[i]\n            while i < j do\n  \
    \              while i < j and arr[j] < v do\n                    j = j - 1\n\
    \                end\n                if i < j then\n                    arr[i]\
    \ = arr[j]\n                    i = i + 1\n                end\n             \
    \   while i < j and arr[i] > v do\n                    i = i + 1\n           \
    \     end\n                if i < j then\n                    arr[j] = arr[i]\n\
    \                    j = j - 1\n                end\n            end\n       \
    \     arr[i] = v\n            sort(arr, lo, i - 1)\n            sort(arr, i +\
    \ 1, hi)\n        end\n    end\n    if k == 0 then\n        return {}\n    end\n\
    \    local ans = {}\n    for i = 1, k do\n        ans[i] = arr[i]\n    end\n \
    \   sort(ans, 1, k)\n    for i = k + 1, #arr do\n        local lo, hi = 1, k\n\
    \        while lo < hi do\n            local m = lo + (hi - lo) // 2\n       \
    \     if ans[m] < arr[i] then\n                lo = m + 1\n            else\n\
    \                hi = m\n            end\n        end\n        if ans[lo] < arr[i]\
    \ then\n            lo = lo + 1\n        end\n        if lo <= k then\n      \
    \      for j = k, lo, -1 do\n                ans[j] = ans[j - 1]\n           \
    \ end\n            ans[lo] = arr[i]\n        end\n    end\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m8nud8w.lua:70:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1m8nud8w.lua:70:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function helper(l, r)\n        if l < r then\n            local i,\
    \ j = l, r\n            local t = arr[l]\n            while i < j do\n       \
    \         while i < j and arr[j] <= t do\n                    j = j - 1\n    \
    \            end\n                arr[i] = arr[j]\n                while i < j\
    \ and arr[i] >= t do\n                    i = i + 1\n                end\n   \
    \             arr[j] = arr[i]\n            end\n            arr[i] = t\n     \
    \       if i == k - 1 then\n                return\n            elseif i > k -\
    \ 1 then\n                helper(l, i - 1)\n            else\n               \
    \ helper(i + 1, r)\n            end\n        end\n    end\n    helper(1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmylt168x.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpmylt168x.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ret = {}\n    for _,v in ipairs(arr) do\n        if #ret < k then\n\
    \            table.insert(ret, v)\n        else\n            local idx, min =\
    \ 0, math.maxinteger\n            for i,v2 in ipairs(ret) do\n               \
    \ if v2 < min then\n                    idx, min = i, v2\n                end\n\
    \            end\n            if ret[idx] < v then\n                ret[idx] =\
    \ v\n            end\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2idlm7q.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpt2idlm7q.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k > n then\n        k = n\n    end\n    local partial_sort\
    \ = function(arr, start, stop)\n        for i = start, stop - 1 do\n         \
    \   for j = i + 1, stop do\n                if arr[i] < arr[j] then\n        \
    \            arr[i], arr[j] = arr[j], arr[i]\n                end\n          \
    \  end\n        end\n    end\n    partial_sort(arr, 1, k)\n    for i = k + 1,\
    \ n do\n        if arr[i] > arr[k] then\n            arr[k], arr[i] = arr[i],\
    \ arr[k]\n            partial_sort(arr, 1, k)\n        end\n    end\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy11o82t.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpyy11o82t.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local l = #arr\n    if l <= k then\n        return arr\n    end\n    local\
    \ function qsort(start, stop)\n        if start >= stop then\n            return\n\
    \        end\n        local p = arr[start]\n        local i, j = start, stop\n\
    \        while i < j do\n            while arr[j] <= p and i < j do\n        \
    \        j = j - 1\n            end\n            if i == j then\n            \
    \    break\n            end\n            arr[i] = arr[j]\n            while arr[i]\
    \ >= p and i < j do\n                i = i + 1\n            end\n            if\
    \ i == j then\n                break\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = p\n        if i < k then\n            qsort(i +\
    \ 1, stop)\n        elseif i > k then\n            qsort(start, i - 1)\n     \
    \   end\n    end\n    qsort(1, l)\n    local result = {}\n    for i = 1, k do\n\
    \        result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_mebw8d.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp1_mebw8d.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local i, j = 1, #arr\n    while i < j do\n        local partition = arr[i]\n\
    \        local l, r = i, j\n        while l < r do\n            while l < r and\
    \ arr[r] <= partition do\n                r = r - 1\n            end\n       \
    \     arr[l] = arr[r]\n            while l < r and arr[l] >= partition do\n  \
    \              l = l + 1\n            end\n            arr[r] = arr[l]\n     \
    \   end\n        arr[l] = partition\n        if l > k then\n            j = l\
    \ - 1\n        elseif l < k then\n            i = l + 1\n        else\n      \
    \      break\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_d777ti.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpw_d777ti.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    return {table.unpack(arr, #arr - k + 1)}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {size = 0}\n    local function heapify(a, i)\n        local\
    \ l, r, s = i*2, i*2+1, i\n        if l <= a.size and a[l] < a[s] then s = l end\n\
    \        if r <= a.size and a[r] < a[s] then s = r end\n        if s ~= i then\n\
    \            a[i], a[s] = a[s], a[i]\n            heapify(a, s)\n        end\n\
    \    end\n    local function push(a, v)\n        a.size = a.size + 1\n       \
    \ a[a.size] = v\n        local i = a.size\n        while i > 1 and a[i] < a[i//2]\
    \ do\n            a[i], a[i//2] = a[i//2], a[i]\n            i = i // 2\n    \
    \    end\n    end\n    local function pop(a)\n        local v = a[1]\n       \
    \ a[1] = a[a.size]\n        a.size = a.size - 1\n        heapify(a, 1)\n     \
    \   return v\n    end\n    for i = 1, #arr do\n        if heap.size < k then\n\
    \            push(heap, arr[i])\n        elseif arr[i] > heap[1] then\n      \
    \      pop(heap)\n            push(heap, arr[i])\n        end\n    end\n    return\
    \ heap\nend\nreturn maximum\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zje6nw1.lua:48: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local function up(i)\n        local par = math.floor(i\
    \ / 2)\n        if par >= 1 and heap[par] < heap[i] then\n            heap[par],\
    \ heap[i] = heap[i], heap[par]\n            up(par)\n        end\n    end\n  \
    \  local function down(i)\n        local l, r = i * 2, i * 2 + 1\n        local\
    \ mi = i\n        if l <= #heap and heap[l] > heap[mi] then\n            mi =\
    \ l\n        end\n        if r <= #heap and heap[r] > heap[mi] then\n        \
    \    mi = r\n        end\n        if mi ~= i then\n            heap[mi], heap[i]\
    \ = heap[i], heap[mi]\n            down(mi)\n        end\n    end\n    for i =\
    \ 1, #arr do\n        heap[i] = arr[i]\n        up(i)\n    end\n    for i = #arr\
    \ + 1, k do\n        heap[i] = math.mininteger\n        up(i)\n    end\n    for\
    \ i = 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            down(1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl34v4l7.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmpsl34v4l7.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    for i, v in ipairs(arr) do\n        if i > k then\n \
    \           table.insert(res, v)\n            table.sort(res)\n            table.remove(res,\
    \ 1)\n        else\n            table.insert(res, v)\n        end\n    end\n \
    \   table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local length = #arr\n    local result = {}\n    for i = 1, length do\n  \
    \      local j = i - 1\n        while j >= 1 and arr[j] < arr[j + 1] do\n    \
    \        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            j = j - 1\n    \
    \    end\n    end\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpj1jupd.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpjpj1jupd.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local l, r = 1, #arr - k + 1\n    while l < r do\n        local m = math.floor((l\
    \ + r) / 2)\n        if arr[m] <= arr[m + k - 1] then\n            l = m + 1\n\
    \        else\n            r = m\n        end\n    end\n    return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrm39vlk.lua:26:\
    \ expected: {-4, -3, 5}\nactual: 1\nstack traceback:\n\t/tmp/tmpmrm39vlk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = #arr, #arr - k + 1, -1\
    \ do\n        table.insert(result, arr[i])\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp514ye2q.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpp514ye2q.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local q = {}\n    local cmp = function(a, b)\n      \
    \  return a > b\n    end\n    for i = 1, k do\n        table.insert(q, arr[i])\n\
    \    end\n    table.sort(q, cmp)\n    for i = k + 1, n do\n        table.insert(q,\
    \ arr[i])\n        table.sort(q, cmp)\n        table.remove(q, 1)\n    end\n \
    \   return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39b_94b5.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp39b_94b5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k > len then return arr end\n    local buf = {}\n\
    \    for i = 1, k do\n        buf[i] = i\n    end\n    for i = k + 1, len do\n\
    \        local index = 1\n        for j = 2, k do\n            if arr[buf[j]]\
    \ < arr[buf[index]] then\n                index = j\n            end\n       \
    \ end\n        if arr[i] > arr[buf[index]] then\n            buf[index] = i\n\
    \        end\n    end\n    local ret = {}\n    for i = 1, k do\n        ret[i]\
    \ = arr[buf[i]]\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5lxev90.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp_5lxev90.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local a = {}\n    local function insert(v)\n        local\
    \ i = 1\n        while i <= k and a[i] do\n            if a[i] < v then\n    \
    \            break\n            end\n            i = i + 1\n        end\n    \
    \    if i <= k then\n            table.insert(a, i, v)\n            table.remove(a)\n\
    \        end\n    end\n    for i = 1, k do\n        a[i] = arr[i]\n    end\n \
    \   for i = k + 1, n do\n        insert(arr[i])\n    end\n    return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabdyfaa.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpdabdyfaa.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    for i, v in ipairs(arr) do\n        if (i <= k) then\n\
    \            table.insert(res, v)\n        else\n            local max_v = res[1]\n\
    \            local max_i = 1\n            for i, v in ipairs(res) do\n       \
    \         if (v > max_v) then\n                    max_v = v\n               \
    \     max_i = i\n                end\n            end\n            if (v > max_v)\
    \ then\n                res[max_i] = v\n            end\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp692yc6xa.lua:37:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp692yc6xa.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    for i = 1, k do\n        table.insert(res, arr[i])\n\
    \    end\n    table.sort(res)\n    for i = k + 1, #arr do\n        if arr[i] >\
    \ res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwp2lgdj5.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpwp2lgdj5.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpwp2lgdj5.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local heap_len = 0\n    local function max_heap_ify(pos)\n\
    \        local left = pos * 2\n        local right = pos * 2 + 1\n        local\
    \ largest = pos\n        if left <= heap_len and heap[left] > heap[largest] then\n\
    \            largest = left\n        end\n        if right <= heap_len and heap[right]\
    \ > heap[largest] then\n            largest = right\n        end\n        if largest\
    \ ~= pos then\n            heap[pos], heap[largest] = heap[largest], heap[pos]\n\
    \            max_heap_ify(largest)\n        end\n    end\n    local function build_max_heap()\n\
    \        for i = math.floor(heap_len / 2), 1, -1 do\n            max_heap_ify(i)\n\
    \        end\n    end\n    for i = 1, #arr do\n        if heap_len < k then\n\
    \            heap_len = heap_len + 1\n            heap[heap_len] = arr[i]\n  \
    \      elseif arr[i] > heap[1] then\n            heap[1] = arr[i]\n          \
    \  max_heap_ify(1)\n        end\n    end\n    build_max_heap()\n    return heap\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6kdy69k.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmpu6kdy69k.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  if not arr or #arr == 0 then\n    return {}\n  end\n  local n = #arr\n  if\
    \ k > n then\n    k = n\n  end\n  local arr = arr\n  local len = #arr\n  for i\
    \ = 1, len - 1 do\n    for j = 1, len - i do\n      if arr[j] < arr[j + 1] then\n\
    \        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n      end\n    end\n  end\n\
    \  local result = {}\n  for i = 1, k do\n    result[i] = arr[i]\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqclbvhy.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxqclbvhy.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzejulwyq.lua:17:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpzejulwyq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local ret = {}\n    for i = 1, k do\n        ret[i]\
    \ = arr[#arr - i + 1]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mv06g5p.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1mv06g5p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \tlocal function swap(arr, i, j)\n\t\tlocal tmp = arr[i]\n\t\tarr[i] = arr[j]\n\
    \t\tarr[j] = tmp\n\tend\n\tlocal function partition(arr, l, r)\n\t\tlocal x =\
    \ arr[r]\n\t\tlocal i = l - 1\n\t\tfor j = l, r do\n\t\t\tif arr[j] >= x then\n\
    \t\t\t\ti = i + 1\n\t\t\t\tswap(arr, i, j)\n\t\t\tend\n\t\tend\n\t\treturn i\n\
    \tend\n\tlocal function quickSelect(arr, l, r, k)\n\t\tif l == r then\n\t\t\t\
    return arr[l]\n\t\tend\n\t\tlocal pos = partition(arr, l, r)\n\t\tif pos + 1 ==\
    \ k then\n\t\t\treturn arr[pos]\n\t\telseif pos + 1 > k then\n\t\t\treturn quickSelect(arr,\
    \ l, pos - 1, k)\n\t\telse\n\t\t\treturn quickSelect(arr, pos + 1, r, k)\n\t\t\
    end\n\tend\n\treturn quickSelect(arr, 1, #arr, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoumsm0xp.lua:46:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmpoumsm0xp.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local nums = {}\n    for i = 1, #arr do\n        if #nums < k then\n    \
    \        table.insert(nums, arr[i])\n        else\n            table.sort(nums)\n\
    \            if arr[i] > nums[1] then\n                nums[1] = arr[i]\n    \
    \        end\n        end\n    end\n    table.sort(nums)\n    return nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp76772ui1.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp76772ui1.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp76772ui1.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    return arr[#arr - k + 1], arr[#arr - k + 2], arr[#arr\
    \ - k + 3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1v56oni.lua:18:\
    \ expected: {-4, -3, 5}\nactual: -4\nstack traceback:\n\t/tmp/tmpo1v56oni.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if len == 0 then\n        return {}\n    end\n    if\
    \ k > len then\n        k = len\n    end\n    local max = math.max\n    local\
    \ min = math.min\n    local max_num = max(unpack(arr))\n    local min_num = min(unpack(arr))\n\
    \    local num_map = {}\n    for i = 1, len do\n        local num = arr[i]\n \
    \       local index = (num - min_num) * 1000 // (max_num - min_num + 1) + 1\n\
    \        if num_map[index] == nil then\n            num_map[index] = {num}\n \
    \       else\n            table.insert(num_map[index], num)\n        end\n   \
    \ end\n    local i = len\n    local res = {}\n    while i > 0 and k > 0 do\n \
    \       local index = math.floor(i / 1000) + 1\n        if num_map[index] ~= nil\
    \ then\n            local len = #num_map[index]\n            local j = 1\n   \
    \         while j <= len and k > 0 do\n                table.insert(res, num_map[index][j])\n\
    \                j = j + 1\n                k = k - 1\n            end\n     \
    \   end\n        i = i - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswm1teg7.lua:20:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpswm1teg7.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpswm1teg7.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local k, cmp = k, function(a, b) return a > b end\n    table.sort(arr, cmp)\n\
    \    local idx = k\n    for i = k + 1, #arr do\n        if cmp(arr[i], arr[k])\
    \ then\n            idx = i\n            break\n        end\n    end\n    for\
    \ i = k, idx do\n        for j = i + 1, idx do\n            if cmp(arr[j], arr[i])\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n   \
    \     end\n    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21ezxj3f.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp21ezxj3f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local ret = {}\n    for i = 1, k do\n        local v\
    \ = arr[i]\n        local j = i\n        while j > 1 and v > ret[j - 1] do\n \
    \           ret[j] = ret[j - 1]\n            j = j - 1\n        end\n        ret[j]\
    \ = v\n    end\n    for i = k + 1, n do\n        local v = arr[i]\n        if\
    \ v > ret[1] then\n            local j = 1\n            while j < k and v > ret[j\
    \ + 1] do\n                ret[j] = ret[j + 1]\n                j = j + 1\n  \
    \          end\n            ret[j] = v\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sonsc89.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0sonsc89.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local res = {}\n  for _, v in ipairs(arr) do\n    if #res < k then\n      table.insert(res,\
    \ v)\n    else\n      local min = math.min(table.unpack(res))\n      if v > min\
    \ then\n        table.remove(res, table.indexOf(res, min))\n        table.insert(res,\
    \ v)\n      end\n    end\n  end\n  table.sort(res)\n  return res\nend\nreturn\
    \ maximum\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsic616fo.lua:27: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if #arr == 0 then\n        return {}\n    end\n    local s = {}\n    for\
    \ i = 1, k do\n        s[i] = arr[i]\n    end\n    s = table.sort(s)\n    for\
    \ i = k + 1, #arr do\n        if arr[i] > s[1] then\n            s[1] = arr[i]\n\
    \            s = table.sort(s)\n        end\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrueleym.lua:31:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpjrueleym.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if #arr < k then return {} end\n    local indexs = {}\n    for i = 1, k do\n\
    \        indexs[i] = i\n    end\n    local function swap(i, j)\n        local\
    \ tmp = indexs[i]\n        indexs[i] = indexs[j]\n        indexs[j] = tmp\n  \
    \  end\n    local function heapify()\n        for i = 2, k do\n            local\
    \ j = i\n            while j > 1 do\n                local parent = math.floor(j\
    \ / 2)\n                if arr[indexs[parent]] >= arr[indexs[j]] then\n      \
    \              break\n                end\n                swap(parent, j)\n \
    \               j = parent\n            end\n        end\n    end\n    local function\
    \ sift()\n        for i = k, 2, -1 do\n            local j = i\n            while\
    \ j < k do\n                local child = j * 2\n                if child + 1\
    \ <= k and arr[indexs[child + 1]] > arr[indexs[child]] then\n                \
    \    child = child + 1\n                end\n                if arr[indexs[j]]\
    \ >= arr[indexs[child]] then\n                    break\n                end\n\
    \                swap(j, child)\n                j = child\n            end\n\
    \        end\n    end\n    local function push()\n        local index = k + 1\n\
    \        while index <= #arr do\n            if arr[index] <= arr[indexs[1]] then\n\
    \                break\n            end\n            indexs[1] = index\n     \
    \       sift()\n            index = index + 1\n        end\n    end\n    heapify()\n\
    \    push()\n    table.sort(indexs)\n    local result = {}\n    for i = 1, k do\n\
    \        result[i] = arr[indexs[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i5kts5i.lua:74:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp7i5kts5i.lua:74:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local len = #arr\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[len - i + 1]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ttc4xyw.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0ttc4xyw.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return quick_select(arr, 1, #arr, k)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcq5rhmzr.lua:11:\
    \ attempt to call a nil value (global 'quick_select')\nstack traceback:\n\t/tmp/tmpcq5rhmzr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpcq5rhmzr.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k > n then\n        return arr\n    end\n    local\
    \ b = 0\n    local e = k - 1\n    local function qsort(b, e)\n        if b < e\
    \ then\n            local c = math.random(b, e)\n            arr[b], arr[c] =\
    \ arr[c], arr[b]\n            local pivot = arr[b]\n            local i = b\n\
    \            local j = e\n            while i < j do\n                while i\
    \ < j and arr[j] <= pivot do\n                    j = j - 1\n                end\n\
    \                if i < j then\n                    arr[i] = arr[j]\n        \
    \            i = i + 1\n                end\n                while i < j and arr[i]\
    \ >= pivot do\n                    i = i + 1\n                end\n          \
    \      if i < j then\n                    arr[j] = arr[i]\n                  \
    \  j = j - 1\n                end\n            end\n            arr[i] = pivot\n\
    \            qsort(b, i - 1)\n            qsort(i + 1, e)\n        end\n    end\n\
    \    qsort(b, e)\n    while e < n do\n        if arr[e + 1] > arr[b] then\n  \
    \          e = e + 1\n            local pivot = arr[e]\n            local i =\
    \ b\n            local j = e - 1\n            while i < j do\n               \
    \ while i < j and arr[j] <= pivot do\n                    j = j - 1\n        \
    \        end\n                if i < j then\n                    arr[i] = arr[j]\n\
    \                    i = i + 1\n                end\n                while i <\
    \ j and arr[i] >= pivot do\n                    i = i + 1\n                end\n\
    \                if i < j then\n                    arr[j] = arr[i]\n        \
    \            j = j - 1\n                end\n            end\n            arr[i]\
    \ = pivot\n        end\n        b = b + 1\n    end\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx9jxqib.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfx9jxqib.lua:25:\
    \ in local 'qsort'\n\t/tmp/tmpfx9jxqib.lua:45: in local 'candidate'\n\t/tmp/tmpfx9jxqib.lua:78:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return table.sort(arr)\n    end\n    local ans = {}\n    local\
    \ idx = 1\n    for i = 1, k do\n        ans[i] = arr[i]\n    end\n    for i =\
    \ k + 1, len do\n        local max = ans[1]\n        for j = 2, k do\n       \
    \     if ans[j] > max then\n                max = ans[j]\n            end\n  \
    \      end\n        if arr[i] < max then\n            local insert = false\n \
    \           for j = 1, k do\n                if ans[j] == max then\n         \
    \           ans[j] = arr[i]\n                    insert = true\n             \
    \       break\n                end\n            end\n            if not insert\
    \ then\n                ans[k] = arr[i]\n            end\n        end\n    end\n\
    \    table.sort(ans)\n    return ans\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v3j32ks.lua:50:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp_v3j32ks.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local results = {}\n    if n == k then\n        return\
    \ arr\n    end\n    local i = 1\n    while i <= k do\n        results[i] = arr[i]\n\
    \        i = i + 1\n    end\n    while i <= n do\n        table.insert(results,\
    \ arr[i])\n        table.sort(results)\n        table.remove(results, 1)\n   \
    \     i = i + 1\n    end\n    return results\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3_c8ch6.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpd3_c8ch6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == 0 then\n        return {}\n    elseif k ==\
    \ len then\n        return arr\n    end\n    local function quickSort(arr, s,\
    \ e)\n        if s >= e then\n            return\n        end\n        local key\
    \ = arr[s]\n        local i, j = s, e\n        while i < j do\n            while\
    \ i < j and arr[j] <= key do\n                j = j - 1\n            end\n   \
    \         if i < j then\n                arr[i] = arr[j]\n                i =\
    \ i + 1\n            end\n            while i < j and arr[i] >= key do\n     \
    \           i = i + 1\n            end\n            if i < j then\n          \
    \      arr[j] = arr[i]\n                j = j - 1\n            end\n        end\n\
    \        arr[i] = key\n        if i == k - 1 then\n            return\n      \
    \  elseif i > k - 1 then\n            quickSort(arr, s, i - 1)\n        else\n\
    \            quickSort(arr, i + 1, e)\n        end\n    end\n    quickSort(arr,\
    \ 1, len)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4urhqqlf.lua:55:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp4urhqqlf.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local res = {}\n    local key = {}\n    for i = 1, #arr do\n        local\
    \ num = arr[i]\n        local idx = #res\n        while idx > 0 and num > res[idx]\
    \ do\n            idx = idx - 1\n        end\n        if idx == k - 1 then\n \
    \           return res\n        elseif idx < k - 1 then\n            table.insert(res,\
    \ idx + 1, num)\n            key[num] = idx + 1\n        else\n            if\
    \ key[num] == nil then\n                key[num] = idx + 1\n            end\n\
    \            if res[idx] ~= num then\n                for i = key[num], idx do\n\
    \                    res[i] = res[i + 1]\n                    key[res[i]] = i\n\
    \                end\n                res[idx + 1] = num\n                key[num]\
    \ = idx + 1\n            end\n        end\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2dptqz1.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpr2dptqz1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local ret = {}\n    for i = 1, k do\n        table.insert(ret, arr[i])\n\
    \    end\n    table.sort(ret)\n    for i = k + 1, #arr do\n        if arr[i] >\
    \ ret[1] then\n            ret[1] = arr[i]\n            table.sort(ret)\n    \
    \    end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj_5a2di3.lua:17:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj_5a2di3.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpj_5a2di3.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    assert(n >= k)\n    for i = 1, k do\n        for j =\
    \ n, i + 1, -1 do\n            if arr[j] > arr[j - 1] then\n                arr[j],\
    \ arr[j - 1] = arr[j - 1], arr[j]\n            end\n        end\n    end\n   \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jqd_mat.lua:26:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5jqd_mat.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if n <= k then\n        return\n    end\n    for i =\
    \ n - 1, n - k, -1 do\n        for j = i, 1, -1 do\n            if arr[j] < arr[j\
    \ + 1] then\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n       \
    \     else\n                break\n            end\n        end\n    end\n   \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvn9toww.lua:30:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpmvn9toww.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k <= 0 or k > len then\n        return {}\n    end\n\
    \    for i = 1, k do\n        for j = i, len do\n            if arr[i] < arr[j]\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n   \
    \     end\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoeea08sl.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpoeea08sl.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    if k == len then\n        return arr\n    end\n   \
    \ local function siftdown(arr, start, end_)\n        local root = start\n    \
    \    while true do\n            local left = root * 2 + 1\n            if left\
    \ > end_ then break end\n            local right = left + 1\n            local\
    \ lv = arr[left]\n            local rv = nil\n            if right <= end_ then\n\
    \                rv = arr[right]\n            end\n            local child = nil\n\
    \            if rv then\n                child = right\n                if lv\
    \ > rv then\n                    child = left\n                end\n         \
    \   else\n                child = left\n            end\n            if arr[root]\
    \ < arr[child] then\n                arr[root], arr[child] = arr[child], arr[root]\n\
    \                root = child\n            else\n                break\n     \
    \       end\n        end\n    end\n    local heap = {}\n    for i = 1, k do\n\
    \        heap[i] = arr[i]\n    end\n    for i = (k - 1) // 2, 0, -1 do\n     \
    \   siftdown(heap, i, k - 1)\n    end\n    for i = k, len do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            siftdown(heap, 0,\
    \ k - 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrjv3dha.lua:62:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpvrjv3dha.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local ret = {}\n    for i = 1, k do\n        ret[i]\
    \ = arr[#arr - i + 1]\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1mv06g5p.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1mv06g5p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local s = {}\n    for i = 1, #arr do\n        if i <= k then\n          \
    \  table.insert(s, arr[i])\n        else\n            local index = 1\n      \
    \      for j = 2, #s do\n                if s[j] < s[index] then\n           \
    \         index = j\n                end\n            end\n            if arr[i]\
    \ > s[index] then\n                s[index] = arr[i]\n            end\n      \
    \  end\n    end\n    table.sort(s)\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9fj02rr.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpf9fj02rr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpf9fj02rr.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local res = {}\n  local dct = {}\n  for i = 1, #arr do\n    if i > k then\n\
    \      local max = -1e10\n      local idx = -1\n      for j = 1, k do\n      \
    \  if res[j] > max then\n          max = res[j]\n          idx = j\n        end\n\
    \      end\n      dct[max] = nil\n      res[idx] = arr[i]\n      dct[arr[i]] =\
    \ 1\n    else\n      res[i] = arr[i]\n      dct[arr[i]] = 1\n    end\n  end\n\
    \  local function quickSort(arr, l, r)\n    if l < r then\n      local i, j, x\
    \ = l, r, arr[l]\n      while i < j do\n        while i < j and arr[j] <= x do\n\
    \          j = j - 1\n        end\n        if i < j then\n          arr[i] = arr[j]\n\
    \          i = i + 1\n        end\n        while i < j and arr[i] >= x do\n  \
    \        i = i + 1\n        end\n        if i < j then\n          arr[j] = arr[i]\n\
    \          j = j - 1\n        end\n      end\n      arr[i] = x\n      quickSort(arr,\
    \ l, i - 1)\n      quickSort(arr, i + 1, r)\n    end\n  end\n  quickSort(res,\
    \ 1, k)\n  local t = {}\n  for i = 1, k do\n    t[i] = res[i]\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb2xj1m_.lua:66:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnb2xj1m_.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \tif not arr or k == 0 then\n\t\treturn nil\n\tend\n\tif k >= #arr then\n\t\t\
    return table.sort(arr)\n\tend\n\tlocal res = {}\n\tlocal n = #arr\n\tfor i = 1,\
    \ n do\n\t\tres[i] = arr[i]\n\tend\n\tlocal n = n\n\twhile n > k do\n\t\tlocal\
    \ t = {}\n\t\tfor i = 1, n, 2 do\n\t\t\tlocal j = i + 1\n\t\t\tif j > n then\n\
    \t\t\t\ttable.insert(t, res[i])\n\t\t\telse\n\t\t\t\tif res[i] < res[j] then\n\
    \t\t\t\t\ttable.insert(t, res[j])\n\t\t\t\telse\n\t\t\t\t\ttable.insert(t, res[i])\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tres = t\n\t\tn = #res\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfa5ix8z.lua:46:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpzfa5ix8z.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local heap_n = 0\n    for i = 1, #arr do\n        heap_n\
    \ = heap_n + 1\n        heap[heap_n] = arr[i]\n        local c = heap_n\n    \
    \    while c > 1 do\n            local p = math.floor(c / 2)\n            if heap[p]\
    \ >= heap[c] then\n                break\n            end\n            heap[p],\
    \ heap[c] = heap[c], heap[p]\n            c = p\n        end\n    end\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = heap[1]\n        heap[1]\
    \ = heap[heap_n]\n        heap_n = heap_n - 1\n        local p = 1\n        while\
    \ true do\n            local c = p * 2\n            if c + 1 <= heap_n and heap[c\
    \ + 1] > heap[c] then\n                c = c + 1\n            end\n          \
    \  if c > heap_n or heap[p] >= heap[c] then\n                break\n         \
    \   end\n            heap[p], heap[c] = heap[c], heap[p]\n            p = c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gmd4d8s.lua:50:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp1gmd4d8s.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikhh45c2.lua:17:\
    \ expected: {-4, -3, 5}\nactual: 0\nstack traceback:\n\t/tmp/tmpikhh45c2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local len = #arr\n    local i = 0\n    local j = len + 1\n    while true\
    \ do\n        local l = i\n        local h = j\n        local v = arr[l]\n   \
    \     while l < h do\n            local m = math.floor((l + h) / 2)\n        \
    \    if arr[m] > v then\n                l = m + 1\n            else\n       \
    \         h = m\n            end\n        end\n        if l > k then\n       \
    \     j = l - 1\n        elseif l < k then\n            i = l + 1\n        else\n\
    \            break\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87u1_0j9.lua:20:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp87u1_0j9.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp87u1_0j9.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local i = #arr\n    local res = {}\n    for j = 1, k\
    \ do\n        res[j] = arr[i]\n        i = i - 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a4xszv8.lua:24:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp5a4xszv8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return {}\n    end\n    local n = #arr\n    local\
    \ function heapify(i)\n        while i <= n do\n            local l = i * 2\n\
    \            local r = i * 2 + 1\n            local m = i\n            if l <=\
    \ n and arr[l] > arr[m] then\n                m = l\n            end\n       \
    \     if r <= n and arr[r] > arr[m] then\n                m = r\n            end\n\
    \            if m ~= i then\n                arr[i], arr[m] = arr[m], arr[i]\n\
    \                i = m\n            else\n                break\n            end\n\
    \        end\n    end\n    for i = n // 2, 1, -1 do\n        heapify(i)\n    end\n\
    \    for i = 1, k do\n        arr[1], arr[n - i + 1] = arr[n - i + 1], arr[1]\n\
    \        heapify(1)\n    end\n    return {table.unpack(arr, n - k + 1, n)}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsw3gz47.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmpxsw3gz47.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if #arr < 1 then\n        return {}\n    end\n    local k = k or 1\n    local\
    \ n = #arr\n    local l, h = 1, k\n    while l < h do\n        local m = math.floor((l\
    \ + h) / 2)\n        local p = arr[m]\n        local i, j = l, h\n        while\
    \ i <= j do\n            while arr[i] < p do\n                i = i + 1\n    \
    \        end\n            while arr[j] > p do\n                j = j - 1\n   \
    \         end\n            if i <= j then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n                j = j - 1\n            end\n\
    \        end\n        if m < j then\n            h = j\n        elseif m > i then\n\
    \            l = i\n        else\n            l = m\n            break\n     \
    \   end\n    end\n    local res = {}\n    for i = 1, l do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n03tk_5.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {-4, -3}\nstack traceback:\n\t/tmp/tmp8n03tk_5.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local r = arr\n    for i=1,k do\n        for j=1,#r-1 do\n            if\
    \ r[j] < r[j+1] then\n                r[j], r[j+1] = r[j+1], r[j]\n          \
    \  end\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplomi8u__.lua:25:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplomi8u__.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local result = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(result, arr[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local max = {}\n    for i = 1, k do\n        max[i]\
    \ = arr[#arr-i+1]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygtogwmc.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpygtogwmc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local res = {}\n    for i = 1, k do\n        local max\
    \ = -10001\n        local index = 1\n        for j = 1, n do\n            if arr[j]\
    \ ~= false and arr[j] > max then\n                max = arr[j]\n             \
    \   index = j\n            end\n        end\n        arr[index] = false\n    \
    \    res[i] = max\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w4cliuz.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmp0w4cliuz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    -- print('maximum(' .. arr_to_s(arr) .. ', ' .. k .. ')')\n    local n =\
    \ #arr\n    if k >= n then\n        table.sort(arr)\n        return arr\n    end\n\
    \    if k <= 0 then\n        return {}\n    end\n    local ret = {}\n    for i\
    \ = 1, n do\n        local cnt = 0\n        for j = i + 1, n do\n            if\
    \ arr[j] > arr[i] then\n                cnt = cnt + 1\n            end\n     \
    \   end\n        if cnt == k - 1 then\n            table.insert(ret, arr[i])\n\
    \            -- print('insert ' .. arr[i])\n            k = k - 1\n          \
    \  if k == 0 then\n                return ret\n            end\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwil7y7kr.lua:44:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpwil7y7kr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \  local i = 1\n  while i <= k do\n    local j = i\n    while j > 1 and arr[j]\
    \ > arr[j - 1] do\n      arr[j], arr[j - 1] = arr[j - 1], arr[j]\n      j = j\
    \ - 1\n    end\n    i = i + 1\n  end\n  return arr, k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnwr7lac.lua:26:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpdnwr7lac.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    if k == 0 then return {} end\n    local h = {}\n    for\
    \ i = 1, k do\n        h[i] = arr[i]\n    end\n    -- construct a heap\n    for\
    \ i = k / 2, 1, -1 do\n        local j = i\n        while 2 * j <= k do\n    \
    \        local t = 2 * j\n            if t + 1 <= k and h[t] < h[t + 1] then\n\
    \                t = t + 1\n            end\n            if h[j] < h[t] then\n\
    \                h[j], h[t] = h[t], h[j]\n                j = t\n            else\n\
    \                break\n            end\n        end\n    end\n    for i = k +\
    \ 1, n do\n        if h[1] < arr[i] then\n            h[1] = arr[i]\n        \
    \    local j = 1\n            while 2 * j <= k do\n                local t = 2\
    \ * j\n                if t + 1 <= k and h[t] < h[t + 1] then\n              \
    \      t = t + 1\n                end\n                if h[j] < h[t] then\n \
    \                   h[j], h[t] = h[t], h[j]\n                    j = t\n     \
    \           else\n                    break\n                end\n           \
    \ end\n        end\n    end\n    return h\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w6muqzr.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_w6muqzr.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp_w6muqzr.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: -1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local lo, hi = 1, n\n    while lo < hi do\n        local\
    \ i = math.random(lo, hi)\n        local j = math.random(lo, hi)\n        arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n    local function partition(lo, hi)\n   \
    \     local pivot = arr[lo]\n        local i, j = lo, hi\n        while i < j\
    \ do\n            while i < j and arr[j] < pivot do\n                j = j - 1\n\
    \            end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function sort(lo, hi)\n        if lo < hi then\n            local m\
    \ = partition(lo, hi)\n            sort(lo, m - 1)\n            sort(m + 1, hi)\n\
    \        end\n    end\n    sort(lo, hi)\n    local result = {}\n    for i = 1,\
    \ k do\n        result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823618
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local il, ir = l, r\n        while il < ir do\n            while arr[ir] <\
    \ pivot and il < ir do\n                ir = ir - 1\n            end\n       \
    \     arr[il] = arr[ir]\n            while arr[il] >= pivot and il < ir do\n \
    \               il = il + 1\n            end\n            arr[ir] = arr[il]\n\
    \        end\n        arr[il] = pivot\n        return il\n    end\n    local function\
    \ quicksort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quicksort(arr, l, m - 1)\n            quicksort(arr, m +\
    \ 1, r)\n        end\n    end\n    quicksort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrpm4ws1.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpwrpm4ws1.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k == 0 then\n        return {}\n    end\n    local n = #arr\n    local\
    \ function lua_builtin_sort(a, b)\n        return a > b\n    end\n    table.sort(arr,\
    \ lua_builtin_sort)\n    local result = {}\n    for i = 1, k do\n        result[i]\
    \ = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqodr2iu.lua:29:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxqodr2iu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikhh45c2.lua:17:\
    \ expected: {-4, -3, 5}\nactual: 0\nstack traceback:\n\t/tmp/tmpikhh45c2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 0
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n\
    \        table.insert(res, arr[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(arr, start, finish)\n        local l = start + 1\n\
    \        local r = finish\n        local v = arr[start]\n        while true do\n\
    \            while l <= r and arr[l] > v do\n                l = l + 1\n     \
    \       end\n            while l <= r and arr[r] < v do\n                r = r\
    \ - 1\n            end\n            if l > r then\n                break\n   \
    \         end\n            arr[l], arr[r] = arr[r], arr[l]\n            l = l\
    \ + 1\n            r = r - 1\n        end\n        arr[start], arr[r] = arr[r],\
    \ arr[start]\n        return r\n    end\n    local function quickSelect(arr, start,\
    \ finish, k)\n        if start >= finish then\n            return\n        end\n\
    \        local r = partition(arr, start, finish)\n        if r == k then\n   \
    \         return\n        elseif r > k then\n            quickSelect(arr, start,\
    \ r - 1, k)\n        else\n            quickSelect(arr, r + 1, finish, k)\n  \
    \      end\n    end\n    local n = #arr\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    local result = {}\n    for i = n - k + 1, n do\n        table.insert(result,\
    \ arr[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_h3f8_q.lua:57:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpj_h3f8_q.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local function partition(left, right)\n        local pivot = arr[left]\n\
    \        local store = left\n        local i = left + 1\n        while i <= right\
    \ do\n            if arr[i] >= pivot then\n                store = store + 1\n\
    \                arr[i], arr[store] = arr[store], arr[i]\n            end\n  \
    \          i = i + 1\n        end\n        arr[left], arr[store] = arr[store],\
    \ arr[left]\n        return store\n    end\n    local left, right = 1, #arr\n\
    \    while left <= right do\n        local pos = partition(left, right)\n    \
    \    if pos == k then\n            break\n        elseif pos < k then\n      \
    \      left = pos + 1\n        else\n            right = pos - 1\n        end\n\
    \    end\n    local result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl1nrdnx.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpnl1nrdnx.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpg_x3wh.lua:16:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpg_x3wh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823612
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    for i = math.floor(k / 2), 1, -1 do\n        local j\
    \ = i\n        while true do\n            local idx = j * 2\n            if idx\
    \ > k then\n                break\n            end\n            if idx + 1 <=\
    \ k and arr[idx + 1] > arr[idx] then\n                idx = idx + 1\n        \
    \    end\n            if arr[idx] > arr[j] then\n                arr[idx], arr[j]\
    \ = arr[j], arr[idx]\n                j = idx\n            else\n            \
    \    break\n            end\n        end\n    end\n    for i = k + 1, n do\n \
    \       if arr[i] > arr[1] then\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            local j = 1\n            while true do\n                local idx\
    \ = j * 2\n                if idx > k then\n                    break\n      \
    \          end\n                if idx + 1 <= k and arr[idx + 1] > arr[idx] then\n\
    \                    idx = idx + 1\n                end\n                if arr[idx]\
    \ > arr[j] then\n                    arr[idx], arr[j] = arr[j], arr[idx]\n   \
    \                 j = idx\n                else\n                    break\n \
    \               end\n            end\n        end\n    end\n    for i = k, 2,\
    \ -1 do\n        arr[i], arr[1] = arr[1], arr[i]\n        local j = 1\n      \
    \  while true do\n            local idx = j * 2\n            if idx >= i then\n\
    \                break\n            end\n            if idx + 1 < i and arr[idx\
    \ + 1] > arr[idx] then\n                idx = idx + 1\n            end\n     \
    \       if arr[idx] > arr[j] then\n                arr[idx], arr[j] = arr[j],\
    \ arr[idx]\n                j = idx\n            else\n                break\n\
    \            end\n        end\n    end\n    return arr\nend\nreturn maximum\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp9xmgs33.lua:73: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local sorted_arr = arr\n    table.sort(sorted_arr)\n    local max = {}\n\
    \    for i = #sorted_arr, #sorted_arr - k + 1, -1 do\n        table.insert(max,\
    \ sorted_arr[i])\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsiqhdcya.lua:23:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpsiqhdcya.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    for i = 1, k do\n        table.insert(heap, arr[i])\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n     \
    \       heap[1] = arr[i]\n            for j = 1, k / 2 do\n                local\
    \ c1 = j * 2\n                local c2 = j * 2 + 1\n                if c2 <= k\
    \ and heap[c2] < heap[c1] then\n                    if heap[c2] < heap[j] then\n\
    \                        heap[j], heap[c2] = heap[c2], heap[j]\n             \
    \       end\n                elseif c1 <= k and heap[c1] < heap[j] then\n    \
    \                heap[j], heap[c1] = heap[c1], heap[j]\n                end\n\
    \            end\n        end\n    end\n    table.sort(heap)\n    return heap\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvml0thep.lua:39:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmpvml0thep.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if k >= #arr then\n        return arr\n    end\n    local head = 1\n    local\
    \ tail = k\n    while true do\n        local i = head + 1\n        local j = tail\n\
    \        while i <= j do\n            while i <= j and arr[i] >= arr[head] do\n\
    \                i = i + 1\n            end\n            while i <= j and arr[j]\
    \ <= arr[head] do\n                j = j - 1\n            end\n            if\
    \ i < j then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n\
    \        end\n        arr[head], arr[j] = arr[j], arr[head]\n        if j == k\
    \ then\n            return {}\n        elseif j < k then\n            head = j\
    \ + 1\n            tail = tail + 1\n        else\n            tail = j\n     \
    \   end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcer5osh5.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpcer5osh5.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local res = {}\n    for i=1,k do\n        res[i] = arr[#arr-i+1]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhoeyl9z.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmplhoeyl9z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local heap = {}\n    local sort = function(t)\n        local func = function(i,\
    \ j)\n            return t[i] < t[j]\n        end\n        table.sort(t, func)\n\
    \    end\n    local initHeap = function(t, k)\n        sort(t)\n        for i\
    \ = 1, k do\n            heap[i] = t[i]\n        end\n    end\n    local buildHeap\
    \ = function(t, k)\n        local func = function(i, j)\n            return t[i]\
    \ < t[j]\n        end\n        for i = k + 1, #t do\n            if func(t[i],\
    \ heap[1]) then\n                heap[1] = t[i]\n                table.sort(heap,\
    \ func)\n            end\n        end\n    end\n    initHeap(arr, k)\n    buildHeap(arr,\
    \ k)\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdnfu7u6r.lua:14:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpdnfu7u6r.lua:14:\
    \ in function </tmp/tmpdnfu7u6r.lua:13>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpdnfu7u6r.lua:16:\
    \ in upvalue 'sort'\n\t/tmp/tmpdnfu7u6r.lua:19: in local 'initHeap'\n\t/tmp/tmpdnfu7u6r.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmpdnfu7u6r.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local values = {}\n    local count = 0\n    for _, value in ipairs(arr) do\n\
    \        if count < k then\n            values[count + 1] = value\n          \
    \  count = count + 1\n        else\n            local index = 1\n            for\
    \ i = 2, k do\n                if values[i] < values[index] then\n           \
    \         index = i\n                end\n            end\n            if value\
    \ > values[index] then\n                values[index] = value\n            end\n\
    \        end\n    end\n    table.sort(values)\n    return values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkeilzwx7.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpkeilzwx7.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpkeilzwx7.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    return arr, #arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtqpn8g1.lua:19:\
    \ expected: {4, 4}\nactual: {-4, 4, 4}\nstack traceback:\n\t/tmp/tmprtqpn8g1.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if arr and #arr > 0 and k > 0 then\n        local heap = heap_table.Heap()\n\
    \        heap:push(arr[1])\n        for i = 2, #arr do\n            if i < k then\n\
    \                heap:push(arr[i])\n            else\n                if arr[i]\
    \ > heap:top() then\n                    heap:pop()\n                    heap:push(arr[i])\n\
    \                end\n            end\n        end\n        local ret = {}\n \
    \       while not heap:empty() do\n            table.insert(ret, heap:top())\n\
    \            heap:pop()\n        end\n        return ret\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rjx2k4l.lua:12:\
    \ attempt to index a nil value (global 'heap_table')\nstack traceback:\n\t/tmp/tmp9rjx2k4l.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9rjx2k4l.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    if #arr == 0 then\n        return {}\n    end\n    if k == 0 then\n     \
    \   return {}\n    end\n    local len = #arr\n    for i = 1, len - 1 do\n    \
    \    for j = 1, len - i do\n            if arr[j] < arr[j + 1] then\n        \
    \        arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            end\n        end\n\
    \    end\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0a9gpkr.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpl0a9gpkr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    table.sort(arr)\n    local ret = {}\n    for i = #arr, #arr - k + 1, -1 do\n\
    \        table.insert(ret, arr[i])\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpj8qq5e.lua:22:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxpj8qq5e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823613
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Example 2:\n-- Example 3:\n-- Note:\n-- 1. The length of the array will be in\
    \ the range of [1, 1000].\n-- 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n\
    \    local n = #arr\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n\
    \        for j = 1, k do\n            if j == 1 then\n                dp[i][j]\
    \ = arr[i]\n            else\n                dp[i][j] = dp[i - 1][j]\n      \
    \          for l = j - 1, 1, -1 do\n                    if dp[i - 1][l] < arr[i]\
    \ then\n                        dp[i][j] = math.max(dp[i][j], dp[i - 1][l - 1]\
    \ + arr[i])\n                    end\n                end\n            end\n \
    \       end\n    end\n    local result = {}\n    for i = 1, k do\n        result[i]\
    \ = dp[n][i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw3a2t8g.lua:19:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplw3a2t8g.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmplw3a2t8g.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823613
