name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a dictionary, return True if all keys are strings in lower \n--\
  \ case or all keys are strings in upper case, else return False.\n-- The function\
  \ should return False is the given dictionary is empty.\n-- Examples:\nlocal function\
  \ check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', [5] = 'banana', ['a']\
  \ = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal all_lower = true\n\tlocal all_upper = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) ~= \"string\" then\n\t\t\treturn false\n\t\tend\n\t\tif string.lower(k)\
    \ ~= k then\n\t\t\tall_lower = false\n\t\tend\n\t\tif string.upper(k) ~= k then\n\
    \t\t\tall_upper = false\n\t\tend\n\tend\n\treturn all_lower or all_upper\nend",
  "\tlocal lower_case = true\n\tlocal upper_case = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tlower_case = lower_case and type(k) == \"string\" and k == string.lower(k)\n\
    \t\tupper_case = upper_case and type(k) == \"string\" and k == string.upper(k)\n\
    \tend\n\treturn lower_case or upper_case\nend", "    local case = 'lower'\n  \
    \  for key, _ in pairs(dict) do\n        if type(key) ~= 'string' then\n     \
    \       return false\n        end\n        if string.lower(key) ~= key then\n\
    \            case = 'upper'\n        end\n    end\n    for key, _ in pairs(dict)\
    \ do\n        if string.lower(key) == key and case == 'upper' then\n         \
    \   return false\n        end\n        if string.upper(key) == key and case ==\
    \ 'lower' then\n            return false\n        end\n    end\n    return true\n\
    end", "  local c_lower, c_upper = 0, 0\n  for k,v in pairs(dict) do\n    if type(k)\
    \ == \"string\" then\n      if k == string.lower(k) then\n        c_lower = c_lower\
    \ + 1\n      elseif k == string.upper(k) then\n        c_upper = c_upper + 1\n\
    \      end\n    end\n  end\n  if c_lower > 0 and c_upper > 0 then\n    return\
    \ false\n  elseif c_lower > 0 or c_upper > 0 then\n    return true\n  else\n \
    \   return false\n  end\nend", "    local uppercase = true\n    local lowercase\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if string.match(k, \"[%a%d]\"\
    ) ~= k then\n            return false\n        end\n        if k ~= string.upper(k)\
    \ then\n            uppercase = false\n        end\n        if k ~= string.lower(k)\
    \ then\n            lowercase = false\n        end\n    end\n    return not (dict\
    \ == {}) and (uppercase or lowercase)\nend", "   -- TODO: write your code here\n\
    end", "   --TODO: your code here\n   local mode = 1\n   for key, val in pairs(dict)\
    \ do\n      if type(key) ~= \"string\" then\n         return false\n      end\n\
    \      if mode == 1 then\n         if string.lower(key) == key then\n        \
    \    mode = 2\n         elseif string.upper(key) == key then\n            mode\
    \ = 3\n         else\n            return false\n         end\n      elseif mode\
    \ == 2 then\n         if string.lower(key) ~= key then\n            return false\n\
    \         end\n      elseif mode == 3 then\n         if string.upper(key) ~= key\
    \ then\n            return false\n         end\n      end\n   end\n   return true\n\
    end", "    if dict ~= nil and #dict > 0 then\n        local lower_case = true\n\
    \        local upper_case = true\n        for k, _ in pairs(dict) do\n       \
    \     if not is_lower_string(k) then\n                lower_case = false\n   \
    \         end\n            if not is_upper_string(k) then\n                upper_case\
    \ = false\n            end\n        end\n        return lower_case or upper_case\n\
    \    end\n    return false\nend", "    if dict == {} then\n        return false\n\
    \    end\n    if dict.keys()[1]\n    return true\nend", "    if not is_table(dict)\
    \ then\n        return false\n    end\n    local keys = get_keys(dict)\n    local\
    \ key_count = 0\n    local check_upper_case = true\n    local check_lower_case\
    \ = true\n    for i, key in ipairs(keys) do\n        if not (type(key) == \"string\"\
    ) then\n            return false\n        end\n        if key_count == 0 then\n\
    \            check_upper_case = not (key:match(\"%l\"))\n            check_lower_case\
    \ = not (key:match(\"%u\"))\n        else\n            check_upper_case = check_upper_case\
    \ and not (key:match(\"%l\"))\n            check_lower_case = check_lower_case\
    \ and not (key:match(\"%u\"))\n        end\n        key_count = key_count + 1\n\
    \    end\n    return check_upper_case or check_lower_case\nend", "  -- YOUR CODE\
    \ HERE\n  if #dict==0 then return false end\n  local is_lower = true\n  local\
    \ is_upper = true\n  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\
    \ return false end\n    if k ~= string.lower(k) then is_lower = false end\n  \
    \  if k ~= string.upper(k) then is_upper = false end\n  end\n  return is_lower\
    \ or is_upper\nend", "    local is_dict_lower = nil\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if is_dict_lower == nil then\n            is_dict_lower = string.upper(k)\
    \ == k\n        else\n            if is_dict_lower and string.upper(k) ~= k then\n\
    \                return false\n            elseif not is_dict_lower and string.lower(k)\
    \ ~= k then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "\t-- TODO:\n\tlocal uppers = 0\n\tlocal lowers = 0\n\t\
    for k,v in pairs(dict) do\n\t\tif type(k) ~= \"string\" then return false end\n\
    \t\tif string.lower(k) == k then lowers = lowers + 1\n\t\telseif string.upper(k)\
    \ == k then uppers = uppers + 1\n\t\telse return false end\n\tend\n\treturn uppers\
    \ > 0 and lowers == 0 or uppers == 0 and lowers > 0\nend", "    -- return false\
    \ if dict is empty\n    if not dict then return false end\n    -- check if all\
    \ keys are strings in lower case \n    local lower_case = true\n    for k, _ in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" or not is_lower_case(k) then\
    \ \n            lower_case = false\n            break\n        end\n    end\n\
    \    -- check if all keys are strings in upper case\n    local upper_case = true\n\
    \    for k, _ in pairs(dict) do\n        if type(k) ~= \"string\" or not is_upper_case(k)\
    \ then \n            upper_case = false\n            break\n        end\n    end\n\
    \    -- return appropriate value\n    return lower_case or upper_case\nend", " \
    \ if dict == {} then return false end\n  local is_upper = dict[next(dict)] ==\
    \ dict[next(dict)]:upper()\n  for k,v in pairs(dict) do\n    if k ~= k:upper()\
    \ and k ~= k:lower() then\n      return false\n    end\n    if is_upper and k\
    \ ~= k:upper() then\n      return false\n    end\n    if not is_upper and k ~=\
    \ k:lower() then\n      return false\n    end\n  end\n  return true\nend", " \
    \   local chars = {string.byte(\"a\"), string.byte(\"z\")}\n    local is_lower,\
    \ is_upper = true, true\n    for _, v in pairs(dict) do\n        is_lower = is_lower\
    \ and string.match(v, string.char(chars[1]))\n        is_upper = is_upper and\
    \ string.match(v, string.char(chars[2]))\n    end\n    return is_lower or is_upper\n\
    end\nprint(check_dict_case({D = 1, C = 2, B = 3, A = 4}))\nprint(check_dict_case({d\
    \ = 1, b = 2, a = 3, c = 4}))\nprint(check_dict_case({D = 1, c = 2, B = 3, A =\
    \ 4}))\nprint(check_dict_case({}))", "    local is_lower = true\n    local is_upper\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:match(\"%u\") then\n\
    \            is_lower = false\n        end\n        if key:match(\"%l\") then\n\
    \            is_upper = false\n        end\n    end\n    return not is_lower or\
    \ not is_upper\nend\nassert(check_dict_case({\"A\": 1, \"B\": 2}) == true)\nassert(check_dict_case({\"\
    C\": 3, \"D\": 4}) == true)\nassert(check_dict_case({\"a\": 5, \"b\": 6}) == true)\n\
    assert(check_dict_case({\"c\": 7, \"d\": 8}) == true)\nassert(check_dict_case({\"\
    A\": 9, \"B\": 10, \"C\": 11}) == true)\nassert(check_dict_case({\"a\": 12, \"\
    b\": 13, \"c\": 14}) == true)\nassert(check_dict_case({\"A\": 15, \"B\": 16, \"\
    c\": 17}) == false)\nassert(check_dict_case({\"A\": 18, \"B\": 19, \"d\": 20})\
    \ == false)\nassert(check_dict_case({\"A\": 21, \"b\": 22, \"c\": 23}) == false)\n\
    assert(check_dict_case({\"a\": 24, \"B\": 25, \"c\": 26}) == false)\nassert(check_dict_case({\"\
    a\": 27, \"b\": 28, \"C\": 29}) == false)\nassert(check_dict_case({\"a\": 30,\
    \ \"B\": 31, \"C\": 32}) == false)\nassert(check_dict_case({}) == false)", '    if
    next(dict) == nil then return false end', "    -- your code here\nend", "    if\
    \ not next(dict) then\n        return false\n    end\n    local case = nil\n \
    \   for k,v in pairs(dict) do\n        if type(k) ~= 'string' then\n         \
    \   return false\n        end\n        if case == nil then\n            if string.lower(k)\
    \ == k then\n                case = 'lower'\n            elseif string.upper(k)\
    \ == k then\n                case = 'upper'\n            else\n              \
    \  return false\n            end\n        else\n            if string.lower(k)\
    \ == k and case ~= 'lower' then\n                return false\n            elseif\
    \ string.upper(k) == k and case ~= 'upper' then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "    -- TODO: Your\
    \ code here\nend", "  if #dict == 0 then return false end\n  for k,v in pairs(dict)\
    \ do\n    if type(k) ~= 'string' then return false end\n    if k:upper() == k\
    \ and not all_upper(dict) then return false end\n    if k:lower() == k and not\
    \ all_lower(dict) then return false end\n  end\n  return true\nend", "\t-- body\n\
    \tlocal flag = true\n\tfor k, v in pairs(dict) do\n\t\tif (not k:match(\"^%u+$\"\
    )) and (not k:match(\"^%l+$\")) then\n\t\t\tflag = false\n\t\t\tbreak\n\t\tend\n\
    \tend\n\treturn flag\nend", "    local seen_upper = false\n    local seen_lower\
    \ = false\n    for k, _ in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if not seen_upper and k == k:upper()\
    \ then\n            seen_upper = true\n        elseif not seen_lower and k ==\
    \ k:lower() then\n            seen_lower = true\n        else\n            return\
    \ false\n        end\n    end\n    return seen_upper or seen_lower\nend", "\t\
    -- TODO\nend", "    local lower = true\n    local upper = true\n    for key,_\
    \ in pairs(dict) do\n        if lower and key ~= key:lower() then\n          \
    \  lower = false\n        end\n        if upper and key ~= key:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nprint(check_dict_case({}))\nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'a':\
    \ 1, 'B': 2}))\nprint(check_dict_case({'A': 1, 'B': 2}))\nprint(check_dict_case({'1':\
    \ 1, '2': 2}))\nprint(check_dict_case({'1': 1, '2': 2, 'A': 1, 'B': 2}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, '1': 1, '2': 2}))", "    -- YOUR CODE GOES HERE\n    local ctr =\
    \ 0\n    local upper_case = true\n    local lower_case = true\n    for i,v in\
    \ pairs(dict) do\n        if type(i) == \"string\" then\n            if i ~= string.upper(i)\
    \ then\n                upper_case = false\n            end\n            if i\
    \ ~= string.lower(i) then\n                lower_case = false\n            end\n\
    \        else\n            return false\n        end\n        ctr = ctr + 1\n\
    \    end\n    if ctr == 0 then\n        return false\n    end\n    return upper_case\
    \ or lower_case\nend", "    local lower, upper = false, false\n    for k, v in\
    \ pairs(dict) do\n        if type(k) == \"string\" then\n            if not lower\
    \ and k == k:lower() then\n                lower = true\n            elseif not\
    \ upper and k == k:upper() then\n                upper = true\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend", "  if next(dict) == nil then\n    return false\n  end\n  local\
    \ state = \"upper\"\n  for k, v in pairs(dict) do\n    local ktype = type(k)\n\
    \    if ktype ~= \"string\" then\n      return false\n    end\n    if state ==\
    \ \"upper\" then\n      if string.lower(k) == k then\n        state = \"lower\"\
    \n      end\n    elseif state == \"lower\" then\n      if string.upper(k) == k\
    \ then\n        state = \"upper\"\n      end\n    end\n  end\n  return true\n\
    end", "    local check=nil\n    local keys=dict:keys()\n    if #keys==0 then\n\
    \        return false\n    end\n    for _,k in ipairs(keys) do\n        if type(k)==\"\
    string\" then\n            if check==nil then\n                if k:find(\"%u\"\
    )==nil then\n                    check=true\n                else\n          \
    \          check=false\n                end\n            else\n              \
    \  if check then\n                    if k:find(\"%u\")~=nil then\n          \
    \              return false\n                    end\n                else\n \
    \                   if k:find(\"%u\")==nil then\n                        return\
    \ false\n                    end\n                end\n            end\n     \
    \   else\n            return false\n        end\n    end\n    return true\nend",
  "    if not next(dict) then\n        return false\n    end\n    local lower_case\
    \ = true\n    local upper_case = true\n    for k, v in pairs(dict) do\n      \
    \  if not (type(k) == \"string\" and k == string.lower(k)) then\n            lower_case\
    \ = false\n        end\n        if not (type(k) == \"string\" and k == string.upper(k))\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend", "\tif dict == {} then\n\t\treturn false\n\tend\n\tlocal\
    \ lower = false\n\tlocal upper = false\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ == \"string\" then\n\t\t\tif string.lower(k) == k then\n\t\t\t\tlower = true\n\
    \t\t\telseif string.upper(k) == k then\n\t\t\t\tupper = true\n\t\t\telse\n\t\t\
    \t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return lower or upper\nend", "    local key_type = type(next(dict))\n    if key_type\
    \ ~= \"string\" then\n        return false\n    end\n    local upper_case = key_type\
    \ == string.upper(key_type)\n    for k, _ in pairs(dict) do\n        if string.upper(k)\
    \ ~= k then\n            upper_case = false\n        end\n        if string.lower(k)\
    \ ~= k then\n            upper_case = false\n        end\n    end\n    return\
    \ upper_case\nend", "\treturn \nend", "\t-- your code goes here\n\tlocal upper_count\
    \ = 0\n\tlocal lower_count = 0\n\tfor k, v in pairs(dict) do\n\t\tlocal up = k:upper()\n\
    \t\tlocal lw = k:lower()\n\t\tif k == up then\n\t\t\tupper_count = upper_count\
    \ + 1\n\t\telseif k == lw then\n\t\t\tlower_count = lower_count + 1\n\t\tend\n\
    \tend\n\tif upper_count == #dict or lower_count == #dict then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "    -- 1. check if the dictionary is empty.\n\
    \    if is_empty(dict) then\n        return false\n    end", "    local key_is_lower\
    \ = true\n    local key_is_upper = true\n    for key, value in pairs(dict) do\n\
    \        if key_is_lower and key:match(\"%a\") ~= key then\n            key_is_lower\
    \ = false\n        end\n        if key_is_upper and key:match(\"%A\") ~= key then\n\
    \            key_is_upper = false\n        end\n    end\n    return key_is_lower\
    \ or key_is_upper\nend", "\tif not dict then return false end", "    --\n    --\
    \ Fill in your code here.\n    --\nend", "  local start_case = true\n  local keys\
    \ = table.keys(dict)\n  if #keys == 0 then return false end\n  if string.match(keys[1],\
    \ '^%u') then\n    start_case = false\n  end\n  for _, key in ipairs(keys) do\n\
    \    if start_case and string.match(key, '^%l') then\n      return false\n   \
    \ elseif not start_case and string.match(key, '^%u') then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if not is_table(dict) then\n      \
    \  return false\n    end\n    local key, is_lower_case, is_upper_case = next(dict)\n\
    \    if not key then\n        return false\n    end\n    is_lower_case = is_string(key)\
    \ and string.lower(key) == key\n    is_upper_case = is_string(key) and string.upper(key)\
    \ == key\n    for key, value in pairs(dict) do\n        if not is_lower_case and\
    \ not is_upper_case then\n            return false\n        end\n        if not\
    \ is_lower_case and is_string(key) and string.lower(key) == key then\n       \
    \     return false\n        end\n        if not is_upper_case and is_string(key)\
    \ and string.upper(key) == key then\n            return false\n        end\n \
    \   end\n    return true\nend", "    -- write your code here\n    local total\
    \ = 0;\n    local lower = 0;\n    local upper = 0;\n    for k, v in pairs(dict)\
    \ do\n        total = total + 1;\n        if type(k) == \"string\" then\n    \
    \        if string.lower(k) == k then\n                lower = lower + 1;\n  \
    \          elseif string.upper(k) == k then\n                upper = upper + 1;\n\
    \            end\n        end\n    end\n    if total == 0 then\n        return\
    \ false;\n    elseif lower == total then\n        return true;\n    elseif upper\
    \ == total then\n        return true;\n    else\n        return false;\n    end\n\
    end", "\tlocal lower_case = true\n\tlocal upper_case = true\n\tfor k,v in pairs(dict)\
    \ do\n\t\tif type(k) ~= \"string\" then return false end\n\t\tif not k:match(\"\
    ^%l+$\") then lower_case = false end\n\t\tif not k:match(\"^%u+$\") then upper_case\
    \ = false end\n\tend\n\treturn lower_case or upper_case\nend", "\tlocal up = true;\n\
    \tlocal down = true;\n\tfor i, v in pairs(dict) do\n\t\tif type(i) ~= \"string\"\
    \ then\n\t\t\treturn false;\n\t\tend\n\t\tif string.upper(i) ~= i then\n\t\t\t\
    up = false;\n\t\tend\n\t\tif string.lower(i) ~= i then\n\t\t\tdown = false;\n\t\
    \tend\n\tend\n\treturn up or down;\nend", "    -- if empty, return false\n   \
    \ if not next(dict) then return false end\n    -- get first key\n    local key\
    \ = next(dict)\n    local key_type = type(key)\n    -- if not a string, return\
    \ false\n    if key_type ~= 'string' then return false end\n    -- is lowercase?\n\
    \    local lowercase = key == key:lower()\n    -- check rest of keys\n    for\
    \ k,v in pairs(dict) do\n        -- same type?\n        if type(k) ~= key_type\
    \ then return false end\n        -- same case?\n        if lowercase and k ~=\
    \ k:lower() then return false end\n        if not lowercase and k ~= k:upper()\
    \ then return false end\n    end\n    -- if all keys pass tests, return true\n\
    \    return true\nend", "    -- TODO: code goes here\nend", "\tif #dict == 0 then\
    \ return false end\n\tlocal isUpper, isLower = false, false\n\tfor k, _ in pairs(dict)\
    \ do\n\t\tif type(k) ~= 'string' then return false end\n\t\tif k:match('^%u+$')\
    \ then isUpper = true end\n\t\tif k:match('^%l+$') then isLower = true end\n\t\
    end\n\treturn isUpper and not isLower or isLower and not isUpper\nend", "  if\
    \ dict == {} then return false end -- if dict is empty, return false\n  local\
    \ upper, lower = false, false -- by default the dictionary has lower and upper\
    \ case keys\n  for k, _ in pairs(dict) do\n    if type(k) == \"string\" then --\
    \ skip non-string keys\n      local patt = string.match(k, \"%u\")\n      if patt\
    \ then upper = true end -- if uppercase, set upper\n      patt = string.match(k,\
    \ \"%l\")\n      if patt then lower = true end -- if lowercase, set lower\n  \
    \  end\n  end\n  return lower ~= upper\nend", "\t-- use lua.org's reference manual\
    \ for a list of available functions\n\t-- from the table module\nend", "    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   local t = type(k)\n        if t ~= \"string\" then return false end\n    \
    \    if lower and string.upper(k) ~= k then lower = false end\n        if upper\
    \ and string.lower(k) ~= k then upper = false end\n    end\n    return lower or\
    \ upper\nend", "    local lower = true\n    local upper = true\n    for k,v in\
    \ pairs(dict) do\n        lower = lower and (type(k) == \"string\" and k == string.lower(k))\n\
    \        upper = upper and (type(k) == \"string\" and k == string.upper(k))\n\
    \    end\n    return lower or upper\nend", "    local lower, upper = true, true\n\
    \    for k, _ in pairs(dict) do\n        if type(k) ~= 'string' then return false\
    \ end\n        if k:lower() ~= k then lower = false end\n        if k:upper()\
    \ ~= k then upper = false end\n    end\n    return lower or upper\nend\nprint(check_dict_case({}))\n\
    print(check_dict_case({A=1, B=2}))\nprint(check_dict_case({A=1, b=2}))\nprint(check_dict_case({a=1,\
    \ b=2}))\nprint(check_dict_case({a=1, B=2}))", "    if next(dict) == nil then\
    \ return false end\n    local seen_lower, seen_upper = false, false\n    for key,\
    \ value in pairs(dict) do\n        if type(key) ~= \"string\" then return false\
    \ end\n        if key:match(\"^%l+$\") then seen_lower = true\n        elseif\
    \ key:match(\"^%u+$\") then seen_upper = true\n        else return false end\n\
    \    end\n    return seen_lower ~= seen_upper\nend", "\tlocal all_lower = true\n\
    \tlocal all_upper = true\n\tfor k,v in pairs(dict) do\n\t\tif type(k) ~= \"string\"\
    \ then\n\t\t\treturn false\n\t\tend\n\t\tif k ~= k:lower() then\n\t\t\tall_lower\
    \ = false\n\t\tend\n\t\tif k ~= k:upper() then\n\t\t\tall_upper = false\n\t\t\
    end\n\tend\n\treturn all_lower or all_upper\nend", "    local lower, upper = 0,\
    \ 0\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n \
    \           if k == string.lower(k) then\n                lower = lower + 1\n\
    \            elseif k == string.upper(k) then\n                upper = upper +\
    \ 1\n            end\n        end\n    end\n    return (lower == 0 or upper ==\
    \ 0) and (lower > 0 or upper > 0)\nend\nprint(check_dict_case({'a':1, 'b':2}))\
    \ --> true\nprint(check_dict_case({'A':1, 'B':2})) --> true\nprint(check_dict_case({'A':1,\
    \ 'b':2})) --> false\nprint(check_dict_case({'A':1, 2:'b'})) --> false\nprint(check_dict_case({'a':1,\
    \ 'B':2})) --> false\nprint(check_dict_case({})) --> false", "    local dictionary_in_lower_case\
    \ = {}\n    local dictionary_in_upper_case = {}\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == \"string\" then\n            if key == string.lower(key)\
    \ then\n                table.insert(dictionary_in_lower_case, key)\n        \
    \    elseif key == string.upper(key) then\n                table.insert(dictionary_in_upper_case,\
    \ key)\n            end\n        end\n    end\n    if #dictionary_in_lower_case\
    \ == 0 and #dictionary_in_upper_case == 0 then\n        return false\n    elseif\
    \ #dictionary_in_lower_case == 0 and #dictionary_in_upper_case ~= 0 then\n   \
    \     return true\n    elseif #dictionary_in_lower_case ~= 0 and #dictionary_in_upper_case\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend\n\
    print(check_dict_case({}))\nprint(check_dict_case({DOG=1, cat=2}))\nprint(check_dict_case({dog=1,\
    \ Cat=2}))\nprint(check_dict_case({dog=1, CAT=2}))", "    local lower, upper =\
    \ true, true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n\
    \            return false\n        end\n        if not (is_lower_case(k) or is_upper_case(k))\
    \ then\n            return false\n        end\n        if is_lower_case(k) then\n\
    \            upper = false\n        else\n            lower = false\n        end\n\
    \    end\n    return not (lower and upper)\nend\nassert(check_dict_case({'foo':\
    \ 'bar'}) == true)\nassert(check_dict_case({'FOO': 'bar'}) == true)\nassert(check_dict_case({'foo':\
    \ 'bar', 'FOO': 'bar'}) == false)\nassert(check_dict_case({'foo': 'bar', 'bar':\
    \ 'baz'}) == true)\nassert(check_dict_case({'foo': 'bar', 'BAR': 'baz'}) == true)\n\
    assert(check_dict_case({'foo': 'bar', 'BAR': 'baz', 'FOO': 'baz'}) == false)\n\
    assert(check_dict_case({1: 2}) == false)\nassert(check_dict_case({}) == false)",
  "    -- Your code here\n    if #dict == 0 then\n        return false\n    end\n\
    \    local start = string.upper(dict[1])\n    for i, v in ipairs(dict) do\n  \
    \      if string.upper(v) ~= start then\n            return false\n        end\n\
    \    end\n    return true\nend", "\tlocal lower = true\n\tlocal upper = true\n\
    \tfor key, _ in pairs(dict) do\n\t\tif type(key) ~= \"string\" then\n\t\t\treturn\
    \ false\n\t\tend\n\t\tif string.upper(key) ~= key then\n\t\t\tupper = false\n\t\
    \tend\n\t\tif string.lower(key) ~= key then\n\t\t\tlower = false\n\t\tend\n\t\
    end\n\treturn lower or upper\nend", "    if not next(dict) then\n        return\
    \ false\n    end\n    local tolower = function(k,v) return string.lower(k) end\n\
    \    local toupper = function(k,v) return string.upper(k) end\n    local lower_dict\
    \ = {}\n    local upper_dict = {}\n    for k,v in pairs(dict) do\n        lower_dict[tolower(k,v)]\
    \ = tolower(v,k)\n        upper_dict[toupper(k,v)] = toupper(v,k)\n    end\n \
    \   local eq = function(d1,d2)\n        if not next(d1) then\n            return\
    \ true\n        end\n        for k,v in pairs(d1) do\n            if not d2[k]\
    \ or d2[k] ~= v then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    return eq(dict,lower_dict) or eq(dict,upper_dict)\n\
    end", "    return true\nend", "    -- Your code here\n    local lower = true\n\
    \    local upper = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= \"string\" then\n            return false\n        end\n        if string.find(key,\
    \ \"%u\") ~= nil then\n            lower = false\n        end\n        if string.find(key,\
    \ \"%l\") ~= nil then\n            upper = false\n        end\n    end\n    if\
    \ lower or upper then\n        return true\n    else\n        return false\n \
    \   end\nend", "    if not next(dict) then return false end\n    local is_lower\
    \ = true\n    local is_upper = true\n    for key,_ in pairs(dict) do\n       \
    \ if type(key) ~= 'string' then\n            return false\n        end\n     \
    \   if is_lower and string.upper(key) == key then\n            is_lower = false\n\
    \        end\n        if is_upper and string.lower(key) == key then\n        \
    \    is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end", "    if dict == nil or dict == {} then\n        return false\n    end\n\
    \    local lower = nil\n    for k,v in pairs(dict) do\n        if type(k) ~= \"\
    string\" then\n            return false\n        end\n        if lower == nil\
    \ then\n            lower = k == string.lower(k)\n        else\n            if\
    \ lower ~= (k == string.lower(k)) then\n                return false\n       \
    \     end\n        end\n    end\n    return true\nend", "    -- YOUR CODE HERE\n\
    \    local lower = false\n    local upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if (string.lower(k) ==\
    \ k) then\n                lower = true\n            elseif (string.upper(k) ==\
    \ k) then\n                upper = true\n            end\n        end\n    end\n\
    \    if lower and upper then\n        return false\n    elseif lower or upper\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ local char_counts = {}\n  local char_count = 0\n  for k, v in pairs(dict) do\n\
    \    local first_char = string.sub(k, 1, 1)\n    if char_counts[first_char] ==\
    \ nil then\n      char_counts[first_char] = 1\n      char_count = char_count +\
    \ 1\n    end\n  end\n  return char_count == 1\nend", "\tlocal count_upper = 0\n\
    \tlocal count_lower = 0\n\tfor k,v in pairs(dict) do\n\t\tif type(k) == \"string\"\
    \ then\n\t\t\tif string.lower(k) == k then\n\t\t\t\tcount_lower = count_lower\
    \ + 1\n\t\t\telseif string.upper(k) == k then\n\t\t\t\tcount_upper = count_upper\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tif count_lower == 0 or count_upper == 0 then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    if table.empty(dict)\
    \ then\n        return false\n    end\n    local res = true\n    local first_lower\
    \ = false\n    local first_upper = false\n    for k, v in pairs(dict) do\n   \
    \     if type(k) ~= 'string' then\n            return false\n        end\n   \
    \     if k:match('^%l+$') then\n            if first_upper then\n            \
    \    return false\n            end\n            first_lower = true\n        elseif\
    \ k:match('^%u+$') then\n            if first_lower then\n                return\
    \ false\n            end\n            first_upper = true\n        else\n     \
    \       return false\n        end\n    end\n    return res\nend", "    -- body...\n\
    end", "    -- A dictionary is empty, return False.\n    if not next(dict) then\n\
    \        return false\n    end", "   -- YOUR CODE HERE\n   local case = 0\n  \
    \ for k,v in pairs(dict) do\n      if type(k) ~= \"string\" then\n         return\
    \ false\n      elseif case == 0 then\n         if k == string.lower(k) then\n\
    \            case = 1\n         elseif k == string.upper(k) then\n           \
    \ case = 2\n         else\n            return false\n         end\n      elseif\
    \ case == 1 and k ~= string.lower(k) then\n         return false\n      elseif\
    \ case == 2 and k ~= string.upper(k) then\n         return false\n      end\n\
    \   end\n   return true\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lowerCaseCount = 0\n    local upperCaseCount = 0\n\
    \    for k,v in pairs(dict) do\n        if type(k) == \"string\" then\n      \
    \      if k == string.lower(k) then\n                lowerCaseCount = lowerCaseCount\
    \ + 1\n            elseif k == string.upper(k) then\n                upperCaseCount\
    \ = upperCaseCount + 1\n            end\n        end\n    end\n    if lowerCaseCount\
    \ > 0 and upperCaseCount > 0 then\n        return false\n    else\n        return\
    \ true\n    end\nend", "    if(type(dict) ~= \"table\") then\n        return false\n\
    \    end\n    if( #dict == 0 ) then\n        return false\n    end\n    local\
    \ first = nil\n    for k,v in pairs(dict) do\n        if(first == nil) then\n\
    \            if(type(k) == \"string\") then\n                first = string.lower(k)\n\
    \            else\n                return false\n            end\n        else\n\
    \            if(type(k) == \"string\") then\n                if(string.lower(k)\
    \ ~= first) then\n                    return false\n                end\n    \
    \        else\n                return false\n            end\n        end\n  \
    \  end\n    return true\nend", "    if is_empty(dict) then\n        return false\n\
    \    end\n    local t = {}\n    for k, _ in pairs(dict) do\n        table.insert(t,\
    \ k)\n    end\n    if string.lower(t[1]) == t[1] then\n        for _, v in ipairs(t)\
    \ do\n            if string.lower(v) ~= v then\n                return false\n\
    \            end\n        end\n    elseif string.upper(t[1]) == t[1] then\n  \
    \      for _, v in ipairs(t) do\n            if string.upper(v) ~= v then\n  \
    \              return false\n            end\n        end\n    else\n        return\
    \ false\n    end\n    return true\nend", "  if (table.getn(dict) == 0) then return\
    \ false end\n  local dictKeys = dict:keys()\n  local firstKey = dictKeys[1]\n\
    \  local currCase, isString = '', ''\n  if (type(firstKey) == 'string') then\n\
    \    currCase = string.upper(firstKey) == firstKey and 'UPPER' or 'LOWER'\n  \
    \  isString = true\n  else\n    isString = false\n  end\n  for _, key in pairs(dictKeys)\
    \ do\n    if (isString and type(key) ~= 'string') then return false end\n    if\
    \ (isString and currCase == 'UPPER' and string.lower(key) == key) then\n     \
    \ return false\n    elseif (isString and currCase == 'LOWER' and string.upper(key)\
    \ == key) then\n      return false\n    end\n  end\n  return true\nend", "\tlocal\
    \ lower, upper = false, false\n\tfor key, value in pairs(dict) do\n\t\tif type(key)\
    \ == \"string\" then\n\t\t\tif lower then \n\t\t\t\tif string.upper(key) == key\
    \ then\n\t\t\t\t\tupper = true\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\t\
    end\n\t\t\telseif upper then\n\t\t\t\tif string.lower(key) == key then\n\t\t\t\
    \t\tlower = true\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\telseif\
    \ string.lower(key) == key then\n\t\t\t\tlower = true\n\t\t\telseif string.upper(key)\
    \ == key then\n\t\t\t\tupper = true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if\
    \ not next(dict) then\n        return false\n    end\n    local is_upper = not\
    \ (dict[next(dict)]:lower() == dict[next(dict)])\n    for k, v in pairs(dict)\
    \ do\n        if (not is_upper and k:upper() ~= k) or (is_upper and k:lower()\
    \ ~= k) then\n            return false\n        end\n    end\n    return true\n\
    end\nprint(check_dict_case({})) --> false\nprint(check_dict_case({a = \"ok\",\
    \ b = \"ok\"})) --> true\nprint(check_dict_case({[\"a\"] = \"ok\", [\"b\"] = \"\
    ok\"})) --> true\nprint(check_dict_case({A = \"ok\", B = \"ok\"})) --> true\n\
    print(check_dict_case({A = \"ok\", B = \"ok\", [\"C\"] = \"ok\"})) --> false\n\
    print(check_dict_case({A = \"ok\", B = \"ok\", c = \"ok\"})) --> false", "   \
    \ local lowercase, uppercase = true, true\n    for k, v in pairs(dict) do\n  \
    \      if type(k) ~= 'string' then return false end\n        if k ~= k:lower()\
    \ then lowercase = false end\n        if k ~= k:upper() then uppercase = false\
    \ end\n    end\n    return lowercase or uppercase\nend", "    if #dict == 0 then\n\
    \        return false\n    end\n    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n     \
    \       return false\n        end\n        lower = lower and k == k:lower()\n\
    \        upper = upper and k == k:upper()\n    end\n    return lower or upper\n\
    end", "    local lower_case = true\n    local upper_case = true\n    for k, v\
    \ in pairs(dict) do\n        lower_case = lower_case and string.lower(k) == k\n\
    \        upper_case = upper_case and string.upper(k) == k\n    end\n    return\
    \ lower_case or upper_case\nend\nassert(check_dict_case({})) == false\nassert(check_dict_case({a=1,\
    \ b=2})) == true\nassert(check_dict_case({A=1, B=2})) == true\nassert(check_dict_case({A=1,\
    \ B=2, c=3})) == false\nassert(check_dict_case({A=1, B=2, C=3, a=4})) == false\n\
    assert(check_dict_case({a=1, b=2, 3})) == false", end, "  -- implementation here\n\
    \  return false\nend", "\tlocal lower, upper = true, true\n\tlocal count = 0\n\
    \tfor k, v in pairs(dict) do\n\t\tif type(k) ~= \"string\" then return false end\n\
    \t\tcount = count + 1\n\t\tlocal lower = k:lower()\n\t\tlocal upper = k:upper()\n\
    \t\tif lower ~= k then lower = false end\n\t\tif upper ~= k then upper = false\
    \ end\n\tend\n\tif count == 0 then return false end\n\treturn lower or upper\n\
    end", "\t\n\treturn false\nend", "\t-- TODO: implement.\nend", "  if table.empty(dict)\
    \ then return false end\n  local all_lower, all_upper = true, true\n  for k, v\
    \ in pairs(dict) do\n    if type(k) ~= 'string' then return false end\n    if\
    \ k:match('%l') then all_upper = false end\n    if k:match('%u') then all_lower\
    \ = false end\n  end\n  return all_lower or all_upper\nend", "    if #dict ==\
    \ 0 then\n        return false\n    end\n    local keys = dict:keys()\n    local\
    \ is_lower = keys[1]:lower() == keys[1]\n    for _, key in ipairs(keys) do\n \
    \       if is_lower and key:lower() ~= key then\n            return false\n  \
    \      elseif not is_lower and key:upper() ~= key then\n            return false\n\
    \        end\n    end\n    return true\nend", "\t-- TODO:\n\t-- If dict is empty\
    \ return false\n\tif next(dict) == nil then\n\t\treturn false\n\tend\n\t-- If\
    \ dict has all strings in lower case return true\n\tif dict:all(function(v) return\
    \ v:lower() == v end) then\n\t\treturn true\n\tend\n\t-- If dict has all strings\
    \ in upper case return true\n\tif dict:all(function(v) return v:upper() == v end)\
    \ then\n\t\treturn true\n\tend\n\t-- Otherwise return false\n\treturn false\n\
    end", "end\nassert(check_dict_case({'a':1, 'b':2, 'c':3}) == true)\nassert(check_dict_case({'A':1,\
    \ 'B':2, 'C':3}) == true)\nassert(check_dict_case({'A':1, 'B':2, 'C':3, 'a':4})\
    \ == false)\nassert(check_dict_case({'a':1, 'b':2, 'c':3, 'A':4}) == false)\n\
    assert(check_dict_case({}) == false)\nassert(check_dict_case({'a':1, 'B':2, 'c':3})\
    \ == false)\nassert(check_dict_case({'A':1, 'b':2, 'C':3}) == false)", "    if\
    \ not next(dict) then\n        return false\n    end\n    local is_lower = nil\n\
    \    for k, _ in pairs(dict) do\n        if type(k) ~= 'string' then\n       \
    \     return false\n        end\n        if is_lower == nil then\n           \
    \ is_lower = k == k:lower()\n        elseif is_lower then\n            if k ~=\
    \ k:lower() then\n                return false\n            end\n        else\n\
    \            if k ~= k:upper() then\n                return false\n          \
    \  end\n        end\n    end\n    return true\nend", "    -- your code here\n\
    end", "\tlocal keys = {}\n\t\n\tfor k, v in pairs(dict) do\n\t\tkeys[#keys + 1]\
    \ = k\n\tend\n\t\n\tif #keys == 0 then return false end\n\t\n\tlocal first_char\
    \ = string.sub(keys[1], 1, 1)\n\t\n\tfor _, k in ipairs(keys) do\n\t\tif string.sub(k,\
    \ 1, 1) ~= first_char then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\n\
    end", "    local lower = 0\n    local upper = 0\n    for k, _ in pairs(dict) do\n\
    \        if type(k) == \"string\" then\n            if k == string.lower(k) then\n\
    \                lower = lower + 1\n            elseif k == string.upper(k) then\n\
    \                upper = upper + 1\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower == 0 or upper == 0\nend\nassert(check_dict_case({}) == false)\n\
    assert(check_dict_case({1,2,3}) == false)\nassert(check_dict_case({A=1, B=2, C=3})\
    \ == true)\nassert(check_dict_case({a=1, b=2, c=3}) == true)\nassert(check_dict_case({A=1,\
    \ b=2, c=3}) == false)\nassert(check_dict_case({A=1, B=2, c=3}) == false)", " \
    \   return not next(dict) or (\n        all(is_lower, keys(dict)) or all(is_upper,\
    \ keys(dict))\n    )\nend", "    if not dict then return false end\n    if dict[1]\
    \ then return false end\n    local lower_case, upper_case = true, true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then return false end\n\
    \        lower_case = lower_case and k == k:lower()\n        upper_case = upper_case\
    \ and k == k:upper()\n    end\n    return lower_case or upper_case\nend", "  \
    \  if not dict then\n        return false\n    end\n    local first_key = next(dict)\n\
    \    if not first_key then\n        return false\n    end\n    if type(first_key)\
    \ ~= \"string\" then\n        return false\n    end\n    local capitalized = first_key\
    \ == first_key:upper()\n    for k,v in pairs(dict) do\n        if type(k) ~= \"\
    string\" then\n            return false\n        end\n        if k:upper() ==\
    \ k ~= capitalized then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local lower_only = true\n    local upper_only = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if not string.match(k, \"%a+\") then\n         \
    \   return false\n        end\n        if string.lower(k) ~= k then\n        \
    \    lower_only = false\n        end\n        if string.upper(k) ~= k then\n \
    \           upper_only = false\n        end\n    end\n    return lower_only or\
    \ upper_only\nend", "    local count = {}\n    for k, v in pairs(dict) do\n  \
    \      count[type(k)] = (count[type(k)] or 0) + 1\n    end\n    for _, v in pairs(count)\
    \ do\n        if v > 1 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if (dict == nil) then return nil end\n  local has_lower\
    \ = false\n  local has_upper = false\n  for k,v in pairs(dict) do\n    if (type(k)\
    \ == \"string\") then\n      has_lower = (string.lower(k) == k)\n      has_upper\
    \ = (string.upper(k) == k)\n    end\n    if (has_lower and has_upper) then\n \
    \     return false\n    end\n  end\n  return (has_lower or has_upper)\nend", " \
    \   local lower_keys = 0\n    local upper_keys = 0\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if k == string.lower(k)\
    \ then\n                lower_keys = lower_keys + 1\n            elseif k == string.upper(k)\
    \ then\n                upper_keys = upper_keys + 1\n            end\n       \
    \ end\n    end\n    if lower_keys == 0 and upper_keys == 0 then\n        return\
    \ false\n    elseif lower_keys > 0 and upper_keys == 0 then\n        return true\n\
    \    elseif lower_keys == 0 and upper_keys > 0 then\n        return true\n   \
    \ else\n        return false\n    end\nend", "    local num_lower = 0\n    local\
    \ num_upper = 0\n    for key,_ in pairs(dict) do\n        if type(key) == \"string\"\
    \ then\n            if string.lower(key) == key then\n                num_lower\
    \ = num_lower + 1\n            elseif string.upper(key) == key then\n        \
    \        num_upper = num_upper + 1\n            end\n        end\n    end\n  \
    \  if num_lower == 0 and num_upper == 0 then\n        return false\n    elseif\
    \ num_lower == 0 and num_upper > 0 then\n        return true\n    elseif num_lower\
    \ > 0 and num_upper == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend\nassert(check_dict_case({}))\nassert(check_dict_case({a=1,B=2,c=3}))\n\
    assert(check_dict_case({A=1,B=2,C=3}))\nassert(not check_dict_case({A=1,B=2,c=3}))\n\
    assert(not check_dict_case({a=1,B=2,C=3}))", "    if dict then\n        if next(dict)\
    \ then\n            local are_all_upper = true\n            local are_all_lower\
    \ = true\n            for k, v in pairs(dict) do\n                if type(k) ~=\
    \ \"string\" then\n                    return false\n                end\n   \
    \             if k ~= k:upper() then\n                    are_all_upper = false\n\
    \                end\n                if k ~= k:lower() then\n               \
    \     are_all_lower = false\n                end\n            end\n          \
    \  return are_all_upper or are_all_lower\n        end\n    end\n    return false\n\
    end", "    if is_empty(dict) then\n        return false\n    end\n    local lower\
    \ = {}\n    local upper = {}\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == \"string\" then\n            local first_char = string.sub(k, 1, 1)\n   \
    \         if first_char == string.lower(first_char) then\n                lower[k]\
    \ = v\n            elseif first_char == string.upper(first_char) then\n      \
    \          upper[k] = v\n            else\n                return false\n    \
    \        end\n        else\n            return false\n        end\n    end\n \
    \   if not is_empty(lower) and not is_empty(upper) then\n        return false\n\
    \    end\n    return true\nend", "  if _.is_empty(dict) then return false end\n\
    \  local function check_key(k) return k:match('^%u+$') end\n  return _.is_same(_.keys(dict),\
    \ _.filter(_.keys(dict), check_key))\nend", "    local keys_type = nil\n    local\
    \ type_str_lower = 0\n    local type_str_upper = 0\n    for k,v in pairs(dict)\
    \ do\n        -- check if key is a string\n        if type(k) == \"string\" then\n\
    \            -- check if it's lower or upper case\n            if k == string.lower(k)\
    \ then\n                type_str_lower = type_str_lower + 1\n            elseif\
    \ k == string.upper(k) then\n                type_str_upper = type_str_upper +\
    \ 1\n            end\n        end\n    end\n    -- check if it's all strings (lower\
    \ or upper)\n    if type_str_lower == table.getn(dict) then\n        keys_type\
    \ = \"lower\"\n    elseif type_str_upper == table.getn(dict) then\n        keys_type\
    \ = \"upper\"\n    end\n    return keys_type\nend", "    if #dict == 0 then\n\
    \        return false\n    end\n    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        local lk = string.lower(k)\n        local\
    \ uk = string.upper(k)\n        if lk ~= k then\n            lower = false\n \
    \       end\n        if uk ~= k then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend", "    local keys = {}\n    local lower_case\
    \ = {}\n    local upper_case = {}\n    for key, value in pairs(dict) do\n    \
    \    table.insert(keys, key)\n        if type(key) == \"string\" then\n      \
    \      if key == string.lower(key) then\n                table.insert(lower_case,\
    \ key)\n            elseif key == string.upper(key) then\n                table.insert(upper_case,\
    \ key)\n            end\n        end\n    end\n    if #keys == 0 then\n      \
    \  return false\n    elseif #lower_case == #keys then\n        return true\n \
    \   elseif #upper_case == #keys then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    local empty_dict = {}\n    local all_upper = {}\n\
    \    local all_lower = {}\n    for k, v in pairs(dict) do\n        if string.match(k,\
    \ '%u+') then\n            all_upper[k] = v\n        elseif string.match(k, '%l+')\
    \ then\n            all_lower[k] = v\n        end\n    end\n    if next(dict)\
    \ == nil then\n        return false\n    elseif next(all_upper) == nil then\n\
    \        return true\n    elseif next(all_lower) == nil then\n        return true\n\
    \    else\n        return false\n    end\nend", "  if #dict > 0 then\n    local\
    \ lower, upper = true, true\n    for key, val in pairs(dict) do\n      lower =\
    \ lower and (string.lower(key) == key)\n      upper = upper and (string.upper(key)\
    \ == key)\n    end\n    return lower or upper\n  else\n    return false\n  end\n\
    end", "  -- todo\nend", "    local string_count = 0\n    local upper_count = 0\n\
    \    local lower_count = 0\n    for k, _ in pairs(dict) do\n        if type(k)\
    \ == \"string\" then\n            string_count = string_count + 1\n          \
    \  if string.upper(k) == k then\n                upper_count = upper_count + 1\n\
    \            elseif string.lower(k) == k then\n                lower_count = lower_count\
    \ + 1\n            end\n        end\n    end\n    if string_count == 0 then\n\
    \        return false\n    elseif string_count == upper_count then\n        return\
    \ true\n    elseif string_count == lower_count then\n        return true\n   \
    \ else\n        return false\n    end\nend", "\t-- If dictionary is empty return\
    \ false:\n\tif not next(dict) then\n\t\treturn false\n\tend\n\t-- Check for all\
    \ keys either being in lower or upper case:\n\tlocal key = next(dict)\n\tlocal\
    \ case = key:lower() == key and 'lower' or 'upper'\n\tfor key in pairs(dict) do\n\
    \t\tif case == 'lower' and key:lower() ~= key or\n\t\t\tcase == 'upper' and key:upper()\
    \ ~= key then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nassert(check_dict_case{})\
    \ == false\nassert(check_dict_case{a = 1, b = 2}) == true\nassert(check_dict_case{a\
    \ = 1, B = 2}) == false\nassert(check_dict_case{A = 1, B = 2}) == true\nassert(check_dict_case{['A']\
    \ = 1, ['B'] = 2}) == true", "   if len(dict) == 0 then\n      return false\n\
    \   end\n   if len(dict) == 1 then\n      return false\n   end\n   local first_key\
    \ = dict[1]\n   if first_key == nil then\n      return false\n   end\n   if type(first_key)\
    \ ~= \"string\" then\n      return false\n   end\n   local first_key_lower = string.lower(first_key)\n\
    \   local first_key_upper = string.upper(first_key)\n   for key, val in pairs(dict)\
    \ do\n      if type(key) ~= \"string\" then\n         return false\n      end\n\
    \      if key ~= first_key_lower and key ~= first_key_upper then\n         return\
    \ false\n      end\n   end\n   return true\nend", "    local upper_count = 0\n\
    \    local lower_count = 0\n    for key, value in pairs(dict) do\n        if (key\
    \ == key:upper()) then\n            upper_count = upper_count + 1\n        elseif\
    \ (key == key:lower()) then\n            lower_count = lower_count + 1\n     \
    \   end\n    end\n    if (lower_count > 0 and upper_count > 0) then\n        return\
    \ false\n    elseif (lower_count == 0 and upper_count == 0) then\n        return\
    \ false\n    else\n        return true\n    end\nend", "    if dict == nil or\
    \ _.is_empty(dict) then\n        return false\n    end\n    local keys = _.keys(dict)\n\
    \    local key_type\n    if _.all(keys, function(key) return _.is_lower(key) end)\
    \ then\n        key_type = 'lower'\n    elseif _.all(keys, function(key) return\
    \ _.is_upper(key) end) then\n        key_type = 'upper'\n    else\n        return\
    \ false\n    end\n    return _.all(keys, function(key) return _.is_type(key, key_type)\
    \ end)\nend", "    if not dict then\n        return false\n    end\n    if not\
    \ next(dict) then\n        return false\n    end\n    local is_low = nil\n   \
    \ for key, value in pairs(dict) do\n        if type(key) ~= 'string' then\n  \
    \          return false\n        end\n        if is_low == nil then\n        \
    \    is_low = key == key:lower()\n        else\n            if key == key:lower()\
    \ then\n                if not is_low then\n                    return false\n\
    \                end\n            else\n                if is_low then\n     \
    \               return false\n                end\n            end\n        end\n\
    \    end\n    return true\nend\nprint(check_dict_case({}))                   \
    \                             --> false\nprint(check_dict_case({'aaa': 1, 'bbb':\
    \ 2}))                              --> true\nprint(check_dict_case({'aaa': 1,\
    \ 'BBB': 2}))                              --> true\nprint(check_dict_case({'Aaa':\
    \ 1, 'bbb': 2}))                              --> false\nprint(check_dict_case({'AAA':\
    \ 1, 'BBB': 2}))                              --> true\nprint(check_dict_case({'aaa':\
    \ 1, 'bbb': 2, 'ccc': 3}))                    --> true\nprint(check_dict_case({'aaa':\
    \ 1, 'BBB': 2, 'ccc': 3}))                    --> false\nprint(check_dict_case({'AAA':\
    \ 1, 'BBB': 2, 'CCC': 3}))                    --> true\nprint(check_dict_case({'aaa':\
    \ 1, 'bbb': 2, 'ccc': 3, 'ddd': 4}))          --> true\nprint(check_dict_case({'aaa':\
    \ 1, 'BBB': 2, 'ccc': 3, 'DDD': 4}))          --> false\nprint(check_dict_case({'AAA':\
    \ 1, 'BBB': 2, 'CCC': 3, 'DDD': 4}))          --> true\nprint(check_dict_case({'aaa':\
    \ 1, 'bbb': 2, 'CCC': 3, 'DDD': 4}))          --> false\nprint(check_dict_case({'aaa':\
    \ 1,", "\tlocal curr_key_case\n\tlocal count_key_case = 0\n\t\n\tif dict == nil\
    \ or dict == {} then\n\t\treturn false\n\tend\n\t\n\tfor k,v in pairs(dict) do\n\
    \t\tif string.lower(k) == k then\n\t\t\tcurr_key_case = 'lower'\n\t\telseif string.upper(k)\
    \ == k then\n\t\t\tcurr_key_case = 'upper'\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\t\t\n\t\tif curr_key_case == 'lower' then\n\t\t\tcount_key_case = count_key_case\
    \ + 1\n\t\tend\n\tend\n\t\n\tif count_key_case == #dict then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "    local lower, upper = true, true\n\
    \    for key, _ in pairs(dict) do\n        if type(key) ~= 'string' then\n   \
    \         return false\n        end\n        lower = lower and key == string.lower(key)\n\
    \        upper = upper and key == string.upper(key)\n    end\n    return lower\
    \ or upper\nend", "  local up = false\n  local low = false\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == \"string\" then\n      if string.upper(k) == k then\n\
    \        up = true\n      elseif string.lower(k) == k then\n        low = true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  end\n  return up and low == false or up == false and low\nend", " \
    \   local a, b = {}, {}\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match(\"%u\") then\n                a[k] = v\n\
    \            else\n                b[k] = v\n            end\n        else\n \
    \           return false\n        end\n    end\n    if #a == 0 or #b == 0 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  -- check\
    \ number of keys in the dictionary\n  local num_keys = 0\n  for k, v in pairs(dict)\
    \ do\n    num_keys = num_keys + 1\n  end\n  if num_keys == 0 then\n    return\
    \ false\n  end\n  -- check key case\n  local case_lower = nil\n  for k, v in pairs(dict)\
    \ do\n    if case_lower == nil then\n      if type(k) == \"string\" then\n   \
    \     case_lower = string.lower(k) == k\n      else\n        return false\n  \
    \    end\n    else\n      if type(k) == \"string\" then\n        if case_lower\
    \ then\n          if string.lower(k) ~= k then\n            return false\n   \
    \       end\n        else\n          if string.upper(k) ~= k then\n          \
    \  return false\n          end\n        end\n      else\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "    local empty = true\n   \
    \ local all_lower = false\n    local all_upper = false\n    local all_string =\
    \ true\n    for k,v in pairs(dict) do\n        if all_string then\n          \
    \  all_string = type(k) == \"string\"\n        end\n        if empty then\n  \
    \          empty = false\n        end\n        if not all_lower then\n       \
    \     all_lower = k == string.lower(k)\n        end\n        if not all_upper\
    \ then\n            all_upper = k == string.upper(k)\n        end\n    end\n \
    \   return empty and false or (all_lower or all_upper) and all_string\nend", "\t\
    local lower = 0\n\tlocal upper = 0\n\tfor k, v in pairs(dict) do\n\t\tlower =\
    \ lower + 1\n\t\tupper = upper + 1\n\tend\n\treturn (lower == #dict) or (upper\
    \ == #dict)\nend", "    local has_lower, has_upper = false, false\n    for k,\
    \ v in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                has_lower = true\n            elseif string.upper(k)\
    \ == k then\n                has_upper = true\n            else\n            \
    \    return false\n            end\n        else\n            return false\n \
    \       end\n    end\n    return not (has_lower and has_upper)\nend", "    local\
    \ flag, res = true, false\n    for k, _ in pairs(dict) do\n        if type(k)\
    \ ~= 'string' then\n            return false\n        end\n        if flag then\n\
    \            flag = false\n            res = (k == k:lower())\n        end\n \
    \       if res ~= (k == k:lower()) then\n            return false\n        end\n\
    \    end\n    return true\nend\nassert(check_dict_case({'a':1, 'b':2}) == true)\n\
    assert(check_dict_case({'A':1, 'B':2}) == true)\nassert(check_dict_case({'a':1,\
    \ 'b':2, 'A':3}) == false)\nassert(check_dict_case({'a':1, 'b':2, 3:4}) == false)\n\
    assert(check_dict_case({}) == false)", "   -- your code here\n   -- print (dict)\n\
    \   if table.empty(dict) then\n      return false\n   end\n   local is_lower =\
    \ false\n   local is_upper = false\n   for k,v in pairs(dict) do\n      if string.lower(k)\
    \ == k then\n         is_lower = true\n      elseif string.upper(k) == k then\n\
    \         is_upper = true\n      else\n         return false\n      end\n   end\n\
    \   return is_lower or is_upper\nend", "    -- your code goes here\nend", "  \
    \  if not dict then return false end\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\
    \ return false end\n        if string.lower(k) ~= k then lower = false end\n \
    \       if string.upper(k) ~= k then upper = false end\n    end\n    return lower\
    \ or upper\nend", "\tif type(dict) ~= \"table\" then\n\t\treturn false\n\tend\n\
    \tlocal lower = false\n\tlocal upper = false\n\tfor key, value in pairs(dict)\
    \ do\n\t\tif type(key) ~= \"string\" then\n\t\t\treturn false\n\t\tend\n\t\tif\
    \ string.match(key, \"[a-z]\") then\n\t\t\tlower = true\n\t\telseif string.match(key,\
    \ \"[A-Z]\") then\n\t\t\tupper = true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn lower and not upper or upper and not lower\nend", "  if not next(dict)\
    \ then return false end\n  local is_upper = nil\n  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' then return false end\n    if is_upper == nil then\n\
    \      is_upper = (k == k:upper())\n    else\n      if (k == k:upper()) ~= is_upper\
    \ then return false end\n    end\n  end\n  return true\nend", "\tif dict then\n\
    \t\tif next(dict) == nil then\n\t\t\treturn false\n\t\tend\n\t\tfor k, v in pairs(dict)\
    \ do\n\t\t\tif type(k) ~= \"string\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \t\tif k:find(\"%u\") and k:find(\"%l\") then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\treturn false\nend", "    -- TODO: implement\
    \ the function\n    local lower = true\n    local upper = true\n    for i, v in\
    \ pairs(dict) do\n        if type(i) ~= \"string\" then\n            return false\n\
    \        end\n        if not is_string_lower(i) then\n            lower = false\n\
    \        end\n        if not is_string_upper(i) then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend", "    local lower = 0\n\
    \    local upper = 0\n    for k, v in pairs(dict) do\n        if k:lower() ==\
    \ k then\n            lower = lower + 1\n        elseif k:upper() == k then\n\
    \            upper = upper + 1\n        else\n            return false\n     \
    \   end\n    end\n    return lower * upper == 0\nend", "    local has_upper =\
    \ false\n    local has_lower = false\n    for k, v in pairs(dict) do\n       \
    \ if type(k) == \"string\" then\n            if k:match(\"%u\") then\n       \
    \         has_upper = true\n            else\n                has_lower = true\n\
    \            end\n        end\n    end\n    return not (has_upper and has_lower)\n\
    end", "   local lower_case = false\n   local upper_case = false\n   for k, v in\
    \ pairs(dict) do\n      local lc_k = string.lower(k)\n      local uc_k = string.upper(k)\n\
    \      if k == lc_k then lower_case = true\n      elseif k == uc_k then upper_case\
    \ = true\n      else return false end\n   end\n   return lower_case or upper_case\n\
    end\nassert(check_dict_case({'A': 123, 'B': 234, 'C': 345}) == true)\nassert(check_dict_case({'a':\
    \ 123, 'b': 234, 'c': 345}) == true)\nassert(check_dict_case({'A': 123, 'b': 234,\
    \ 'c': 345}) == false)\nassert(check_dict_case({}) == false)\nassert(check_dict_case({'a':\
    \ 123, 'B': 234, 'c': 345}) == false)", "    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if (type(k) ~= \"string\") then\
    \ return false end\n        if (lower and string.upper(k) ~= k) then\n       \
    \     lower = false\n        end\n        if (upper and string.lower(k) ~= k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end", "\tif #dict == 0 then\n\t\treturn false\n\tend\n\tlocal keyType = type(dict[1][1])\n\
    \tif keyType ~= \"string\" then\n\t\treturn false\n\tend\n\tlocal upperCase =\
    \ dict[1][1] == string.upper(dict[1][1])\n\tfor k, v in pairs(dict) do\n\t\tif\
    \ type(k) ~= keyType or (upperCase and k ~= string.upper(k)) or \n\t\t\t(not upperCase\
    \ and k ~= string.lower(k)) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend\nassert(check_dict_case({}))\nassert(check_dict_case({{ONE = 1}}))\n\
    assert(check_dict_case({{\"one\", 1}}))\nassert(not check_dict_case({{ONE = 1},\
    \ {\"one\", 1}}))\nassert(not check_dict_case({{ONE = 1}, {two = 2}}))\nassert(not\
    \ check_dict_case({{one = 1}, {TWO = 2}}))\nassert(not check_dict_case({{ONE =\
    \ 1}, {TWO = 2}}))", "    local lower, upper = 0, 0\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if k == string.lower(k)\
    \ then\n                lower = lower + 1\n            elseif k == string.upper(k)\
    \ then\n                upper = upper + 1\n            end\n        end\n    end\n\
    \    if lower == #dict or upper == #dict then\n        return true\n    else\n\
    \        return false\n    end\nend", "\tif #dict == 0 then\n\t\treturn false\n\
    \tend\n\tlocal check_lower = nil\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ ~= \"string\" then\n\t\t\treturn false\n\t\tend\n\t\tif check_lower == nil then\n\
    \t\t\tcheck_lower = string.lower(k) == k\n\t\telseif check_lower and string.lower(k)\
    \ ~= k then\n\t\t\treturn false\n\t\telseif (not check_lower) and string.upper(k)\
    \ ~= k then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nassert(check_dict_case({})\
    \ == false)\nassert(check_dict_case({}) == false)\nassert(check_dict_case({[\"\
    a\"] = 1, [\"b\"] = 2}) == true)\nassert(check_dict_case({[\"a\"] = 1, [\"b\"\
    ] = 2, [\"c\"] = 3}) == true)\nassert(check_dict_case({[\"A\"] = 1, [\"B\"] =\
    \ 2, [\"C\"] = 3}) == true)\nassert(check_dict_case({[\"A\"] = 1, [\"B\"] = 2,\
    \ [\"C\"] = 3, [\"D\"] = 4}) == true)\nassert(check_dict_case({[\"a\"] = 1, [\"\
    B\"] = 2, [\"C\"] = 3, [\"D\"] = 4}) == false)\nassert(check_dict_case({[\"A\"\
    ] = 1, [\"b\"] = 2, [\"C\"] = 3, [\"D\"] = 4}) == false)\nassert(check_dict_case({[\"\
    A\"] = 1, [\"B\"] = 2, [\"c\"] = 3, [\"D\"] = 4}) == false)\nassert(check_dict_case({[\"\
    A\"] = 1, [\"B\"] = 2, [\"C\"] = 3, [\"d\"] = 4}) == false)\nassert(check_dict_case({[1]\
    \ = 1, [2] = 2, [3] = 3, [4] = 4}) == false)\nassert(check_dict_case({[\"a\"]\
    \ = 1, [\"b\"] = 2, [3] = 3, [4] = 4}) ==", "    -- your code here\nend\nprint(check_dict_case({\
    \ a = 1, B = 2, c = 3 }))\nprint(check_dict_case({ a = 1, b = 2, c = 3 }))\nprint(check_dict_case({\
    \ A = 1, B = 2, C = 3 }))", "    if #dict == 0 then return false end\n    local\
    \ key = next(dict)\n    local in_upper = string.upper(key) == key\n    for k,\
    \ _ in pairs(dict) do\n        if (in_upper and string.upper(k) ~= k)\n      \
    \      or (not in_upper and string.lower(k) ~= k) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- Your code here\n    return\
    \ true\nend\nassert(check_dict_case({'a':1, 'b':2, 'c':3}) == true)\nassert(check_dict_case({'a':1,\
    \ 'B':2, 'c':3}) == false)\nassert(check_dict_case({'A':1, 'B':2, 'C':3}) == true)\n\
    assert(check_dict_case({}) == false)", "    if #dict == 0 then\n        return\
    \ false\n    end\n    local is_upper = false\n    local is_lower = false\n   \
    \ for k, v in pairs(dict) do\n        if k:isupper() then\n            is_upper\
    \ = true\n        elseif k:islower() then\n            is_lower = true\n     \
    \   else\n            return false\n        end\n    end\n    return is_upper\
    \ or is_lower\nend\nprint(check_dict_case({})) -- false\nprint(check_dict_case({1:\
    \ 'one', 2: 'two'})) -- false\nprint(check_dict_case({'ONE': 1, 'TWO': 2})) --\
    \ true\nprint(check_dict_case({'one': 1, 'two': 2})) -- true\nprint(check_dict_case({'one':\
    \ 1, 'two': 2, 1: 'one'})) -- false", "    if dict_empty(dict) then\n        return\
    \ false\n    end\n    local c = 0\n    for k, _ in pairs(dict) do\n        local\
    \ str = tostring(k)\n        if str ~= str:lower() and str ~= str:upper() then\n\
    \            return false\n        end\n        c = c + 1\n    end\n    if c <\
    \ 2 then\n        return false\n    end\n    return true\nend", "    if #dict\
    \ == 0 then return false end\n    local has_lower = false\n    local has_upper\
    \ = false\n    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then\
    \ return false end\n        if k == k:lower() then has_lower = true end\n    \
    \    if k == k:upper() then has_upper = true end\n    end\n    return has_lower\
    \ and not has_upper or has_upper and not has_lower\nend", "  local lower = true\n\
    \  local upper = true\n  local function helper(dict)\n    for k, v in pairs(dict)\
    \ do\n      if type(k) == \"string\" then\n        if k:lower() ~= k then\n  \
    \        lower = false\n        end\n        if k:upper() ~= k then\n        \
    \  upper = false\n        end\n      else\n        return nil\n      end\n   \
    \   if type(v) == \"table\" then\n        helper(v)\n      end\n    end\n  end\n\
    \  helper(dict)\n  if lower or upper then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  local t = {}\n  for k, v in pairs(dict) do\n    if t[type(k)]\
    \ == nil then\n      t[type(k)] = k\n    elseif k:upper() ~= t[type(k)]:upper()\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    return true\n\
    end", "    local all_upper = true\n    local all_lower = true\n    for k, v in\
    \ pairs(dict) do\n        if not string.find(k, \"^%l+$\") then\n            all_lower\
    \ = false\n        end\n        if not string.find(k, \"^%u+$\") then\n      \
    \      all_upper = false\n        end\n    end\n    return all_upper or all_lower\n\
    end\nprint(check_dict_case( { ['A'] = 1, ['B'] = 2 } )) -- True\nprint(check_dict_case(\
    \ { ['a'] = 1, ['b'] = 2 } )) -- True\nprint(check_dict_case( { ['A'] = 1, ['B']\
    \ = 2, ['C'] = 3 } )) -- True\nprint(check_dict_case( { ['a'] = 1, ['b'] = 2,\
    \ ['c'] = 3 } )) -- True\nprint(check_dict_case( { ['A'] = 1, ['b'] = 2 } )) --\
    \ False\nprint(check_dict_case( { ['a'] = 1, ['B'] = 2 } )) -- False\nprint(check_dict_case(\
    \ { ['A'] = 1, ['B'] = 2, ['C'] = 3, ['d'] = 4 } )) -- False\nprint(check_dict_case(\
    \ { ['a'] = 1, ['B'] = 2, ['c'] = 3, ['D'] = 4 } )) -- False\nprint(check_dict_case(\
    \ { } )) -- False", "  local low = true\n  local high = true\n  for k,v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then\n      return false\n    end\n    if k\
    \ ~= k:lower() then\n      low = false\n    end\n    if k ~= k:upper() then\n\
    \      high = false\n    end\n  end\n  return low or high\nend", "  -- your code\
    \ here\n  return nil\nend", "    local keys = {}\n    local values = {}\n    for\
    \ k, v in pairs(dict) do\n        keys[#keys + 1] = k\n        values[#values\
    \ + 1] = v\n    end\n    local lower = 0\n    local upper = 0\n    for i = 1,\
    \ #keys do\n        local key = keys[i]\n        if key:lower() == key then\n\
    \            lower = lower + 1\n        elseif key:upper() == key then\n     \
    \       upper = upper + 1\n        end\n    end\n    return lower == #keys or\
    \ upper == #keys\nend\ncheck_dict_case({}) ", "  -- your code goes here\nend",
  "    local upper_case = false\n    local lower_case = false\n    for k,v in pairs(dict)\
    \ do\n        upper_case = upper_case or k:match(\"^%u+$\")\n        lower_case\
    \ = lower_case or k:match(\"^%l+$\")\n    end\n    return (upper_case and not\
    \ lower_case) or (lower_case and not upper_case)\nend", "\t-- get list of keys\n\
    \tlocal keys = table.keys(dict)\n\t\n\t-- if there are no keys, return false\n\
    \tif #keys == 0 then\n\t\treturn false\n\tend\n\t\n\t-- get first key\n\tlocal\
    \ key0 = keys[1]\n\t\n\t-- check if lower case\n\tlocal is_lower = key0:lower()\
    \ == key0\n\t\n\t-- check other keys\n\tfor i = 2, #keys do\n\t\tlocal key = keys[i]\n\
    \t\tif is_lower then\n\t\t\tif key:lower() ~= key then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\telse\n\t\t\tif key:upper() ~= key then\n\t\t\t\treturn false\n\t\
    \t\tend\n\t\tend\n\tend\n\t\n\t-- all keys are of consistent case\n\treturn true\n\
    end", "  -- your code goes here\nend", "  local key_case = nil\n  for k, _ in\
    \ pairs(dict) do\n    if type(k) ~= \"string\" then\n      return false\n    end\n\
    \    if not key_case then\n      key_case = k == k:lower()\n    elseif key_case\
    \ ~= (k == k:lower()) then\n      return false\n    end\n  end\n  return true\n\
    end", "    -- Your code here\nend", "  local lower = false\n  local upper = false\n\
    \  for k, v in pairs(dict) do\n    lower = lower or (type(k) == \"string\" and\
    \ k == k:lower())\n    upper = upper or (type(k) == \"string\" and k == k:upper())\n\
    \  end\n  return lower or upper\nend", "  -- write your solution here\n  local\
    \ low, up = 0, 0\n  for k, v in pairs(dict) do\n    if type(k) == \"string\" then\n\
    \      if string.lower(k) == k then\n        low = low + 1\n      elseif string.upper(k)\
    \ == k then\n        up = up + 1\n      end\n    end\n  end\n  if low > 0 and\
    \ up > 0 then\n    return false\n  elseif low == 0 and up == 0 then\n    return\
    \ false\n  else\n    return true\n  end\nend", "  -- YOUR CODE HERE\n  assert(type(dict)\
    \ == \"table\")\n  local counter = 0\n  local flag = nil\n  for key, value in\
    \ pairs(dict) do\n    if type(key) == \"string\" then\n      if string.match(key,\
    \ \"%l\") then\n        flag = \"lower\"\n      elseif string.match(key, \"%u\"\
    ) then\n        flag = \"upper\"\n      end\n      counter = counter + 1\n   \
    \ end\n  end\n  if counter == 0 then\n    return false\n  elseif counter == 1\
    \ then\n    return true\n  else\n    if flag == \"lower\" then\n      for key,\
    \ value in pairs(dict) do\n        if type(key) == \"string\" then\n         \
    \ if string.match(key, \"%u\") then\n            return false\n          end\n\
    \        end\n      end\n    elseif flag == \"upper\" then\n      for key, value\
    \ in pairs(dict) do\n        if type(key) == \"string\" then\n          if string.match(key,\
    \ \"%l\") then\n            return false\n          end\n        end\n      end\n\
    \    end\n  end\n  return true\nend", "  if #dict == 0 then\n    return false\n\
    \  end\n  local lower, upper = true, true\n  for k,v in pairs(dict) do\n    if\
    \ type(k) ~= 'string' then\n      return false\n    end\n    if k:lower() ~= k\
    \ then\n      lower = false\n    end\n    if k:upper() ~= k then\n      upper\
    \ = false\n    end\n  end\n  return lower or upper\nend", "    -- ...\nend", " \
    \   local upper = {}\n    local lower = {}\n    for k, v in pairs(dict) do\n \
    \       table.insert(upper, k:upper())\n        table.insert(lower, k:lower())\n\
    \    end\n    return dict_values_equals(dict, upper) or dict_values_equals(dict,\
    \ lower)\nend", "    local lower_case_flag = nil\n    local upper_case_flag =\
    \ nil\n    for k, v in pairs(dict) do\n        local n = string.find(k, \"%u\"\
    )\n        if n == nil then\n            lower_case_flag = true\n        else\n\
    \            upper_case_flag = true\n        end\n    end\n    if (lower_case_flag\
    \ and upper_case_flag) then\n        return false\n    else\n        return true\n\
    \    end\nend\nprint(check_dict_case({'a':1, 'b':2}))\nprint(check_dict_case({'A':1,\
    \ 'B':2}))\nprint(check_dict_case({'A':1, 'B':2, 'c':3}))\nprint(check_dict_case({}))",
  "    -- Write your code here\nend", "    local lowerCaseKeys, upperCaseKeys = true,\
    \ true\n    for key,_ in pairs(dict) do\n        lowerCaseKeys = lowerCaseKeys\
    \ and type(key) == \"string\" and key == string.lower(key)\n        upperCaseKeys\
    \ = upperCaseKeys and type(key) == \"string\" and key == string.upper(key)\n \
    \   end\n    return lowerCaseKeys or upperCaseKeys\nend", "\tif #dict == 0 then\
    \ return false end\n\tlocal key, v\n\t-- all lower case\n\tfor key, v in pairs(dict)\
    \ do\n\t\tif not string.find(key, \"^%l+$\") then return false end\n\tend\n\t\
    -- all upper case\n\tfor key, v in pairs(dict) do\n\t\tif not string.find(key,\
    \ \"^%u+$\") then return false end\n\tend\n\treturn true\nend", "    local count_lower,\
    \ count_upper = 0, 0\n    for k, _ in pairs(dict) do\n        if type(k) == \"\
    string\" then\n            if k == string.lower(k) then\n                count_lower\
    \ = count_lower + 1\n            elseif k == string.upper(k) then\n          \
    \      count_upper = count_upper + 1\n            end\n        end\n    end\n\
    \    if count_lower == 0 and count_upper == 0 then\n        return false\n   \
    \ elseif count_lower > 0 and count_upper == 0 then\n        return true\n    elseif\
    \ count_lower == 0 and count_upper > 0 then\n        return true\n    else\n \
    \       return false\n    end\nend\nassert(check_dict_case({\"a\":1, \"b\":2,\
    \ \"c\":3}) == true)\nassert(check_dict_case({\"A\":1, \"B\":2, \"C\":3}) == true)\n\
    assert(check_dict_case({\"a\":1, \"b\":2, \"C\":3}) == false)\nassert(check_dict_case({\"\
    A\":1, \"b\":2, \"C\":3}) == false)\nassert(check_dict_case({}) == false)\nassert(check_dict_case({\"\
    3\":1, 2:2, \"c\":3}) == false)\nassert(check_dict_case({\"1\":1, \"2\":2, \"\
    3\":3}) == false)", "  local lower = 0\n  local upper = 0\n  local key_case =\
    \ string.lower(\"Hello\")", "  local has_lower = false\n  local has_upper = false\n\
    \  for key, _ in pairs(dict) do\n    local case = key:sub(1, 1)\n    if case ==\
    \ case:lower() then\n      has_lower = true\n    elseif case == case:upper() then\n\
    \      has_upper = true\n    else\n      return false\n    end\n  end\n  return\
    \ has_lower and has_upper\nend", "    -- Your code goes here.\nend\nprint(\"check_dict_case({'a':1,\
    \ 'b':2})\")\nprint(check_dict_case({'a':1, 'b':2}))\nprint(\"check_dict_case({'A':1,\
    \ 'B':2})\")\nprint(check_dict_case({'A':1, 'B':2}))\nprint(\"check_dict_case({'a':1,\
    \ 'B':2})\")\nprint(check_dict_case({'a':1, 'B':2}))\nprint(\"check_dict_case({'a':1,\
    \ 'b':2, 'A':3})\")\nprint(check_dict_case({'a':1, 'b':2, 'A':3}))\nprint(\"check_dict_case({})\"\
    )\nprint(check_dict_case({}))", "    -- YOUR CODE HERE\n\tlocal keys = {}\n\t\
    local counter = 0\n\t\n\tif (dict ~= nil) then\n\t\tfor key, value in pairs(dict)\
    \ do\n\t\t\ttable.insert(keys, key)\n\t\t\tcounter = counter + 1\n\t\tend\n\t\t\
    \n\t\tif (counter == 0) then\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tif (keys[1]\
    \ == string.lower(keys[1])) then\n\t\t\tfor i, v in ipairs(keys) do\n\t\t\t\t\
    if (keys[i] ~= string.lower(keys[i])) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\
    \t\t\tend\n\t\telse\n\t\t\tfor i, v in ipairs(keys) do\n\t\t\t\tif (keys[i] ~=\
    \ string.upper(keys[i])) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\treturn true\nend", "  -- Your solution goes here.\nend",
  "    -- check if the dictionary is empty\n    if next(dict) == nil then return false\
    \ end\n    -- to keep track of whether keys are all in lower case\n    local lower_case\
    \ = false\n    -- to keep track of whether keys are all in upper case\n    local\
    \ upper_case = false\n    -- iterate through each key of the dictionary\n    for\
    \ key, value in pairs(dict) do\n        -- check if the key is in lower case\n\
    \        if key:lower() == key then\n            -- if so, set lower_case to true\n\
    \            lower_case = true\n        end\n        -- check if the key is in\
    \ upper case\n        if key:upper() == key then\n            -- if so, set upper_case\
    \ to true\n            upper_case = true\n        end\n    end\n    -- return\
    \ the result\n    return lower_case or upper_case\nend", "\t-- your code here\n\
    end", "   -- Given a table, return True if all keys are strings in lower \n  \
    \ -- case or all keys are strings in upper case, else return False.\n   -- The\
    \ function should return False is the given table is empty.\n   -- Examples:\n\
    \   if not dict then return false end -- if no table return false\n   local lower,\
    \ upper = true, true\n   for key, value in pairs(dict) do\n      lower = lower\
    \ and type(key) == \"string\" and string.lower(key) == key\n      upper = upper\
    \ and type(key) == \"string\" and string.upper(key) == key\n   end\n   return\
    \ lower or upper\nend", "    if next(dict) == nil then\n        return false\n\
    \    end\n    local is_upper = false\n    local is_lower = false\n    for k, _\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.upper(k)\
    \ == k then\n                is_upper = true\n            elseif string.lower(k)\
    \ == k then\n                is_lower = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_upper or is_lower\nend", "    -- dict: table,\
    \ a dictionary\n    local case = nil\n    for k,v in pairs(dict) do\n        if\
    \ type(k) == \"string\" then\n            if case == nil then\n              \
    \  if k == k:lower() then\n                    case = \"lower\"\n            \
    \    elseif k == k:upper() then\n                    case = \"upper\"\n      \
    \          else\n                    return false\n                end\n     \
    \       else\n                if k == k:lower() and case == \"upper\" then\n \
    \                   return false\n                elseif k == k:upper() and case\
    \ == \"lower\" then\n                    return false\n                end\n \
    \           end\n        else\n            return false\n        end\n    end\n\
    \    return true\nend", "   if #dict == 0 then return false end\n   local is_lower\
    \ = false\n   local is_upper = false\n   for k,v in pairs(dict) do\n      if type(k)\
    \ == \"string\" then\n         is_lower = is_lower or k:lower() == k\n       \
    \  is_upper = is_upper or k:upper() == k\n      else\n         return false\n\
    \      end\n   end\n   return is_lower or is_upper\nend\nassert(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nassert(check_dict_case({A = 'a', B = 'b'}))\nassert(not check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nassert(not check_dict_case({A = 'a', b = 'b'}))\nassert(not\
    \ check_dict_case({A = 'a', 'b': 'b'}))\nassert(not check_dict_case({}))\nassert(not\
    \ check_dict_case({'a': 'a', 'b': 'b', c = 'c'}))", "    -- no dictionary given\n\
    \    if not dict then return false end\n    local count = 0\n    -- iterate over\
    \ the keys\n    for k,v in pairs(dict) do\n        -- if the key is not a string,\
    \ then return false\n        if type(k) ~= \"string\" then return false end\n\
    \        -- check if the key is in lower case\n        if k == string.lower(k)\
    \ then\n            count = count + 1\n        else\n            count = count\
    \ - 1\n        end\n    end\n    -- return true only if all keys are in lower\
    \ case or all keys are in upper case\n    return count == 0 or count == #dict\n\
    end", "  if #dict == 0 then\n    return false\n  end\n  local is_upper_case =\
    \ nil\n  for k,v in pairs(dict) do\n    if is_upper_case == nil then\n      if\
    \ string.match(k, '^%u+$') then\n        is_upper_case = true\n      elseif string.match(k,\
    \ '^%l+$') then\n        is_upper_case = false\n      else\n        return false\n\
    \      end\n    else\n      if is_upper_case and not string.match(k, '^%u+$')\
    \ then\n        return false\n      elseif not is_upper_case and not string.match(k,\
    \ '^%l+$') then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "\tlocal all_upper = true\n\tlocal all_lower = true\n\tfor k,v in pairs(dict)\
    \ do\n\t\tif not string.match(k, '^%u+$') then\n\t\t\tall_upper = false\n\t\t\
    end\n\t\tif not string.match(k, '^%l+$') then\n\t\t\tall_lower = false\n\t\tend\n\
    \tend\n\treturn all_upper or all_lower\nend", "    -- code here\nend", "    --\
    \ your code here\nend\nassert(check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3})\
    \ == true)\nassert(check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == true)\n\
    assert(check_dict_case({\"A\": 1, \"b\": 2, \"C\": 3}) == false)\nassert(check_dict_case({\"\
    a\": 1, \"B\": 2, \"c\": 3}) == false)\nassert(check_dict_case({}) == false)",
  "  if table.empty(dict) then return false end\n  local lower = true\n  local upper\
    \ = true\n  for k, _ in pairs(dict) do\n    lower = lower and (type(k) == 'string'\
    \ and k == k:lower())\n    upper = upper and (type(k) == 'string' and k == k:upper())\n\
    \  end\n  return lower or upper\nend", "    local case = nil\n    for k,v in pairs(dict)\
    \ do\n        local type = get_type(k)\n        if type ~= 'string' then return\
    \ false end\n        local upper = k:upper() == k\n        local lower = k:lower()\
    \ == k\n        if case == nil then\n            case = upper or lower\n     \
    \   else\n            if case ~= (upper or lower) then return false end\n    \
    \    end\n    end\n    return case\nend\nassert(check_dict_case({}) == false)\n\
    assert(check_dict_case({}) == false)\nassert(check_dict_case({'A'}) == true)\n\
    assert(check_dict_case({A=1}) == true)\nassert(check_dict_case({'a'}) == true)\n\
    assert(check_dict_case({a=1}) == true)\nassert(check_dict_case({'a','b'}) == true)\n\
    assert(check_dict_case({a=1,b=2}) == true)\nassert(check_dict_case({'a','B'})\
    \ == false)\nassert(check_dict_case({a=1,B=2}) == false)\nassert(check_dict_case({'a',b=2})\
    \ == false)\nassert(check_dict_case({a=1,'b'}) == false)\nassert(check_dict_case({'a','B',c=3})\
    \ == false)\nassert(check_dict_case({a=1,B=2,c=3}) == false)\nassert(check_dict_case({'a','B',c=3})\
    \ == false)\nassert(check_dict_case({a=1,B=2,'c'}) == false)\nassert(check_dict_case({['A']=1,['B']=2})\
    \ == true)\nassert(check_dict_case({['a']=1,['b']=2}) == true)\nassert(check_dict_case({['A']=1,['b']=2})\
    \ == false)\nassert(check_dict_case({['a']=1,['B']=2}) == false)", "  local lower\
    \ = true\n  local upper = true\n  for k,v in pairs(dict) do\n    if type(k) ~=\
    \ \"string\" then return false end\n    if not lower and not upper then return\
    \ false end\n    if lower and upper then\n      if k:lower() == k then\n     \
    \   lower = true\n        upper = false\n      elseif k:upper() == k then\n  \
    \      lower = false\n        upper = true\n      else\n        return false\n\
    \      end\n    elseif lower then\n      if k:lower() ~= k then return false end\n\
    \    else\n      if k:upper() ~= k then return false end\n    end\n  end\n  return\
    \ lower or upper\nend", "  return nil\nend", "  if #dict == 0 then return false\
    \ end\n  local lowercase = true\n  local uppercase = true\n  for key, value in\
    \ pairs(dict) do\n    lowercase = lowercase and type(key) == 'string' and key\
    \ == string.lower(key)\n    uppercase = uppercase and type(key) == 'string' and\
    \ key == string.upper(key)\n  end\n  return lowercase or uppercase\nend", "  \
    \  local all_upper, all_lower = true, true\n    for k, v in pairs(dict) do\n \
    \       if type(k) ~= 'string' then return false end\n        if k:match('^%l')\
    \ then all_upper = false end\n        if k:match('^%u') then all_lower = false\
    \ end\n    end\n    return not (all_upper and all_lower)\nend", "\t-- your code\
    \ here\n\tlocal keys = {}\n\tfor k,v in pairs(dict) do\n\t\ttable.insert(keys,\
    \ k)\n\tend\n\t\n\tlocal iflowcase = true\n\tlocal ifupcase = true\n\tfor i =\
    \ 1, #keys do\n\t\tiflowcase = iflowcase and (string.lower(keys[i]) == keys[i])\n\
    \t\tifupcase = ifupcase and (string.upper(keys[i]) == keys[i])\n\tend\n\treturn\
    \ iflowcase or ifupcase\nend", '    if next(dict) == nil then return false end',
  "    if not dict then\n        return false\n    end\n    if not next(dict) then\n\
    \        return false\n    end\n    local is_upper = nil\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if not is_upper then\n            is_upper = (k == k:upper())\n     \
    \   end\n        if is_upper ~= (k == k:upper()) then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tif type(dict) ~= \"table\" then\n\
    \t\treturn false\n\tend\n\t\n\tlocal lower = nil\n\tfor k, v in pairs(dict) do\n\
    \t\tif type(k) ~= \"string\" then\n\t\t\treturn false\n\t\tend\n\t\tif lower ==\
    \ nil then\n\t\t\tlower = k == k:lower()\n\t\tend\n\t\tif lower ~= (k == k:lower())\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tif next(dict)\
    \ == nil then\n\t\treturn false\n\tend\n\tlocal keys = {}\n\tfor k, _ in pairs(dict)\
    \ do\n\t\ttable.insert(keys, k)\n\tend\n\tif type(keys[1]) ~= \"string\" then\n\
    \t\treturn false\n\tend\n\tlocal lower = keys[1] == string.lower(keys[1])\n\t\
    for _, key in ipairs(keys) do\n\t\tif lower ~= (key == string.lower(key)) then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t-- If dict is empty,\
    \ return false.\n\tif next(dict) == nil then\n\t\treturn false\n\tend\n\t\n\t\
    -- If the keys are all upper case, return true.\n\tlocal all_upper = true\n\t\
    for k, v in pairs(dict) do\n\t\tif string.lower(k) ~= k then\n\t\t\tall_upper\
    \ = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif all_upper then\n\t\treturn true\n\
    \tend\n\t\n\t-- If the keys are all lower case, return true.\n\tlocal all_lower\
    \ = true\n\tfor k, v in pairs(dict) do\n\t\tif string.upper(k) ~= k then\n\t\t\
    \tall_lower = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif all_lower then\n\t\treturn\
    \ true\n\tend\n\t\n\t-- Else return false.\n\treturn false\nend", "\tlocal cnt_upper,\
    \ cnt_lower = 0, 0\n\tfor k, _ in pairs(dict) do\n\t\tif type(k) == \"string\"\
    \ then\n\t\t\tif k:match(\"^%u+$\") then\n\t\t\t\tcnt_upper = cnt_upper + 1\n\t\
    \t\telseif k:match(\"^%l+$\") then\n\t\t\t\tcnt_lower = cnt_lower + 1\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn (cnt_upper > 0 and cnt_lower == 0) or (cnt_lower\
    \ > 0 and cnt_upper == 0)\nend", "   local lower, upper = 0, 0\n   if #dict ==\
    \ 0 then return false end\n   for k, v in pairs(dict) do\n      if type(k) ==\
    \ \"string\" then\n         if k == string.lower(k) then lower = lower + 1\n \
    \        elseif k == string.upper(k) then upper = upper + 1\n         end\n  \
    \    end\n   end\n   return lower == #dict or upper == #dict\nend", "    if (#dict\
    \ == 0) then return false end\n    local keys = {}\n    for k, v in pairs(dict)\
    \ do\n        table.insert(keys, k)\n    end\n    local check = keys[1]\n    local\
    \ isUpper = string.find(check, \"%u\")\n    for i = 2, #keys do\n        local\
    \ elem = keys[i]\n        if (isUpper and string.find(elem, \"%l\")) then\n  \
    \          return false\n        elseif (not isUpper and string.find(elem, \"\
    %u\")) then\n            return false\n        end\n    end\n    return true\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
