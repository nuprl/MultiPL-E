name: HumanEval_45_triangle_area
language: lua
prompt: "-- Given length of a side and high return area for a triangle.\nlocal function\
  \ triangle_area(a, h)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
  \    lu.assertEquals(candidate(5, 3), 7.5)\n    lu.assertEquals(candidate(2, 2),\
  \ 2.0)\n    lu.assertEquals(candidate(10, 8), 40.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn a * h / 2\nend", "    return (a * h) / 2\nend", "  return\
    \ (1/2) * a * h\nend", "    return a * h / 2\nend", "  return ((a * h) / 2)\n\
    end", "\treturn 0.5 * a * h\nend", "\tlocal result = 0.5 * a * h\n\treturn result\n\
    end", "  return (a * h) / 2\nend", "    return a * h / 2\nend", "    return 0.5\
    \ * a * h\nend", "\treturn 0.5 * a * h\nend", "\treturn (a * h) / 2\nend", " \
    \ return (a * h) / 2\nend", "    return a * h / 2\nend", "  return (a * h) / 2\n\
    end", "  return (a * h)/2\nend", "\treturn (a * h) / 2\nend", "  return (a * h)\
    \ / 2\nend", "    return a * h / 2\nend", "  return (a * h) / 2\nend", "    return\
    \ (a * h)/2\nend", "    return (a * h) / 2\nend", "    return (a * h) / 2\nend",
  "    return (a * h) / 2\nend", "    return (a * h) / 2\nend", "  return a * h /\
    \ 2\nend", "  return a * h / 2\nend", "\treturn (a * h) / 2\nend", "\tlocal a\
    \ = tonumber(a)\n\tlocal h = tonumber(h)\n\t\n\treturn (a * h) / 2\nend", "  return\
    \ a * h / 2\nend", "    return (a * h) / 2\nend", "  return (a * h)/2\nend", "\t\
    return (a * h) / 2\nend", "    return (a * h)/2\nend", "  return (a * h) / 2\n\
    end", "    return a * h / 2\nend", "\treturn a * h / 2\nend", "    return (a *\
    \ h) / 2\nend", "\treturn a * h / 2\nend", "  return ((a * h) / 2)\nend", "  \
    \  return (a * h)/2;\nend", "    return 0.5 * a * h\nend", "\treturn (a * h) /\
    \ 2\nend", "\treturn a * h / 2\nend", "  local a = a or 0\n  local h = h or 0\n\
    \  local area = (a * h) / 2\n  return area\nend", "  return (a * h) / 2\nend",
  "    return (a * h) / 2\nend", "    return a * h / 2\nend", "    return a * h /\
    \ 2\nend", "    -- compute the area using the formula\n    return (a * h) / 2\n\
    end", "\treturn (a * h) / 2\nend", "    local result = 0.5 * a * h\n    return\
    \ result\nend", "\treturn a * h / 2;\nend", "  return (a * h) / 2\nend", "   \
    \ return (a * h) / 2\nend", "\treturn a * h / 2\nend", "    return (a * h) / 2\n\
    end", "\treturn (a * h) / 2\nend", "\treturn a * h / 2\nend", "\treturn (a * h)\
    \ / 2\nend", "  local result\n  if a and h then\n    result = (a * h) / 2\n  end\n\
    \  return result\nend", "  return (a * h) / 2\nend", "\treturn (a * h) / 2\nend",
  "  return 0.5 * a * h\nend", "  return (a * h) / 2\nend", "    return a * h / 2\n\
    end", "\treturn (a * h) / 2\nend", "    return 0.5 * a * h\nend", "  return (a\
    \ * h) / 2\nend", "    return a * h / 2\nend", "\treturn (a * h) / 2\nend", " \
    \   return (a * h) / 2;\nend", "\treturn (a * h) / 2\nend", "  return a * h /\
    \ 2\nend", "  local a = tonumber(a)\n  local h = tonumber(h)\n  if a == nil or\
    \ h == nil then\n    return nil\n  end\n  return (a * h) / 2\nend", "  return\
    \ (a * h) / 2\nend", "    return (a * h) / 2;\nend", "\treturn (a * h) / 2\nend",
  "\treturn (a * h) / 2\nend", "    return (a * h)/2\nend", "  return a * h / 2\n\
    end", "  return (a * h) / 2\nend", "    return (a * h) / 2\nend", "  return a\
    \ * h / 2.0\nend", "    return (a * h) / 2\nend", "\treturn ((a * h) / 2)\nend",
  "  return (a * h) / 2\nend", "\treturn 0.5 * a * h\nend", "  return (a * h) / 2\n\
    end", "    return (a * h) / 2\nend", "\treturn 0.5 * a * h\nend", "\treturn (a\
    \ * h)/2\nend", "    return (a * h) / 2\nend", "\treturn (a * h) / 2;\nend", "\t\
    return a * h / 2;\nend", "\treturn a * h / 2\nend", "    return (a * h) / 2\n\
    end", "    return (a * h) / 2\nend", "\treturn (a * h) / 2\nend", "  return (a\
    \ * h) / 2\nend", "\treturn a * h / 2\nend", "    return (a * h) / 2;\nend", " \
    \ return (a * h) / 2\nend", "\treturn (a * h) / 2\nend", "    return (a * h) /\
    \ 2\nend", "  return a * h / 2\nend", "    return a * h / 2\nend", "\treturn a\
    \ * h / 2\nend", "    return (a * h) / 2\nend", "    local area = (a * h) / 2\n\
    \    return area\nend", "    return (a * h) / 2\nend", "  return a * h / 2\nend",
  "  return a * h / 2\nend", "    -- noinspection LongLine\n    return math.floor(a\
    \ * h / 2) -- luacheck: ignore\nend", "    return (a * h) / 2\nend", "  return\
    \ a * h / 2\nend", "\treturn (a * h)/2\nend", "\treturn (a * h) / 2\nend", " \
    \ return (a * h) / 2\nend", "    return (a * h) / 2\nend", "    return (a * h)\
    \ / 2\nend", "  return (a * h) / 2\nend", "\treturn a * h / 2\nend", "\tlocal\
    \ a = tonumber(a)\n\tlocal h = tonumber(h)\n\tlocal area = (1/2) * a * h\n\treturn\
    \ area\nend", "    return a * h / 2\nend", "\treturn a * h / 2\nend", "  return\
    \ (a * h) / 2\nend", "\treturn a * h / 2\nend", "    return (a * h) / 2\nend",
  "\treturn a * h / 2\nend", "    return (a * h) / 2\nend", "\treturn (a * h) / 2\n\
    end", "    return (a * h) / 2\nend", "  return (a * h) / 2\nend", "    return\
    \ ((a * h) / 2)\nend", "    local area = (a * h) / 2\n    return area\nend", "\t\
    return a * h / 2\nend", "  return (a * h) / 2\nend", "  return a * h / 2\nend",
  "    return (a * h) / 2\nend", "  local area = (a * h) / 2\n  return area\nend",
  "  return (1/2)*(a*h)\nend", "\treturn a * h / 2\nend", "    return (a * h) / 2\n\
    end", "    return ((a * h) / 2)\nend", "\treturn (a * h) / 2\nend", "    return\
    \ a * h / 2\nend", "    return ((a * h) / 2)\nend", "\treturn 0.5 * a * h\nend",
  "    return (a * h)/2\nend", "    return (a * h) / 2\nend", "  -- Return 0 for invalid\
    \ high.\n  if h < 0 then\n    return 0\n  end\n  -- Return area for valid high.\n\
    \  return a * h / 2\nend", "    return ((a * h) / 2)\nend", "    return (a * h)/2\n\
    end", "    return (a * h) / 2\nend", "\treturn a * h / 2;\nend", "  return (a\
    \ * h)/2\nend", "    return (a * h) / 2\nend", "    return (a * h) / 2\nend",
  "  return a * h / 2\nend", "    return 0.5 * a * h\nend", "    return 0.5 * a *\
    \ h\nend", "    local area = (a * h) / 2\n    return area\nend", "\treturn a *\
    \ h / 2\nend", "  return (a * h) / 2\nend", "    -- We use the power operator\
    \ in Lua.\n    return (a * h) / 2\nend", "  return a * h / 2\nend", "    return\
    \ a * h / 2\nend", "  return 0.5 * a * h\nend", "\treturn (a * h) / 2\nend", " \
    \   return a * h / 2\nend", "    return (a * h) / 2\nend", "\treturn a * h / 2\n\
    end", "\treturn 0.5 * a * h\nend", "  return a * h / 2\nend", "\treturn (a * h)\
    \ / 2\nend", "\treturn a * h / 2\nend", "\treturn (a * h) / 2\nend", "    return\
    \ (a * h) / 2\nend", "\treturn a * h / 2\nend", "  return a * h / 2\nend", " \
    \   return a * h / 2\nend", "    -- Given sides return area of triangle.\n   \
    \ return (a * h)/2\nend", "    return 0.5 * a * h\nend", "  return (a * h) / 2\n\
    end", "\treturn math.floor(a * h / 2)\nend", "\treturn a * h / 2\nend", "\treturn\
    \ a * h / 2\nend", "  return (a * h) / 2\nend", "  return (a * h) / 2\nend", " \
    \   return (a * h) / 2\nend", "    return a * h / 2\nend", "    return (1/2)*a*h\n\
    end", "  return a * h / 2\nend", "    return 0.5 * a * h\nend", "\treturn (a *\
    \ h) / 2\nend", "  return a * h / 2\nend", "  return a * h / 2\nend", "    return\
    \ 0.5 * a * h\nend", "  return (a * h) / 2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
