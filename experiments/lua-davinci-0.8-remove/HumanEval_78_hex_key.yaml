name: HumanEval_78_hex_key
language: lua
prompt: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n-- digits that are primes\
  \ (prime number, or a prime, is a natural number \n-- greater than 1 that is not\
  \ a product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n-- So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may assume the input is\
  \ always correct or empty string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n\
  -- Examples:\nlocal function hex_key(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
  \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
  \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
  \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
  \ 12)\n    lu.assertEquals(candidate({}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"\
    ] = 3, [\"4\"] = 4, [\"5\"] = 5,\n        [\"6\"] = 6, [\"7\"] = 7, [\"8\"] =\
    \ 8, [\"9\"] = 9, [\"A\"] = 10, [\"B\"] = 11,\n        [\"C\"] = 12, [\"D\"] =\
    \ 13, [\"E\"] = 14, [\"F\"] = 15,\n    }[num]\nend", "  return tonumber(num, 16)\n\
    end", "  if num >= 10 then\n    return string.char(string.byte('A') - 10 + num)\n\
    \  else\n    return tostring(num)\n  end\nend", "    if num >= 0 and num <= 9\
    \ then\n        return num\n    elseif num == 10 then\n        return 'A'\n  \
    \  elseif num == 11 then\n        return 'B'\n    elseif num == 12 then\n    \
    \    return 'C'\n    elseif num == 13 then\n        return 'D'\n    elseif num\
    \ == 14 then\n        return 'E'\n    elseif num == 15 then\n        return 'F'\n\
    \    end\nend", "  local hex_table = {\n    ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3']\
    \ = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n   \
    \ ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15,\n  }\n\
    \  return hex_table[num]\nend", "  -- insert your code here\n  return num\nend",
  "  local t = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n  local h = \"0123456789ABCDEF\"\
    \n  for i = 1, #h do\n    t[h:sub(i,i)] = i\n  end\n  local r = 0\n  for i = 1,\
    \ #num do\n    if t[num:sub(i,i)] % 2 ~= 0 and t[num:sub(i,i)] % 3 ~= 0 and t[num:sub(i,i)]\
    \ % 5 ~= 0 and t[num:sub(i,i)] % 7 ~= 0 and t[num:sub(i,i)] % 11 ~= 0 and t[num:sub(i,i)]\
    \ % 13 ~= 0 then\n      r = r + 1\n    end\n  end\n  return r\nend", "    num\
    \ = string.upper(num)\n    local digits = 0\n    for i = 1, string.len(num) do\n\
    \        if num:sub(i, i) == \"2\" or num:sub(i, i) == \"3\" or num:sub(i, i)\
    \ == \"5\" or num:sub(i, i) == \"7\" or num:sub(i, i) == \"B\" or num:sub(i, i)\
    \ == \"D\" then\n            digits = digits + 1\n        end\n    end\n    return\
    \ digits\nend\nprint(hex_key(\"FF\")) -- 2\nprint(hex_key(\"F00\")) -- 1\nprint(hex_key(\"\
    B\")) -- 1\nprint(hex_key(\"\")) -- 0", "  local map = {\n    ['0'] = 0, ['1']\
    \ = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,\n    ['5'] = 5, ['6'] = 6, ['7'] = 7,\
    \ ['8'] = 8, ['9'] = 9,\n    ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E']\
    \ = 14, ['F'] = 15\n  }\n  return map[num]\nend", "  local hex = {\n    [0] =\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \n    A = 10, B = 11, C = 12, D = 13, E = 14,\
    \ F = 15\n  }\n  return hex[tonumber(num, 16)]\nend", "    return tonumber(num,\
    \ 16)\nend", "    return tonumber(num, 16)\nend", "    local hex_key = {\n   \
    \     [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"] = 2,\n        [\"3\"\
    ] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n        [\"6\"] = 6,\n   \
    \     [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"] = 9,\n        [\"A\"\
    ] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n        [\"D\"] = 13,\n\
    \        [\"E\"] = 14,\n        [\"F\"] = 15,\n    }\n    return hex_key[num]\n\
    end", "    return \"0123456789ABCDEF\":find(num:sub(1,1))\nend", "  local t =\
    \ {[0] = '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F'}\n  local d = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true,\
    \ ['B'] = true, ['D'] = true, ['F'] = true}\n  local s = ''\n  while num > 0 do\n\
    \    local n = num % 16\n    s = s .. t[n]\n    num = math.floor(num / 16)\n \
    \ end\n  local c = 0\n  for i = 1, #s do\n    if d[s:sub(i, i)] then\n      c\
    \ = c + 1\n    end\n  end\n  return c\nend\nprint(hex_key(0)) --== 0\nprint(hex_key(1))\
    \ --== 0\nprint(hex_key(2)) --== 1\nprint(hex_key(3)) --== 1\nprint(hex_key(4))\
    \ --== 0\nprint(hex_key(5)) --== 1\nprint(hex_key(6)) --== 0\nprint(hex_key(7))\
    \ --== 1\nprint(hex_key(8)) --== 0\nprint(hex_key(9)) --== 0\nprint(hex_key(10))\
    \ --== 0\nprint(hex_key(11)) --== 1\nprint(hex_key(12)) --== 0\nprint(hex_key(13))\
    \ --== 1\nprint(hex_key(14)) --== 0\nprint(hex_key(15)) --== 0\nprint(hex_key(16))\
    \ --== 0\nprint(hex_key(17)) --== 1\nprint(hex_key(18)) --== 0\nprint(hex_key(19))\
    \ --== 0\nprint(hex_key(20)) --== 0\nprint(hex_key(21)) --== 0\nprint(hex_key(22))\
    \ --== 0\nprint(hex_key(23)) --== 1\nprint(hex_key(24)) --== 0\nprint(hex_key(25))\
    \ --", "    local nums = {\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\",\
    \ \"6\", \"7\", \"8\", \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    \n    }\n    for i,v in ipairs(nums) do\n        if v == num then\n          \
    \  return i-1\n        end\n    end\nend", "  if num >= \"A\" and num <= \"F\"\
    \ then\n    return tonumber(num, 16)\n  else\n    return tonumber(num)\n  end\n\
    end", "  return tonumber(num, 16)\nend", "  local hex = {\"0\",\"1\",\"2\",\"\
    3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"}\n\
    \  for k,v in ipairs(hex) do\n    if v == num then return k end\n  end\nend",
  "  return \"0123456789ABCDEF\":find(num:upper()) - 1\nend", "    return tonumber(num,\
    \ 16)\nend", "  return tonumber(num, 16)\nend", "    local hex_str = {0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'}\n\
    \    local res = 0\n    for i=1,#num do\n        for j=1,#hex_str do\n       \
    \     if(num:sub(i,i) == hex_str[j]) then\n                res = res + j - 1\n\
    \            end\n        end\n    end\n    return res\nend", "  local numbers\
    \ = {\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ,\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n  }\n  for i, k in ipairs(numbers)\
    \ do\n    if num == k then\n      return i - 1\n    end\n  end\nend", "    local\
    \ keys = {2, 3, 5, 7, 11, 13}\n    for _,v in ipairs(keys) do\n        if tonumber(num,\
    \ 16) == v then\n            return v\n        end\n    end\n    return nil\n\
    end", "    local hex_nums = {\n        ['A'] = 10,\n        ['B'] = 11,\n    \
    \    ['C'] = 12,\n        ['D'] = 13,\n        ['E'] = 14,\n        ['F'] = 15\n\
    \    }\n    return hex_nums[num]\nend", "    return tonumber(num, 16)\nend", " \
    \   return tonumber(num, 16)\nend", "    -- local hex_table = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    -- local primes = {'2','3','5','7','B','D'}\n    -- local count = 0\n   \
    \ -- for i=1,#num do\n    --     if contains(primes, num[i]) then\n    --    \
    \     count = count + 1\n    --     end\n    -- end\n    -- return count\n   \
    \ return string.gsub(num, \"[2357BD]\", \"\")\nend", "    local digits = 0\n \
    \   for _, v in pairs({'2', '3', '5', '7', 'B', 'D'}) do\n        digits = digits\
    \ + num:gsub(v, '')\n    end\n    return digits\nend", "  local hex = {0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'}\n\
    \  local count = 0\n  for i = 1, #num do\n    local c = num:sub(i,i)\n    for\
    \ k,v in pairs(hex) do\n      if c == v then\n        count = count + 1\n    \
    \  end\n    end\n  end\n  return count\nend", "  local hexkey = {\n    [0] = 2,\n\
    \    [1] = 3,\n    [2] = 5,\n    [3] = 7,\n    [4] = 11,\n    [5] = 13,\n    [6]\
    \ = 17,\n    [7] = 19,\n    [8] = 23,\n    [9] = 29,\n    [\"A\"] = 31,\n    [\"\
    B\"] = 37,\n    [\"C\"] = 41,\n    [\"D\"] = 43,\n    [\"E\"] = 47,\n    [\"F\"\
    ] = 53\n  }\n  return hexkey[num]\nend", "    local primes = {2, 3, 5, 7, 11,\
    \ 13}\n    local non_primes = {0, 1, 4, 6, 8, 9, 10, 12, 14, 15}\n    local dict\
    \ = {}\n    local sum = 0\n    for _, v in ipairs(primes) do\n        dict[v]\
    \ = 1\n    end\n    for _, v in ipairs(non_primes) do\n        dict[v] = 0\n \
    \   end\n    for c in num:gmatch('%w') do\n        local n = tonumber(c, 16)\n\
    \        sum = sum + dict[n]\n    end\n    return sum\nend", "  if num == '0'\
    \ then return 0 end\n  if num == '1' then return 1 end\n  if num == '2' then return\
    \ 2 end\n  if num == '3' then return 3 end\n  if num == '4' then return 4 end\n\
    \  if num == '5' then return 5 end\n  if num == '6' then return 6 end\n  if num\
    \ == '7' then return 7 end\n  if num == '8' then return 8 end\n  if num == '9'\
    \ then return 9 end\n  if num == 'A' then return 10 end\n  if num == 'B' then\
    \ return 11 end\n  if num == 'C' then return 12 end\n  if num == 'D' then return\
    \ 13 end\n  if num == 'E' then return 14 end\n  if num == 'F' then return 15 end\n\
    end", "  local hex = {\n  [0] = true, [1] = true, [2] = true, [3] = true, [4]\
    \ = true, [5] = true, [6] = true, [7] = true,\n  [8] = true, [9] = true, [10]\
    \ = true, [11] = true, [12] = true, [13] = true, [14] = true, [15] = true,\n \
    \ }\n  local key = {\n  [0] = true, [1] = true, [4] = true, [6] = true, [8] =\
    \ true, [9] = true, [10] = true, [12] = true, [14] = true, [15] = true,\n  }\n\
    \  local num = tonumber(num, 16)\n  if hex[num] then\n    if key[num] then\n \
    \     return true\n    end\n  end\n  return false\nend", "  local h = {2,3,5,7,11,13}\n\
    \  local key = 0\n  for i=1,string.len(num) do\n    for _,v in ipairs(h) do\n\
    \      if string.sub(num,i,i) == tostring(v) then\n        key = key + 1\n   \
    \   end\n    end\n  end\n  return key\nend", "\tlocal h = \"0123456789ABCDEF\"\
    \n\tlocal res = {}\n\tfor i = 1, #num do\n\t\tlocal char = num:sub(i, i)\n\t\t\
    res[char] = true\n\tend\n\treturn res\nend", "  local primes = {2, 3, 5, 7, 11,\
    \ 13}\n  return num > 9 and primes[num - 9] or num\nend", "  local num = num:upper()\n\
    \  if tonumber(num, 16) % 2 == 0 then return false end\n  for i = 3, num:len()\
    \ do\n    if tonumber(num, 16) % i == 0 then return false end\n  end\n  return\
    \ true\nend", "    return tonumber(num, 16)\nend", "    return string.byte(num,\
    \ 1) - string.byte('0')\nend", "\treturn math.floor(num/16) == 2 or math.floor(num/16)\
    \ == 3 or math.floor(num/16) == 5 or math.floor(num/16) == 7 or math.floor(num/16)\
    \ == 13 or math.floor(num/16) == 17 or num == 2 or num == 3 or num == 5 or num\
    \ == 7 or num == 11 or num == 13 or num == 17 or num == 19\nend", "    -- First,\
    \ we define a helper function that counts the number of prime digits:\n    local\
    \ function num_primes(str)\n        return str:gsub(\"[A-F2-7]\", \"\"):len()\n\
    \    end\n    -- Next, we define the main function, which takes a hexadecimal\
    \ string, \n    -- converts it to a decimal number, and returns the number of\
    \ prime digits:\n    return function(str)\n        return num_primes(str:upper():gsub(\"\
    ^0x\", \"\"))\n    end\nend", "    return {\n        ['0'] = true, ['1'] = true,\
    \ ['2'] = true, ['3'] = true,\n        ['4'] = true, ['5'] = true, ['6'] = true,\
    \ ['7'] = true,\n        ['8'] = true, ['9'] = true, ['A'] = true, ['B'] = true,\n\
    \        ['C'] = true, ['D'] = true, ['E'] = true, ['F'] = true,\n    }[num]\n\
    end", "\tlocal hex_dict = {\n\t\t['0'] = 0,\n\t\t['1'] = 1,\n\t\t['2'] = 2,\n\t\
    \t['3'] = 3,\n\t\t['4'] = 4,\n\t\t['5'] = 5,\n\t\t['6'] = 6,\n\t\t['7'] = 7,\n\
    \t\t['8'] = 8,\n\t\t['9'] = 9,\n\t\t['A'] = 10,\n\t\t['B'] = 11,\n\t\t['C'] =\
    \ 12,\n\t\t['D'] = 13,\n\t\t['E'] = 14,\n\t\t['F'] = 15,\n\t}\n\treturn hex_dict[num]\n\
    end", "\treturn tonumber(num, 16)\nend", "  local tab = {\n    ['0'] = '0',\n\
    \    ['1'] = '1',\n    ['2'] = '2',\n    ['3'] = '3',\n    ['4'] = '4',\n    ['5']\
    \ = '5',\n    ['6'] = '6',\n    ['7'] = '7',\n    ['8'] = '8',\n    ['9'] = '9',\n\
    \    ['A'] = '10',\n    ['B'] = '11',\n    ['C'] = '12',\n    ['D'] = '13',\n\
    \    ['E'] = '14',\n    ['F'] = '15',\n  }\n  return tab[num]\nend", "  if num\
    \ == 2 then return '2' end\n  if num == 3 then return '3' end\n  if num == 5 then\
    \ return '5' end\n  if num == 7 then return '7' end\n  if num == 11 then return\
    \ 'B' end\n  if num == 13 then return 'D' end\n  return 'none'\nend", "  return\
    \ tonumber(num, 16)\nend", "\tlocal hex_to_int = {\n\t\t['0'] = 0, ['1'] = 1,\
    \ ['2'] = 2, ['3'] = 3,\n\t\t['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7,\n\t\t\
    ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11,\n\t\t['C'] = 12, ['D'] = 13, ['E']\
    \ = 14, ['F'] = 15\n\t}\n\treturn hex_to_int[num]\nend", "    local key = {\n\
    \        [0] = 0,\n        [1] = 0,\n        [2] = 1,\n        [3] = 1,\n    \
    \    [4] = 0,\n        [5] = 1,\n        [6] = 0,\n        [7] = 1,\n        [8]\
    \ = 0,\n        [9] = 0,\n        ['A'] = 1,\n        ['B'] = 1,\n        ['C']\
    \ = 0,\n        ['D'] = 1,\n        ['E'] = 0,\n        ['F'] = 0,\n    }\n  \
    \  return key[num]\nend", "    local k = {\n        ['0'] = true,\n        ['1']\
    \ = true,\n        ['2'] = true,\n        ['3'] = true,\n        ['4'] = true,\n\
    \        ['5'] = true,\n        ['6'] = true,\n        ['7'] = true,\n       \
    \ ['8'] = true,\n        ['9'] = true,\n        ['A'] = true,\n        ['B'] =\
    \ true,\n        ['C'] = true,\n        ['D'] = true,\n        ['E'] = true,\n\
    \        ['F'] = true,\n    }\n    return k[num]\nend", "    local lut = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \    local res = 0\n    local s = num\n    for i = 1, #s do\n        local c =\
    \ s:sub(i,i)\n        res = res + lut[c]\n    end\n    return res\nend", "  return\
    \ string.format(\"%02X\", num)\nend", "  local key = string.byte(num)\n  if key\
    \ >= string.byte('A') and key <= string.byte('F') then\n    return key - string.byte('A')\
    \ + 10\n  else\n    return key - string.byte('0')\n  end\nend", "    local digs\
    \ = {\n        [0] = true,\n        [1] = true,\n        [2] = true,\n       \
    \ [3] = true,\n        [4] = true,\n        [5] = true,\n        [6] = true,\n\
    \        [7] = true,\n        [8] = true,\n        [9] = true,\n        [10] =\
    \ true,\n        [11] = true,\n        [12] = true,\n        [13] = true,\n  \
    \      [14] = true,\n        [15] = true,\n    }\n    local sum = 0\n    for i\
    \ = 1, #num do\n        local x = num:sub(i, i)\n        local y = tonumber(x,\
    \ 16)\n        if digs[y] then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend\nassert(hex_key('1F') == 1)\nassert(hex_key('F') == 1)\n\
    assert(hex_key('0F') == 2)\nassert(hex_key('C') == 1)\nassert(hex_key('CD') ==\
    \ 2)\nassert(hex_key('AD') == 2)\nassert(hex_key('B') == 1)\nassert(hex_key('FF')\
    \ == 2)\nassert(hex_key('ED') == 2)\nassert(hex_key('EF') == 2)\nassert(hex_key('FD')\
    \ == 2)\nassert(hex_key('CD') == 2)\nassert(hex_key('FF') == 2)\nassert(hex_key('FF')\
    \ == 2)\nassert(hex_key('AF') == 2)\nassert(hex_key('AE') == 2)\nassert(hex_key('BF')\
    \ == 2)\nassert(hex_key('BE') == 2)\nassert(hex_key('EF') == 2)\nassert(hex_key('DE')\
    \ == 2)\nassert(hex_key('DE') == 2)\nassert(hex_key('DE') == 2)\nassert(hex_key('DE')\
    \ == 2)\nassert(hex_key('DE') == 2)\nassert(hex_key('DE') == 2)\nassert(hex_",
  "    if num == \"A\" then return 10 end\n    if num == \"B\" then return 11 end\n\
    \    if num == \"C\" then return 12 end\n    if num == \"D\" then return 13 end\n\
    \    if num == \"E\" then return 14 end\n    if num == \"F\" then return 15 end\n\
    \    return tonumber(num)\nend", "  return tonumber(num, 16)\nend", "    return\
    \ tonumber(num, 16)\nend", "  local result = {\n    [\"0\"] = 0, [\"1\"] = 1,\
    \ [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"\
    ] = 7, [\"8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12,\
    \ [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n  }\n  return result[num]\nend", " \
    \   return tonumber(num, 16)\nend", "\tlocal res = 0\n\tlocal t = {\n\t\t[0] =\
    \ false,\n\t\t[1] = false,\n\t\t[2] = true,\n\t\t[3] = true,\n\t\t[4] = false,\n\
    \t\t[5] = true,\n\t\t[6] = false,\n\t\t[7] = true,\n\t\t[8] = false,\n\t\t[9]\
    \ = false,\n\t\t[10] = false,\n\t\t[11] = true,\n\t\t[12] = false,\n\t\t[13] =\
    \ true,\n\t\t[14] = false,\n\t\t[15] = false,\n\t}\n\tfor i = 1, #num do\n\t\t\
    local n = tonumber(num:sub(i, i), 16)\n\t\tif t[n] then\n\t\t\tres = res + 1\n\
    \t\tend\n\tend\n\treturn res\nend", "    return {\n        ['0'] = true,\n   \
    \     ['1'] = true,\n        ['2'] = true,\n        ['3'] = true,\n        ['4']\
    \ = true,\n        ['5'] = true,\n        ['6'] = true,\n        ['7'] = true,\n\
    \        ['8'] = true,\n        ['9'] = true,\n        ['A'] = true,\n       \
    \ ['B'] = true,\n        ['C'] = true,\n        ['D'] = true,\n        ['E'] =\
    \ true,\n        ['F'] = true,\n    }[num]\nend", "  return tonumber(num, 16)\n\
    end", "    return tonumber(num, 16)\nend", "  return tonumber(num, 16)\nend",
  "    local sum = 0\n    for c in num:gmatch(\".\") do\n        if c == \"A\" or\
    \ c == \"B\" or c == \"D\" or c == \"E\" then\n            sum = sum + 1\n   \
    \     elseif c == \"2\" or c == \"3\" or c == \"5\" or c == \"7\" then\n     \
    \       sum = sum + 1\n        end\n    end\n    return sum\nend", "    local\
    \ n = tonumber(num, 16)\n    local t = 2 + n % 2\n    while n > 3 do\n       \
    \ n = n / 2\n        t = t + n % 2\n    end\n    return t\nend", "  return tonumber(num,\
    \ 16)\nend", "    return tonumber(num, 16)\nend", "  -- body\n  local hex = {[\"\
    0\"]=0,[\"1\"]=1,[\"2\"]=2,[\"3\"]=3,[\"4\"]=4,[\"5\"]=5,[\"6\"]=6,[\"7\"]=7,[\"\
    8\"]=8,[\"9\"]=9,[\"A\"]=10,[\"B\"]=11,[\"C\"]=12,[\"D\"]=13,[\"E\"]=14,[\"F\"\
    ]=15}\n  local count = 0\n  for i = 1,#num do\n  \tif hex[num:sub(i,i)] == 2 or\
    \ hex[num:sub(i,i)] == 3 or hex[num:sub(i,i)] == 5 or hex[num:sub(i,i)] == 7 or\
    \ hex[num:sub(i,i)] == 11 or hex[num:sub(i,i)] == 13 then\n  \t\tcount = count\
    \ + 1\n  \tend\n  end\n  return count\nend\nprint(hex_key(\"45BF\") == 2)\nprint(hex_key(\"\
    012345\") == 1)\nprint(hex_key(\"05A81F\") == 2)\nprint(hex_key(\"FFFF\") == 0)\n\
    print(hex_key(\"\") == 0)", "\t-- your code\nend", "    return tonumber(num, 16)\n\
    end", "    return \"0123456789ABCDEF\":find(num:upper())\nend", "  if num <= 9\
    \ then\n    return num\n  else\n    return string.char(string.byte('A') + num\
    \ - 10)\n  end\nend", "    return tonumber(num, 16)\nend", "\tlocal digits = {\n\
    \t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \n\t\t\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\n\t}\n\tfor k, v in ipairs(digits)\
    \ do\n\t\tif v == num then\n\t\t\treturn k\n\t\tend\n\tend\nend", "  local t =\
    \ {\n    [0] = 2,\n    [1] = 3,\n    [2] = 5,\n    [3] = 7,\n    [4] = 11,\n \
    \   [5] = 13,\n    [6] = 17,\n    [7] = 19,\n    [8] = 23,\n    [9] = 29,\n  \
    \  ['A'] = 31,\n    ['B'] = 37,\n    ['C'] = 41,\n    ['D'] = 43,\n    ['E'] =\
    \ 47,\n    ['F'] = 53,\n  }\n  return t[num]\nend", "\tlocal t = {\n\t\t['0']\
    \ = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7']\
    \ = 7,\n\t\t['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] =\
    \ 13, ['E'] = 14, ['F'] = 15\n\t}\n\tlocal res = 0\n\tfor i = 1, #num do\n\t\t\
    res = res + t[num:sub(i, i)]\n\tend\n\treturn res\nend\nassert(hex_key(\"\") ==\
    \ 0)\nassert(hex_key(\"3F\") == 15)\nassert(hex_key(\"6A\") == 20)\nassert(hex_key(\"\
    A5\") == 25)\nassert(hex_key(\"FF\") == 255)\nassert(hex_key(\"CDB1\") == 876)\n\
    assert(hex_key(\"46F7EA\") == 154862)", "\tlocal dec_arr = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \tlocal hex_arr = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \tlocal key = {}\n\tfor k,v in ipairs(hex_arr) do\n\t\tkey[v] = dec_arr[k]\n\t\
    end\n\treturn key\nend", "\treturn tonumber(num, 16)\nend", "    local tab = {\n\
    \        ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3,\n        ['4'] = 4, ['5']\
    \ = 5, ['6'] = 6, ['7'] = 7,\n        ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B']\
    \ = 11,\n        ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n    }\n    return\
    \ tab[num]\nend", "\treturn string.format(\"%0x\", num)\nend", "    local hex_keys\
    \ = {[0] = '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F'}\n    local result = {}\n    while num > 0 do\n        local x = num\
    \ % 16\n        table.insert(result, hex_keys[x])\n        num = math.floor(num\
    \ / 16)\n    end\n    return table.concat(result)\nend", "    return (tonumber(num,\
    \ 16) <= 7 and tonumber(num, 16) >= 2) or\n        num == \"b\" or num == \"d\"\
    \nend", "\treturn tonumber(num, 16)\nend", "  if num == \"0\" then return 0\n\
    \  elseif num == \"1\" then return 1\n  elseif num == \"2\" then return 2\n  elseif\
    \ num == \"3\" then return 3\n  elseif num == \"4\" then return 4\n  elseif num\
    \ == \"5\" then return 5\n  elseif num == \"6\" then return 6\n  elseif num ==\
    \ \"7\" then return 7\n  elseif num == \"8\" then return 8\n  elseif num == \"\
    9\" then return 9\n  elseif num == \"A\" then return 10\n  elseif num == \"B\"\
    \ then return 11\n  elseif num == \"C\" then return 12\n  elseif num == \"D\"\
    \ then return 13\n  elseif num == \"E\" then return 14\n  elseif num == \"F\"\
    \ then return 15\n  end\nend", "    local power = 0\n    local _key = 0\n    for\
    \ i = string.len(num), 1, -1 do\n        local digit = string.sub(num, i, i)\n\
    \        if digit == 'A' then\n            _key = _key + 10 * 16 ^ power\n   \
    \     elseif digit == 'B' then\n            _key = _key + 11 * 16 ^ power\n  \
    \      elseif digit == 'C' then\n            _key = _key + 12 * 16 ^ power\n \
    \       elseif digit == 'D' then\n            _key = _key + 13 * 16 ^ power\n\
    \        elseif digit == 'E' then\n            _key = _key + 14 * 16 ^ power\n\
    \        elseif digit == 'F' then\n            _key = _key + 15 * 16 ^ power\n\
    \        else\n            _key = _key + tonumber(digit) * 16 ^ power\n      \
    \  end\n        power = power + 1\n    end\n    return _key\nend", "    local\
    \ t = {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] =\
    \ 4, [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n      \
    \  [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"\
    ] = 15\n    }\n    return t[num]\nend", "  local chars = {A = 10, B = 11, C =\
    \ 12, D = 13, E = 14, F = 15}\n  local hexes = {[2] = true, [3] = true, [5] =\
    \ true, [7] = true, [11] = true, [13] = true}\n  local count = 0\n  for i = 1,\
    \ #num do\n    local n = tonumber(num:sub(i, i)) or chars[num:sub(i, i)]\n   \
    \ if hexes[n] then count = count + 1 end\n  end\n  return count\nend", "    local\
    \ n = tonumber(num, 16)\n    if n > 1 then\n        local p = 2\n        while\
    \ p * p <= n do\n            if n % p == 0 then\n                return false\n\
    \            end\n            p = p + 1\n        end\n        return true\n  \
    \  end\n    return false\nend", "  local keys = {\n    ['0'] = 0, ['1'] = 1, ['2']\
    \ = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9']\
    \ = 9,\n    ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F']\
    \ = 15\n  }\n  return keys[num]\nend", "\tlocal hex = {\n\t\t0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n\t}\n\tlocal key = {\n\t\tA = 10, B = 11,\
    \ C = 12, D = 13, E = 14, F = 15\n\t}\n\tif num:match(\"%a\") then\n\t\treturn\
    \ key[num]\n\telse\n\t\treturn hex[tonumber(num)]\n\tend\nend", "    local num\
    \ = tonumber(num, 16)\n    if num == nil then\n        error(\"hex_key: invalid\
    \ hex number\")\n    end\n    if num == 2 or num == 3 or num == 5 or num == 7\
    \ or num == 11 or num == 13 then\n        return true\n    end\n    return false\n\
    end", "    local hex_nums = {\n        [0] = true,\n        [1] = true,\n    \
    \    [2] = true,\n        [3] = true,\n        [4] = true,\n        [5] = true,\n\
    \        [6] = true,\n        [7] = true,\n        [8] = true,\n        [9] =\
    \ true,\n        [\"A\"] = true,\n        [\"B\"] = true,\n        [\"C\"] = true,\n\
    \        [\"D\"] = true,\n        [\"E\"] = true,\n        [\"F\"] = true,\n \
    \   }\n    return hex_nums[num]\nend", "  local res = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}\n\
    \  for i=1,16 do\n    res[i] = string.format(\"%X\",i-1)\n  end\n  return res\n\
    end", "  local hex = {\n    [10] = 'A', [11] = 'B', [12] = 'C', [13] = 'D', [14]\
    \ = 'E', [15] = 'F'\n  }\n  return hex[num] or tostring(num)\nend", "\tlocal hex\
    \ = \"0123456789ABCDEF\"\n\tlocal sum = 0\n\tfor char in num:gmatch(\".\") do\n\
    \t\tsum = sum + hex:find(char)\n\tend\n\treturn sum\nend", "    return tonumber(num,\
    \ 16)\nend", "  return {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n\
    \    [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15,\n  }[num]\nend", "    return {\n        [\"0\"] = true,\n        [\"1\"\
    ] = true,\n        [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] =\
    \ true,\n        [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n\
    \        [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n \
    \       [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n  \
    \      [\"E\"] = true,\n        [\"F\"] = true,\n    }[num]\nend", "  return tonumber(num,\
    \ 16)\nend", "  if not num then return 'F' end\n  return num\nend", "  return\
    \ tonumber(num, 16)\nend", "  local hex = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"\
    2\"] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"\
    8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"]\
    \ = 13, [\"E\"] = 14, [\"F\"] = 15\n  }\n  return hex[num]\nend", "\treturn tonumber(num,\
    \ 16)\nend", "\treturn { \n\t\t['2'] = true,\n\t\t['3'] = true,\n\t\t['5'] = true,\n\
    \t\t['7'] = true,\n\t\t['B'] = true,\n\t\t['D'] = true,\n\t\t['F'] = true,\n\t\
    }[num]\nend", "  return tonumber(num, 16)\nend", "    if num == \"0\" then return\
    \ 0 end\n    if num == \"1\" then return 1 end\n    if num == \"2\" then return\
    \ 2 end\n    if num == \"3\" then return 3 end\n    if num == \"4\" then return\
    \ 4 end\n    if num == \"5\" then return 5 end\n    if num == \"6\" then return\
    \ 6 end\n    if num == \"7\" then return 7 end\n    if num == \"8\" then return\
    \ 8 end\n    if num == \"9\" then return 9 end\n    if num == \"A\" then return\
    \ 10 end\n    if num == \"B\" then return 11 end\n    if num == \"C\" then return\
    \ 12 end\n    if num == \"D\" then return 13 end\n    if num == \"E\" then return\
    \ 14 end\n    if num == \"F\" then return 15 end\nend", "    return (num:byte()\
    \ - 55)\nend", "  local base_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2']\
    \ = 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7']\
    \ = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n   \
    \ ['C'] = 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15,\n  }\n  return\
    \ base_key[num]\nend", "  num = tonumber(num, 16)\n  return num == 2 or num ==\
    \ 3 or num == 5 or num == 7 or num == 11 or num == 13\nend", "    local hexes\
    \ = { ['0'] = true, ['1'] = true, ['2'] = true, ['3'] = true, ['4'] = true, ['5']\
    \ = true, ['6'] = true, ['7'] = true, ['8'] = true, ['9'] = true, ['A'] = true,\
    \ ['B'] = true, ['C'] = true, ['D'] = true, ['E'] = true, ['F'] = true }\n   \
    \ local total = 0\n    for i = 1, #num do\n        if hexes[num:sub(i, i)] then\n\
    \            total = total + 1\n        end\n    end\n    return total\nend",
  "    local digit = tonumber(num, 16)\n    return digit and (digit == 2 or digit\
    \ == 3 or digit == 5 or digit == 7 or digit == 11 or digit == 13) and num or nil\n\
    end", "  return tonumber(num, 16)\nend", "  local res = 0\n  local hex = {\"0\"\
    ,\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\"\
    ,\"E\",\"F\"}\n  for i = 1,#hex do\n    if hex[i] == num then\n      res = i\n\
    \      break\n    end\n  end\n  return res\nend", "    return string.byte(num,\
    \ 1) - 48\nend", "  local lkp = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] =\
    \ 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7']\
    \ = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n   \
    \ ['C'] = 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15,\n  }\n  return\
    \ lkp[num]\nend", "\treturn {\n\t\t[0] = 0,\n\t\t[1] = 0,\n\t\t[2] = 1,\n\t\t\
    [3] = 1,\n\t\t[4] = 0,\n\t\t[5] = 1,\n\t\t[6] = 0,\n\t\t[7] = 1,\n\t\t[8] = 0,\n\
    \t\t[9] = 0,\n\t\tA = 1,\n\t\tB = 1,\n\t\tC = 0,\n\t\tD = 1,\n\t\tE = 0,\n\t\t\
    F = 0,\n\t}[num]\nend", "\tlocal hexes = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \tlocal key = num\n\tif num == 10 then\n\t\tkey = 'A'\n\telseif num == 11 then\n\
    \t\tkey = 'B'\n\telseif num == 12 then\n\t\tkey = 'C'\n\telseif num == 13 then\n\
    \t\tkey = 'D'\n\telseif num == 14 then\n\t\tkey = 'E'\n\telseif num == 15 then\n\
    \t\tkey = 'F'\n\tend\n\treturn key\nend", "    return tonumber(num, 16)\nend",
  "\tlocal key = {}\n\tfor i=1,#num do\n\t\tkey[i] = num:sub(i,i)\n\tend\n\treturn\
    \ key\nend", "    local tbl = {}\n    for i = string.len(num), 1, -1 do\n    \
    \    tbl[i] = string.sub(num, i, i)\n    end\n    return tbl\nend", "\tlocal digits\
    \ = {[0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n\treturn digits[num]\n\
    end", "    return tonumber(num, 16)\nend", "    local hex = {\n        ['0'] =\
    \ true,\n        ['1'] = true,\n        ['2'] = true,\n        ['3'] = true,\n\
    \        ['4'] = true,\n        ['5'] = true,\n        ['6'] = true,\n       \
    \ ['7'] = true,\n        ['8'] = true,\n        ['9'] = true,\n        ['A'] =\
    \ true,\n        ['B'] = true,\n        ['C'] = true,\n        ['D'] = true,\n\
    \        ['E'] = true,\n        ['F'] = true,\n    }\n    local res,_ = string.gsub(num,'[^%x]','')\n\
    \    for k,v in pairs(hex) do\n        res = string.gsub(res,k,'')\n    end\n\
    \    return res\nend", "    local key = { A = 10, B = 11, C = 12, D = 13, E =\
    \ 14, F = 15 }\n    return key[num] or tonumber(num)\nend", "  local hv = {\n\
    \    ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] =\
    \ 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n    ['A'] = 10, ['B'] = 11, ['C'] = 12,\
    \ ['D'] = 13, ['E'] = 14, ['F'] = 15,\n  }\n  return hv[num]\nend", "    local\
    \ digits = \"0123456789ABCDEF\"\n    local num_len = string.len(num)\n    local\
    \ i = 1\n    local c = string.sub(num, i, i)\n    local d\n    local sum = 0\n\
    \    while (i <= num_len) do\n        d = string.sub(digits, c+1, c+1)\n     \
    \   if (d == \"3\" or d == \"5\" or d == \"7\" or d == \"B\" or d == \"D\") then\n\
    \            sum = sum + 1\n        end\n        i = i + 1\n        c = string.sub(num,\
    \ i, i)\n    end\n    return sum\nend", "  return tonumber(num, 16)\nend", "\t\
    local hexes = {A=10, B=11, C=12, D=13, E=14, F=15}\n\tif num:len() == 1 then\n\
    \t\tif not tonumber(num) then\n\t\t\treturn hexes[num]\n\t\telse\n\t\t\treturn\
    \ tonumber(num)\n\t\tend\n\telse\n\t\treturn hexes[num]\n\tend\nend", "    local\
    \ s = num\n    local sum = 0\n    local primes = {0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0}\n\
    \    for i = 1, #s do\n        local n = string.sub(s, i, i)\n        local v\
    \ = tonumber(n, 16)\n        if not v then\n            local n1 = string.byte(n)\n\
    \            if n1 >= 65 and n1 <= 70 then\n                v = n1 - 65 + 10\n\
    \            end\n        end\n        if v then\n            sum = sum + primes[v\
    \ + 1]\n        end\n    end\n    return sum\nend", "    return tonumber(num,\
    \ 16)\nend", "    return tonumber(num, 16)\nend", "  local hex_keys = {\n    [\"\
    0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n    [\"5\"] = 5,\
    \ [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = 10, [\"B\"\
    ] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n  }\n  return\
    \ hex_keys[num]\nend", "  local m = {\n    A = 10,\n    B = 11,\n    C = 12,\n\
    \    D = 13,\n    E = 14,\n    F = 15,\n  }\n  return tonumber(num) or m[num]\n\
    end", "    local o = { \n        A = 10, B = 11, C = 12, D = 13, E = 14, F = 15,\
    \ \n        a = 10, b = 11, c = 12, d = 13, e = 14, f = 15 \n    }\n    return\
    \ o[num]\nend", "  local num = num:upper()\n  local t = {\n    [\"0\"] = 0, [\"\
    1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"5\"] = 5,\n    [\"6\"] = 6,\
    \ [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9, [\"A\"] = 10, [\"B\"] = 11,\n    [\"\
    C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15\n  }\n  return t[num]\nend",
  "  return tonumber(num, 16)\nend", "  return tonumber(num, 16)\nend", "    local\
    \ t = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"] = 2,\n  \
    \      [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n        [\"6\"\
    ] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"] = 9,\n   \
    \     [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n        [\"\
    D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15,\n    }\n    return t[num]\n\
    end", "  return num >= 10 and string.char(num - 10 + string.byte('A')) or tostring(num)\n\
    end", "  local digits = {\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\
    \    'A', 'B', 'C', 'D', 'E', 'F'\n  }\n  local count = 0\n  for i=1,#num do\n\
    \    for j=1,#digits do\n      if num:sub(i,i) == digits[j] then\n        if (j\
    \ == 2) or (j == 3) or (j == 5) or (j == 7) or (j == 11) or \n          (j ==\
    \ 13) then\n          count = count + 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend", "    local key = {0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'}\n\
    \    return key[num+1]\nend", "  if num < 10 then\n    return string.char(string.byte('0')\
    \ + num)\n  else\n    return string.char(string.byte('A') + num - 10)\n  end\n\
    end", "\tlocal t = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\
    ,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"}\n\tlocal out = \"\"\n\tfor k, v in pairs(t)\
    \ do\n\t\tif v == num then\n\t\t\tout = k\n\t\tend\n\tend\n\treturn out\nend",
  "  local t = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"]\
    \ = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n\
    \    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"\
    F\"] = 15,\n  }\n  return t[num]\nend", "\tlocal hex = {\n\t\t['0'] = 0,\n\t\t\
    ['1'] = 1,\n\t\t['2'] = 2,\n\t\t['3'] = 3,\n\t\t['4'] = 4,\n\t\t['5'] = 5,\n\t\
    \t['6'] = 6,\n\t\t['7'] = 7,\n\t\t['8'] = 8,\n\t\t['9'] = 9,\n\t\t['A'] = 10,\n\
    \t\t['B'] = 11,\n\t\t['C'] = 12,\n\t\t['D'] = 13,\n\t\t['E'] = 14,\n\t\t['F']\
    \ = 15,\n\t}\n\treturn hex[num]\nend", "    if num >= 10 then\n        return\
    \ string.char(string.byte('A') + num - 10)\n    else\n        return tostring(num)\n\
    \    end\nend", "    local res = {}\n    for i = 1, 16 do\n        if num:find(string.format(\"\
    %X\", i)) then\n            res[#res + 1] = i\n        end\n    end\n    return\
    \ res\nend", "\tif num == \"0\" then return 1 end\n\tif num == \"1\" then return\
    \ 1 end\n\tif num == \"2\" then return 2 end\n\tif num == \"3\" then return 3\
    \ end\n\tif num == \"4\" then return 1 end\n\tif num == \"5\" then return 5 end\n\
    \tif num == \"6\" then return 1 end\n\tif num == \"7\" then return 7 end\n\tif\
    \ num == \"8\" then return 1 end\n\tif num == \"9\" then return 1 end\n\tif num\
    \ == \"A\" then return 11 end\n\tif num == \"B\" then return 11 end\n\tif num\
    \ == \"C\" then return 1 end\n\tif num == \"D\" then return 13 end\n\tif num ==\
    \ \"E\" then return 1 end\n\tif num == \"F\" then return 1 end\nend", "    local\
    \ hex_table = {\n        [0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5,\n\
    \        [6] = 6, [7] = 7, [8] = 8, [9] = 9, A = 10, B = 11,\n        C = 12,\
    \ D = 13, E = 14, F = 15\n    }\n    return hex_table[num]\nend", "  return tonumber(num,\
    \ 16)\nend", "  local hex={ [0]=\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" }\n  local i=1\n\
    \  local key=\"\"\n  while num~=0 do\n    key=hex[num%16]..key\n    num=math.floor(num/16)\n\
    \  end\n  return key\nend", "    local hex = {\n        [0] = '0',\n        [1]\
    \ = '1',\n        [2] = '2',\n        [3] = '3',\n        [4] = '4',\n       \
    \ [5] = '5',\n        [6] = '6',\n        [7] = '7',\n        [8] = '8',\n   \
    \     [9] = '9',\n        [10] = 'A',\n        [11] = 'B',\n        [12] = 'C',\n\
    \        [13] = 'D',\n        [14] = 'E',\n        [15] = 'F'\n    }\n    local\
    \ sum = 0\n    for i = 1, #num do\n        for k, v in pairs(hex) do\n       \
    \     if v == num:sub(i, i) then\n                sum = sum + k\n            end\n\
    \        end\n    end\n    return sum\nend", "    local ht = {A=10,B=11,C=12,D=13,E=14,F=15}\n\
    \    local res = tonumber(num)\n    if not res then\n        return ht[num]\n\
    \    end\n    return res\nend", "  local m = {\n    [\"0\"] = 0, [\"1\"] = 1,\
    \ [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"\
    ] = 7, [\"8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12,\
    \ [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15,\n  }\n  return m[num]\nend", "\tlocal\
    \ hex = {\n\t\t['0'] = 0,\n\t\t['1'] = 1,\n\t\t['2'] = 2,\n\t\t['3'] = 3,\n\t\t\
    ['4'] = 4,\n\t\t['5'] = 5,\n\t\t['6'] = 6,\n\t\t['7'] = 7,\n\t\t['8'] = 8,\n\t\
    \t['9'] = 9,\n\t\t['A'] = 10,\n\t\t['B'] = 11,\n\t\t['C'] = 12,\n\t\t['D'] = 13,\n\
    \t\t['E'] = 14,\n\t\t['F'] = 15,\n\t}\n\treturn hex[num]\nend", "  local h = {A=10,B=11,C=12,D=13,E=14,F=15}\n\
    \  if h[num] then return h[num] else return tonumber(num) end\nend", "  if not\
    \ num:match(\"[^0-9A-F]\") then return true end\nend", "    local prime_hexes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    return function(x) return x == num end\n\
    end", "    local key\n    if (num == 10) then\n        key = 'A'\n    elseif (num\
    \ == 11) then\n        key = 'B'\n    elseif (num == 12) then\n        key = 'C'\n\
    \    elseif (num == 13) then\n        key = 'D'\n    elseif (num == 14) then\n\
    \        key = 'E'\n    elseif (num == 15) then\n        key = 'F'\n    else\n\
    \        key = num\n    end\n    return key\nend", "\treturn {0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'}[num]\n\
    end", "    num = tonumber(num, 16)\n    local r = 0\n    for _, p in ipairs({2,\
    \ 3, 5, 7, 11, 13}) do\n        if p == num then\n            r = r + 1\n    \
    \    end\n    end\n    return r\nend", "\tlocal num = tonumber(num, 16)\n\treturn\
    \ (num == nil) and num or hex_key2(num)\nend", "    local hex_key_table = {\n\
    \        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n\
    \        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n\
    \        ['8'] = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n        ['B'] =\
    \ 11,\n        ['C'] = 12,\n        ['D'] = 13,\n        ['E'] = 14,\n       \
    \ ['F'] = 15,\n    }\n    return hex_key_table[num]\nend", "    return \"0123456789ABCDEF\"\
    :find(num:upper()) - 1\nend", "\tlocal n = tonumber(num, 16)\n\tlocal k = n %\
    \ 2 == 0 and 1 or 0\n\tfor i = 3, math.floor(math.sqrt(n)) do\n\t\tif n % i ==\
    \ 0 then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn k\nend", "    return tonumber(num,\
    \ 16)\nend", "    local t = {\n        [0] = 0, [1] = 1, [2] = 2, [3] = 3, [4]\
    \ = 4,\n        [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9,\n        A = 10,\
    \ B = 11, C = 12, D = 13, E = 14, F = 15\n    }\n    return t[num]\nend", "\t\
    return tonumber(num, 16)\nend", "\tlocal hex = { ['0'] = 0, ['1'] = 1, ['2'] =\
    \ 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] =\
    \ 9, ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15 }\n\
    \treturn hex[num]\nend", "    if num == '0' then return 0 end\n    if num == '1'\
    \ then return 1 end\n    if num == '2' then return 2 end\n    if num == '3' then\
    \ return 3 end\n    if num == '4' then return 4 end\n    if num == '5' then return\
    \ 5 end\n    if num == '6' then return 6 end\n    if num == '7' then return 7\
    \ end\n    if num == '8' then return 8 end\n    if num == '9' then return 9 end\n\
    \    if num == 'A' then return 10 end\n    if num == 'B' then return 11 end\n\
    \    if num == 'C' then return 12 end\n    if num == 'D' then return 13 end\n\
    \    if num == 'E' then return 14 end\n    if num == 'F' then return 15 end\n\
    end", "  local numbers = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n \
    \   ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n\
    \    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] =\
    \ 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15,\n  }\n  local count =\
    \ 0\n  for i=1,#num do\n    local key = numbers[num:sub(i,i)]\n    if not (key\
    \ % 2 == 0 or key % 3 == 0 or key % 5 == 0 or key % 7 == 0) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local digits = {['0']=0,['1']=1,['2']=2,['3']=3,['4']=4,['5']=5,['6']=6,['7']=7,['8']=8,['9']=9,['A']=10,['B']=11,['C']=12,['D']=13,['E']=14,['F']=15}\n\
    \    return digits[num]\nend", "  local key = {[0] = 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0}\n  for digit in tostring(num):gmatch(\"%w\") do\n    key[tonumber(digit,\
    \ 16)] = key[tonumber(digit, 16)] + 1\n  end\n  return key\nend", "    local hex_digits\
    \ = {\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\",\n        \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    }\n    local answer\
    \ = \"\"\n    local num_remainder = num\n    local digit_value\n    local digit\n\
    \    repeat\n        digit_value = num_remainder % 16\n        num_remainder =\
    \ (num_remainder - digit_value) / 16\n        digit = hex_digits[digit_value +\
    \ 1]\n        answer = digit .. answer\n    until num_remainder == 0\n    return\
    \ answer\nend", "    return \"0123456789ABCDEF\"\n        :find(num:upper(), 1,\
    \ true) - 1\nend", "\tlocal map = {\n\t\t[\"0\"] = 0,\n\t\t[\"1\"] = 1,\n\t\t\
    [\"2\"] = 2,\n\t\t[\"3\"] = 3,\n\t\t[\"4\"] = 4,\n\t\t[\"5\"] = 5,\n\t\t[\"6\"\
    ] = 6,\n\t\t[\"7\"] = 7,\n\t\t[\"8\"] = 8,\n\t\t[\"9\"] = 9,\n\t\t[\"A\"] = 10,\n\
    \t\t[\"B\"] = 11,\n\t\t[\"C\"] = 12,\n\t\t[\"D\"] = 13,\n\t\t[\"E\"] = 14,\n\t\
    \t[\"F\"] = 15,\n\t}\n\treturn map[num]\nend", "\tnum = num:upper()\n\tlocal key\
    \ = {'2','3','5','7','B','D'}\n\tlocal total = 0\n\tfor i = 1, #num do\n\t\tfor\
    \ j = 1, #key do\n\t\t\tif num:sub(i,i) == key[j] then total = total + 1 end\n\
    \t\tend\n\tend\n\treturn total\nend", "    local hex = '0123456789ABCDEF'\n  \
    \  local sum = 0\n    for i=1, #num do\n        local c = num:sub(i,i)\n     \
    \   local n = hex:find(c)\n        sum = (sum * 16) + n\n    end\n    return sum\n\
    end", "    return tonumber(num, 16)\nend", "  local values = {\n    ['0'] = 0,\n\
    \    ['1'] = 1,\n    ['2'] = 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n\
    \    ['6'] = 6,\n    ['7'] = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n\
    \    ['B'] = 11,\n    ['C'] = 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F']\
    \ = 15,\n  }\n  return values[num]\nend", "    if num == '0' then return 0 end\n\
    \    if num == '1' then return 1 end\n    if num == '2' then return 2 end\n  \
    \  if num == '3' then return 3 end\n    if num == '4' then return 4 end\n    if\
    \ num == '5' then return 5 end\n    if num == '6' then return 6 end\n    if num\
    \ == '7' then return 7 end\n    if num == '8' then return 8 end\n    if num ==\
    \ '9' then return 9 end\n    if num == 'A' then return 10 end\n    if num == 'B'\
    \ then return 11 end\n    if num == 'C' then return 12 end\n    if num == 'D'\
    \ then return 13 end\n    if num == 'E' then return 14 end\n    if num == 'F'\
    \ then return 15 end\nend", "    if num == '0' then return 0\n    elseif num ==\
    \ '1' then return 1\n    elseif num == '2' then return 2\n    elseif num == '3'\
    \ then return 3\n    elseif num == '4' then return 4\n    elseif num == '5' then\
    \ return 5\n    elseif num == '6' then return 6\n    elseif num == '7' then return\
    \ 7\n    elseif num == '8' then return 8\n    elseif num == '9' then return 9\n\
    \    elseif num == 'A' then return 10\n    elseif num == 'B' then return 11\n\
    \    elseif num == 'C' then return 12\n    elseif num == 'D' then return 13\n\
    \    elseif num == 'E' then return 14\n    elseif num == 'F' then return 15\n\
    \    end\nend", "    if num >= 10 then\n        return string.char(num - 10 +\
    \ string.byte('A'))\n    else\n        return tostring(num)\n    end\nend", " \
    \   return {a = 10, b = 11, c = 12, d = 13, e = 14, f = 15}[num] or tonumber(num)\n\
    end", "\treturn tonumber(num, 16)\nend", "  if (num >= 48 and num <= 57) then\
    \ return 1, 0 end\n  if (num >= 65 and num <= 70) then return 1, (num - 55) end\n\
    \  return 0, 0\nend", "    return tonumber(num, 16)\nend", "    -- 2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97\n    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result = 0\n    local\
    \ hex_nums = {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}\n    for i = 1,\
    \ #num do\n        local n = tonumber(num:sub(i, i)) or hex_nums[num:sub(i, i)]\n\
    \        if utils.contains(primes, n) then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend", "  local m = {\n    ['0'] = 0,\n\
    \    ['1'] = 1,\n    ['2'] = 2,\n    ['3'] = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n\
    \    ['6'] = 6,\n    ['7'] = 7,\n    ['8'] = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n\
    \    ['B'] = 11,\n    ['C'] = 12,\n    ['D'] = 13,\n    ['E'] = 14,\n    ['F']\
    \ = 15,\n  }\n  return m[num]\nend", "\tlocal n = tonumber(num, 16)\n\treturn\
    \ n and n < 10 or n == 11 or n == 13 or n == 17\nend", "    local i = 0\n    return\
    \ function()\n        i = i + 1\n        return string.sub(num, i, i)\n    end\n\
    end", "\tlocal hexkey = {[0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4, [5] = 5,\n\
    \t\t\t\t\t[6] = 6, [7] = 7, [8] = 8, [9] = 9, A = 10, B = 11,\n\t\t\t\t\tC = 12,\
    \ D = 13, E = 14, F = 15}\n\treturn hexkey[num]\nend", "\tlocal hex = {\n\t\t\
    ['0'] = 0,\n\t\t['1'] = 1,\n\t\t['2'] = 2,\n\t\t['3'] = 3,\n\t\t['4'] = 4,\n\t\
    \t['5'] = 5,\n\t\t['6'] = 6,\n\t\t['7'] = 7,\n\t\t['8'] = 8,\n\t\t['9'] = 9,\n\
    \t\t['A'] = 10,\n\t\t['B'] = 11,\n\t\t['C'] = 12,\n\t\t['D'] = 13,\n\t\t['E']\
    \ = 14,\n\t\t['F'] = 15,\n\t}\n\treturn hex[num]\nend", "    local t = {\n   \
    \     [\"0\"] = true, [\"1\"] = true, [\"2\"] = true, [\"3\"] = true, [\"4\"]\
    \ = true,\n        [\"5\"] = true, [\"6\"] = true, [\"7\"] = true, [\"8\"] = true,\
    \ [\"9\"] = true,\n        [\"A\"] = true, [\"B\"] = true, [\"C\"] = true, [\"\
    D\"] = true, [\"E\"] = true, [\"F\"] = true\n    }\n    return t[num] == true\n\
    end", "  local hexes = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \  for k,v in ipairs(hexes) do\n    if v == num then return k end\n  end\nend",
  "    return \"0123456789ABCDEF\":find(num)\nend", "    return {\n        ['0'] =\
    \ 0,\n        ['1'] = 1,\n        ['2'] = 2,\n        ['3'] = 3,\n        ['4']\
    \ = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n        ['7'] = 7,\n        ['8']\
    \ = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n        ['B'] = 11,\n       \
    \ ['C'] = 12,\n        ['D'] = 13,\n        ['E'] = 14,\n        ['F'] = 15,\n\
    \    }[num]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
