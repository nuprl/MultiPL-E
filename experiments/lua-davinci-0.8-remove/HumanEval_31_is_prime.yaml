name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\nlocal function\
  \ is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- Check if n is a positive integer.\n    if type(n) ~= \"number\"\
    \ or n <= 0 or n % 1 ~= 0 then\n        error(\"Invalid input. Expected positive\
    \ integer.\", 2)\n    end", "\t-- Make sure n is a positive integer.\n\tif not\
    \ (n > 0 and n % 1 == 0) then\n\t\treturn false\n\tend", "  if n == 1 then\n \
    \   return false\n  elseif n < 4 then\n    return true\n  elseif n % 2 == 0 then\n\
    \    return false\n  elseif n < 9 then\n    return true\n  elseif n % 3 == 0 then\n\
    \    return false\n  else\n    local r = math.floor(math.sqrt(n))\n    local f\
    \ = 5\n    while f <= r do\n      if n % f == 0 then\n        return false\n \
    \     elseif n % (f + 2) == 0 then\n        return false\n      end\n      f =\
    \ f + 6\n    end\n    return true\n  end\nend", "    if n < 2 then\n        return\
    \ false\n    end\n    if n == 2 then\n        return true\n    end\n    if n %\
    \ 2 == 0 then\n        return false\n    end\n    local f = 3\n    while f * f\
    \ <= n do\n        if n % f == 0 then\n            return false\n        end\n\
    \        f = f + 2\n    end\n    return true\nend", "  if n <= 1 then\n    return\
    \ false\n  elseif n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 ==\
    \ 0 then\n    return false\n  end", "  if n <= 1 then\n    return false\n  elseif\
    \ n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n    return\
    \ false\n  end", "  -- Bail early for 1 and 2, since it's technically not a prime.\n\
    \  if n == 1 or n == 2 then\n    return true\n  end", "  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  if n <= 3 then\n    return n >= 2\n  elseif n % 2 == 0 or n % 3 == 0 then\n\
    \    return false\n  else\n    for i = 5, math.floor(math.sqrt(n)), 6 do\n   \
    \   if n % i == 0 or n % (i + 2) == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\nend", "\tif n <= 1 then\n\t\treturn false\n\t\
    elseif n == 2 then\n\t\treturn true\n\telseif n % 2 == 0 then\n\t\treturn false\n\
    \tend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tif n ~= 2 and n % 2 == 0\
    \ then\n\t\treturn false\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    for\
    \ i = 2, n-1 do\n        if n % i == 0 then\n            return false\n      \
    \  end\n    end\n    return true\nend", "\tif n < 2 then\n\t\treturn false\n\t\
    end\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  if n == 1 then\n    return false\n  elseif\
    \ n < 4 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n  elseif\
    \ n < 9 then\n    return true\n  elseif n % 3 == 0 then\n    return false\n  else\n\
    \    local limit = math.sqrt(n)\n    local i = 5\n    while i <= limit do\n  \
    \    if n % i == 0 then\n        return false\n      end\n      if n % (i + 2)\
    \ == 0 then\n        return false\n      end\n      i = i + 6\n    end\n    return\
    \ true\n  end\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\t-- Base case, any\
    \ number less than 2 is not prime.\n\tif n < 2 then\n\t\treturn false\n\tend",
  "  if n <= 3 then\n    return n >= 2\n  elseif n % 2 == 0 or n % 3 == 0 then\n \
    \   return false\n  else\n    for i = 5, math.floor(math.sqrt(n)), 6 do\n    \
    \  if n % i == 0 or n % (i + 2) == 0 then\n        return false\n      end\n \
    \   end\n    return true\n  end\nend", "  if n < 2 then\n    return false\n  end\n\
    \  local i = 2\n  while i * i <= n do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "\tif n < 2 then\n\t\treturn\
    \ false\n\tend\n\tif n == 2 then\n\t\treturn true\n\tend\n\tif n % 2 == 0 then\n\
    \t\treturn false\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    -- Pre-define some\
    \ variables.\n    local lower, upper = 2, math.floor(math.sqrt(n))\n    -- Iterate\
    \ through all possible factors of the number.\n    for i = lower, upper do\n \
    \       -- If we get a clean division, the number is not prime.\n        if n\
    \ % i == 0 then\n            return false\n        end\n    end\n    -- Else the\
    \ number is prime.\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  elseif n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n\
    \    return false\n  end", "  if n < 2 then\n    return false\n  end\n  for i\
    \ = 2, n ^ 0.5 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  if n < 2 then\n    return false\n  end\n  local limit\
    \ = math.floor(math.sqrt(n))\n  for d = 2, limit do\n    if n % d == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  if n < 2 then\n \
    \   return false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tif n <= 1 then\n\t\
    \treturn false\n\telseif n == 2 then\n\t\treturn true\n\telseif n%2 == 0 then\n\
    \t\treturn false\n\tend\n\tlocal max = math.floor(math.sqrt(n))\n\tfor i = 3,\
    \ max, 2 do\n\t\tif n%i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  if n == 1 then\n    return false\n  elseif n < 4 then\n    return\
    \ true -- 2 and 3 are prime\n  elseif n % 2 == 0 then\n    return false\n  elseif\
    \ n < 9 then\n    return true -- we have already excluded 4,6 and 8.\n  elseif\
    \ n % 3 == 0 then\n    return false\n  else\n    local r = math.floor(math.sqrt(n))\
    \ -- n rounded to the greatest integer r so that r*r<=n\n    local f = 5\n   \
    \ while f <= r do\n      if n % f == 0 then\n        return false\n      end\n\
    \      if n % (f+2) == 0 then\n        return false\n      end\n      f = f+6\n\
    \    end\n    return true -- (in all other cases)\n  end\nend", "    if n == 2\
    \ then\n        return true\n    elseif n < 2 or n % 2 == 0 then\n        return\
    \ false\n    end", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n           \
    \ return false\n        end\n    end\n    return true\nend", "\tif n == 1 then\n\
    \t\treturn false\n\tend\n\tlocal i = 2\n\twhile i <= n / 2 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
  "  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "\tlocal i\n\tfor i = 2, math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", " \
    \ if n == 2 then\n    return true\n  elseif n < 2 or (n % 2) == 0 then\n    return\
    \ false\n  end", "  if n < 0 then\n    n = -n\n  end\n  if n == 0 or n == 1 then\n\
    \    return false\n  end\n  if n == 2 then\n    return true\n  end\n  for i =\
    \ 2, n - 1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n < 4 then\n\t\t\
    return true\n\tend\n\tif n % 2 == 0 then\n\t\treturn false\n\tend\n\tif n < 9\
    \ then\n\t\treturn true\n\tend\n\tif n % 3 == 0 then\n\t\treturn false\n\tend\n\
    \tlocal root = math.sqrt(n)\n\tlocal f = 5\n\twhile f <= root do\n\t\tif n % f\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif n % (f + 2) == 0 then\n\t\t\t\
    return false\n\t\tend\n\t\tf = f + 6\n\tend\n\treturn true\nend", "    -- 1 is\
    \ not a prime.\n    if n == 1 then\n        return false\n    end", "  -- check\
    \ if n is a multiple of 2\n  if n % 2 == 0 then return false end\n  -- we only\
    \ need to check up to the square root of n\n  for i = 3, math.sqrt(n), 2 do\n\
    \    if n % i == 0 then return false end\n  end\n  return true\nend", "    if\
    \ n < 2 then\n        return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\t-- nil and negative numbers are not prime\n\tif n ==\
    \ nil or n < 0 then\n\t\treturn false\n\tend", "  if n < 2 then\n    return false\n\
    \  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "    if n <= 1 then\n        return false\n\
    \    elseif n <= 3 then\n        return true\n    elseif n % 2 == 0 or n % 3 ==\
    \ 0 then\n        return false\n    end", "    -- Only check up to the square\
    \ root.\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n   \
    \     if n % i == 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    -- small numbers are trivially\
    \ prime\n    if n < 2 then\n        return false\n    end", "\tif n < 2 then\n\
    \t\treturn false\n\tend\n\tfor i = 2, math.floor(math.sqrt(n)) do\n\t\tif n %\
    \ i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if\
    \ n < 2 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tfor x=2,math.sqrt(n)\
    \ do\n\t\tif n % x == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    if n == 2 then\n        return true\n    elseif n < 2 or n % 2 == 0\
    \ then\n        return false\n    end", "    -- First check for small primes.\n\
    \    if n == 2 or n == 3 then\n        return true\n    elseif n < 2 or n % 2\
    \ == 0 then\n        return false\n    elseif n < 9 then\n        return true\n\
    \    elseif n % 3 == 0 then\n        return false\n    end", "    if n < 2 then\n\
    \        return false\n    end\n    for p in primes(n) do\n        if p < n then\n\
    \            if n % p == 0 then\n                return false\n            end\n\
    \        else\n            return true\n        end\n    end\nend", "  -- Check\
    \ if n is a multiple of 2.\n  if n % 2 == 0 then return false end\n  -- n is odd\
    \ at this point.  Check if n is a multiple of any odd number\n  -- between 3 and\
    \ sqrt(n).\n  for i = 3, math.sqrt(n), 2 do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\
    \tlocal i = 2\n\twhile i * i <= n do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend", "    if n < 2 then\n     \
    \   return false\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  --\
    \ Loop from 2 to square root of n and check for divisibility\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  for i = 2, math.floor(math.sqrt(n)) do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  if n <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n  elseif\
    \ n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "  if n < 2 then\n\
    \    return false\n  end\n  if n == 2 then\n    return true\n  end\n  if n % 2\
    \ == 0 then\n    return false\n  end\n  local max = math.floor(math.sqrt(n))\n\
    \  for i = 3, max, 2 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tfor\
    \ i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "  if n <= 3 then\n    return n >= 2\n  elseif n %\
    \ 2 == 0 or n % 3 == 0 then\n    return false\n  else\n    for i = 5, math.floor(math.sqrt(n)),\
    \ 6 do\n      if n % i == 0 or n % (i + 2) == 0 then\n        return false\n \
    \     end\n    end\n    return true\n  end\nend", "\tif n <= 1 then\n\t\treturn\
    \ false\n\telseif n <= 3 then\n\t\treturn true\n\telseif n % 2 == 0 or n % 3 ==\
    \ 0 then\n\t\treturn false\n\tend", "  local is_prime_n = true\n  local i = 2\n\
    \  while i < n do\n    if n % i == 0 then\n      is_prime_n = false\n      break\n\
    \    end\n    i = i + 1\n  end\n  return is_prime_n\nend", "\tif n == 2 then\n\
    \t\treturn true\n\telseif n == 3 then\n\t\treturn true\n\telseif n % 2 == 0 then\n\
    \t\treturn false\n\telseif n % 3 == 0 then\n\t\treturn false\n\tend", "  if n\
    \ <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n  elseif\
    \ n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "\tlocal max_check\
    \ = math.floor(math.sqrt(n))\n\tlocal div = 2\n\twhile div <= max_check do\n\t\
    \tif n % div == 0 then\n\t\t\treturn false\n\t\tend\n\t\tdiv = div + 1\n\tend\n\
    \treturn true\nend", "\t-- Check if n is a positive integer\n\tif n < 1 or n %\
    \ 1 ~= 0 then\n\t\treturn false\n\tend\n\t-- Check if n is prime\n\tfor i = 2,\
    \ n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "\t-- 0 and 1 are not prime.\n\tif n < 2 then\n\t\treturn false\n\
    \tend", "\t-- 0 and 1 are not prime.\n\tif n < 2 then\n\t\treturn false\n\tend",
  "  -- Catch any numbers less than 2.\n  if n < 2 then\n    return false\n  end",
  "  if n < 2 then\n    return false\n  end\n  for i = 2, n - 1 do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    if n <\
    \ 2 then\n        return false\n    end\n    if n == 2 then\n        return true\n\
    \    end\n    if n % 2 == 0 then\n        return false\n    end\n    local max\
    \ = math.floor(math.sqrt(n))\n    for i = 3, max, 2 do\n        if n % i == 0\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  -- Primes are only ever odd (except 2)\n  if n == 2 then return true end\n  if\
    \ n % 2 == 0 then return false end", "\tif n <= 1 then\n\t\treturn false\n\telseif\
    \ n <= 3 then\n\t\treturn true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn\
    \ false\n\tend", "\tif n == 2 then\n\t\treturn true\n\telseif n % 2 == 0 then\n\
    \t\treturn false\n\tend", "\tif not n or n == 1 then\n\t\treturn false\n\tend\n\
    \tif n == 2 then\n\t\treturn true\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if\
    \ n == 2 then\n        return true\n    elseif n < 2 or n % 2 == 0 then\n    \
    \    return false\n    end", "\t-- Return false if n is negative or 0\n\tif n\
    \ <= 0 then\n\t\treturn false\n\tend", "  if n < 2 then\n    return false\n  end\n\
    \  local max = math.floor(math.sqrt(n))\n  for i = 2, max do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ prime = true\n    if n % 2 == 0 then\n        return false\n    end\n    for\
    \ i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n            prime = false\n\
    \            break\n        end\n    end\n    return prime\nend", "  if n == 1\
    \ then\n    return false\n  elseif n == 2 then\n    return true\n  elseif n %\
    \ 2 == 0 then\n    return false\n  end", "  local max_divisor = math.floor(math.sqrt(n))\n\
    \  for i = 2, max_divisor do\n    if n % i == 0 then\n      return false\n   \
    \ end\n  end\n  return true\nend", "\tif n < 1 then\n\t\treturn false\n\tend\n\
    \tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "\tif n <= 1 then\n\t\treturn false\n\telseif\
    \ n == 2 then\n\t\treturn true\n\telseif n % 2 == 0 then\n\t\treturn false\n\t\
    end", "  if n <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n\
    \  elseif n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "\tif n < 2\
    \ then\n\t\treturn false\n\tend\n\tlocal m = math.floor(math.sqrt(n))\n\tlocal\
    \ i = 2\n\twhile i <= m do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn true\nend", "    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if (n < 2) then\n        return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        return false\n        end\n    end\n    return true\nend", "\tif n <\
    \ 2 then\n\t\treturn false\n\tend\n\t\n\tfor i = 2, math.floor(math.sqrt(n)) do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\treturn true\n\
    end", "    if n <= 1 then\n        return false\n    elseif n <= 3 then\n    \
    \    return true\n    elseif n % 2 == 0 or n % 3 == 0 then\n        return false\n\
    \    end", "  if n == 1 then\n    return false\n  elseif n < 4 then\n    return\
    \ true\n  elseif n % 2 == 0 then\n    return false\n  elseif n < 9 then\n    return\
    \ true\n  elseif n % 3 == 0 then\n    return false\n  else\n    local r = math.floor(math.sqrt(n))\n\
    \    local f = 5\n    while f <= r do\n      if n % f == 0 then\n        return\
    \ false\n      elseif n % (f + 2) == 0 then\n        return false\n      end\n\
    \      f = f + 6\n    end\n    return true\n  end\nend", "\tif n == 1 then\n\t\
    \treturn false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  if n == 1 then\n    return false\n\
    \  elseif n < 4 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n\
    \  elseif n < 9 then\n    return true\n  elseif n % 3 == 0 then\n    return false\n\
    \  else\n    local r = math.floor(math.sqrt(n))\n    local f = 5\n    while f\
    \ <= r do\n      if n % f == 0 then\n        return false\n      elseif n % (f\
    \ + 2) == 0 then\n        return false\n      end\n      f = f + 6\n    end\n\
    \    return true\n  end\nend", "  if n <= 1 then\n    return false\n  elseif n\
    \ <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n    return\
    \ false\n  end", "\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal p = 2\n\t\
    while p * p <= n do\n\t\tif n % p == 0 then\n\t\t\treturn false\n\t\tend\n\t\t\
    p = p + 1\n\tend\n\treturn true\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  -- Handle negative numbers and\
    \ zero.\n  if n <= 0 then\n    return false\n  end", "    -- First check if n\
    \ is a positive number.\n    if n <= 0 then\n        return false\n    end", " \
    \   for i = 2, n-1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n == 1 then\n        return\
    \ false\n    elseif n < 4 then\n        return true\n    elseif n % 2 == 0 then\n\
    \        return false\n    elseif n < 9 then\n        return true\n    elseif\
    \ n % 3 == 0 then\n        return false\n    else\n        local r = math.floor(math.sqrt(n))\n\
    \        local f = 5\n        while f <= r do\n            if n % f == 0 then\n\
    \                return false\n            end\n            if n % (f + 2) ==\
    \ 0 then\n                return false\n            end\n            f = f + 6\n\
    \        end\n        return true\n    end\nend", "    for i = 2, n - 1 do\n \
    \       if n % i == 0 then\n            return false\n        end\n    end\n \
    \   return true\nend", "\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  -- If n is less than 2,\
    \ it isn't prime.\n  if n < 2 then\n    return false\n  end", "  if n < 2 then\n\
    \    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tfor i = 2, n-1 do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n == 2 then\n\t\treturn true\n\t\
    end\n\tif n % 2 == 0 then\n\t\treturn false\n\tend\n\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "\t-- Loops through the numbers from 2 to the square root of the number,\n\
    \t-- and tests for a remainder of 0\n\tfor i = 2, math.sqrt(n) do\n\t\tif n %\
    \ i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if\
    \ n <= 3 then\n        return n >= 2\n    elseif n % 2 == 0 or n % 3 == 0 then\n\
    \        return false\n    else\n        for i = 5, math.floor(math.sqrt(n)),\
    \ 6 do\n            if n % i == 0 or n % (i + 2) == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nend", '  local
    prime = n ~= 1', "    if n == 2 then\n        return true\n    elseif n < 2 or\
    \ n % 2 == 0 then\n        return false\n    end", "  if n < 2 then\n    return\
    \ false\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if n < 2 then\n        return false\n\
    \    end\n    for i = 2, n ^ .5 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tif not is_integer(n)\
    \ then return false end\n\tif n <= 0 then return false end\n\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif n % i == 0 then return false end\n\tend\n\treturn true\nend", "\t\
    for i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "    if n < 2 then\n        return false\n    end\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  for d =\
    \ 2, n - 1 do\n    if n % d == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\t\n\tfor i = 2, math.sqrt(n)\
    \ do\n\t\tif math.mod(n, i) == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\
    \treturn true\nend", "  -- A number is prime if it is not divisible by any of\
    \ the previous primes.\n  -- We will use `primes` as a table of known primes.\n\
    \  for _,p in ipairs(primes) do\n    if n % p == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  if n <= 1 then\n    return false\n  elseif\
    \ n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n    return\
    \ false\n  end", "\t-- Use the fact that a prime number, other than 2 and 3, is\
    \ of form\n\t-- 6k+1 or 6k-1, k>=1.\n\tif n < 2 then\n\t\treturn false\n\telseif\
    \ n < 4 then\n\t\treturn true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn\
    \ false\n\telse\n\t\tlocal k = 1\n\t\twhile 6 * k - 1 <= math.sqrt(n) do\n\t\t\
    \tif n % (6 * k - 1) == 0 or n % (6 * k + 1) == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\t\tk = k + 1\n\t\tend\n\t\treturn true\n\tend\nend", '    local
    max = math.floor(math.sqrt(n))', "    for i = 2, n - 1 do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "    if n <= 1 then\n        return false\n    elseif n <= 3 then\n        return\
    \ true\n    elseif n % 2 == 0 or n % 3 == 0 then\n        return false\n    end",
  "\tif n <= 1 then\n\t\treturn false\n\telseif n == 2 then\n\t\treturn true\n\telseif\
    \ n % 2 == 0 then\n\t\treturn false\n\tend", "  if n == 2 then\n    return true\n\
    \  elseif n < 2 or n % 2 == 0 then\n    return false\n  end", "  -- Check the\
    \ division of n with all numbers from 2 to its square root.\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  if n <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n\
    \  elseif n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "\tif n ==\
    \ 1 then\n\t\treturn false\n\tend\n\tif n == 2 then\n\t\treturn true\n\tend\n\t\
    for i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "  if n <= 1 then\n    return false\n  elseif n <=\
    \ 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n    return\
    \ false\n  end", "  -- A simple function to calculate the square root with\n \
    \ -- limited precision.\n  local function sqrt(n)\n    local x = 1\n    repeat\n\
    \      x = (x + n / x) / 2\n    until x * x - n <= 0.1 and x * x - n >= -0.1\n\
    \    return x\n  end", "\tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2,\
    \ n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "  if n == 2 then\n    return true\n  elseif n < 2 or n % 2 == 0\
    \ then\n    return false\n  end", "\tif n < 2 then\n\t\treturn false\n\tend\n\t\
    \n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\t\n\treturn true\nend", "    if n == 1 then\n        return false\n  \
    \  elseif n < 4 then\n        return true\n    elseif n % 2 == 0 then\n      \
    \  return false\n    elseif n < 9 then\n        return true\n    elseif n % 3\
    \ == 0 then\n        return false\n    else\n        local r = math.floor(math.sqrt(n))\n\
    \        local f = 5\n        while f <= r do\n            if n % f == 0 then\n\
    \                return false\n            end\n            if n % (f + 2) ==\
    \ 0 then\n                return false\n            end\n            f = f + 6\n\
    \        end\n        return true\n    end\nend", "\tlocal function is_prime_1(a,b)\n\
    \t\treturn math.pow(a,b) % n == a\n\tend\n\tfor i = 2, n-1 do\n\t\tif is_prime_1(i,\
    \ n-1) == false then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "\tlocal div = 3\n\tlocal lim = math.floor(math.sqrt(n))\n\twhile n % div ~= 0 and\
    \ div <= lim do\n\t\tdiv = div + 2\n\tend\n\treturn div > lim\nend", "  -- Determine\
    \ whether a number is prime.\n  if n == 1 then\n    return false\n  elseif n <\
    \ 4 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n  elseif\
    \ n < 9 then\n    return true\n  elseif n % 3 == 0 then\n    return false\n  else\n\
    \    local f = 5\n    while f <= math.sqrt(n) do\n      if n % f == 0 then\n \
    \       return false\n      elseif n % (f + 2) == 0 then\n        return false\n\
    \      end\n      f = f + 6\n    end\n    return true\n  end\nend", "  if n ==\
    \ 1 then\n    return false\n  elseif n < 4 then\n    return true\n  elseif n %\
    \ 2 == 0 then\n    return false\n  elseif n < 9 then\n    return true\n  elseif\
    \ n % 3 == 0 then\n    return false\n  else\n    local r = math.floor(math.sqrt(n))\n\
    \    local f = 5\n    while f <= r do\n      if n % f == 0 then\n        return\
    \ false\n      elseif n % (f + 2) == 0 then\n        return false\n      end\n\
    \      f = f + 6\n    end\n    return true\n  end\nend", "\t-- If n < 2 then it\
    \ is not prime.\n\tif n < 2 then\n\t\treturn false\n\tend\n\t-- If n is 2 or 3\
    \ then it is prime.\n\tif n == 2 or n == 3 then\n\t\treturn true\n\tend\n\t--\
    \ If n is divisible by 2 or 3 then it is not prime.\n\tif n % 2 == 0 or n % 3\
    \ == 0 then\n\t\treturn false\n\tend\n\t-- If n has any divisor in the range [5,\
    \ sqrt(n)] then it is not prime.\n\tlocal divisor = 5\n\tlocal divisor_squared\
    \ = divisor * divisor\n\twhile divisor_squared <= n do\n\t\tif n % divisor ==\
    \ 0 or n % (divisor + 2) == 0 then\n\t\t\treturn false\n\t\tend\n\t\tdivisor =\
    \ divisor + 6\n\t\tdivisor_squared = divisor * divisor\n\tend\n\t-- If n is not\
    \ divisible by any number in the range [5, sqrt(n)] then it is prime.\n\treturn\
    \ true\nend", "    if n == 1 then\n        return false\n    elseif n < 4 then\n\
    \        return true\n    elseif n % 2 == 0 then\n        return false\n    elseif\
    \ n < 9 then\n        return true\n    elseif n % 3 == 0 then\n        return\
    \ false\n    else\n        local r = math.floor(math.sqrt(n))\n        local f\
    \ = 5\n        while f <= r do\n            if n % f == 0 then\n             \
    \   return false\n            end\n            if n % (f + 2) == 0 then\n    \
    \            return false\n            end\n            f = f + 6\n        end\n\
    \        return true\n    end\nend", "  if n <= 1 then\n    return false\n  elseif\
    \ n == 2 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n \
    \ end", "  if n < 2 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  if n <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n  elseif\
    \ n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "    local f = 2\n\
    \    while f < n do\n        if n % f == 0 then\n            return false\n  \
    \      end\n        f = f + 1\n    end\n    return true\nend", "    local limit\
    \ = math.sqrt(n)\n    for i = 2, limit do\n        if n % i == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "\t-- 0 and\
    \ 1 are neither prime nor composite\n\tif n < 2 then\n\t\treturn false\n\tend",
  "\t-- Edge cases\n\tif n < 2 then\n\t\treturn false\n\telseif n == 2 then\n\t\t\
    return true\n\tend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n == 2 then\n\
    \t\treturn true\n\tend\n\tif n % 2 == 0 then\n\t\treturn false\n\tend\n\tfor i\
    \ = 3, math.floor(math.sqrt(n)) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "\tfor i = 2, n - 1 do\n\t\tif n % i == 0\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if (n <=\
    \ 1) then\n        return false\n    elseif (n <= 3) then\n        return true\n\
    \    elseif (n % 2 == 0 or n % 3 == 0) then\n        return false\n    end", " \
    \ -- Some basic sanity checks.\n  if n < 2 then\n    return false\n  elseif n\
    \ == 2 then\n    return true\n  elseif n % 2 == 0 then\n    return false\n  end",
  "    if n < 2 then\n        return false\n    end\n    if n < 4 then\n        return\
    \ true\n    end\n    if n % 2 == 0 then\n        return false\n    end\n    local\
    \ limit = math.sqrt(n)\n    for i = 3, limit, 2 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ n <= 1 then\n    return false\n  elseif n <= 3 then\n    return true\n  elseif\
    \ n % 2 == 0 or n % 3 == 0 then\n    return false\n  end", "    if n == 1 then\n\
    \        return false\n    elseif n < 4 then\n        return true\n    elseif\
    \ n % 2 == 0 then\n        return false\n    elseif n < 9 then\n        return\
    \ true\n    elseif n % 3 == 0 then\n        return false\n    else\n        local\
    \ r = math.floor(math.sqrt(n))\n        local f = 5\n        while f <= r do\n\
    \            if n % f == 0 then\n                return false\n            end\n\
    \            if n % (f + 2) == 0 then\n                return false\n        \
    \    end\n            f = f + 6\n        end\n        return true\n    end\nend",
  "  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "\tif n <= 1 then\n\t\treturn false\n\telseif n <=\
    \ 3 then\n\t\treturn true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn\
    \ false\n\tend", "    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tif\
    \ (n <= 1) then\n\t\treturn false\n\telseif (n <= 3) then\n\t\treturn true\n\t\
    elseif (n % 2 == 0 or n % 3 == 0) then\n\t\treturn false\n\tend", "    if n <\
    \ 2 then\n        return false\n    end\n    if n < 4 then\n        return true\n\
    \    end\n    if n % 2 == 0 then\n        return false\n    end\n    if n < 9\
    \ then\n        return true\n    end\n    if n % 3 == 0 then\n        return false\n\
    \    end\n    local r = math.floor(math.sqrt(n))\n    local f = 5\n    while f\
    \ <= r do\n        if n % f == 0 then\n            return false\n        end\n\
    \        if n % (f + 2) == 0 then\n            return false\n        end\n   \
    \     f = f + 6\n    end\n    return true\nend", "\tif n < 2 then\n\t\treturn\
    \ false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal factors = 0\n\tfor i =\
    \ 1, n do\n\t\tif n % i == 0 then\n\t\t\tfactors = factors + 1\n\t\tend\n\tend\n\
    \tif factors == 2 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "    -- Obviously 0 and 1 are not prime.\n    if n < 2 then\n        return false\n\
    \    end", "  if n < 2 then\n    return false\n  end\n  if n % 2 == 0 then\n \
    \   return n == 2\n  end\n  local max = math.floor(math.sqrt(n))\n  for i = 3,\
    \ max, 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if (n <= 1) then\n    return false\n  elseif (n == 2) then\n\
    \    return true\n  elseif (n % 2 == 0) then\n    return false\n  end", "    if\
    \ n < 2 then\n        return false\n    end\n    if n == 2 then\n        return\
    \ true\n    end\n    if not(n % 2) then\n        return false\n    end\n    for\
    \ i = 3, math.sqrt(n), 2 do\n        if not(n % i) then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  elseif n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n\
    \    return false\n  end", "    -- Return false if `n` is even.\n    if n % 2\
    \ == 0 then\n        return false\n    end", "    if n < 2 then\n        return\
    \ false\n    end\n    if n == 2 then\n        return true\n    end\n    if n %\
    \ 2 == 0 then\n        return false\n    end\n    for i = 3, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\tif n <= 1 then\n\t\treturn false\n\telseif n <= 3 then\n\
    \t\treturn true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\t\
    end", "    -- base case: n=1 is not prime\n    if n <= 1 then\n        return\
    \ false\n    end", "\tif n <= 1 then\n\t\treturn false\n\telseif n <= 3 then\n\
    \t\treturn true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\t\
    end", "\t-- If n is not positive, then it cannot be prime.\n\tif n <= 0 then\n\
    \t\treturn false\n\tend", "  for i = 2, floor(sqrt(n)) do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tif n <= 1 then\n\t\
    \treturn false\n\telseif n <= 3 then\n\t\treturn true\n\telseif (n % 2 == 0) or\
    \ (n % 3 == 0) then\n\t\treturn false\n\tend", "\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "\t-- Check for edge cases.\n\tif n == 1 then\n\t\treturn false\n\telseif\
    \ n == 2 then\n\t\treturn true\n\tend", "    if n < 2 then\n        return false\n\
    \    end\n    local i = 2\n    while i*i <= n do\n        if n % i == 0 then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend", "    local sqrt = math.sqrt(n)\n    for i = 2, sqrt do\n       \
    \ if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "\tif n <= 1 then\n\t\treturn false\n\telseif n <= 3 then\n\t\t\
    return true\n\telseif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\tend",
  "    for _, x in ipairs(primes) do\n        if x * x > n then\n            break\n\
    \        end\n        if n % x == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "\tfor i = 2, math.sqrt(n) do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    -- Generate\
    \ all numbers between 1 and n/2.\n    for i = 2, n/2 do\n        -- We found a\
    \ divisor, so n is not prime.\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end", "  if n <= 1 then\n    return false\n  elseif\
    \ n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n    return\
    \ false\n  end", "    if n < 2 then\n        return false\n    end\n    if n ==\
    \ 2 then\n        return true\n    end\n    for i = 2, math.sqrt(n) do\n     \
    \   if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    for p = 2, math.floor(math.sqrt(n)) do\n        if (n % p)\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    if n < 2 then\n        return false\n    end\n    local sr = math.sqrt(n)\n\
    \    for i = 2, sr do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tfor i = 2, math.floor(math.sqrt(n))\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  if n == 2 then\n    return true\n  elseif n % 2 == 0 then\n    return\
    \ false\n  end", "    if n == 2 then\n        return true\n    elseif n % 2 ==\
    \ 0 then\n        return false\n    end", "\tif (n == 1) then\n\t\treturn false\n\
    \tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif (n % i == 0) then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    if n < 2 then\n        return false\n\
    \    end\n    for d = 2, math.sqrt(n) do\n        if n % d == 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  if n == 2\
    \ then\n    return true\n  elseif n % 2 == 0 then\n    return false\n  end", " \
    \ for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "    if n <= 3 then\n        return n >= 2\n    elseif\
    \ n % 2 == 0 or n % 3 == 0 then\n        return false\n    else\n        for i\
    \ = 5, math.floor(math.sqrt(n)), 6 do\n            if n % i == 0 or n % (i + 2)\
    \ == 0 then\n                return false\n            end\n        end\n    \
    \    return true\n    end\nend", "    local function iter(div, max)\n        if\
    \ n % div == 0 then\n            return false\n        elseif div < max then\n\
    \            return iter(div + 2, max)\n        else\n            return true\n\
    \        end\n    end\n    if n == 2 then\n        return true\n    elseif n <\
    \ 2 or n % 2 == 0 then\n        return false\n    else\n        return iter(3,\
    \ math.sqrt(n))\n    end\nend", "\tfor i = 2, math.floor(math.sqrt(n)) do\n\t\t\
    if n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t\
    -- All numbers below 2 are not prime.\n\tif n < 2 then\n\t\treturn false\n\tend",
  "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n \
    \ end\n  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    if n < 2 then\n        return false\n    end\n    if n == 2 then\n\
    \        return true\n    end\n    if not is_numeric(n) then\n        return nil\n\
    \    end\n    if n % 2 == 0 then\n        return false\n    end\n    for i = 3,\
    \ math.sqrt(n), 2 do\n        if n % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "\tfor i = 2, math.sqrt(n) do\n\t\
    \tif (n % i) == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    local i\n    if n == 2 then\n        return true\n \
    \   elseif (n < 2) or (n % 2 == 0) then\n        return false\n    end\n    for\
    \ i = 3, math.floor(math.sqrt(n)), 2 do\n        if n % i == 0 then\n        \
    \    return false\n        end\n    end\n    return true\nend", "\tif n == 2 then\n\
    \t\treturn true\n\telseif n % 2 == 0 then\n\t\treturn false\n\tend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
