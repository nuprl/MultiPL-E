name: HumanEval_4_mean_absolute_deviation
language: lua
prompt: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
  -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute\
  \ difference between each\n-- element and a centerpoint (mean in this case):\n--\
  \ MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
  \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    local mean = mean(numbers)\n    for _, v in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n    end\n    return\
    \ sum / #numbers\nend", "    assert(#numbers > 0, \"mean_absolute_deviation got\
    \ empty input\")\n    local x_mean = mean(numbers)\n    local sum = 0\n    for\
    \ _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - x_mean)\n    end\n\
    \    return sum / #numbers\nend", "  local mean = mean(numbers)\n  local devs\
    \ = {}\n  for i, num in ipairs(numbers) do\n    devs[i] = math.abs(num - mean)\n\
    \  end\n  return mean(devs)\nend", "    local n = #numbers\n    if n == 0 then\n\
    \        return 0,0\n    end\n    local mean = numbers:mean()\n    local sum =\
    \ 0\n    for i=1,n do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n\
    \    return mean, sum / n\nend", "    local total = 0\n    local count = 0\n \
    \   local mean = mean(numbers)\n    for i, v in ipairs(numbers) do\n        total\
    \ = total + math.abs(v - mean)\n        count = count + 1\n    end\n    return\
    \ total / count\nend", "\tlocal sum = 0\n\tlocal count = 0\n\tfor _, x in ipairs(numbers)\
    \ do\n\t\tsum = sum + x\n\t\tcount = count + 1\n\tend\n\tlocal mean = sum / count\n\
    \tlocal sum_of_abs_differences = 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum_of_abs_differences\
    \ = sum_of_abs_differences + math.abs(x - mean)\n\tend\n\treturn sum_of_abs_differences\
    \ / count\nend", "    if #numbers == 0 then\n        return 0\n    end", "   \
    \ local length = #numbers\n    if length == 0 then\n        return 0\n    end",
  "  local count = #numbers\n  local sum_numbers = 0\n  local sum_abs_diffs = 0\n\
    \  for i,v in ipairs(numbers) do\n    sum_numbers = sum_numbers + v\n  end\n \
    \ local mean = sum_numbers / count\n  for i,v in ipairs(numbers) do\n    sum_abs_diffs\
    \ = sum_abs_diffs + math.abs(v - mean)\n  end\n  return sum_abs_diffs / count\n\
    end", "  local mean = jstats.mean(numbers)\n  local deviations = {}\n  for i,number\
    \ in ipairs(numbers) do\n    table.insert(deviations, math.abs(number - mean))\n\
    \  end\n  return jstats.mean(deviations)\nend", "  local mean = 0\n  local count\
    \ = 0\n  for _, val in pairs(numbers) do\n    mean = mean + val\n    count = count\
    \ + 1\n  end\n  mean = mean / count\n  local sum = 0\n  for _, val in pairs(numbers)\
    \ do\n    sum = sum + math.abs(val - mean)\n  end\n  return sum / count\nend",
  "  if #numbers == 0 then\n    return 0, 0\n  end", "    -- need at least two elements\
    \ to calculate mean deviation\n    if #numbers < 2 then\n        return 0\n  \
    \  end", "\tassert(type(numbers) == \"table\", \"numbers argument must be a table\"\
    )\n\tassert(#numbers > 0, \"numbers argument must contain at least one value\"\
    )", "    local mean = mean(numbers)\n    local sum = 0\n    for _,n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end", "  local n     = 0\n  local sum   = 0\n  local mean  = 0\n  local diff \
    \ = 0\n  local count = 0\n  local sumsq = 0\n  local abs   = math.abs", "    local\
    \ mean = mean(numbers)\n    local absolute_deviations = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(number\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend", "\tlocal mean\
    \ = mean(numbers)\n\tlocal sum = 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum\
    \ = sum + math.abs(x - mean)\n\tend\n\treturn sum / #numbers\nend", "  local mean\
    \ = util.mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers) do\n  \
    \  sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend", "  local\
    \ mean = average(numbers)\n  local absolute_deviations = {}\n  for i, n in ipairs(numbers)\
    \ do\n    table.insert(absolute_deviations, math.abs(n - mean))\n  end\n  return\
    \ average(absolute_deviations)\nend", "  assert(type(numbers) == \"table\", \"\
    Not a table.\")\n  assert(next(numbers), \"Empty table.\")", "    local mean =\
    \ mean(numbers)\n    local absolute_deviations = {}\n    for i, v in ipairs(numbers)\
    \ do\n        absolute_deviations[i] = math.abs(v - mean)\n    end\n    return\
    \ mean(absolute_deviations)\nend", "  local sum = 0\n  local count = 0\n  local\
    \ mean = 0\n  for _,v in pairs(numbers) do\n    sum = sum + v\n    count = count\
    \ + 1\n  end\n  mean = sum / count\n  sum = 0\n  for _,v in pairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / count\nend", "    local\
    \ size = #numbers\n    if size == 0 then\n        return nil\n    end", "  --\
    \ Calculate the mean\n  local mean = mean(numbers)\n  -- Calculate the absolute\
    \ difference from the mean for each element\n  local abs_deviations = map(function(num)\
    \ return math.abs(num - mean) end, numbers)\n  -- Calculate the mean of the absolute\
    \ differences\n  return mean(abs_deviations)\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(number - mean)\n    end\n    return sum / #numbers\nend", "  local\
    \ n = #numbers\n  if n < 2 then\n    return nil\n  end", "    local total = 0\n\
    \    local count = 0\n    local mean = mean(numbers)\n    for _, value in ipairs(numbers)\
    \ do\n        total = total + math.abs(value - mean)\n        count = count +\
    \ 1\n    end\n    return total / count\nend", "  local mean = mean(numbers)\n\
    \  local deviations = {}\n  for _,x in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(x - mean))\n  end\n  return mean(deviations)\nend", "  if not numbers\
    \ or not #numbers then\n    return 0\n  end", "  local total = 0\n  local mean\
    \ = 0\n  local count = 0\n  local n = #numbers\n  for i = 1, n do\n    local v\
    \ = numbers[i]\n    total = total + v\n    count = count + 1\n  end\n  mean =\
    \ total / count\n  total = 0\n  for i = 1, n do\n    local v = numbers[i]\n  \
    \  total = total + math.abs(v - mean)\n  end\n  return total / count\nend", " \
    \   local mean = mean(numbers)\n    local absolute_deviations = {}\n    for i,\
    \ x in ipairs(numbers) do\n        absolute_deviations[i] = math.abs(x - mean)\n\
    \    end\n    return mean(absolute_deviations)\nend", "  local x_mean = mean(numbers)\n\
    \  local N = table.getn(numbers)\n  local sum = 0\n  for _,x in pairs(numbers)\
    \ do\n    sum = sum + math.abs(x - x_mean)\n  end\n  return sum / N\nend", " \
    \   local length = #numbers\n    local sum = 0", "  -- Check for bad input; if\
    \ empty table, return nil\n  if #numbers == 0 then\n    return nil\n  end", " \
    \   local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, num in ipairs(numbers) do\n        sum = sum + math.abs(num - mean)\n   \
    \     count = count + 1\n    end\n    return sum / count\nend", "  local sum =\
    \ 0\n  local num_numbers = 0\n  local mean\n  for _, num in ipairs(numbers) do\n\
    \    sum = sum + num\n    num_numbers = num_numbers + 1\n  end\n  mean = sum /\
    \ num_numbers\n  sum = 0\n  for _, num in ipairs(numbers) do\n    sum = sum +\
    \ math.abs(num - mean)\n  end\n  return sum / num_numbers\nend", "\tlocal avg\
    \ = avg(numbers)\n\tlocal sum = 0\n\tfor _, v in ipairs(numbers) do\n\t\tsum =\
    \ sum + math.abs(v - avg)\n\tend\n\treturn sum / #numbers\nend", "  local sum,\
    \ count = 0, 0\n  for i, num in ipairs(numbers) do\n    sum = sum + num\n    count\
    \ = count + 1\n  end\n  local mean = sum / count\n  local sum_deviations = 0\n\
    \  for i, num in ipairs(numbers) do\n    sum_deviations = sum_deviations + math.abs(num\
    \ - mean)\n  end\n  return sum_deviations / count\nend", "  local n = #numbers\n\
    \  if n < 2 then\n    return 0\n  end\n  local mean = mean(numbers)\n  local deviation\
    \ = 0\n  for _, v in ipairs(numbers) do\n    deviation = deviation + math.abs(v\
    \ - mean)\n  end\n  return deviation / n\nend", "  local mean = mean(numbers)\n\
    \  local dev_sum = 0\n  for _, num in ipairs(numbers) do\n    dev_sum = dev_sum\
    \ + math.abs(num - mean)\n  end\n  return dev_sum / #numbers\nend", "  local mean\
    \ = average(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\nend",
  "    local mean = mean(numbers)\n    local deviations = { }\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(deviations, math.abs(n - mean))\n    end\n    return\
    \ mean(deviations)\nend", "    local count = #numbers\n    if count == 0 then\n\
    \        return nil\n    end", "    local n = #numbers\n    if n == 0 then\n \
    \       return 0\n    end\n    local mean = mean(numbers)\n    local function\
    \ diff(n)\n        return math.abs(n - mean)\n    end\n    local sum = 0\n   \
    \ for _, v in ipairs(numbers) do\n        sum = sum + diff(v)\n    end\n    return\
    \ sum / n\nend", "  local mean = mean(numbers)\n  local abs_diffs = {}\n  for\
    \ _, number in ipairs(numbers) do\n    table.insert(abs_diffs, math.abs(number\
    \ - mean))\n  end\n  return mean(abs_diffs)\nend", "  if #numbers == 0 then\n\
    \    return 0\n  end", "    local number_count = #numbers\n    local sum = 0\n\
    \    local mean = math.mean(numbers)\n    for i, num in ipairs(numbers) do\n \
    \       sum = sum + math.abs(num - mean)\n    end\n    return sum / number_count\n\
    end", "\tlocal mean, sum = mean(numbers)\n\tfor _, number in ipairs(numbers) do\n\
    \t\tsum = sum + math.abs(number - mean)\n\tend\n\treturn sum / #numbers\nend",
  "\tlocal n = #numbers\n\tlocal x_mean = mean(numbers)\n\tlocal deviations = {}\n\
    \tfor _, num in ipairs(numbers) do\n\t\tdeviations[#deviations + 1] = math.abs(num\
    \ - x_mean)\n\tend\n\treturn mean(deviations)\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0", "    local mean = average(numbers)\n    local average_diffs\
    \ = average(map(function(x) return math.abs(x - mean) end, numbers))\n    return\
    \ average_diffs\nend", "  local mean = 0.0\n  for _, v in ipairs(numbers) do\n\
    \    mean = mean + v\n  end\n  mean = mean / #numbers", "  local mean = mean(numbers)\n\
    \  local differences = {}\n  for _, number in ipairs(numbers) do\n    table.insert(differences,\
    \ math.abs(number - mean))\n  end\n  return mean(differences)\nend", "  local\
    \ sum = 0\n  local mean = average(numbers)\n  for _, x in ipairs(numbers) do\n\
    \    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend", " \
    \   local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ v in ipairs(numbers) do\n        absolute_deviations[#absolute_deviations +\
    \ 1] = math.abs(v - mean)\n    end\n    return mean(absolute_deviations)\nend",
  "    local mean = mean(numbers)\n    local total = 0\n    for _, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - mean)\n    end\n    return total /\
    \ #numbers\nend", "    local mean = get_mean(numbers)\n    local sum = 0\n   \
    \ for _, value in ipairs(numbers) do\n        sum = sum + math.abs(value - mean)\n\
    \    end\n    return sum / #numbers\nend", "    local mean = mean(numbers)\n \
    \   return mean_absolute_deviation_from_mean(numbers, mean)\nend", "    local\
    \ mean = mean(numbers)\n    local sum = 0", "    local mean = sum(numbers) / #numbers\n\
    \    local sum_of_absolute_deviations = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_absolute_deviations = sum_of_absolute_deviations + math.abs(number\
    \ - mean)\n    end\n    return sum_of_absolute_deviations / #numbers\nend", " \
    \   local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, number in ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n\
    \        count = count + 1\n    end\n    return sum / count\nend", "    local\
    \ n = #numbers\n    local sum = 0\n    local mean = 0\n    local m, i\n    for\
    \ i = 1, n do\n        sum = sum + numbers[i]\n    end\n    mean = sum / n\n \
    \   sum = 0\n    for i = 1, n do\n        sum = sum + math.abs(numbers[i] - mean)\n\
    \    end\n    m = sum / n\n    return m\nend", "  local mean = mean(numbers)\n\
    \  local deviations = table.map(numbers, function(x) return math.abs(x - mean)\
    \ end)\n  return mean(deviations)\nend", "    assert(type(numbers) == \"table\"\
    , \"numbers should be a table\")\n    assert(#numbers > 0, \"numbers table should\
    \ not be empty\")", "  local sum, mean = 0, mean(numbers)\n  for _, number in\
    \ ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n  end\n  return\
    \ sum / (#numbers)\nend", "  local mean = mean(numbers)\n  local abs_deviations\
    \ = {}\n  for i, v in ipairs(numbers) do\n    abs_deviations[i] = math.abs(v -\
    \ mean)\n  end\n  return mean(abs_deviations)\nend", "    local m = mean(numbers)\n\
    \    local sum = 0\n    for i,v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - m)\n    end\n    return sum / #numbers\nend", "  local sum = 0\n  local n\
    \ = 0\n  local mean = mean(numbers)\n  local abs = math.abs\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + abs(x - mean)\n    n = n + 1\n  end\n  return sum / n\n\
    end", "    -- Get the mean of this data set\n    local mean = mean(numbers)",
  "    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - mean)\n       \
    \ count = count + 1\n    end\n    return sum / count\nend", "    local len = #numbers\n\
    \    local sum = 0", "    local sum = 0.0\n    local mean = 0.0\n    local variance\
    \ = 0.0\n    local count = 0\n    for _, number in ipairs(numbers) do\n      \
    \  sum = sum + number\n        count = count + 1\n    end\n    mean = sum / count\n\
    \    for _, number in ipairs(numbers) do\n        variance = variance + math.abs(number\
    \ - mean)\n    end\n    return variance / count\nend", "  local mean = mean(numbers)\n\
    \  local dev_sum = 0\n  for _, v in ipairs(numbers) do\n    dev_sum = dev_sum\
    \ + math.abs(v - mean)\n  end\n  return dev_sum / #numbers\nend", "    local count\
    \ = #numbers\n    local sum = 0", "\tlocal n = #numbers\n\tlocal sum = 0\n\tlocal\
    \ mean = 0\n\tlocal i\n\tfor i = 1, n do\n\t\tsum = sum + numbers[i]\n\tend\n\t\
    mean = sum / n\n\tsum = 0\n\tfor i = 1, n do\n\t\tsum = sum + math.abs(numbers[i]\
    \ - mean)\n\tend\n\treturn sum / n\nend", "  local num = 0\n  local sum = 0\n\
    \  for i = 1, #numbers do\n    local num = numbers[i]\n    sum = sum + num\n \
    \ end\n  local mean = sum / #numbers\n  local sum = 0\n  for i = 1, #numbers do\n\
    \    local num = numbers[i]\n    sum = sum + math.abs(num - mean)\n  end\n  return\
    \ sum / #numbers\nend", "    local mean = f_mean(numbers)\n    local absolute_differences\
    \ = f_map(function(x) return math.abs(x - mean) end, numbers)\n    return f_mean(absolute_differences)\n\
    end", "    local mean = 0\n    for _, value in ipairs(numbers) do\n        mean\
    \ = mean + value\n    end\n    mean = mean / #numbers", "  local total = 0\n \
    \ local num_numbers = 0\n  local mean = 0\n  for _, x in ipairs(numbers) do\n\
    \    total = total + x\n    num_numbers = num_numbers + 1\n  end\n  mean = total\
    \ / num_numbers\n  local mad = 0\n  for _, x in ipairs(numbers) do\n    mad =\
    \ mad + math.abs(x - mean)\n  end\n  return mad / num_numbers\nend", "    -- Check\
    \ whether we have a single value, not a list of values.\n    -- If so, simply\
    \ return 0.\n    if #numbers == 1 then\n        return 0\n    end", "    -- Calculate\
    \ mean of the dataset\n    local x_mean = mean(numbers)\n    -- For each element,\
    \ calculate absolute difference with mean.\n    -- Sum up the results for all\
    \ elements and divide by the number of elements.\n    local sum = 0\n    for _,\
    \ v in ipairs(numbers) do\n        sum = sum + math.abs(v - x_mean)\n    end\n\
    \    return sum / #numbers\nend", "    assert(numbers and #numbers > 0, 'mean_absolute_deviation:\
    \ list of numbers to analyze is required')\n    local sum = 0\n    local mean\
    \ = 0\n    for _,v in ipairs(numbers) do\n        sum = sum + v\n    end\n   \
    \ mean = sum / #numbers\n    local deviations = {}\n    for _,v in ipairs(numbers)\
    \ do\n        table.insert(deviations, math.abs(v - mean))\n    end\n    return\
    \ average(deviations)\nend", "    local sum = 0\n    local count = 0\n    local\
    \ mean = mean(numbers)\n    for i, n in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(n - mean)\n        count = count + 1\n    end\n    return sum / count\n\
    end", "  -- Get mean value of all elements of the list:\n  local sum, count =\
    \ 0, 0\n  for _, n in ipairs(numbers) do\n    sum = sum + n\n    count = count\
    \ + 1\n  end\n  local x_mean = sum / count", "    local count = 0\n    local sum\
    \ = 0\n    local mean = 0\n    local mad = 0\n    local abs_diff_sum = 0", " \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, n in ipairs(numbers) do\n\
    \    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend", " \
    \   local sum = 0\n    local mean = 0\n    local n = 0\n    for _, number in ipairs(numbers)\
    \ do\n        if number == number then -- skip NANs\n            sum = sum + number\n\
    \            n = n + 1\n        end\n    end\n    mean = sum / n\n    sum = 0\n\
    \    for _, number in ipairs(numbers) do\n        if number == number then --\
    \ skip NANs\n            sum = sum + math.abs(number - mean)\n        end\n  \
    \  end\n    return sum / n\nend", "    if #numbers < 2 then\n        return 0\n\
    \    end", "  local mean = mean(numbers)\n  local diffs = {}\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(diffs, math.abs(n - mean))\n  end\n  return mean(diffs)\n\
    end", "    local sum = 0\n    local mean = mean(numbers)\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "    local sum = 0\n    local average = mean(numbers)\n\
    \    for _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - average)\n\
    \    end\n    return sum / #numbers\nend", "  local mean = mean(numbers)\n  local\
    \ average_error = 0\n  for i, v in ipairs(numbers) do\n    average_error = average_error\
    \ + math.abs(v - mean)\n  end\n  return average_error / #numbers\nend", "  local\
    \ mean = mean(numbers)\n  local deviations = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(number - mean))\n  end\n  return mean(deviations)\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end", "  if #numbers == 0 then\n    return 0\n  end", "  local mean = math.mean(numbers)\n\
    \  local sum = 0", "    local number_count = #numbers\n    if number_count ==\
    \ 0 then\n        return nil\n    end", "    local mean = mean(numbers)\n    local\
    \ difference_from_mean = {}\n    for k,v in pairs(numbers) do\n        difference_from_mean[k]\
    \ = math.abs(v - mean)\n    end\n    return mean(difference_from_mean)\nend",
  "  local mean = 0\n  local count = 0\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + v\n    count = count + 1\n  end\n  mean = sum / count\n\
    \  local mad = 0\n  local diffs = {}\n  for _, v in ipairs(numbers) do\n    local\
    \ diff = math.abs(v - mean)\n    mad = mad + diff\n    table.insert(diffs, diff)\n\
    \  end\n  local sorted_diffs = merge_sort(diffs)\n  local med_diff = sorted_diffs[math.floor(#sorted_diffs\
    \ / 2) + 1]\n  return mad / count, med_diff\nend", "    local n = #numbers\n \
    \   if n == 0 then\n        return 0\n    end\n    local mean = sum(numbers) /\
    \ n\n    local abs_diff = {}\n    for i = 1, n do\n        abs_diff[i] = math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum(abs_diff) / n\nend", "  local mean = mean(numbers)\n\
    \  local absolute_deviations = map(function(x) return math.abs(x - mean) end,\
    \ numbers)\n  return mean(absolute_deviations)\nend", "    local n = #numbers\n\
    \    local sum = 0\n    local x_mean = mean(numbers)\n    for i = 1, n do\n  \
    \      sum = sum + math.abs(numbers[i] - x_mean)\n    end\n    return sum / n\n\
    end", "    local mean = 0\n    local mad = 0\n    local n = 0\n    for _, x in\
    \ ipairs(numbers) do\n        mean = mean + x\n        n = n + 1\n    end\n  \
    \  mean = mean / n\n    for _, x in ipairs(numbers) do\n        mad = mad + math.abs(x\
    \ - mean)\n    end\n    return mad / n\nend", "  -- find dataset centerpoint\n\
    \  local mean = mean(numbers)\n  -- Subtract centerpoint from each element and\
    \ sum up the absolute values\n  local abs_diffs = table_reduce(numbers, function(a,b)\
    \ return a + math.abs(b - mean) end, 0)\n  -- divide sum by the number of elements,\
    \ that's the MAD\n  return abs_diffs / #numbers\nend", "    if type(numbers) ~=\
    \ \"table\" then\n        return nil\n    end", "    local n = #numbers\n    local\
    \ mean = 0\n    local sum = 0\n    local mad = 0\n    local diff\n    for i =\
    \ 1, n do\n        sum = sum + numbers[i]\n    end\n    mean = sum / n\n    sum\
    \ = 0\n    for i = 1, n do\n        diff = numbers[i] - mean\n        sum = sum\
    \ + math.abs(diff)\n    end\n    mad = sum / n\n    return mad\nend", "  local\
    \ mean = sum(numbers) / #numbers\n  local mad = 0\n  for _, number in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(number - mean)\n  end\n  return mad / #numbers\n\
    end", "  local sum, count = 0.0, 0\n  local mean = mean(numbers)\n  for _, x in\
    \ ipairs(numbers) do\n    sum = sum + math.abs(x - mean)\n    count = count +\
    \ 1\n  end\n  return sum / count\nend", "  local sum = 0\n  local count = 0\n\
    \  local mean = mean(numbers)\n  for _,v in pairs(numbers) do\n    sum = sum +\
    \ math.abs(v - mean)\n    count = count + 1\n  end\n  return sum / count\nend",
  "  assert(type(numbers) == \"table\", \"Numbers must be an array!\")\n  assert(#numbers\
    \ > 0, \"Cannot calculate MAD of an empty array!\")", "  local mean = math.average(numbers)\n\
    \  local dev = {}\n  for _, x in ipairs(numbers) do\n    dev[#dev + 1] = math.abs(x\
    \ - mean)\n  end\n  return math.average(dev)\nend", "    -- calculate mean\n \
    \   local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + number\n    end\n    local mean = sum / #numbers", "    local mean = mean(numbers)\n\
    \    local sum = 0", "\tlocal total = 0\n\tlocal mean = mean(numbers)\n\tfor _,\
    \ n in ipairs(numbers) do\n\t\ttotal = total + math.abs(n - mean)\n\tend\n\treturn\
    \ total / #numbers\nend", "  local count = #numbers\n  local mean = sum(numbers)\
    \ / count\n  local result = 0\n  for _, number in ipairs(numbers) do\n    result\
    \ = result + math.abs(number - mean)\n  end\n  return result / count\nend", " \
    \ -- calculate mean of dataset\n  local sum = 0\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + num\n  end\n  local mean = sum / #numbers", "    local count\
    \ = #numbers\n    if count == 0 then\n        return 0\n    end", "  -- Calculate\
    \ mean\n  local mean = average(numbers)\n  -- Calculate differences\n  local differences\
    \ = {}\n  for i, number in ipairs(numbers) do\n    differences[i] = math.abs(number\
    \ - mean)\n  end\n  -- Calculate and return mean\n  return average(differences)\n\
    end", "    local mean = mean(numbers)\n    local sum = 0\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "  local sum = 0\n  local count = 0\n  local\
    \ x_mean = mean(numbers)\n  for k,v in pairs(numbers) do\n    sum = sum + math.abs(v\
    \ - x_mean)\n    count = count + 1\n  end\n  return sum / count\nend", "    local\
    \ sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for _, value\
    \ in ipairs(numbers) do\n        sum = sum + math.abs(value - mean)\n        count\
    \ = count + 1\n    end\n    return sum / count\nend", "    local count = #numbers\n\
    \    local sum = 0\n    local mean = 0\n    for i = 1, count do\n        sum =\
    \ sum + numbers[i]\n    end\n    mean = sum / count\n    sum = 0\n    for i =\
    \ 1, count do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return\
    \ sum / count\nend", "    local x_mean = mean(numbers)\n    local count = #numbers\n\
    \    local sum = 0\n    for i = 1, count do\n        sum = sum + math.abs(numbers[i]\
    \ - x_mean)\n    end\n    return sum / count\nend", "    local stats = stats_for(numbers)\n\
    \    local centerpoint = stats.mean\n    local distances = {}\n    for _, number\
    \ in ipairs(numbers) do\n        distances[#distances + 1] = math.abs(number -\
    \ centerpoint)\n    end\n    return stats_for(distances).mean\nend", "  local\
    \ sum, mean, result = 0, mean(numbers)\n  for _, num in ipairs(numbers) do\n \
    \   sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend", " \
    \ local sum = 0\n  local count = 0\n  local mean = mean(numbers)\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n    count =\
    \ count + 1\n  end\n  return sum / count\nend", "    -- Calculate absolute value\
    \ of each x-x_mean and add them up\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - numbers.mean)\n    end\n    -- For a given\
    \ dataset and its centerpoint, divide the sum of absolute\n    -- differences\
    \ by the amount of elements\n    return sum / numbers.length\nend", "\tlocal m\
    \ = mean(numbers)\n\tlocal sum = 0", "  local sum = 0\n  local mean = mean(numbers)\n\
    \  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v - mean)\n  end\n\
    \  return sum / #numbers\nend", "    local sum = 0\n    local mean = 0\n    local\
    \ n = 0\n    local abs = math.abs\n    for _, v in ipairs(numbers) do\n      \
    \  sum = sum + v\n        n = n + 1\n    end\n    mean = sum / n\n    local mad\
    \ = 0\n    for _, v in ipairs(numbers) do\n        mad = mad + abs(v - mean)\n\
    \    end\n    return mad / n\nend", "  if #numbers < 1 then\n    return nil\n\
    \  end", "  assert(numbers, \"No numbers provided\")\n  local num_numbers = #numbers\n\
    \  if num_numbers < 2 then\n    return 0\n  end\n  local average = mean(numbers)\n\
    \  local deviations = {}\n  for _, value in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(value - average))\n  end\n  return mean(deviations)\nend", "  local\
    \ mean = mean(numbers)\n  local mad = 0\n  for _, n in ipairs(numbers) do\n  \
    \  mad = mad + math.abs(n - mean)\n  end\n  return mad / #numbers\nend", "   \
    \ local sum = 0\n    local count = 0\n    local min = math.huge\n    local max\
    \ = -math.huge\n    local mean = 0\n    local mad = 0", "    local count = #numbers\n\
    \    local sum = 0\n    local mean = 0\n    for i = 1, count do\n        sum =\
    \ sum + numbers[i]\n    end\n    mean = sum / count\n    local sum_of_differences\
    \ = 0\n    for i = 1, count do\n        sum_of_differences = sum_of_differences\
    \ + math.abs(numbers[i] - mean)\n    end\n    return sum_of_differences / count\n\
    end", "    -- Calculate mean\n    local N = #numbers\n    local mean = 0\n   \
    \ for i = 1, N do\n        mean = mean + numbers[i]\n    end\n    mean = mean\
    \ / N", "  local n = #numbers\n  if n == 0 then\n    return nil\n  end\n  local\
    \ total = 0\n  local mean = 0\n  for _,v in ipairs(numbers) do\n    total = total\
    \ + v\n  end\n  mean = total / n\n  total = 0\n  for _,v in ipairs(numbers) do\n\
    \    total = total + math.abs(v - mean)\n  end\n  return total / n\nend", "  \
    \  local sum = 0\n    local n = 0\n    local min = numbers[1]\n    local max =\
    \ numbers[1]\n    for _, n in ipairs(numbers) do\n        sum = sum + n\n    \
    \    n = n + 1\n        if n < min then\n            min = n\n        end\n  \
    \      if n > max then\n            max = n\n        end\n    end\n    local mean\
    \ = sum / n\n    local abs_deviation_sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        abs_deviation_sum = abs_deviation_sum + math.abs(n - mean)\n   \
    \ end\n    return abs_deviation_sum / n, min, max\nend", "\tlocal sum, count =\
    \ 0, 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum = sum + x\n\t\tcount = count\
    \ + 1\n\tend\n\tlocal mean = sum / count\n\tlocal mad = 0\n\tfor _, x in ipairs(numbers)\
    \ do\n\t\tmad = mad + math.abs(x - mean)\n\tend\n\treturn mad / count\nend", " \
    \ local sum = 0\n  local count = 0\n  for _, n in ipairs(numbers) do\n    sum\
    \ = sum + n\n    count = count + 1\n  end\n  local mean = sum / count\n  sum =\
    \ 0\n  for _, n in ipairs(numbers) do\n    sum = sum + math.abs(n - mean)\n  end\n\
    \  return sum / count\nend", "    local sum, count = 0, 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + n\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_deviation, sum_abs_deviation = 0, 0\n    for _,\
    \ n in ipairs(numbers) do\n        local deviation = n - mean\n        sum_deviation\
    \ = sum_deviation + deviation\n        sum_abs_deviation = sum_abs_deviation +\
    \ math.abs(deviation)\n    end\n    return sum_abs_deviation / count\nend", " \
    \   local mean = calculate_mean(numbers)\n    local total = 0\n    for _, n in\
    \ ipairs(numbers) do\n        total = total + math.abs(n - mean)\n    end\n  \
    \  return total / #numbers\nend", "    local mean = mean(numbers)\n    local sum\
    \ = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n\
    \    end\n    return sum / #numbers\nend", "    local mean = average(numbers)\n\
    \    local deviation = 0\n    for i = 1, #numbers do\n        deviation = deviation\
    \ + math.abs(numbers[i] - mean)\n    end\n    return deviation / #numbers\nend",
  "    local sum = 0.0\n    local count = 0\n    local sum_of_squares = 0.0\n    local\
    \ mean = 0.0\n    local dev = 0.0\n    for _, number in pairs(numbers) do\n  \
    \      sum = sum + number\n        count = count + 1\n    end\n    mean = sum\
    \ / count\n    for _, number in pairs(numbers) do\n        dev = math.abs(number\
    \ - mean)\n        sum_of_squares = sum_of_squares + dev\n    end\n    return\
    \ sum_of_squares / count\nend", "    local N = #numbers\n    local sum = 0", " \
    \ local sum = 0\n  local n = 0\n  local n_numbers = #numbers\n  if n_numbers ==\
    \ 0 then\n    return 0\n  end\n  local mean = mean(numbers)\n  -- to mitigate\
    \ the issue of a small quantization error causing incorrect\n  -- deviance calculation,\
    \ we use a threshold equal to a single quantization\n  -- step.\n  local threshold\
    \ = 1 / 10^4\n  local abs_difference = {}\n  for i = 1, n_numbers do\n    abs_difference[i]\
    \ = abs(numbers[i] - mean)\n    if abs_difference[i] < threshold then\n      abs_difference[i]\
    \ = 0\n    end\n    sum = sum + abs_difference[i]\n    n = n + 1\n  end\n  return\
    \ sum / n\nend", "    local sum, mean = 0, mean(numbers)\n    for _, number in\
    \ ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n    end\n \
    \   return sum / #numbers\nend", "    local sum = 0\n    local mean = average(numbers)\n\
    \    for i,v in ipairs(numbers) do\n        sum = sum + math.abs(v - mean)\n \
    \   end\n    return sum / #numbers\nend", "    local mean = mean(numbers)\n  \
    \  local sum = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v\
    \ - mean)\n    end\n    return sum / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local absolute_deviations = table.map(numbers, function(number)\n       \
    \ return math.abs(number - mean)\n    end)\n    return mean(absolute_deviations)\n\
    end", "    if type(numbers) ~= \"table\" then\n        error(\"Table argument\
    \ expected\", 2)\n    end\n    local total, count = 0, 0\n    for _,n in ipairs(numbers)\
    \ do\n        total = total + n\n        count = count + 1\n    end\n    local\
    \ mean = total / count\n    local deviation = 0\n    for _,n in ipairs(numbers)\
    \ do\n        deviation = deviation + math.abs(n - mean)\n    end\n    return\
    \ deviation / count\nend", "    local mean = get_mean(numbers)\n    local sum\
    \ = 0\n    for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i] - mean)\n\
    \    end\n    return sum / #numbers\nend", "  -- Validate input and calculate\
    \ mean\n  local mean = 0\n  local count = 0\n  for _, number in ipairs(numbers)\
    \ do\n    if (type(number) == \"number\") then\n      mean = mean + number\n \
    \     count = count + 1\n    end\n  end\n  if (count == 0) then\n    return 0\n\
    \  end\n  mean = mean / count", "  local sum, _len = 0, #numbers\n  local mean\
    \ = sum / _len\n  for _index_0 = 1, #numbers do\n    local number = numbers[_index_0]\n\
    \    sum = sum + math.abs(number - mean)\n  end\n  return sum / _len\nend", " \
    \   if #numbers == 0 then\n        return 0\n    end", "    local len = #numbers\n\
    \    if len == 0 then\n        return nil\n    end", "  local count = #numbers\n\
    \  if count == 0 then\n    return 0\n  end", "    local mean = mean(numbers)\n\
    \    local sum = 0\n    for i = 1, #numbers do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / #numbers\nend", "\tlocal t = type(numbers)\n\
    \tassert(t == \"table\", \"mean_absolute_deviation: expected a table but got \"\
    \ .. t)\n\tlocal N = #numbers\n\tassert(N > 0, \"mean_absolute_deviation: no input\
    \ numbers given\")\n\t-- Mean of the dataset\n\tlocal sum = 0\n\tfor _, num in\
    \ ipairs(numbers) do\n\t\tsum = sum + num\n\tend\n\tlocal mean = sum / N\n\t--\
    \ Abs. differences from the mean\n\tlocal sum_abs_diffs = 0\n\tfor _, num in ipairs(numbers)\
    \ do\n\t\tsum_abs_diffs = sum_abs_diffs + math.abs(num - mean)\n\tend\n\treturn\
    \ sum_abs_diffs / N\nend", "  local sum = 0\n  local mean = 0\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + number\n  end\n  mean = sum / #numbers\n\
    \  sum = 0\n  for _, number in ipairs(numbers) do\n    sum = sum + math.abs(number\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  local mean, sum_deviation\
    \ = mean(numbers)\n  return mean, sum_deviation / #numbers\nend", "\tlocal mean,\
    \ num\n\t-- Calculate the mean\n\tmean = mean(numbers)\n\tnum = #numbers\n\t--\
    \ Calculate the absolute differences\n\tlocal abs_diffs = {}\n\tfor i, value in\
    \ ipairs(numbers) do\n\t\tabs_diffs[i] = math.abs(value - mean)\n\tend\n\t-- Return\
    \ the mean of the absolute differences\n\treturn mean(abs_diffs)\nend", "  local\
    \ mean = mean(numbers)\n  local differences = {}\n  for _, num in ipairs(numbers)\
    \ do\n    local diff = math.abs(num - mean)\n    table.insert(differences, diff)\n\
    \  end\n  return mean(differences)\nend", "  local mean = table.mean(numbers)\n\
    \  local total = 0\n  for _, num in ipairs(numbers) do\n    total = total + math.abs(num\
    \ - mean)\n  end\n  return total / #numbers\nend", "  local sum = 0\n  local mean\
    \ = 0\n  local n = 0\n  for _, n in ipairs(numbers) do\n    sum = sum + n\n  \
    \  n = n + 1\n  end\n  mean = sum / n\n  sum = 0\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(n - mean)\n  end\n  return sum / n\nend", "   \
    \ local num_items = #numbers\n    local sum = 0\n    local mean = 0\n    local\
    \ deviation = 0\n    local deviation_sum = 0\n    for _, num in ipairs(numbers)\
    \ do\n        sum = sum + num\n    end\n    mean = sum / num_items\n    for _,\
    \ num in ipairs(numbers) do\n        deviation = math.abs(num - mean)\n      \
    \  deviation_sum = deviation_sum + deviation\n    end\n    return deviation_sum\
    \ / num_items\nend", "  -- In case of empty list, return NAN\n  if not numbers\
    \ or #numbers == 0 then\n    return math.huge\n  end", "  local sum = 0\n  local\
    \ num_numbers = 0\n  for _, num in ipairs(numbers) do\n    sum = sum + num\n \
    \   num_numbers = num_numbers + 1\n  end\n  if num_numbers > 0 then\n    local\
    \ mean = sum / num_numbers\n    local dev_sum = 0\n    for _, num in ipairs(numbers)\
    \ do\n      dev_sum = dev_sum + math.abs(num - mean)\n    end\n    return dev_sum\
    \ / num_numbers\n  else\n    return 0\n  end\nend", "    local sum, mean, abs_deviation\
    \ = 0, 0, 0\n    for _, number in ipairs(numbers) do\n        sum = sum + number\n\
    \    end\n    mean = sum / #numbers\n    for _, number in ipairs(numbers) do\n\
    \        abs_deviation = abs_deviation + math.abs(number - mean)\n    end\n  \
    \  return abs_deviation / #numbers\nend", "    local mean = average(numbers)\n\
    \    local abs_diff = map(numbers, function(x) return math.abs(x - mean) end)\n\
    \    return average(abs_diff)\nend", "  local mean = mean(numbers)\n  local absolute_deviations\
    \ = map(numbers, function(number)\n    return math.abs(number - mean)\n  end)\n\
    \  return mean(absolute_deviations)\nend", "  local mean = average(numbers)\n\
    \  local sum = 0\n  for _, v in ipairs(numbers) do\n    sum = sum + math.abs(v\
    \ - mean)\n  end\n  return sum / #numbers\nend", "    local _, mean = variance(numbers)\n\
    \    local mads = {}\n    for _, num in ipairs(numbers) do\n        table.insert(mads,\
    \ math.abs(num - mean))\n    end\n    return average(mads)\nend", "  local sum\
    \ = 0\n  local average = mean(numbers)\n  for _, n in ipairs(numbers) do\n   \
    \ sum = sum + math.abs(n - average)\n  end\n  return sum / #numbers\nend", " \
    \   local count = #numbers\n    local sum = 0\n    local mean = 0\n    local deviation_sum\
    \ = 0\n    for _, value in ipairs(numbers) do\n        sum = sum + value\n   \
    \ end\n    mean = sum / count\n    for _, value in ipairs(numbers) do\n      \
    \  deviation_sum = deviation_sum + math.abs(value - mean)\n    end\n    return\
    \ deviation_sum / count\nend", "  local sum = 0\n  local count = 0\n  local mean\
    \ = mean(numbers)\n  for _,x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - mean)\n    count = count + 1\n  end\n  return (sum / count)\nend", "  -- get\
    \ input values\n  local numbers = numbers\n  -- assume the mean of the dataset\
    \ is the centerpoint\n  local centerpoint = mean(numbers)\n  -- calculate absolute\
    \ differences between the centerpoint and each input\n  -- value, then sum and\
    \ average them.\n  local abs_differences = {}\n  for i,v in ipairs(numbers) do\n\
    \    abs_differences[i] = math.abs(v - centerpoint)\n  end\n  local abs_differences_sum\
    \ = 0\n  for i,v in ipairs(abs_differences) do\n    abs_differences_sum = abs_differences_sum\
    \ + v\n  end\n  local mean_absolute_deviation = abs_differences_sum / #numbers\n\
    \  return mean_absolute_deviation\nend", "  local sum = 0\n  local n = 0\n  local\
    \ mean = mean(numbers)\n  for i, v in ipairs(numbers) do\n    sum = sum + math.abs(v\
    \ - mean)\n    n = n + 1\n  end\n  return sum / n\nend", "  local mean = mean(numbers)\n\
    \  local abs = math.abs\n  local sum = 0\n  for _,x in ipairs(numbers) do\n  \
    \  sum = sum + abs(x - mean)\n  end\n  return sum / #numbers\nend", "    local\
    \ mean = mean(numbers)\n    local deviations = {}\n    for _, number in ipairs(numbers)\
    \ do\n        table.insert(deviations, math.abs(number - mean))\n    end\n   \
    \ return mean(deviations)\nend", "  local _, mean = mean_and_stddev(numbers)\n\
    \  local sum = 0\n  for _, x in ipairs(numbers) do\n    sum = sum + math.abs(x\
    \ - mean)\n  end\n  return sum / #numbers\nend", "  if not numbers or #numbers\
    \ == 0 then\n    return nil\n  end", "    local sum = 0\n    local count = 0\n\
    \    local mean = mean(numbers)\n    for _, x in ipairs(numbers) do\n        sum\
    \ = sum + math.abs(x - mean)\n        count = count + 1\n    end\n    return sum\
    \ / count\nend", "    local total = 0\n    local mean = mean(numbers)\n    for\
    \ _, num in ipairs(numbers) do\n        total = total + math.abs(num - mean)\n\
    \    end\n    return total / #numbers\nend", "  local sum = 0\n  local count =\
    \ 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers) do\n   \
    \ sum = sum + math.abs(number - mean)\n    count = count + 1\n  end\n  return\
    \ sum / count\nend", "  if not numbers or #numbers == 0 then\n    return nil\n\
    \  end", "  local mean = mean(numbers)\n  local diffs = {}\n  for i, number in\
    \ ipairs(numbers) do\n    diffs[i] = math.abs(number - mean)\n  end\n  return\
    \ mean(diffs)\nend", "  if not numbers or #numbers == 0 then\n    return nil\n\
    \  end", "    local sum, mean, abs_deviation_sum = 0, 0, 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + x\n    end\n    mean = sum / #numbers\n    for _, x\
    \ in ipairs(numbers) do\n        abs_deviation_sum = abs_deviation_sum + math.abs(x\
    \ - mean)\n    end\n    return abs_deviation_sum / #numbers\nend", "  local mean\
    \ = mean(numbers)\n  local accumulator = 0", "    local mean = (reduce(numbers,\
    \ function(a, b) return a + b end) / #numbers)\n    local absolute_deviations\
    \ = map(numbers, function(number)\n        return math.abs(number - mean)\n  \
    \  end)\n    return reduce(absolute_deviations, function(a, b) return a + b end)\
    \ / #absolute_deviations\nend", "  local sum = 0\n  local mean = 0\n  local count\
    \ = 0\n  local max, min\n  for _,n in ipairs(numbers) do\n    if not min or n\
    \ < min then min = n end\n    if not max or n > max then max = n end\n    sum\
    \ = sum + n\n    count = count + 1\n  end\n  if count > 0 then\n    mean = sum\
    \ / count\n  end\n  if min == max then\n    return 0\n  end\n  sum = 0\n  for\
    \ _,n in ipairs(numbers) do\n    sum = sum + math.abs(n - mean)\n  end\n  return\
    \ sum / count\nend", "    local sum = 0\n    local n = 0\n    local mean = mean(numbers)\n\
    \    for i = 1, #numbers do\n        n = n + 1\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / n\nend", "  local mean = mean(numbers)\n\
    \  local sum = 0\n  for _,v in ipairs(numbers) do\n    sum = sum + math.abs(v\
    \ - mean)\n  end\n  return sum / #numbers\nend", "    local mean = mean(numbers)\n\
    \    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum\
    \ + math.abs(number - mean)\n    end\n    return sum / #numbers\nend", "    local\
    \ average = mean(numbers)\n    local abs_deviations = {}\n    for _, x in ipairs(numbers)\
    \ do\n        table.insert(abs_deviations, math.abs(x - average))\n    end\n \
    \   return mean(abs_deviations)\nend", "    local average = mean(numbers)\n  \
    \  local sum = 0", "  -- Calculate mean.\n  local sum = 0\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + x\n  end\n  local x_mean = sum / #numbers"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
