name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given list of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ list.\n-- For example:\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  table.sort(nums, function(a, b)\n    local da = sum_digits(a)\n \
    \   local db = sum_digits(b)\n    if da ~= db then\n      return da < db\n   \
    \ else\n      return a < b\n    end\n  end)\n  return nums\nend", "  -- TODO:\
    \ write your code here\nend", "    table.sort(nums, function(a, b)\n        local\
    \ a_sum = sum_of_digits(a)\n        local b_sum = sum_of_digits(b)\n        if\
    \ a_sum == b_sum then\n            return a < b\n        end\n        return a_sum\
    \ < b_sum\n    end)\n    return nums\nend", "  local point = function(n)\n   \
    \ local sum = 0\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    return sum\n  end\n  local index = function(n)\n    for\
    \ i = 1, #nums do\n      if nums[i] == n then\n        return i\n      end\n \
    \   end\n  end\n  table.sort(nums, function(a, b)\n    local point_a = point(a)\n\
    \    local point_b = point(b)\n    if point_a == point_b then\n      return index(a)\
    \ < index(b)\n    else\n      return point_a < point_b\n    end\n  end)\n  return\
    \ nums\nend", "  -- body\nend", "    local mapping = {}\n    for i, n in ipairs(nums)\
    \ do\n        local sum = 0\n        while n > 0 do\n            sum = sum + n\
    \ % 10\n            n = math.floor(n / 10)\n        end\n        if mapping[sum]\
    \ == nil then\n            mapping[sum] = {}\n        end\n        table.insert(mapping[sum],\
    \ i)\n    end\n    local ordering = {}\n    for _, indices in pairs(mapping) do\n\
    \        table.sort(indices)\n        for _, i in ipairs(indices) do\n       \
    \     table.insert(ordering, i)\n        end\n    end\n    local result = {}\n\
    \    for _, i in ipairs(ordering) do\n        table.insert(result, nums[i])\n\
    \    end\n    return result\nend", "    -- your code goes here\nend", "    --\
    \ your implementation goes here\n    local sum_of_the_digits = {}\n    for i =\
    \ 1, #nums do\n        local count = 0\n        local num = nums[i]\n        for\
    \ j = 1, #tostring(num) do\n            local digit = tonumber(tostring(num):sub(j,\
    \ j))\n            count = count + digit\n        end\n        sum_of_the_digits[i]\
    \ = count\n    end\n    table.sort(sum_of_the_digits)\n    local result = {}\n\
    \    for i = 1, #sum_of_the_digits do\n        local sum = sum_of_the_digits[i]\n\
    \        for j = 1, #nums do\n            local count = 0\n            local num\
    \ = nums[j]\n            for k = 1, #tostring(num) do\n                local digit\
    \ = tonumber(tostring(num):sub(k, k))\n                count = count + digit\n\
    \            end\n            if count == sum then\n                result[i]\
    \ = num\n                break\n            end\n        end\n    end\n    return\
    \ result\nend", "  local function sum(n)\n    local s = 0\n    while n > 0 do\n\
    \      s = s + n % 10\n      n = math.floor(n / 10)\n    end\n    return s\n \
    \ end\n  table.sort(nums, function(a, b)\n    local as, bs = sum(a), sum(b)\n\
    \    if as ~= bs then\n      return as < bs\n    else\n      return a < b\n  \
    \  end\n  end)\n  return nums\nend", "  -- your code goes here\n  local nums_len\
    \ = #nums\n  local sum_table = {}\n  local sums = {}\n  local sum = 0\n  local\
    \ number = 0\n  for i = 1, nums_len do\n    sum = 0\n    number = nums[i]\n  \
    \  while number > 0 do\n      sum = sum + (number % 10)\n      number = math.floor(number\
    \ / 10)\n    end\n    sums[i] = sum\n    if sum_table[sum] == nil then\n     \
    \ sum_table[sum] = {}\n    end\n    table.insert(sum_table[sum], nums[i])\n  end\n\
    \  local ordered_nums = {}\n  for i = 1, nums_len do\n    table.insert(ordered_nums,\
    \ sum_table[sums[i]][1])\n    table.remove(sum_table[sums[i]], 1)\n  end\n  return\
    \ ordered_nums\nend", "    return {}\nend", "\tlocal tmp = {}\n\tlocal res = {}\n\
    \tfor i, v in ipairs(nums) do\n\t\tlocal sum = 0\n\t\tfor d in tostring(v):gmatch(\"\
    %d\") do\n\t\t\tsum = sum + tonumber(d)\n\t\tend\n\t\ttable.insert(tmp, { sum\
    \ = sum, i = i, v = v })\n\tend\n\ttable.sort(tmp, function(a, b)\n\t\tif a.sum\
    \ == b.sum then\n\t\t\treturn a.i < b.i\n\t\telse\n\t\t\treturn a.sum < b.sum\n\
    \t\tend\n\tend)\n\tfor _, v in ipairs(tmp) do\n\t\ttable.insert(res, v.v)\n\t\
    end\n\treturn res\nend", "\tlocal points = {}\n\tlocal new_nums = {}\n\tlocal\
    \ index = 1\n\tfor i = 1, #nums do\n\t\tlocal sum = 0\n\t\tlocal tmp = nums[i]\n\
    \t\twhile tmp > 0 do\n\t\t\tsum = sum + tmp % 10\n\t\t\ttmp = math.floor(tmp /\
    \ 10)\n\t\tend\n\t\tif points[sum] == nil then\n\t\t\tpoints[sum] = {}\n\t\tend\n\
    \t\ttable.insert(points[sum], nums[i])\n\tend\n\tfor i = 0, 9 * #nums do\n\t\t\
    if points[i] then\n\t\t\tfor j = 1, #points[i] do\n\t\t\t\tnew_nums[index] = points[i][j]\n\
    \t\t\t\tindex = index + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn new_nums\nend",
  "  local final_array = {}\n  local sum_table = {}\n  for i, v in ipairs(nums) do\n\
    \    local sum = 0\n    local aux = v\n    while aux > 0 do\n      sum = sum +\
    \ aux % 10\n      aux = math.floor(aux / 10)\n    end\n    sum_table[v] = sum\n\
    \  end\n  for _, v in ipairs(nums) do\n    local min = sum_table[v]\n    local\
    \ min_index = v\n    for i, k in ipairs(nums) do\n      if sum_table[k] < min\
    \ then\n        min = sum_table[k]\n        min_index = k\n      end\n    end\n\
    \    table.insert(final_array, min_index)\n    sum_table[min_index] = 999\n  end\n\
    \  return final_array\nend", "    -- Write your code here\n    return {}\nend",
  "  -- your code here\nend", "  -- your code here\nend", "    -- Your code here\n\
    end", "  local t = {}\n  local i = 0\n  local x = 0\n  local y = 0\n  local digit\
    \ = 0\n  local result = {}\n  local sum_of_digits = 0\n  local least_digit = 0\n\
    \  while nums[i] do\n    t[i] = {}\n    x = nums[i]\n    sum_of_digits = 0\n \
    \   while x > 0 do\n      digit = x % 10\n      sum_of_digits = sum_of_digits\
    \ + digit\n      x = (x - digit) / 10\n    end\n    t[i][\"sum_of_digits\"] =\
    \ sum_of_digits\n    t[i][\"index\"] = i\n    t[i][\"value\"] = nums[i]\n    i\
    \ = i + 1\n  end\n  i = 0\n  while t[i] do\n    result[i] = t[i][\"value\"]\n\
    \    i = i + 1\n  end\n  while i > 0 do\n    least_digit = t[0][\"sum_of_digits\"\
    ]\n    x = 0\n    y = 0\n    while t[x] do\n      if t[x][\"sum_of_digits\"] <\
    \ least_digit then\n        least_digit = t[x][\"sum_of_digits\"]\n        y =\
    \ x\n      end\n      x = x + 1\n    end\n    result[i] = t[y][\"value\"]\n  \
    \  t[y][\"sum_of_digits\"] = t[y][\"sum_of_digits\"] + 1000\n    i = i - 1\n \
    \ end\n  return result\nend", "  -- your code here\nend\nassert(order_by_points({20,\
    \ 100, 1, 5}) == {1, 5, 20, 100})\nassert(order_by_points({4, 13, 5, 9}) == {4,\
    \ 5, 9, 13})\nassert(order_by_points({107, 1, 8}) == {1, 8, 107})\nassert(order_by_points({})\
    \ == {})", "    -- Insert your code here...\n    local data = {}\n    for i, v\
    \ in ipairs(nums) do\n        local s = 0\n        while v ~= 0 do\n         \
    \   s = s + v % 10\n            v = math.floor(v / 10)\n        end\n        table.insert(data,\
    \ {i, s})\n    end\n    table.sort(data, function(a, b)\n        if a[2] == b[2]\
    \ then\n            return a[1] < b[1]\n        else\n            return a[2]\
    \ < b[2]\n        end\n    end)\n    local ret = {}\n    for i, v in ipairs(data)\
    \ do\n        table.insert(ret, nums[v[1]])\n    end\n    return ret\nend", " \
    \ local temp, indices = {}, {}\n  for _, num in ipairs(nums) do\n    local key\
    \ = 0\n    while num > 0 do\n      key = key + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if not temp[key] then\n      temp[key] = {}\n      indices[key]\
    \ = 1\n    end\n    temp[key][indices[key]] = _\n    indices[key] = indices[key]\
    \ + 1\n  end\n  local result = {}\n  for key, value in pairs(temp) do\n    for\
    \ _, index in ipairs(value) do\n      result[#result + 1] = nums[index]\n    end\n\
    \  end\n  return result\nend", "    local res = {}\n    local s = {}\n    for\
    \ i = 1, #nums do\n        s[i] = sum_of_digits(nums[i])\n    end\n    for i =\
    \ 1, #nums do\n        index = i\n        for j = i + 1, #nums do\n          \
    \  if s[j] < s[index] then\n                index = j\n            end\n     \
    \   end\n        res[i] = nums[index]\n        nums[index] = nums[i]\n       \
    \ s[index] = s[i]\n    end\n    return res\nend", "  local points = {}\n  for\
    \ i, num in ipairs(nums) do\n    points[num] = sum_of_digits(num)\n  end\n  table.sort(nums,\
    \ function(a, b)\n    if points[a] == points[b] then\n      return a < b\n   \
    \ else\n      return points[a] < points[b]\n    end\n  end)\n  return nums\nend",
  "\tlocal sums = {}\n\tfor i,x in ipairs(nums) do\n\t\ttable.insert(sums,{sum_digits(x),i})\n\
    \tend\n\ttable.sort(sums,function(a,b) return a[1] < b[1] end)\n\tlocal res =\
    \ {}\n\tfor i,x in ipairs(sums) do\n\t\ttable.insert(res,nums[x[2]])\n\tend\n\t\
    return res\nend", "    -- local function digits_sum(n)\n    --     -- return (sum\
    \ of digits in n)\n    -- end\n    -- sort `nums` using digits_sum as an ordering\
    \ function\nend", "  local sum_of_digits = function(num)\n    -- returns the sum\
    \ of digits for given number\n    local sum = 0\n    for digit in tostring(num):gmatch('%d')\
    \ do\n      sum = sum + tonumber(digit)\n    end\n    return sum\n  end", "\t\
    table.sort(nums,function(a,b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\t\
    local tmp_a = a\n\t\tlocal tmp_b = b\n\t\twhile tmp_a ~= 0 do\n\t\t\tsum_a = sum_a\
    \ + tmp_a % 10\n\t\t\ttmp_a = math.floor(tmp_a / 10)\n\t\tend\n\t\twhile tmp_b\
    \ ~= 0 do\n\t\t\tsum_b = sum_b + tmp_b % 10\n\t\t\ttmp_b = math.floor(tmp_b /\
    \ 10)\n\t\tend\n\t\tif sum_a == sum_b then\n\t\t\treturn a < b\n\t\telse\n\t\t\
    \treturn sum_a < sum_b\n\t\tend\n\tend)\n\treturn nums\nend", "    for i = 1,\
    \ #nums do\n        for j = 1, #nums - 1 do\n            local _, a, b =  string.gsub(nums[j],\
    \ \"%d\", function(d) return tonumber(d) end)\n            local _, c, d =  string.gsub(nums[j\
    \ + 1], \"%d\", function(d) return tonumber(d) end)\n            if a + b > c\
    \ + d then\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    \
    \        end\n        end\n    end\n    return nums\nend", "    local indexed\
    \ = {}\n    for k,v in ipairs(nums) do\n        indexed[k] = {v, sum_digits(v)}\n\
    \    end\n    local sorted = {}\n    while #indexed > 0 do\n        local next_min\
    \ = {indexed[1][1], indexed[1][2], 1}\n        for k,v in ipairs(indexed) do\n\
    \            if v[2] < next_min[2] then\n                next_min = {v[1], v[2],\
    \ k}\n            end\n        end\n        table.insert(sorted, next_min[1])\n\
    \        table.remove(indexed, next_min[3])\n    end\n    return sorted\nend",
  "  -- Enter your code here\nend\nprint(\"order_by_points:\")\nutils.print_table(order_by_points({115,\
    \ 5, 9, 3, 20, 11}))", "    return {}\nend", "  -- write your code here\n  --\
    \ return ordered list\nend", "    return {}\nend", "\nend", end, "    -- your\
    \ code here\nend", "    -- Put your code here\n    local new_table = {}\n    for\
    \ i, v in ipairs(nums) do\n        new_table[i] = {v, math.floor(v / 10) + (v\
    \ % 10)}\n    end\n    table.sort(new_table, function(a, b) return a[2] < b[2]\
    \ end)\n    local returned_table = {}\n    for i, v in ipairs(new_table) do\n\
    \        returned_table[i] = v[1]\n    end\n    return returned_table\nend", "\n\
    end", "    return {}\nend", "\t-- your code here\nend", "  for i = 1, #nums do\n\
    \    for j = 1, #nums - 1 do\n      if i ~= j then\n        if sum_digits(nums[i])\
    \ > sum_digits(nums[j]) then\n          nums[i], nums[j] = nums[j], nums[i]\n\
    \        end\n      end\n    end\n  end\n  return nums\nend", "    return {}\n\
    end", "    -- # WRITE YOUR CODE HERE\n    return nums\nend", "    return table.sort(nums,\
    \ function(a, b)\n        local a_sum = tonumber(tostring(a):gsub(\"%D\", \"\"\
    ):sum())\n        local b_sum = tonumber(tostring(b):gsub(\"%D\", \"\"):sum())\n\
    \        if a_sum == b_sum then\n            return table.indexof(nums, a) < table.indexof(nums,\
    \ b)\n        else\n            return a_sum < b_sum\n        end\n    end)\n\
    end", "    -- <your code here>\nend", "    local point={}\n    local results={}\n\
    \    for k,v in pairs(nums) do\n        local n=v\n        local sum=0\n     \
    \   while n>0 do\n            sum=sum+n%10\n            n=math.floor(n/10)\n \
    \       end\n        if not point[sum] then\n            point[sum]={}\n     \
    \   end\n        table.insert(point[sum],v)\n    end\n    for k,v in pairs(point)\
    \ do\n        for i,j in pairs(v) do\n            table.insert(results,j)\n  \
    \      end\n    end\n    return results\nend", "    -- your code\nend\nassert(order_by_points({10,11,20,21,12,22,1})\
    \ == {1,10,11,12,20,21,22})\nassert(order_by_points({13,20,21,10,11,12}) == {13,10,11,12,20,21})",
  "    return {}\nend", "    local swapped = true\n    while swapped do\n        swapped\
    \ = false\n        for i = 1, #nums - 1 do\n            local sum1 = sum_of_digits(nums[i])\n\
    \            local sum2 = sum_of_digits(nums[i + 1])\n            if sum1 > sum2\
    \ then\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        \
    \        swapped = true\n            end\n        end\n    end\n    return nums\n\
    end", "    local items = {}\n    for i, n in ipairs(nums) do\n        items[i]\
    \ = {points = sum_of_digits(n), num = n}\n    end\n    table.sort(items, function(lhs,\
    \ rhs)\n        if lhs.points ~= rhs.points then\n            return lhs.points\
    \ < rhs.points\n        else\n            return lhs.num < rhs.num\n        end\n\
    \    end)\n    for i, item in ipairs(items) do\n        nums[i] = item.num\n \
    \   end\nend", "  local sums_nums = {}\n  for i, num in ipairs(nums) do\n    local\
    \ sum = 0\n    for digit in num:gmatch(\"%d\") do\n      sum = sum + tonumber(digit)\n\
    \    end\n    sums_nums[sum] = nums[i]\n  end\n  return sums_nums\nend", "  local\
    \ num_2_sum = {}\n  for i,v in ipairs(nums) do\n    if v ~= 0 then\n      if num_2_sum[v]\
    \ == nil then\n        num_2_sum[v] = 0\n      end\n      while v > 0 do\n   \
    \     num_2_sum[v] = num_2_sum[v] + v % 10\n        v = math.floor(v / 10)\n \
    \     end\n    end\n  end\n  table.sort(nums, function(a,b)\n    if num_2_sum[a]\
    \ == num_2_sum[b] then\n      return a < b\n    else\n      return num_2_sum[a]\
    \ < num_2_sum[b]\n    end\n  end)\n  return nums\nend", "    local helper = {}\n\
    \    for i,v in ipairs(nums) do\n        local sum = 0\n        for k in v:gmatch(\"\
    %d\") do\n            sum = sum + tonumber(k)\n        end\n        helper[i]\
    \ = {v, sum}\n    end\n    table.sort(helper, function(a,b)\n        if a[2] ==\
    \ b[2] then\n            return a[1] < b[1]\n        else\n            return\
    \ a[2] < b[2]\n        end\n    end)\n    local result = {}\n    for i,v in ipairs(helper)\
    \ do\n        result[i] = v[1]\n    end\n    return result\nend", "    local function\
    \ key_func(item)\n        return sum_digits(item)\n    end\n    table.sort(nums,\
    \ function(a, b)\n        return key_func(a) < key_func(b)\n    end)\n    return\
    \ nums\nend", "    -- Write your code here!\nend", "    return {}\nend", "   \
    \ local table_nums = {}\n    for key, value in pairs(nums) do\n        table_nums[key]\
    \ = {\n            value = value,\n            key = key,\n            points\
    \ = sum_digits(value)\n        }\n    end\n    table.sort(table_nums, function(a,\
    \ b)\n        if a.points == b.points then\n            return a.key < b.key\n\
    \        else\n            return a.points < b.points\n        end\n    end)\n\
    \    local new_nums = {}\n    for _, v in pairs(table_nums) do\n        table.insert(new_nums,\
    \ v.value)\n    end\n    return new_nums\nend", "    table.sort(nums, function(a,\
    \ b)\n        local a_digits = {string.match(a, '%d')}\n        local b_digits\
    \ = {string.match(b, '%d')}\n        local a_sum = 0\n        local b_sum = 0\n\
    \        for i, v in ipairs(a_digits) do\n            a_sum = a_sum + tonumber(v)\n\
    \        end\n        for i, v in ipairs(b_digits) do\n            b_sum = b_sum\
    \ + tonumber(v)\n        end\n        if a_sum == b_sum then\n            return\
    \ nums.indexOf(a) < nums.indexOf(b)\n        else\n            return a_sum <\
    \ b_sum\n        end\n    end)\n    return nums\nend", "\nend", "    return {}\n\
    end", "  -- your code here\nend", "  local sum = function(num)\n    local s =\
    \ 0\n    while num > 0 do\n      s = s + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    return s\n  end\n  table.sort(nums, function(a, b)\n   \
    \ return sum(a) < sum(b)\n  end)\n  return nums\nend", "  local sums = {}\n  for\
    \ _, v in ipairs(nums) do\n    local s = 0\n    while v > 0 do\n      s = s +\
    \ v % 10\n      v = math.floor(v / 10)\n    end\n    sums[s] = sums[s] or {}\n\
    \    table.insert(sums[s], v)\n  end\n  local ret = {}\n  for i = 0, #sums do\n\
    \    for _, v in ipairs(sums[i] or {}) do\n      table.insert(ret, v)\n    end\n\
    \  end\n  return ret\nend", "    local digits = {}\n    for i, v in ipairs(nums)\
    \ do\n        local digit_sum = v % 10\n        local digit = v\n        while\
    \ digit >= 10 do\n            digit = math.floor(digit / 10)\n            digit_sum\
    \ = digit_sum + digit % 10\n        end\n        table.insert(digits, {index =\
    \ i, value = v, sum = digit_sum})\n    end\n    table.sort(digits, function(a,\
    \ b)\n        if a.sum ~= b.sum then\n            return a.sum < b.sum\n     \
    \   else\n            return a.index < b.index\n        end\n    end)\n    local\
    \ res = {}\n    for _, v in ipairs(digits) do\n        table.insert(res, v.value)\n\
    \    end\n    return res\nend", "    return nums\nend", "  local function points(num)\n\
    \    local digits = {}\n    local last_digit = num\n    while last_digit > 0 do\n\
    \      local next_digit = math.floor(last_digit / 10)\n      table.insert(digits,\
    \ last_digit - next_digit * 10)\n      last_digit = next_digit\n    end\n    local\
    \ sum = 0\n    for i = 1, #digits do\n      sum = sum + digits[i]\n    end\n \
    \   return sum\n  end\n  local function arr_sort(arr)\n    local s = arr\n   \
    \ for i = 1, #s do\n      for j = 1, #s do\n        if points(s[i]) < points(s[j])\
    \ then\n          s[i], s[j] = s[j], s[i]\n        end\n      end\n    end\n \
    \   return s\n  end\n  return arr_sort(nums)\nend", "  -- the idea is to create\
    \ table with the sum of digits as key and index in nums as value\n  -- sort the\
    \ table and then populate the result table\n  local result = {}\n  local sumTable\
    \ = {}\n  for k, v in pairs(nums) do\n    local sum = sumDigits(v)\n    if (sumTable[sum]\
    \ == nil) then\n      sumTable[sum] = {}\n    end\n    table.insert(sumTable[sum],\
    \ k)\n  end\n  for k, v in pairs(sumTable) do\n    table.sort(v)\n    for i =\
    \ 1, #v do\n      table.insert(result, nums[v[i]])\n    end\n  end\n  return result\n\
    end", "    table.sort(nums, function(a, b)\n        local sum_a = sum_digits(a)\n\
    \        local sum_b = sum_digits(b)\n        if sum_a ~= sum_b then\n       \
    \     return sum_a < sum_b\n        else\n            return a < b\n        end\n\
    \    end)\n    return nums\nend\nassert(compare_tables(order_by_points({1, 2,\
    \ 3, 4, 5, 6}), {1, 2, 3, 4, 5, 6}))\nassert(compare_tables(order_by_points({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9}), {1, 2, 3, 4, 5, 6, 7, 8, 9}))\nassert(compare_tables(order_by_points({9,\
    \ 1, 10, 5, 8, 7, 6, 3, 4, 2}), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))\nassert(compare_tables(order_by_points({5,\
    \ 4, 3, 6, 1, 8, 7, 9, 2}), {1, 2, 3, 4, 5, 6, 7, 8, 9}))\nassert(compare_tables(order_by_points({5,\
    \ 4, 3, 6, 1, 8, 7, 9, 0}), {0, 1, 3, 4, 5, 6, 7, 8, 9}))\nassert(compare_tables(order_by_points({0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}))\nassert(compare_tables(order_by_points({9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}))\nassert(compare_tables(order_by_points({1,\
    \ 2, 4, 8, 16, 32, 64, 128, 256, 512}), {1, 2, 4, 8, 16", "  local res = {}\n\
    \  for k, v in pairs(nums) do\n    table.insert(res, {k,v})\n  end\n  table.sort(res,\
    \ function(x,y)\n      if sum(x[2]) == sum(y[2]) then\n        return x[1] < y[1]\n\
    \      else\n        return sum(x[2]) < sum(y[2])\n      end\n    end)\n  return\
    \ res\nend", "  local sum\n  local result = {}\n  for k,v in pairs(nums) do\n\
    \    sum = 0\n    for i in tostring(v):gmatch(\"%d\") do\n      sum = sum + tonumber(i)\n\
    \    end\n    result[k] = {v, sum}\n  end\n  table.sort(result, function(a,b)\
    \ return a[2] < b[2] end)\n  return result\nend", "    local summation = {}\n\
    \    local result = {}\n    for index, num in ipairs(nums) do\n        local sum\
    \ = 0\n        while num > 0 do\n            sum = sum + num % 10\n          \
    \  num = num // 10\n        end\n        if not summation[sum] then\n        \
    \    summation[sum] = {}\n        end\n        table.insert(summation[sum], index)\n\
    \    end\n    for sum in pairs(summation) do\n        table.sort(summation[sum])\n\
    \    end\n    for _, indexes in pairs(summation) do\n        for _, index in ipairs(indexes)\
    \ do\n            table.insert(result, nums[index])\n        end\n    end\n  \
    \  return result\nend\nassert(order_by_points({13, 20, 7, 4}) == {13, 4, 20, 7})\n\
    assert(order_by_points({0, 1, 2, 25}) == {0, 2, 1, 25})\nassert(order_by_points({52,\
    \ 23, 9, -1, 0}) == {9, 23, -1, 0, 52})\nassert(order_by_points({0, 1, 2, 5, 9,\
    \ 10, 11, 20, 25, 26, 27, 28, 30, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 70, 80, 99, 100, 101, 102, 103, 104, 110, 120, 121, 122, 123, 124, 125, 126,\
    \ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\
    \ 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,\
    \ 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,\
    \ 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,\
    \ 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,",
  "    -- todo\nend", "    local num_with_digit_sum = {}\n    local digit_sum_to_num\
    \ = {}\n    local digit_sum_to_num_list = {}\n    local num_with_index = {}\n\
    \    local min_digit_sum = math.maxinteger\n    local max_digit_sum = math.mininteger\n\
    \    for index, num in ipairs(nums) do\n        local digit_sum = 0\n        local\
    \ current_num = num\n        while current_num > 0 do\n            digit_sum =\
    \ digit_sum + current_num % 10\n            current_num = math.floor(current_num\
    \ / 10)\n        end\n        if digit_sum < min_digit_sum then\n            min_digit_sum\
    \ = digit_sum\n        end\n        if digit_sum > max_digit_sum then\n      \
    \      max_digit_sum = digit_sum\n        end\n        num_with_digit_sum[num]\
    \ = digit_sum\n        num_with_index[num] = index\n        if digit_sum_to_num[digit_sum]\
    \ then\n            digit_sum_to_num[digit_sum] = num\n        else\n        \
    \    table.insert(digit_sum_to_num_list, digit_sum)\n        end\n    end\n  \
    \  table.sort(digit_sum_to_num_list)\n    local sorted_nums = {}\n    for _, digit_sum\
    \ in ipairs(digit_sum_to_num_list) do\n        local num = digit_sum_to_num[digit_sum]\n\
    \        if num then\n            table.insert(sorted_nums, num)\n        else\n\
    \            local current_num = digit_sum_to_num[digit_sum]\n            while\
    \ current_num <= max_digit_sum do\n                local nums_with_digit_sum =\
    \ {}\n                for _, num in ipairs(nums) do\n                    if num_with_digit_sum[num]\
    \ == current_num then\n                        table.insert(nums_with_digit_sum,\
    \ num)\n                    end\n                end\n                table.sort(nums_with_digit_sum,\
    \ function(num1, num2)\n                    return num_with_index[num1]", "  \
    \  local sort_table = {}\n    for k,v in pairs(nums) do\n        local digits\
    \ = {}\n        for d in tostring(v):gmatch(\"%d\") do\n            digits[#digits+1]\
    \ = tonumber(d)\n        end\n        local sum = 0\n        for _,i in pairs(digits)\
    \ do\n            sum = sum + i\n        end\n        sort_table[#sort_table+1]\
    \ = {sum, k, v}\n    end\n    table.sort(sort_table, function(a,b)\n        if\
    \ a[1] == b[1] then\n            return a[2] < b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    local out = {}\n    for _,t\
    \ in pairs(sort_table) do\n        out[#out+1] = t[3]\n    end\n    return out\n\
    end", "  local function sum_digits(n)\n    local s = 0\n    for c in tostring(n):gmatch('.')\
    \ do\n      s = s + tonumber(c)\n    end\n    return s\n  end\n  local function\
    \ sum_digits_asc(t1, t2)\n    return t1[1] < t2[1]\n  end\n  local tuples = {}\n\
    \  for i, n in ipairs(nums) do\n    tuples[i] = {sum_digits(n), n}\n  end\n  table.sort(tuples,\
    \ sum_digits_asc)\n  local nums = {}\n  for i, t in ipairs(tuples) do\n    nums[i]\
    \ = t[2]\n  end\n  return nums\nend", "    local pointtable = {}\n    for i,num\
    \ in ipairs(nums) do\n        local points = 0\n        for digit in string.gmatch(tostring(num),\
    \ \"%d\") do\n            points = points + tonumber(digit)\n        end\n   \
    \     table.insert(pointtable, {index = i, points = points, num = num})\n    end\n\
    \    table.sort(pointtable, function(a,b)\n        if a.points < b.points then\n\
    \            return true\n        elseif a.points == b.points then\n         \
    \   return a.index < b.index\n        else\n            return false\n       \
    \ end\n    end)\n    local res = {}\n    for _,pair in ipairs(pointtable) do\n\
    \        table.insert(res, pair.num)\n    end\n    return res\nend", "  -- your\
    \ code here\n  local arr = {}\n  for k,v in pairs(nums) do\n    local sum = 0\n\
    \    for i in string.gmatch(v, '%d') do\n      sum = sum + tonumber(i)\n    end\n\
    \    table.insert(arr,{index = k,value = v,sum = sum})\n  end\n  table.sort(arr,function(a,b)\n\
    \    if a.sum == b.sum then\n      return a.index < b.index\n    else\n      return\
    \ a.sum < b.sum\n    end\n  end)\n  local res = {}\n  for k,v in pairs(arr) do\n\
    \    table.insert(res,v.value)\n  end\n  return res\nend", "  local by_sums =\
    \ {}\n  for i,v in ipairs(nums) do\n    local sum = 0\n    while v > 0 do\n  \
    \    sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n    by_sums[sum]\
    \ = by_sums[sum] or {}\n    table.insert(by_sums[sum], i)\n  end\n  local ordered\
    \ = {}\n  for sum,v in pairs(by_sums) do\n    table.sort(v)\n    for _,i in ipairs(v)\
    \ do\n      table.insert(ordered, nums[i])\n    end\n  end\n  return ordered\n\
    end\nassert(order_by_points({13, 20, 7, 4}) == {20, 4, 13, 7})\nassert(order_by_points({20,\
    \ 10}) == {20, 10})\nassert(order_by_points({5, 5, 5, 5}) == {5, 5, 5, 5})\nassert(order_by_points({42,\
    \ 23, 16, 15, 8, 4}) == {16, 15, 8, 4, 42, 23})\nassert(order_by_points({5, 2,\
    \ 12, 8, 12, 13, 4, 13, 9, 1, 9, 6, 8, 8, 5, 3, 10, 5, 3, 6, 1, 7, 13, 8, 5, 10,\
    \ 14, 8, 12, 2, 8, 4, 4, 7, 10, 8, 11, 12, 12, 10, 9, 7, 8, 10, 6, 7, 6, 8, 8,\
    \ 7, 5, 13, 7, 10, 5, 10, 13, 6, 10, 6, 1, 7, 10, 10, 10, 14, 8, 10, 8, 11, 10,\
    \ 14, 8, 12, 12, 7, 12, 8, 6, 10, 9, 7, 10, 11, 8, 9, 6, 10, 6, 7, 4, 6, 1, 8,\
    \ 5, 5, 4, 11, 10, 10, 11, 15, 5, 11, 14, 13, 10, 4, 13, 9, 5, 6, 8, 9, 10, 8",
  "  local nums_map = {}\n  local sum_map = {}\n  local sorted_nums = {}\n  for i,v\
    \ in ipairs(nums) do\n    local sum = 0\n    while v > 0 do\n      sum = sum +\
    \ v % 10\n      v = v // 10\n    end\n    if sum_map[sum] == nil then\n      sum_map[sum]\
    \ = {}\n    end\n    nums_map[sum] = nums_map[sum] + 1\n    sum_map[sum][nums_map[sum]]\
    \ = i\n  end\n  local sorted_sums = sort_keys(sum_map)\n  for i,v in ipairs(sorted_sums)\
    \ do\n    sorted_nums[i] = nums[sum_map[v][1]]\n    for j = 2, #sum_map[v] do\n\
    \      table.insert(sorted_nums, nums[sum_map[v][j]])\n    end\n  end\n  return\
    \ sorted_nums\nend", "  -- your code here\n  return {1, 2, 3}\nend", "\ttable.sort(nums,\
    \ function(a, b)\n\t\tlocal x = a\n\t\tlocal y = b\n\t\tlocal sum_a = 0\n\t\t\
    local sum_b = 0\n\t\twhile x > 0 do\n\t\t\tsum_a = sum_a + x % 10\n\t\t\tx = math.floor(x\
    \ / 10)\n\t\tend\n\t\twhile y > 0 do\n\t\t\tsum_b = sum_b + y % 10\n\t\t\ty =\
    \ math.floor(y / 10)\n\t\tend\n\t\tif sum_a == sum_b then\n\t\t\treturn a < b\n\
    \t\telse\n\t\t\treturn sum_a < sum_b\n\t\tend\n\tend)\n\treturn nums\nend", " \
    \  local temp = {}\n   for i, v in ipairs(nums) do\n      temp[#temp + 1] = {sum_of_digits(v),\
    \ i, v}\n   end\n   table.sort(temp, function(a, b)\n      return a[1] < b[1]\
    \ or (a[1] == b[1] and a[2] < b[2])\n   end)\n   local res = {}\n   for i, v in\
    \ ipairs(temp) do\n      res[i] = v[3]\n   end\n   return res\nend", "    local\
    \ sums = {}\n    for i, num in ipairs(nums) do\n        sums[i] = {sum = math.abs(num),\
    \ value = num}\n    end\n    table.sort(sums, function(a, b)\n        return a.sum\
    \ < b.sum\n    end)\n    local result = {}\n    for i, sum in ipairs(sums) do\n\
    \        result[i] = sum.value\n    end\n    return result\nend", "  -- .....\n\
    end", "\tlocal sortable = {}\n\tfor index, value in ipairs(nums) do\n\t\tlocal\
    \ sum = 0\n\t\twhile value > 0 do\n\t\t\tsum = sum + (value % 10)\n\t\t\tvalue\
    \ = math.floor(value / 10)\n\t\tend\n\t\tsortable[index] = {index, sum}\n\tend\n\
    \ttable.sort(sortable, function(a, b)\n\t\tif a[2] < b[2] then\n\t\t\treturn true\n\
    \t\telseif a[2] > b[2] then\n\t\t\treturn false\n\t\telse\n\t\t\treturn a[1] <\
    \ b[1]\n\t\tend\n\tend)\n\tlocal result = {}\n\tfor index, value in ipairs(sortable)\
    \ do\n\t\tresult[index] = nums[value[1]]\n\tend\n\treturn result\nend", "    --\
    \ your code here\nend", "    local dict_sum = {}\n    local index_sum = {}\n \
    \   local result = {}\n    for i, v in ipairs(nums) do\n        local sum = 0\n\
    \        for j in string.gmatch(tostring(v), \"%d\") do\n            sum = sum\
    \ + tonumber(j)\n        end\n        dict_sum[i] = sum\n        index_sum[sum]\
    \ = i\n    end\n    table.sort(dict_sum)\n    for _, v in ipairs(dict_sum) do\n\
    \        table.insert(result, nums[index_sum[v]])\n    end\n    return result\n\
    end", "  local sum = function(n)\n    local s = 0\n    while n > 0 do\n      s\
    \ = s + n % 10\n      n = n // 10\n    end\n    return s\n  end\n  local r = {}\n\
    \  for i, v in ipairs(nums) do\n    r[#r + 1] = {sum(v), i, v}\n  end\n  table.sort(r,\
    \ function(a, b)\n    local r = a[1] - b[1]\n    if r == 0 then\n      return\
    \ a[2] < b[2]\n    end\n    return r < 0\n  end)\n  local result = {}\n  for i\
    \ = 1, #r do\n    result[i] = r[i][3]\n  end\n  return result\nend", "  table.sort(nums,\
    \ function(a, b)\n    local sumA = sumDigits(a)\n    local sumB = sumDigits(b)\n\
    \    if sumA == sumB then\n      return a < b\n    else\n      return sumA < sumB\n\
    \    end\n  end)\n  return nums\nend", "    local resp = {}\n    local i = 1\n\
    \    while i <= #nums do\n        local suma = 0\n        local n = nums[i]\n\
    \        while n > 0 do\n            suma = suma + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        table.insert(resp, {nums[i], suma, i})\n       \
    \ i = i + 1\n    end\n    table.sort(resp, function(a, b) return a[2] < b[2] or\
    \ (a[2] == b[2] and a[3] < b[3]) end)\n    for i = 1, #resp do\n        resp[i]\
    \ = resp[i][1]\n    end\n    return resp\nend", "  table.sort(nums, function(num1,\
    \ num2)\n    if (num1 + num2 == 0) then\n      return num1 < num2\n    end\n \
    \   return (num1 + num2) / math.abs(num1 + num2)\n  end)\n  return nums\nend",
  "   local function sum_of_digits(n)\n      local sum = 0\n      while n > 0 do\n\
    \         sum = sum + n % 10\n         n = math.floor(n / 10)\n      end\n   \
    \   return sum\n   end\n   return function(a, b)\n      return sum_of_digits(a)\
    \ < sum_of_digits(b)\n   end\nend", "    local temp = {}\n    for i, v in ipairs(nums)\
    \ do\n        local p = 0\n        for j in tostring(v):gmatch(\"[1-9]\") do\n\
    \            p = p + tonumber(j)\n        end\n        table.insert(temp, {i,\
    \ p, v})\n    end\n    table.sort(temp, function(a, b)\n        if a[2] == b[2]\
    \ then\n            return a[1] < b[1]\n        else\n            return a[2]\
    \ < b[2]\n        end\n    end)\n    local result = {}\n    for i, v in ipairs(temp)\
    \ do\n        table.insert(result, v[3])\n    end\n    return result\nend", " \
    \ local function f(a, b)\n    local sum_a = 0\n    local sum_b = 0\n    while\
    \ a > 0 do\n      sum_a = sum_a + a % 10\n      a = math.floor(a / 10)\n    end\n\
    \    while b > 0 do\n      sum_b = sum_b + b % 10\n      b = math.floor(b / 10)\n\
    \    end\n    return sum_a < sum_b\n  end\n  table.sort(nums, f)\n  return nums\n\
    end", "    -- ...your code...\nend", "  local sums = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for _, digit in ipairs(string.split(tostring(nums[i]),\
    \ '')) do\n      sum = sum + tonumber(digit)\n    end\n    sums[i] = sum\n  end\n\
    \  table.sort(sums)\n  for i = 1, #nums do\n    for j = 1, #nums do\n      if\
    \ sums[i] == nums[j] then\n        sums[i] = j\n        break\n      end\n   \
    \ end\n  end\n  return sums\nend", "    local numbers = { }\n    local sum = 0\n\
    \    local smaller = -1\n    local smaller_index = -1\n    local temp = 0\n  \
    \  for index, number in ipairs(nums) do\n        sum = 0\n        for digit in\
    \ string.gmatch(tostring(number), \".\") do\n            sum = sum + tonumber(digit)\n\
    \        end\n        numbers[index] = {sum, number}\n    end\n    for i = 1,\
    \ #numbers do\n        for j = i, #numbers do\n            if numbers[i][1] >\
    \ numbers[j][1] then\n                temp = numbers[i]\n                numbers[i]\
    \ = numbers[j]\n                numbers[j] = temp\n            end\n        end\n\
    \    end\n    local result = { }\n    for index, number in ipairs(numbers) do\n\
    \        result[index] = number[2]\n    end\n    return result\nend", "\ttable.sort(nums,\
    \ function(x, y)\n\t\treturn x + y\n\tend)\n\treturn nums\nend", "\tif #nums ==\
    \ 0 then return {} end\n\tlocal sums = {}\n\tfor i, n in ipairs(nums) do\n\t\t\
    local sum = 0\n\t\twhile n > 0 do\n\t\t\tsum = sum + (n % 10)\n\t\t\tn = math.floor(n\
    \ / 10)\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal ordered\
    \ = {}\n\tfor _, sum in ipairs(sums) do\n\t\tfor i, n in ipairs(nums) do\n\t\t\
    \tlocal sum_n = 0\n\t\t\twhile n > 0 do\n\t\t\t\tsum_n = sum_n + (n % 10)\n\t\t\
    \t\tn = math.floor(n / 10)\n\t\t\tend\n\t\t\tif sum_n == sum then\n\t\t\t\ttable.insert(ordered,\
    \ nums[i])\n\t\t\t\ttable.remove(nums, i)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn ordered\nend", "\tlocal max_num = math.max(unpack(nums))\n\tlocal\
    \ points = {}\n\tlocal sorted = {}\n\t\n\t-- assign points to every number\n\t\
    for i,num in ipairs(nums) do\n\t\tpoints[num] = 0\n\t\tfor j=1, #tostring(num)\
    \ do\n\t\t\tpoints[num] = points[num] + tonumber(string.sub(tostring(num), j,\
    \ j))\n\t\tend\n\tend\n\t\n\t-- find the lowest point\n\tlocal min_points = 0\n\
    \tfor _,v in pairs(points) do\n\t\tif v <= min_points then\n\t\t\tmin_points =\
    \ v\n\t\tend\n\tend\n\t\n\tfor _,v in pairs(points) do\n\t\tif min_points == v\
    \ then\n\t\t\tfor j,num in ipairs(nums) do\n\t\t\t\tif points[num] == min_points\
    \ then\n\t\t\t\t\ttable.insert(sorted, num)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\t-- after the num with lowest point, get the next lowest\n\tlocal\
    \ sub_points = {}\n\tfor i,num in ipairs(nums) do\n\t\tlocal t = {}\n\t\tt.num\
    \ = num\n\t\tt.point = points[num]\n\t\ttable.insert(sub_points, t)\n\tend\n\t\
    \n\tlocal temp_points = {}\n\tfor i,v in ipairs(sub_points) do\n\t\ttable.insert(temp_points,\
    \ v.point)\n\tend\n\t\n\tlocal j = 1\n\twhile j <= #temp_points do\n\t\tlocal\
    \ i = 1\n\t\twhile i <= #temp_points do\n\t\t\tif i ~= j then\n\t\t\t\tif temp_points[i]\
    \ == temp_points[j] then\n\t\t\t\t\ttable.remove(temp_points, i)\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tj = j + 1\n\tend\n\t\n\tfor i,v in ipairs(temp",
  "    local ps = {}\n    for i, v in ipairs(nums) do\n        local p = 0\n     \
    \   while v > 0 do\n            p = p + v % 10\n            v = math.floor(v /\
    \ 10)\n        end\n        ps[i] = p\n    end\n    table.sort(ps)\n    local\
    \ result = {}\n    for i, v in ipairs(ps) do\n        for j, p in ipairs(nums)\
    \ do\n            local p2 = 0\n            while p > 0 do\n                p2\
    \ = p2 + p % 10\n                p = math.floor(p / 10)\n            end\n   \
    \         if p2 == v then\n                table.insert(result, p2)\n        \
    \        table.remove(nums, j)\n                break\n            end\n     \
    \   end\n    end\n    return result\nend", "    local sums = {}\n    for _, n\
    \ in ipairs(nums) do\n        local sum = 0\n        while n > 0 do\n        \
    \    sum = sum + n % 10\n            n = math.floor(n / 10)\n        end\n   \
    \     sums[#sums + 1] = sum\n    end\n    local sorted = {}\n    for i = 1, #nums\
    \ do\n        local pos = 0\n        local min = 100\n        for j = 1, #nums\
    \ do\n            if sums[j] < min then\n                min = sums[j]\n     \
    \           pos = j\n            end\n        end\n        sorted[i] = nums[pos]\n\
    \        sums[pos] = 100\n    end\n    return sorted\nend", "  -- your code goes\
    \ here\n  local pairs = {}\n  for i,v in ipairs(nums) do\n    local number = v\n\
    \    local sum = 0\n    while number > 0 do\n      sum = sum + number % 10\n \
    \     number = number // 10\n    end\n    pairs[#pairs+1] = {i,sum}\n  end\n \
    \ table.sort(pairs, function(a,b) \n    if a[2] == b[2] then\n      return a[1]\
    \ < b[1]\n    else\n      return a[2] < b[2]\n    end\n  end)\n  local ans = {}\n\
    \  for i,v in ipairs(pairs) do\n    ans[#ans+1] = nums[v[1]]\n  end\n  return\
    \ ans\nend", "    local digit = {}\n    local result = {}\n    local dig_sum =\
    \ {}\n    for i = 1, #nums do\n        local num = nums[i]\n        local sum\
    \ = 0\n        while num ~= 0 do\n            local mod = num % 10\n         \
    \   sum = sum + mod\n            num = (num - mod) / 10\n        end\n       \
    \ digit[i] = sum\n    end\n    --print(digit)\n    for i = 1, #digit do\n    \
    \    local flag = true\n        for j = 1, #dig_sum do\n            if dig_sum[j]\
    \ == digit[i] then\n                flag = false\n                table.insert(result[j],\
    \ nums[i])\n                break\n            end\n        end\n        if flag\
    \ then\n            table.insert(dig_sum, digit[i])\n            result[#dig_sum]\
    \ = {nums[i]}\n        end\n    end\n    table.sort(dig_sum)\n    local answer\
    \ = {}\n    for i = 1, #dig_sum do\n        for j = 1, #result[i] do\n       \
    \     table.insert(answer, result[i][j])\n        end\n    end\n    return answer\n\
    end", "\tlocal function cmp(a, b)\n\t\treturn (a % 10 + (a % 100) // 10 + (a %\
    \ 1000) // 100) > (b % 10 + (b % 100) // 10 + (b % 1000) // 100)\n\tend\n\ttable.sort(nums,\
    \ cmp)\n\treturn nums\nend", "\t--local function function name(parameters)\n\t\
    \t--<function code>\n\t--end\n\t-- return <function>\nend\nassert(order_by_points({1,\
    \ 10, 100, 1000}) == {1, 10, 100, 1000})\nassert(order_by_points({1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10}) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\nassert(order_by_points({92,\
    \ 32, 52, 71, 31, 22, 51, 81, 33, 11}) == {11, 31, 22, 52, 71, 81, 32, 51, 33,\
    \ 92})\nassert(order_by_points({0, 0, 0, 0, 0, 0, 0, 0, 0, 0}) == {0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0})\nassert(order_by_points({}) == {})\nassert(order_by_points({1,\
    \ 11, 111, 1111}) == {1, 11, 111, 1111})\nassert(order_by_points({111, 11, 1,\
    \ 1111}) == {1, 11, 111, 1111})\nassert(order_by_points({2, 22, 222, 2222}) ==\
    \ {2, 22, 222, 2222})\nassert(order_by_points({222, 22, 2, 2222}) == {2, 22, 222,\
    \ 2222})\nassert(order_by_points({3, 33, 333, 3333}) == {3, 33, 333, 3333})\n\
    assert(order_by_points({333, 33, 3, 3333}) == {3, 33, 333, 3333})\nassert(order_by_points({4,\
    \ 44, 444, 4444}) == {4, 44, 444, 4444})\nassert(order_by_points({444, 44, 4,\
    \ 4444}) == {4, 44, 444, 4444})\nassert(order_by_points({5, 55, 555, 5555}) ==\
    \ {5, 55, 555, 5555})\nassert(order_by_points({555, 55, 5, 5555}) == {5, 55, 555,",
  "  local arr = {}\n  for i = 1, #nums do\n    local sum = 0\n    local num = nums[i]\n\
    \    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if arr[sum] == nil then\n      arr[sum] = {}\n    end\n\
    \    table.insert(arr[sum], nums[i])\n  end\n  local sorted = {}\n  for _, list\
    \ in pairs(arr) do\n    for _, val in ipairs(list) do\n      table.insert(sorted,\
    \ val)\n    end\n  end\n  return sorted\nend", "\tlocal point = {}\n\tfor i, v\
    \ in ipairs(nums) do\n\t\tpoint[i] = 0\n\t\twhile v > 0 do\n\t\t\tpoint[i] = point[i]\
    \ + v % 10\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\tend\n\ttable.sort(point)\n\
    \tlocal result = {}\n\tfor _, v in ipairs(point) do\n\t\ttable.insert(result,\
    \ nums[v])\n\tend\n\treturn result\nend", "    table.sort(nums, function(a, b)\n\
    \        local sa = a:sum_digits()\n        local sb = b:sum_digits()\n      \
    \  if sa ~= sb then\n            return sa < sb\n        else\n            return\
    \ a < b\n        end\n    end)\n    return nums\nend", "\tlocal indexed = {}\n\
    \tfor i, v in ipairs(nums) do\n\t\tlocal s = v % 10 + math.floor(v / 10)\n\t\t\
    if indexed[s] == nil then\n\t\t\tindexed[s] = {}\n\t\tend\n\t\ttable.insert(indexed[s],\
    \ {v, i})\n\tend\n\tlocal keys = {}\n\tfor k, _ in pairs(indexed) do\n\t\ttable.insert(keys,\
    \ k)\n\tend\n\ttable.sort(keys)\n\tlocal ordered = {}\n\tfor _, k in ipairs(keys)\
    \ do\n\t\ttable.sort(indexed[k], function(a, b) return a[2] < b[2] end)\n\t\t\
    for _, v in ipairs(indexed[k]) do\n\t\t\ttable.insert(ordered, v[1])\n\t\tend\n\
    \tend\n\treturn ordered\nend\nassert(utils.table_compare(order_by_points({1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10}), {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}))\nassert(utils.table_compare(order_by_points({1,\
    \ 2, 3, 4, 5, 6, 16, 8, 9, 10}), {1, 2, 3, 4, 5, 6, 8, 9, 10, 16}))\nassert(utils.table_compare(order_by_points({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 22, 33, 44, 55, 66, 77, 88, 99, 100}), {1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 22, 33, 44, 55, 66, 77, 88, 99, 100}))\nassert(utils.table_compare(order_by_points({1,\
    \ 2, 3, 4, 5, 6, 16, 8, 117, 10}), {1, 2, 3, 4, 5, 6, 8, 10, 16, 117}))", "  table.sort(nums,\
    \ function(a, b)\n      local a_sum = sum_of_digits(a)\n      local b_sum = sum_of_digits(b)\n\
    \      if a_sum == b_sum then\n        return a < b\n      else\n        return\
    \ a_sum < b_sum\n      end\n    end)\nend", "    local function sum_digits(n)\n\
    \        local s = 0\n        while n > 0 do\n            s = s + n % 10\n   \
    \         n = math.floor(n / 10)\n        end\n        return s\n    end\n   \
    \ local function min_sum_idx(nums, i)\n        local m = i\n        for j = i,\
    \ #nums do\n            if sum_digits(nums[j]) < sum_digits(nums[m]) then\n  \
    \              m = j\n            end\n        end\n        return m\n    end\n\
    \    local n = #nums\n    for i = 1, n - 1 do\n        local m = min_sum_idx(nums,\
    \ i)\n        nums[i], nums[m] = nums[m], nums[i]\n    end\nend\norder_by_points({\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9 }) --> { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\norder_by_points({\
    \ 9, 1, 3, 7, 8, 2, 5, 4, 6 }) --> { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\norder_by_points({\
    \ 9, 1, 3, 3, 7, 8, 2, 5, 4, 6 }) --> { 1, 2, 3, 3, 4, 5, 6, 7, 8, 9 }\norder_by_points({\
    \ 9, 3, 1, 3, 7, 8, 2, 5, 4, 6 }) --> { 1, 2, 3, 3, 4, 5, 6, 7, 8, 9 }\norder_by_points({\
    \ 9, 3, 1, 3, 7, 8, 2, 5, 4, 6, 11, 13, 9, 12, 12, 12, 12, 12, 15, 13, 9, 14,\
    \ 14, 14, 14, 14, 17, 15, 9, 16, 16, 16, 16, 16, 19, 17, 9, 18, 18, 18, 18, 18,\
    \ 21, 19, 9, 20, 20, 20, 20, 20, 23, 21, 9, 22, 22, 22, 22, 22, 25, 23, 9,", " \
    \   -- write your code here\nend", "  -- your code here\n  error('Not implemented')\n\
    end", "    local function compare_ints(a, b)\n        local a_sum = sum_of_digits(a)\n\
    \        local b_sum = sum_of_digits(b)\n        if a_sum == b_sum then\n    \
    \        return nums.index(nums, a) < nums.index(nums, b)\n        else\n    \
    \        return a_sum < b_sum\n        end\n    end\n    nums.sort(nums, compare_ints)\n\
    \    return nums\nend", "  -- your code here\n  return nums\nend", "    return\
    \ {}\nend", "    local digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9' }\n    local digit_map = {}\n    for i, digit in ipairs(digits) do\n   \
    \     digit_map[digit] = i\n    end", "  local nums_table = {}\n  local sum =\
    \ 0\n  local temp = {}\n  for i = 1, #nums do\n    nums_table[i] = {}\n    temp\
    \ = nums[i]\n    for j = 1, #tostring(temp) do\n      local x = tonumber(string.sub(tostring(temp),\
    \ j, j))\n      if x then\n        sum = sum + x\n      end\n    end\n    nums_table[i][\"\
    number\"] = temp\n    nums_table[i][\"sum\"] = sum\n    sum = 0\n  end\n  table.sort(nums_table,\
    \ function(a, b) return a.sum < b.sum end)\n  local sorted_list = {}\n  for i\
    \ = 1, #nums_table do\n    sorted_list[i] = nums_table[i][\"number\"]\n  end\n\
    \  return sorted_list\nend", "    -- your code goes here\n    local result = {}\n\
    \    for i = 1, #nums do\n        table.insert(result, {index = i, value = nums[i]})\n\
    \    end\n    table.sort(result, function(a, b)\n        if (sum_of_digits(a.value)\
    \ == sum_of_digits(b.value)) then\n            return a.index < b.index\n    \
    \    else\n            return sum_of_digits(a.value) < sum_of_digits(b.value)\n\
    \        end\n    end)\n    local final = {}\n    for i = 1, #result do\n    \
    \    table.insert(final, result[i].value)\n    end\n    return final\nend", " \
    \  -- your code goes here\n   -- starts here\n   local dict = {}\n   for i, v\
    \ in ipairs(nums) do\n      local key = 0\n      while v > 0 do\n         key\
    \ = key + v % 10\n         v = math.floor(v / 10)\n      end\n      if dict[key]\
    \ == nil then\n         dict[key] = {}\n      end\n      table.insert(dict[key],\
    \ {i, nums[i]})\n   end\n   local i = 1\n   local res = {}\n   for k, v in pairs(dict)\
    \ do\n      local sorted = {}\n      for k1, v1 in pairs(v) do\n         sorted[v1[1]]\
    \ = v1[2]\n      end\n      for k1, v1 in pairs(sorted) do\n         res[i] =\
    \ v1\n         i = i + 1\n      end\n   end\n   return res\n   -- ends here\n\
    end", "   -- your code goes here\nend", "    -- your code here\n    local res\
    \ = {}\n    for i, v in ipairs(nums) do\n        res[i] = {sum = math.sum_of_digits(v),\
    \ index = i}\n    end\n    table.sort(res, function(a, b)\n        if a.sum ==\
    \ b.sum then\n            return a.index < b.index\n        else\n           \
    \ return a.sum < b.sum\n        end\n    end)\n    for i, v in ipairs(res) do\n\
    \        res[i] = nums[v.index]\n    end\n    return res\nend", "    local digits\
    \ = {}\n    local result = {}\n    for k,v in pairs(nums) do\n        local key\
    \ = v\n        local sum = 0\n        while key > 0 do\n            sum = sum\
    \ + (key % 10)\n            key = key / 10\n        end\n        table.insert(digits,\
    \ sum)\n    end\n    local sorted_digits = selection_sort(digits)\n    for k,v\
    \ in pairs(sorted_digits) do\n        for x,y in pairs(nums) do\n            local\
    \ key = y\n            local sum = 0\n            while key > 0 do\n         \
    \       sum = sum + (key % 10)\n                key = key / 10\n            end\n\
    \            if v == sum then\n                table.insert(result, y)\n     \
    \       end\n        end\n    end\n    return result\nend", "  local sum = {}\n\
    \  for k, v in ipairs(nums) do\n    local t = {}\n    t.key = k\n    t.val = v\n\
    \    local s = 0\n    for _, c in ipairs(v:totable()) do\n      s = s + tonumber(c)\n\
    \    end\n    t.sum = s\n    table.insert(sum, t)\n  end\n  table.sort(sum, function(a,\
    \ b)\n    if a.sum == b.sum then\n      return a.key < b.key\n    else\n     \
    \ return a.sum < b.sum\n    end\n  end)\n  local result = {}\n  for _, v in ipairs(sum)\
    \ do\n    table.insert(result, v.val)\n  end\n  return result\nend", "   local\
    \ tuples = {}\n   for i, n in ipairs(nums) do\n      local sum = 0\n      while\
    \ n > 0 do\n         sum = sum + n % 10\n         n = math.floor(n / 10)\n   \
    \   end\n      tuples[#tuples + 1] = { i, sum }\n   end\n   table.sort(tuples,\
    \ function(a, b)\n      if a[2] == b[2] then\n         return a[1] < b[1]\n  \
    \    else\n         return a[2] < b[2]\n      end\n   end)\n   local result =\
    \ {}\n   for i, t in ipairs(tuples) do\n      result[i] = nums[t[1]]\n   end\n\
    \   return result\nend", "  local arr = {}\n  for index, value in ipairs(nums)\
    \ do\n    local sum = 0\n    for i = 1, #tostring(value) do\n      sum = sum +\
    \ tonumber(tostring(value):sub(i, i))\n    end\n    arr[#arr + 1] = { value, sum,\
    \ index }\n  end\n  table.sort(arr, function(a, b) return a[2] < b[2] end)\n \
    \ local res = {}\n  for _, value in ipairs(arr) do\n    res[#res + 1] = value[1]\n\
    \  end\n  return res\nend", "    local function digit_sum(num)\n        return\
    \ num:to_string():split(''):map(tonumber):reduce(function(acc, n) return acc +\
    \ n end, 0)\n    end", "    local t = {}\n    for i,n in ipairs(nums) do\n   \
    \     t[i] = {\n            sum = sum_digits(n),\n            idx = i,\n     \
    \       val = n\n        }\n    end\n    table.sort(t, function(a,b) return a.sum\
    \ < b.sum end)\n    return coroutine.wrap(function()\n        for _,v in ipairs(t)\
    \ do\n            coroutine.yield(v.val)\n        end\n    end)\nend", "    return\
    \ nums\nend", "    return {}\nend", "    local function sum(num)\n        local\
    \ digit_sum = 0\n        while num > 0 do\n            digit_sum = digit_sum +\
    \ num % 10\n            num = math.floor(num / 10)\n        end\n        return\
    \ digit_sum\n    end", "   local index = {}\n   for k, v in ipairs(nums) do\n\
    \      local key = math.floor(v/10) + v%10\n      table.insert(index, k, key)\n\
    \   end\n   table.sort(index)\n   local res = {}\n   for i, v in ipairs(index)\
    \ do\n      res[i] = nums[v]\n   end\n   return res\nend", "    -- body...\nend",
  end, "    local points = {}\n    for _, v in ipairs(nums) do\n        local sum\
    \ = 0\n        while v > 0 do\n            sum = sum + v % 10\n            v =\
    \ v // 10\n        end\n        points[#points + 1] = sum\n    end\n    local\
    \ tbl = {}\n    for i, v in ipairs(nums) do\n        tbl[i] = {v, points[i]}\n\
    \    end\n    table.sort(tbl, function(a, b)\n        if a[2] ~= b[2] then\n \
    \           return a[2] < b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end)\n    for i, v in ipairs(tbl) do\n        tbl[i] = v[1]\n\
    \    end\n    return tbl\nend\nprint(order_by_points{13, 20, 7, 4, 19, 50})\n\
    print(order_by_points{55, 38, 22, 14, 6, 70})\nprint(order_by_points{123, 467,\
    \ 321, 25, 318})\nprint(order_by_points{10, 15, 47, 97, 79, 12})\nprint(order_by_points{9,\
    \ 1, 10, 7, 4, 100})\nprint(order_by_points{93, 91, 98, 98, 98, 98})", "    --\
    \ body\nend", "  local digits = {}\n  local index = {}\n  local points = {}\n\
    \  for i, n in ipairs(nums) do\n    table.insert(index, i)\n    table.insert(digits,\
    \ n)\n    table.insert(points, get_sum_of_digits(n))\n  end\n  for i=1,#digits\
    \ do\n    for j=i+1,#digits do\n      if points[i] > points[j] then\n        local\
    \ temp_i = index[i]\n        local temp_d = digits[i]\n        local temp_p =\
    \ points[i]\n        index[i] = index[j]\n        digits[i] = digits[j]\n    \
    \    points[i] = points[j]\n        index[j] = temp_i\n        digits[j] = temp_d\n\
    \        points[j] = temp_p\n      end\n    end\n  end\n  return digits\nend",
  "    local function sum(n)\n        local s = 0\n        while n > 0 do\n      \
    \      s = s + n % 10\n            n = n // 10\n        end\n        return s\n\
    \    end\n    local function key(i)\n        return sum(nums[i]), i\n    end\n\
    \    local keys = {}\n    for i = 1, #nums do\n        keys[i] = i\n    end\n\
    \    table.sort(keys, function(a, b) return key(a) < key(b) end)\n    local res\
    \ = {}\n    for i = 1, #nums do\n        res[i] = nums[keys[i]]\n    end\n   \
    \ return res\nend", "    -- body\nend", "  table.sort(nums, function(a, b)\n \
    \   local sum_a = 0\n    for _,v in ipairs(to_digits(a)) do\n      sum_a = sum_a\
    \ + v\n    end\n    local sum_b = 0\n    for _,v in ipairs(to_digits(b)) do\n\
    \      sum_b = sum_b + v\n    end\n    if sum_a == sum_b then\n      return a\
    \ < b\n    else\n      return sum_a < sum_b\n    end\n  end)\n  return nums\n\
    end\nassert(order_by_points({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }) == { 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9 })\nassert(order_by_points({ 12, 13, 1, 10, 12 }) == { 13, 12, 12,\
    \ 10, 1 })\nassert(order_by_points({ 52, 23, 12, 64, 12 }) == { 12, 12, 23, 52,\
    \ 64 })\nassert(order_by_points({ 81, 92, 72, 71, 100 }) == { 71, 81, 92, 72,\
    \ 100 })\nassert(order_by_points({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 }) == { 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11,", "    table.sort(nums, function(a, b)\n        local function points(n)\n\
    \            local sum = 0\n            while n > 0 do\n                sum =\
    \ sum + n % 10\n                n = math.floor(n / 10)\n            end\n    \
    \        return sum\n        end\n        local s1, s2 = points(a), points(b)\n\
    \        if s1 == s2 then\n            return a < b\n        else\n          \
    \  return s1 < s2\n        end\n    end)\n    return nums\nend", "   -- implementation\
    \ here\nend", "    -- your code here\nend", "    local function comp(a, b)\n \
    \       local l = {}\n        for i = 1, #a do\n            l[i] = string.sub(a,\
    \ i, i)\n        end\n        for i = 1, #b do\n            l[#l + 1] = string.sub(b,\
    \ i, i)\n        end\n        local a_sum = 0\n        local b_sum = 0\n     \
    \   for _, v in ipairs(l) do\n            a_sum = a_sum + tonumber(v)\n      \
    \      b_sum = b_sum + tonumber(v)\n        end\n        return a_sum > b_sum\n\
    \    end\n    table.sort(nums, comp)\n    return nums\nend", "  -- TODO: implement\
    \ this function\nend", "    -- Your code here\nend", "\nend", "    -- TODO\nend",
  "    -- your code goes here\n    local result = {}\n    local k = 0\n    local function\
    \ count_add(a)\n        local sum = 0\n        while a ~= 0 do\n            sum\
    \ = sum + a % 10\n            a = math.floor(a / 10)\n        end\n        return\
    \ sum\n    end\n    local comp = function(a, b)\n        if count_add(a) ~= count_add(b)\
    \ then\n            return count_add(a) < count_add(b)\n        else\n       \
    \     return a < b\n        end\n    end\n    for i, v in ipairs(nums) do\n  \
    \      result[i] = v\n    end\n    table.sort(result, comp)\n    return result\n\
    end", "  --TODO: implement me\nend", "    local t = {}\n    for i, n in ipairs(nums)\
    \ do\n        table.insert(t, {n, n % 10 + n // 10 % 10 + n // 100})\n    end\n\
    \    table.sort(t, function(a, b) return a[2] < b[2] or a[2] == b[2] and a[1]\
    \ < b[1] end)\n    for i, v in ipairs(t) do\n        t[i] = v[1]\n    end\n  \
    \  return t\nend", "    return {}\nend", "    local temp = {}\n    for i, v in\
    \ ipairs(nums) do\n        local sum = 0\n        for d in tostring(v):gmatch('%d')\
    \ do\n            sum = sum + tonumber(d)\n        end\n        temp[i] = {v,\
    \ sum}\n    end\n    table.sort(temp, function(a, b) return a[2] < b[2] end)\n\
    \    return temp\nend", "  --[[\n  >>> order_by_points([1,2,3,4,5,6,7,8,9])\n\
    \  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> order_by_points([9,9,9,9,9,9,9,9,9])\n \
    \ [9, 9, 9, 9, 9, 9, 9, 9, 9]\n  >>> order_by_points([4,4,4,4,4,4,4,4,4])\n  [4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4]\n  >>> order_by_points([5,5,5,5,5,5,5,5,5])\n  [5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5]\n  >>> order_by_points([7,7,7,7,7,7,7,7,7])\n  [7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7]\n  >>> order_by_points([1,9,9,9,9,9,9,9,9])\n  [1, 9, 9, 9,\
    \ 9, 9, 9, 9, 9]\n  >>> order_by_points([1,2,2,2,2,2,2,2,2])\n  [1, 2, 2, 2, 2,\
    \ 2, 2, 2, 2]\n  >>> order_by_points([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9])\n\
    \  [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n  >>> order_by_points([9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1])\n\
    \  [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n  >>> order", "  --\
    \ TODO\nend", "   table.sort(nums, function(a, b)\n                       return\
    \ (order_by_points_sum(a) < order_by_points_sum(b)) or (a < b)\n             \
    \       end)\n   return nums\nend", "    table.sort(nums, function(a, b)\n   \
    \     local a_sum = sum_of_digits(a)\n        local b_sum = sum_of_digits(b)\n\
    \        if a_sum == b_sum then\n            return a < b\n        end\n     \
    \   return a_sum < b_sum\n    end)\n    return nums\nend", "    local points =\
    \ {}\n    for i, value in ipairs(nums) do\n        points[i] = 0\n        for\
    \ i = 1, #tostring(value) do\n            points[i] = points[i] + tonumber(tostring(value):sub(i,\
    \ i))\n        end\n    end\n    table.sort(nums, function(n1, n2)\n        if\
    \ points[n1] == points[n2] then\n            return n1 < n2\n        else\n  \
    \          return points[n1] < points[n2]\n        end\n    end)\n    return nums\n\
    end\nassert(table.concat(order_by_points({13, 20, 7, 4}), \", \") == \"20, 4,\
    \ 13, 7\")\nassert(table.concat(order_by_points({0, 9, 100, 999}), \", \") ==\
    \ \"0, 9, 100, 999\")\nassert(table.concat(order_by_points({1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10}), \", \") == \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10\")", "    local sort_func\
    \ = function(i, j)\n        local sum_i = 0\n        local sum_j = 0\n       \
    \ for n in string.gmatch(i, '%d') do\n            sum_i = sum_i + tonumber(n)\n\
    \        end\n        for n in string.gmatch(j, '%d') do\n            sum_j =\
    \ sum_j + tonumber(n)\n        end\n        return sum_i < sum_j\n    end\n  \
    \  table.sort(nums, sort_func)\n    return nums\nend", "    --[[\n    local sums\
    \ = {}\n    for i, v in ipairs(nums) do\n        sums[i] = sum_of_digits(v)\n\
    \    end\n    local t = {}\n    for i, v in ipairs(sums) do\n        t[i] = {v,\
    \ i}\n    end\n    table.sort(t, function(x, y)\n        if x[1] == y[1] then\n\
    \            return x[2] < y[2]\n        else\n            return x[1] < y[1]\n\
    \        end\n    end)\n    local result = {}\n    for i, v in ipairs(t) do\n\
    \        result[i] = nums[v[2]]\n    end\n    return result\n    --]]\n    table.sort(nums,\
    \ function(x, y)\n        if sum_of_digits(x) == sum_of_digits(y) then\n     \
    \       return x < y\n        else\n            return sum_of_digits(x) < sum_of_digits(y)\n\
    \        end\n    end)\n    return nums\nend\nassert(order_by_points({13, 20,\
    \ 7, 4}) == {20, 4, 13, 7})\nassert(order_by_points({0, 9, 2, 30, 34}) == {9,\
    \ 2, 0, 30, 34})\nassert(order_by_points({0, -2, -15, -30, -34}) == {0, -2, -15,\
    \ -30, -34})", "   local nums_t = {}\n   for i, n in ipairs(nums) do\n      local\
    \ n_t = {n, sum_digits(n), i}\n      table.insert(nums_t, n_t)\n   end\n   table.sort(nums_t,\
    \ function(a, b)\n      if a[2] == b[2] then\n         return a[3] < b[3]\n  \
    \    else\n         return a[2] < b[2]\n      end\n   end)\n   return nums_t\n\
    end", "    table.sort(nums, function(a, b)\n        return (tostring(a):gsub(\"\
    .\", function(c) return tonumber(c) end) or 0) <\n               (tostring(b):gsub(\"\
    .\", function(c) return tonumber(c) end) or 0)\n    end)\n    return nums\nend",
  "    local function sum(n)\n        local s = 0\n        while n > 0 do\n      \
    \      s = s + n % 10\n            n = math.floor(n / 10)\n        end\n     \
    \   return s\n    end\n    return nums:sort(function(a, b)\n        local a_sum\
    \ = sum(a)\n        local b_sum = sum(b)\n        if a_sum == b_sum then\n   \
    \         return a < b\n        else\n            return a_sum < b_sum\n     \
    \   end\n    end)\nend", "    local sorted = {}\n    local copy = {}\n    for\
    \ i, v in ipairs(nums) do\n        copy[i] = v\n    end\n    for i, v in ipairs(nums)\
    \ do\n        local min = math.huge\n        local min_idx = -1\n        for j,\
    \ v in ipairs(copy) do\n            local s = sum_of_digits(v)\n            if\
    \ s < min then\n                min = s\n                min_idx = j\n       \
    \     end\n        end\n        sorted[i] = copy[min_idx]\n        copy[min_idx]\
    \ = math.huge\n    end\n    return sorted\nend\nassert(order_by_points({5, 3,\
    \ 1, 7, 8, 12}) == {1, 3, 5, 7, 8, 12})\nassert(order_by_points({13, 20, 7, 4})\
    \ == {7, 4, 13, 20})", "    local function keyfunc(x)\n        return score(x)\n\
    \    end\n    return sorted(nums, keyfunc)\nend", "  local score = {}\n  for i\
    \ = 1, #nums do\n    score[nums[i]] = sum_of_digits(nums[i])\n  end\n  table.sort(nums,\
    \ function(a, b)\n    return score[a] < score[b]\n  end)\n  return nums\nend",
  "    table.sort(nums, function(a, b) return sum(digits(a)) < sum(digits(b)) end)\n\
    \    return nums\nend", "\ttable.sort(nums, function(x, y)\n\t\tlocal a = x:len()\
    \ * 4 + x % 10 * 3 + math.floor(x / 10) % 10 * 2 + math.floor(x / 100)\n\t\tlocal\
    \ b = y:len() * 4 + y % 10 * 3 + math.floor(y / 10) % 10 * 2 + math.floor(y /\
    \ 100)\n\t\treturn a > b\n\tend)\n\treturn nums\nend", "  -- define a function\
    \ that takes a number and returns the sum of its digits\n  local sum = function(num)\n\
    \    local s = 0\n    while num > 0 do\n      local digit = num % 10\n      s\
    \ = s + digit\n      num = math.floor(num / 10)\n    end\n    return s\n  end",
  "    local function digits_sum(n)\n        local sum = 0\n        for i = 1, string.len(n)\
    \ do\n            sum = sum + tonumber(string.sub(n, i, i))\n        end\n   \
    \     return sum\n    end", "  \nend", "    local function key_func(a)\n     \
    \   local sum = 0\n        while a > 0 do\n            sum = sum + a % 10\n  \
    \          a = a // 10\n        end\n        return sum\n    end\n    table.sort(nums,\
    \ function(a, b)\n        if key_func(a) == key_func(b) then\n            return\
    \ a < b\n        else\n            return key_func(a) < key_func(b)\n        end\n\
    \    end)\n    return nums\nend", "  -- body...\nend", "    local sums = {}\n\
    \    for i = 1, #nums do\n        sums[i] = {nums[i], 0}\n        for n in tostring(nums[i]):gmatch('%d')\
    \ do\n            sums[i][2] = sums[i][2] + tonumber(n)\n        end\n    end\n\
    \    table.sort(sums, function(a, b) return a[2] < b[2] end)\n    for i = 1, #sums\
    \ do\n        nums[i] = sums[i][1]\n    end\n    return nums\nend", "  -- compute\
    \ sum of digits for each number\n  -- sort numbers by their sums and by index\n\
    \  -- return ordered list\nend", "    local points = {}\n    local res = {}\n\
    \    local j = 1\n    for k, v in pairs(nums) do\n        local p = 0\n      \
    \  while v > 0 do\n            p = p + v % 10\n            v = math.floor(v /\
    \ 10)\n        end\n        if not points[p] then\n            points[p] = {}\n\
    \        end\n        table.insert(points[p], {idx = k, num = nums[k]})\n    end\n\
    \    for k, v in pairs(points) do\n        table.sort(v, function(a, b) return\
    \ a.idx < b.idx end)\n        for _, u in pairs(v) do\n            res[j] = u.num\n\
    \            j = j + 1\n        end\n    end\n    return res\nend", "    return\
    \ nums\nend", "    table.sort(nums, function(x, y)\n        local a = sum_digits(x)\n\
    \        local b = sum_digits(y)\n        if a == b then\n            return x\
    \ < y\n        end\n        return a < b\n    end)\n    return nums\nend", " \
    \ local temp = {}\n  local result = {}\n  for _, num in ipairs(nums) do\n    local\
    \ digits = get_digits(num)\n    temp[num] = 0\n    for _, digit in ipairs(digits)\
    \ do\n      temp[num] = temp[num] + digit\n    end\n  end\n  for i, num in ipairs(nums)\
    \ do\n    local min = temp[num]\n    local min_i = i\n    for j, next_num in ipairs(nums)\
    \ do\n      if temp[next_num] < min then\n        min = temp[next_num]\n     \
    \   min_i = j\n      end\n    end\n    result[i] = nums[min_i]\n    temp[nums[min_i]]\
    \ = nil\n  end\n  return result\nend", "    -- write your code here\n    return\
    \ nums\nend", "\nend", "    -- your code here\nend\nassert(order_by_points({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9}) == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nassert(order_by_points({12,\
    \ 13, 24, 53, 23, 25, 44, 15, 13}) == {12, 13, 13, 24, 15, 23, 25, 44, 53})",
  "  -- TODO: implement the function\nend", "\tassert(type(nums) == \"table\")\n\t\
    local points = {}\n\tfor k, v in pairs(nums) do\n\t\tlocal digits = 0\n\t\tfor\
    \ digit in tostring(v):gmatch(\"%d\") do\n\t\t\tdigits = digits + tonumber(digit)\n\
    \t\tend\n\t\ttable.insert(points, {k, digits})\n\tend\n\ttable.sort(points, function(a,\
    \ b)\n\t\treturn a[2] < b[2]\n\tend)\n\tlocal res = {}\n\tfor _, point in ipairs(points)\
    \ do\n\t\ttable.insert(res, nums[point[1]])\n\tend\n\treturn res\nend", "    --\
    \ your implementation\nend", "   table.sort(nums, function(a, b)\n      local\
    \ ac = 0\n      local bc = 0\n      while a > 0 do\n         ac = ac + a % 10\n\
    \         a = math.floor(a / 10)\n      end\n      while b > 0 do\n         bc\
    \ = bc + b % 10\n         b = math.floor(b / 10)\n      end\n      return ac <\
    \ bc\n   end)\n   return nums\nend", "    return {}\nend", "  -- your code here\n\
    end", "    -- your code here\n    return nums\nend", "  -- TODO: add your code\
    \ here\n  local tab = {}\n  for k, v in pairs(nums) do\n    local i = 0\n    local\
    \ sum = 0\n    while (v ~= 0) do\n      sum = sum + v % 10\n      v = math.floor(v\
    \ / 10)\n      i = i + 1\n    end\n    local temp = {}\n    temp.index = k\n \
    \   temp.points = sum\n    table.insert(tab, temp)\n  end\n  table.sort(tab, function(a,\
    \ b)\n    if a.points == b.points then\n      return a.index < b.index\n    else\n\
    \      return a.points < b.points\n    end\n  end)\n  local res = {}\n  for k,\
    \ v in pairs(tab) do\n    table.insert(res, nums[v.index])\n  end\n  return res\n\
    end", "  local digits = {}\n  for k, v in ipairs(nums) do\n    local t = {}\n\
    \    for i in string.gmatch(tostring(v), '%d') do\n      table.insert(t, tonumber(i))\n\
    \    end\n    local sum = 0\n    for i = 1, #t do\n      sum = sum + t[i]\n  \
    \  end\n    digits[v] = sum\n  end\n  table.sort(nums, function(a, b)\n    return\
    \ digits[a] < digits[b]\n  end)\n  return nums\nend", "    local function get_sum(num)\n\
    \        return num % 10 + num / 10 % 10 + num / 100 % 10\n    end\n    table.sort(nums,\
    \ function(a, b)\n        local sum_a = get_sum(a)\n        local sum_b = get_sum(b)\n\
    \        if sum_a ~= sum_b then\n            return sum_a < sum_b\n        else\n\
    \            return a < b\n        end\n    end)\n    return nums\nend", "   \
    \ -- Your code here\nend\nassert(order_by_points({1, 2, 3, 4, 5, 6, 7, 8, 9})\
    \ == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nassert(order_by_points({9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1}) == {1, 2, 3, 4, 5, 6, 7, 8, 9})\nassert(order_by_points({10, 12, 1, 9,\
    \ 2, 3, 5, 6, 7, 3, 5, 6, 7, 8, 5, 6, 8, 9, 10, 1, 2, 0, 5, 9, 10,\n         \
    \              3, 7, 1, 4, 5, 7, 8, 9, 1, 4, 5, 7, 8, 9, 2, 1, 4, 7, 8, 10, 2,\
    \ 4, 7, 8, 10,\n                       3, 4, 5, 7, 8, 10, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n                       2, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4, 2, 3, 4, 5,\n         \
    \              6, 7, 8, 9, 10, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10,\n                       7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 9, 2, 3, 4, 5, 6,\n                       7, 8, 9, 10,\
    \ 10, 2, 3, 4, 5, 6, 7, 8, 9, 10}) ==\n          {1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 0, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5", "   local function order_func(val1,\
    \ val2)\n      local function sum_digits(n)\n         local function iter(n, sum)\n\
    \            if n < 10 then\n               return sum + n\n            else\n\
    \               return iter(math.floor(n / 10), sum + n % 10)\n            end\n\
    \         end\n         return iter(n, 0)\n      end\n      return sum_digits(val1)\
    \ < sum_digits(val2)\n   end\n   table.sort(nums, order_func)\n   return nums\n\
    end", "\tlocal function compare(a, b)\n\t\tlocal sum_a = sum_digits(a)\n\t\tlocal\
    \ sum_b = sum_digits(b)\n\t\tif sum_a < sum_b then\n\t\t\treturn true\n\t\telseif\
    \ sum_a > sum_b then\n\t\t\treturn false\n\t\telse\n\t\t\treturn a < b\n\t\tend\n\
    \tend\n\ttable.sort(nums, compare)\n\treturn nums\nend", "    -- TODO: Write your\
    \ implementation here\nend", "    local total_points = {}\n    for i,v in ipairs(nums)\
    \ do\n        local sum = 0\n        while (v ~= 0) do\n            sum = sum\
    \ + (v % 10)\n            v = math.floor(v / 10)\n        end\n        total_points[i]\
    \ = sum\n    end\n    for i = 1,#nums-1 do\n        for j = i+1,#nums do\n   \
    \         if total_points[i] > total_points[j] then\n                local t =\
    \ total_points[i]\n                total_points[i] = total_points[j]\n       \
    \         total_points[j] = t\n                t = nums[i]\n                nums[i]\
    \ = nums[j]\n                nums[j] = t\n            end\n        end\n    end\n\
    \    return nums\nend", "\tlocal sums = {}\n\tlocal t = {}\n\tfor i,v in ipairs(nums)\
    \ do\n\t\tlocal sum = 0\n\t\tfor c in v:gmatch(\".\") do\n\t\t\tsum = sum + tonumber(c)\n\
    \t\tend\n\t\tt[v] = sum\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal\
    \ index = {}\n\tfor i,v in ipairs(sums) do\n\t\tfor k,j in pairs(t) do\n\t\t\t\
    if j == v then\n\t\t\t\ttable.insert(index, k)\n\t\t\t\tt[k] = nil\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn index\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
