name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input list of strings only for ones that start with a given\
  \ prefix.\nlocal function filter_by_prefix(strings, prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal res = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(res, str)\n\t\tend\n\tend\n\treturn\
    \ res\nend", "    local ret = {}\n    for _, s in ipairs(strings) do\n       \
    \ if s:startswith(prefix) then\n            table.insert(ret, s)\n        end\n\
    \    end\n    return ret\nend", "  local out = {}\n  for i,s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      out[#out+1] = s\n    end\n\
    \  end\n  return out\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, prefix:len()) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, s in ipairs(strings) do\n    if string.sub(s, 1, string.len(prefix)) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "  local ret = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1, prefix:len())\
    \ == prefix then\n      table.insert(ret, s)\n    end\n  end\n  return ret\nend",
  "\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1, #prefix)\
    \ == prefix then\n\t\t\tresult[#result + 1] = str\n\t\tend\n\tend\n\treturn result\n\
    end", "  local new_strings = {}\n  for _, str in ipairs(strings) do\n    if not\
    \ vim.startswith(str, prefix) then\n      table.insert(new_strings, str)\n   \
    \ end\n  end\n  return new_strings\nend", "    if strings then\n        local\
    \ result = {}\n        for _, string in ipairs(strings) do\n            if string:sub(1,\
    \ prefix:len()) == prefix then\n                table.insert(result, string)\n\
    \            end\n        end\n        return result\n    end\nend", "    local\
    \ t = {}\n    for _, v in ipairs(strings) do\n        if v:startswith(prefix)\
    \ then\n            table.insert(t, v)\n        end\n    end\n    return t\nend",
  "\tlocal filtered = {}\n\tfor _,v in ipairs(strings) do\n\t\tif v:sub(1, #prefix)\
    \ == prefix then\n\t\t\tfiltered[#filtered+1] = v\n\t\tend\n\tend\n\treturn filtered\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n  end\n\
    \  return result\nend", "  local ret = {}\n  for _, str in ipairs(strings) do\n\
    \    if str:match(\"^\" .. prefix) then\n      table.insert(ret, str)\n    end\n\
    \  end\n  return ret\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.sub(s, 1, #prefix) == prefix then\n      table.insert(result,\
    \ s)\n    end\n  end\n  return result\nend", "    local res = {}\n    for _,str\
    \ in ipairs(strings) do\n        if str:find(\"^\" .. prefix .. \"$\") then\n\
    \            res[#res+1] = str\n        end\n    end\n    return res\nend", " \
    \ local result = {}\n  for i,v in ipairs(strings) do\n    if string.find(v, \"\
    ^\" .. prefix) then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1,\
    \ #prefix) == prefix then\n\t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local filtered = {}\n  for _,s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      filtered[#filtered+1] = s\n    end\n\
    \  end\n  return filtered\nend", "    local list = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:startswith(prefix) then\n            table.insert(list, str)\n\
    \        end\n    end\n    return list\nend", "\tlocal result = {}\n\tfor _, s\
    \ in ipairs(strings) do\n\t\tif string.sub(s, 1, string.len(prefix)) == prefix\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal results = {}\n\tfor _, v in ipairs(strings) do\n\t\tif v:sub(1, prefix:len())\
    \ == prefix then\n\t\t\ttable.insert(results, v)\n\t\tend\n\tend\n\treturn results\n\
    end", "  local r = {}\n  for _,s in ipairs(strings) do\n    if string.sub(s, 1,\
    \ #prefix) == prefix then\n      table.insert(r, s)\n    end\n  end\n  return\
    \ r\nend", "  local result = {}\n  for _, v in ipairs(strings) do\n    if v:sub(1,\
    \ prefix:len()) == prefix then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend", "  local results = {}\n  for _, str in ipairs(strings)\
    \ do\n    if string.sub(str, 1, #prefix) == prefix then\n      table.insert(results,\
    \ str)\n    end\n  end\n  return results\nend", "    local result = {}\n    for\
    \ i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix) == prefix\
    \ then\n            table.insert(result, strings[i])\n        end\n    end\n \
    \   return result\nend", "  local ret = {}\n  for _, val in ipairs(strings) do\n\
    \    if val:sub(1, #prefix) == prefix then\n      ret[#ret + 1] = val\n    end\n\
    \  end\n  return ret\nend", "  local res = {}\n  for i = 1, #strings do\n    if\
    \ string.sub(strings[i], 1, #prefix) == prefix then\n      res[#res + 1] = strings[i]\n\
    \    end\n  end\n  return res\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif (str:sub(1, #prefix) == prefix) then\n\t\t\ttable.insert(result,\
    \ str)\n\t\tend\n\tend\n\treturn result\nend", "    return alist.filter(strings,\
    \ function(s) return common.starts_with(s, prefix) end)\nend", "    local newlist\
    \ = {}\n    for i,v in ipairs(strings) do\n        if v:sub(1,#prefix) == prefix\
    \ then\n            newlist[#newlist+1] = v\n        end\n    end\n    return\
    \ newlist\nend", "\tlocal new_list = {}\n\tlocal prefix_len = #prefix\n\tfor _,\
    \ str in ipairs(strings) do\n\t\tif str:sub(1, prefix_len) == prefix then\n\t\t\
    \ttable.insert(new_list, str)\n\t\tend\n\tend\n\treturn new_list\nend", "  local\
    \ res = {}\n  for _, v in ipairs(strings) do\n    if v:sub(1, #prefix) == prefix\
    \ then\n      res[#res + 1] = v\n    end\n  end\n  return res\nend", "    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1,\
    \ #prefix) == prefix then\n            table.insert(result, s)\n        end\n\
    \    end\n    return result\nend", "    if prefix == \"\" then\n        return\
    \ strings\n    end\n    local res = {}\n    for _, v in ipairs(strings) do\n \
    \       if #v > #prefix and string.sub(v, 1, #prefix) == prefix then\n       \
    \     table.insert(res, v)\n        end\n    end\n    return res\nend", "\tprefix\
    \ = prefix:lower()\n\tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\
    \t\tif str:lower():find(\"^\" .. prefix) then\n\t\t\ttable.insert(filtered, str)\n\
    \t\tend\n\tend\n\treturn filtered\nend", "    return lib.filter(strings, function(s)\
    \ return s:startswith(prefix) end)\nend", "\treturn {\n\t\tunpack(\n\t\t\ttable.map(\n\
    \t\t\t\tstrings,\n\t\t\t\tfunction(string)\n\t\t\t\t\tif string:startswith(prefix)\
    \ then\n\t\t\t\t\t\treturn string\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t)\n\t\t)\n\
    \t}\nend", "    local matches = {}\n    local strings_count = #strings\n    for\
    \ i = 1, strings_count do\n        local string = strings[i]\n        if string:starts_with(prefix)\
    \ then\n            matches[#matches + 1] = string\n        end\n    end\n   \
    \ return matches\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local new_strings =\
    \ {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n \
    \           table.insert(new_strings, s)\n        end\n    end\n    return new_strings\n\
    end", "    local filtered = {}\n    for i, v in ipairs(strings) do\n        if\
    \ starts_with(v, prefix) then\n            table.insert(filtered, v)\n       \
    \ end\n    end\n    return filtered\nend", "  local result = {}\n  for i = 1,\
    \ #strings do\n    if string.sub(strings[i], 1, string.len(prefix)) == prefix\
    \ then\n      table.insert(result, strings[i])\n    end\n  end\n  return result\n\
    end", "    local r = {}\n    for i = 1, #strings do\n        if strings[i]:find(\"\
    ^\" .. prefix) then\n            r[#r + 1] = strings[i]\n        end\n    end\n\
    \    return r\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:sub(1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "  local filtered = {}\n\
    \  for i,v in ipairs(strings) do\n    if v:match(\"^\" .. prefix) then\n     \
    \ filtered[#filtered+1] = v\n    end\n  end\n  return filtered\nend", "  local\
    \ result = {}\n  for _, v in ipairs(strings) do\n    if string.sub(v, 1, #prefix)\
    \ == prefix then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "\tlocal result = {}\n\tfor _,s in ipairs(strings) do\n\t\tif s:sub(1,#prefix)\
    \ == prefix then\n\t\t\tresult[#result+1] = s\n\t\tend\n\tend\n\treturn result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ string.startswith(str, prefix) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "\tlocal results = {}\n\tfor _,\
    \ str in ipairs(strings) do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\t\t\
    table.insert(results, str)\n\t\tend\n\tend\n\treturn results\nend", "\tlocal result\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:starts(prefix) then\n\t\
    \t\tresult[#result + 1] = str\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ t = {}\n    for i = 1, #strings do\n        if string.sub(strings[i], 1, #prefix)\
    \ == prefix then\n            t[#t + 1] = strings[i]\n        end\n    end\n \
    \   return t\nend", "\tlocal ret = {}\n\tfor k,v in pairs(strings) do\n\t\tif\
    \ not prefix or string.sub(v, 1, string.len(prefix)) == prefix then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "\tlocal out = {}\n\tfor _, v in ipairs(strings)\
    \ do\n\t\tif v:sub(1, prefix:len()) == prefix then\n\t\t\ttable.insert(out, v)\n\
    \t\tend\n\tend\n\treturn out\nend", "\treturn map(filter(strings, function(s)\
    \ return s:startswith(prefix) end), function(s) return s:sub(#prefix + 1) end)\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if string.startswith(s,\
    \ prefix) then\n            table.insert(result, s)\n        end\n    end\n  \
    \  return result\nend", "    local new_strings = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:sub(1, prefix:len()) == prefix then\n            table.insert(new_strings,\
    \ string)\n        end\n    end\n    return new_strings\nend", "  local ret =\
    \ {}\n  for _, str in ipairs(strings) do\n    if str:sub(1, prefix:len()) == prefix\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend", "  \
    \  local out = {}\n    for _, s in ipairs(strings) do\n        if s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(out, s)\n        end\n    end\n   \
    \ return out\nend", "  local ret = {}\n  for i, v in ipairs(strings) do\n    if\
    \ v:sub(1, #prefix) == prefix then\n      table.insert(ret, v)\n    end\n  end\n\
    \  return ret\nend", "    local res = {}\n    for i, v in ipairs(strings) do\n\
    \        if v:sub(1, #prefix) == prefix then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    local ret = {}\n    for _, str\
    \ in ipairs(strings) do\n        if str:startswith(prefix) then\n            local\
    \ choice = str:gsub(prefix, \"\")\n            table.insert(ret, choice)\n   \
    \     end\n    end\n    return ret\nend", "\tlocal result = {}\n\tfor _, s in\
    \ ipairs(strings) do\n\t\tif (string.sub(s, 1, #prefix) == prefix) then\n\t\t\t\
    table.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend", "  local result\
    \ = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) ==\
    \ prefix then\n      table.insert(result, s)\n    end\n  end\n  return result\n\
    end", "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.find(v,\
    \ \"^\" .. prefix) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local result = {}\n  for _,s in ipairs(strings) do\n    if\
    \ s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n    end\n \
    \ end\n  return result\nend", "    local count = #strings\n    local i = 1\n \
    \   while i <= count do\n        if not strings[i]:startswith(prefix) then\n \
    \           table.remove(strings, i)\n            count = count - 1\n        else\n\
    \            i = i + 1\n        end\n    end\nend", "    local result = {}\n \
    \   for _,s in ipairs(strings) do\n        if s:startswith(prefix) then\n    \
    \        table.insert(result, s)\n        end\n    end\n    return result\nend",
  "    local out = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix)\
    \ then\n            table.insert(out, s)\n        end\n    end\n    return out\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:starts(prefix)\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "\tlocal t = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:starts(prefix)\
    \ then\n\t\t\ttable.insert(t, s)\n\t\tend\n\tend\n\treturn t\nend", "  local filtered\
    \ = {}\n  for _,s in ipairs(strings) do\n    if s:find(\"^\" .. prefix) then\n\
    \      filtered[#filtered+1] = s\n    end\n  end\n  return filtered\nend", " \
    \   local ret = {}\n    for _,str in ipairs(strings) do\n        if string.find(str,\
    \ prefix) == 1 then\n            ret[#ret+1] = str\n        end\n    end\n   \
    \ return ret\nend", "    local new_strings = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.startswith(s, prefix) then\n            table.insert(new_strings,\
    \ s)\n        end\n    end\n    return new_strings\nend", "\tlocal count = 0\n\
    \tfor i = 1, #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\
    \t\tcount = count + 1\n\t\t\tstrings[count] = strings[i]\n\t\tend\n\tend\n\treturn\
    \ setmetatable(strings, nil)\nend", "  local out = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:sub(1, #prefix) == prefix then\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "    local ret = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:startswith(prefix) then\n            table.insert(ret,\
    \ string)\n        end\n    end\n    return ret\nend", "\treturn fun.iter(strings):filter(function(s)\
    \ return s:startswith(prefix) end):to_list()\nend", "\tlocal matching = {}\n\t\
    for _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\t\
    table.insert(matching, s)\n\t\tend\n\tend\n\treturn matching\nend", "    local\
    \ filtered = {}\n    for _, string in ipairs(strings) do\n        if string:startswith(prefix)\
    \ then\n            table.insert(filtered, string)\n        end\n    end\n   \
    \ return filtered\nend", "  local function is_prefix(s)\n    return string.sub(s,\
    \ 1, #prefix) == prefix\n  end\n  return filter(strings, is_prefix)\nend", " \
    \   local result = {}\n    for i, s in ipairs(strings) do\n        if (string.sub(s,\
    \ 1, string.len(prefix)) == prefix) then\n            table.insert(result, s)\n\
    \        end\n    end\n    return result\nend", "\tlocal r = {}\n\tfor i = 1,\
    \ #strings do\n\t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\t\tr[#r +\
    \ 1] = strings[i]\n\t\tend\n\tend\n\treturn r\nend", "\tlocal ret = {}\n\tfor\
    \ _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix then\n\t\t\t\
    table.insert(ret, s)\n\t\tend\n\tend\n\treturn ret\nend", "    local result =\
    \ {}\n    for _, v in ipairs(strings) do\n        if string.find(v, prefix, 1,\
    \ true) == 1 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend", "\tlocal res = {}\n\tfor i = 1, #strings do\n\t\tif\
    \ strings[i]:sub(1, #prefix) == prefix then\n\t\t\tres[#res + 1] = strings[i]\n\
    \t\tend\n\tend\n\treturn res\nend", "\tlocal ret = {}\n\tfor i = 1, #strings do\n\
    \t\tif strings[i]:sub(1, #prefix) == prefix then\n\t\t\tret[#ret + 1] = strings[i]\n\
    \t\tend\n\tend\n\treturn ret\nend", "\tif strings then\n\t\tlocal filtered = {}\n\
    \t\tfor _,v in ipairs(strings) do\n\t\t\tif v:sub(1, #prefix) == prefix then\n\
    \t\t\t\tfiltered[#filtered+1] = v\n\t\t\tend\n\t\tend\n\t\treturn filtered\n\t\
    end\nend", "    local filtered = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.startswith(str, prefix) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "    local ret = {}\n\
    \    for i, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:startswith(prefix) then\n            table.insert(result, str)\n       \
    \ end\n    end\n    return result\nend", "  local output = {}\n  for _, s in ipairs(strings)\
    \ do\n    if string.startswith(s, prefix) then\n      table.insert(output, s)\n\
    \    end\n  end\n  return output\nend", "  local res = {}\n  for i = 1, #strings\
    \ do\n    if strings[i]:sub(1, #prefix) == prefix then\n      res[#res + 1] =\
    \ strings[i]\n    end\n  end\n  return res\nend", "    return table.filter(strings,\
    \ function(v) return v:sub(1, #prefix) == prefix end)\nend", "    local n = #prefix\n\
    \    local ret = {}\n    for i, s in ipairs(strings) do\n        if s:sub(1, n)\
    \ == prefix then\n            table.insert(ret, s)\n        end\n    end\n   \
    \ return ret\nend", "  local res = {}\n  for _, str in ipairs(strings) do\n  \
    \  if str:sub(1, prefix:len()) == prefix then\n      table.insert(res, str)\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    for _, str in\
    \ ipairs(strings) do\n        if #str > #prefix and str:sub(1, #prefix) == prefix\
    \ then\n            result[#result + 1] = str\n        end\n    end\n    return\
    \ result\nend", "    local ret = {}\n    for _, str in ipairs(strings) do\n  \
    \      if string.sub(str, 1, #prefix) == prefix then\n            table.insert(ret,\
    \ str)\n        end\n    end\n    return ret\nend", "\tif not prefix then\n\t\t\
    return strings\n\tend\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\
    \t\tif str:starts(prefix) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\
    \treturn result\nend", "\tlocal list = {}\n\tfor _,v in ipairs(strings) do\n\t\
    \tif v:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(list, v)\n\t\tend\n\t\
    end\n\treturn list\nend", "  local ret = {}\n  for _,s in ipairs(strings) do\n\
    \    if string.sub(s, 1, #prefix) == prefix then\n      ret[#ret+1] = s\n    end\n\
    \  end\n  return ret\nend", "    local result = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:startswith(prefix) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local filtered = {}\n   \
    \ for _, str in ipairs(strings) do\n        if string.startswith(str, prefix)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n \
    \   if string.sub(str, 1, string.len(prefix)) == prefix then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "  local r = {}\n  for _,v in ipairs(strings)\
    \ do\n    if string.sub(v, 1, #prefix) == prefix then\n      table.insert(r, v)\n\
    \    end\n  end\n  return r\nend", "  local result = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(result, s)\n\
    \    end\n  end\n  return result\nend", "\tlocal filtered = {}\n\tfor _, str in\
    \ ipairs(strings) do\n\t\tif not prefix or str:sub(1, prefix:len()) == prefix\
    \ then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn filtered\n\
    end", "    local results = {}\n    for _, string in ipairs(strings) do\n     \
    \   if string:sub(1, #prefix) == prefix then\n            table.insert(results,\
    \ string)\n        end\n    end\n    return results\nend", "\tlocal new_list =\
    \ {}\n\tfor _, n in ipairs(strings) do\n\t\tif n:sub(1, #prefix) == prefix then\n\
    \t\t\ttable.insert(new_list, n)\n\t\tend\n\tend\n\treturn new_list\nend", "  \
    \  local result = {}\n    for i, s in ipairs(strings) do\n        if s:startswith(prefix)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local t = {}\n  for i, str in ipairs(strings) do\n    if str:match('^'\
    \ .. prefix) then\n      table.insert(t, str)\n    end\n  end\n  return t\nend",
  "    local filtered = {}\n    for i, s in ipairs(strings) do\n        if s:starts(prefix)\
    \ then\n            filtered[#filtered + 1] = s\n        end\n    end\n    return\
    \ filtered\nend", "  if prefix then\n    return l.filter(function(s) return string.sub(s,\
    \ 1, string.len(prefix)) == prefix end, strings)\n  else\n    return strings\n\
    \  end\nend", "  if not strings then return nil end\n  local result = {}\n  for\
    \ i = 1, #strings do\n    if strings[i]:find(\"^\" .. prefix) then\n      table.insert(result,\
    \ strings[i])\n    end\n  end\n  return result\nend", "    local matches = {}\n\
    \    for _, str in ipairs(strings) do\n        if str:startswith(prefix) then\n\
    \            table.insert(matches, str)\n        end\n    end\n    return matches\n\
    end", "  local filtered = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(filtered, s)\n   \
    \ end\n  end\n  return filtered\nend", "    return array.filter(strings, function(s)\
    \ return string.startswith(s, prefix) end)\nend", "    local result = {}\n   \
    \ for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "\treturn utils.filter(strings, function(str)\n\t\treturn str:sub(1, #prefix)\
    \ == prefix\n\tend)\nend", "    return _(strings):map(function(s) return s:gsub(\"\
    ^\" .. prefix, \"\") end):push_all(_(strings):filter(function(s) return s:find(\"\
    ^\" .. prefix) end)):value()\nend", "    local filtered = {}\n    for i = 1, #strings\
    \ do\n        if string.find(strings[i], prefix) == 1 then\n            table.insert(filtered,\
    \ strings[i])\n        end\n    end\n    return filtered\nend", "    local filtered\
    \ = {}\n    for i = 1, #strings do\n        if strings[i]:sub(1, #prefix) == prefix\
    \ then\n            table.insert(filtered, strings[i])\n        end\n    end\n\
    \    return filtered\nend", "  local out = {}\n  for _, v in ipairs(strings) do\n\
    \    if v:startswith(prefix) then\n      table.insert(out, v)\n    end\n  end\n\
    \  return out\nend", "  return tablex.ifilter(function(s) return stringx.startswith(s,\
    \ prefix) end, strings)\nend", "  local res = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:match('^' .. prefix) then\n      table.insert(res, s)\n    end\n\
    \  end\n  return res\nend", "    local rtn = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.sub(s, 1, #prefix) == prefix then\n            table.insert(rtn,\
    \ s)\n        end\n    end\n    return rtn\nend", "    local filtered = {}\n \
    \   for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            filtered[#filtered + 1] = v\n        end\n    end\n    return filtered\n\
    end", "    local result = {}\n    for _,v in ipairs(strings) do\n        if v:sub(1,\
    \ #prefix) == prefix then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    for i = 1, #strings\
    \ do\n        if string.sub(strings[i], 1, #prefix) == prefix then\n         \
    \   table.insert(result, strings[i])\n        end\n    end\n    return result\n\
    end", "\tlocal ret = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:sub(1,\
    \ #prefix) == prefix then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "  local length = #prefix\n  local filtered = {}\n  for _, str in\
    \ ipairs(strings) do\n    if str:sub(1, length) == prefix then\n      table.insert(filtered,\
    \ str)\n    end\n  end\n  return filtered\nend", "  local new_list = {}\n  for\
    \ _, item in ipairs(strings) do\n    if item:startswith(prefix) then\n      new_list[#new_list\
    \ + 1] = item\n    end\n  end\n  return new_list\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if s:starts(prefix) then\n      \
    \      result[#result + 1] = s\n        end\n    end\n    return result\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix)\
    \ then\n            result[#result + 1] = s\n        end\n    end\n    return\
    \ result\nend", "    local out = {}\n    for _, s in ipairs(strings) do\n    \
    \    if s:startswith(prefix) then\n            out[#out + 1] = s\n        end\n\
    \    end\n    return out\nend", "    local new_list = {}\n    for _, v in ipairs(strings)\
    \ do\n        if v:sub(1, #prefix) == prefix then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    return new_list\nend", "    local ret = {}\n \
    \   for _, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if s:starts(prefix)\
    \ then\n            filtered[#filtered + 1] = s\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings) do\n\t\t\
    if string.find(s, \"^\" .. prefix) then\n\t\t\ttable.insert(result, s)\n\t\tend\n\
    \tend\n\treturn result\nend", "  local prefix_len = #prefix\n  local starts_with_prefix\
    \ = function(x)\n    return x:sub(1, prefix_len) == prefix\n  end\n  return filter(starts_with_prefix,\
    \ strings)\nend", "  return f:filter(\n    function(str)\n      return string.sub(str,\
    \ 1, #prefix) == prefix\n    end,\n    strings\n  )\nend", "    local filtered\
    \ = {}\n    for _, str in ipairs(strings) do\n        if string.sub(str, 1, #prefix)\
    \ == prefix then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend", "  local result = {}\n  local prefix_len = #prefix\n\
    \  for _,s in ipairs(strings) do\n    if string.sub(s, 1, prefix_len) == prefix\
    \ then\n      result[#result+1] = s\n    end\n  end\n  return result\nend", "\t\
    local filtered = {}\n\tfor _, value in ipairs(strings) do\n\t\tif string.startswith(value,\
    \ prefix) then\n\t\t\ttable.insert(filtered, value)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend", "  local result = {}\n  for _, s in ipairs(strings) do\n   \
    \ if prefix then\n      if s:sub(1, #prefix) == prefix then\n        table.insert(result,\
    \ s)\n      end\n    else\n      table.insert(result, s)\n    end\n  end\n  return\
    \ result\nend", "  local out = {}\n  for _, s in ipairs(strings) do\n    if s:sub(1,\
    \ #prefix) == prefix then\n      out[#out + 1] = s\n    end\n  end\n  return out\n\
    end", "  local pf = string.gsub(prefix, '%s+', '')\n  local ret = {}\n  for k,v\
    \ in pairs(strings) do\n    if string.find(string.gsub(v, '%s+', ''), '^' .. pf)\
    \ then\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend", "  local\
    \ new_list = {}\n  for _, name in ipairs(strings) do\n    if name:sub(1, #prefix)\
    \ == prefix then\n      new_list[#new_list + 1] = name\n    end\n  end\n  return\
    \ new_list\nend", "    local results = {}\n    for i = 1, #strings do\n      \
    \  if strings[i]:sub(1, #prefix) == prefix then\n            results[#results\
    \ + 1] = strings[i]\n        end\n    end\n    return results\nend", "\tlocal\
    \ output = {}\n\tfor _, line in ipairs(strings) do\n\t\tif string.sub(line, 1,\
    \ string.len(prefix)) == prefix then\n\t\t\ttable.insert(output, line)\n\t\tend\n\
    \tend\n\treturn output\nend", "  local filtered = {}\n  for i = 1, #strings do\n\
    \    if string.sub(strings[i], 1, #prefix) == prefix then\n      table.insert(filtered,\
    \ strings[i])\n    end\n  end\n  return filtered\nend", "  local result = {}\n\
    \  for _, s in ipairs(strings) do\n    if prefix == s:sub(1, #prefix) then\n \
    \     table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    local prefix_len = prefix:len()\n    for _, str in ipairs(strings)\
    \ do\n        if str:sub(1, prefix_len) == prefix then\n            table.insert(result,\
    \ str)\n        end\n    end\n    return result\nend", "    if not strings then\
    \ return nil end\n    local result = {}\n    for _, v in ipairs(strings) do\n\
    \        if string.startswith(v, prefix) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "\tlocal t = {}\n\tfor _,\
    \ v in ipairs(strings) do\n\t\tif v:sub(1, #prefix) == prefix then\n\t\t\tt[#t+1]\
    \ = v\n\t\tend\n\tend\n\treturn t\nend", "    local filtered = {}\n    for _,\
    \ name in ipairs(strings) do\n        if string.startswith(name, prefix) then\n\
    \            table.insert(filtered, name)\n        end\n    end\n    return filtered\n\
    end", "  local matching = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ \"^\" .. prefix) then\n      table.insert(matching, str)\n    end\n  end\n \
    \ return matching\nend", "  local t = {}\n  for _, s in ipairs(strings) do\n \
    \   if string.sub(s, 1, #prefix) == prefix then\n      table.insert(t, s)\n  \
    \  end\n  end\n  return t\nend", "  if prefix == \"\" then\n    return strings\n\
    \  end\n  local matches = {}\n  for _, s in ipairs(strings) do\n    if s:startswith(prefix)\
    \ then\n      table.insert(matches, s)\n    end\n  end\n  return matches\nend",
  "\tlocal length = #prefix\n\tlocal function fn(str)\n\t\treturn str:sub(1, length)\
    \ == prefix\n\tend\n\treturn filter(strings, fn)\nend", "    local filtered =\
    \ {}\n    for _, str in ipairs(strings) do\n        if str:startswith(prefix)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "    local result = {}\n    for _, s in ipairs(strings) do\n\
    \        if string.sub(s, 1, #prefix) == prefix then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "\tlocal filtered = {}\n\t\
    for _,string in ipairs(strings) do\n\t\tif string:sub(1,#prefix) == prefix then\n\
    \t\t\tfiltered[#filtered+1] = string\n\t\tend\n\tend\n\treturn filtered\nend",
  "\tlocal filtered = {}\n\tfor i,str in ipairs(strings) do\n\t\tif string.sub(str,\
    \ 1, #prefix) == prefix then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\
    \treturn filtered\nend", "    local rv = {}\n    for _, v in ipairs(strings) do\n\
    \        if v:startswith(prefix) then\n            table.insert(rv, v)\n     \
    \   end\n    end\n    return rv\nend", "  local result = {}\n  for i, str in ipairs(strings)\
    \ do\n    if str:find('^' .. prefix) then\n      table.insert(result, str)\n \
    \   end\n  end\n  return result\nend", "  local out = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:sub(1, #prefix) == prefix then\n      table.insert(out, s)\n  \
    \  end\n  end\n  return out\nend", "  local output = {}\n  for _,s in ipairs(strings)\
    \ do\n    if string.startswith(s, prefix) then\n      table.insert(output, s)\n\
    \    end\n  end\n  return output\nend", "    local found = {}\n    for _, name\
    \ in ipairs(strings) do\n        if name:sub(1, #prefix) == prefix then\n    \
    \        table.insert(found, name)\n        end\n    end\n    return found\nend",
  "\tlocal filtered = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, prefix:len())\
    \ == prefix then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\treturn filtered\n\
    end", "  local t = {}\n  for _, word in ipairs(strings) do\n    if string.find(word,\
    \ \"^\" .. prefix) then\n      table.insert(t, word)\n    end\n  end\n  return\
    \ t\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n    if string.startswith(str,\
    \ prefix) then\n      table.insert(result, str)\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, s in ipairs(strings) do\n    if string.sub(s,\
    \ 1, string.len(prefix)) == prefix then\n      table.insert(result, s)\n    end\n\
    \  end\n  return result\nend", "\tlocal result = {}\n\tfor _,str in ipairs(strings)\
    \ do\n\t\tif str:sub(1, #prefix) == prefix then\n\t\t\ttable.insert(result, str)\n\
    \t\tend\n\tend\n\treturn result\nend", "    local res = {}\n    for _, s in ipairs(strings)\
    \ do\n        if s:sub(1, #prefix) == prefix then\n            table.insert(res,\
    \ s)\n        end\n    end\n    return res\nend", "    local filtered = {}\n \
    \   for _, s in ipairs(strings) do\n        if not prefix or s:sub(1, #prefix)\
    \ == prefix then\n            table.insert(filtered, s)\n        end\n    end\n\
    \    return filtered\nend", "  local filtered = {}\n  for _,s in ipairs(strings)\
    \ do\n    if s:startswith(prefix) then\n      table.insert(filtered, s)\n    end\n\
    \  end\n  return filtered\nend", "    local result = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.starts(s, prefix) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local ret = {}\n   \
    \ for _,string in ipairs(strings) do\n        if string:find(prefix) == 1 then\n\
    \            table.insert(ret, string)\n        end\n    end\n    return ret\n\
    end", "    local ret = {}\n    for i = 1, #strings do\n        if strings[i]:sub(1,\
    \ prefix:len()) == prefix then\n            table.insert(ret, strings[i])\n  \
    \      end\n    end\n    return ret\nend", "    local filtered = {}\n    for _,\
    \ s in ipairs(strings) do\n        if s:startswith(prefix) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local ret = {}\n \
    \   for _, str in ipairs(strings) do\n        if str:sub(1, #prefix) == prefix\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "    local filtered = {}\n    for _, name in ipairs(strings) do\n      \
    \  if string.startswith(name, prefix) then\n            filtered[#filtered + 1]\
    \ = name\n        end\n    end\n    return filtered\nend", "\tlocal filtered =\
    \ {}\n\tfor i, string in ipairs(strings) do\n\t\tif string:find(\"^\" .. prefix)\
    \ then\n\t\t\ttable.insert(filtered, string)\n\t\tend\n\tend\n\treturn filtered\n\
    end", "  local new_list = {}\n  for _,str in ipairs(strings) do\n    if str:find(\"\
    ^\" .. prefix) then\n      new_list[#new_list+1] = str\n    end\n  end\n  return\
    \ new_list\nend", "    local filtered = {}\n    for _,str in ipairs(strings) do\n\
    \        if str:find(\"^\" .. prefix) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "  local result = {}\n\
    \  for i, s in ipairs(strings) do\n    if string.sub(s, 1, #prefix) == prefix\
    \ then\n      table.insert(result, s)\n    end\n  end\n  return result\nend",
  "    if not prefix then\n        return strings\n    end\n    local ret = {}\n \
    \   for i, v in ipairs(strings) do\n        if v:sub(1, #prefix) == prefix then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "  local result = {}\n  local prefix_len = #prefix\n  for _, name in ipairs(strings)\
    \ do\n    if name:sub(1, prefix_len) == prefix then\n      table.insert(result,\
    \ name)\n    end\n  end\n  return result\nend", "    local result = {}\n    for\
    \ _, s in ipairs(strings) do\n        if string.sub(s, 1, #prefix) == prefix then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local subset = {}\n  for _, v in ipairs(strings) do\n    if string.find(v,\
    \ prefix, 1, true) == 1 then\n      table.insert(subset, v)\n    end\n  end\n\
    \  return subset\nend", "\tif not prefix then\n\t\treturn strings\n\tend\n\tlocal\
    \ result = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:sub(1, #prefix) == prefix\
    \ then\n\t\t\ttable.insert(result, s)\n\t\tend\n\tend\n\treturn result\nend",
  "\tlocal ret = {}\n\tlocal i = 1\n\tfor _, str in ipairs(strings) do\n\t\tif str:find(\"\
    ^\" .. prefix) then\n\t\t\tret[i] = str\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "    local filtered = {}\n    for _, str in ipairs(strings) do\n\
    \        if string.startswith(str, prefix) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "    local filtered =\
    \ {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix)\
    \ == prefix then\n            table.insert(filtered, string)\n        end\n  \
    \  end\n    return filtered\nend", "  local result = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:sub(1, #prefix) == prefix then\n      table.insert(result, v)\n\
    \    end\n  end\n  return result\nend", "  local ret = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:sub(1, #prefix) == prefix then\n      table.insert(ret, v)\n  \
    \  end\n  end\n  return ret\nend", "    local function filter(k, v)\n        if\
    \ v:find(\"^\" .. prefix) then\n            return true\n        end\n    end\n\
    \    return filter_by(strings, filter)\nend", "  local out = {}\n  for _, s in\
    \ ipairs(strings) do\n    if s:startswith(prefix) then\n      out[#out + 1] =\
    \ s\n    end\n  end\n  return out\nend", "  local rtn = {}\n  for _, str in ipairs(strings)\
    \ do\n    if str:sub(1, #prefix) == prefix then\n      table.insert(rtn, str)\n\
    \    end\n  end\n  return rtn\nend", "  local result = {}\n  for i = 1, #strings\
    \ do\n    if string.match(strings[i], \"^\" .. prefix) then\n      table.insert(result,\
    \ strings[i])\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
