name: HumanEval_12_longest
language: lua
prompt: "-- Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n-- strings of the same length. Return None in case the input\
  \ list is empty.\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal result = nil\n\tlocal length = 0\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif #s > length then\n\t\t\tresult = s\n\t\t\tlength = #s\n\t\tend\n\t\
    end\n\treturn result\nend", "    local longest = \"\";\n    for _, s in ipairs(strings)\
    \ do\n        if string.len(s) > string.len(longest) then\n            longest\
    \ = s;\n        end\n    end\n    return longest;\nend", "  local maxLength =\
    \ 0\n  local maxString = nil\n  for i = 1, #strings do\n    local str = strings[i]\n\
    \    if #str > maxLength then\n      maxLength = #str\n      maxString = str\n\
    \    end\n  end\n  return maxString\nend", "  if #strings == 0 then\n    return\
    \ 'None'\n  end\n  local max_length = 0\n  local longest_string = nil\n  for _,s\
    \ in ipairs(strings) do\n    if #s > max_length then\n      max_length = #s\n\
    \      longest_string = s\n    end\n  end\n  return longest_string\nend", "  \
    \  local max_len = 0\n    local longest_str = ''\n    for _, s in ipairs(strings)\
    \ do\n        if s:len() > max_len then\n            max_len = s:len()\n     \
    \       longest_str = s\n        end\n    end\n    return longest_str\nend", "\t\
    assert(type(strings) == \"table\", \"'strings' argument is not a table\")\n\t\
    local longest_string = nil\n\tlocal max_length = 0\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif str:len() > max_length then\n\t\t\tmax_length = str:len()\n\t\t\t\
    longest_string = str\n\t\tend\n\tend\n\treturn longest_string\nend", "  if #strings\
    \ == 0 then\n    return 'None'\n  end\n  local max_length = #strings[1]\n  local\
    \ max_i = 1\n  for i, s in ipairs(strings) do\n    if #s > max_length then\n \
    \     max_length = #s\n      max_i = i\n    end\n  end\n  return strings[max_i]\n\
    end", "    local lstr = None\n    local ml = 0\n    for _,str in ipairs(strings)\
    \ do\n        local l = str:len()\n        if l > ml then\n            ml = l\n\
    \            lstr = str\n        end\n    end\n    return lstr\nend", "\tif not\
    \ strings or #strings == 0 then\n\t\treturn None\n\tend\n\tlocal l = #strings[1]\n\
    \tlocal idx = 1\n\tfor i, s in ipairs(strings) do\n\t\tif #s > l then\n\t\t\t\
    l = #s\n\t\t\tidx = i\n\t\tend\n\tend\n\treturn strings[idx]\nend", "  if type(strings)\
    \ ~= \"table\" then return nil end\n  if #strings == 0 then return nil end\n \
    \ local max_len = #strings[1]\n  local longest_str = strings[1]\n  for _,s in\
    \ ipairs(strings) do\n    if #s > max_len then\n      max_len = #s\n      longest_str\
    \ = s\n    end\n  end\n  return longest_str\nend", "  local longestLength = 0\n\
    \  local longestString = nil\n  for i, v in ipairs(strings) do\n    if string.len(v)\
    \ > longestLength then\n      longestLength = string.len(v)\n      longestString\
    \ = v\n    end\n  end\n  return longestString\nend", "    local longest = nil\n\
    \    for _, string in ipairs(strings) do\n        if longest == nil or string:len()\
    \ > longest:len() then\n            longest = string\n        end\n    end\n \
    \   return longest\nend", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\t\
    local max_string = strings[1]\n\tlocal max_len = #max_string\n\tfor _, v in ipairs(strings)\
    \ do\n\t\tlocal this_len = #v\n\t\tif this_len > max_len then\n\t\t\tmax_string\
    \ = v\n\t\t\tmax_len = this_len\n\t\tend\n\tend\n\treturn max_string\nend", " \
    \   local longest_str = nil\n    local max_length = 0\n    for _, v in ipairs(strings)\
    \ do\n        if v:len() > max_length then\n            max_length = v:len()\n\
    \            longest_str = v\n        end\n    end\n    return longest_str\nend",
  "  local longest = \"\"\n  for _, str in ipairs(strings) do\n    if #str > #longest\
    \ then\n      longest = str\n    end\n  end\n  return longest\nend", "\tif #strings\
    \ == 0 then\n\t\treturn nil\n\tend\n\tlocal maxLen = 0\n\tlocal maxStr = nil\n\
    \tfor _, str in ipairs(strings) do\n\t\tif #str > maxLen then\n\t\t\tmaxLen =\
    \ #str\n\t\t\tmaxStr = str\n\t\tend\n\tend\n\treturn maxStr\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local best_i = 1\n    local best_len\
    \ = #strings[1]\n    for i = 2, #strings do\n        local len = #strings[i]\n\
    \        if len > best_len then\n            best_i = i\n            best_len\
    \ = len\n        end\n    end\n    return strings[best_i]\nend", "  local first\
    \ = true\n  local longest, len = nil, 0\n  for _, s in ipairs(strings) do\n  \
    \  if first then\n      first = false\n      longest = s\n      len = #s\n   \
    \ else\n      if #s > len then\n        longest = s\n        len = #s\n      end\n\
    \    end\n  end\n  return longest\nend", "    if #strings == 0 then\n        return\
    \ nil\n    end\n    local longest = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest then\n            longest = s\n        end\n  \
    \  end\n    return longest\nend", "    local res = nil\n    local max = 0\n  \
    \  for _,s in ipairs(strings) do\n        if s:len() > max then\n            res\
    \ = s\n            max = s:len()\n        end\n    end\n    return res\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local maxlen = 0\n\
    \    local longest_word = nil\n    for _,word in ipairs(strings) do\n        if\
    \ word:len() > maxlen then\n            maxlen = word:len()\n            longest_word\
    \ = word\n        end\n    end\n    return longest_word\nend", "  if #strings\
    \ == 0 then\n    return None\n  end\n  local longest_so_far = strings[1]\n  for\
    \ _, s in ipairs(strings) do\n    if #s > #longest_so_far then\n      longest_so_far\
    \ = s\n    end\n  end\n  return longest_so_far\nend", "  local long = nil\n  local\
    \ len = 0\n  for _, s in ipairs(strings) do\n    if #s > len then\n      long\
    \ = s\n      len = #s\n    end\n  end\n  return long\nend", "    local result\
    \ = nil\n    for i = 1, #strings do\n        if result == nil or #strings[i] >\
    \ #result then\n            result = strings[i]\n        end\n    end\n    return\
    \ result\nend", "  if #strings == 0 then\n    return None\n  end\n  local longest_string\
    \ = strings[1]\n  for _, s in ipairs(strings) do\n    if s:len() > longest_string:len()\
    \ then\n      longest_string = s\n    end\n  end\n  return longest_string\nend",
  "    local max_len = 0\n    local longest_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if s:len() > max_len then\n            max_len = s:len()\n     \
    \       longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "\tlocal longest = nil\n\tfor _, s in ipairs(strings) do\n\t\tif not longest\
    \ or #s > #longest then\n\t\t\tlongest = s\n\t\tend\n\tend\n\treturn longest\n\
    end", "  local result = \"\"\n  for _, string in ipairs(strings) do\n    if #string\
    \ > #result then\n      result = string\n    end\n  end\n  return result\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local max_len = 0\n  local longest_i\
    \ = 1\n  for i, str in ipairs(strings) do\n    if #str > max_len then\n      max_len\
    \ = #str\n      longest_i = i\n    end\n  end\n  return strings[longest_i]\nend",
  "  if not strings then return nil end\n  local longest = nil\n  for _,s in ipairs(strings)\
    \ do\n    if not longest or string.len(s) > string.len(longest) then\n      longest\
    \ = s\n    end\n  end\n  return longest\nend", "    local max_string = nil\n \
    \   local max_length = 0\n    for _, s in ipairs(strings) do\n        if max_string\
    \ == nil or #s > max_length then\n            max_string = s\n            max_length\
    \ = #s\n        end\n    end\n    return max_string\nend", "  if #strings == 0\
    \ then\n    return None\n  end\n  local longest_string, len = nil, 0\n  for _,\
    \ s in ipairs(strings) do\n    if s:len() > len then\n      longest_string, len\
    \ = s, s:len()\n    end\n  end\n  return longest_string\nend", "\tif #strings\
    \ == 0 then\n\t\treturn nil\n\tend\n\tlocal longest_str = strings[1]\n\tfor i,str\
    \ in ipairs(strings) do\n\t\tif str:len() > longest_str:len() then\n\t\t\tlongest_str\
    \ = str\n\t\tend\n\tend\n\treturn longest_str\nend", "  if #strings == 0 then\n\
    \    return None\n  end\n  local index = 1\n  for i = 2, #strings do\n    if #strings[i]\
    \ > #strings[index] then\n      index = i\n    end\n  end\n  return strings[index]\n\
    end", "  local longest = 0\n  local l = #strings\n  for i = 1, l do\n    local\
    \ string_len = #strings[i]\n    if string_len > longest then\n      longest =\
    \ string_len\n    end\n  end\n  return longest\nend", "  if not strings then return\
    \ nil end\n  local longest = nil\n  for _,s in ipairs(strings) do\n    if not\
    \ longest or #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "  local max_len, result = 0, nil\n  for _, s in ipairs(strings) do\n  \
    \  if #s > max_len then\n      max_len, result = #s, s\n    end\n  end\n  return\
    \ result\nend", "\tassert(strings ~= nil, \"Input cannot be nil\")\n\tassert(type(strings)\
    \ == \"table\", \"Input is not a table\")\n\tif #strings == 0 then\n\t\treturn\
    \ nil\n\tend\n\ttable.sort(strings, function(a, b) return #a > #b end)\n\treturn\
    \ strings[1]\nend", "    local longest = nil\n    for i, str in ipairs(strings)\
    \ do\n        if (not longest) or (str:len() > longest:len()) then\n         \
    \   longest = str\n        end\n    end\n    return longest\nend", "    local\
    \ longest_string = nil\n    local longest_length = -1\n    for _, s in ipairs(strings)\
    \ do\n        local length = #s\n        if length > longest_length then\n   \
    \         longest_length = length\n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend", "    if (not strings) or #strings ==\
    \ 0 then\n        return nil\n    end\n    local longestStr = strings[1]\n   \
    \ for i, str in ipairs(strings) do\n        if str:len() > longestStr:len() then\n\
    \            longestStr = str\n        end\n    end\n    return longestStr\nend",
  "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal longest = strings[1]\n\t\
    for _, v in ipairs(strings) do\n\t\tif #v > #longest then\n\t\t\tlongest = v\n\
    \t\tend\n\tend\n\treturn longest\nend", "    if #strings == 0 then\n        return\
    \ nil\n    end\n    local longest_str = strings[1]\n    for _, str in ipairs(strings)\
    \ do\n        if str:len() > longest_str:len() then\n            longest_str =\
    \ str\n        end\n    end\n    return longest_str\nend", "  if (#strings ==\
    \ 0) then\n    return nil\n  end\n  local longest_str = strings[1]\n  for i =\
    \ 2, #strings do\n    if (#strings[i] > #longest_str) then\n      longest_str\
    \ = strings[i]\n    end\n  end\n  return longest_str\nend", "    local longest_length\
    \ = 0\n    local longest_string = nil\n    for _, s in ipairs(strings) do\n  \
    \      if #s > longest_length then\n            longest_length = #s\n        \
    \    longest_string = s\n        end\n    end\n    return longest_string\nend",
  "    local longest_str = nil\n    local longest_len = 0\n    for i, s in ipairs(strings)\
    \ do\n        if s:len() > longest_len then\n            longest_str = s\n   \
    \         longest_len = s:len()\n        end\n    end\n    return longest_str\n\
    end", "    local max_len = 0\n    local longest_string = nil\n    for _, str in\
    \ ipairs(strings) do\n        if str:len() > max_len then\n            max_len\
    \ = str:len()\n            longest_string = str\n        end\n    end\n    return\
    \ longest_string\nend", "    local r = None\n    for s in strings do\n       \
    \ if not r then\n            r = s\n        elseif string.len(s) > string.len(r)\
    \ then\n            r = s\n        end\n    end\n    return r\nend", "\tif not\
    \ strings or #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal res = strings[1]\n\
    \tfor i=2,#strings do\n\t\tif #strings[i] > #res then\n\t\t\tres = strings[i]\n\
    \t\tend\n\tend\n\treturn res\nend", "  if not strings or #strings == 0 then\n\
    \    return None\n  end\n  local max_len = 0\n  local longest_idx = 1\n  for i,\
    \ str in ipairs(strings) do\n    if str and #str > max_len then\n      max_len\
    \ = #str\n      longest_idx = i\n    end\n  end\n  return strings[longest_idx]\n\
    end", "    if table.is_empty(strings) then\n        return\n    end", "    local\
    \ candidate\n    local len = 0\n    for _, str in ipairs(strings) do\n       \
    \ if str:len() > len then\n            candidate = str\n            len = str:len()\n\
    \        end\n    end\n    return candidate\nend", "\tif #strings == 0 then\n\t\
    \treturn nil\n\tend\n\tlocal longest_string = strings[1]\n\tfor i = 2, #strings\
    \ do\n\t\tif #strings[i] > #longest_string then\n\t\t\tlongest_string = strings[i]\n\
    \t\tend\n\tend\n\treturn longest_string\nend", "  if #strings == 0 then\n    return\
    \ \"None\"\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n  \
    \  if #strings[i] > #longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ maxLen = 0\n\tlocal longestString = nil\n\tfor _, s in ipairs(strings) do\n\t\
    \tif s:len() > maxLen then\n\t\t\tmaxLen = s:len()\n\t\t\tlongestString = s\n\t\
    \tend\n\tend\n\treturn longestString\nend", "    if #strings == 0 then\n     \
    \   return nil\n    end\n    local max = 0\n    local max_str = nil\n    for i,\
    \ v in ipairs(strings) do\n        if v:len() > max then\n            max = v:len()\n\
    \            max_str = v\n        end\n    end\n    return max_str\nend", "\t\
    local longest_string = nil\n\tlocal max_length = 0\n\tfor _, value in ipairs(strings)\
    \ do\n\t\tif value and value:len() > max_length then\n\t\t\tlongest_string = value\n\
    \t\t\tmax_length = value:len()\n\t\tend\n\tend\n\treturn longest_string\nend",
  "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal longest_so_far = strings[1]\n\
    \tfor i = 2, #strings do\n\t\tif #strings[i] > #longest_so_far then\n\t\t\tlongest_so_far\
    \ = strings[i]\n\t\tend\n\tend\n\treturn longest_so_far\nend", "  if #strings\
    \ == 0 then\n    return\n  end\n  local longest = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    local long\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #long then\n\
    \            long = s\n        end\n    end\n    return long\nend", "    local\
    \ result = nil\n    local longest = 0\n    for _, name in ipairs(strings) do\n\
    \        if string.len(name) > longest then\n            result = name\n     \
    \       longest = string.len(name)\n        end\n    end\n    return result\n\
    end", "    local longest_string\n    local longest_string_len = 0\n    for _,\
    \ s in ipairs(strings) do\n        if s:len() > longest_string_len then\n    \
    \        longest_string = s\n            longest_string_len = s:len()\n      \
    \  end\n    end\n    return longest_string\nend", "  local max_str, max_len =\
    \ nil, 0\n  for _,s in ipairs(strings) do\n    local str_len = #s\n    if str_len\
    \ > max_len then\n      max_str, max_len = s, str_len\n    end\n  end\n  return\
    \ max_str\nend", "  local r = nil\n  for _,v in ipairs(strings) do\n    if r ==\
    \ nil or string.len(v) > string.len(r) then\n      r = v\n    end\n  end\n  return\
    \ r\nend", "    if strings == nil or #strings == 0 then\n        return nil\n\
    \    end\n    local longest_string = strings[1]\n    for i = 2, #strings do\n\
    \        if #strings[i] > #longest_string then\n            longest_string = strings[i]\n\
    \        end\n    end\n    return longest_string\nend", "  if (#strings == 0)\
    \ then\n    return None\n  end\n  local longest = strings[1]\n  for _, str in\
    \ ipairs(strings) do\n    if (#str > #longest) then\n      longest = str\n   \
    \ end\n  end\n  return longest\nend", "  local max_len = 0\n  local max_string\
    \ = None\n  for _, s in ipairs(strings) do\n    if (max_len == 0) or (string.len(s)\
    \ > max_len) then\n      max_len = string.len(s)\n      max_string = s\n    end\n\
    \  end\n  return max_string\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for _, str in ipairs(strings) do\n   \
    \ if #str > #longest then\n      longest = str\n    end\n  end\n  return longest\n\
    end", "  local longest_string\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longest_length then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend", "    if #strings == 0 then\n\
    \        return nil\n    end\n    -- From the list of strings, extract the length\
    \ of each string.\n    local lengths = {}\n    for i = 1, #strings do\n      \
    \  lengths[i] = #strings[i]\n    end\n    -- Get the maximum length from the list\
    \ of lengths.\n    local max_length = lengths[1]\n    for i = 2, #lengths do\n\
    \        if lengths[i] > max_length then\n            max_length = lengths[i]\n\
    \        end\n    end\n    -- Return the first string of maximum length.\n   \
    \ for i = 1, #strings do\n        if #strings[i] == max_length then\n        \
    \    return strings[i]\n        end\n    end\nend", "    if #strings == 0 then\n\
    \        return\n    end\n    local longest = strings[1]\n    for _, line in ipairs(strings)\
    \ do\n        if #line > #longest then\n            longest = line\n        end\n\
    \    end\n    return longest\nend", "    if #strings == 0 then\n        return\
    \ None\n    end\n    local len, res = 0, None\n    for _, s in ipairs(strings)\
    \ do\n        if #s > len then\n            len, res = #s, s\n        end\n  \
    \  end\n    return res\nend", "    if #strings == 0 then\n        return nil\n\
    \    end\n    local longest_string = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #longest_string then\n            longest_string = s\n \
    \       end\n    end\n    return longest_string\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #longest then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "  local max_length, result = 0, nil\n  for _, s in ipairs(strings) do\n\
    \    if #s > max_length then\n      max_length, result = #s, s\n    end\n  end\n\
    \  return result\nend", "    if not strings or #strings == 0 then\n        return\
    \ nil\n    end\n    local longest,length = nil,0\n    for _,value in ipairs(strings)\
    \ do\n        if type(value) ~= \"string\" then\n            error(\"string expected,\
    \ got \"..type(value),2)\n        end\n        if #value > length then\n     \
    \       longest,length = value,#value\n        end\n    end\n    return longest\n\
    end", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal longest_str = strings[1]\n\
    \tfor i = 2, #strings do\n\t\tif #strings[i] > #longest_str then\n\t\t\tlongest_str\
    \ = strings[i]\n\t\tend\n\tend\n\treturn longest_str\nend", "\tif #strings ==\
    \ 0 then\n\t\treturn nil\n\tend\n\tlocal longest = strings[1]\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif #s > #longest then\n\t\t\tlongest = s\n\t\tend\n\tend\n\treturn longest\n\
    end", "  local longest = nil\n  local n = 0\n  for _, s in ipairs(strings) do\n\
    \    if #s > n then\n      longest = s\n      n = #s\n    end\n  end\n  return\
    \ longest\nend", "    local longest = nil\n    for _, string in ipairs(strings)\
    \ do\n        if longest == nil or #string > #longest then\n            longest\
    \ = string\n        end\n    end\n    return longest\nend", "\tlocal max = nil\n\
    \tfor i = 1, #strings do\n\t\tif not max or #strings[i] > #max then\n\t\t\tmax\
    \ = strings[i]\n\t\tend\n\tend\n\treturn max\nend", "    if #strings == 0 then\n\
    \        return nil\n    end\n    local longest_str = nil\n    local longest_len\
    \ = 0\n    for _, str in ipairs(strings) do\n        if #str > longest_len then\n\
    \            longest_str = str\n            longest_len = #str\n        end\n\
    \    end\n    return longest_str\nend", "    if #strings == 0 then\n        return\
    \ nil\n    end\n    local longest_index = 1\n    local longest_length = #strings[1]\n\
    \    for i = 2, #strings do\n        if #strings[i] > longest_length then\n  \
    \          longest_index = i\n            longest_length = #strings[i]\n     \
    \   end\n    end\n    return strings[longest_index]\nend", "  local result = #strings\
    \ > 0 and strings[1] or \"None\"\n  for _,v in ipairs(strings) do\n    if #v >\
    \ #result then\n      result = v\n    end\n  end\n  return result\nend", "  local\
    \ longest_string = nil\n  local longest_length = 0\n  for _, s in ipairs(strings)\
    \ do\n    if longest_length < #s then\n      longest_string = s\n      longest_length\
    \ = #s\n    end\n  end\n  return longest_string\nend", "    local result = nil\n\
    \    local result_length = 0\n    for i, s in ipairs(strings) do\n        if #s\
    \ > result_length then\n            result = s\n            result_length = #s\n\
    \        end\n    end\n    return result\nend", "    local output = nil\n    local\
    \ length = 0\n    for index, value in ipairs(strings) do\n        if output ==\
    \ nil or #value > length then\n            output = value\n            length\
    \ = #value\n        end\n    end\n    return output\nend", "    if not strings\
    \ or #strings == 0 then\n        return nil\n    end\n    if #strings == 1 then\n\
    \        return strings[1]\n    end\n    table.sort(strings, function(a, b) return\
    \ #a > #b end)\n    return strings[1]\nend", "\tif strings == nil or #strings\
    \ == 0 then\n\t\treturn nil\n\tend\n\tlocal max_len = 0\n\tlocal longest_string\
    \ = strings[1]\n\tfor _,str in ipairs(strings) do\n\t\tif #str > max_len then\n\
    \t\t\tmax_len = #str\n\t\t\tlongest_string = str\n\t\tend\n\tend\n\treturn longest_string\n\
    end", "\tif type(strings) ~= \"table\" then\n\t\treturn nil\n\tend\n\tlocal longest\
    \ = nil\n\tfor k,v in pairs(strings) do\n\t\tif not longest or string.len(v) >\
    \ string.len(longest) then\n\t\t\tlongest = v\n\t\tend\n\tend\n\treturn longest\n\
    end", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\t\n\t-- We have to sort\
    \ the list first so we can use table.remove(1)\n\ttable.sort(strings, function(a,\
    \ b) return #a > #b end)\n\t\n\treturn table.remove(strings, 1)\nend", "    if\
    \ #strings == 0 then\n        return nil\n    end\n    local _,i = max(map(strings,\
    \ #))\n    return strings[i]\nend", "  if table.empty(strings) then\n    return\
    \ nil\n  end\n  local best = table.first(strings)\n  for _, s in ipairs(strings)\
    \ do\n    if #s > #best then\n      best = s\n    end\n  end\n  return best\n\
    end", "\tif #strings == 0 then\n\t\treturn None\n\tend\n\tlocal longest_string\
    \ = strings[1]\n\tfor i=2,#strings do\n\t\tif #strings[i] > #longest_string then\n\
    \t\t\tlongest_string = strings[i]\n\t\tend\n\tend\n\treturn longest_string\nend",
  "\tlocal max = 0\n\tlocal result = nil\n\tfor _, word in ipairs(strings) do\n\t\t\
    if word:len() > max then\n\t\t\tmax = word:len()\n\t\t\tresult = word\n\t\tend\n\
    \tend\n\treturn result\nend", "  local longest_length = 0\n  local longest_string\
    \ = nil\n  for _, s in ipairs(strings) do\n    if #s > longest_length then\n \
    \     longest_length = #s\n      longest_string = s\n    end\n  end\n  return\
    \ longest_string\nend", "  if #strings > 0 then\n    local longest = strings[1]\n\
    \    for _, s in ipairs(strings) do\n      if #s > #longest then\n        longest\
    \ = s\n      end\n    end\n    return longest\n  end\nend", "  if #strings ==\
    \ 0 then\n    return None\n  end\n  local longestString = strings[1]\n  for _,\
    \ s in ipairs(strings) do\n    if #s > #longestString then\n      longestString\
    \ = s\n    end\n  end\n  return Some(longestString)\nend", "  local l = #strings\n\
    \  if l == 0 then\n    return nil\n  end\n  local max = strings[1]\n  for i =\
    \ 2, l do\n    if #strings[i] > #max then\n      max = strings[i]\n    end\n \
    \ end\n  return max\nend", "    if not strings or not next(strings) then\n   \
    \     return nil\n    end\n    local longest_string = strings[1]\n    for _, str\
    \ in ipairs(strings) do\n        if #str > #longest_string then\n            longest_string\
    \ = str\n        end\n    end\n    return longest_string\nend", "    if #strings\
    \ == 0 then\n        return\n    end\n    local longest_len = 0\n    local longest_str\
    \ = nil\n    for _, str in ipairs(strings) do\n        if #str > longest_len then\n\
    \            longest_len = #str\n            longest_str = str\n        end\n\
    \    end\n    return longest_str\nend", "\tlocal longestLen = 0\n\tlocal longestString\
    \ = nil\n\tfor _, str in ipairs(strings) do\n\t\tif str:len() > longestLen then\n\
    \t\t\tlongestLen = str:len()\n\t\t\tlongestString = str\n\t\tend\n\tend\n\treturn\
    \ longestString\nend", "    if #strings == 0 then\n        return nil\n    end\n\
    \    local longestStr = strings[1]\n    for _, str in ipairs(strings) do\n   \
    \     if #str > #longestStr then\n            longestStr = str\n        end\n\
    \    end\n    return longestStr\nend", "    if #strings == 0 then\n        return\
    \ nil\n    end\n    table.sort(strings, function(a, b) return #a > #b end)\n \
    \   return strings[1]\nend", "    if not strings then return nil end\n    if #strings\
    \ == 0 then return nil end\n    local longest = strings[1]\n    for i = 2, #strings\
    \ do\n        if #strings[i] > #longest then\n            longest = strings[i]\n\
    \        end\n    end\n    return longest\nend", "\tif #strings == 0 then\n\t\t\
    return nil\n\tend\n\tlocal best = strings[1]\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif #str > #best then\n\t\t\tbest = str\n\t\tend\n\tend\n\treturn best\n\
    end", "  if strings == nil or #strings == 0 then\n    return nil\n  end\n  local\
    \ max = 0\n  local max_idx = 1\n  for i = 1, #strings do\n    if strings[i] ==\
    \ nil then\n      return nil\n    end\n    if #strings[i] > max then\n      max\
    \ = #strings[i]\n      max_idx = i\n    end\n  end\n  return strings[max_idx]\n\
    end", "  if not strings then return nil end\n  if #strings == 0 then return nil\
    \ end\n  local longest, n = 1, #strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ > n then\n      longest, n = i, #strings[i]\n    end\n  end\n  return strings[longest]\n\
    end", "  if strings == nil or next(strings) == nil then\n    return nil\n  end",
  "  if not strings then return nil end\n  local longest = 1\n  for i, str in ipairs(strings)\
    \ do\n    if str:len() > strings[longest]:len() then\n      longest = i\n    end\n\
    \  end\n  return strings[longest]\nend", "  if #strings == 0 then\n    return\n\
    \  end\n  local max_len = 0\n  local longest_str = strings[1]\n  for _, str in\
    \ ipairs(strings) do\n    if #str > max_len then\n      max_len = #str\n     \
    \ longest_str = str\n    end\n  end\n  return longest_str\nend", "\tlocal len\
    \ = 0\n\tlocal longest_str = nil\n\tfor _,str in ipairs(strings) do\n\t\tif #str\
    \ > len then\n\t\t\tlen = #str\n\t\t\tlongest_str = str\n\t\tend\n\tend\n\treturn\
    \ longest_str\nend", "\tif #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ maxLen = 0\n\tlocal longest = nil\n\tfor _,str in ipairs(strings) do\n\t\tif\
    \ #str > maxLen then\n\t\t\tmaxLen = #str\n\t\t\tlongest = str\n\t\tend\n\tend\n\
    \treturn longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for _, s in ipairs(strings) do\n    if #s > #longest\
    \ then\n      longest = s\n    end\n  end\n  return longest\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local longest_str = strings[1]\n\
    \    for _, str in ipairs(strings) do\n        if #str > #longest_str then\n \
    \           longest_str = str\n        end\n    end\n    return longest_str\n\
    end", "    if not strings then return nil end\n    if type(strings) ~= \"table\"\
    \ then return nil end\n    if #strings == 0 then return nil end", "\tlocal longestLen,\
    \ longestStr = 0, nil\n\tfor _, s in ipairs(strings) do\n\t\tif #s > longestLen\
    \ then\n\t\t\tlongestLen, longestStr = #s, s\n\t\tend\n\tend\n\treturn longestStr\n\
    end", "  local longest = nil\n  local longest_length = 0\n  for _, string in ipairs(strings)\
    \ do\n    local length = string.len(string)\n    if length > longest_length then\n\
    \      longest = string\n      longest_length = length\n    end\n  end\n  return\
    \ longest\nend", "\tlocal tmp = {}\n\tfor i = 1, #strings do\n\t\ttmp[i] = #strings[i]\n\
    \tend\n\tlocal i = vlc.misc.max_index(tmp)\n\tif i == 0 then\n\t\treturn \"None\"\
    \n\telse\n\t\treturn strings[i]\n\tend\nend", "\tlocal longest_string = nil\n\t\
    local longest_length = 0\n\tfor _, s in ipairs(strings) do\n\t\tlocal len = s:len()\n\
    \t\tif len > longest_length then\n\t\t\tlongest_string = s\n\t\t\tlongest_length\
    \ = len\n\t\tend\n\tend\n\treturn longest_string\nend", "    if #strings == 0\
    \ then\n        return nil\n    end\n    local result = strings[1]\n    for _,\
    \ string in ipairs(strings) do\n        if #string > #result then\n          \
    \  result = string\n        end\n    end\n    return result\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local result = strings[1]\n    for\
    \ _, str in ipairs(strings) do\n        if str:len() > result:len() then\n   \
    \         result = str\n        end\n    end\n    return result\nend", "  local\
    \ maxLen = 0\n  local longest = nil\n  for _, s in ipairs(strings) do\n    if\
    \ string.len(s) > maxLen then\n      maxLen = string.len(s)\n      longest = s\n\
    \    end\n  end\n  return longest\nend", "    if #strings == 0 then\n        return\
    \ \"None\"\n    end\n    local result = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #result then\n            result = s\n        end\n    end\n\
    \    return result\nend", "    local longest_string = nil\n    local longest_length\
    \ = -1\n    for k, v in pairs(strings) do\n        if v ~= nil and type(v) ==\
    \ \"string\" then\n            local len = string.len(v)\n            if len >\
    \ longest_length then\n                longest_length = len\n                longest_string\
    \ = v\n            end\n        end\n    end\n    return longest_string\nend",
  "    if #strings == 0 then\n        return nil\n    end\n    local l = strings[1]\n\
    \    for _, s in ipairs(strings) do\n        if #s > #l then\n            l =\
    \ s\n        end\n    end\n    return l\nend", "    local longest_string = nil\n\
    \    local max_length = 0\n    for _, s in ipairs(strings) do\n        if s:len()\
    \ > max_length then\n            max_length = s:len()\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend", "  if not strings\
    \ or #strings == 0 then\n    return nil\n  end\n  local max_length = #strings[1]\n\
    \  local max_length_word = strings[1]\n  for _, s in ipairs(strings) do\n    if\
    \ #s > max_length then\n      max_length = #s\n      max_length_word = s\n   \
    \ end\n  end\n  return max_length_word\nend", "  if #strings > 0 then\n    local\
    \ best = strings[1]\n    for _, s in ipairs(strings) do\n      if #s > #best then\n\
    \        best = s\n      end\n    end\n    return best\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local maxLength = strings[1]:len()\n  local\
    \ maxLengthStrings = { strings[1] }\n  for i = 2, #strings do\n    local strLen\
    \ = strings[i]:len()\n    if strLen > maxLength then\n      maxLength = strLen\n\
    \      maxLengthStrings = { strings[i] }\n    elseif strLen == maxLength then\n\
    \      table.insert(maxLengthStrings, strings[i])\n    end\n  end\n  return maxLengthStrings[1]\n\
    end", "  local max_len = 0\n  local max_len_strings = {}\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > max_len then\n      max_len = len\n \
    \     max_len_strings = {str}\n    elseif len == max_len then\n      table.insert(max_len_strings,\
    \ str)\n    end\n  end\n  return max_len_strings[1]\nend", "    if not strings\
    \ then return nil end\n    if type(strings) ~= \"table\" then return nil end\n\
    \    if #strings == 0 then return nil end", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local max = strings[1]\n  for _, v in ipairs(strings) do\n   \
    \ if #v > #max then\n      max = v\n    end\n  end\n  return max\nend", "\tlocal\
    \ len = 0\n\tlocal longest = nil\n\tfor _, v in ipairs(strings) do\n\t\tif #v\
    \ > len then\n\t\t\tlen = #v\n\t\t\tlongest = v\n\t\tend\n\tend\n\treturn longest\n\
    end", "\tif (type(strings) ~= \"table\") then\n\t\treturn nil\n\tend\n\tlocal\
    \ longest_length = 0\n\tlocal longest_str = nil\n\tfor _,str in ipairs(strings)\
    \ do\n\t\tif (type(str) == \"string\") then\n\t\t\tlocal len = string.len(str)\n\
    \t\t\tif (len > longest_length) then\n\t\t\t\tlongest_length = len\n\t\t\t\tlongest_str\
    \ = str\n\t\t\tend\n\t\tend\n\tend\n\treturn longest_str\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for _, s in\
    \ ipairs(strings) do\n    if #s > #longest then\n      longest = s\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest_idx = 1\n  for i = 2, #strings do\n    if #strings[i] > #strings[longest_idx]\
    \ then\n      longest_idx = i\n    end\n  end\n  return strings[longest_idx]\n\
    end", "  local longest = nil\n  local length = 0\n  for _, v in ipairs(strings)\
    \ do\n    if #v > length then\n      longest = v\n      length = #v\n    end\n\
    \  end\n  return longest\nend", "    local longest = nil\n    local max_len =\
    \ 0\n    for _, word in ipairs(strings) do\n        if word:len() > max_len then\n\
    \            longest = word\n            max_len = word:len()\n        end\n \
    \   end\n    return longest\nend", "    local answer = nil\n    local maximum\
    \ = 0\n    for _, v in ipairs(strings) do\n        if #v > maximum then\n    \
    \        answer = v\n            maximum = #v\n        end\n    end\n    return\
    \ answer\nend", "    if #strings == 0 then\n        return None\n    end\n   \
    \ local longest_idx = 1\n    local longest_size = #strings[1]\n    for i = 2,\
    \ #strings do\n        if #strings[i] > longest_size then\n            longest_idx\
    \ = i\n            longest_size = #strings[i]\n        end\n    end\n    return\
    \ strings[longest_idx]\nend", "  if not strings then return nil end\n  if #strings\
    \ == 0 then return nil end\n  local idx = 1\n  local len = #strings[1]\n  for\
    \ i,str in ipairs(strings) do\n    if #str > len then\n      idx = i\n      len\
    \ = #str\n    end\n  end\n  return strings[idx]\nend", "    if not strings then\
    \ return nil end\n    local len = -1\n    local ret = nil\n    for _, s in ipairs(strings)\
    \ do\n        if s:len() > len then\n            len = s:len()\n            ret\
    \ = s\n        end\n    end\n    return ret\nend", "  if type(strings) ~= \"table\"\
    \ then\n    error(\"longest function must take a table as its argument.\")\n \
    \ end\n  local longest_string = nil\n  local longest_length = 0\n  for _, s in\
    \ ipairs(strings) do\n    if type(s) ~= \"string\" then\n      error(\"longest\
    \ function must take a table of strings as its argument.\")\n    end\n    if #s\
    \ > longest_length then\n      longest_string = s\n      longest_length = #s\n\
    \    end\n  end\n  return longest_string\nend", "    local s = table.maxn(strings)\n\
    \    if s == 0 then\n        return nil\n    end\n    local longest = \"\"\n \
    \   for _,v in ipairs(strings) do\n        if string.len(v) > string.len(longest)\
    \ then\n            longest = v\n        end\n    end\n    return longest\nend",
  "  if #strings == 0 then\n    return None\n  end\n  local max_size = 0\n  local\
    \ longest_string = \"\"\n  for _, line in ipairs(strings) do\n    if #line > max_size\
    \ then\n      max_size = #line\n      longest_string = line\n    end\n  end\n\
    \  return longest_string\nend", "    local result = nil\n    local result_len\
    \ = 0\n    for _, v in ipairs(strings) do\n        local v_len = string.len(v)\n\
    \        if v_len > result_len then\n            result = v\n            result_len\
    \ = v_len\n        end\n    end\n    return result\nend", "  local result = nil\n\
    \  local length = 0\n  for _,v in ipairs(strings) do\n    if #v > length then\n\
    \      result = v\n      length = #v\n    end\n  end\n  return result\nend", " \
    \ local longestString = nil\n  local longestLength = 0\n  for _, string in ipairs(strings)\
    \ do\n    local length = string.len(string)\n    if length > longestLength then\n\
    \      longestString = string\n      longestLength = length\n    end\n  end\n\
    \  return longestString\nend", "    local longest = nil\n    local length = 0\n\
    \    for _, str in ipairs(strings) do\n        if str:len() > length then\n  \
    \          longest = str\n            length = str:len()\n        end\n    end\n\
    \    return longest\nend", "    local best = nil\n    local best_size = 0\n  \
    \  for _, s in ipairs(strings) do\n        local sz = #s\n        if sz > best_size\
    \ then\n            best = s\n            best_size = sz\n        end\n    end\n\
    \    return best\nend", "\tif strings == nil or #strings == 0 then\n\t\treturn\
    \ nil\n\tend\n\t\n\tlocal result = strings[1]\n\tfor i, str in ipairs(strings)\
    \ do\n\t\tif #str > #result then\n\t\t\tresult = str\n\t\tend\n\tend\n\t\n\treturn\
    \ result\nend", "  -- keep track of the longest string and its length (initially\
    \ 0)\n  local longest_string,longest_length = nil,0\n  -- iterate over the strings\n\
    \  for _,s in ipairs(strings) do\n    -- if the current string is longer than\
    \ the longest one, update it\n    if #s > longest_length then\n      longest_string,longest_length\
    \ = s,#s\n    end\n  end\n  -- return the longest string\n  return longest_string\n\
    end", "    local length = 0\n    local idx    = nil\n    for i = 1, #strings do\n\
    \        if #strings[i] > length then\n            length = #strings[i]\n    \
    \        idx    = i\n        end\n    end\n    return idx and strings[idx] or\
    \ nil\nend", "    if next(strings) == nil then\n        return nil\n    end\n\
    \    local longest_string = next(strings)\n    for _, string in pairs(strings)\
    \ do\n        if string:len() > longest_string:len() then\n            longest_string\
    \ = string\n        end\n    end\n    return longest_string\nend", "    if #strings\
    \ == 0 then\n        return nil\n    end\n    local max = #strings[1]\n    local\
    \ maxIndex = 1\n    for i, s in ipairs(strings) do\n        if #s > max then\n\
    \            max = #s\n            maxIndex = i\n        end\n    end\n    return\
    \ strings[maxIndex]\nend", "    if not strings then return \"\" end\n    if #strings\
    \ == 0 then return \"\" end\n    local maxLength = 0\n    local longest = \"\"\
    \n    for _,v in ipairs(strings) do\n        if #v > maxLength then\n        \
    \    maxLength = #v\n            longest = v\n        end\n    end\n    return\
    \ longest\nend", "    local len = 0\n    local longest_string = nil\n    for _,\
    \ s in ipairs(strings) do\n        if #s > len then\n            len = #s\n  \
    \          longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "    local longest_string = nil\n    local longest_len = 0\n    for _,s\
    \ in ipairs(strings) do\n        local slen = #s\n        if slen > longest_len\
    \ then\n            longest_len = slen\n            longest_string = s\n     \
    \   end\n    end\n    return longest_string\nend", "\tif (#strings == 0) then\n\
    \t\treturn nil\n\tend\n\t\n\tlocal max = -1\n\tlocal longestWord = \"\"\n\tfor\
    \ _, str in ipairs(strings) do\n\t\tif (#str > max) then\n\t\t\tmax = #str\n\t\
    \t\tlongestWord = str\n\t\tend\n\tend\n\t\n\treturn longestWord\nend", "    local\
    \ longest_length = 0\n    local longest_string = nil\n    for _, s in ipairs(strings)\
    \ do\n        if s:len() > longest_length then\n            longest_length = s:len()\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end", "  if #strings == 0 then\n    return none\n  end\n  local str = table.remove(strings,\
    \ 1)\n  for _, s in ipairs(strings) do\n    if #s > #str then\n      str = s\n\
    \    end\n  end\n  return str\nend", "  if type(strings) ~= \"table\" then\n \
    \   return nil\n  end\n  local longest = \"\"\n  for _,s in ipairs(strings) do\n\
    \    if s:len() > longest:len() then\n      longest = s\n    end\n  end\n  return\
    \ longest\nend", "  local maxLength = 0\n  local longestString = nil\n  for _,s\
    \ in ipairs(strings) do\n    if #s > maxLength then\n      maxLength = #s\n  \
    \    longestString = s\n    end\n  end\n  return longestString\nend", "  local\
    \ longest = \"\"\n  for _, s in ipairs(strings) do\n    if string.len(s) > string.len(longest)\
    \ then\n      longest = s\n    end\n  end\n  return longest\nend", "\tif #strings\
    \ == 0 then\n\t\treturn None\n\tend\n\tlocal length = 0\n\tlocal longest_string\
    \ = None\n\tfor _, string in ipairs(strings) do\n\t\tif string:len() > length\
    \ then\n\t\t\tlength = string:len()\n\t\t\tlongest_string = string\n\t\tend\n\t\
    end\n\treturn longest_string\nend", "  local ret = ''\n  for _, str in ipairs(strings)\
    \ do\n    if #str > #ret then\n      ret = str\n    end\n  end\n  return ret\n\
    end", "\tlocal max = \"\"\n\tlocal max_len = 0\n\tfor _, curr in ipairs(strings)\
    \ do\n\t\tlocal len = #curr\n\t\tif len > max_len then\n\t\t\tmax = curr\n\t\t\
    \tmax_len = len\n\t\tend\n\tend\n\treturn max\nend", "    if not strings then\
    \ return nil end\n    if #strings == 0 then return nil end\n    local longest\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #longest then\n\
    \            longest = s\n        end\n    end\n    return longest\nend", "  \
    \  local longest_len = 0\n    local longest_str = nil\n    for _, s in ipairs(strings)\
    \ do\n        if #s > longest_len then\n            longest_len = #s\n       \
    \     longest_str = s\n        end\n    end\n    return longest_str\nend", " \
    \ if #strings == 0 then\n    return\n  end\n  local longest = strings[1]\n  for\
    \ _, str in ipairs(strings) do\n    if str:len() > longest:len() then\n      longest\
    \ = str\n    end\n  end\n  return longest\nend", "    local longest_length = 0\n\
    \    local longest_str = nil\n    for _, str in ipairs(strings) do\n        if\
    \ #str > longest_length then\n            longest_length = #str\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend", "\tlocal max,longest\
    \ = 0,''\n\tfor i,string in ipairs(strings) do\n\t\tif #string > max then\n\t\t\
    \tmax = #string\n\t\t\tlongest = string\n\t\tend\n\tend\n\treturn longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local max = strings[1]\n  for\
    \ _, s in ipairs(strings) do\n    if #s > #max then\n      max = s\n    end\n\
    \  end\n  return max\nend", "    if #strings == 0 then\n        return nil\n \
    \   end\n    local max_str = strings[1]\n    local max_len = #max_str\n    for\
    \ i = 2, #strings do\n        local str = strings[i]\n        local len = #str\n\
    \        if len > max_len then\n            max_str = str\n            max_len\
    \ = len\n        end\n    end\n    return max_str\nend", "  local longestLen =\
    \ 0\n  local longestString\n  for _, s in ipairs(strings) do\n    if #s > longestLen\
    \ then\n      longestLen = #s\n      longestString = s\n    end\n  end\n  return\
    \ longestString\nend", "  if #strings == 0 then\n    return nil\n  end\n  table.sort(strings,\
    \ function(x, y) return #x > #y end)\n  return strings[1]\nend", "  if not strings\
    \ or #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #longest then\n      longest =\
    \ s\n    end\n  end\n  return longest\nend", "\tlocal list = {}\n\tfor _, s in\
    \ ipairs(strings) do\n\t\tlist[#list + 1] = {\n\t\t\tstring = s,\n\t\t\tlength\
    \ = s:len()\n\t\t}\n\tend\n\ttable.sort(list, function(a, b) return a.length >\
    \ b.length end)\n\tif #list == 0 then\n\t\treturn nil\n\telse\n\t\treturn list[1].string\n\
    \tend\nend", "  local string = nil\n  local length = 0\n  for i, s in ipairs(strings)\
    \ do\n    if s:len() > length then\n      string = s\n      length = s:len()\n\
    \    end\n  end\n  return string\nend", "    local out = nil\n    for _,str in\
    \ ipairs(strings) do\n        if not out or #str > #out then\n            out\
    \ = str\n        end\n    end\n    return out\nend", "    if #strings == 0 then\n\
    \        return nil\n    end\n    local maxLen = 0\n    local longest = nil\n\
    \    for _, s in ipairs(strings) do\n        if #s > maxLen then\n           \
    \ maxLen = #s\n            longest = s\n        end\n    end\n    return longest\n\
    end", "    if #strings == 0 then\n        return None\n    end\n    local max\
    \ = strings[1]\n    for _, s in ipairs(strings) do\n        if #s > #max then\n\
    \            max = s\n        end\n    end\n    return max\nend", "  local _max,\
    \ res\n  for _,v in ipairs(strings) do\n    if not _max or string.len(v) > _max\
    \ then\n      _max = string.len(v)\n      res = v\n    end\n  end\n  return res\n\
    end", "    local ret\n    local maxlen = 0\n    for _, str in ipairs(strings)\
    \ do\n        if #str > maxlen then\n            ret = str\n            maxlen\
    \ = #str\n        end\n    end\n    return ret\nend", "    if #strings == 0 then\n\
    \        return nil\n    end\n    local result = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #result then\n            result = s\n        end\n    end\n\
    \    return result\nend", "  local maxlen = 0\n  local maxstr = nil\n  for i,\
    \ str in ipairs(strings) do\n    if maxstr == nil or #str > maxlen then\n    \
    \  maxstr = str\n      maxlen = #str\n    end\n  end\n  return maxstr\nend", "\t\
    if #strings == 0 then\n\t\treturn nil\n\tend\n\tlocal l = 0\n\tlocal ls = ''\n\
    \tfor _, s in ipairs(strings) do\n\t\tif #s > l then\n\t\t\tl = #s\n\t\t\tls =\
    \ s\n\t\tend\n\tend\n\treturn ls\nend", "  local longest = nil\n  for _, s in\
    \ ipairs(strings) do\n    if longest == nil or #s > #longest then\n      longest\
    \ = s\n    end\n  end\n  return longest\nend", "    if not strings then return\
    \ nil end\n    local max = \"\"\n    for _,s in ipairs(strings) do\n        if\
    \ s:len() > max:len() then max = s end\n    end\n    return max\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local max = strings[1]\n  for _,s in ipairs(strings)\
    \ do\n    if #s > #max then\n      max = s\n    end\n  end\n  return max\nend",
  "  if not strings or #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = nil\n  for _, str in ipairs(strings) do\n    if not longest or string.len(str)\
    \ > string.len(longest) then\n      longest = str\n    end\n  end\n  return longest\n\
    end", "    local lst = strings\n    if lst == nil or not next(lst) then\n    \
    \    return nil\n    end\n    local longest = lst[1]\n    for _, str in ipairs(lst)\
    \ do\n        if #str > #longest then\n            longest = str\n        end\n\
    \    end\n    return longest\nend", "    -- Check the list of strings is not empty.\n\
    \    if not strings or type(strings) ~= 'table' or #strings == 0 then\n      \
    \  return nil\n    end", "\tif type(strings) ~= \"table\" then\n\t\tdebug.print(\"\
    Error\", \"longest: input must be a table of strings\")\n\t\treturn nil\n\tend\n\
    \tlocal longest\n\tlocal maxlen = 0\n\tfor i, str in ipairs(strings) do\n\t\t\
    if type(str) ~= \"string\" then\n\t\t\tdebug.print(\"Error\", \"longest: input\
    \ must be a table of strings\")\n\t\t\treturn nil\n\t\tend\n\t\tif str:len() >\
    \ maxlen then\n\t\t\tmaxlen = str:len()\n\t\t\tlongest = str\n\t\tend\n\tend\n\
    \treturn longest\nend", "    local longest = nil\n    for i = 1, #strings do\n\
    \        if not longest or #strings[i] > #longest then\n            longest =\
    \ strings[i]\n        end\n    end\n    return longest\nend", "  if is_empty(strings)\
    \ then\n    return None\n  end\n  local longest = head(strings)\n  local length_of_longest\
    \ = #longest\n  for i, current in ipairs(strings) do\n    if #current > length_of_longest\
    \ then\n      longest = current\n      length_of_longest = #current\n    end\n\
    \  end\n  return longest\nend", "  if not strings then return nil end\n  local\
    \ longest_string = nil\n  local longest_length = 0\n  for _, string in ipairs(strings)\
    \ do\n    if not longest_string or #string > longest_length then\n      longest_string\
    \ = string\n      longest_length = #string\n    end\n  end\n  return longest_string\n\
    end", "    if not strings then return nil end\n    local longest_string = strings[1]\n\
    \    local longest_len = longest_string and #longest_string or 0\n    for _, s\
    \ in ipairs(strings) do\n        if #s > longest_len then\n            longest_string\
    \ = s\n            longest_len = #s\n        end\n    end\n    return longest_string\n\
    end", "\tlocal longest = nil\n\tlocal len = 0\n\tfor _, v in ipairs(strings) do\n\
    \t\tif #v > len then\n\t\t\tlongest = v\n\t\t\tlen = #v\n\t\tend\n\tend\n\treturn\
    \ longest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
