name: HumanEval_150_x_or_y
language: lua
prompt: "-- A simple program which should return the value of x if n is \n-- a prime\
  \ number and should return the value of y otherwise.\n-- Examples:\nlocal function\
  \ x_or_y(n, x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = x_or_y\n\
  \    lu.assertEquals(candidate(7, 34, 12), 34)\n    lu.assertEquals(candidate(15,\
  \ 8, 5), 5)\n    lu.assertEquals(candidate(3, 33, 5212), 33)\n    lu.assertEquals(candidate(1259,\
  \ 3, 52), 3)\n    lu.assertEquals(candidate(7919, -1, 12), -1)\n    lu.assertEquals(candidate(3609,\
  \ 1245, 583), 583)\n    lu.assertEquals(candidate(91, 56, 129), 129)\n    lu.assertEquals(candidate(6,\
  \ 34, 1234), 1234)\n    lu.assertEquals(candidate(1, 2, 0), 0)\n    lu.assertEquals(candidate(2,\
  \ 2, 0), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then\n        return y\n    elseif n == 2 then\n    \
    \    return x\n    else\n        for i = 2, n/2 do\n            if n % i == 0\
    \ then\n                return y\n            end\n        end\n        return\
    \ x\n    end\nend\nassert(x_or_y(1, 2, 3) == 3)\nassert(x_or_y(2, 2, 3) == 2)\n\
    assert(x_or_y(3, 2, 3) == 2)\nassert(x_or_y(4, 2, 3) == 3)\nassert(x_or_y(5, 2,\
    \ 3) == 2)\nassert(x_or_y(10, 2, 3) == 3)\nassert(x_or_y(12, 2, 3) == 3)\nassert(x_or_y(17,\
    \ 2, 3) == 2)\nassert(x_or_y(17, \"a\", \"b\") == \"a\")\nassert(x_or_y(12, \"\
    a\", \"b\") == \"b\")\nassert(x_or_y(2, \"a\", \"b\") == \"a\")\nprint(\"If you've\
    \ seen this text, then there weren't any errors.\")", "  -- Write your solution\
    \ here\nend\nassert(x_or_y(5, \"x\", \"y\") == \"x\")\nassert(x_or_y(4, \"x\"\
    , \"y\") == \"y\")\nassert(x_or_y(13, \"x\", \"y\") == \"x\")\nassert(x_or_y(6,\
    \ \"x\", \"y\") == \"y\")", "    if n < 2 then\n        return y\n    end\n  \
    \  if n == 2 then\n        return x\n    end\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            return y\n        end\n    end\n    return\
    \ x\nend", "\treturn n % 2 == 0 and y or x;\nend", "  if (n % 2) == 0 then\n \
    \   return y\n  else\n    return x\n  end\nend", "  -- TODO: implement this!\n\
    end", "    if (n < 2) then\n        return y\n    end\n    local k = math.floor(math.sqrt(n))\n\
    \    for i = 2, k do\n        if (n % i == 0) then\n            return y\n   \
    \     end\n    end\n    return x\nend", "\tif is_prime(n) then return x else return\
    \ y end\nend", "  return n:is_prime() and x or y\nend", "  if n % 2 == 0 then\n\
    \    return y\n  else\n    return x\n  end\nend", "    return ((n % 2) == 0) and\
    \ y or x\nend", "    -- Insert your code here\n    if n==1 then\n        return\
    \ y\n    elseif n==2 then\n        return x\n    else\n        for i=2,math.sqrt(n)\
    \ do\n            if n%i==0 then\n                return y\n            end\n\
    \        end\n        return x\n    end\nend", "\tprint (\"-- x_or_y\")\n\tprint\
    \ (\"local function x_or_y(n, x, y)\")\n\tprint (\"\treturn (is_prime(n) and x\
    \ or y)\")\n\tprint (\"end\")\n\tprint (\"print ('x_or_y(3, 1, 2) = ' .. x_or_y(3,\
    \ 1, 2))\")\n\tprint (\"print ('x_or_y(4, 1, 2) = ' .. x_or_y(4, 1, 2))\")\n\t\
    print (\"print ('x_or_y(5, 1, 2) = ' .. x_or_y(5, 1, 2))\")\n\tprint (\"print\
    \ ('x_or_y(6, 1, 2) = ' .. x_or_y(6, 1, 2))\")\n\tprint (\"print ('x_or_y(7, 1,\
    \ 2) = ' .. x_or_y(7, 1, 2))\")\n\tprint (\"print ('x_or_y(8, 1, 2) = ' .. x_or_y(8,\
    \ 1, 2))\")\n\tprint (\"print ('x_or_y(9, 1, 2) = ' .. x_or_y(9, 1, 2))\")\n\t\
    print (\"print ('x_or_y(10, 1, 2) = ' .. x_or_y(10, 1, 2))\")\n\tprint (\"print\
    \ ('x_or_y(11, 1, 2) = ' .. x_or_y(11, 1, 2))\")\n\tprint (\"print ('x_or_y(12,\
    \ 1, 2) = ' .. x_or_y(12, 1, 2))\")\n\tprint (\"print ('x_or_y(13, 1, 2) = ' ..\
    \ x_or_y(13, 1, 2))\")\n\tprint (\"print ('x_or_y(14, 1, 2) = ' .. x_or_y(14,\
    \ 1, 2))\")\n\tprint (\"print ('x_or_y(15, 1, 2) = ' .. x_or_y(15, 1, 2))\")\n\
    \tprint (\"print ('x_or_y(16, 1", "    -- xor :: Int -> Int -> Int -> Int\n  \
    \  local function xor(n, x, y)\n        return n == 0 and y or x\n    end", " \
    \ if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend", "  return\
    \ n % 2 == 0 and y or x\nend", "\tlocal i = 2\n\twhile i < n do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn y\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn x\nend",
  "    if(is_prime(n)) then\n        return x\n    else\n        return y\n    end\n\
    end", "    if n % 2 == 0 then\n        return y\n    else\n        return x\n\
    \    end\nend", "  local function is_prime(n)\n    if n == 1 then return false\
    \ end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then return false end\n\
    \    end\n    return true\n  end\n  if is_prime(n) then return x else return y\
    \ end\nend\nassert(x_or_y(8, 1, 2) == 2)\nassert(x_or_y(7, 1, 2) == 1)", "   \
    \ -- START: Your code here.\n    return\n    -- END: Your code here.\nend", " \
    \  if isPrime(n) then\n      return x\n   else\n      return y\n   end\nend",
  "    return n\nend", "\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ y\n\t\tend\n\tend\n\treturn x\nend\nassert(x_or_y(2, 'x', 'y') == 'x')\nassert(x_or_y(8,\
    \ 'x', 'y') == 'y')", "    return n ^ 2 - n == 0 and x or y\nend", "\t-- TODO:\
    \ Your code here\n\tif is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\t\
    end\nend", "    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "    for d = 2, math.sqrt(n) do\n        if (n % d) == 0 then\n\
    \            return y\n        end\n    end\n    return x\nend", "   if n <= 0\
    \ then return y end\n   local cnt = 1\n   for i = 2, n do\n      if n % i == 0\
    \ then cnt = cnt + 1 end\n   end\n   if cnt == 1 then return x end\n   return\
    \ y\nend", "    return n % 2 == 0 and y or x\nend\nprint(x_or_y(3, -1, 5))\nprint(x_or_y(4,\
    \ -1, 5))\nprint(x_or_y(5, -1, 5))\nprint(x_or_y(6, -1, 5))", "\treturn n>0 and\
    \ n%2==1 and (n==1 or x_or_y(n/2, x, y)) or y\nend\nassert(x_or_y(1, \"x\", \"\
    y\") == \"x\")\nassert(x_or_y(2, \"x\", \"y\") == \"y\")\nassert(x_or_y(3, \"\
    x\", \"y\") == \"x\")\nassert(x_or_y(4, \"x\", \"y\") == \"y\")\nassert(x_or_y(5,\
    \ \"x\", \"y\") == \"x\")\nassert(x_or_y(6, \"x\", \"y\") == \"y\")\nassert(x_or_y(7,\
    \ \"x\", \"y\") == \"x\")\nassert(x_or_y(8, \"x\", \"y\") == \"y\")\nassert(x_or_y(9,\
    \ \"x\", \"y\") == \"y\")", "\treturn ()\nend", "    -- your code here\nend\n\
    assert(x_or_y(2, 3, 4) == 3)\nassert(x_or_y(3, 3, 4) == 3)\nassert(x_or_y(5, 3,\
    \ 4) == 3)\nassert(x_or_y(4, 3, 4) == 4)\nassert(x_or_y(6, 3, 4) == 4)\nassert(x_or_y(7,\
    \ 3, 4) == 3)\nassert(x_or_y(8, 3, 4) == 4)\nassert(x_or_y(9, 3, 4) == 4)\nassert(x_or_y(10,\
    \ 3, 4) == 4)", "  -- YOUR CODE HERE\nend", "  -- YOUR CODE HERE\nend", end, " \
    \ if(is_prime(n)) then\n    return x\n  else\n    return y\n  end\nend", "   \
    \ if n &lt; 2 then\n        return y\n    end\n    for i = 2, n - 1 do\n     \
    \   if n % i == 0 then\n            return y\n        end\n    end\n    return\
    \ x\nend\n</code>\nNote that this is not a perfect prime testing, but should be\
    \ enough for your case.\n", "    if n < 2 then\n        return nil\n    end\n\
    \    for i = 2, n - 1 do\n        if n % i == 0 then\n            return y\n \
    \       end\n    end\n    return x\nend", "  if is_prime(n) then\n    return x\n\
    \  else\n    return y\n  end\nend", "  if math.is_prime(n) then\n    return x\n\
    \  else\n    return y\n  end\nend", "    return true, x\nend", "\tlocal is_prime\
    \ = true\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tis_prime = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\tif is_prime then\n\t\treturn x\n\telse\n\t\treturn\
    \ y\n\tend\nend", "  return true and x or y -- bad\nend", "  if n % 2 == 0 then\n\
    \    return x\n  else\n    return y\n  end\nend", "  local f = n % 2 == 0 and\
    \ y or x\n  return f\nend", "    return n < 2 and y or (n % 2 == 0 and y or (n\
    \ % 3 == 0 and y or \n        (n % 5 == 0 and y or (n % 7 == 0 and y or (n % 11\
    \ == 0 and y or \n        (n % 13 == 0 and y or (n % 17 == 0 and y or (n % 19\
    \ == 0 and y or x)))))))))\nend", "\treturn n\nend", end, "  error(\"Unimplemented\"\
    )\nend", end, "    for i = 2, n - 1 do\n        if n % i == 0 then\n         \
    \   return y\n        end\n    end\n    return x\nend", "  local function tester(m)\n\
    \    if (n % m) == 0 then\n      return false\n    elseif m*m > n then\n     \
    \ return true\n    else\n      return tester(m+1)\n    end\n  end\n  if n < 2\
    \ then\n    return y\n  else\n    return tester(2) and x or y\n  end\nend\nprint(x_or_y(3,\
    \ \"3 is prime\", \"3 is composite\"))\nprint(x_or_y(4, \"4 is prime\", \"4 is\
    \ composite\"))\nprint(x_or_y(6, \"6 is prime\", \"6 is composite\"))", "   local\
    \ function iter(i, res)\n      if i == n then\n         return res and x or y\n\
    \      elseif n % i == 0 then\n         return res and iter(i + 1, res) or false\n\
    \      else\n         return res and false or iter(i + 1, res)\n      end\n  \
    \ end\n   return iter(2, true)\nend", "    local i\n    if n == 1 then return\
    \ x end\n    if n == 2 then return y end\n    for i = 2, n-1 do\n        if n\
    \ % i == 0 then return x end\n    end\n    return y\nend", "    local is_prime\
    \ = math.is_prime\n    if (is_prime(n)) then\n        return x\n    else\n   \
    \     return y\n    end\nend", "  \nend", "  if n % 2 == 0 then\n    return y\n\
    \  else\n    return x\n  end\nend", "    -- TODO: implement this function\n  \
    \  return 1\nend", "\tlocal function is_prime(n)\n\t\tfor i = 2, n-1 do\n\t\t\t\
    if n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\
    \tend\n\tif is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend",
  '    local result', "    assert(is_int(n) and is_int(x) and is_int(y), \"x_or_y\
    \ expects integers\")\n    --  x_or_y(5, 2, 7) == 2\n    --  x_or_y(4, 2, 7) ==\
    \ 7\n    if is_prime(n) then\n        return x\n    else\n        return y\n \
    \   end\nend\nassert(x_or_y(5, 2, 7) == 2)\nassert(x_or_y(4, 2, 7) == 7)\nassert(x_or_y(0,\
    \ 2, 7) == 7)\nassert(x_or_y(1, 2, 7) == 7)\nassert(x_or_y(2, 2, 7) == 2)\nassert(x_or_y(3,\
    \ 2, 7) == 2)\nassert(x_or_y(6, 2, 7) == 7)\nassert(x_or_y(7, 2, 7) == 2)\nassert(x_or_y(8,\
    \ 2, 7) == 7)\nassert(x_or_y(9, 2, 7) == 7)\nassert(x_or_y(10, 2, 7) == 7)\nassert(x_or_y(11,\
    \ 2, 7) == 2)\nassert(x_or_y(12, 2, 7) == 7)\nassert(x_or_y(13, 2, 7) == 2)\n\
    assert(x_or_y(1000, 2, 7) == 7)\nassert(x_or_y(1001, 2, 7) == 2)\nassert(x_or_y(1002,\
    \ 2, 7) == 7)\nassert(x_or_y(1003, 2, 7) == 2)\nassert(x_or_y(1004, 2, 7) == 7)\n\
    assert(x_or_y(1005, 2, 7) == 2)\nassert(x_or_y(1006, 2, 7) == 7)\nassert(x_or_y(1007,\
    \ 2, 7) == 2)\nassert(x_or_y(1008, 2, 7)", "  if prime.is_prime(n) then\n    return\
    \ x\n  else\n    return y\n  end\nend", "    if n == 1 then return x end\n   \
    \ local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i ==\
    \ 0 then return y end\n    end\n    return x\nend", "  return x\nend", "\t-- TODO\n\
    end", "    return ((n % 2 == 0) or (n % 3 == 0) or (n % 5 == 0) or (n % 7 == 0))\
    \ and y or x\nend", "    if prime(n) then\n        return x\n    else\n      \
    \  return y\n    end\nend", "    local nIsPrime = true\n    for i = 2, n-1 do\n\
    \        if n % i == 0 then nIsPrime = false end\n    end\n    if nIsPrime then\
    \ return x else return y end\nend", "    if n % 2 == 0 then\n        return y\n\
    \    else\n        return x\n    end\nend", "\tif is_prime(n) then\n\t\treturn\
    \ x\n\telse\n\t\treturn y\n\tend\nend", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "\t-- n is prime\n\tif n == 1\
    \ then\n\t\treturn y\n\telseif n == 2 then\n\t\treturn x\n\tend\n\tlocal i = 3\n\
    \twhile i*i <= n do\n\t\tif n % i == 0 then\n\t\t\treturn y\n\t\tend\n\t\ti =\
    \ i + 2\n\tend\n\treturn x\nend", "  local result\n  if is_prime(n) then\n   \
    \ result = x\n  else\n    result = y\n  end\n  return result\nend", "    return\
    \ x\nend", "    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "\tif n % 2 == 0 then\n\t\treturn y\n\telse\n\t\treturn x\n\
    \tend\nend", "  -- body\nend", "    if is_prime(n) then return x\n    else return\
    \ y\n    end\nend", "  if n%3 == 0 then\n    return y\n  else\n    return x\n\
    \  end\nend", "    if n == 0 then\n        return x\n    elseif n == 1 then\n\
    \        return y\n    else\n        return x\n    end\nend", "\tif is_prime(n)\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "    return n%2 == 0\
    \ and y or x\nend", "    if n == 2 then\n        return x\n    elseif n == 3 then\n\
    \        return x\n    elseif n == 5 then\n        return x\n    elseif n == 7\
    \ then\n        return x\n    elseif n == 11 then\n        return x\n    elseif\
    \ n == 13 then\n        return x\n    elseif n == 17 then\n        return x\n\
    \    elseif n == 19 then\n        return x\n    elseif n == 23 then\n        return\
    \ x\n    elseif n == 29 then\n        return x\n    elseif n == 31 then\n    \
    \    return x\n    elseif n == 37 then\n        return x\n    elseif n == 41 then\n\
    \        return x\n    elseif n == 43 then\n        return x\n    elseif n ==\
    \ 47 then\n        return x\n    elseif n == 53 then\n        return x\n    elseif\
    \ n == 59 then\n        return x\n    elseif n == 61 then\n        return x\n\
    \    elseif n == 67 then\n        return x\n    elseif n == 71 then\n        return\
    \ x\n    elseif n == 73 then\n        return x\n    elseif n == 79 then\n    \
    \    return x\n    elseif n == 83 then\n        return x\n    elseif n == 89 then\n\
    \        return x\n    elseif n == 97 then\n        return x\n    else\n     \
    \   return y\n    end\nend\nprint(x_or_y(3, 7, 6))\nprint(x_or_y(4, 5, 9))", " \
    \ return ((n == 3) and x) or y\nend\nprint(x_or_y(1, 3, 5)) --> 3\nprint(x_or_y(2,\
    \ 3, 5)) --> 5", "    if is_prime(n) then\n        return x\n    else\n      \
    \  return y\n    end\nend", "  assert(n > 0)\n  assert(n < 10)\n  local res\n\
    \  if (n == 2) then\n    res = x\n  elseif (n == 3) then\n    res = x\n  elseif\
    \ (n == 5) then\n    res = x\n  elseif (n == 7) then\n    res = x\n  else\n  \
    \  res = y\n  end\n  return res\nend\nassert(x_or_y(2, 10, 20) == 10)\nassert(x_or_y(3,\
    \ 10, 20) == 10)\nassert(x_or_y(5, 10, 20) == 10)\nassert(x_or_y(7, 10, 20) ==\
    \ 10)\nassert(x_or_y(8, 10, 20) == 20)\nassert(x_or_y(9, 10, 20) == 20)", "\t\
    if (isPrime(n)) then return x else return y end\nend", "   if is_prime(n) then\n\
    \      return x\n   else\n      return y\n   end\nend", "\tlocal mod = math.mod\n\
    \tlocal sqrt = math.sqrt\n\tlocal ceil = math.ceil\n\t\n\tif mod(n, 2) == 0 then\n\
    \t\treturn y\n\tend\n\tlocal max = ceil(sqrt(n))\n\tfor i = 3, max, 2 do\n\t\t\
    if mod(n, i) == 0 then\n\t\t\treturn y\n\t\tend\n\tend\n\treturn x\nend", "  \
    \  if n == 3 then\n        return x\n    elseif n == 5 then\n        return x\n\
    \    elseif n == 7 then\n        return x\n    elseif n == 11 then\n        return\
    \ x\n    elseif n == 13 then\n        return x\n    elseif n == 17 then\n    \
    \    return x\n    elseif n == 19 then\n        return x\n    elseif n == 23 then\n\
    \        return x\n    elseif n == 29 then\n        return x\n    elseif n ==\
    \ 31 then\n        return x\n    elseif n == 37 then\n        return x\n    elseif\
    \ n == 41 then\n        return x\n    elseif n == 43 then\n        return x\n\
    \    elseif n == 47 then\n        return x\n    elseif n == 53 then\n        return\
    \ x\n    elseif n == 59 then\n        return x\n    elseif n == 61 then\n    \
    \    return x\n    elseif n == 67 then\n        return x\n    elseif n == 71 then\n\
    \        return x\n    elseif n == 73 then\n        return x\n    elseif n ==\
    \ 79 then\n        return x\n    elseif n == 83 then\n        return x\n    elseif\
    \ n == 89 then\n        return x\n    elseif n == 97 then\n        return x\n\
    \    elseif n == 101 then\n        return x\n    elseif n == 103 then\n      \
    \  return x\n    elseif n == 107 then\n        return x\n    elseif n == 109 then\n\
    \        return x\n    elseif n == 113 then\n        return x\n    elseif n ==\
    \ 127 then\n        return x\n    elseif n == 131 then\n        return x\n   \
    \ elseif n == 137 then\n        return x\n    elseif n == 139 then\n        return\
    \ x\n    elseif n == 149 then\n        return x\n    elseif n == 151 then\n  \
    \      return x\n    elseif n == 157 then\n        return x\n    elseif n == 163\
    \ then\n        return x\n    elseif n == 167 then\n        return x\n    elseif\
    \ n == 173 then\n        return x\n    elseif n == 179 then\n        return x\n\
    \    elseif n == 181 then\n        return x\n    elseif n == 191 then\n      \
    \  return x\n    elseif n == 193 then\n", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "\tif (n == 2) then\n\t\treturn\
    \ x\n\telse\n\t\tif (n == 1) then\n\t\t\treturn y\n\t\telse\n\t\t\treturn x_or_y(n\
    \ - 1, x, y)\n\t\tend\n\tend\nend", "   if n < 2 then\n      return y\n   elseif\
    \ n == 2 then\n      return x\n   elseif n % 2 == 0 then\n      return y\n   else\n\
    \      for i = 3, math.sqrt(n), 2 do\n         if n % i == 0 then\n          \
    \  return y\n         end\n      end\n      return x\n   end\nend", "  -- TODO:\
    \ Your code here\n  if n < 2 then\n    return y\n  else\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then\n        return y\n      end\n    end\n    return\
    \ x\n  end\nend", "  \nend", "\t-- Your implementation goes here\nend", "  if\
    \ n % 2 == 0 then\n    return y\n  else\n    return x\n  end\nend", "    if prime_number(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "\tif (local_function_is_prime(n))\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "  --[[ Returns x if\
    \ n is prime; otherwise returns y. ]]--\n  if is_prime(n) then\n    return x\n\
    \  else\n    return y\n  end\nend", "  return n\nend", "\t-- The value of n is\
    \ neither prime nor not prime at this point,\n\t-- so we should not reach the\
    \ end of the function.\n\tif is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn\
    \ y\n\tend\nend", "    if is_prime(n) then\n        return x\n    else\n     \
    \   return y\n    end\nend", "   return true and x or y\nend", "\tif n % 2 ==\
    \ 0 then\n\t\treturn y\n\telse\n\t\treturn x\n\tend\nend", "   if is_prime(n)\
    \ then\n      return x\n   else\n      return y\n   end\nend", "    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            return y\n        end\n\
    \    end\n    return x\nend\nprint(x_or_y(2, 1, 2))  -- 1\nprint(x_or_y(3, 1,\
    \ 2))  -- 1\nprint(x_or_y(4, 1, 2))  -- 2\nprint(x_or_y(5, 1, 2))  -- 1\nprint(x_or_y(6,\
    \ 1, 2))  -- 2\nprint(x_or_y(7, 1, 2))  -- 1\nprint(x_or_y(8, 1, 2))  -- 2\nprint(x_or_y(9,\
    \ 1, 2))  -- 2\nprint(x_or_y(10, 1, 2)) -- 2\nprint(x_or_y(11, 1, 2)) -- 1", " \
    \   if x_or_y(n, x, y) then\n        x\n    else\n        y\n    end\nend", " \
    \   return (not(is_prime(n))) and y or x\nend", "    if n % 3 == 0 then return\
    \ y\n    else return x\n    end\nend", "    -- TODO:\n    --\n    -- Add the missing\
    \ code here!\nend", "    return n % 2 == 0 and y or x\nend", "\treturn n%2 ==\
    \ 0 and y or x\nend", "    local function is_prime(n)\n        local k = 2\n \
    \       while k * k <= n do\n            if n % k == 0 then\n                return\
    \ false\n            end\n            k = k + 1\n        end\n        return true\n\
    \    end\n    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "   if n < 0 then return x_or_y(-n, x, y) end\n   if is_prime(n)\
    \ then return x end\n   return y\nend", "  if is_prime(n) then return x else return\
    \ y end\nend\nprint(x_or_y(3, 42, 13))\nprint(x_or_y(5, 42, 13))\nprint(x_or_y(7,\
    \ 42, 13))\nprint(x_or_y(8, 42, 13))\nprint(x_or_y(9, 42, 13))\nprint(x_or_y(10,\
    \ 42, 13))\nprint(x_or_y(11, 42, 13))\nprint(x_or_y(12, 42, 13))\nprint(x_or_y(13,\
    \ 42, 13))\nprint(x_or_y(14, 42, 13))\nprint(x_or_y(15, 42, 13))\nprint(x_or_y(16,\
    \ 42, 13))\nprint(x_or_y(17, 42, 13))\nprint(x_or_y(18, 42, 13))\nprint(x_or_y(19,\
    \ 42, 13))\nprint(x_or_y(20, 42, 13))\nprint(x_or_y(21, 42, 13))\nprint(x_or_y(22,\
    \ 42, 13))\nprint(x_or_y(23, 42, 13))\nprint(x_or_y(24, 42, 13))\nprint(x_or_y(25,\
    \ 42, 13))\nprint(x_or_y(26, 42, 13))\nprint(x_or_y(27, 42, 13))\nprint(x_or_y(28,\
    \ 42, 13))\nprint(x_or_y(29, 42, 13))\nprint(x_or_y(30, 42, 13))\nprint(x_or_y(31,\
    \ 42, 13))\nprint(x_or_y(32, 42, 13))\nprint(x_or_y(33, 42, 13))\nprint(x_or_y(34,\
    \ 42, 13))\nprint(x_or_y(35, 42, 13))\nprint(x_or_y(36, 42, 13))\nprint(x_or_y(37,\
    \ 42, 13", "    if n == 1 then\n        return x\n    elseif n == 2 then\n   \
    \     return y\n    else\n        return n\n    end\nend", "    if math.isprime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    -- YOUR\
    \ CODE HERE\nend", "\tif is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\
    \tend\nend", "\tif n ~= 2 and n % 2 == 0 then\n\t\treturn y\n\tend\n\tlocal sqrt_n\
    \ = math.sqrt(n)\n\tfor i = 3, sqrt_n, 2 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ y\n\t\tend\n\tend\n\treturn x\nend", "   return n == 2 and x or y\nend", "\t\
    return true and x or y\nend", "\tif n > 1 then\n\t\tlocal i = 1\n\t\tlocal is_prime\
    \ = true\n\t\twhile i * i <= n do\n\t\t\tif n % i == 0 then\n\t\t\t\tis_prime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tif is_prime\
    \ then\n\t\t\treturn x\n\t\telse\n\t\t\treturn y\n\t\tend\n\telse\n\t\treturn\
    \ y\n\tend\nend", "  if is_prime(n) then\n    return x\n  else\n    return y\n\
    \  end\nend", "  if n < 2 then\n    return y\n  end\n  for i = 2, n - 1 do\n \
    \   if n % i == 0 then\n      return y\n    end\n  end\n  return x\nend", "\t\n\
    end", "    if n % 2 == 0 then return y end\n    for i = 3, math.sqrt(n), 2 do\n\
    \        if n % i == 0 then return y end\n    end\n    return x\nend", '    local
    ret = x', "   -- insert code here.\nend", "    return (n%1==0 and n%n==0 and n%2~=0)\
    \ and x or y\nend", "\tif n % 2 == 0 then\n\t\treturn y\n\telse\n\t\treturn x\n\
    \tend\nend", "    local f = function()\n        if n < 2 then\n            return\
    \ y\n        end\n        for i = 2, n - 1 do\n            if n % i == 0 then\n\
    \                return y\n            end\n        end\n        return x\n  \
    \  end\n    return f()\nend\nprint(x_or_y(3, \"x\", \"y\")) -- prints x\nprint(x_or_y(4,\
    \ \"x\", \"y\")) -- prints y", "    if math.is_prime(n) then\n        return x\n\
    \    else\n        return y\n    end\nend", "   if not is_prime(n) then\n    \
    \  return y\n   else\n      return x\n   end\nend", "\tif is_prime(n) then\n\t\
    \treturn x\n\telse\n\t\treturn y\n\tend\nend", "   return x\nend", "\tif n ~=\
    \ nil and x ~= nil and y ~= nil then\n\t\tif is_prime(n) then\n\t\t\treturn x\n\
    \t\telse\n\t\t\treturn y\n\t\tend\n\tend\nend", "  -- if n < 2 or n % 2 == 0 then\n\
    \  --   return y\n  -- end\n  -- for i = 3, math.sqrt(n), 2 do\n  --   if n %\
    \ i == 0 then\n  --     return y\n  --   end\n  -- end\n  -- return x\n  if n\
    \ < 2 or (n % 2 == 0 and n ~= 2) then\n    return y\n  end\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    if n % i == 0 then\n      return y\n    end\n  end\n  return x\nend",
  "  if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend", "    if\
    \ is_prime(n) then\n        return x\n    else\n        return y\n    end\nend",
  "   return primes.isprime(n) and x or y\nend", "  local result = y\n  if is_prime(n)\
    \ then\n    result = x\n  end\n  return result\nend", "    if is_prime(n) then\n\
    \        return x\n    else\n        return y\n    end\nend\nx_or_y(7, 1, 2) --\
    \ 1\nx_or_y(8, 1, 2) -- 2", "\tlocal prime = false\n\tfor i = 2, n-1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn y\n\t\tend\n\tend\n\treturn x\nend", "\t-- TODO\n\
    end", "    -- YOUR CODE HERE\nend", "    local function is_prime(n)\n        if\
    \ n <= 1 then return false end\n        for i = 2, math.sqrt(n) do\n         \
    \   if n % i == 0 then return false end\n        end\n        return true\n  \
    \  end\n    if is_prime(n) then return x end\n    return y\nend", "  if not n\
    \ then n = 3 end\n  if not x then x = 'x' end\n  if not y then y = 'y' end\n \
    \ if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend", "\treturn\
    \ (n % 2 == 0) and y or x\nend", "\tlocal function prime(n)\n\t\tif n == 2 then\
    \ return true end\n\t\tfor i = 2, math.sqrt(n) do\n\t\t\tif n % i == 0 then return\
    \ false end\n\t\tend\n\t\treturn true\n\tend\n\tif prime(n) then return x else\
    \ return y end\nend", end, "  if math.is_prime(n) then return x else return y\
    \ end\nend", "  local b1 = not (n % 2 == 0)\n  local b2 = not (n % 3 == 0)\n \
    \ local b3 = not (n % 5 == 0)\n  local b4 = not (n % 7 == 0)\n  local b5 = not\
    \ (n % 11 == 0)\n  local b6 = not (n % 13 == 0)\n  local b7 = not (n % 17 == 0)\n\
    \  local b8 = not (n % 19 == 0)\n  local b9 = not (n % 23 == 0)\n  local b10 =\
    \ not (n % 29 == 0)\n  local b11 = not (n % 31 == 0)\n  local b12 = not (n % 37\
    \ == 0)\n  local b13 = not (n % 41 == 0)\n  local b14 = not (n % 43 == 0)\n  local\
    \ b15 = not (n % 47 == 0)\n  local b16 = not (n % 53 == 0)\n  local b17 = not\
    \ (n % 59 == 0)\n  local b18 = not (n % 61 == 0)\n  local b19 = not (n % 67 ==\
    \ 0)\n  local b20 = not (n % 71 == 0)\n  local b21 = not (n % 73 == 0)\n  local\
    \ b22 = not (n % 79 == 0)\n  local b23 = not (n % 83 == 0)\n  local b24 = not\
    \ (n % 89 == 0)\n  local b25 = not (n % 97 == 0)\n  local b26 = not (n % 101 ==\
    \ 0)\n  local b27 = not (n % 103 == 0)\n  local b28 = not (n % 107 == 0)\n  local\
    \ b29 = not (n % 109 == 0)\n  local b30 = not (n % 113 == 0)\n  local b31 = not\
    \ (n % 127 == 0)\n  local b32 = not (n % 131 == 0)\n  local b33 = not (n % 137\
    \ == 0)\n  local b34 = not (n % 139 == 0)\n  local b35 = not (n % 149 == 0)\n\
    \  local b36 = not (n % 151 == 0)\n  local b37 = not (", "    if n % 2 == 0 then\n\
    \        return y\n    else\n        return x\n    end\nend", "    local function\
    \ isPrime(n)\n        local function check_divisors(n, i)\n            if (i ==\
    \ n - 1) then return true end\n            if (i == 1) then return check_divisors(n,\
    \ i + 1) end\n            if (n % i == 0) then return false end\n            return\
    \ check_divisors(n, i + 1)\n        end\n        return check_divisors(n, 1)\n\
    \    end\n    if (isPrime(n)) then return x end\n    return y\nend", end, "  \
    \  if isPrime(n) then\n        return x\n    else\n        return y\n    end\n\
    end", "  if n % 2 == 0 or n % 3 == 0 then\n    return y\n  else\n    return x\n\
    \  end\nend", "\tif n == 1 then\n\t\treturn y\n\telseif n == 2 then\n\t\treturn\
    \ x\n\telse\n\t\tfor i = 2, n/2 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn y\n\
    \t\t\tend\n\t\tend\n\t\treturn x\n\tend\nend", "  --[[\n    Input: x_or_y(7, 10,\
    \ 4)\n    Output: 10\n    Input: x_or_y(2, 3, 2)\n    Output: 2\n  ]]\nend", " \
    \ -- Your implementation goes here.\nend", "    return x\nend", "  if prime(n)\
    \ then\n    return x\n  else\n    return y\n  end\nend", "    print(string.format(\"\
    x_or_y(%d, %d, %d) returns %d.\", n, x, y, (isPrime(n) and x or y)))\nend", " \
    \ return 0\nend", '    if(not n:isPrime()) then return y end', "\tif isPrime(n)\
    \ then return x else return y end\nend", "\tif is_prime(n) then\n\t\treturn x\n\
    \telse\n\t\treturn y\n\tend\nend", "\tif n % 2 == 0 then\n\t\treturn y\n\telse\n\
    \t\treturn x\n\tend\nend", "\tif(is_prime(n)) then\n\t\treturn x\n\telse\n\t\t\
    return y\n\tend\nend", "    if is_prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "    return ...\nend", "\tfor j = 2, n-1 do\n\
    \t\tif n % j == 0 then\n\t\t\treturn y\n\t\tend\n\tend\n\treturn x\nend", "  \
    \  local function is_prime(n)\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then\n                return false\n            end\n        end\n  \
    \      return true\n    end\n    if is_prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "    if n <= 1 then\n        return y\n    elseif\
    \ n == 2 then\n        return x\n    else\n        for i = 2, math.sqrt(n) do\n\
    \            if n % i == 0 then\n                return y\n            end\n \
    \       end\n        return x\n    end\nend\nassertEquals(x_or_y(5, 10, 11), 10)\n\
    assertEquals(x_or_y(12, 10, 11), 11)\nassertEquals(x_or_y(4, 10, 11), 11)", " \
    \ if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend", "    if\
    \ n % 2 == 0 or n % 3 == 0 then return y end\n    local h = math.floor(math.sqrt(n))\n\
    \    for i = 5, h, 6 do\n        if n % i == 0 or n % (i + 2) == 0 then return\
    \ y end\n    end\n    return x\nend", "    return x\nend", "    return n == isPrime(n)\
    \ and x or y\nend", "    return \"hello\"\nend", "    return (n % 2 == 0 and y\
    \ or x)\nend", "  -- Insert code here:\n  local n1=n\n  local i=2\n  local n2=n/2\n\
    \  while i<=n2 do\n    if n1%i==0 then\n      return y\n    end\n    i=i+1\n \
    \ end\n  return x\nend", "    -- your code here\n    if isPrime(n) then\n    \
    \    return x\n    else\n        return y\n    end\nend", "\tif (not is_prime(n))\
    \ then\n\t\treturn y\n\telse\n\t\treturn x\n\tend\nend", "\tif n == 0 then return\
    \ 0 end", "   if(is_prime(n)) then\n      return x\n   else\n      return y\n\
    \   end\nend", "  for i = 2, n - 1 do\n    if n % i == 0 then\n      return y\n\
    \    end\n  end\n  return x\nend", "\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn y\n\t\tend\n\tend\n\treturn x\nend\nassert(x_or_y(7, 2, 5) == 2)\n\
    assert(x_or_y(10, 5, 2) == 2)\nassert(x_or_y(11, 3, 4) == 3)\nassert(x_or_y(12,\
    \ -1, 0) == 0)\nassert(x_or_y(19, -1, 0) == -1)", "\tif isPrime(n) then\n\t\t\
    return x\n\telse\n\t\treturn y\n\tend\nend\nassert(x_or_y(2, 3, 4) == 3)\nassert(x_or_y(4,\
    \ 3, 4) == 4)\nassert(x_or_y(13, 3, 4) == 3)", "    return x --this is not correct!\n\
    end\nassert(x_or_y(1, 10, 20) == 10)\nassert(x_or_y(3, 10, 20) == 10)\nassert(x_or_y(4,\
    \ 10, 20) == 20)", "\tif n % 2 == 0 or n % 3 == 0 then\n\t\treturn y\n\telse\n\
    \t\treturn x\n\tend\nend", "    if #prime.prime_factors(n) == 1 then\n       \
    \ return x\n    else\n        return y\n    end\nend", "    if n % 2 == 0 then\n\
    \        return y\n    else\n        return x\n    end\nend", "\tif not (type(n)\
    \ == \"number\" and type(x) == \"number\" and type(y) == \"number\") then\n\t\t\
    return nil\n\tend\n\tif n < 2 then\n\t\treturn nil\n\tend\n\tlocal isPrime = true\n\
    \tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\tisPrime = false\n\t\t\tbreak\n\
    \t\tend\n\tend\n\tif isPrime then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\n\
    end", "\tlocal function isPrime(n)\n\t\tfor i = 2, n do\n\t\t\tif n % i == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tif isPrime(n)\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "    if is_prime(n) then\
    \ return x end\n    return y\nend", "    if not(is_prime(n)) then\n        return\
    \ y\n    else\n        return x\n    end\nend\nassert(x_or_y(1, \"X\", \"Y\")\
    \ == \"Y\")\nassert(x_or_y(2, \"X\", \"Y\") == \"X\")\nassert(x_or_y(4, \"X\"\
    , \"Y\") == \"Y\")\nassert(x_or_y(3, \"X\", \"Y\") == \"X\")\nassert(x_or_y(5,\
    \ \"X\", \"Y\") == \"X\")\nassert(x_or_y(6, \"X\", \"Y\") == \"Y\")\nassert(x_or_y(7,\
    \ \"X\", \"Y\") == \"X\")\nassert(x_or_y(8, \"X\", \"Y\") == \"Y\")\nassert(x_or_y(9,\
    \ \"X\", \"Y\") == \"Y\")\nassert(x_or_y(10, \"X\", \"Y\") == \"Y\")\nassert(x_or_y(101,\
    \ \"X\", \"Y\") == \"X\")\nassert(x_or_y(102, \"X\", \"Y\") == \"Y\")", "  if\
    \ not is_prime(n) then\n    return y\n  else\n    return x\n  end\nend\nprint(\"\
    x_or_y:\")\nprint(x_or_y(13, \"prime\", \"composite\"))  --prime\nprint(x_or_y(15,\
    \ \"prime\", \"composite\"))  --composite"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
