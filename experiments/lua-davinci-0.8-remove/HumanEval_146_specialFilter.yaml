name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes an array of numbers as input and returns \n\
  -- the number of elements in the array that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\nlocal function\
  \ specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\nend", "    --[[\n    local result = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (num //\
    \ 10) % 2 == 1 then\n            result = result + 1\n        end\n    end\n \
    \   return result\n    --]]\n    --[[\n    local function isValid(num)\n     \
    \   return num > 10 and num % 2 == 1 and (num // 10) % 2 == 1\n    end\n    local\
    \ result = 0\n    for _, num in ipairs(nums) do\n        if isValid(num) then\n\
    \            result = result + 1\n        end\n    end\n    return result\n  \
    \  --]]\n    --[[\n    local function isValid(num)\n        return num > 10 and\
    \ num % 2 == 1 and (num // 10) % 2 == 1\n    end\n    local result = 0\n    for\
    \ _, num in ipairs(nums) do\n        result = result + (isValid(num) and 1 or\
    \ 0)\n    end\n    return result\n    --]]\n    --[[\n    local function isValid(num)\n\
    \        return num > 10 and num % 2 == 1 and (num // 10) % 2 == 1\n    end\n\
    \    local result = 0\n    for _, num in ipairs(nums) do\n        result = result\
    \ + isValid(num) and 1 or 0\n    end\n    return result\n    --]]\n    --[[\n\
    \    local function isValid(num)\n        return num > 10 and num % 2 == 1 and\
    \ (num // 10) % 2 == 1\n    end\n    local result = 0\n    for _, num in ipairs(nums)\
    \ do\n        result = result + (isValid(num) and 1 or 0)\n    end\n    return\
    \ result\n    --]]\n    --[[\n    local function isValid(num)\n        return\
    \ num > 10 and num % 2 == 1 and (num // 10) % 2 == 1\n    end\n    local result\
    \ = 0\n    for _, num in ipairs(nums) do\n        result = result + (isValid(num)\
    \ and 1 or 0)\n    end\n    return result\n    --]]\n    --[[\n    local function\
    \ isValid(num)\n", "    -- your code here\nend", "\tlocal res = 0\n\tfor i, v\
    \ in ipairs(nums) do\n\t\tif (v > 10) and (v % 2 == 1) and (v / (10 ^ (math.floor(math.log10(v))))\
    \ % 2 == 1) then\n\t\t\tres = res + 1\n\t\tend\n\tend\n\treturn res\nend", "\t\
    local function isSpecial(num)\n\t\treturn num > 10 and (num % 2 == 1) and ((num\
    \ % 10) % 2 == 1)\n\tend\n\treturn List.filter(specialFilter, nums)\nend", " \
    \   -- your code here\n    local count = 0\n    for i, n in ipairs(nums) do\n\
    \        if n > 10 and n % 2 == 1 and math.floor(n / 10) % 2 == 1 and n % 10 %\
    \ 2 == 1 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nprint(specialFilter({1, 3, 5, 7, 11, 22, 33, 44, 55, 66, 77, 88,\
    \ 99})) --> 4\nprint(specialFilter({10, 20, 30, 40, 50, 60, 70, 80, 90, 100}))\
    \ --> 0", "    -- your code goes here\nend", "  \n  local count = 0\n  for i,\
    \ v in ipairs(nums) do\n    if v > 10 and math.floor(v/10)%2 ~= 0 and v%2 ~= 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "    local\
    \ newArray = {}\n    for i = 1, #nums do\n        local num = nums[i]\n      \
    \  local str = num .. \"\"\n        local firstDigit = tonumber(str:sub(1, 1))\n\
    \        local lastDigit = tonumber(str:sub(-1))\n        if firstDigit % 2 ~=\
    \ 0 and lastDigit % 2 ~= 0 and num > 10 then\n            table.insert(newArray,\
    \ num)\n        end\n    end\n    return #newArray\nend", "\treturn #(List.filter(nums,\
    \ function(num)\n\t\tif num < 10 then return false end\n\t\tlocal first = num\
    \ % 10\n\t\tlocal last = math.floor(num / 10)\n\t\treturn first % 2 == 1 and last\
    \ % 2 == 1\n\tend))\nend", "  local array = {}\n  for i,num in ipairs(nums) do\n\
    \    if num > 10 and math.fmod(num, 10) % 2 ~= 0 and math.fmod(num / 10, 10) %\
    \ 2 ~= 0 then\n      table.insert(array, num)\n    end\n  end\n  return #array\n\
    end", "  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 10 and\
    \ num % 2 == 1 and math.floor(num / 10) % 2 == 1 and num % 10 % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    -- Implement\
    \ your function here\nend\nprint(specialFilter({2, 7, 11, 12, 20, 21, 23, 45,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99})) -- -> 6", "  local\
    \ count = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and (v % 2 ~= 0) and\
    \ (math.floor(v / 10) % 2 ~= 0) and (v % 10 % 2 ~= 0) then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "\treturn \"TODO\"\nend\nassert(specialFilter({1,\
    \ 12, 2, 3, 1, 4, 5, 66, 6, 16, 55, 111}) == 3)", "    local result = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and nums[i] % 2 == 1 and (nums[i] //\
    \ 10) % 2 == 1 and nums[i] % 10 == 1 then\n            result = result + 1\n \
    \       end\n    end\n    return result\nend", "    local count = 0\n    for i\
    \ = 1, #nums do\n        local item = nums[i]\n        if item > 10 and item %\
    \ 2 == 1 and math.floor(item / 10) % 2 == 1 and item % 10 % 2 == 1 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "\t\
    local n = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 10 and num % 2 == 1\
    \ and num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num\
    \ % 10 == 9 then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "\tlocal\
    \ count = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 10 and math.fmod(v, 2)\
    \ == 1 and math.fmod(math.floor(v / 10), 2) == 1 then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "  local result = 0\n  for _, num in ipairs(nums)\
    \ do\n    if num > 10 and \n      tonumber(tostring(num):sub(1, 1)) % 2 ~= 0 and\
    \ \n      tonumber(tostring(num):sub(-1)) % 2 ~= 0 then\n      result = result\
    \ + 1\n    end\n  end\n  return result\nend", "  -- Get the count of numbers in\
    \ the array that are greater than 10 and both\n  -- first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n  -- Use Lua's built-in functions and operators\
    \ for performing this task.\n  -- To determine if the first and last digits of\
    \ a number are odd, you may\n  -- find the functions math.floor and math.fmod\
    \ helpful.\n  --math.floor - Returns the largest integer less than or equal to\
    \ x (math.floor(3.7) = 3).\n  --math.fmod - Returns the remainder of x/y (math.fmod(10,\
    \ 3) = 1).\n  local count = 0;\n  for k, v in pairs(nums) do\n    local firstDigit\
    \ = math.floor(v/10);\n    local lastDigit = math.fmod(v, 10);\n    if (v > 10\
    \ and firstDigit % 2 ~= 0 and lastDigit % 2 ~= 0) then\n      count = count +\
    \ 1;\n    end\n  end\n  return count;\nend", "\nend\nassert(specialFilter({1,\
    \ 20, 3, 40, 5, 60, 7, 80, 9}) == 3)", "    -- Write your code here\nend", " \
    \ local res = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num >\
    \ 10 and firstDigit(num) % 2 ~= 0 and lastDigit(num) % 2 ~= 0 then\n      res\
    \ = res + 1\n    end\n  end\n  return res\nend\nassert(specialFilter({7, 8, 10,\
    \ 11, 56, 101}) == 1)\nassert(specialFilter({11, 12, 13, 14, 56, 101}) == 2)",
  "    local specialFilter = function(n)\n        local numString = tostring(n)\n\
    \        local firstDigit = tonumber(numString:sub(1, 1))\n        local lastDigit\
    \ = tonumber(numString:sub(-1))\n        if (n > 10) and (firstDigit % 2 ~= 0)\
    \ and (lastDigit % 2 ~= 0) then\n            return true\n        end\n      \
    \  return false\n    end\n    local count = 0\n    for _, n in ipairs(nums) do\n\
    \        if specialFilter(n) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\nend", "    local newnums = {}\n    for i,\
    \ x in ipairs(nums) do\n        if x > 10 and string.match(x, \"1$\") and string.match(x,\
    \ \"^1\") then\n            table.insert(newnums, x)\n        end\n    end\n \
    \   return newnums\nend", "    local count = 0\n    for i = 1, #nums do\n    \
    \    local first_digit = tonumber(nums[i]:sub(1, 1))\n        local last_digit\
    \ = tonumber(nums[i]:sub(-1))\n        if (nums[i] > 10) and (first_digit % 2\
    \ ~= 0) and (last_digit % 2 ~= 0) then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor i = 1, #nums\
    \ do\n\t\tlocal first, last = nums[i] % 10, nums[i] // 10 % 10\n\t\tif nums[i]\
    \ > 10 and first % 2 == 1 and last % 2 == 1 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "  -- your code here\nend", "    local result\
    \ = 0\n    for i = 1, #nums do\n        local n = nums[i]\n        local first\
    \ = n\n        local last = n % 10\n        while n >= 10 do\n            n =\
    \ n / 10\n        end\n        local second = n\n        if first % 2 ~= 0 and\
    \ last % 2 ~= 0 and first > 10 then\n            result = result + 1\n       \
    \ end\n    end\n    return result\nend", "    -- ...\nend", "    local c = 0\n\
    \    for i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and math.fmod(n,\
    \ 2) == 1 then\n            c = c + 1\n        end\n    end\n    return c\nend",
  "  -- your code here\nend", "    if nums == nil then return 0 end\n    local count\
    \ = 0\n    for _, v in ipairs(nums) do\n        if v > 10 and isFirstAndLastDigitOdd(v)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 10 and\
    \ \n            (nums[i] % 10) % 2 ~= 0 and \n            math.floor(nums[i] /\
    \ 10) % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n   \
    \ return count\nend", "  -- your code goes here\n  local total = 0\n  for k,v\
    \ in pairs(nums) do\n    local first = math.floor(v/10)\n    local last = v %\
    \ 10\n    if (first%2 ~= 0 and last%2 ~= 0 and v > 10) then\n      total = total\
    \ + 1\n    end\n  end\n  return total\nend", "  return 0\nend", "  local count\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and num\
    \ % 2 == 1 and (num % 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local result = 0\n    for i = 1, #nums do\n      \
    \  local n = nums[i]\n        if n > 10 and n % 2 == 1 and math.floor(n / 10)\
    \ % 2 == 1 and n % 10 % 2 == 1 then\n            result = result + 1\n       \
    \ end\n    end\n    return result\nend", "    local count = 0\n    for i, v in\
    \ ipairs(nums) do\n        if v > 10 and (v % 2 == 1) and (math.floor(v / 10)\
    \ % 2 == 1) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\nend", "    local result = 0\n    for _,v in ipairs(nums) do\n\
    \        if v > 10 and v % 2 == 1 and math.floor(v / 10) % 2 == 1 and v % 10 %\
    \ 2 == 1 then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend", "\nend", "    local function isGreaterThan10(num)\n        if\
    \ (num > 10) then\n            return true\n        else\n            return false\n\
    \        end\n    end", "    local result = 0\n    for i = 1, #nums do\n     \
    \   local current = nums[i]\n        if current > 10 and math.fmod(current, 2)\
    \ == 1 and math.fmod(math.floor(current / 10), 2) == 1 then\n            result\
    \ = result + 1\n        end\n    end\n    return result\nend", "\tlocal result\
    \ = 0\n\tfor i = 1, #nums do\n\t\tlocal a = nums[i] % 10\n\t\tlocal b = (nums[i]\
    \ - a) / 10\n\t\tif a % 2 ~= 0 and b % 2 ~= 0 and nums[i] > 10 then\n\t\t\tresult\
    \ = result + 1\n\t\tend\n\tend\n\treturn result\nend", "    local counter = 0\n\
    \    for i = 1, #nums do\n        if nums[i] > 10 and isFirstLastDigitOdd(nums[i])\
    \ then\n            counter = counter + 1\n        end\n    end\n    return counter\n\
    end", "  -- body\nend", "    return #(filter(nums, function(num)\n        return\
    \ num > 10 and num % 2 == 1 and num % 10 % 2 == 1\n    end))\nend", "    local\
    \ function isSpecial(num)\n        local firstDigit = num % 10\n        while\
    \ num > 9 do\n            num = math.floor(num / 10)\n        end\n        local\
    \ lastDigit = num\n        return (firstDigit % 2 == 1) and (lastDigit % 2 ==\
    \ 1)\n    end\n    local count = 0\n    for i, num in ipairs(nums) do\n      \
    \  if num > 10 and isSpecial(num) then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", '    local count = 0', "  \n  return\
    \ 2\nend", "    -- your code goes here.\nend\nassert(specialFilter{17, 4, 9, 11,\
    \ 6, 15} == 2)\nassert(specialFilter{12, 3, 13, 7, 4, 6} == 1)\nassert(specialFilter{4,\
    \ 9, 12, 6, 14, 15} == 0)\nassert(specialFilter{17, 2, 9, 11, 6, 15} == 1)\nassert(specialFilter{1,\
    \ 3, 5, 7, 9, 11, 17} == 7)\nassert(specialFilter{13, 15, 17, 19, 21, 23, 25}\
    \ == 7)\nassert(specialFilter{1, 3, 5, 7, 11, 13, 15, 17, 19, 21, 23, 25} == 12)\n\
    assert(specialFilter{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50} == 28)\nassert(specialFilter{100,\
    \ 105, 29, 37, 41, 50, 99, 57, 83, 67, 91, 97, 68, 17, 4, 9, 11, 6, 15, 32, 43,\
    \ 69, 81, 93, 7, 70, 18, 22, 27, 78, 63, 87, 13, 71, 30, 36, 47, 25, 90, 56, 85,\
    \ 65, 89, 59, 82, 66, 92, 98, 53, 72, 19, 23, 28, 80, 64, 88, 12, 76, 62, 86,\
    \ 10, 55, 79, 61, 84, 51, 74, 21, 24, 26, 77, 60, 81, 8, 73, 16, 20, 31, 34, 48,\
    \ 52, 75, 58, 45, 1, 3, 5, 7, 9, 11, 17, 38, 40, 44, 46, 49, 54, 1, 4, 9, 11,\
    \ 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35,", "    return array.filter(nums,\
    \ \n        function(n) \n            return n > 10 and n % 2 == 1 and n // 10\
    \ % 2 == 1 and n % 10 == 1 or n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n %\
    \ 10 == 9\n        end\n    )\nend", "  local c = 0\n  for i = 1, #nums do\n \
    \   local number = nums[i]\n    if number > 10 and math.floor(number / 10) % 2\
    \ ~= 0 and number % 2 ~= 0 then\n      c = c + 1\n    end\n  end\n  return c\n\
    end", "  local count = 0\n  for _,v in ipairs(nums) do\n    if ((v > 10) and (v\
    \ % 2 == 1) and (firstDigit(v) % 2 == 1) and (lastDigit(v) % 2 == 1)) then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend", "    return 0\n\
    end", "end\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99, 43, 7} == 3)\nassert(specialFilter{1,\
    \ 8, 13, 25, 36, 24, 99, 43, 7, 8} == 3)\nassert(specialFilter{1, 8, 13, 25, 36,\
    \ 24, 99, 43, 7, 8, 11} == 4)\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99,\
    \ 43, 7, 8, 11, 10} == 4)\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99, 43,\
    \ 7, 8, 11, 10, 2} == 4)\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99, 43, 7,\
    \ 8, 11, 10, 2, 3} == 5)\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99, 43, 7,\
    \ 8, 11, 10, 2, 3, 13} == 5)\nassert(specialFilter{1, 8, 13, 25, 36, 24, 99, 43,\
    \ 7, 8, 11, 10, 2, 3, 13, 8} == 5)\nassert(specialFilter{1, 8, 13, 25, 36, 24,\
    \ 99, 43, 7, 8, 11, 10, 2, 3, 13, 8, 17} == 6)\nassert(specialFilter{1, 8, 13,\
    \ 25, 36, 24, 99, 43, 7, 8, 11, 10, 2, 3, 13, 8, 17, 33} == 6)\nassert(specialFilter{1,\
    \ 8, 13, 25, 36, 24, 99, 43, 7, 8, 11, 10, 2, 3, 13, 8, 17, 33, 31} == 7)", " \
    \   -- Insert your code here\n    return 0\nend", "    local count = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and math.fmod(math.floor(nums[i] /\
    \ 10), 2) ~= 0 and math.fmod(nums[i], 2) ~= 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local result = 0\n  for\
    \ _, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1 and num % 10 % 2\
    \ == 1 then\n      result = result + 1\n    end\n  end\n  return result\nend",
  end, "    local count = 0\n    local firstDigit\n    local lastDigit\n    for i,\
    \ x in ipairs(nums) do\n        firstDigit = string.sub(x, 1, 1)\n        lastDigit\
    \ = string.sub(x, string.len(x), string.len(x))\n        if (x > 10) and (firstDigit\
    \ % 2 ~= 0) and (lastDigit % 2 ~= 0) then\n            count = count + 1\n   \
    \     end\n    end\n    return count\nend", "   local count = 0\n   for i = 1,\
    \ #nums do\n      if nums[i] > 10 and isFirstDigitOdd(nums[i]) and isLastDigitOdd(nums[i])\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "    -- Write your code here\nend", "    local result = 0\n    for i, num in ipairs(nums)\
    \ do\n        if num > 10 and (math.fmod(num, 10) % 2 ~= 0) and\n            (math.fmod(num,\
    \ math.floor(num / 10)) % 2 ~= 0) then\n            result = result + 1\n    \
    \    end\n    end\n    return result\nend", "    local count = 0\n    for _, n\
    \ in ipairs(nums) do\n        if n > 10 and math.fmod(n, 10) % 2 == 1 and math.fmod(n,\
    \ math.floor(n/10)) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    -- write your code here\nend", "    --\
    \ your code here\n    return nil\nend", "  \nend", "end\nprint(specialFilter({3,\
    \ 15, 8, 11, 9, 101})) -- 3 (11, 15, 101)", "    local result = 0\n    for i,\
    \ v in ipairs(nums) do\n        if v > 10 and isOdd(firstDigit(v)) and isOdd(lastDigit(v))\
    \ then\n            result = result + 1\n        end\n    end\n    return result\n\
    end", "\nend", "    -- your code here\n    return 0\nend", "    -- your code here\n\
    end", "  local counter = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i]\
    \ % 2 == 1 and \n      nums[i] % 10 == 1 or nums[i] % 10 == 3 or nums[i] % 10\
    \ == 5 or \n      nums[i] % 10 == 7 or nums[i] % 10 == 9 then\n      counter =\
    \ counter + 1\n    end\n  end\n  return counter\nend", "    -- body\nend", " \
    \   -- write your code here\nend", "   local count = 0\n   for _, num in ipairs(nums)\
    \ do\n      local first = num % 10\n      local last = num % 100\n      if num\
    \ > 10 and (first % 2 == 1 or last % 2 == 1) then\n         count = count + 1\n\
    \      end\n   end\n   return count\nend", "    local res = 0\n    for i = 1,\
    \ #nums do\n        local num = nums[i]\n        local first_digit = num % 10\n\
    \        if num > 10 and first_digit % 2 == 1 then\n            local t = num\n\
    \            local last_digit = t % 10\n            while t >= 10 do\n       \
    \         t = t / 10\n            end\n            if last_digit % 2 == 1 then\n\
    \                res = res + 1\n            end\n        end\n    end\n    return\
    \ res\nend", "    local function testNumber(num)\n        local firstDigit = num%10\n\
    \        local lastDigit = math.floor(num/math.pow(10, math.floor(math.log10(num))))\n\
    \        return firstDigit%2~=0 and lastDigit%2~=0 and num>10\n    end\n    local\
    \ count = 0\n    for _,num in ipairs(nums) do\n        if testNumber(num) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  -- your code here\n  local special = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 ==\
    \ 1 then\n      table.insert(special, num)\n    end\n  end\n  return #special\n\
    end\nprint(specialFilter({1, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20}))", "\t-- TODO: implement me!\nend", "    -- write your\
    \ code here\nend\nassert(specialFilter({27, 8, 11, 15, 9, 17, 21, 1, 7}) == 3)\n\
    assert(specialFilter({10, 20, 30, 40, 50, 60, 70, 80, 90}) == 0)\nassert(specialFilter({13,\
    \ 11, 4, 3, 7, 15, 19, 23, 25}) == 4)\nprint(\"OK!\")", end, "    local count\
    \ = 0\n    for i = 1, #nums do\n        local n = nums[i]\n        if n > 10 and\
    \ math.floor(n / 10) % 2 ~= 0 and n % 2 ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    -- your code here\n  \
    \  -- count :: [Int] -> Int\n    local function count(nums)\n        -- `foldr`\
    \ :: (a -> b -> b) -> b -> [a] -> b\n        return foldr(function(n, acc)\n \
    \           -- `and` :: Bool -> Bool -> Bool\n            -- `or` :: Bool -> Bool\
    \ -> Bool\n            local first_and_last_odd = (function(n)\n             \
    \   -- `mod` :: Int -> Int -> Int\n                local first = mod(n, 10)\n\
    \                -- `quot` :: Int -> Int -> Int\n                local last =\
    \ quot(n, 10^(log10(n)))\n                -- `or` :: Bool -> Bool -> Bool\n  \
    \              return and(or(first == 1, first == 3, first == 5, first == 7, first\
    \ == 9),\n                           or(last == 1, last == 3, last == 5, last\
    \ == 7, last == 9))\n            end)(n)\n            -- `or` :: Bool -> Bool\
    \ -> Bool\n            -- `not` :: Bool -> Bool\n            return and(not(n\
    \ <= 10), first_and_last_odd) and acc + 1 or acc\n        end, 0, nums)\n    end\n\
    \    -- `map` :: (a -> b) -> [a] -> [b]\n    return map(count, nums)\nend", " \
    \   return #list.filter(nums, function(x) \n            return (math.abs(x) >\
    \ 10) and\n                (math.abs(x) % 10) % 2 == 1 and\n                (math.abs(x)\
    \ % math.pow(10, string.len(tostring(math.abs(x)))-1)) % 2 == 1\n    end)\nend",
  "\nend", '    local result = 0', "    local function special(n)\n        return\
    \ n > 10 and n % 2 == 1 and math.floor(n / 10) % 2 == 1\n    end\n    return #table.filter(nums,\
    \ special)\nend", "  \nend", "  local count = 0\n  for i = 1, #nums do\n    local\
    \ n = nums[i]\n    local last = n % 10\n    local first = n\n    while n >= 10\
    \ do\n      n = n / 10\n    end\n    n = math.floor(n)\n    if n > 10 and last\
    \ % 2 == 1 and n % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "\tif not nums then return 0 end\n\tlocal greaterThan10 = function(n)\
    \ return n > 10 end\n\tlocal firstLastOdd = function(n)\n\t\tlocal first = math.floor(n\
    \ / 10)\n\t\tlocal last = n % 10\n\t\tlocal firstIsOdd = first % 2 == 1\n\t\t\
    local lastIsOdd = last % 2 == 1\n\t\treturn firstIsOdd and lastIsOdd\n\tend\n\t\
    return filter(nums, both(greaterThan10, firstLastOdd))\nend", "    -- your code\
    \ here\n    return 0\nend", "\tlocal filtered = {}\n\tlocal count = 0\n\tfor i,v\
    \ in ipairs(nums) do\n\t\tif v > 10 and v % 2 == 1 and math.floor(v / 10) % 2\
    \ == 1 and v % 10 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "\tlocal count = 0", "  local function helper(n)\n    if #tostring(n)\
    \ == 1 then return n end\n    local first, last = string.sub(tostring(n), 1, 1),\
    \ string.sub(tostring(n), -1)\n    if (first == '1' or first == '3' or first ==\
    \ '5' or first == '7' or first == '9') and\n       (last == '1' or last == '3'\
    \ or last == '5' or last == '7' or last == '9') then\n      return true\n    end\n\
    \    return false\n  end\n  local acc = 0\n  for _,v in ipairs(nums) do\n    if\
    \ v > 10 and helper(v) then acc = acc + 1 end\n  end\n  return acc\nend\nprint(specialFilter({5,\
    \ 11, 50, 1, 7, 121, 9911, 99}))  --> 4", "  local count = 0\n  for i,n in ipairs(nums)\
    \ do\n    if n > 10 and\n       (n%10)%2 == 1 and\n       math.floor(n/10)%2 ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", "\nend\n\
    print(specialFilter({12, 13, 14, 15, 16, 17, 18, 19})) -- 3\nprint(specialFilter({11,\
    \ 22, 33, 44, 55, 66, 77, 88, 99})) -- 0\nprint(specialFilter({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19})) -- 6", "  -- your code\
    \ here\n  return 0\nend", "    local res = 0\n    for _, n in ipairs(nums) do\n\
    \        local f = math.floor(n / 10)\n        local l = n % 10\n        if f\
    \ > 0 and l > 0 and (f % 2 ~= 0) and (l % 2 ~= 0) and n > 10 then\n          \
    \  res = res + 1\n        end\n    end\n    return res\nend", end, "    -- body\n\
    end", "  -- insert your code here\n  -- Hint: You can use mod (%) to check whether\
    \ a number is odd.\n  -- Hint: Check out your solutions for the previous two problems.\n\
    \  local x = 0\n  local nums = {nums}\n  for i = 1, #nums do\n    if nums[i] >\
    \ 10 and nums[i] % 2 == 1 and math.floor(nums[i] / 10) % 2 == 1 then\n      x\
    \ = x + 1\n    end\n  end\n  return x\nend", "    -- insert your code here\nend",
  "    -- TODO: your code here\n    local count = 0\n    for _, x in ipairs(nums)\
    \ do\n        if x > 10 and string.sub(x, 1, 1) % 2 ~= 0 and string.sub(x, -1)\
    \ % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "    -- your code goes here.\nend", "\t-- body\nend", "    -- error(\"\
    not implemented yet\")\n    count = 0\n    for _, value in ipairs(nums) do\n \
    \       if value >= 10 and #(tostring(value)) >= 2 then\n            if (tostring(value)):match(\"\
    ^%d(.*)%d$\") ~= nil then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend", "    local count = 0\n    for i,\
    \ num in ipairs(nums) do\n        if num > 10 and firstDigit(num) % 2 ~= 0 and\
    \ lastDigit(num) % 2 ~= 0 then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend", "  -- your code goes here\n  -- Use list comprehensions\
    \ or Lua's built-in filter function\n  -- as preferred\n  return 0\nend", end,
  "\tlocal s,i,j,f,l\n\ts = 0\n\tfor i,j in ipairs(nums) do\n\t\tif j > 10 then\n\t\
    \t\tf = j // 10\n\t\t\tl = j % 10\n\t\t\tif (f % 2 ~= 0) and (l % 2 ~= 0) then\n\
    \t\t\t\ts = s + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn s\nend", "  local count\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if num > 10 and tonumber(string.sub(tostring(num),\
    \ 1, 1)) % 2 ~= 0 and tonumber(string.sub(tostring(num), -1)) % 2 ~= 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local function\
    \ isOdd(num)\n        local rem = num % 2\n        return rem == 1\n    end",
  "    --[[ \n    --  The following algorithm is not sufficient to satisfy the constraints\n\
    \    --  of the problem statement.\n    -- \n    --  The following code will fail\
    \ for the following input:\n    --  nums = { 1, 20, 30, 40, 50, 60, 70, 80, 90,\
    \ 99, 100 }\n    -- \n    --  Since, we are testing for the first digit in the\
    \ above algorithm, we\n    --  will fail to filter 20, 30, 40, ..., 100.\n   \
    \ --]]\n    local num = 0\n    for i = 1, #nums do\n        local s = tostring(nums[i])\n\
    \        if tonumber(s:sub(1, 1)) % 2 ~= 0 and tonumber(s:sub(-1)) % 2 ~= 0 and\
    \ nums[i] > 10 then\n            num = num + 1\n        end\n    end\n    return\
    \ num\nend", "  local filtered = {}\n  for _, num in ipairs(nums) do\n    if num\
    \ > 10 and specialNumber(num) then\n      table.insert(filtered, num)\n    end\n\
    \  end\n  return filtered\nend", "  -- your code here\n  if #nums == 0 then\n\
    \    return 0\n  end\n  local count = 0\n  for i = 1, #nums do\n    if nums[i]\
    \ > 10 then\n      local num = nums[i]\n      local last = num % 10\n      local\
    \ first = 0\n      while num > 0 do\n        num = math.floor(num / 10)\n    \
    \    first = num % 10\n      end\n      if first % 2 ~= 0 and last % 2 ~= 0 then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \   local out = {}\n    for i = 1, #nums do\n        if nums[i] > 10 and nums[i]\
    \ % 2 == 1 and string.sub(tostring(nums[i]), 1, 1) % 2 == 1 and string.sub(tostring(nums[i]),\
    \ -1, -1) % 2 == 1 then\n            table.insert(out, nums[i])\n        end\n\
    \    end\n    return out\nend", "\nend", "    local filtered = {}\n    for i,\
    \ num in ipairs(nums) do\n        local firstDigit = num % 10\n        local lastDigit\
    \ = math.floor(num / 10) % 10\n        if num > 10 and firstDigit % 2 == 1 and\
    \ lastDigit % 2 == 1 then\n            table.insert(filtered, num)\n        end\n\
    \    end\n    return filtered\nend", "    -- your code here\n    local filtered\
    \ = {}\n    for _, v in ipairs(nums) do\n        if v > 10 and string.match(tostring(v),\
    \ '^[13579]') and string.match(tostring(v), '[13579]$') then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return #filtered\nend", "    return 0\nend\nassert(specialFilter({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}) == 6)\nassert(specialFilter({22,\
    \ 33, 44, 55, 66, 77, 88, 99, 111, 222, 333, 444, 555, 666, 777, 888, 999}) ==\
    \ 0)\nassert(specialFilter({35, 52, 18, 93, 73, 31, 25, 53, 73, 83, 13, 73, 73,\
    \ 79, 73, 73, 73, 87, 13, 89, 73, 45, 61}) == 8)", "    local count = 0\n    for\
    \ i = 1, #nums do\n        if nums[i] > 10 and i % 2 == 1 and nums[#nums] % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "end\nprint(specialFilter({12, 11, 14, 9, 10, 3, 5, 9, 8, 8, 5, 7, 11, 11,\
    \ 5, 7, 1, 14, 6, 7, 3, 3, 3, 7, 12, 12, 12, 7, 12, 6, 8, 7, 8, 3, 3, 7, 8, 8,\
    \ 5, 7, 10, 10, 6, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 13,", "    local result = 0\n    for _, n in ipairs(nums) do\n \
    \       local nStr = tostring(n)\n        if #nStr > 1 then\n            local\
    \ firstDigit = nStr:sub(1, 1)\n            local lastDigit = nStr:sub(-1)\n  \
    \          if n > 10 and (firstDigit == '1' or firstDigit == '3'\n           \
    \         or firstDigit == '5' or firstDigit == '7' or firstDigit == '9')\n  \
    \                  and (lastDigit == '1' or lastDigit == '3'\n               \
    \     or lastDigit == '5' or lastDigit == '7' or lastDigit == '9') then\n    \
    \            result = result + 1\n            end\n        end\n    end\n    return\
    \ result\nend", "    local count = 0\n    for _,n in ipairs(nums) do\n       \
    \ local t = math.floor(n / 10)\n        local h = n % 10\n        if n > 10 and\
    \ (t % 2 ~= 0 and h % 2 ~= 0) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nassert(specialFilter({2, 102, 7, 18, 91, 21,\
    \ 7, 8}) == 2)", "    local count = 0\n    for i = 1, #nums do\n        if nums[i]\
    \ > 10 and (nums[i] % 2 ~= 0) and (nums[i] % 10 ~= 0) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\nend", "   local\
    \ cnt = 0\n   for _,v in ipairs(nums) do\n      if string.match(v, '^[13579]%d*[13579]$')\
    \ and v > 10 then\n         cnt = cnt + 1\n      end\n   end\n   return cnt\n\
    end", "    -- your code here\nend", "   local res = 0\n   for _, v in ipairs(nums)\
    \ do\n      if v > 10 and isFirstDigitOdd(v) and isLastDigitOdd(v) then\n    \
    \     res = res + 1\n      end\n   end\n   return res\nend", "    -- Your code\
    \ here\nend", "    local function isGreaterThan10(num)\n        local firstDigit\
    \ = math.floor(num / 10)\n        local lastDigit = num % 10\n        return (num\
    \ > 10) and (firstDigit % 2 == 1) and (lastDigit % 2 == 1)\n    end\n    local\
    \ filtered = nums:filter(isGreaterThan10)\n    return filtered:length()\nend",
  "    local gtTen = function(n) return n > 10 end\n    local isFirstLastOdd = function(n)\
    \ \n        local s = tostring(n)\n        local first = tonumber(string.sub(s,\
    \ 1, 1))\n        local last = tonumber(string.sub(s, #s, #s))\n        return\
    \ first % 2 == 1 and last % 2 == 1\n    end\n    return filter(nums, gtTen, isFirstLastOdd)\n\
    end", "    local res = 0\n    for _, v in ipairs(nums) do\n        if v > 10 and\
    \ (v % 2 == 1) and (math.floor(v / 100) % 2 == 1) then\n            res = res\
    \ + 1\n        end\n    end\n    return res\nend", "  return 0\nend\nassert(specialFilter({})\
    \ == 0)\nassert(specialFilter({12,11,22,33,34,10,20,30,40}) == 2)\nassert(specialFilter({12,19,22,43,34,11,29,31,39})\
    \ == 5)\nassert(specialFilter({12,9,22,43,34,11,29,31,39}) == 4)\nprint(\"specialFilter\
    \ tests passed\")", "    local count = 0\n    for i = 1, #nums do\n        local\
    \ x = nums[i]\n        local d1 = x % 10\n        local d2 = math.floor(x / 10)\
    \ % 10\n        if x > 10 and d1 % 2 == 1 and d2 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    local counter\
    \ = 0\n    for i, n in ipairs(nums) do\n        local first = math.floor(n / 10)\n\
    \        local last = n % 10\n        if n > 10 and first % 2 ~= 0 and last %\
    \ 2 ~= 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend", "\t-- body\nend", "\nend", "    local result = 0\n    for i,num\
    \ in ipairs(nums) do\n        local div = 10\n        local lastDigit = num %\
    \ 10\n        local firstDigit = num\n        while firstDigit >= 10 do\n    \
    \        firstDigit = firstDigit / div\n        end\n        if num > 10 and math.mod(firstDigit,\
    \ 2) ~= 0 and math.mod(lastDigit, 2) ~= 0 then\n            result = result +\
    \ 1\n        end\n    end\n    return result\nend", "    return table.filter(nums,\
    \ function(e) \n        return e > 10 and string.find(tostring(e), '^[13579].*[13579]$')\
    \ \n    end)\nend", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal num =\
    \ nums[i]\n\t\tif num > 10 and ((num % 10) % 2 ~= 0) and (math.floor(num / 10)\
    \ % 2 ~= 0) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "\t-- YOUR CODE HERE\n\treturn function(n)\n\t\tlocal num = math.floor(n)\n\t\t\
    local first = num % 10\n\t\tlocal last = math.floor(num / 10)\n\t\treturn n >\
    \ 10 and (first % 2 ~= 0 and last % 2 ~= 0)\n\tend\nend", "\t-- your code here\n\
    end", "    local count = 0\n    for _, v in ipairs(nums) do\n        if v > 10\
    \ and hasOddDigits(v) then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local cnt = 0\n    for i = 1, #nums do\n       \
    \ local num = nums[i]\n        if num > 10 and math.floor(num / 10) % 2 ~= 0 and\
    \ num % 2 ~= 0 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "\tlocal count = 0\n\tfor i, n in ipairs(nums) do\n\t\tif n > 10\
    \ and math.fmod(n, 2) ~= 0 then\n\t\t\tif math.fmod(math.floor(n / 10), 2) ~=\
    \ 0 then\n\t\t\t\tif math.fmod(n % 10, 2) ~= 0 then\n\t\t\t\t\tcount = count +\
    \ 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  -- your\
    \ code here\nend", "    -- your code here\n    local res = 0\n    for _,num in\
    \ ipairs(nums) do\n        local n = num\n        local n1 = n%10\n        n =\
    \ math.floor(n/10)\n        local n2 = n%10\n        if n1%2 ~= 0 and n2%2 ~=\
    \ 0 and num > 10 then\n            res = res + 1\n        end\n    end\n    return\
    \ res\nend", "  local count = 0\n  for i, n in ipairs(nums) do\n    if n > 10\
    \ and n % 2 == 1 and n // 10 % 2 == 1 and n % 10 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nassert(specialFilter({11, 22, 33,\
    \ 44, 55, 66, 77, 88, 99}) == 3)\nassert(specialFilter({1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9}) == 1)", "    local cnt = 0\n    for i = 1, #nums do\n        local val =\
    \ nums[i]\n        local firstDigit = val % 10\n        local lastDigit = (val\
    \ - firstDigit) / 10\n        if (val > 10) and (firstDigit % 2 == 1) and (lastDigit\
    \ % 2 == 1) then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "    -- your code goes here\nend", "\tlocal count = 0\n\tfor i =\
    \ 1, #nums do\n\t\tlocal num = nums[i]\n\t\tif num > 10 and math.fmod(num, 2)\
    \ == 1 and math.fmod(num % 10, 2) == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    local count = 0\n    for _, n in ipairs(nums)\
    \ do\n        if n > 10 then\n            local first = n % 10\n            local\
    \ last = n / 10\n            while last >= 10 do\n                last = last\
    \ / 10\n            end\n            if first % 2 == 1 and last % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "  -- ...\nend\nassert(specialFilter({1, 11, 9}) == 1)\n\
    assert(specialFilter({8, 6, 1, 9, 15, 4, 8, 9, 10, 11}) == 2)\nassert(specialFilter({8,\
    \ 7, 1, 9, 15, 4, 8, 9, 10, 11}) == 0)\nassert(specialFilter({}) == 0)\nassert(specialFilter({1,\
    \ 11, 9, 22, 43, 54, 9, 8, 7, 6, 55, 66, 77, 88, 99, 111, 131, 141, 151, 161,\
    \ 171, 181, 191}) == 6)\nprint(\"All tests are passed.\")", "    local count =\
    \ 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num > 10\
    \ and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend", "  nums:filter(function(num)\n\
    \    local first = num % 10\n    while num > 0 do\n      num = num / 10\n    end\n\
    \    local last = num % 10\n    if first % 2 == 1 and last % 2 == 1 and num >\
    \ 10 then\n      return true\n    end\n    return false\n  end)\nend", "    --\
    \ return count of numbers\nend", "    local results = {}\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 and isBothDigitsOdd(num) then\n            table.insert(results,\
    \ num)\n        end\n    end\n    return #results\nend", "  -- body\nend", " \
    \   -- Your code goes here\nend", "    local function isGreaterThan10(n)\n   \
    \     return n > 10\n    end", "  local count = 0\n  for i,v in ipairs(nums) do\n\
    \    if v > 10 and  v % 2 == 1 then\n      local x = v\n      while x > 10 do\
    \ x = x / 10 end\n      if x % 2 == 1 then count = count + 1 end\n    end\n  end\n\
    \  return count\nend", "  -- body\nend", "    local count = 0\n    for i, num\
    \ in ipairs(nums) do\n        local first = num\n        local last = num\n  \
    \      while first >= 10 do\n            first = first % 10\n        end\n   \
    \     while last >= 10 do\n            last = math.floor(last / 10)\n        end\n\
    \        if num > 10 and first % 2 == 1 and last % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\nend", "\nend",
  "    return reduce(\n        function(acc, n)\n            if n > 10 and math.fmod(math.floor(n\
    \ / 10), 2) == 1 and\n            math.fmod(n, 2) == 1 then\n                return\
    \ acc + 1\n            else\n                return acc\n            end\n   \
    \     end,\n        0,\n        nums\n    )\nend", end, "\nend\n ", "  return\
    \ #filter(nums, function(n)\n    return n > 10 and n % 2 == 1 and tonumber(n:sub(1,\
    \ 1)) % 2 == 1 and tonumber(n:sub(-1)) % 2 == 1\n  end)\nend", "  -- add your\
    \ code here...\n  local function checker(num)\n    local first_digit = num % 10;\n\
    \    local last_digit = num / 10;\n    if (num > 10 and math.fmod(first_digit,\
    \ 2) == 1 and math.fmod(last_digit, 2) == 1) then\n      return true;\n    else\n\
    \      return false;\n    end\n  end\n  local ret = {};\n  for _, v in ipairs(nums)\
    \ do\n    if (checker(v)) then\n      table.insert(ret, v);\n    end\n  end\n\
    \  return ret;\nend", "    local filtered = {}\n    for i, num in ipairs(nums)\
    \ do\n        if num > 10 and\n           num % 2 == 1 and\n           num % 10\
    \ == 1 or num % 10 == 3 or num % 10 == 5 or\n           num % 10 == 7 or num %\
    \ 10 == 9 then\n            table.insert(filtered, num)\n        end\n    end\n\
    \    return filtered\nend", "    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 and\
    \ num % 10 % 2 == 1 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "\nend", "    local count = 0\n    for _, n in ipairs(nums)\
    \ do\n        if n > 10 and n ~= 0 and math.fmod(n, 10) % 2 ~= 0 and n // 100\
    \ % 2 ~= 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend", "\t-- write your code here\nend", "    return 0\nend", "    local\
    \ result = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if\
    \ num > 10 and math.floor(num / 10) % 2 ~= 0 and num % 2 ~= 0 then\n         \
    \   result = result + 1\n        end\n    end\n    return result\nend", "  local\
    \ res = 0\n  for _, v in ipairs(nums) do\n    local first_digit = v % 10\n   \
    \ local last_digit = 0\n    while v > 0 do\n      last_digit = v % 10\n      v\
    \ = v / 10\n    end\n    v = math.abs(v)\n    if v > 10 and first_digit % 2 ~=\
    \ 0 and last_digit % 2 ~= 0 then\n      res = res + 1\n    end\n  end\n  return\
    \ res\nend", "  -- your code here\n  local count = 0\n  for i, v in ipairs(nums)\
    \ do\n    local first = tostring(v):sub(1, 1)\n    local last = tostring(v):sub(-1)\n\
    \    if v > 10 and (first == '1' or first == '3' or first == '5' or\n      first\
    \ == '7' or first == '9') and (last == '1' or last == '3' or\n      last == '5'\
    \ or last == '7' or last == '9') then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\
    \tif num > 10 then\n\t\t\tlocal _, last = strsplit(\"\", num)\n\t\t\tif (num %\
    \ 2 == 1) and (last % 2 == 1) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn count\nend", "  local result = 0\n  for i = 1, #nums do\n\
    \    local firstDigit = nums[i]\n    while (firstDigit >= 10) do\n      firstDigit\
    \ = math.floor(firstDigit / 10)\n    end\n    if (nums[i] > 10 and firstDigit\
    \ % 2 ~= 0 and nums[i] % 2 ~= 0) then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend", "   --[[ your code here ]]\nend", "\tlocal count = 0\n\
    \tlocal function isBigAndBothOdd(num)\n\t\tlocal n = math.abs(num)\n\t\tlocal\
    \ first = n % 10\n\t\twhile n > 0 do\n\t\t\tn = math.floor(n / 10)\n\t\t\tlocal\
    \ last = n % 10\n\t\t\tif first ~= last then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn num > 10 and first % 2 == 1\n\tend\n\t\n\tfor i = 1, #nums\
    \ do\n\t\tif isBigAndBothOdd(nums[i]) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    return 100\nend", "  -- your code goes here\n\
    end", "    return 0\nend", "    local function numCheck(num)\n        local numStr\
    \ = num..\"\"\n        if num > 10 then\n            local first = numStr:sub(1,1)\n\
    \            local last = numStr:sub(-1,-1)\n            if tonumber(first) %\
    \ 2 ~= 0 and tonumber(last) % 2 ~= 0 then\n                return true\n     \
    \       end\n        end\n        return false\n    end\n    local ret = {}\n\
    \    for i, v in ipairs(nums) do\n        if numCheck(v) then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "end\nassert(specialFilter({1,\
    \ 12, 24, 32, 64, 95, 1004, 1032, 1048, 1100}) == 3)", "    -- your code goes\
    \ here\n    return 0\nend", "\tlocal function predicate(x)\n\t\tlocal firstDigit\
    \ = math.floor(x / 10)\n\t\tlocal lastDigit = x % 10\n\t\treturn firstDigit %\
    \ 2 ~= 0 and lastDigit % 2 ~= 0 and x > 10\n\tend\n\tlocal results = {}\n\tfor\
    \ i = 1, #nums do\n\t\tif predicate(nums[i]) then\n\t\t\tresults[#results + 1]\
    \ = nums[i]\n\t\tend\n\tend\n\treturn results\nend", "    local count = 0\n  \
    \  for i = 1, #nums do\n        local num = nums[i]\n        local first = tostring(num):sub(1,\
    \ 1)\n        local last = tostring(num):sub(-1)\n        if tonumber(first)%2\
    \ ~= 0 and tonumber(last)%2 ~= 0 and num > 10 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    -- your code here\n\
    end\nassert(specialFilter({1, 11, 13, 15, 17, 19, 21, 31, 33, 35, 37, 39, 41,\
    \ 51, 53, 55, 57, 59, 61, 71, 73, 75, 77, 79, 81, 91, 93, 95, 97, 99}) == 25)\n\
    print(\"passed\")", "    -- body\nend", "\tlocal function lastIsOdd(num)\n\t\t\
    if num % 2 == 1 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tlocal function firstIsOdd(num)\n\t\tlocal digits = 0\n\t\twhile num >\
    \ 0 do\n\t\t\tnum = num / 10\n\t\t\tdigits = digits + 1\n\t\tend\n\t\tlocal first\
    \ = tonumber(string.sub(num, 1, 1))\n\t\tif first % 2 == 1 then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tlocal function greaterThan10(num)\n\
    \t\tif num > 10 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tlocal function allTrue(num)\n\t\tif greaterThan10(num) and lastIsOdd(num)\
    \ and firstIsOdd(num) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\n\tlocal count = 0\n\tfor k, v in pairs(nums) do\n\t\tif allTrue(v)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
