name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    for i = 2, n-1 do\n        if n % i == 0 then\n            return\
    \ i\n        end\n    end\n    return 1\nend", "\tlocal largest_factor = math.floor(math.sqrt(n))\n\
    \twhile largest_factor > 1 do\n\t\tif math.fmod(n, largest_factor) == 0 then\n\
    \t\t\treturn largest_factor\n\t\tend\n\t\tlargest_factor = largest_factor - 1\n\
    \tend\n\treturn 1\nend", "\tlocal divisor = math.floor(n/2)\n\twhile n % divisor\
    \ ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\nend", "\tfor i=n-1,1,-1\
    \ do\n\t\tif n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend",
  "  -- Assume that the largest divisor is (n - 1)\n  local largest_divisor = n -\
    \ 1\n  while largest_divisor > 1 do\n    -- Keep reducing the number by 1\n  \
    \  largest_divisor = largest_divisor - 1\n    -- If we've reached the end, we\
    \ can stop\n    if largest_divisor == 1 then\n      break\n    end\n    -- If\
    \ this number divides n evenly, then we can stop\n    if n % largest_divisor ==\
    \ 0 then\n      break\n    end\n  end\n  return largest_divisor\nend", "    for\
    \ i = 2, n-1 do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\n    return nil\nend", "  local half = math.floor(n / 2)\n  for i = half,\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\n\
    end", "\tlocal ld = 1\n\tfor i = 2, n/2 do\n\t\tif n % i == 0 then\n\t\t\tld =\
    \ i\n\t\tend\n\tend\n\treturn ld\nend", "  for i = math.floor(n-1), 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend", "\t\
    local i = 1\n\tlocal lim = n/2\n\twhile i <= lim do\n\t\tif n % i == 0 then\n\t\
    \t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn 1\nend", "    for i=2,n-1\
    \ do\n        if (n % i) == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend", "    -- We start from half the number.\n    local divisor\
    \ = math.floor(n / 2)\n    -- We divide the number by each number between half\
    \ and two, until we find a divisor or reach two.\n    -- Since we're using integer\
    \ division, the numbers we're using to divide will decrease in steps of one.\n\
    \    while divisor >= 2 do\n        if n % divisor == 0 then\n            return\
    \ divisor\n        end\n        divisor = divisor - 1\n    end\n    -- If we reach\
    \ here, it means we haven't found a divisor, so we return 1, because n can only\
    \ be divided by itself.\n    return 1\nend", "  for i = n - 1, 2, -1 do\n    if\
    \ n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend", "    for\
    \ i=2,n-1 do\n        if n % i == 0 then\n            return largest_divisor(n/i)\n\
    \        end\n    end\n    return n\nend", "\tlocal d = math.sqrt(n)\n\twhile\
    \ d > 1 do\n\t\tif math.fmod(n, d) == 0 then\n\t\t\treturn d\n\t\tend\n\t\td =\
    \ d - 1\n\tend\n\treturn 1\nend", "    local i = math.floor(math.sqrt(n))\n  \
    \  while n % i ~= 0 do\n        i = i - 1\n    end\n    return i\nend", "\tlocal\
    \ max_divisor = math.floor(n / 2)\n\t\n\twhile (n % max_divisor ~= 0) do\n\t\t\
    max_divisor = max_divisor - 1\n\tend\n\t\n\treturn max_divisor\nend", "\tlocal\
    \ max = math.floor(math.sqrt(n))\n\tfor i = max, 2, -1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "\tlocal d = math.floor(math.sqrt(n))\n\
    \tlocal d_prev = d + 1\n\twhile d > 1 do\n\t\tif n % d == 0 then\n\t\t\treturn\
    \ d\n\t\tend\n\t\td_prev = d\n\t\td = math.floor(d - 1)\n\tend\n\treturn n\nend",
  "\t-- We only need to check up to the square root of n, since numbers with a factor\n\
    \t-- greater than the square root are paired with a smaller one\n\tfor i = math.floor(math.sqrt(n)),\
    \ 1, -1 do\n\t\tif math.mod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\t\
    return 1\nend", "    -- find an integer d that divides n evenly, and is smaller\
    \ than n\n    local d = 2\n    while n % d ~= 0 do\n        d = d + 1\n    end\n\
    \    return d\nend", "    local result = 0\n    for i = 2, n do\n        if is_divisible(n,\
    \ i) then\n            result = i\n        end\n    end\n    return result\nend",
  "    local max = math.sqrt(n)\n    local divisor = math.floor(max)\n    while n\
    \ % divisor ~= 0 do\n        divisor = divisor - 1\n    end\n    return divisor\n\
    end", "\tlocal c = math.floor(math.sqrt(n))\n\twhile c >= 1 do\n\t\tif n % c ==\
    \ 0 then\n\t\t\treturn c\n\t\tend\n\t\tc = c - 1\n\tend\n\treturn 1\nend", "\t\
    local i = 1\n\twhile true do\n\t\tif i >= n then\n\t\t\treturn n\n\t\tend\n\t\t\
    if n % i == 0 then\n\t\t\tn = i\n\t\tend\n\t\ti = i + 1\n\tend\nend", "    local\
    \ i = 2\n    while n%i ~= 0 do\n        i = i + 1\n    end\n    return i\nend",
  "  for d = 2, n do\n    if n % d == 0 then\n      return d\n    end\n  end\n  return\
    \ 1\nend", "\tfor i = math.floor(n/2), 1, -1 do\n\t\tif n % i == 0 then\n\t\t\t\
    return i\n\t\tend\n\tend\n\treturn nil\nend", "    local largest_divisor = 2\n\
    \    local limit = math.sqrt(n)\n    for divisor = 2, limit do\n        if n %\
    \ divisor == 0 then\n            largest_divisor = divisor\n        end\n    end\n\
    \    return largest_divisor\nend", "  for i = n-1, 1, -1 do\n    if n % i == 0\
    \ then\n      return i\n    end\n  end\n  return nil\nend", "\tlocal divisor =\
    \ n - 1\n\twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn\
    \ divisor\nend", "  local largest = 2\n  while n % largest == 0 do\n    largest\
    \ = largest + 1\n  end\n  return largest - 1\nend", "    local divisor = 2\n \
    \   while n % divisor ~= 0 do\n        divisor = divisor + 1\n    end\n    return\
    \ divisor\nend", "\tlocal d = 2\n\twhile n % d ~= 0 do\n\t\td = d + 1\n\tend\n\
    \treturn d\nend", "    if n == 1 then\n        return 1\n    end\n    for i =\
    \ 2, math.floor(n / 2) do\n        if n % i == 0 then\n            return largest_divisor(n\
    \ / i)\n        end\n    end\n    return n\nend", '    local result = 1', "  \
    \  -- Handle negative numbers\n    if n < 0 then\n        return largest_divisor(-n)\n\
    \    end", "\tfor i=math.floor(n/2),2,-1 do\n\t\tif n%i == 0 then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn 1\nend", "  for i = n - 1, 2, -1 do\n    if n %\
    \ i == 0 then\n      return i\n    end\n  end\n  return 0\nend", "\tlocal m =\
    \ math.floor(math.sqrt(n))\n\tfor i = m, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\
    \treturn i\n\t\tend\n\tend\n\treturn 1\nend", "\tfor i = n-1, 2, -1 do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend", '    local
    d = 0', "  local divisor = 1\n  for i = 2, math.floor(math.sqrt(n)) do\n    if\
    \ n % i == 0 then\n      divisor = i\n    end\n  end\n  return divisor\nend",
  "\tlocal i = 1\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\tn = i\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn n\nend", "  local max = math.floor(math.sqrt(n))\n\
    \  local d, i = 1, 2\n  while i <= max do\n    if n % i == 0 then\n      max =\
    \ math.floor(n / i)\n      d = i\n    end\n    i = i + 1\n  end\n  return d\n\
    end", "  local d = math.floor(math.sqrt(n))\n  while n % d ~= 0 do\n    d = d\
    \ - 1\n  end\n  return d\nend", "\tlocal i = 1\n\twhile i < n do\n\t\tif n % i\
    \ == 0 then\n\t\t\ti = i + 1\n\t\telse\n\t\t\ti = n\n\t\tend\n\tend\n\treturn\
    \ i - 1\nend", "  if n <= 1 then return nil end\n  if n%2 == 0 then return 2 end\n\
    \  local divisor = 3\n  while divisor <= n/2 do\n    if n%divisor == 0 then return\
    \ divisor end\n    divisor = divisor + 2\n  end\n  return nil\nend", "  for d\
    \ = n - 1, 2, -1 do\n    if n % d == 0 then\n      return d\n    end\n  end\n\
    \  return 1\nend", "\t-- TODO: Implement\n\tfor i = n - 1, 1, -1 do\n\t\tif n\
    \ % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend", "    if n == 1 then\n \
    \       return nil\n    end\n    for i = n-1, 2, -1 do\n        if n % i == 0\
    \ then\n            return i\n        end\n    end\n    return nil\nend", "  \
    \  local max = 1\n    local d = 2\n    while d < n do\n        if n % d == 0 then\n\
    \            max = d\n        end\n        d = d + 1\n    end\n    return max\n\
    end", "\tlocal d = math.floor(math.sqrt(n))\n\twhile n % d ~= 0 do\n\t\td = d\
    \ - 1\n\tend\n\treturn d\nend", "    for i = n - 1, 1, -1 do\n        if n % i\
    \ == 0 then\n            return i\n        end\n    end\nend", "    local m =\
    \ math.floor(math.sqrt(n))\n    for i = m, 2, -1 do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\n    return n\nend", "    for i =\
    \ n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend", "\tlocal d = 1\n\twhile (math.mod(n,d) ~= 0) do\n\t\td = d + 1\n\
    \tend\n\treturn d\nend", "    local largest = 0\n    for d = 2, n-1 do\n     \
    \   if math.fmod(n, d) == 0 then\n            largest = d\n        end\n    end\n\
    \    return largest\nend", "\tfor i = math.floor(n/2), 2, -1 do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend", "  local i = 2\n\
    \  while i <= n/2 do\n    if n % i == 0 then\n      return n/i\n    end\n    i\
    \ = i + 1\n  end\n  return 1\nend", "    local i = 2\n    while i <= n do\n  \
    \      if n % i == 0 then\n            return n / i\n        end\n        i =\
    \ i + 1\n    end\n    return n\nend", "\tfor i=n-1,1,-1 do\n\t\tif n%i == 0 then\n\
    \t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "  for i = math.floor(n/2),\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return n\n\
    end", "  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\n  return nil\nend", "\tfor i = n - 1, 2, -1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "  for i = n-1, 1,\
    \ -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\nend", "\tif n\
    \ < 2 then\n\t\treturn 1\n\tend\n\tlocal i = 2\n\twhile i < n do\n\t\tif n % i\
    \ == 0 then\n\t\t\tn = n / i\n\t\t\ti = 2\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\
    \tend\n\treturn n\nend", "    if n % 2 == 0 then\n        return n/2\n    end\n\
    \    for i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n            return\
    \ n/i\n        end\n    end\n    return 1\nend", "  local d = math.floor(math.sqrt(n))\n\
    \  while n % d ~= 0 do\n    d = d - 1\n  end\n  return d\nend", "\tif n % 2 ==\
    \ 0 then\n\t\treturn n / 2\n\tend\n\tlocal f = 3\n\twhile n % f ~= 0 do\n\t\t\
    f = f + 2\n\tend\n\treturn f\nend", "    if n == 1 then\n        return 1\n  \
    \  end\n    for i = n-1, 1, -1 do\n        if math.fmod(n, i) == 0 then\n    \
    \        return i\n        end\n    end\nend", "  if n == 1 then return 1 end\n\
    \  local half_n = n / 2\n  local i = 2\n  while i <= half_n do\n    if n % i ==\
    \ 0 then\n      return n / i\n    end\n    i = i + 1\n  end\n  return 1\nend",
  "\tlocal largest = n-1\n\twhile n % largest ~= 0 do\n\t\tlargest = largest - 1\n\
    \tend\n\treturn largest\nend", "    -- initialize to 1, and then test all numbers\
    \ smaller than n to see if they are divisors\n    local divisor = 1\n    while\
    \ divisor < n do\n        if n % divisor == 0 then\n            -- this number\
    \ is a divisor\n            largest_divisor = divisor\n        end\n        divisor\
    \ = divisor + 1\n    end\n    return largest_divisor\nend", "\t-- Note: this isn't\
    \ the most efficient way to do this, but it is easy to grasp\n\tlocal largest\
    \ = 0\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\
    \tend\n\treturn largest\nend", "  local root = math.floor(math.sqrt(n))\n  local\
    \ range = math.floor(n / 2)", "    if n % 2 == 0 then\n        return n / 2\n\
    \    end\n    for d = 3, math.floor(math.sqrt(n)), 2 do\n        if n % d == 0\
    \ then\n            return n / d\n        end\n    end\n    return 1\nend", "\t\
    local divisor = math.floor(n/2)\n\twhile (divisor > 0) do\n\t\tif n % divisor\
    \ == 0 then\n\t\t\treturn divisor\n\t\tend\n\t\tdivisor = divisor - 1\n\tend\n\
    \treturn divisor\nend", "  local divisor = 2\n  while n % divisor ~= 0 do\n  \
    \  divisor = divisor + 1\n  end\n  return divisor\nend", "  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return largest_divisor(n / i)\n    end\n \
    \ end\n  return n\nend", "  local half = math.floor(n / 2)\n  for i = half, 1,\
    \ -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return nil\n\
    end", "\tlocal largest = 0\n\tfor i = 1, n/2 do\n\t\tif n % i == 0 then\n\t\t\t\
    largest = i\n\t\tend\n\tend\n\treturn largest\nend", "  local i = n - 1\n  while\
    \ true do\n    if i == 1 then return nil end\n    if n % i == 0 then return i\
    \ end\n    i = i - 1\n  end\nend", "\tlocal half = math.floor(n / 2)\n\tfor i\
    \ = half, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\t\
    return n\nend", "  for i = n - 1, 2, -1 do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\n  return 1\nend", "\tfor i = n-1, 1, -1 do\n\t\tif (n % i)\
    \ == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend", "    local l\
    \ = math.floor(math.sqrt(n))\n    while l > 0 do\n        if n % l == 0 then\n\
    \            return l\n        end\n        l = l - 1\n    end\n    return nil\n\
    end", "  local i = 2\n  while (n % i) == 0 do\n    i = i + 1\n  end\n  return\
    \ i - 1\nend", "    local divisor = math.floor(n / 2)\n    while n % divisor ~=\
    \ 0 do\n        divisor = divisor - 1\n    end\n    return divisor\nend", "\t\
    for i = math.floor(n/2), 1, -1 do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn 1\nend", "\t-- returns the largest number, d, such\
    \ that d divides n evenly, d < n\n\tlocal d = math.floor(n/2)\n\twhile n % d ~=\
    \ 0 do\n\t\td = d - 1\n\tend\n\treturn d\nend", "    for i = n - 1, 2, -1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend", "  for i=2,math.sqrt(n) do\n    if n % i == 0 then\n      return n/i\n\
    \    end\n  end\n  return 1\nend", "\tlocal largest = 1\n\tfor i = 2, n - 1 do\n\
    \t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\tend\n\tend\n\treturn largest\n\
    end", "  local largest = 0\n  local limit = math.sqrt(n)\n  for i = 2, limit do\n\
    \    if n % i == 0 then\n      largest = i\n    end\n  end\n  return largest\n\
    end", "\tlocal divisor = 2\n\twhile divisor <= n do\n\t\tif n % divisor == 0 then\n\
    \t\t\tn = n / divisor\n\t\t\t-- Fetch the next prime number\n\t\t\tdivisor = 2\n\
    \t\telse\n\t\t\tdivisor = next_prime(divisor)\n\t\tend\n\tend\n\treturn divisor\n\
    end", "\tlocal max = math.floor(math.sqrt(n))\n\tfor i = max, 2, -1 do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "    local\
    \ divisor = math.floor(n/2)\n    while divisor > 1 do\n        if math.fmod(n,\
    \ divisor) == 0 then\n            return divisor\n        end\n        divisor\
    \ = divisor - 1\n    end\n    return 1\nend", "  local result = 0\n  local stop\
    \ = math.floor(math.sqrt(n))\n  for i = 2, stop do\n    if n % i == 0 then\n \
    \     result = i\n    end\n  end\n  return result\nend", "  for i=math.floor(n/2),2,-1\
    \ do\n    if n%i == 0 then\n      return i\n    end\n  end\n  return 1\nend",
  "    for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend", "\tlocal sqrt = math.sqrt(n)\n\tlocal largest_divisor\
    \ = 2\n\tfor i = 2, sqrt do\n\t\tif n % i == 0 then\n\t\t\tlargest_divisor = n\
    \ / i\n\t\tend\n\tend\n\treturn largest_divisor\nend", "\t-- Find all prime factors\
    \ of n, then take the smallest prime factor and \n\t-- divide it out of n. Keep\
    \ repeating until that quotient can't be divided\n\t-- further.\n\tlocal factors\
    \ = prime_factors(n)\n\tlocal result = 1\n\tlocal divisor = 2\n\twhile divisor\
    \ <= n do\n\t\tif factors[divisor] ~= nil then\n\t\t\tresult = result * divisor\n\
    \t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor = divisor + 1\n\t\tend\n\tend\n\
    \treturn result\nend", "  if n == 1 then return 1 end\n  local p = primes[1]\n\
    \  while p <= n do\n    if n % p == 0 then return p end\n    p = primes[p+1]\n\
    \  end\n  return p\nend", "\tlocal divisor = 1\n\tfor i = 2, n-1 do\n\t\tif n\
    \ % i == 0 then\n\t\t\tdivisor = i\n\t\tend\n\tend\n\treturn divisor\nend", '  local
    i = math.ceil(math.sqrt(n))', "    local d = 1\n    for i = 2, n - 1 do\n    \
    \    if n % i == 0 then\n            d = i\n        end\n    end\n    return d\n\
    end", "\tlocal ld = 2\n\twhile n % ld ~= 0 do\n\t\tld = ld + 1\n\tend\n\treturn\
    \ ld\nend", "\tfor i = math.floor(n/2), 1, -1 do\n\t\tif (n % i) == 0 then\n\t\
    \t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "\tlocal divisor = math.floor(n/2)\n\
    \twhile divisor > 1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\t\
    \tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn nil\nend", "\tfor i = n-1, 1,\
    \ -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend", "    local\
    \ divisor = 1\n    for i = 2,n-1 do\n        if n % i == 0 then\n            divisor\
    \ = i\n        end\n    end\n    return divisor\nend", "\tlocal divisor = n-1\n\
    \twhile n % divisor ~= 0 do\n\t\tdivisor = divisor - 1\n\tend\n\treturn divisor\n\
    end", "\tlocal d = 1\n\twhile d < n do\n\t\tif math.fmod(n, d) == 0 then return\
    \ d end\n\t\td = d + 1\n\tend\n\treturn n\nend", "\tlocal root = math.floor(math.sqrt(n))\n\
    \tfor i = 2, root do\n\t\tif n % i == 0 then\n\t\t\treturn n // i\n\t\tend\n\t\
    end\n\treturn 1\nend", "  for i=n-1, 1, -1 do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\n  return 1\nend", "  for i=math.floor(n/2), 1, -1 do\n  \
    \  if n % i == 0 then\n      return i\n    end\n  end\n  return nil\nend", " \
    \   -- Check all integers from the largest possible down\n    for i = n - 1, 2,\
    \ -1 do\n        -- If n is divisible by i, return i\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\nend", "\tlocal largest = math.floor(n/2)\n\
    \t\n\tfor i = largest, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\tend\n\t\n\treturn 1\nend", "    local i = 1\n    while i <= n/2 do\n  \
    \      if n % i == 0 then\n            return i\n        end\n        i = i +\
    \ 1\n    end\n    return 1\nend", "  for d = n - 1, 2, -1 do\n    if n % d ==\
    \ 0 then\n      return d\n    end\n  end\n  return 1\nend", "\tif n == 1 then\n\
    \t\treturn 1\n\tend\n\tlocal sqrt = math.floor(math.sqrt(n))\n\tfor i = sqrt,\
    \ 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end", "  local largest = 1\n  for i = 2, n-1 do\n    if n % i == 0 then\n    \
    \  largest = i\n    end\n  end\n  return largest\nend", "\tfor i = n - 1, 2, -1\
    \ do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ 1\nend", "\tlocal d = 1\n\tlocal ld = n\n\twhile d <= n/2 do\n\t\tif n % d ==\
    \ 0 then\n\t\t\tld = d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn ld\nend", "\t\
    local i = math.floor(math.sqrt(n))\n\twhile n % i ~= 0 do\n\t\ti = i - 1\n\tend\n\
    \treturn i\nend", "\tif n < 2 then\n\t\treturn 1\n\tend\n\tlocal f = 2\n\tlocal\
    \ p = n\n\twhile p % f == 0 do\n\t\tp = p / f\n\tend\n\treturn f\nend", "    for\
    \ i = math.floor(n / 2), 1, -1 do\n        if math.fmod(n, i) == 0 then\n    \
    \        return i\n        end\n    end\n    return 1\nend", "    for i = 2, n-1\
    \ do\n        if math.fmod(n, i) == 0 then\n            return i\n        end\n\
    \    end\n    return 1\nend", "\tfor i = math.floor(n / 2), 1, -1 do\n\t\tif n\
    \ % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "    local\
    \ i\n    for i = math.floor(n/2), 2, -1 do\n        if n % i == 0 then\n     \
    \       return i\n        end\n    end\n    return 1\nend", "\tlocal divisor =\
    \ 2\n\twhile divisor < n do\n\t\tif n % divisor == 0 then\n\t\t\treturn divisor\n\
    \t\tend\n\t\tdivisor = divisor + 1\n\tend\n\treturn nil\nend", "    local d =\
    \ 2\n    while d < n do\n        if n % d == 0 then\n            return d\n  \
    \      end\n        d = d + 1\n    end\n    return 1\nend", "    local start_at\
    \ = math.floor(n / 2)\n    local divisor = 2\n    while true do\n        if n\
    \ % divisor == 0 then\n            return divisor\n        end\n        divisor\
    \ = divisor + 1\n        if divisor > start_at then\n            return 1\n  \
    \      end\n    end\nend", "  local max = math.floor(math.sqrt(n))\n  for i =\
    \ 2, max do\n    if n % i == 0 then\n      return n / i\n    end\n  end\n  return\
    \ 1\nend", "  local largest = 1\n  for i = 2, n-1 do\n    if math.fmod(n, i) ==\
    \ 0 then\n      largest = i\n    end\n  end\n  return largest\nend", "\tlocal\
    \ divisor = 1", "    for i = 1, n do\n        if n % i == 0 then\n           \
    \ return i\n        end\n    end\nend", "\tlocal d = 2\n\twhile d < n do\n\t\t\
    if (n % d) == 0 then\n\t\t\treturn d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn\
    \ nil\nend", "\tlocal max = math.floor(math.sqrt(n))\n\tlocal result = 1\n\tfor\
    \ i = 2, max do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\tresult = i\n\t\tend\n\
    \tend\n\treturn result\nend", "  for i = n-1, 1, -1 do\n    if n % i == 0 then\n\
    \      return i\n    end\n  end\nend", "  local i = 2\n  while i < n do\n    if\
    \ n % i == 0 then\n      return i\n    end\n    i = i + 1\n  end\n  return 1\n\
    end", "\tfor i = math.floor(n / 2), 1, -1 do\n\t\tif (n % i) == 0 then\n\t\t\t\
    return i\n\t\tend\n\tend\n\treturn n\nend", "    for i = n - 1, 2, -1 do\n   \
    \     if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ nil\nend", "\tlocal last = 0\n\tfor i = 2, n do\n\t\tif(n % i == 0) then\n\t\
    \t\tlast = i\n\t\tend\n\tend\n\treturn last\nend", "\tlocal f = 1\n\twhile n %\
    \ f ~= 0 do\n\t\tf = f + 1\n\tend\n\treturn f\nend", "    for i = 2, n-1 do\n\
    \        if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ n\nend", "    local last_divisor = 1\n    local stop = sqrt(n)\n    for i =\
    \ 2, stop do\n        if n % i == 0 then\n            last_divisor = i\n     \
    \   end\n    end\n    return last_divisor\nend", "  for i = n - 1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend", "\tlocal divisor\
    \ = n - 1\n\twhile divisor > 1 do\n\t\tif n % divisor == 0 then\n\t\t\treturn\
    \ divisor\n\t\tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn 1\nend", "\tlocal\
    \ largest = 1\n\tfor i = 2, math.floor(n / 2) do\n\t\tif(n % i == 0) then\n\t\t\
    \tlargest = i\n\t\tend\n\tend\n\treturn largest\nend", "  for i = n-1, 1, -1 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend", "  if n % 2 ==\
    \ 0 then\n    return largest_divisor(n / 2)\n  end\n  local divisor = 3\n  while\
    \ divisor <= math.sqrt(n) do\n    if n % divisor == 0 then\n      return largest_divisor(n\
    \ / divisor)\n    end\n    divisor = divisor + 2\n  end\n  return n\nend", " \
    \   for i = n - 1, 1, -1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend", "\tfor i = math.floor(n/2), 2, -1 do\n\t\tif n %\
    \ i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "\tlocal i =\
    \ 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\
    \ti = i + 1\n\tend\n\treturn 1\nend", "\tfor divisor = n - 1, 2, -1 do\n\t\tif\
    \ n % divisor == 0 then\n\t\t\treturn divisor\n\t\tend\n\tend\n\treturn 1\nend",
  "  for i=n-1,1,-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n \
    \ return 1\nend", "    -- The largest possible divisor of n is n/2, so this is\
    \ a good start\n    local i = math.floor(n/2)\n    while i > 1 do\n        if\
    \ n % i == 0 then\n            return i\n        end\n        i = i - 1\n    end\n\
    \    return 1\nend", "    for i = math.floor(n / 2), 1, -1 do\n        if n %\
    \ i == 0 then\n            return i\n        end\n    end\n    return 1\nend",
  "\tassert(n >= 2, \"invalid input\")\n\tlocal largest = 2\n\twhile n % largest ==\
    \ 0 do\n\t\tlargest = largest + 1\n\tend\n\treturn largest - 1\nend", "\tfor i=n-1,1,-1\
    \ do\n\t\tif n%i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend",
  "  if n < 0 then return math.huge end\n  local i = 2\n  while i < n do\n    if n\
    \ % i == 0 then return i end\n    i = i + 1\n  end\n  return 1\nend", "\tfor i\
    \ = math.floor(n/2), 2, -1 do\n\t\tif math.fmod(n, i) == 0 then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn 1\nend", "    for i = n - 1, 1, -1 do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend", "    local\
    \ m = math.floor(math.sqrt(n))\n    while m > 1 do\n        if n % m == 0 then\n\
    \            return m\n        end\n        m = m - 1\n    end\n    return m\n\
    end", "\t-- divisor can't be larger than the square root of n\n\tfor i = math.floor(math.sqrt(n)),\
    \ 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end", "\tfor i = n - 1, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\t\
    end\n\tend\n\treturn n\nend", "    return math.floor(n^0.5)\nend", "    local\
    \ largest = n\n    for i = n-1, 1, -1 do\n        if n % i == 0 then\n       \
    \     largest = i\n            break\n        end\n    end\n    return largest\n\
    end", "    -- n / 2 is the smallest number that can possibly divide n evenly\n\
    \    local stop = math.floor(n / 2)\n    for i = 2, stop do\n        if n % i\
    \ == 0 then\n            return i\n        end\n    end\n    return 0\nend", "\t\
    if n == 1 then\n\t\treturn 1\n\tend\n\tfor i = n - 1, 1, -1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend", "\tfor i = n-1, 1, -1 do\n\t\t\
    if n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\nend", "  local max_divisor\
    \ = math.floor(n^0.5)\n  local best_divisor = max_divisor\n  for divisor = max_divisor,\
    \ 2, -1 do\n    if n % divisor == 0 then\n      return divisor\n    end\n  end\n\
    \  return nil\nend", "    local sqrt_n = math.sqrt(n)\n    local i = math.floor(sqrt_n)\n\
    \    while i > 0 do\n        if n % i == 0 then\n            return i\n      \
    \  end\n        i = i - 1\n    end\n    return 0\nend", "\tfor i = 1, math.floor(n\
    \ / 2) do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 1\n\
    end", "    -- Start with n-1 and keep going down\n    for d = n-1, 2, -1 do\n\
    \        if n % d == 0 then\n            return d\n        end\n    end\n    return\
    \ 1\nend", "  local function f(divisor)\n    if n % divisor == 0 then\n      return\
    \ divisor\n    else\n      return f(divisor - 1)\n    end\n  end\n  return f(n-1)\n\
    end", "    local max = math.floor(math.sqrt(n))\n    for i = max, 2, -1 do\n \
    \       if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ 1\nend", "\tif n % 2 == 0 then\n\t\treturn n / 2\n\tend\n\tlocal max = math.floor(math.sqrt(n))\n\
    \tfor i = max, 3, -2 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    \treturn 1\nend", "  for i = n - 1, 1, -1 do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\nend", "    local divisor = n-1\n    while (n % divisor ~=\
    \ 0) do\n        divisor = divisor - 1\n    end\n    return divisor\nend", " \
    \ for i = 2, n-1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    \  return 1\nend", "\tfor i=n-1, 2, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ i\n\t\tend\n\tend\n\treturn 1\nend", '    local divisor = math.floor(n / 2)',
  "\tlocal i = math.floor(math.sqrt(n))\n\tlocal divisor = i", "    for i = math.floor(n\
    \ / 2), 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\n    return 1\nend", "    local d = 1\n    for i = 2, n - 1 do\n    \
    \    if n % i == 0 then\n            d = i\n        end\n    end\n    return d\n\
    end", "\tlocal largest_divisor = 0\n\tlocal half = math.floor(n / 2)", "\t-- For\
    \ our purposes, we'll assume that \n\t--  1 is the largest divisor of all numbers\n\
    \tlocal last_divisor = 1", "\tlocal sqrt_n = math.sqrt(n)\n\tlocal i = math.floor(sqrt_n)\n\
    \twhile i > 0 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti = i -\
    \ 1\n\tend\n\treturn n\nend", "  -- Find factors and iterate until we find a number\
    \ that divides n evenly.\n  local factors = factor(n)\n  local divisor = 1\n \
    \ for i = 1, #factors do\n    divisor = divisor * factors[i]\n    if divisor ==\
    \ n then\n      divisor = divisor / factors[i]\n    end\n  end\n  return divisor\n\
    end", "    local divisor = 1\n    while n % divisor == 0 do\n        divisor =\
    \ divisor + 1\n    end\n    return divisor - 1\nend", "\tfor i=n-1,2,-1 do\n\t\
    \tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn nil\nend", "  local\
    \ d, max = 2, math.floor(math.sqrt(n))\n  while d <= max do\n    if n % d == 0\
    \ then return n / d end\n    d = d + 1\n  end\n  return 1\nend", "    -- We iterate\
    \ through every number smaller than n,\n    -- checking if it divides evenly into\
    \ n.\n    -- If it does, then we keep it stored,\n    -- and keep checking in\
    \ case there is a larger value that divides evenly\n    -- We need to start at\
    \ 2, otherwise we will just get 1\n    local divisor = 2\n    while divisor <\
    \ n do\n        if n % divisor == 0 then\n            -- If it divides evenly,\
    \ then store it and keep going\n            local test_divisor = divisor\n   \
    \         divisor = divisor + 1\n        else\n            -- If it does not divide\
    \ evenly, then move on to the next number\n            divisor = divisor + 1\n\
    \        end\n    end\n    -- We now have the largest divisor, so return it\n\
    \    return divisor - 1\nend", "    local divisor = n\n    while divisor > 1 do\n\
    \        if n % divisor == 0 then\n            return divisor\n        end\n \
    \       divisor = divisor - 1\n    end\n    return 1\nend", "    local largest\
    \ = 1\n    for i = 2, n - 1 do\n        if n % i == 0 then\n            largest\
    \ = i\n        end\n    end\n    return largest\nend", "  local divisor = n -\
    \ 1\n  while n % divisor ~= 0 do\n    divisor = divisor - 1\n  end\n  return divisor\n\
    end", "\tlocal max = 2\n\tfor i = 2, math.floor(n/2) do\n\t\tif n % i == 0 then\n\
    \t\t\tmax = i\n\t\tend\n\tend\n\treturn max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
