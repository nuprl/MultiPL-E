language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 2, #lst, 2 do\n        sum = sum + lst[i]\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9uqfw9t.lua:15:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpx9uqfw9t.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, n in ipairs(lst) do\n    if n % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jepvejy.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5jepvejy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local res =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            res = res + lst[i]\n        end\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx_7wcdx.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsx_7wcdx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- Write your\
    \ code here\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyny7rwq.lua:11:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpoyny7rwq.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nassert(add({6,4,1,4,6,4,6,4,6,4,6,4,1,2,6,4,1,2,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,6,4,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9zc215_q.lua:15: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            result = result + v\n        end\n    end\n    return result\nend\n\
    test(\"test_example\", function()\n    -- lst: [1, 1, 1, 1, 1]\n    -- Output:\
    \ 0\n    local lst = {1, 1, 1, 1, 1}\n    assert_equal(add(lst), 0)\n    -- lst:\
    \ [10, 20, 30, 40, 50]\n    -- Output: 150\n    lst = {10, 20, 30, 40, 50}\n \
    \   assert_equal(add(lst), 150)\n    -- lst: [10, -10, 10, -10, 10]\n    -- Output:\
    \ -10\n    lst = {10, -10, 10, -10, 10}\n    assert_equal(add(lst), -10)\nend)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxwt6l5h3.lua:12: attempt to call a nil value (global 'test')\n\
    stack traceback:\n\t/tmp/tmpxwt6l5h3.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, x in ipairs(lst) do\n    if i % 2 == 1 and x % 2 == 0 then\n      sum\
    \ = sum + x\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zqyjv1x.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7zqyjv1x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal s = 0\n\
    \tfor i,n in ipairs(lst) do\n\t\tif i%2 == 1 and n%2 == 0 then\n\t\t\ts = s +\
    \ n\n\t\tend\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1tjadt_8.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1tjadt_8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- The same function\
    \ as in part (1) can be re-used here.\n  -- Since it's a local function, you need\
    \ to define it before the first call.\n  return add(even_at_odd(lst))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2z7lk5bm.lua:6:\
    \ attempt to call a nil value (global 'even_at_odd')\nstack traceback:\n\t/tmp/tmp2z7lk5bm.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp2z7lk5bm.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local ans =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            ans = ans + v\n        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8sn7izw.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpm8sn7izw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppmxzqnu_.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmppmxzqnu_.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      res\
    \ = res + v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9zul5r8.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg9zul5r8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp98j4b6ss.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local n = #lst\n\
    \    local sum = 0\n    for i = 1, n do\n        if lst[i] % 2 == 0 and i % 2\
    \ ~= 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55povefw.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp55povefw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nvgm631.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6nvgm631.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local n = 0\n\
    \  for i,v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      n =\
    \ n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8bbu83z.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg8bbu83z.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      res =\
    \ res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2eva9s_a.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp2eva9s_a.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, n in ipairs(lst) do\n    if i % 2 == 1 and n % 2 == 0 then\n      sum\
    \ = sum + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d7u0d6v.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3d7u0d6v.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp98j4b6ss.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    sum = 0\n \
    \   n = 1\n    for i, v in ipairs(lst) do\n        if n % 2 == 1 and v % 2 ==\
    \ 0 then\n            sum = sum + v\n        end\n        n = n + 1\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nw3biij.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3nw3biij.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            result = result + v\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokv9prv7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpokv9prv7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- your code\
    \ here\n  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5q098ba.lua:11:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpu5q098ba.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i = 2, #lst, 2 do\n    res = res + lst[i]\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyxaduaj.lua:15:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpgyxaduaj.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for k, v in ipairs(lst) do\n    if k % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_it98t2u.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_it98t2u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36op0pg.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_36op0pg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bf4fgwb.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp5bf4fgwb.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nassert(add({0,\
    \ 1, 2, 3, 4, 5}) == 6)\nassert(add({1, 3, 5}) == 0)\nassert(add({10, 1, 8, 3,\
    \ 7, 5}) == 8)\nassert(add({12, 4, 9, 5, 6, 7}) == 4)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzth89e1f.lua:14: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpzth89e1f.lua:14: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i, num in ipairs(lst) do\n\t\tif (i % 2 ~= 0) and (num % 2 == 0) then\n\t\
    \t\tsum = sum + num\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84n4q4vd.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp84n4q4vd.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nassert( add({1,2,3,4,5,6}) ==\
    \ 2+4+6 )\nassert( add({}) == 0 )\nassert( add({2,2,2,2,2}) == 2+2+2+2 )\nassert(\
    \ add({1,2,1,2,1,2}) == 2+2 )\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp2mhbgk3q.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp2mhbgk3q.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for k, v in ipairs(lst) do\n        if (k % 2 == 1) and (v % 2 == 0)\
    \ then\n            sum = sum + v\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcad04hsr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpcad04hsr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  --[[\n  -- Explanation:\n\
    \  --   [1,3,4,5,6,7,8,9]\n  --   [nil,3,nil,5,nil,7,nil,9]\n  --   [nil,3,nil,5,nil,7,nil,9]\n\
    \  --   [nil,3,4,5,6,7,8,9]\n  --]]\n  -- Exercise:\n  --   Write the implementation.\n\
    \  --   For help use this reference:\n  --   https://www.lua.org/pil/1.html\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1es5sqma.lua:21:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp1es5sqma.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local s = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      s =\
    \ s + v\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5rysi6b.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpo5rysi6b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your code\
    \ here\n    local nlist={}\n    for i,v in ipairs(lst) do\n      if (i%2==1) then\n\
    \        if (v%2==0) then\n          table.insert(nlist,v)\n        end\n    \
    \  end\n    end\n    return nlist\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz8_xcr2.lua:19:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmprz8_xcr2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb838oskj.lua:9:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpb838oskj.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- add the even\
    \ elements of lst that are at odd indices\n  -- (1-based)\n  if not lst then return\
    \ 0 end\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v\
    \ % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfwvks94.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpkfwvks94.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpym3cv11d.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpym3cv11d.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\t-- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jy37ywu.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp0jy37ywu.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0yyefp2.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpt0yyefp2.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    return reduce(lst,\
    \ function(x, y) if y % 2 == 0 then return x + y end end, 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpecf483eb.lua:4:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpecf483eb.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpecf483eb.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0pjp_k3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi0pjp_k3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local n = 0\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n    \
    \        n = n + lst[i]\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksem7xvl.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpksem7xvl.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor k, v in ipairs(lst) do\n\t\tif k % 2 == 1 and v % 2 == 0 then\n\t\t\tsum\
    \ = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm783sd0.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplm783sd0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18z9nrgr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp18z9nrgr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0yyefp2.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpt0yyefp2.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if (i % 2 == 1) and (v % 2 == 0) then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeozlhp_m.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpeozlhp_m.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpym3cv11d.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpym3cv11d.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjq26ys_.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpqjq26ys_.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvz0ljf0v.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tlocal odd = true\n\tfor k, v in ipairs(lst) do\n\t\tif odd then\n\t\t\tif v\
    \ % 2 == 0 then\n\t\t\t\tsum = sum + v\n\t\t\tend\n\t\tend\n\t\todd = not odd\n\
    \tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavfkm5tv.lua:20:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpavfkm5tv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            result = result + lst[i]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzy_kuax.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphzy_kuax.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i,v in ipairs(lst) do\n\t\tif v % 2 == 0 and i % 2 ~= 0 then\n\t\t\tsum\
    \ = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscfbjjpt.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpscfbjjpt.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, n in ipairs(lst) do\n    if n % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + n\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jepvejy.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp5jepvejy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    result = 0\n\
    \    for i,v in ipairs(lst) do\n        if (i % 2 ~= 0) and (v % 2 == 0) then\n\
    \            result = result + v\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj8dxkpz.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpaj8dxkpz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4ovw0ss.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpl4ovw0ss.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local added\
    \ = 0\n    for index, value in ipairs(lst) do\n        if index % 2 ~= 0 and value\
    \ % 2 == 0 then\n            added = added + value\n        end\n    end\n   \
    \ return added\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgziagp00.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgziagp00.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local out =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            out = out + lst[i]\n        end\n    end\n    return out\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60ey8i3t.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp60ey8i3t.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, n in ipairs(lst) do\n        if i % 2 == 1 and n % 2 == 0 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1rg12n7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi1rg12n7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return lst:foldLeft(0,\
    \ function(acc, e)\n    if (#lst % 2 ~= 0 and #lst % 2 ~= 1) then return e + acc\
    \ else return acc end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sozw49w.lua:4:\
    \ attempt to call a nil value (method 'foldLeft')\nstack traceback:\n\t/tmp/tmp6sozw49w.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp6sozw49w.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal c = 0\n\
    \tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 1 and v % 2 == 0 then\n\t\t\tc =\
    \ c + v\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cutu5ya.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp9cutu5ya.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    if #lst ==\
    \ 0 then\n        return 0\n    end\n    if #lst == 1 then\n        return lst[1]\n\
    \    end\n    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2 ==\
    \ 1 and v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n   \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmb8uxg6.lua:22:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdmb8uxg6.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4ovw0ss.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpl4ovw0ss.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 2, #lst, 2 do\n    sum = sum + lst[i]\n  end\n  return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdoxz9ly.lua:15:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpkdoxz9ly.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxv7tytcl.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for k, v in ipairs(lst) do\n    if k % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_it98t2u.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_it98t2u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal function\
    \ iter(lst, counter, sum)\n\t\tif counter == #lst then return sum end\n\t\tif\
    \ counter % 2 == 1 and lst[counter] % 2 == 0 then\n\t\t\treturn iter(lst, counter\
    \ + 1, sum + lst[counter])\n\t\telse\n\t\t\treturn iter(lst, counter + 1, sum)\n\
    \t\tend\n\tend\n\treturn iter(lst, 1, 0)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8dva7me.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpr8dva7me.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18z9nrgr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp18z9nrgr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if (i % 2 ~= 0) and (v % 2 == 0) then\n   \
    \   sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfsz3my4.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpbfsz3my4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n    \
    \  result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jxzyety.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1jxzyety.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for k, v in ipairs(lst) do\n    if k % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_it98t2u.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_it98t2u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 1) and (v % 2 == 0)\
    \ then\n            sum = sum + v\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy48z6lnf.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy48z6lnf.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    return reduce(lst,\
    \ 0, function(a, b) return a + b end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8bic6_o.lua:4:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpl8bic6_o.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpl8bic6_o.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i, n in ipairs(lst) do\n\t\tif i % 2 == 1 and n % 2 == 0 then\n\t\t\tsum\
    \ = sum + n\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2bysvvs.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpd2bysvvs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lbe7ks_.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1lbe7ks_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n \
    \     result = result + v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck5xg7ew.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpck5xg7ew.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local l = #lst\n\
    \  local sum = 0\n  for i=1,l do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gti7wof.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp4gti7wof.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nprint(add({0,\
    \ 4, 2, 4, 7, 1, 8, 3, 7, 8, 9, 4, 2, 0, 7, 3, 1, 5, 7, 8, 2, 6, 1, 0, 2, 4, 7,\
    \ 8, 1, 6, 8, 1, 2, 8, 3, 0, 4, 5, 7, 4, 6, 1, 8, 3, 2, 6, 2, 8, 2, 6, 2, 0, 1,\
    \ 4, 7, 1, 6, 5, 7, 8, 2, 1, 7, 6, 2, 5, 7, 1, 2, 6, 7, 3, 2, 6, 1, 0, 8, 5, 7,\
    \ 8, 2, 5, 7, 0, 4, 5, 7, 8, 3, 5, 7, 4, 6, 1, 2, 6, 4, 5, 7, 1, 2, 6, 7, 1, 2,\
    \ 4, 7, 1, 6, 5, 7, 8, 1, 4, 7, 3, 2, 6, 1, 0, 8, 5, 7, 0, 4, 5, 7, 1, 2, 6, 7,\
    \ 8, 1, 4, 7, 1, 6, 5, 7, 0, 4, 5, 7, 4, 6, 1, 8, 3, 5, 7, 4, 6, 1, 2, 4, 7, 8,\
    \ 1, 4, 7, 3, 2, 6, 1, 0, 8, 5, 7, 8, 1, 6, 5, 7, 8, 1, 4, 5, 7, 0, 4, 5, 7, 8,\
    \ 3, 5, 7, 4, 6, 1, 2, 6, 1, 0, 8, 5, 7, 0, 4, 5, 7, 8, 1, 4, 7, 1, 6, 5, 7, 0,\
    \ 4, 5, 7, 4, 6, 1, 8, 3, 5, 7, 4, 6, 1, 2, 4, 7, 8, 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpygjv2pn_.lua:13: ''}'' expected (to close ''{'' at line 12)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local function\
    \ is_even(x)\n        return (x % 2) == 0\n    end\n    local function is_odd(x)\n\
    \        return (x % 2) == 1\n    end\n    local function is_index_odd(index)\n\
    \        return is_odd(index)\n    end\n    local function add_index(acc, x, index)\n\
    \        if is_index_odd(index) and is_even(x) then\n            return acc +\
    \ x\n        else\n            return acc\n        end\n    end\n    return List.foldl(add_index,\
    \ 0, lst)\nend\nassert(add({3, 7, 1, 5, 8, 9, 2, 8}) == 16)\nassert(add({8, 9,\
    \ 2, 8}) == 0)\nassert(add({8, 9, 2, 8, 1}) == 2)\nassert(add({8, 9, 2, 8, 1,\
    \ 5}) == 2)\nassert(add({8, 9, 2, 8, 1, 5, 8}) == 8)\nassert(add({8, 9, 2, 8,\
    \ 1, 5, 8, 9}) == 14)\nassert(add({8, 9, 2, 8, 1, 5, 8, 9, 2}) == 14)\nassert(add({8,\
    \ 9, 2, 8, 1, 5, 8, 9, 2, 5}) == 14)\nassert(add({8, 9, 2, 8, 1, 5, 8, 9, 2, 5,\
    \ 9}) == 18)\nassert(add({8, 9, 2, 8, 1, 5, 8, 9, 2, 5, 9, 9}) == 18)\nassert(add({8,\
    \ 9, 2, 8, 1, 5, 8, 9, 2, 5, 9, 9, 8}) == 22)\nassert(add({8, 9, 2, 8, 1, 5, 8,\
    \ 9, 2, 5, 9, 9, 8, 2}) == 22)\nassert(add({8, 9, 2, 8, 1, 5, 8, 9, 2, 5, 9, 9,\
    \ 8, 2, 1}) == 23)\nassert(add({8, 9, 2, 8, 1, 5, 8, 9, 2,\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcmu4vds9.lua:38: ''}'' expected (to close ''{'' at line 35)
    near ''function''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal _, even\
    \ = lst:where(function(n) return n % 2 == 0 end):orderby(function(n) return n\
    \ end):zip()\n\tlocal __, odd = lst:where(function(n) return n % 2 ~= 0 end):orderby(function(n)\
    \ return n end):zip()\n\treturn even + odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkkc8_0v.lua:4:\
    \ attempt to call a nil value (method 'where')\nstack traceback:\n\t/tmp/tmpfkkc8_0v.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpfkkc8_0v.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local acc =\
    \ 0\n   for i, v in ipairs(lst) do\n      if i % 2 == 1 and v % 2 == 0 then\n\
    \         acc = acc + v\n      end\n   end\n   return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6jfcu18.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpz6jfcu18.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, n in ipairs(lst) do\n        if i % 2 == 1 and n % 2 == 0 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1rg12n7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi1rg12n7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i, item in ipairs(lst) do\n    if (i % 2 == 1) and (item % 2 == 0)\
    \ then\n      result = result + item\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76on5iev.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp76on5iev.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wijqe10.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp_wijqe10.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nassert(add({0,\
    \ 1, 2, 3, 4, 5}) == 6)\nassert(add({1, 1, 2, 3, 5, 8, 13, 21}) == 6)\nassert(add({2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10}) == 12)\nassert(add({0, -1, -2, -3, -4, -5}) == -6)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpsd5shhbd.lua:13: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpsd5shhbd.lua:13: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1ogz8y5.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpf1ogz8y5.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxzhq67d.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpnxzhq67d.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      res =\
    \ res + lst[i]\n    end\n  end\n  return res\nend\nprint(add({2, 8, 3, 5, 5, 9,\
    \ 8, 1, 5, 9, 8, 10}))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "18\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetkgmucx.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpetkgmucx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local count\
    \ = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            count = count + v\n        end\n    end\n    return count\nend\n\
    print(add({1, 2, 3, 4, 5, 6})) --> 4\nprint(add({1, 1, 1, 1, 1, 1})) --> 0\nprint(add({10,\
    \ 1, 5, 10, 1, 4})) --> 24\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n0\n10\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiirny_s0.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpiirny_s0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    return foldr(lst,\
    \ 0, function(acc, elem)\n        if elem % 2 == 0 and #lst % 2 == 1 then\n  \
    \          return acc + elem\n        else\n            return acc\n        end\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj63gqdwm.lua:4:\
    \ attempt to call a nil value (global 'foldr')\nstack traceback:\n\t/tmp/tmpj63gqdwm.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpj63gqdwm.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i = 1, #lst do\n\t\tif i % 2 == 1 and lst[i] % 2 == 0 then\n\t\t\tsum =\
    \ sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsukje2p.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzsukje2p.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i, val in ipairs(lst) do\n    if (val % 2 == 0) and (i % 2 ~= 0)\
    \ then\n      result = result + val\n    end\n  end\n  return result\nend\nassert(add({1,\
    \ 2, 3, 4, 5, 6}) == 9)\nassert(add({-5, -4, -3, -2, -1, 1, 2, 3, 4, 5}) == -5)\n\
    assert(add({}) == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpfovw41_0.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpfovw41_0.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nassert(add({1,\
    \ 2, 3, 4, 5, 6}) == 12)\nassert(add({-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5}) ==\
    \ 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpirriosqn.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpirriosqn.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp98j4b6ss.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i = 1, #lst do\n    if (i % 2 ~= 0) and (lst[i] % 2 == 0) then\n      res\
    \ = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwn74jtj7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwn74jtj7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n    \
    \  result = result + lst[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd01p9x4.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprd01p9x4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  if #lst < 2 then\
    \ return lst[1] end\n  local sum = 0\n  for i = 1, #lst, 2 do\n    sum = sum +\
    \ lst[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qu3brz8.lua:15:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp7qu3brz8.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local res =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            res = res + lst[i]\n        end\n    end\n    return res\nend\nprint(add({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}))\nprint(add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20}))\nprint(add({1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50}))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf5z4mqa.lua:19:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsf5z4mqa.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for index, item in ipairs(lst) do\n        if index % 2 == 1 and item\
    \ % 2 == 0 then\n            sum = sum + item\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlvwpsau.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzlvwpsau.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal ret = 0\n\
    \tfor i,v in ipairs(lst) do\n\t\tif (i % 2 == 1) and (v % 2 == 0) then\n\t\t\t\
    ret = ret + v\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj1w863s.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpgj1w863s.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal l = #lst\n\
    \tlocal sum = 0\n\tlocal b = 0\n\tfor i = 1, l do\n\t\tif lst[i] % 2 == 0 and\
    \ i % 2 ~= 0 then\n\t\t\tsum = sum + lst[i]\n\t\t\tb = 1\n\t\tend\n\tend\n\tif\
    \ b == 0 then\n\t\treturn 0\n\telse\n\t\treturn sum\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhcnez_e.lua:23:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpzhcnez_e.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nvgm631.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6nvgm631.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local total\
    \ = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            total = total + v\n        end\n    end\n    return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eja1jzd.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3eja1jzd.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local i = 1\n\
    \  local sum = 0\n  while (i <= #lst) do\n    if (i % 2 == 1) then\n      sum\
    \ = sum + lst[i]\n    end\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0ygzehl.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy0ygzehl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n \
    \     result = result + v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsht7uk5r.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsht7uk5r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your solution\
    \ here\n    local result = 0\n    for i = 1, #lst do\n        if i % 2 ~= 0 and\
    \ lst[i] % 2 == 0 then\n            result = result + lst[i]\n        end\n  \
    \  end\n    return result\nend\nassert(add({1, 2, 3, 4, 5, 6}) == 8)\nassert(add({2,\
    \ 3, 4, 5, 6}) == 8)\nassert(add({1, 3, 5}) == 0)\nassert(add({10, 13, 16, 19,\
    \ 1, 30}) == 19)\nprint(\"[OK] add\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpn99881cx.lua:13: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpn99881cx.lua:13: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local res =\
    \ {}\n   local i = 0\n   for k,v in ipairs(lst) do\n      if k % 2 == 1 and v\
    \ % 2 == 0 then\n         res[i] = v\n         i = i + 1\n      end\n   end\n\
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cz221j6.lua:18:\
    \ expected: 88, actual: {0=4}\nstack traceback:\n\t/tmp/tmp3cz221j6.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi9tb9rp.lua:10:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmpmi9tb9rp.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nvgm631.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6nvgm631.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local sum =\
    \ 0\n   for i = 1, #lst do\n      if lst[i] % 2 == 0 and i % 2 ~= 0 then\n   \
    \      sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b446tqr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6b446tqr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return (lst +\
    \ {.odd}*{.even})[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgnwjvnmp.lua:4: unexpected symbol near ''.''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local r = 0\n\
    \    for k, v in ipairs(lst) do\n        if v % 2 == 0 and k % 2 ~= 0 then\n \
    \           r = r + v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4rq88rb.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg4rq88rb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- TODO: Implement\
    \ your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhp5b_nx.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpbhp5b_nx.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36op0pg.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_36op0pg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local i, e, sum\
    \ = 1, 0, 0\n  for i, e in ipairs(lst) do\n    if (i % 2 == 1) and (e % 2 == 0)\
    \ then\n      sum = sum + e\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5gpu482.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg5gpu482.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local count =\
    \ 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n   \
    \   count = count + v\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp800gycdn.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp800gycdn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if (i % 2 ~= 0) and (v % 2 == 0) then\n    \
    \  sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg7baxk2.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphg7baxk2.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local result\
    \ = 0\n   local index = 1\n   while index <= #lst do\n      if lst[index] % 2\
    \ == 0 and index % 2 ~= 0 then\n         result = result + lst[index]\n      end\n\
    \      index = index + 1\n   end\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo37e76n.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdo37e76n.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4ovw0ss.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpl4ovw0ss.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if (i % 2 ~= 0) and (v % 2 == 0)\
    \ then\n            sum = sum + v\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefguebca.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpefguebca.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            result = result + lst[i]\n        end\n    end\n    return result\n\
    end\nprint(add({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })) --> 30\nprint(add({ 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 })) --> 110\nprint(add({\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30 })) --> 210\nprint(add({ 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 })) --> 300\nprint(add({\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50 })) --> 390\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4j0y2zw.lua:21:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmph4j0y2zw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- Use foldl\
    \ to sum even numbers in odd places\n  local function isEven(val, state)\n   \
    \ return val % 2 == 0 and val or 0\n  end\n  return foldl(isEven, 0, lst)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpevv1801n.lua:8:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpevv1801n.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpevv1801n.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7ggs8j4.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi7ggs8j4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local res =\
    \ 0\n    for i, v in ipairs(lst) do\n        if (i % 2 ~= 0) and (v % 2 == 0)\
    \ then\n            res = res + v\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6c7l_eh.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpu6c7l_eh.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your code\
    \ here\n    local accumulator = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpon9lfody.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if i % 2 == 1 and lst[i] % 2 == 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nprint(add({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10}))\nprint(add({5, 1, 4, 2, 7, 6, 3, 8, 9, 10}))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n4\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7frazrn.lua:18:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpl7frazrn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nassert(add({1,\
    \ 2, 3, 4, 5, 6}) == 9)\nassert(add({2, 3, 4, 5, 6}) == 8)\nassert(add({2, 4,\
    \ 6}) == 12)\nassert(add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 12)\nassert(add({1,\
    \ 4, 2, 7, 3, 7, 3, 3, 6, 7}) == 10)\nassert(add({4, 4, 4, 7, 2, 4, 4, 6, 2, 4})\
    \ == 18)\nassert(add({1, 4, 2, 7, 3, 7, 3, 3, 6, 7, 2, 4, 4, 6, 2, 4}) == 22)\n\
    print('OK')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpfvce7zq9.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpfvce7zq9.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb838oskj.lua:9:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpb838oskj.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, n in ipairs(lst) do\n        if i % 2 == 1 and n % 2 == 0 then\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1rg12n7.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi1rg12n7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local acc = 0\n\
    \  for k, v in ipairs(lst) do\n    if (k % 2 == 1) and (v % 2 == 0) then\n   \
    \   acc = acc + v\n    end\n  end\n  return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9pfraat.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpr9pfraat.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local res =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            res = res + v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr93ato6d.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpr93ato6d.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal result\
    \ = 0\n\tfor i, n in ipairs(lst) do\n\t\tif i % 2 == 1 and n % 2 == 0 then\n\t\
    \t\tresult = result + n\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs89vyz4.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpxs89vyz4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal total =\
    \ 0\n\tfor i = 1, #lst do\n\t\tif i % 2 == 1 and lst[i] % 2 == 0 then\n\t\t\t\
    total = total + lst[i]\n\t\tend\n\tend\n\treturn total\nend\nassertEquals(add({1,\
    \ 2, 3, 4, 5, 6}), 12)\nassertEquals(add({}), 0)\nassertEquals(add({1, 3, 5}),\
    \ 0)\nassertEquals(add({3, 2, 8, 11, 9, 4}), 8)\nassertEquals(add({-3, -2, -8,\
    \ -11, -9, -4}), -8)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpl54ahkko.lua:12: attempt to call a nil value (global 'assertEquals')\n\
    stack traceback:\n\t/tmp/tmpl54ahkko.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xeomjnl.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp_xeomjnl.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb838oskj.lua:9:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpb838oskj.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for k, v in ipairs(lst) do\n    if v % 2 == 0 and k % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_gwnljq.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpi_gwnljq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- #code\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi8flqho.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpvi8flqho.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local s = 0\n\
    \  for i, elem in ipairs(lst) do\n    if (i % 2 == 1) and (elem % 2 == 0) then\n\
    \      s = s + elem\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj3uwnn3.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmplj3uwnn3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wijqe10.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp_wijqe10.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local acc, result\
    \ = 0, {}\n  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n\
    \      acc = acc + v\n    end\n  end\n  return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdciu8gdy.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdciu8gdy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal acc = 0\n\
    \tfor i, v in ipairs(lst) do\n\t\tif (i % 2 == 1) and (v % 2 == 0) then\n\t\t\t\
    acc = acc + v\n\t\tend\n\tend\n\treturn acc\nend\nassert(add({1,2,3,4,5,6,7,8,9,10})\
    \ == 20)\nassert(add({1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}) ==\
    \ 40)\nassert(add({11,22,33,44,55,66,77,88,99,110}) == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmppc4jkrvu.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmppc4jkrvu.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local result\
    \ = 0\n   local cnt = 1\n   for k, v in ipairs(lst) do\n      if k % 2 == 1 and\
    \ v % 2 == 0 then\n         result = result + v\n      end\n   end\n   return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjcz99ey.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprjcz99ey.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i, v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      res\
    \ = res + v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb347cp0x.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpb347cp0x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    if not lst\
    \ or #lst == 0 then return 0 end\n    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if i % 2 == 1 and v % 2 == 0 then\n            sum = sum + v\n \
    \       end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl3occyu.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpkl3occyu.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i = 1, #lst do\n\t\tif (lst[i] % 2 == 0) and (i % 2 ~= 0) then\n\t\t\tsum\
    \ = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjzmuoni.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpdjzmuoni.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nassert(add({1, 2, 3, 4, 5})\
    \ == 2)\nassert(add({12, 4, 12, 0, 10}) == 16)\nassert(add({1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10}) == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp40xj_3y8.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp40xj_3y8.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal ans = 0\n\
    \tfor i,v in ipairs(lst) do\n\t\tif i%2 ~= 0 and v%2 == 0 then\n\t\t\tans = ans\
    \ + v\n\t\tend\n\tend\n\treturn ans\nend\nassert(add{2,4,6,7,9,10,12} == 10)\n\
    assert(add{1,2,3,4,5,6,7,8,9,10} == 6)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp6l3b9sn1.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp6l3b9sn1.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i, num in ipairs(lst) do\n    if (i % 2 == 1) and (num % 2 == 0) then\n\
    \      res = res + num\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop2zdnhz.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpop2zdnhz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local result\
    \ = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 1) and (v % 2 == 0) then\n\
    \      result = result + v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbwvxh9w.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpjbwvxh9w.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local sum =\
    \ 0\n   for i,v in ipairs(lst) do\n      if i % 2 == 1 and v % 2 == 0 then\n \
    \        sum = sum + v\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprchtilcq.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprchtilcq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18z9nrgr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp18z9nrgr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local s = 0\n\
    \    for i,v in ipairs(lst) do\n        if (i % 2 == 1) and (v % 2 == 0) then\n\
    \            s = s + v\n        end\n    end\n    return s\nend\nassert(add({0,\
    \ 7, 2, 5, 8}) == 0)\nassert(add({1, 2, 3, 4, 5}) == 2)\nassert(add({0, 0, 1,\
    \ 0, 0}) == 0)\nassert(add({100, 100, 100, 100, 100}) == 200)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp7yj_n4q4.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp7yj_n4q4.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local adder\
    \ = function(agg, n)\n        if n % 2 == 0 then\n            return agg + n\n\
    \        else\n            return agg\n        end\n    end\n    return List.foldl(adder,\
    \ 0, lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ii7cava.lua:11:\
    \ attempt to index a nil value (global 'List')\nstack traceback:\n\t/tmp/tmp7ii7cava.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7ii7cava.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if ((i % 2 == 1) and (v % 2 == 0)) then\n \
    \     sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznlvgsv5.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpznlvgsv5.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local s = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      s = s\
    \ + lst[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvjfb8gg.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprvjfb8gg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i,v in ipairs(lst) do\n\t\tif i % 2 == 1 and v % 2 == 0 then\n\t\t\tsum\
    \ = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_bum0ir.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg_bum0ir.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal function\
    \ add_helper(lst, acc, i)\n\t\tif i > #lst then return acc end\n\t\tif i % 2 ==\
    \ 1 and lst[i] % 2 == 0 then\n\t\t\tacc = acc + lst[i]\n\t\tend\n\t\treturn add_helper(lst,\
    \ acc, i + 1)\n\tend\n\treturn add_helper(lst, 0, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtntec91.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpmtntec91.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] % 2 == 0 and i % 2 ~= 0 then\n      sum =\
    \ sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lbe7ks_.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp1lbe7ks_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprimxe9nj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprimxe9nj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local res = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      res\
    \ = res + v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9zul5r8.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpg9zul5r8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if (lst[i] % 2 == 0) and (i % 2 ~= 0) then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg62ry1x.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprg62ry1x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy134ql4b.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy134ql4b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- your code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wijqe10.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmp_wijqe10.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local s = 0\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 and lst[i] % 2 == 0 then\n      s = s\
    \ + lst[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvjfb8gg.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmprvjfb8gg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if v % 2 == 0 and i % 2 ~= 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudwizaqz.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpudwizaqz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local r = 0\n\
    \    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n  \
    \          r = r + v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wh7uatb.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp8wh7uatb.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local count =\
    \ 0\n  for i,num in ipairs(lst) do\n    if num % 2 == 0 and i % 2 ~= 0 then\n\
    \      count = count + num\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma4wh4al.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpma4wh4al.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return foldr(accum,\
    \ 0, filter(even, filter(odd, count(lst))))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04drokzs.lua:4:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmp04drokzs.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp04drokzs.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor i, v in ipairs(lst) do\n\t\tif i % 2 == 1 and v % 2 == 0 then\n\t\t\tsum\
    \ = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyyp6gff.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpnyyp6gff.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy134ql4b.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy134ql4b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i, v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18z9nrgr.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp18z9nrgr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\tlocal sum = 0\n\
    \tfor k, v in ipairs(lst) do\n\t\tif (k % 2 ~= 0) and (v % 2 == 0) then\n\t\t\t\
    sum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_l1u1k4.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpr_l1u1k4.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36op0pg.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp_36op0pg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local ret =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            ret = ret + v\n        end\n    end\n    return ret\nend\nassert(add({1,2,3,4,5,6})\
    \ == 9)\nassert(add({1,1,1,1,1,1}) == 0)\nassert(add({0,0,0,0,0,0}) == 0)\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzac1hwkz.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpzac1hwkz.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local f = even\
    \ and (odd or 1)\n    local res = 0\n    for i, v in ipairs(lst) do\n        if\
    \ not even and f(i) then\n            res = res + v\n        end\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2u1387e.lua:7:\
    \ attempt to call a nil value (local 'f')\nstack traceback:\n\t/tmp/tmpb2u1387e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpb2u1387e.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return #lst ==\
    \ 0 and 0 or (lst[1] % 2 == 0 and lst[1] or 0) + add(lst(2, #lst))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3y_5zh3d.lua:4:\
    \ attempt to call a table value (local 'lst')\nstack traceback:\n\t/tmp/tmp3y_5zh3d.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp3y_5zh3d.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for index, val in ipairs(lst) do\n        if index % 2 == 1 and val %\
    \ 2 == 0 then\n            sum = sum + val\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd900nxt.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmptd900nxt.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- error(\"Not\
    \ implemented\")\n  local result = 0\n  for i, v in ipairs(lst) do\n    if (i\
    \ % 2 == 1) and (v % 2 == 0) then\n      result = result + v\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_2ivgbv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpq_2ivgbv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- add even\
    \ integers at odd indices\n    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if v % 2 == 0 and i % 2 ~= 0 then\n            sum = sum + v\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx1nfgxv.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmphx1nfgxv.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for k, v in ipairs(lst) do\n    if k % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nprint(add({1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10})) -- 30\nprint(add({2, 4, 6, 8, 10, 12, 14, 16, 18, 20})) -- 110\n\
    print(add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20})) -- 110\nprint(add({2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,\
    \ 30, 32, 34, 36, 38, 40})) -- 450\nprint(add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40})) -- 450\nprint(add({})) -- 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "0\n50\n0\n200\n0\n0\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp3fy15tyy.lua:22: expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp3fy15tyy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local total =\
    \ 0\n  for index, item in ipairs(lst) do\n    if index % 2 == 1 and item % 2 ==\
    \ 0 then\n      total = total + item\n    end\n  end\n  return total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8oz9ny8.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpo8oz9ny8.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local ret =\
    \ 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            ret = ret + v\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmwe9n6z.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpwmwe9n6z.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local sum = 0\n\
    \  for i,v in ipairs(lst) do\n    if i % 2 == 1 and v % 2 == 0 then\n      sum\
    \ = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1ogz8y5.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpf1ogz8y5.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local sum =\
    \ 0\n   for i, n in ipairs(lst) do\n      if i % 2 == 1 and n % 2 == 0 then\n\
    \         sum = sum + n\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap1pab1x.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpap1pab1x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 1 and v % 2 == 0 then\n\
    \            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6nvgm631.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6nvgm631.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    -- local result\
    \ = 0\n    -- for index, number in ipairs(lst) do\n    --     if (index % 2 ~=\
    \ 0) and (number % 2 == 0) then\n    --         result = result + number\n   \
    \ --     end\n    -- end\n    -- return result\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbl02vnkn.lua:21: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local ans = 0\n\
    \  for i,v in ipairs(lst) do\n    if (i % 2 ~= 0) and (v % 2 == 0) then\n    \
    \  ans = ans + v\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28798bwj.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp28798bwj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n   local sum =\
    \ 0\n   for i = 1, #lst do\n      if i % 2 == 1 and lst[i] % 2 == 0 then\n   \
    \      sum = sum + lst[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsaeylzz9.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpsaeylzz9.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  local e = {}\n\
    \  for k, v in ipairs(lst) do\n    if k % 2 == 1 and v % 2 == 0 then\n      table.insert(e,\
    \ v)\n    end\n  end\n  return e\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rc651ps.lua:16:\
    \ expected: 88, actual: {4}\nstack traceback:\n\t/tmp/tmp3rc651ps.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local result\
    \ = 0\n    for index, value in ipairs(lst) do\n        if index % 2 == 1 and value\
    \ % 2 == 0 then\n            result = result + value\n        end\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xw10k9w.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp6xw10k9w.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  assert(lst ~=\
    \ nil, \"No list given\")\n  local sum = 0\n  for i = 1, #lst do\n    if (i %\
    \ 2 ~= 0) and (lst[i] % 2 == 0) then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb18bbj1i.lua:17:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpb18bbj1i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 1) and (v % 2 == 0)\
    \ then\n            sum = sum + v\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy48z6lnf.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy48z6lnf.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n    local sum =\
    \ 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 0 and i % 2 ~= 0 then\n\
    \            sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n \
    \   lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy134ql4b.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmpy134ql4b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  --# assert_equal(\
    \ 7,   add({3, 5, 2, 4, 2, 5}))\n  --# assert_equal( 6,   add({3, 7, 2, 4, 5,\
    \ 7}))\n  --# assert_equal( 3,   add({3, 1, 3, 1, 3, 1}))\n  --# assert_equal(\
    \ 18,  add({1, 1, 1, 1, 1, 1}))\n  --# assert_equal( 55,  add({2, 1, 4, 3, 6,\
    \ 5}))\n  --# assert_equal( 32,  add({2, 4, 6, 8, 10, 12}))\n  --# assert_equal(\
    \ 12,  add({2, 1, 3, 3, 2, 3}))\n  --# assert_equal( 15,  add({1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}))\n  --# assert_equal( 8,   add({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}))\n  --# assert_equal( 16,  add({1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}))\n  --# assert_equal( 24,  add({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}))\n  --# assert_equal(\
    \ 40,  add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}))\n\
    \  --# assert_equal( 256, add({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20}))\n  return 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ldw54y6.lua:23:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmp9ldw54y6.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0yyefp2.lua:10:\
    \ expected: 88, actual: nil\nstack traceback:\n\t/tmp/tmpt0yyefp2.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n  -- hint: use\
    \ list comprehension and '.zipWithIndex'.\n  -- e.g. [1,2,3]:zipWithIndex() -->\
    \ {1,0}, {2,1}, {3,2}\n  -- Hint: use list comprehension and '.zipWithIndex'.\n\
    \  -- e.g. [1,2,3]:zipWithIndex() --> {1,0}, {2,1}, {3,2}\n  local res = {}\n\
    \  for _,item in ipairs(lst) do\n    if (math.mod(item,2)==0) then\n      res[#res+1]\
    \ = item\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpso7jx7c8.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpso7jx7c8.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpso7jx7c8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\nlocal function add(lst)\n\treturn 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo2kj0qc.lua:10:\
    \ expected: 88, actual: 0\nstack traceback:\n\t/tmp/tmpfo2kj0qc.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
