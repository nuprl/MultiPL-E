name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a tuple containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ tuple if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  local function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local list = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\n    local res = {}\n\
    \    local sign = true\n    for i,v in ipairs(list) do\n        if planet1 ==\
    \ v then\n            p1 = i\n        end\n        if planet2 == v then\n    \
    \        p2 = i\n        end\n    end\n    if not p1 or not p2 then\n        return\
    \ {}\n    end\n    if p1 > p2 then\n        sign = false\n        p1, p2 = p2,\
    \ p1\n    end\n    for i = p1 + 1, p2 - 1 do\n        res[#res + 1] = list[i]\n\
    \    end\n    if sign then\n        return res\n    else\n        local res2 =\
    \ {}\n        for i = #res, 1, -1 do\n            res2[#res2 + 1] = res[i]\n \
    \       end\n        return res2\n    end\nend", "\tlocal planets = {\n\t\t\"\
    Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\
    \t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t}\n\t\n\tlocal all = {}\n\t\
    \n\tfor i = 1, #planets do\n\t\tall[planets[i]] = i\n\tend\n\t\n\tif not all[planet1]\
    \ or not all[planet2] then\n\t\treturn {}\n\tend\n\t\n\tlocal from = all[planet1]\n\
    \tlocal to = all[planet2]\n\t\n\tif from > to then\n\t\tfrom, to = to, from\n\t\
    end\n\t\n\tlocal res = {}\n\t\n\tfor i = from + 1, to do\n\t\tres[#res + 1] =\
    \ planets[i]\n\tend\n\t\n\treturn res\nend", "\tlocal sol = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal\
    \ l1, l2, ret = 0, 0, {}\n\tfor i, v in ipairs(sol) do\n\t\tif planet1 == v then\n\
    \t\t\tl1 = i\n\t\tend\n\t\tif planet2 == v then\n\t\t\tl2 = i\n\t\tend\n\tend\n\
    \tif l1 == 0 or l2 == 0 then\n\t\treturn ret\n\tend\n\t\n\tfor i = math.min(l1,\
    \ l2), math.max(l1, l2) do\n\t\ttable.insert(ret, sol[i])\n\tend\n\treturn ret\n\
    end", "    if planet1 == \"Mercury\" and planet2 == \"Mercury\" then\n       \
    \ return {};\n    elseif planet1 == \"Mercury\" and planet2 == \"Venus\" then\n\
    \        return {\"Venus\"};\n    elseif planet1 == \"Mercury\" and planet2 ==\
    \ \"Earth\" then\n        return {\"Venus\", \"Earth\"};\n    elseif planet1 ==\
    \ \"Mercury\" and planet2 == \"Mars\" then\n        return {\"Venus\", \"Earth\"\
    , \"Mars\"};\n    elseif planet1 == \"Mercury\" and planet2 == \"Jupiter\" then\n\
    \        return {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"};\n    elseif planet1\
    \ == \"Mercury\" and planet2 == \"Saturn\" then\n        return {\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"};\n    elseif planet1 == \"Mercury\"\
    \ and planet2 == \"Uranus\" then\n        return {\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"};\n    elseif planet1 == \"Mercury\" and\
    \ planet2 == \"Neptune\" then\n        return {\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    elseif planet1 == \"\
    Venus\" and planet2 == \"Venus\" then\n        return {};\n    elseif planet1\
    \ == \"Venus\" and planet2 == \"Earth\" then\n        return {\"Earth\"};\n  \
    \  elseif planet1 == \"Venus\" and planet2 == \"Mars\" then\n        return {\"\
    Earth\", \"Mars\"};\n    elseif planet1 == \"Venus\" and planet2 == \"Jupiter\"\
    \ then\n        return {\"Earth\", \"Mars\", \"Jupiter\"};\n    elseif planet1\
    \ == \"Venus\" and planet2 == \"Saturn\" then\n        return {\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"};\n    elseif planet1 == \"Venus\" and planet2 == \"\
    Uranus\" then\n        return {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\"};\n    elseif planet1 == \"Venus\" and planet2 == \"Neptune\"", "   \
    \ local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n    local position1 = table.indexof(planets,\
    \ planet1)\n    local position2 = table.indexof(planets, planet2)\n    if position1\
    \ == -1 or position2 == -1 then\n        return {}\n    end\n    if position1\
    \ > position2 then\n        position1, position2 = position2, position1\n    end\n\
    \    local result = {}\n    for i = position1 + 1, position2 - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend", "    local planets = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local\
    \ idx1, idx2 = nil, nil\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then idx1 = i end\n        if v == planet2 then idx2 = i end\n    end\n    if\
    \ not idx1 or not idx2 then return {} end\n    local min, max = math.min(idx1,\
    \ idx2), math.max(idx1, idx2)\n    local res = {}\n    for i = min + 1, max -\
    \ 1 do\n        table.insert(res, planets[i])\n    end\n    return res\nend",
  "    local ps = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(ps)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 * p2\
    \ == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1, p2 =\
    \ p2, p1\n    end\n    local ret = {}\n    for i = p1 + 1, p2 - 1 do\n       \
    \ table.insert(ret, ps[i])\n    end\n    return ret\nend", "    local planets\
    \ = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\
    \    local list1 = {}\n    local list2 = {}\n    local final = {}\n    local function\
    \ validate(planet)\n        for i, j in ipairs(planets) do\n            if j ==\
    \ planet then return true end\n        end\n        return false\n    end\n  \
    \  local function index(planet)\n        for i, j in ipairs(planets) do\n    \
    \        if j == planet then return i end\n        end\n    end\n    if validate(planet1)\
    \ and validate(planet2) then\n        for i = index(planet1) + 1, index(planet2)\
    \ - 1 do\n            table.insert(list1, planets[i])\n        end\n        for\
    \ i = index(planet2) + 1, index(planet1) - 1 do\n            table.insert(list2,\
    \ planets[i])\n        end\n        if #list1 > #list2 then\n            final\
    \ = list1\n        else\n            final = list2\n        end\n    end\n   \
    \ return final\nend", "  local result = {}\n  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2\n  for i, planet in ipairs(planets) do\n    if planet == planet1\
    \ then\n      p1 = i\n    end\n    if planet == planet2 then\n      p2 = i\n \
    \   end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n  end\n  for\
    \ i = math.min(p1, p2), math.max(p1, p2) do\n    table.insert(result, planets[i])\n\
    \  end\n  return result\nend", "    local plan = { Mercury=1, Venus=2, Earth=3,\
    \ Mars=4, Jupiter=5, \n        Saturn=6, Uranus=7, Neptune=8}\n    local ans =\
    \ {}\n    if not plan[planet1] or not plan[planet2] then\n        return {}\n\
    \    end\n    local p1, p2 = plan[planet1], plan[planet2]\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    for k, v in pairs(plan) do\n        if\
    \ v > p1 and v < p2 then\n            table.insert(ans, k)\n        end\n    end\n\
    \    return ans\nend", "  local planets = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local a, b\n  for i, planet in\
    \ ipairs(planets) do\n    if planet == planet1 then a = i end\n    if planet ==\
    \ planet2 then b = i end\n  end\n  if not a or not b then return {} end\n  if\
    \ a > b then a, b = b, a end\n  local r = {}\n  for i = a + 1, b - 1 do\n    table.insert(r,\
    \ planets[i])\n  end\n  return r\nend", "  if planet1 == planet2 then return {}\
    \ end\n  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local idx1, idx2\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then idx1 = i end\n    if v == planet2 then idx2 = i\
    \ end\n  end\n  if not idx1 or not idx2 then return {} end\n  if idx1 > idx2 then\n\
    \    idx1, idx2 = idx2, idx1\n  end\n  local res = {}\n  for i = idx1 + 1, idx2\
    \ - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend", "  local\
    \ distance = {\n    Mercury = 0,\n    Venus = 0,\n    Earth = 0,\n    Mars = 0,\n\
    \    Jupiter = 0,\n    Saturn = 0,\n    Uranus = 0,\n    Neptune = 0\n  }\n  local\
    \ function distance_to_sun(name)\n    local distance_num = distance[name]\n  \
    \  if distance_num then return distance_num end\n    return nil\n  end\n  local\
    \ inner_planets = {Mercury = true, Venus = true, Earth = true, Mars = true}\n\
    \  local outer_planets = {Jupiter = true, Saturn = true, Uranus = true, Neptune\
    \ = true}\n  local planets = {}\n  local closest_inner_planet = nil\n  local closest_outer_planet\
    \ = nil\n  local found_inner_planet = false\n  local found_outer_planet = false\n\
    \  for planet, val in pairs(distance) do\n    if planet == planet1 then\n    \
    \  if inner_planets[planet] then\n        found_inner_planet = true\n      else\n\
    \        found_outer_planet = true\n      end\n    elseif planet == planet2 then\n\
    \      if inner_planets[planet] then\n        found_inner_planet = true\n    \
    \  else\n        found_outer_planet = true\n      end\n    elseif inner_planets[planet]\
    \ then\n      if not found_inner_planet then\n        closest_inner_planet = planet\n\
    \      end\n    elseif outer_planets[planet] then\n      if not found_outer_planet\
    \ then\n        closest_outer_planet = planet\n      end\n    end\n  end\n  if\
    \ not closest_inner_planet then closest_inner_planet = planet1 end\n  if not closest_outer_planet\
    \ then closest_outer_planet = planet2 end\n  local start_distance = distance_to_sun(closest_inner_planet)\n\
    \  local end_distance = distance_to_sun(closest_outer_planet)\n  local between\
    \ = {}\n  if start_distance < end_distance then\n    for planet, val in pairs(distance)\
    \ do\n      if val > start_distance and val < end_distance then\n        between[#between\
    \ + 1] = planet\n      end\n    end", "    local planets = {\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ p1 = 0\n    local p2 = 0\n    for i, v in ipairs(planets) do\n        if v ==\
    \ planet1 then\n            p1 = i\n        end\n        if v == planet2 then\n\
    \            p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n  \
    \      return {}\n    end\n    local result = {}\n    if p1 > p2 then\n      \
    \  for i = p2, p1 do\n            result[#result + 1] = planets[i]\n        end\n\
    \    else\n        for i = p1, p2 do\n            result[#result + 1] = planets[i]\n\
    \        end\n    end\n    return result\nend\nassert(type(bf) == \"function\"\
    )\nassert(type(bf(\"Mercury\", \"Venus\")) == \"table\")\nassert(type(bf(\"Venus\"\
    , \"Earth\")) == \"table\")\nassert(type(bf(\"Mercury\", \"Mercury\")) == \"table\"\
    )\nassert(type(bf(\"\", \"Mercury\")) == \"table\")\nassert(type(bf(\"Mercury\"\
    , \"\")) == \"table\")\nassert(type(bf(\"Venus\", \"Earth\")) == \"table\")\n\
    assert(type(bf(\"Earth\", \"Venus\")) == \"table\")\nassert(type(bf(\"Earth\"\
    , \"Earth\")) == \"table\")\nassert(#bf(\"Earth\", \"Earth\") == 1)\nassert(bf(\"\
    Earth\", \"Earth\")[1] == \"Earth\")\nassert(type(bf(\"Venus\", \"Earth\")) ==\
    \ \"table\")\nassert(#bf(\"Venus\", \"Earth\") == 2)\nassert(bf(\"Venus\", \"\
    Earth\")[1] == \"Venus\")\nassert(bf(\"Venus\", \"Earth\")[2] == \"Earth\")\n\
    assert(type(bf(\"Mercury\", \"Venus\")) == \"table\")\nassert(#bf(\"Mercury\"\
    , \"Venus\") == 2)\nassert(bf(\"Mercury", "  local t = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local function findPlanet(name)\n\
    \    for k,v in ipairs(t) do\n      if v == name then return k end\n    end\n\
    \    return 0\n  end\n  local p1 = findPlanet(planet1)\n  local p2 = findPlanet(planet2)\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ t[i])\n  end\n  return res\nend", "    local orbits = {\n        Mercury = 1,\n\
    \        Venus = 2,\n        Earth = 3,\n        Mars = 4,\n        Jupiter =\
    \ 5,\n        Saturn = 6,\n        Uranus = 7,\n        Neptune = 8\n    }\n \
    \   local lower = orbits[planet1]\n    local upper = orbits[planet2]\n    if not\
    \ lower or not upper then\n        return {}\n    end\n    if lower > upper then\n\
    \        lower, upper = upper, lower\n    end\n    local planets = {}\n    for\
    \ k, v in pairs(orbits) do\n        if v > lower and v < upper then\n        \
    \    table.insert(planets, k)\n        end\n    end\n    return planets\nend",
  "\t\n\tlocal planet = {}\n\tlocal first = 0\n\tlocal last = 0\n\tlocal new = {}\n\
    \t\n\tfor i = 1,#planets do\n\t\tif planets[i] == planet1 then\n\t\t\tfirst =\
    \ i\n\t\tend\n\t\tif planets[i] == planet2 then\n\t\t\tlast = i\n\t\tend\n\tend\n\
    \t\n\tif first == 0 or last == 0 then\n\t\treturn {}\n\tend\n\t\n\tfor i = first,last\
    \ do\n\t\ttable.insert(new, planets[i])\n\tend\n\t\n\tif first > last then\n\t\
    \tfor i = first,#planets do\n\t\t\ttable.insert(new, planets[i])\n\t\tend\n\t\t\
    for i = 1,last do\n\t\t\ttable.insert(new, planets[i])\n\t\tend\n\tend\n\t\n\t\
    return new\n\t\nend", "  local names = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local t1, t2\n  for\
    \ i, v in ipairs(names) do\n    if v == planet1 then t1 = i end\n    if v == planet2\
    \ then t2 = i end\n  end\n  if t1 == nil or t2 == nil then return {} end\n  if\
    \ t1 > t2 then return {} end\n  local r = {}\n  for i = t1 + 1, t2 - 1 do\n  \
    \  table.insert(r, names[i])\n  end\n  return r\nend", "\tlocal planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n\tlocal pos1, pos2\n\tfor k, v in ipairs(planets) do\n\t\tif v\
    \ == planet1 then\n\t\t\tpos1 = k\n\t\tend\n\t\tif v == planet2 then\n\t\t\tpos2\
    \ = k\n\t\tend\n\tend\n\tif not pos1 or not pos2 then\n\t\treturn {}\n\tend\n\t\
    if pos1 > pos2 then\n\t\tpos1, pos2 = pos2, pos1\n\tend\n\tlocal result = {}\n\
    \tfor i = pos1+1, pos2-1 do\n\t\ttable.insert(result, planets[i])\n\tend\n\treturn\
    \ result\nend", "    local t = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, e in ipairs(t)\
    \ do\n        if e == planet1 then i1 = i\n        elseif e == planet2 then i2\
    \ = i\n        end\n    end\n    if i1 == 0 or i2 == 0 then return {} end\n  \
    \  if i1 < i2 then return {table.unpack(t, i1+1, i2-1)} end\n    return {table.unpack(t,\
    \ i2+1, i1-1)}\nend", "    -- check for errors\n    if not (solarSystem[planet1]\
    \ and solarSystem[planet2]) then\n        return {}\n    end\n    local planets\
    \ = {}\n    local i = solarSystem[planet1]\n    local j = solarSystem[planet2]\n\
    \    while i <= j do\n        table.insert(planets, solarSystem[i])\n        i\
    \ = i + 1\n    end\n    return planets\nend", "  -- write your code here\n  local\
    \ solarSystem = {\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\"\
    ,\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  }\n\
    \  local planet1Position = 0\n  local planet2Position = 0\n  local planets = {}\n\
    \  for _,planet in ipairs(solarSystem) do\n    if planet == planet1 then\n   \
    \   planet1Position = _\n    end\n    if planet == planet2 then\n      planet2Position\
    \ = _\n    end\n  end\n  if planet1Position == 0 or planet2Position == 0 then\n\
    \    return {}\n  end\n  if planet1Position > planet2Position then\n    local\
    \ temp = planet1Position\n    planet1Position = planet2Position\n    planet2Position\
    \ = temp\n  end\n  for i = planet1Position + 1, planet2Position - 1 do\n    table.insert(planets,\
    \ solarSystem[i])\n  end\n  return planets\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local result = {}\n    local start, finish\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            start = i\n        elseif\
    \ planet == planet2 then\n            finish = i\n        end\n    end\n    if\
    \ not start or not finish then\n        return {}\n    end\n    for i = start\
    \ + 1, finish - 1 do\n        table.insert(result, planets[i])\n    end\n    return\
    \ result\nend", "\tlocal map = {}\n\tlocal function add(planet)\n\t\tmap[planet]\
    \ = 1\n\tend\n\t\n\tif planet1 and planet2 then\n\t\tlocal start = planets:find(planet1)\n\
    \t\tlocal finish = planets:find(planet2)\n\t\tif start and finish then\n\t\t\t\
    local step = 1\n\t\t\tif start > finish then\n\t\t\t\tstep = -1\n\t\t\tend\n\t\
    \t\tfor i = start, finish, step do\n\t\t\t\tadd(planets[i])\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\treturn map\nend", "    local planets = {\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ idx1, idx2 = -1, -1\n    for k, v in ipairs(planets) do\n        if planet1\
    \ == v then\n            idx1 = k\n        end\n        if planet2 == v then\n\
    \            idx2 = k\n        end\n    end\n    if idx1 == -1 or idx2 == -1 then\n\
    \        return {}\n    end\n    local idx = idx1\n    local result = {}\n   \
    \ while true do\n        table.insert(result, planets[idx])\n        if idx ==\
    \ idx2 then\n            break\n        end\n        idx = idx + 1\n    end\n\
    \    return result\nend", "   local p1 = 0\n   local p2 = 0\n   for i, planet\
    \ in ipairs(solar_system) do\n      if planet1 == planet then\n         p1 = i\n\
    \      end\n      if planet2 == planet then\n         p2 = i\n      end\n   end\n\
    \   if p1 == 0 or p2 == 0 then\n      return {}\n   end\n   local p = {}\n   if\
    \ p1 > p2 then\n      for i = p2, p1 do\n         table.insert(p, solar_system[i])\n\
    \      end\n   else\n      for i = p1, p2 do\n         table.insert(p, solar_system[i])\n\
    \      end\n   end\n   return p\nend", "  \n  local planets = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local position\n\
    \  local planet1_position\n  local planet2_position\n  local between_planets =\
    \ {}\n  \n  for i,planet in ipairs(planets) do\n    if planet == planet1 then\n\
    \      planet1_position = i\n    end\n    if planet == planet2 then\n      planet2_position\
    \ = i\n    end\n  end\n  \n  if planet1_position == nil or planet2_position ==\
    \ nil then\n    return {}\n  end\n  \n  if planet1_position > planet2_position\
    \ then\n    position = planet2_position\n    for i = planet2_position, planet1_position\
    \ do\n      table.insert(between_planets, planets[i])\n    end\n  else\n    position\
    \ = planet1_position\n    for i = planet1_position, planet2_position do\n    \
    \  table.insert(between_planets, planets[i])\n    end\n  end\n  \n  return between_planets\n\
    \  \nend", "  local planets = {\n    'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'\n  }\n  local start = 0\n  local end = 0\n  for\
    \ i, val in ipairs(planets) do\n    if planet1 == val then\n      start = i\n\
    \    end\n    if planet2 == val then\n      end = i\n    end\n  end\n  if start\
    \ == 0 or end == 0 then\n    return {}\n  end\n  if start > end then\n    start,\
    \ end = end, start\n  end\n  local result = {}\n  for i = start + 1, end - 1 do\n\
    \    table.insert(result, planets[i])\n  end\n  return result\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local ret = {}\n  local after = false\n  local before\
    \ = false\n  for i,v in ipairs(planets) do\n    if v == planet1 then after = true\
    \ end\n    if v == planet2 then before = true end\n    if (after and not before)\
    \ or (before and not after) then \n      table.insert(ret, v)\n    end\n  end\n\
    \  return ret\nend", "    --return planets(planet1, planet2)\n    local list={'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local\
    \ num1=list:indexOf(planet1)\n    local num2=list:indexOf(planet2)\n    if num1>num2\
    \ then\n        local tmp=num1\n        num1=num2\n        num2=tmp\n    end\n\
    \    if num1>-1 and num2>-1 then\n        return list:slice(num1+1,num2):asTable()\n\
    \    else\n        return {}\n    end\nend", "\tlocal pm = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal  idx1, idx2\
    \ = table.find(pm, planet1), table.find(pm, planet2)\n\tif idx1 and idx2 then\n\
    \t\ttable.sort(pm, function(a, b) return pm[a] < pm[b] end)\n\t\treturn table.slice(pm,\
    \ idx1, idx2)\n\tend\n\treturn {}\nend", "    planets = { Mercury = 1, Venus =\
    \ 2, Earth = 3, Mars = 4, Jupiter = 5, Saturn = 6, Uranus = 7, Neptune = 8 }\n\
    \    if planets[planet1] == nil or planets[planet2] == nil then\n        return\
    \ {}\n    end\n    local _, maxi = math.min(planets[planet1], planets[planet2]),\
    \ math.max(planets[planet1], planets[planet2])\n    local t = {}\n    for i =\
    \ maxi - 1, maxi - (maxi - mini) - 1, -1 do\n        for planet, position in pairs(planets)\
    \ do\n            if position == i then\n                table.insert(t, planet)\n\
    \            end\n        end\n    end\n    return t\nend", "  local p = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local\
    \ i1, i2\n  for k, v in ipairs(p) do\n    if v == planet1 then i1 = k end\n  \
    \  if v == planet2 then i2 = k end\n  end\n  if i1 and i2 then\n    local r =\
    \ {}\n    if i1 < i2 then\n      for i = i1 + 1, i2 - 1 do r[#r + 1] = p[i] end\n\
    \    else\n      for i = i2 + 1, i1 - 1 do r[#r + 1] = p[i] end\n    end\n   \
    \ return r\n  else\n    return {}\n  end\nend", "  planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  pos1 = -1\n  pos2 = -1\n  for i = 1, #planets do\n    if planet1 == planets[i]\
    \ then\n      pos1 = i\n    end\n    if planet2 == planets[i] then\n      pos2\
    \ = i\n    end\n  end\n  if pos1 < 0 or pos2 < 0 then\n    return {}\n  end\n\
    \  p = {}\n  if pos1 < pos2 then\n    for i = pos1 + 1, pos2 - 1 do\n      p[#p\
    \ + 1] = planets[i]\n    end\n  else\n    for i = pos2 + 1, pos1 - 1 do\n    \
    \  p[#p + 1] = planets[i]\n    end\n  end\n  return p\nend\nassert(bf(\"Mercury\"\
    , \"Venus\") == {\"Venus\"})\nassert(bf(\"Venus\", \"Mercury\") == {\"Venus\"\
    })\nassert(bf(\"Earth\", \"Mars\") == {\"Venus\", \"Mars\"})\nassert(bf(\"Jupiter\"\
    , \"Mars\") == {\"Saturn\", \"Uranus\", \"Neptune\"})\nassert(bf(\"Saturn\", \"\
    Jupiter\") == {\"Saturn\", \"Uranus\", \"Neptune\"})\nassert(bf(\"Mars\", \"Jupiter\"\
    ) == {})", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 1, 8\n  for\
    \ k, v in ipairs(planets) do\n    if v == planet1 then p1 = k end\n    if v ==\
    \ planet2 then p2 = k end\n  end\n  if p1 == 1 and p2 == 8 then return {} end\n\
    \  if p1 > p2 then return {} end\n  return {table.unpack(planets, p1, p2 - 1)}\n\
    end", "\tlocal solar_system = {\n\t\tMercury = 1,\n\t\tVenus = 2,\n\t\tEarth =\
    \ 3,\n\t\tMars = 4,\n\t\tJupiter = 5,\n\t\tSaturn = 6,\n\t\tUranus = 7,\n\t\t\
    Neptune = 8\n\t}\n\tif not solar_system[planet1] or not solar_system[planet2]\
    \ then\n\t\treturn {}\n\tend\n\tlocal planets = {}\n\tlocal start = math.min(solar_system[planet1],\
    \ solar_system[planet2])\n\tlocal stop = math.max(solar_system[planet1], solar_system[planet2])\n\
    \tfor k, v in pairs(solar_system) do\n\t\tif v > start and v < stop then\n\t\t\
    \ttable.insert(planets, k)\n\t\tend\n\tend\n\treturn planets\nend", "\tlocal s\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n\tlocal t1, t2\n\tfor k, v in ipairs(s) do\n\t\tif v ==\
    \ planet1 then t1 = k end\n\t\tif v == planet2 then t2 = k end\n\tend\n\tif t1\
    \ and t2 then\n\t\tif t1 > t2 then \n\t\t\tt1, t2 = t2, t1\n\t\tend\n\t\treturn\
    \ table.unpack(s, t1 + 1, t2 - 1)\n\tend\n\treturn unpack({})\nend", "    return\
    \ {}\nend", "\tlocal vs = {\n\t\t[\"Mercury\"] = 1,\n\t\t[\"Venus\"] = 2,\n\t\t\
    [\"Earth\"] = 3,\n\t\t[\"Mars\"] = 4,\n\t\t[\"Jupiter\"] = 5,\n\t\t[\"Saturn\"\
    ] = 6,\n\t\t[\"Uranus\"] = 7,\n\t\t[\"Neptune\"] = 8,\n\t}\n\tif not vs[planet1]\
    \ or not vs[planet2] then\n\t\treturn {}\n\tend\n\tlocal r = {}\n\tlocal a, b\
    \ = vs[planet1], vs[planet2]\n\tfor i = math.min(a, b), math.max(a, b) do\n\t\t\
    r[#r + 1] = i\n\tend\n\treturn r\nend", "    local planets = {\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    }\n    local p1 = nil\n\
    \    local p2 = nil\n    for i,v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == nil or p2 == nil then\n    \
    \    return {}\n    end\n    local res = {}\n    if p1 < p2 then\n        for\
    \ i = p1+1, p2-1 do\n            table.insert(res, planets[i])\n        end\n\
    \    else\n        for i = p2+1, p1-1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "\tlocal t = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal a = 0\n\t\
    local b = 0\n\tfor i = 1, 8 do\n\t\tif t[i] == planet1 then\n\t\t\ta = i\n\t\t\
    end\n\t\tif t[i] == planet2 then\n\t\t\tb = i\n\t\tend\n\tend\n\tif a == 0 or\
    \ b == 0 then\n\t\treturn {}\n\tend\n\tif a > b then\n\t\ta, b = b, a\n\tend\n\
    \tlocal c = {}\n\tfor i = a + 1, b do\n\t\tc[#c + 1] = t[i]\n\tend\n\treturn c\n\
    end", "    -- your code here\n    local p1 = nil\n    local p2 = nil\n    local\
    \ planetNames = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n    local planetsList = {}\n    for i = 1,\
    \ #planetNames do\n        if planetNames[i] == planet1 then\n            p1 =\
    \ i\n        end\n        if planetNames[i] == planet2 then\n            p2 =\
    \ i\n        end\n    end\n    if p1 == nil or p2 == nil then\n        return\
    \ planetsList\n    end\n    local start = math.min(p1, p2)\n    local finish =\
    \ math.max(p1, p2)\n    for i = start, finish do\n        table.insert(planetsList,\
    \ planetNames[i])\n    end\n    return planetsList\nend", "\tlocal function next_planet(planet)\n\
    \t\tlocal planets = {\n\t\t\tMercury = \"Venus\",\n\t\t\tVenus = \"Earth\",\n\t\
    \t\tEarth = \"Mars\",\n\t\t\tMars = \"Jupiter\",\n\t\t\tJupiter = \"Saturn\",\n\
    \t\t\tSaturn = \"Uranus\",\n\t\t\tUranus = \"Neptune\",\n\t\t\tNeptune = \"\"\
    ,\n\t\t}\n\t\tif planets[planet] == \"\" then\n\t\t\treturn \"\"\n\t\telse\n\t\
    \t\treturn planets[planet]\n\t\tend\n\tend\n\tlocal p1 = \"\"\n\tlocal p2 = \"\
    \"\n\tlocal result = {}\n\tlocal planets = {\n\t\tMercury = 1,\n\t\tVenus = 2,\n\
    \t\tEarth = 3,\n\t\tMars = 4,\n\t\tJupiter = 5,\n\t\tSaturn = 6,\n\t\tUranus =\
    \ 7,\n\t\tNeptune = 8,\n\t}\n\tfor i = 1, 9 do\n\t\tif planets[planet1] == i then\n\
    \t\t\tp1 = planet1\n\t\t\tp2 = planet2\n\t\t\tbreak\n\t\telseif planets[planet2]\
    \ == i then\n\t\t\tp1 = planet2\n\t\t\tp2 = planet1\n\t\t\tbreak\n\t\tend\n\t\
    end\n\tfor i = planets[p1], planets[p2] do\n\t\ttable.insert(result, p1)\n\t\t\
    p1 = next_planet(p1)\n\tend\n\treturn result\nend", "    local const = {\n   \
    \     Mercury = {distance = \"57,909,175 km\", diameter = \"4,879 km\"},\n   \
    \     Venus = {distance = \"108,209,475 km\", diameter = \"12,104 km\"},\n   \
    \     Earth = {distance = \"149,598,262 km\", diameter = \"12,756 km\"},\n   \
    \     Mars = {distance = \"227,943,824 km\", diameter = \"6,794 km\"},\n     \
    \   Jupiter = {distance = \"778,340,821 km\", diameter = \"142,984 km\"},\n  \
    \      Saturn = {distance = \"1,426,666,422 km\", diameter = \"120,536 km\"},\n\
    \        Uranus = {distance = \"2,870,658,186 km\", diameter = \"51,118 km\"},\n\
    \        Neptune = {distance = \"4,498,396,441 km\", diameter = \"49,532 km\"\
    },\n    }\n    local temp = {}\n    for k,v in pairs(const) do\n        if planet1\
    \ == k or planet2 == k then\n            table.insert(temp, v)\n        end\n\
    \    end\n    table.sort(temp, function(a, b) return a.distance < b.distance end)\n\
    \    return unpack(temp)\nend", "    local planets = {\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local first, last, bfirst, blast = 1, #planets, 1, #planets\n    for i = 1,\
    \ #planets do\n        if planets[i] == planet1 then\n            first = i\n\
    \            bfirst = true\n        end\n        if planets[i] == planet2 then\n\
    \            last = i\n            blast = true\n        end\n    end\n    if\
    \ bfirst and blast then\n        if first > last then\n            local tmp =\
    \ first\n            first = last\n            last = tmp\n        end\n     \
    \   local r = {}\n        for i = first, last do\n            r[#r + 1] = planets[i]\n\
    \        end\n        return r\n    end\n    return {}\nend", "  local p = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local\
    \ r = {}\n  local found1, found2\n  for i, v in ipairs(p) do\n    if v == planet1\
    \ then\n      found1 = i\n    end\n    if v == planet2 then\n      found2 = i\n\
    \    end\n  end\n  local begin, last\n  if found1 and found2 then\n    if found1\
    \ < found2 then\n      begin = found1\n      last = found2\n    else\n      begin\
    \ = found2\n      last = found1\n    end\n    for i = begin, last do\n      table.insert(r,\
    \ p[i])\n    end\n  end\n  return r\nend", "   for i = 1, #planets do\n      if\
    \ planets[i] == planet1 then \n\t planet1 = i\n      end\n      if planets[i]\
    \ == planet2 then \n\t planet2 = i\n      end\n   end\n   if planet1 == nil or\
    \ planet2 == nil then \n      return { }\n   end\n   local r = { }\n   for i =\
    \ math.min(planet1, planet2) + 1, math.max(planet1, planet2) - 1 do\n      r[#r\
    \ + 1] = planets[i]\n   end\n   return r\nend", "    local planets = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local\
    \ planets_table = {}\n    for index, value in ipairs(planets) do \n        planets_table[value]\
    \ = index\n    end\n    local index1 = planets_table[planet1]\n    local index2\
    \ = planets_table[planet2]\n    if index1 == nil or index2 == nil then\n     \
    \   return {}\n    end\n    if index1 > index2 then\n        index1, index2 =\
    \ index2, index1\n    end\n    local count = 0\n    for i = index1 + 1, index2\
    \ - 1 do\n        count = count + 1\n    end\n    local result = {}\n    for i\
    \ = index1 + 1, index2 - 1 do\n        result[i - index1] = planets[i]\n    end\n\
    \    return result\nend", "  local dist = {}\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then \n      dist[1] = i \n    elseif v == planet2 then \n\
    \      dist[2] = i \n    end\n  end\n  if dist[1] == nil or dist[2] == nil then\
    \ return {} end\n  if dist[1] < dist[2] then \n    return {table.unpack(planets,\
    \ dist[1]+1, dist[2]-1)}\n  else \n    return {table.unpack(planets, dist[2]+1,\
    \ dist[1]-1)}\n  end\nend", "  local list = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  if not list[planet1]\
    \ or not list[planet2] then return {} end\n  local start, finish = list[planet1],\
    \ list[planet2]\n  for i = 1, #list do\n    if list[i] == start then start = i\
    \ end\n    if list[i] == finish then finish = i end\n  end\n  if start > finish\
    \ then start, finish = finish, start end\n  local res = {}\n  for i = start +\
    \ 1, finish - 1 do res[#res + 1] = list[i] end\n  return res\nend", "  local ls\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local function get_pos(planet)\n    for i, v in ipairs(ls)\
    \ do\n      if v == planet then\n        return i\n      end\n    end\n    return\
    \ 0\n  end\n  local a, b = get_pos(planet1), get_pos(planet2)\n  if a * b == 0\
    \ then return {} end\n  if a > b then\n    a, b = b, a\n  end\n  local r = {}\n\
    \  for i = a+1, b-1 do\n    table.insert(r, ls[i])\n  end\n  return r\nend", " \
    \ local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n  local list = {}\n  for i,v in ipairs(planets) do\n    if v ==\
    \ planet1 then\n      for x,y in ipairs(planets) do\n        if y == planet2 then\n\
    \          if x > i then\n            for z = i,x do\n              table.insert(list,\
    \ planets[z])\n            end\n          else\n            for z = x,i do\n \
    \             table.insert(list, planets[z])\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  return unpack(list)\nend", "    return\
    \ {}\nend", "\tlocal planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal res = {}\n\tlocal i =\
    \ 1\n\tlocal j = 1\n\twhile planets[i] ~= planet1 do\n\t\ti = i + 1\n\tend\n\t\
    while planets[j] ~= planet2 do\n\t\tj = j + 1\n\tend\n\tif j < i then\n\t\ti,\
    \ j = j, i\n\tend\n\tfor k = i + 1, j - 1 do\n\t\ttable.insert(res, planets[k])\n\
    \tend\n\treturn unpack(res)\nend", "\tlocal table = {}\n\tif planet1 == \"Mercury\"\
    \ then table[1] = \"Mercury\" end\n\tif planet1 == \"Venus\" then table[1] = \"\
    Mercury\" table[2] = \"Venus\" end\n\tif planet1 == \"Earth\" then table[1] =\
    \ \"Mercury\" table[2] = \"Venus\" table[3] = \"Earth\" end\n\tif planet1 == \"\
    Mars\" then table[1] = \"Mercury\" table[2] = \"Venus\" table[3] = \"Earth\" table[4]\
    \ = \"Mars\" end\n\tif planet1 == \"Jupiter\" then table[1] = \"Mercury\" table[2]\
    \ = \"Venus\" table[3] = \"Earth\" table[4] = \"Mars\" table[5] = \"Jupiter\"\
    \ end\n\tif planet1 == \"Saturn\" then table[1] = \"Mercury\" table[2] = \"Venus\"\
    \ table[3] = \"Earth\" table[4] = \"Mars\" table[5] = \"Jupiter\" table[6] = \"\
    Saturn\" end\n\tif planet1 == \"Uranus\" then table[1] = \"Mercury\" table[2]\
    \ = \"Venus\" table[3] = \"Earth\" table[4] = \"Mars\" table[5] = \"Jupiter\"\
    \ table[6] = \"Saturn\" table[7] = \"Uranus\" end\n\tif planet1 == \"Neptune\"\
    \ then table[1] = \"Mercury\" table[2] = \"Venus\" table[3] = \"Earth\" table[4]\
    \ = \"Mars\" table[5] = \"Jupiter\" table[6] = \"Saturn\" table[7] = \"Uranus\"\
    \ table[8] = \"Neptune\" end\n\tlocal result = {}\n\tfor index, value in ipairs(table)\
    \ do\n\t\tif value == planet2 then\n\t\t\treturn unpack(result)\n\t\tend\n\t\t\
    table.insert(result, value)\n\tend\n\treturn unpack(result)\nend", "\tif planet1\
    \ == \"Mercury\" and planet2 == \"Uranus\" then\n\t\treturn {\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"}\n\telseif planet1 == \"Saturn\" and planet2\
    \ == \"Mercury\" then\n\t\treturn {\"Uranus\", \"Neptune\"}\n\telseif planet1\
    \ == \"Uranus\" and planet2 == \"Venus\" then\n\t\treturn {\"Saturn\", \"Jupiter\"\
    , \"Mars\", \"Earth\"}\n\telseif planet1 == \"Earth\" and planet2 == \"Jupiter\"\
    \ then\n\t\treturn {\"Venus\", \"Mars\"}\n\telseif planet1 == \"Jupiter\" and\
    \ planet2 == \"Earth\" then\n\t\treturn {\"Saturn\", \"Uranus\", \"Neptune\"}\n\
    \telseif planet1 == \"Earth\" and planet2 == \"Venus\" then\n\t\treturn {\"Mars\"\
    }\n\telseif planet1 == \"Venus\" and planet2 == \"Earth\" then\n\t\treturn {\"\
    Mercury\"}\n\telseif planet1 == \"Saturn\" and planet2 == \"Neptune\" then\n\t\
    \treturn {\"Uranus\"}\n\telseif planet1 == \"Uranus\" and planet2 == \"Saturn\"\
    \ then\n\t\treturn {\"Neptune\"}\n\telseif planet1 == \"Saturn\" and planet2 ==\
    \ \"Jupiter\" then\n\t\treturn {\"Uranus\", \"Neptune\"}\n\telseif planet1 ==\
    \ \"Uranus\" and planet2 == \"Mars\" then\n\t\treturn {\"Saturn\", \"Jupiter\"\
    , \"Earth\"}\n\telseif planet1 == \"Mars\" and planet2 == \"Uranus\" then\n\t\t\
    return {\"Earth\", \"Venus\", \"Mercury\"}\n\telseif planet1 == \"Jupiter\" and\
    \ planet2 == \"Venus\" then\n\t\treturn {\"Saturn\", \"Uranus\", \"Neptune\"}\n\
    \telseif planet1 == \"Venus\" and planet2 == \"Jupiter\" then\n\t\treturn {\"\
    Mercury\", \"Earth\", \"Mars\"}\n\telseif planet1 == \"Jupiter\" and planet2 ==\
    \ \"Uranus\" then\n\t\treturn {\"Saturn\"}\n\telseif planet1 == \"Uranus\"", " \
    \   local first_orbit, second_orbit\n    for i, planet in ipairs(planets) do\n\
    \        if planet == planet1 then\n            first_orbit = i\n        elseif\
    \ planet == planet2 then\n            second_orbit = i\n        end\n    end\n\
    \    if first_orbit == nil or second_orbit == nil then\n        return {}\n  \
    \  end\n    local d1, d2 = math.abs(first_orbit - second_orbit),\n           \
    \        math.abs(second_orbit - first_orbit)\n    if d1 <= d2 then\n        return\
    \ table.unpack(planets, first_orbit, second_orbit)\n    else\n        return table.unpack(planets,\
    \ second_orbit, first_orbit)\n    end\nend", "   local sol = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n   local ps = {planet1,\
    \ planet2}\n   local is = {0, 0}\n   local s = ''\n   local t = {}\n   local a\
    \ = {}\n   for k, v in pairs(ps) do\n      for n, m in pairs(sol) do\n       \
    \  if v == m then\n            is[k] = n\n         end\n      end\n   end\n  \
    \ if is[1] > is[2] then\n      s = is[1]\n      is[1] = is[2]\n      is[2] = s\n\
    \   end\n   for k, v in pairs(is) do\n      if v == 0 then\n         return {}\n\
    \      end\n   end\n   for i = is[1] + 1, is[2] - 1 do\n      table.insert(t,\
    \ sol[i])\n   end\n   return unpack(t)\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1 = 0\n    local p2 = 0\n    for i, v in ipairs(planets) do\n  \
    \      if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0 or p2\
    \ == 0 then\n        return {}\n    end\n    local min = math.min(p1, p2)\n  \
    \  local max = math.max(p1, p2)\n    local ret = {}\n    for i = min, max do\n\
    \        ret[#ret + 1] = planets[i]\n    end\n    return ret\nend", "    local\
    \ counter = 0\n    local sunSystem = {\n        Mercury = {-1},\n        Venus\
    \ = {0},\n        Earth = {1},\n        Mars = {2},\n        Jupiter = {3},\n\
    \        Saturn = {4},\n        Uranus = {5},\n        Neptune = {6}\n    }\n\
    \    for k, v in pairs(sunSystem) do\n        if k == planet1 then\n         \
    \   counter = counter + 1\n        end\n        if k == planet2 then\n       \
    \     counter = counter + 1\n        end\n    end\n    if counter ~= 2 then\n\
    \        return {}\n    end\n    local result = {}\n    local planet1Ind = nil\n\
    \    local planet2Ind = nil\n    for k, v in pairs(sunSystem) do\n        if k\
    \ == planet1 then\n            planet1Ind = v[1]\n        end\n        if k ==\
    \ planet2 then\n            planet2Ind = v[1]\n        end\n    end\n    local\
    \ index1 = math.min(planet1Ind, planet2Ind)\n    local index2 = math.max(planet1Ind,\
    \ planet2Ind)\n    for k, v in pairs(sunSystem) do\n        if v[1] > index1 and\
    \ v[1] < index2 then\n            table.insert(result, k)\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend", "    local p = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local i1, i2\n\
    \    for i, pn in ipairs(p) do\n        if pn == planet1 then i1 = i end\n   \
    \     if pn == planet2 then i2 = i end\n    end\n    if i1 == nil or i2 == nil\
    \ then return {} end\n    if i1 < i2 then\n        return {unpack(p, i1+1, i2-1)}\n\
    \    else\n        return {unpack(p, i2+1, i1-1)}\n    end\nend\nassert(table.unpack(bf('Mercury',\
    \ 'Earth')) == 'Venus')\nassert(table.unpack(bf('Saturn', 'Mars')) == 'Jupiter')\n\
    assert(table.unpack(bf('Mars', 'Mercury')) == 'Venus')\nassert(table.unpack(bf('Jupiter',\
    \ 'Venus')) == 'Earth')\nassert(table.unpack(bf('Jupiter', 'Earth')) == 'Saturn',\
    \ 'Mars')\nassert(table.unpack(bf('Jupiter', 'Earth')) == 'Saturn', 'Mars')\n\
    assert(table.unpack(bf('Saturn', 'Jupiter')) == 'Uranus', 'Neptune')\nassert(table.unpack(bf('Venus',\
    \ 'Mars')) == 'Earth')\nassert(table.unpack(bf('Earth', 'Jupiter')) == 'Mars',\
    \ 'Saturn')\nassert(table.unpack(bf('Saturn', 'Earth')) == 'Uranus', 'Neptune')\n\
    assert(table.unpack(bf('Mercury', 'Jupiter')) == 'Venus', 'Earth', 'Mars')\nassert(table.unpack(bf('Mercury',\
    \ 'Mars')) == 'Venus', 'Earth')\nassert(table.unpack(bf('Saturn', 'Mercury'))\
    \ == 'Uranus', 'Neptune')\nassert(table.unpack(bf('Uranus', 'Mercury')) == 'Neptune')",
  "end\nbf(\"Mercury\", \"Jupiter\")    --> (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\")\nbf(\"Venus\", \"Earth\")        --> (\"Venus\", \"Earth\")\nbf(\"Venus\"\
    , \"Mars\")         --> (\"Venus\", \"Earth\", \"Mars\")\nbf(\"Earth\", \"Mars\"\
    )         --> (\"Earth\", \"Mars\")\nbf(\"Mars\", \"Uranus\")        --> (\"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\")\nbf(\"Uranus\", \"Jupiter\")     --> (\"\
    Uranus\", \"Neptune\", \"Saturn\", \"Jupiter\")\nbf(\"Jupiter\", \"Uranus\") \
    \    --> (\"Jupiter\", \"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Jupiter\")   \
    \   --> (\"Earth\", \"Mars\", \"Jupiter\")\nbf(\"Earth\", \"Saturn\")       -->\
    \ (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Earth\", \"Mercury\") \
    \     --> ()\nbf(\"Jupiter\", \"Mercury\")    --> ()\nbf(\"Uranus\", \"Saturn\"\
    )      --> (\"Uranus\", \"Neptune\", \"Saturn\")\nbf(\"Saturn\", \"Saturn\") \
    \     --> ()\nbf(\"Earth\", \"Foo\")          --> ()\nbf(\"Foo\", \"Saturn\")\
    \         --> ()\nbf(\"Foo\", \"Bar\")            --> ()", "    return {'Venus',\
    \ 'Earth', 'Mars'}\nend", "    local function helper(planets, planet1, planet2)\n\
    \        local result = {}\n        local planet1_idx = nil\n        local planet2_idx\
    \ = nil\n        for idx, planet in ipairs(planets) do\n            if planet\
    \ == planet1 then\n                planet1_idx = idx\n            end\n      \
    \      if planet == planet2 then\n                planet2_idx = idx\n        \
    \    end\n        end\n        if planet1_idx and planet2_idx then\n         \
    \   if planet1_idx < planet2_idx then\n                for idx = planet1_idx +\
    \ 1, planet2_idx - 1 do\n                    table.insert(result, planets[idx])\n\
    \                end\n            else\n                for idx = planet2_idx\
    \ + 1, planet1_idx - 1 do\n                    table.insert(result, planets[idx])\n\
    \                end\n            end\n        end\n        return result\n  \
    \  end\n    local planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\",\n        \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n    return\
    \ helper(planets, planet1, planet2)\nend", "\tlocal planet1_pos, planet2_pos\n\
    \tlocal result = {}\n\tlocal planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tplanet1_pos = i\n\t\tend\n\t\tif v == planet2\
    \ then\n\t\t\tplanet2_pos = i\n\t\tend\n\tend\n\tif planet1_pos and planet2_pos\
    \ then\n\t\tlocal start, finish\n\t\tif planet1_pos < planet2_pos then\n\t\t\t\
    start = planet1_pos\n\t\t\tfinish = planet2_pos\n\t\telse\n\t\t\tstart = planet2_pos\n\
    \t\t\tfinish = planet1_pos\n\t\tend\n\t\tfor i = start, finish do\n\t\t\tresult[#result\
    \ + 1] = planets[i]\n\t\tend\n\tend\n\treturn result\nend", "\tif planet1 == planet2\
    \ then return {} end\n\tlocal v1, v2 = {}, {}\n\tif planet1 == \"Mercury\" then\
    \ v1 = {'Mercury'}\n\telseif planet1 == \"Venus\" then v1 = {'Mercury', 'Venus'}\n\
    \telseif planet1 == \"Earth\" then v1 = {'Mercury', 'Venus', 'Earth'}\n\telseif\
    \ planet1 == \"Mars\" then v1 = {'Mercury', 'Venus', 'Earth', 'Mars'}\n\telseif\
    \ planet1 == \"Jupiter\" then v1 = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter'}\n\
    \telseif planet1 == \"Saturn\" then v1 = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'}\n\telseif planet1 == \"Uranus\" then v1 = {'Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'}\n\telseif planet1 == \"Neptune\"\
    \ then v1 = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\telse return {} end\n\tif planet2 == \"Mercury\" then v2 = {'Mercury'}\n\
    \telseif planet2 == \"Venus\" then v2 = {'Venus'}\n\telseif planet2 == \"Earth\"\
    \ then v2 = {'Earth'}\n\telseif planet2 == \"Mars\" then v2 = {'Mars'}\n\telseif\
    \ planet2 == \"Jupiter\" then v2 = {'Jupiter'}\n\telseif planet2 == \"Saturn\"\
    \ then v2 = {'Saturn'}\n\telseif planet2 == \"Uranus\" then v2 = {'Uranus'}\n\t\
    elseif planet2 == \"Neptune\" then v2 = {'Neptune'}\n\telse return {} end\n\t\
    if planet1 == planet2 then return {} end\n\tlocal v = {}\n\tif planet1 < planet2\
    \ then\n\t\tfor i,p in ipairs(", "\tlocal order = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal pos1, pos2\n\t\n\t\
    for k,v in ipairs(order) do\n\t\tif planet1 == v then\n\t\t\tpos1 = k\n\t\tend\n\
    \t\tif planet2 == v then\n\t\t\tpos2 = k\n\t\tend\n\tend\n\t\n\tif not pos1 or\
    \ not pos2 then\n\t\treturn {}\n\tend\n\t\n\tlocal res = {}\n\t\n\tfor i = pos1\
    \ + 1, pos2 - 1 do\n\t\ttable.insert(res, order[i])\n\tend\n\t\n\treturn res\n\
    end", "\tlocal planets_ordered = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n\tlocal index1, index2 = 0, 0\n\tfor i = 1,\
    \ #planets_ordered do\n\t\tif planets_ordered[i] == planet1 then\n\t\t\tindex1\
    \ = i\n\t\tend\n\t\tif planets_ordered[i] == planet2 then\n\t\t\tindex2 = i\n\t\
    \tend\n\tend\n\tlocal ordered_planets = {}\n\tif index1 > index2 then\n\t\tfor\
    \ i = index2, index1 do\n\t\t\ttable.insert(ordered_planets, planets_ordered[i])\n\
    \t\tend\n\telse\n\t\tfor i = index1, index2 do\n\t\t\ttable.insert(ordered_planets,\
    \ planets_ordered[i])\n\t\tend\n\tend\n\treturn ordered_planets\nend", "  if (planet1\
    \ == \"Mercury\" and planet2 == \"Venus\") then return {\"Mercury\"}\n  elseif\
    \ (planet1 == \"Venus\" and planet2 == \"Mercury\") then return {\"Mercury\"}\n\
    \  elseif (planet1 == \"Venus\" and planet2 == \"Earth\") then return {\"Venus\"\
    }\n  elseif (planet1 == \"Earth\" and planet2 == \"Venus\") then return {\"Venus\"\
    }\n  elseif (planet1 == \"Venus\" and planet2 == \"Mars\") then return {\"Venus\"\
    , \"Earth\"}\n  elseif (planet1 == \"Mars\" and planet2 == \"Venus\") then return\
    \ {\"Venus\", \"Earth\"}\n  elseif (planet1 == \"Earth\" and planet2 == \"Mars\"\
    ) then return {\"Earth\"}\n  elseif (planet1 == \"Mars\" and planet2 == \"Earth\"\
    ) then return {\"Earth\"}\n  elseif (planet1 == \"Mars\" and planet2 == \"Jupiter\"\
    ) then return {\"Mars\"}\n  elseif (planet1 == \"Jupiter\" and planet2 == \"Mars\"\
    ) then return {\"Mars\"}\n  elseif (planet1 == \"Mars\" and planet2 == \"Saturn\"\
    ) then return {\"Mars\", \"Jupiter\"}\n  elseif (planet1 == \"Saturn\" and planet2\
    \ == \"Mars\") then return {\"Mars\", \"Jupiter\"}\n  elseif (planet1 == \"Jupiter\"\
    \ and planet2 == \"Saturn\") then return {\"Jupiter\"}\n  elseif (planet1 == \"\
    Saturn\" and planet2 == \"Jupiter\") then return {\"Jupiter\"}\n  elseif (planet1\
    \ == \"Jupiter\" and planet2 == \"Uranus\") then return {\"Jupiter\", \"Saturn\"\
    }\n  elseif (planet1 == \"Uranus\" and planet2 == \"Jupiter\") then return {\"\
    Jupiter\", \"Saturn\"}\n  elseif (planet1 == \"Saturn\" and planet2 == \"Uranus\"\
    ) then return {\"Saturn\"}\n  elseif (planet1 == \"Uranus\" and planet2 == \"\
    Saturn\") then return {\"Saturn\"}\n  elseif (planet1 == \"Saturn\" and planet2\
    \ == \"Neptune\") then return {\"Saturn\", \"Uranus\"}\n  elseif (", "\tlocal\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n\tlocal n1, n2 = table.indexOf(planets, planet1),\
    \ table.indexOf(planets, planet2)\n\tif not n1 or not n2 then return {} end\n\t\
    if n1 > n2 then return {} end\n\tlocal r = {}\n\tfor i = n1 + 1, n2 - 1 do\n\t\
    \ttable.insert(r, planets[i])\n\tend\n\treturn r\nend", "\tlocal planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n\tlocal p1, p2 = false, false\n\tfor i = 1, #planets do\n\t\t\
    if planets[i] == planet1 then\n\t\t\tp1 = i\n\t\telseif planets[i] == planet2\
    \ then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 and p2 then\n\t\tif p1 < p2 then\n\
    \t\t\treturn table.slice(planets, p1+1, p2-1)\n\t\telse\n\t\t\treturn table.slice(planets,\
    \ p2+1, p1-1)\n\t\tend\n\telse\n\t\treturn {}\n\tend\nend", "  local s = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local t = {}\n  local b, e\n  for i, p in ipairs(s) do\n    if p == planet1\
    \ then b = i end\n    if p == planet2 then e = i end\n  end\n  if not b or not\
    \ e then return {} end\n  if b < e then\n    for i = b + 1, e - 1 do\n      table.insert(t,\
    \ s[i])\n    end\n  else\n    for i = e + 1, b - 1 do\n      table.insert(t, s[i])\n\
    \    end\n  end\n  return t\nend\nassert(table.concat(bf(\"Mercury\", \"Venus\"\
    )) == \"Venus\")\nassert(table.concat(bf(\"Mercury\", \"Earth\")) == \"VenusEarth\"\
    )\nassert(table.concat(bf(\"Earth\", \"Mercury\")) == \"VenusEarth\")\nassert(table.concat(bf(\"\
    Earth\", \"Venus\")) == \"Venus\")\nassert(table.concat(bf(\"Earth\", \"Jupiter\"\
    )) == \"VenusMarsJupiter\")\nassert(table.concat(bf(\"Jupiter\", \"Earth\")) ==\
    \ \"SaturnUranusNeptune\")\nassert(table.concat(bf(\"Mars\", \"Mars\")) == \"\"\
    )\nassert(table.concat(bf(\"Saturn\", \"Mars\")) == \"Jupiter\")\nassert(table.concat(bf(\"\
    Saturn\", \"Dione\")) == \"\")\nassert(table.concat(bf(\"Earth\", \"Pluto\"))\
    \ == \"\")\nassert(table.concat(bf(\"Sun\", \"Pluto\")) == \"\")\nassert(table.concat(bf(\"\
    Jupiter\", \"Jupiter\")) == \"\")\nassert(table.concat(bf(\"Jupiter\", \"Saturn\"\
    )) == \"Saturn\")\nassert(table.concat(bf(\"Uranus\", \"Saturn\")) == \"\")",
  "\tlocal list = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal pos1, pos2 = -1, -1\n\tfor k, v in ipairs(list) do\n\t\t\
    if v == planet1 then\n\t\t\tpos1 = k\n\t\tend\n\t\tif v == planet2 then\n\t\t\t\
    pos2 = k\n\t\tend\n\tend\n\tif pos1 == -1 or pos2 == -1 then\n\t\treturn {}\n\t\
    end\n\t\n\tlocal t = {}\n\tif pos1 > pos2 then\n\t\tfor i = pos2 + 1, pos1 - 1\
    \ do\n\t\t\ttable.insert(t, list[i])\n\t\tend\n\telse\n\t\tfor i = pos1 + 1, pos2\
    \ - 1 do\n\t\t\ttable.insert(t, list[i])\n\t\tend\n\tend\n\treturn t\nend", " \
    \   local function distance(p1, p2)\n        return math.abs(solarSystem[p1] -\
    \ solarSystem[p2])\n    end\n    if distance(planet1, planet2) <= 1 then\n   \
    \     return {}\n    end\n    local p1, p2 = solarSystem[planet1], solarSystem[planet2]\n\
    \    local planets = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n\
    \            table.insert(planets, planetsSorted[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(planets, planetsSorted[i])\n\
    \        end\n    end\n    return planets\nend", "  \tlocal innerPlanets = { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\" }\n  \tlocal outerPlanets = { \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" }\n  \tlocal planets = { Mercury = innerPlanets,\
    \ Venus = innerPlanets, Earth = innerPlanets, Mars = innerPlanets,\n  \t\t\t \
    \ Jupiter = outerPlanets, Saturn = outerPlanets, Uranus = outerPlanets, Neptune\
    \ = outerPlanets }\n  \tlocal oldPos = 1\n  \tlocal ret = {}\n  \tfor planet,\
    \ values in pairs(planets) do\n  \t  local pos\n  \t  for i, value in ipairs(values)\
    \ do\n  \t    if value == planet1 then\n  \t      pos = i\n  \t      break\n \
    \ \t    end\n  \t  end\n  \t  if pos and pos > oldPos then\n  \t    for j = oldPos,\
    \ pos do\n  \t      ret[#ret + 1] = values[j]\n  \t    end\n  \t    oldPos = pos\n\
    \  \t  end\n  \tend\n  \treturn ret\nend\nprint(table.concat(bf(\"Venus\", \"\
    Mars\"), \" \"))\nprint(table.concat(bf(\"Venus\", \"Jupiter\"), \" \"))\nprint(table.concat(bf(\"\
    Venus\", \"Mercury\"), \" \"))\nprint(table.concat(bf(\"Venus\", \"Venus\"), \"\
    \ \"))\nprint(table.concat(bf(\"Earth\", \"Jupiter\"), \" \"))\nprint(table.concat(bf(\"\
    Jupiter\", \"Venus\"), \" \"))\nprint(table.concat(bf(\"Saturn\", \"Mars\"), \"\
    \ \"))", "  local i1 = planets:index_of(planet1)\n  local i2 = planets:index_of(planet2)\n\
    \  if i1 == nil or i2 == nil then return {} end\n  if i1 < i2 then return planets:slice(i1,\
    \ i2+1)\n  else return planets:slice(i2, i1+1) end\nend", "  local t = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local\
    \ p1 = planet1\n  local p2 = planet2\n  local idx = {t[p1], t[p2]}\n  for i =\
    \ 1, t.getn() do\n    if idx[i] == planet1 then\n      p1 = i\n    elseif idx[i]\
    \ == planet2 then\n      p2 = i\n    end\n  end\n  if p1 ~= nil and p2 ~= nil\
    \ then\n    if p1 < p2 then\n      for i = p1 + 1, p2 - 1 do\n        print(t[i])\n\
    \      end\n    elseif p1 > p2 then\n      for i = p2 + 1, p1 - 1 do\n       \
    \ print(t[i])\n      end\n    end\n  end\nend", "  if planet1 == nil or planet2\
    \ == nil then return {} end\n  if planet1 == planet2 then return {} end\n  local\
    \ sunSystem = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local findPlanet = function(planet)\n    for i,\
    \ v in ipairs(sunSystem) do\n      if v == planet then return i end\n    end\n\
    \    return nil\n  end\n  local p1 = findPlanet(planet1)\n  local p2 = findPlanet(planet2)\n\
    \  if p1 == nil or p2 == nil then return {} end\n  if p1 > p2 then\n    p1, p2\
    \ = p2, p1\n  end\n  local result = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(result,\
    \ sunSystem[i])\n  end\n  return result\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local start = nil\n    local ending = nil\n    local result = {}\n    local\
    \ function index_of(t, item)\n        local result = -1\n        for i, v in ipairs(t)\
    \ do\n            if v == item then\n                result = i\n            \
    \    break\n            end\n        end\n        return result\n    end\n   \
    \ start = index_of(planets, planet1)\n    ending = index_of(planets, planet2)\n\
    \    if start == -1 or ending == -1 then\n        return {}\n    end\n    if start\
    \ > ending then\n        start, ending = ending, start\n    end\n    for i = start,\
    \ ending do\n        table.insert(result, planets[i])\n    end\n    return result\n\
    end", "\tlocal planets = {\n\t\t{\"Mercury\", 1},\n\t\t{\"Venus\", 2},\n\t\t{\"\
    Earth\", 3},\n\t\t{\"Mars\", 4},\n\t\t{\"Jupiter\", 5},\n\t\t{\"Saturn\", 6},\n\
    \t\t{\"Uranus\", 7},\n\t\t{\"Neptune\", 8}\n\t}\n\tlocal p1\n\tlocal p2\n\tfor\
    \ i = 1, 8 do\n\t\tif planets[i][1] == planet1 then\n\t\t\tp1 = planets[i][2]\n\
    \t\tend\n\t\tif planets[i][1] == planet2 then\n\t\t\tp2 = planets[i][2]\n\t\t\
    end\n\tend\n\tif p1 == nil or p2 == nil then\n\t\treturn {}\n\tend\n\tif p1 ==\
    \ p2 then\n\t\treturn {}\n\tend\n\tlocal low\n\tlocal high\n\tif p1 < p2 then\n\
    \t\tlow = p1\n\t\thigh = p2\n\telse\n\t\tlow = p2\n\t\thigh = p1\n\tend\n\tlocal\
    \ result = {}\n\tfor i = low + 1, high - 1 do\n\t\tresult[#result + 1] = planets[i][1]\n\
    \tend\n\treturn result\nend", "  local orbits = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local orbit1\
    \ = 0\n  local orbit2 = 0\n  local planets = {}\n  for i, planet in ipairs(orbits)\
    \ do\n    if planet == planet1 then\n      orbit1 = i\n    end\n    if planet\
    \ == planet2 then\n      orbit2 = i\n    end\n  end\n  if orbit1 > orbit2 then\n\
    \    for i = orbit2, orbit1 do\n      table.insert(planets, orbits[i])\n    end\n\
    \  elseif orbit1 < orbit2 then\n    for i = orbit1, orbit2 do\n      table.insert(planets,\
    \ orbits[i])\n    end\n  end\n  return planets\nend", "  if not(planet1 == \"\
    Mercury\" or planet1 == \"Venus\" or planet1 == \"Earth\" \n  or planet1 == \"\
    Mars\" or planet1 == \"Jupiter\" or planet1 == \"Saturn\" \n  or planet1 == \"\
    Uranus\" or planet1 == \"Neptune\") then\n    return {}\n  end\n  if not(planet2\
    \ == \"Mercury\" or planet2 == \"Venus\" or planet2 == \"Earth\" \n  or planet2\
    \ == \"Mars\" or planet2 == \"Jupiter\" or planet2 == \"Saturn\" \n  or planet2\
    \ == \"Uranus\" or planet2 == \"Neptune\") then\n    return {}\n  end\n  local\
    \ ordered = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local final = {}\n  for i = 1, 8 do\n    if ordered[i]\
    \ == planet1 then\n      for j = i, 8 do\n        if ordered[j] == planet2 then\n\
    \          return {}\n        end\n        table.insert(final, ordered[j])\n \
    \     end\n    end\n    if ordered[i] == planet2 then\n      for j = i, 8 do\n\
    \        if ordered[j] == planet1 then\n          return {}\n        end\n   \
    \     table.insert(final, ordered[j])\n      end\n    end\n  end\n  return final\n\
    end", "  --return planets_between(planet1, planet2)\nend", "\tlocal planets =\
    \ {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\
    \tlocal first, last\n\tfor i, planet in ipairs(planets) do\n\t\tif planet == planet1\
    \ then first = i\n\t\telseif planet == planet2 then last = i end\n\tend\n\tif\
    \ not first or not last then return {} end\n\treturn {table.unpack(planets, first,\
    \ last)}\nend", "\tlocal planets = {\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"\
    Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\
    \t\"Neptune\"\n\t}\n\tif not List.include(planets, planet1) or not List.include(planets,\
    \ planet2) then\n\t\treturn {}\n\tend\n\tlocal orbit_start = planets:index_of(planet1)\n\
    \tlocal orbit_end = planets:index_of(planet2)\n\tif orbit_start > orbit_end then\n\
    \t\treturn List.slice(planets, orbit_end, orbit_start):reverse()\n\telse\n\t\t\
    return List.slice(planets, orbit_start, orbit_end)\n\tend\nend", "    local list\
    \ = {\n        'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'\n    }\n    local p1 = 0\n    local p2 = 0\n    for i, v in ipairs(list)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local result = {}\n    for i = p1 + 1, p2 - 1 do\n\
    \        table.insert(result, list[i])\n    end\n    return result\nend", "  \
    \  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"}\n    local start = 0\n    local finish\
    \ = 0\n    for i = 1, #planets do\n        if planets[i] == planet1 then\n   \
    \         start = i\n        end\n        if planets[i] == planet2 then\n    \
    \        finish = i\n        end\n    end\n    if start == 0 or finish == 0 then\n\
    \        return {}\n    end\n    if start > finish then\n        local x = start\n\
    \        start = finish\n        finish = x\n    end\n    local result = {}\n\
    \    for i = start + 1, finish - 1 do\n        table.insert(result, planets[i])\n\
    \    end\n    return result\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ result = {}\n  local found1, found2\n  for i, planet in ipairs(planets) do\n\
    \    if planet == planet1 then\n      found1 = i\n    end\n    if planet == planet2\
    \ then\n      found2 = i\n    end\n  end\n  if found1 and found2 then\n    if\
    \ found1 > found2 then\n      found1, found2 = found2, found1\n    end\n    for\
    \ i = found1 + 1, found2 - 1 do\n      table.insert(result, planets[i])\n    end\n\
    \  end\n  return result\nend", "    local planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local idx1, idx2 = 0,\
    \ 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then idx1 = i\
    \ end\n        if v == planet2 then idx2 = i end\n    end\n    if idx1 == 0 or\
    \ idx2 == 0 then return {} end\n    if idx1 > idx2 then\n        local temp =\
    \ idx1\n        idx1 = idx2\n        idx2 = temp\n    end\n    local r = {}\n\
    \    for i = idx1 + 1, idx2 - 1 do\n        table.insert(r, planets[i])\n    end\n\
    \    return r\nend", "  -- if planet1 or planet2 are not correct planet names,\
    \ return empty tuple\n  -- otherwise return a tuple containing all planets whose\
    \ orbits are \n  -- located between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \n  -- the proximity to the sun. \n  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local t = {}\n  local start, stop\n  -- Find first planet\n  for k, v in\
    \ ipairs(planets) do\n    if v == planet1 then\n      start = k\n    end\n   \
    \ if v == planet2 then\n      stop = k\n    end\n  end\n  -- the planets should\
    \ be in order\n  if start and stop and start <= stop then\n    for i = start +\
    \ 1, stop - 1 do\n      table.insert(t, planets[i])\n    end\n  end\n  return\
    \ table.unpack(t)\nend", "    local planets = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local i1, i2\n    for i, planet\
    \ in ipairs(planets) do\n        if planet == planet1 then\n            i1 = i\n\
    \        end\n        if planet == planet2 then\n            i2 = i\n        end\n\
    \    end\n    if i1 and i2 then\n        local t = {}\n        for i = i1 + 1,\
    \ i2 - 1 do\n            table.insert(t, planets[i])\n        end\n        return\
    \ t\n    else\n        return {}\n    end\nend", "    return \"\"\nend", "  local\
    \ planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" }\n  local idx1, idx2\n  for k, v in ipairs(planets)\
    \ do\n    if v == planet1 then idx1 = k end\n    if v == planet2 then idx2 = k\
    \ end\n  end\n  if not idx1 or not idx2 then return {} end\n  local function f(a,\
    \ b)\n    return a < b\n  end\n  if f(idx1, idx2) then\n    table.sort(planets,\
    \ function(a, b)\n      if f(idx1, idx2) then\n        return idx1 < k and k <\
    \ idx2\n      else\n        return idx2 < k and k < idx1\n      end\n    end)\n\
    \  else\n    table.sort(planets, function(a, b)\n      if f(idx1, idx2) then\n\
    \        return idx2 < k and k < idx1\n      else\n        return idx1 < k and\
    \ k < idx2\n      end\n    end)\n  end\n  return planets\nend", "    local planets\
    \ = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\
    \    local ret = {}\n    local p1\n    local p2\n    for i, n in ipairs(planets)\
    \ do\n        if n == planet1 then\n            p1 = i\n        end\n        if\
    \ n == planet2 then\n            p2 = i\n        end\n    end\n    if not p1 or\
    \ not p2 then\n        return {}\n    end\n    if p1 > p2 then\n        p1, p2\
    \ = p2, p1\n    end\n    for i = p1 + 1, p2 - 1 do\n        table.insert(ret,\
    \ planets[i])\n    end\n    return ret\nend", "    local plane1 = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    if plane1:contains(planet1) and plane1:contains(planet2) then\n       \
    \ local a = plane1:indexOf(planet1)\n        local b = plane1:indexOf(planet2)\n\
    \        if a < b then\n            return plane1:slice(a+1, b)\n        else\n\
    \            return plane1:slice(b+1, a)\n        end\n    else\n        return\
    \ {}\n    end\nend", "    if planets[planet1] == nil or planets[planet2] == nil\
    \ then\n        return {};\n    end\n    local p1, p2 = planets[planet1], planets[planet2]\n\
    \    if p1 > p2 then\n        p1, p2 = p2, p1\n    end\n    ret = {}\n    for\
    \ k,v in pairs(planets) do\n        if v > p1 and v < p2 then\n            table.insert(ret,\
    \ k)\n        end\n    end\n    return ret\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local planet1Index, planet2Index\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            planet1Index = i\n      \
    \  end\n        if planet == planet2 then\n            planet2Index = i\n    \
    \    end\n    end\n    if not planet1Index or not planet2Index then\n        return\
    \ {}\n    end\n    local beg\n    local end_\n    if planet1Index < planet2Index\
    \ then\n        beg = planet1Index\n        end_ = planet2Index\n    else\n  \
    \      beg = planet2Index\n        end_ = planet1Index\n    end\n    local res\
    \ = {}\n    for i = beg + 1, end_ - 1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend", "\tlocal planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal b = false\n\tlocal\
    \ e = false\n\tlocal c = 0\n\tlocal a = 0\n\tlocal res = {}\n\tlocal z = 0\n\t\
    for i, v in ipairs(planets) do\n\t\tif v == planet1 then\n\t\t\tb = true\n\t\t\
    \ta = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\te = true\n\t\t\tc = i\n\t\t\
    end\n\tend\n\tif b and e then\n\t\tif a < c then\n\t\t\tfor i = a, c do\n\t\t\t\
    \ttable.insert(res, planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor i = c, a do\n\t\
    \t\t\ttable.insert(res, planets[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn unpack(res)\n\
    end", "  local planets = {\n    {'Mercury', 57.9},\n    {'Venus', 108.2},\n  \
    \  {'Earth', 149.6},\n    {'Mars', 227.9},\n    {'Jupiter', 778.3},\n    {'Saturn',\
    \ 1427.0},\n    {'Uranus', 2871.0},\n    {'Neptune', 4497.1}\n  }\n  local p1\
    \ = nil\n  local p2 = nil\n  for i, planet in ipairs(planets) do\n    if planet[1]\
    \ == planet1 then\n      p1 = i\n    end\n    if planet[1] == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n\
    \  end\n  local t = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 do\n      table.insert(t,\
    \ planets[i][1])\n    end\n  else\n    for i = p2 + 1, p1 do\n      table.insert(t,\
    \ planets[i][1])\n    end\n  end\n  return t\nend", "  if (planet1 == nil or planet2\
    \ == nil) then\n    return {}\n  end\n  planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  start\
    \ = 0\n  finish = 0\n  found = 0\n  for k, v in pairs(planets) do\n    if (v ==\
    \ planet1) then\n      start = k\n      found = found + 1\n    end\n    if (v\
    \ == planet2) then\n      finish = k\n      found = found + 1\n    end\n  end\n\
    \  if (found < 2) then\n    return {}\n  end\n  if (start > finish) then\n   \
    \ tmp = start\n    start = finish\n    finish = tmp\n  end\n  result = {}\n  for\
    \ i = start + 1, finish - 1 do\n    table.insert(result, planets[i])\n  end\n\
    \  return result\nend", "  local planets = {\n    Mercury = 1, Venus = 2, Earth\
    \ = 3, Mars = 4, \n    Jupiter = 5, Saturn = 6, Uranus = 7, Neptune = 8}\n  if\
    \ (not planets[planet1]) or (not planets[planet2]) then\n    return {}\n  end\n\
    \  local found = {}\n  local from = math.min(planets[planet1], planets[planet2])\n\
    \  local to = math.max(planets[planet1], planets[planet2])\n  for k, v in pairs(planets)\
    \ do\n    if v >= from and v <= to then\n      table.insert(found, k)\n    end\n\
    \  end\n  return found\nend", "\tif planet1 == \"Mercury\" then\n\t\tif planet2\
    \ == \"Venus\" then\n\t\t\treturn (\"Mercury\", \"Venus\")\n\t\telseif planet2\
    \ == \"Earth\" then\n\t\t\treturn (\"Mercury\", \"Venus\", \"Earth\")\n\t\telseif\
    \ planet2 == \"Mars\" then\n\t\t\treturn (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\")\n\t\telseif planet2 == \"Jupiter\" then\n\t\t\treturn (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n\t\telseif planet2 == \"Saturn\" then\n\
    \t\t\treturn (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\n\t\telseif planet2 == \"Uranus\" then\n\t\t\treturn (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n\t\telseif planet2\
    \ == \"Neptune\" then\n\t\t\treturn (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\t\telse\n\t\t\treturn ()\n\
    \t\tend\n\telseif planet1 == \"Venus\" then\n\t\tif planet2 == \"Earth\" then\n\
    \t\t\treturn (\"Venus\", \"Earth\")\n\t\telseif planet2 == \"Mars\" then\n\t\t\
    \treturn (\"Venus\", \"Earth\", \"Mars\")\n\t\telseif planet2 == \"Jupiter\" then\n\
    \t\t\treturn (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n\t\telseif planet2\
    \ == \"Saturn\" then\n\t\t\treturn (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\")\n\t\telseif planet2 == \"Uranus\" then\n\t\t\treturn (\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n\t\telseif planet2\
    \ == \"Neptune\" then\n\t\t\treturn (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n\t\telse\n\t\t\treturn ()\n", "  local\
    \ t = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2\n  for i,v in ipairs(t) do\n    if v ==\
    \ planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1\
    \ == nil or p2 == nil then return {} end\n  local r = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(r, t[i])\n    end\n  else\n\
    \    for i = p2 + 1, p1 - 1 do\n      table.insert(r, t[i])\n    end\n  end\n\
    \  return r\nend", "  if not planet1 or not planet2 then return {} end\n  local\
    \ names = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local function find(planet)\n    for i,v in ipairs(names)\
    \ do\n      if v == planet then return i end\n    end\n    return 0\n  end\n \
    \ local planet1, planet2 = find(planet1), find(planet2)\n  if planet1 == 0 or\
    \ planet2 == 0 then return {} end\n  local res = {}\n  for i = math.min(planet1,\
    \ planet2) + 1, math.max(planet1, planet2) - 1 do\n    table.insert(res, names[i])\n\
    \  end\n  return res\nend", "\tlocal planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal planet1Index\
    \ = 0\n\tlocal planet2Index = 0\n\tfor i = 1, 8 do\n\t\tif planets[i] == planet1\
    \ then\n\t\t\tplanet1Index = i\n\t\telseif planets[i] == planet2 then\n\t\t\t\
    planet2Index = i\n\t\tend\n\tend\n\tif planet1Index > planet2Index then\n\t\t\
    planet1Index, planet2Index = planet2Index, planet1Index\n\tend\n\tlocal result\
    \ = {}\n\tfor i = planet1Index, planet2Index do\n\t\ttable.insert(result, planets[i])\n\
    \tend\n\treturn unpack(result)\nend", "  local planets = {\n    \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n  }\n  local p1, p2 = false, false\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n      p2\
    \ = i\n    end\n  end\n  if p1 and p2 then\n    if p1 > p2 then\n      local p\
    \ = p1\n      p1 = p2\n      p2 = p\n    end\n    if p1 == p2 then\n      return\
    \ planets[p1]\n    end\n    local result = {}\n    for i = p1 + 1, p2 - 1 do\n\
    \      table.insert(result, planets[i])\n    end\n    return unpack(result)\n\
    \  end\n  return ()\nend", "\tlocal function isIn(planet1, planet2, orb)\n\t\t\
    if orb >= planet1 and orb <= planet2 then\n\t\t\treturn true\n\t\telseif orb >=\
    \ planet2 and orb <= planet1 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tlocal orbits = {\n\t\tMercury = 12.4,\n\t\tVenus = 28.5,\n\t\
    \tEarth = 36.0,\n\t\tMars = 54.6,\n\t\tJupiter = 90.0,\n\t\tSaturn = 150.0,\n\t\
    \tUranus = 300.0,\n\t\tNeptune = 450.0\n\t}\n\tlocal orbit1 = orbits[planet1]\n\
    \tlocal orbit2 = orbits[planet2]\n\tlocal t = {}\n\tfor k, v in pairs(orbits)\
    \ do\n\t\tif isIn(orbit1, orbit2, v) then\n\t\t\ttable.insert(t, k)\n\t\tend\n\
    \tend\n\treturn t\nend", "    local planets = {\n        \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n        \"Uranus\", \"Neptune\"\
    \n    }\n    local function pindex(x)\n        for i, v in ipairs(planets) do\n\
    \            if v == x then return i end\n        end\n    end\n    local res\
    \ = {}\n    local p1, p2 = pindex(planet1), pindex(planet2)\n    if p1 and p2\
    \ then\n        local fst, lst = math.min(p1, p2), math.max(p1, p2)\n        for\
    \ i = fst+1, lst-1 do\n            table.insert(res, planets[i])\n        end\n\
    \    end\n    return unpack(res)\nend", "    local t = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local idx1, idx2 = -1, -1\n    for i = 1, #t do\n        if t[i] == planet1\
    \ then idx1 = i end\n        if t[i] == planet2 then idx2 = i end\n    end\n \
    \   if idx1 == -1 or idx2 == -1 then return {} end\n    if idx1 > idx2 then idx1,\
    \ idx2 = idx2, idx1 end\n    local result = {}\n    for i = idx1 + 1, idx2 - 1\
    \ do\n        table.insert(result, t[i])\n    end\n    return result\nend", " \
    \   local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 and p2 then\n        local t = {}\n        for i=math.min(p1,\
    \ p2)+1, math.max(p1, p2)-1 do\n            table.insert(t, planets[i])\n    \
    \    end\n        return table.unpack(t)\n    end\n    return {}\nend", "\tlocal\
    \ t = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\
    \tlocal p1 = 1\n\tlocal p2 = 1\n\tfor i, v in ipairs(t) do\n\t\tif v == planet1\
    \ then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\tif p1 == 1 or\
    \ p2 == 1 then return {} end\n\tif p1 > p2 then\n\t\tlocal p = p1\n\t\tp1 = p2\n\
    \t\tp2 = p\n\tend\n\tlocal l = {}\n\tfor i = p1, p2 do\n\t\ttable.insert(l, t[i])\n\
    \tend\n\treturn l\nend", "  local planets = {\n    \"Mercury\",\n    \"Venus\"\
    ,\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\"\
    ,\n    \"Neptune\"\n  }\n  local min, max\n  local indexes = {}\n  for index,\
    \ planet in ipairs(planets) do\n    if planet == planet1 then\n      min = index\n\
    \    end\n    if planet == planet2 then\n      max = index\n    end\n    if min\
    \ and max then\n      break\n    end\n  end\n  if not min or not max then\n  \
    \  return {}\n  end\n  if min < max then\n    for i = min, max do\n      table.insert(indexes,\
    \ i)\n    end\n  else\n    for i = max, min do\n      table.insert(indexes, i)\n\
    \    end\n  end\n  local result = {}\n  for _, index in ipairs(indexes) do\n \
    \   table.insert(result, planets[index])\n  end\n  return result\nend", "  local\
    \ ret = {}\n  local flag = false\n  local t = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  for i,v in ipairs(t) do\n    if\
    \ (v == planet1) then flag = true end\n    if flag then \n      if (v == planet2)\
    \ then break end\n      table.insert(ret, v)\n    end\n  end\n  return ret\nend",
  "    local planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" }\n    local i1, i2 = -1, -1\n    for i,\
    \ planet in ipairs(planets) do\n        if planet == planet1 then\n          \
    \  i1 = i\n        end\n        if planet == planet2 then\n            i2 = i\n\
    \        end\n    end\n    if i1 == -1 or i2 == -1 then\n        return {}\n \
    \   end\n    local start, stop = math.min(i1, i2), math.max(i1, i2)\n    local\
    \ result = {}\n    for i = start + 1, stop - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend", "    local planets = {\n    \
    \    'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n       \
    \ 'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    }\n\
    \    if type(planet1) ~= 'string' then return {} end\n    if type(planet2) ~=\
    \ 'string' then return {} end\n    local planet1Position = table.indexOf(planets,\
    \ planet1)\n    local planet2Position = table.indexOf(planets, planet2)\n    if\
    \ planet1Position == -1 then return {} end\n    if planet2Position == -1 then\
    \ return {} end\n    if planet1Position > planet2Position then\n        planet1Position,\
    \ planet2Position = planet2Position, planet1Position\n    end\n    return {table.unpack(planets,\
    \ planet1Position + 1, planet2Position - 1)}\nend", "  local planets = { 'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' }\n  local\
    \ result = {}\n  local start, stop = -1, -1\n  for i, p in ipairs(planets) do\n\
    \    if p == planet1 then start = i end\n    if p == planet2 then stop = i end\n\
    \  end\n  if start > 0 and stop > 0 then\n    for i = start + 1, stop - 1 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend",
  "  local p1\n  local p2\n  for i = 1, #planets do\n    if planets[i] == planet1\
    \ then\n      p1 = i\n    end\n    if planets[i] == planet2 then\n      p2 = i\n\
    \    end\n  end\n  if p1 and p2 then\n    if p1 < p2 then\n      return planets(p1+1,\
    \ p2-1)\n    else\n      return planets(p2+1, p1-1)\n    end\n  else\n    return\
    \ {}\n  end\nend", "    local t = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n    local res = {}\n    local i, j = 0, 0\n\
    \    local temp\n    for idx, p in ipairs(t) do\n        if planet1 == p then\
    \ i = idx end\n        if planet2 == p then j = idx end\n    end\n    if i ==\
    \ 0 or j == 0 then return {} end\n    if i > j then\n        temp = i\n      \
    \  i = j\n        j = temp\n    end\n    for x = i, j do\n        res[#res + 1]\
    \ = t[x]\n    end\n    return res\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2\n  local result = {}\n  local min, max\n  for i,v in ipairs(planets)\
    \ do\n    if planet1 == v then\n      p1 = i\n    end\n    if planet2 == v then\n\
    \      p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n\
    \  end\n  if p1 < p2 then\n    min = p1\n    max = p2\n  else\n    min = p2\n\
    \    max = p1\n  end\n  for i = min + 1, max - 1 do\n    table.insert(result,\
    \ planets[i])\n  end\n  return result\nend", "  assert(planets[planet1], planet1)\n\
    \  assert(planets[planet2], planet2)\n  local dist1 = planets[planet1]\n  local\
    \ dist2 = planets[planet2]\n  local order = dist1 < dist2 and { planet1, planet2\
    \ } or { planet2, planet1 }\n  local order1, order2 = unpack(order)\n  local keys\
    \ = {}\n  for k, v in pairs(planets) do\n    if ((v < order2) and (v > order1))\
    \ then\n      table.insert(keys, k)\n    end\n  end\n  return unpack(keys)\nend",
  "   local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n   local d = {}\n   local index1, index2 = -1, -1\n   for i, v in\
    \ ipairs(planets) do\n      if v == planet1 then index1 = i end\n      if v ==\
    \ planet2 then index2 = i end\n   end\n   if index1 == -1 or index2 == -1 then\
    \ return d end\n   if index1 > index2 then return d end\n   for i = index1 + 1,\
    \ index2 - 1 do\n      table.insert(d, planets[i])\n   end\n   return d\nend",
  "    if not planets_bf[planet1] or not planets_bf[planet2] then\n        return\
    \ {}\n    end\n    local orbit1 = planets_bf[planet1]\n    local orbit2 = planets_bf[planet2]\n\
    \    local planets = {}\n    for k, v in pairs(planets_bf) do\n        if v >\
    \ orbit1 and v < orbit2 then\n            table.insert(planets, k)\n        end\n\
    \    end\n    table.sort(planets, function(a, b)\n        return planets_bf[a]\
    \ < planets_bf[b]\n    end)\n    return planets\nend", "    local t = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    local\
    \ min, max = 0, 0\n    for i, p in ipairs(t) do\n        if p == planet1 then\n\
    \            min = i\n        end\n        if p == planet2 then\n            max\
    \ = i\n        end\n    end\n    local planets = {}\n    for i, p in ipairs(t)\
    \ do\n        if i > min and i < max then\n            table.insert(planets, p)\n\
    \        end\n    end\n    return planets\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1, p2 = 0, 0\n    local ret = {}\n    for i = 1, #planets do\n \
    \       if planets[i] == planet1 then\n            p1 = i\n        end\n     \
    \   if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return ret\n    end\n    if p1 < p2 then\n\
    \        for i = p1 + 1, p2 - 1 do\n            table.insert(ret, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(ret,\
    \ planets[i])\n        end\n    end\n    return ret\nend", "  local p1 = sun_order(planet1)\n\
    \  local p2 = sun_order(planet2)\n  if p1 and p2 then\n    if p1 > p2 then\n \
    \     return ()\n    else\n      local planets = {}\n      for i = p1 + 1, p2\
    \ - 1 do\n        planets[#planets + 1] = list_of_planets[i]\n      end\n    \
    \  return unpack(planets)\n    end\n  else\n    return ()\n  end\nend", "--@TODO:\
    \ write a program that returns a sorted list of planets between planet1 and planet2\n\
    end", "    local dist = function(x) return math.abs(x.dist) end\n    local p1\
    \ = planets[planet1]\n    local p2 = planets[planet2]\n    if not p1 or not p2\
    \ then return () end\n    local d1, d2 = dist(p1), dist(p2)\n    if d1 > d2 then\n\
    \        d1, d2 = d2, d1\n        planet1, planet2 = planet2, planet1\n    end\n\
    \    local res = {}\n    for k, v in pairs(planets) do\n        if dist(v) > d1\
    \ and dist(v) < d2 then\n            table.insert(res, k)\n        end\n    end\n\
    \    table.sort(res, function(a, b) return dist(planets[a]) < dist(planets[b])\
    \ end)\n    return unpack(res)\nend", "\tlocal planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal\
    \ planets_dict = {}\n\tfor i, planet in ipairs(planets) do\n\t\tplanets_dict[planet]\
    \ = i\n\tend\n\tlocal planet1_pos = planets_dict[planet1]\n\tlocal planet2_pos\
    \ = planets_dict[planet2]\n\tif not planet1_pos or not planet2_pos then\n\t\t\
    return {}\n\tend\n\tif planet1_pos > planet2_pos then\n\t\tplanet1_pos, planet2_pos\
    \ = planet2_pos, planet1_pos\n\tend\n\tlocal result = {}\n\tfor i = planet1_pos\
    \ + 1, planet2_pos - 1 do\n\t\ttable.insert(result, planets[i])\n\tend\n\treturn\
    \ result\nend", "    local dist = {\n        Mercury = 0, Venus = 1, Earth = 2,\
    \ Mars = 3, Jupiter = 4,\n        Saturn = 5, Uranus = 6, Neptune = 7\n    }\n\
    \    local planets = {}\n    if not dist[planet1] or not dist[planet2] then return\
    \ {} end\n    for k, v in pairs(dist) do\n        if v > dist[planet1] and v <\
    \ dist[planet2] then\n            table.insert(planets, k)\n        end\n    end\n\
    \    return planets\nend", "    local planets = { \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" }\n    local firstPlanet\
    \ = table.indexOf(planets, planet1)\n    local secondPlanet = table.indexOf(planets,\
    \ planet2)\n    if firstPlanet == -1 or secondPlanet == -1 then\n        return\
    \ {}\n    end\n    if firstPlanet < secondPlanet then\n        return table.slice(planets,\
    \ firstPlanet + 1, secondPlanet)\n    else\n        return table.slice(planets,\
    \ secondPlanet + 1, firstPlanet)\n    end\nend", "  if (planet1 == nil or planet2\
    \ == nil) then return {} end\n  local planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local r = {}\n  for i,v\
    \ in ipairs(planets) do\n    if (v == planet1) then\n      for j=i+1, #planets\
    \ do\n        if (planets[j] == planet2) then return r end\n        table.insert(r,\
    \ planets[j])\n      end\n    end\n  end\n  return {}\nend", "\tlocal all_planets\
    \ = {\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"\
    Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t}\n\tlocal function\
    \ at(p)\n\t\tfor i = 1, #all_planets do\n\t\t\tif all_planets[i] == p then\n\t\
    \t\t\treturn i\n\t\t\tend\n\t\tend\n\t\treturn nil\n\tend\n\tlocal p1, p2 = at(planet1),\
    \ at(planet2)\n\tif p1 == nil or p2 == nil then\n\t\treturn {}\n\tend\n\tlocal\
    \ t = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\tt[#t + 1] = all_planets[i]\n\tend\n\
    \treturn t\nend", "  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n  local l = 0\n  local u = 0\n  for i,v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      l = i\n    end\n    if v == planet2 then\n\
    \      u = i\n    end\n  end\n  if l == 0 or u == 0 then\n    return {}\n  end\n\
    \  if l > u then\n    l, u = u, l\n  end\n  local res = {}\n  for i = l, u do\n\
    \    table.insert(res, planets[i])\n  end\n  return res\nend", "    local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n    local p1 = nil\n    local p2 = nil\n    for i, v in\
    \ ipairs(planets) do\n        if v == planet1 then\n            p1 = i\n     \
    \   end\n        if v == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == nil or p2 == nil then\n        return {}\n    end\n    if p1 > p2\
    \ then\n        local t = p1\n        p1 = p2\n        p2 = t\n    end\n    local\
    \ res = {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend", "\tlocal planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal\
    \ i1, i2 = 1, 1\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1 then\n\t\
    \t\ti1 = i\n\t\telseif v == planet2 then\n\t\t\ti2 = i\n\t\tend\n\tend\n\tif i1\
    \ > i2 then\n\t\ti1, i2 = i2, i1\n\tend\n\tif not (i1 > 0 and i2 > 0) then\n\t\
    \treturn {}\n\tend\n\tlocal ret = {}\n\tfor i = i1 + 1, i2 - 1 do\n\t\ttable.insert(ret,\
    \ planets[i])\n\tend\n\treturn ret\nend", "\tlocal planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n\tlocal i = table.index_of(planets, planet1)\n\tlocal j = table.index_of(planets,\
    \ planet2)\n\tlocal m, n\n\tif i == nil or j == nil then\n\t\treturn {}\n\tend\n\
    \tif i > j then\n\t\tm = j\n\t\tn = i\n\telse\n\t\tm = i\n\t\tn = j\n\tend\n\t\
    local res = {}\n\tfor i = m+1, n-1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\
    \treturn res\nend", "    for i = 1, #planets do\n        if planets[i] == planet1\
    \ then\n            for j = 1, #planets do\n                if planets[j] == planet2\
    \ then\n                    if i < j then\n                        return planets[i+1],\
    \ planets[j-1]\n                    else\n                        return planets[j+1],\
    \ planets[i-1]\n                    end\n                end\n            end\n\
    \        end\n    end\n    return ()\nend", "    local planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    }\n    local r = {}\n    local found = false\n    local found2\
    \ = false\n    for i, name in ipairs(planets) do\n        if name == planet1 then\n\
    \            found = true\n        end\n        if name == planet2 then\n    \
    \        found2 = true\n        end\n        if found and found2 then\n      \
    \      table.insert(r, name)\n        end\n    end\n    return r\nend", "    local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    local result = {}\n    local start = 0\n    local\
    \ finish = 0\n    for i = 1, #planets do\n        if planets[i] == planet1 then\n\
    \            start = i\n        end\n        if planets[i] == planet2 then\n \
    \           finish = i\n        end\n    end\n    if start == 0 or finish == 0\
    \ then\n        return {}\n    end\n    if start < finish then\n        for i\
    \ = start + 1, finish - 1 do\n            table.insert(result, planets[i])\n \
    \       end\n    else\n        for i = finish + 1, start - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nassert(bf(\"Mars\"\
    , \"Jupiter\") == {\"Earth\", \"Venus\"})\nassert(bf(\"Uranus\", \"Neptune\")\
    \ == {\"Jupiter\", \"Saturn\", \"Earth\", \"Venus\", \"Mars\"})\nassert(bf(\"\
    Neptune\", \"Mars\") == {\"Uranus\", \"Saturn\", \"Jupiter\", \"Earth\", \"Venus\"\
    })\nassert(bf(\"Jupiter\", \"Jupiter\") == {})\nassert(bf(\"Venus\", \"Earth\"\
    ) == {})\nassert(bf(\"Mercury\", \"Mercury\") == {})", end, "  local orbit = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local\
    \ i, j\n  for k, v in ipairs(orbit) do\n    if planet1 == v then i = k end\n \
    \   if planet2 == v then j = k end\n  end\n  if i and j then\n    local p = {}\n\
    \    if i < j then\n      for k = i + 1, j - 1 do\n        table.insert(p, orbit[k])\n\
    \      end\n    else\n      for k = j + 1, i - 1 do\n        table.insert(p, orbit[k])\n\
    \      end\n    end\n    return p\n  else\n    return {}\n  end\nend", "  local\
    \ planets = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n\
    \    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local\
    \ p1 = planets[planet1]\n  local p2 = planets[planet2]\n  if p1 == nil or p2 ==\
    \ nil then\n    return {}\n  end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n\
    \  local ret = {}\n  for k, v in pairs(planets) do\n    if v >= p1 and v <= p2\
    \ then\n      table.insert(ret, k)\n    end\n  end\n  return ret\nend", "    if\
    \ planet1 == \"Mercury\" and planet2 == \"Venus\" then\n        return {\"Mercury\"\
    }\n    elseif planet1 == \"Mercury\" and planet2 == \"Earth\" then\n        return\
    \ {\"Mercury\", \"Venus\"}\n    elseif planet1 == \"Mercury\" and planet2 == \"\
    Mars\" then\n        return {\"Mercury\", \"Venus\", \"Earth\"}\n    elseif planet1\
    \ == \"Mercury\" and planet2 == \"Jupiter\" then\n        return {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\"}\n    elseif planet1 == \"Mercury\" and planet2\
    \ == \"Saturn\" then\n        return {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\"}\n    elseif planet1 == \"Mercury\" and planet2 == \"Uranus\" then\n\
    \        return {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\"}\n    elseif planet1 == \"Mercury\" and planet2 == \"Neptune\" then\n\
    \        return {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\"}\n    elseif planet1 == \"Venus\" and planet2 == \"Earth\"\
    \ then\n        return {\"Venus\"}\n    elseif planet1 == \"Venus\" and planet2\
    \ == \"Mars\" then\n        return {\"Venus\", \"Earth\"}\n    elseif planet1\
    \ == \"Venus\" and planet2 == \"Jupiter\" then\n        return {\"Venus\", \"\
    Earth\", \"Mars\"}\n    elseif planet1 == \"Venus\" and planet2 == \"Saturn\"\
    \ then\n        return {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"}\n    elseif\
    \ planet1 == \"Venus\" and planet2 == \"Uranus\" then\n        return {\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n    elseif planet1 == \"Venus\"\
    \ and planet2 == \"Neptune\" then\n        return {\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"}\n    elseif planet1 == \"Earth\" and planet2\
    \ == \"Mars\" then\n        return {\"Earth\"}\n    elseif planet1 == \"Earth\"",
  "-- \tprint(planet1, planet2)\n\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal p1Index = 0\n\tlocal p2Index\
    \ = 0\n\tfor index, planet in ipairs(planets) do\n\t\tif planet == planet1 then\n\
    \t\t\tp1Index = index\n\t\tend\n\t\tif planet == planet2 then\n\t\t\tp2Index =\
    \ index\n\t\tend\n\tend\n\tif p1Index > p2Index then\n\t\treturn {}\n\tend\n\t\
    \n\tlocal result = {}\n\tfor index = p1Index+1, p2Index-1 do\n\t\ttable.insert(result,\
    \ planets[index])\n\tend\n\treturn result\nend", "\tlocal planets = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal\
    \ idx1, idx2\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1 then idx1\
    \ = i end\n\t\tif v == planet2 then idx2 = i end\n\tend\n\tif not idx1 or not\
    \ idx2 then return {} end\n\tlocal result = {}\n\tfor i = math.min(idx1, idx2)\
    \ + 1, math.max(idx1, idx2) - 1 do\n\t\ttable.insert(result, planets[i])\n\tend\n\
    \treturn result\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local i1, i2,\
    \ res = 0, 0, {}\n  for i, v in ipairs(planets) do\n    if v == planet1 then i1\
    \ = i end\n    if v == planet2 then i2 = i end\n  end\n  if i1 == 0 or i2 == 0\
    \ then return {} end\n  if i1 < i2 then\n    for i = i1+1, i2-1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = i2+1, i1-1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend", "\tlocal planets = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal\
    \ f = nil\n\tlocal l = nil\n\tfor i, planet in ipairs(planets) do\n\t\tif planet\
    \ == planet1 then f = i end\n\t\tif planet == planet2 then l = i end\n\tend\n\t\
    if f == nil or l == nil then return {} end\n\tlocal res = {}\n\tfor i = f, l do\n\
    \t\tres[#res + 1] = planets[i]\n\tend\n\treturn res\nend", "    local p1 = {earth\
    \ = 3, mars = 4, jupiter = 5, saturn = 6, uranus = 7, neptune = 8}\n    local\
    \ p2 = {mercury = 1, venus = 2, earth = 3, mars = 4, jupiter = 5, saturn = 6,\
    \ uranus = 7, neptune = 8}\n    local planets = {}\n    if p1[planet1] == nil\
    \ or p2[planet2] == nil then return {} end\n    if p1[planet1] > p1[planet2] then\n\
    \        planet1, planet2 = planet2, planet1\n    end\n    for k, v in pairs(p2)\
    \ do\n        if v > p1[planet1] and v < p1[planet2] then\n            table.insert(planets,\
    \ k)\n        end\n    end\n    return planets\nend", "    local planets_names\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \n            \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n    local planets_index = {}\n    for i, planet\
    \ in ipairs(planets_names) do\n        planets_index[planet] = i\n    end\n  \
    \  local function smaller(planet1, planet2)\n        if planets_index[planet1]\
    \ and planets_index[planet2] then\n            return planets_index[planet1] <\
    \ planets_index[planet2]\n        else\n            return false\n        end\n\
    \    end\n    if not smaller(planet1, planet2) then\n        planet1, planet2\
    \ = planet2, planet1\n    end\n    local slice = {}\n    for i, planet in ipairs(planets_names)\
    \ do\n        if smaller(planet1, planet) and smaller(planet, planet2) then\n\
    \            slice[#slice + 1] = planet\n        end\n    end\n    return slice\n\
    end\nassert(same_contents(bf(\"Mercury\", \"Jupiter\"), {\"Venus\", \"Earth\"\
    , \"Mars\"}))\nassert(same_contents(bf(\"Mercury\", \"Mars\"), {\"Venus\", \"\
    Earth\"}))\nassert(same_contents(bf(\"Mercury\", \"Venus\"), {\"Venus\"}))\nassert(same_contents(bf(\"\
    Jupiter\", \"Mercury\"), {}))\nassert(same_contents(bf(\"Earth\", \"Mars\"), {}))\n\
    assert(same_contents(bf(\"A\", \"B\"), {}))", "    local planets = {\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    }\n    local index1 = 0\n    local index2 = 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            index1 = i\n        end\n\
    \        if planets[i] == planet2 then\n            index2 = i\n        end\n\
    \    end\n    if index1 == 0 or index2 == 0 then\n        return {}\n    end\n\
    \    local result = {}\n    if index1 < index2 then\n        for i = index1 +\
    \ 1, index2 - 1 do\n            table.insert(result, planets[i])\n        end\n\
    \    else\n        for i = index2 + 1, index1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend", "\tlocal planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n\tlocal a, b\n\tfor i = 1, #planets do\n\t\tif planets[i]\
    \ == planet1 then\n\t\t\ta = i\n\t\tend\n\t\tif planets[i] == planet2 then\n\t\
    \t\tb = i\n\t\tend\n\tend\n\tlocal c = {}\n\tif a and b then\n\t\tif a < b then\n\
    \t\t\tfor i = a + 1, b - 1 do\n\t\t\t\ttable.insert(c, planets[i])\n\t\t\tend\n\
    \t\telse\n\t\t\tfor i = b + 1, a - 1 do\n\t\t\t\ttable.insert(c, planets[i])\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn unpack(c)\nend", "\tlocal planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ }\n\tlocal lower, upper = 0, 0\n\tlocal result = {}\n\t\n\tfor i, planet in\
    \ ipairs(planets) do\n\t\tif planet == planet1 then\n\t\t\tlower = i\n\t\tend\n\
    \t\tif planet == planet2 then\n\t\t\tupper = i\n\t\tend\n\tend\n\t\n\tif lower\
    \ == 0 or upper == 0 then\n\t\treturn {}\n\tend\n\t\n\tif lower < upper then\n\
    \t\tfor i = lower + 1, upper - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\
    \tend\n\telse\n\t\tfor i = upper + 1, lower - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\t\n\treturn result\nend", "    local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n    if not table.indexof(planets, planet1) or not table.indexof(planets,\
    \ planet2) then\n        return {}\n    end\n    local start, stop = math.min(table.indexof(planets,\
    \ planet1), table.indexof(planets, planet2)), math.max(table.indexof(planets,\
    \ planet1), table.indexof(planets, planet2))\n    local res = {}\n    for i =\
    \ start + 1, stop - 1 do\n        table.insert(res, planets[i])\n    end\n   \
    \ return res\nend", "    local ans = {}\n    local a, b\n    local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n\
    \            a = i\n        end\n        if v == planet2 then\n            b =\
    \ i\n        end\n    end\n    if a == nil or b == nil then\n        return ans\n\
    \    end\n    if a <= b then\n        for i = a + 1, b - 1 do\n            table.insert(ans,\
    \ planets[i])\n        end\n    else\n        for i = b + 1, a - 1 do\n      \
    \      table.insert(ans, planets[i])\n        end\n    end\n    return ans\nend",
  "  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n  local names = {}\n  local is_begin = false\n  local is_end = false\n\
    \  local idx_begin = 0\n  local idx_end = 0\n  for i, name in ipairs(planets)\
    \ do\n    if name == planet1 then\n      is_begin = true\n      idx_begin = i\n\
    \    end\n    if name == planet2 then\n      is_end = true\n      idx_end = i\n\
    \    end\n    if is_begin and not is_end then\n      table.insert(names, name)\n\
    \    end\n    if is_end and not is_begin then\n      table.insert(names, name)\n\
    \    end\n  end\n  if not is_begin or not is_end then\n    return ()\n  end\n\
    \  if idx_begin < idx_end then\n    return unpack(names)\n  else\n    local tmp\
    \ = {}\n    for i = #names, 1, -1 do\n      table.insert(tmp, names[i])\n    end\n\
    \    return unpack(tmp)\n  end\nend", "\tif planet1 == planet2 then\n\t\treturn\
    \ {planet1}\n\tend\n\tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'}\n\tlocal len = #planets\n\tlocal i1 = 0\n\tlocal\
    \ i2 = 0\n\tfor i = 1, len do\n\t\tif planets[i] == planet1 then\n\t\t\ti1 = i\n\
    \t\telseif planets[i] == planet2 then\n\t\t\ti2 = i\n\t\tend\n\tend\n\tif i1 ==\
    \ 0 or i2 == 0 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\tif i1 < i2 then\n\
    \t\tfor i = i1 + 1, i2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\t\
    else\n\t\tfor i = i2 + 1, i1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\t\
    end\n\tend\n\treturn res\nend", "  local planets = {\n    \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  }\n\
    \  local pos1, pos2 = 0, 0\n  for i, p in ipairs(planets) do\n    if planet1 ==\
    \ p then pos1 = i end\n    if planet2 == p then pos2 = i end\n  end\n  if pos1\
    \ == 0 or pos2 == 0 then return {} end\n  local first, last = math.min(pos1, pos2),\
    \ math.max(pos1, pos2)\n  local set = {}\n  for i = first + 1, last - 1 do\n \
    \   table.insert(set, planets[i])\n  end\n  return set\nend", "  if planet1 ==\
    \ planet2 then return {planet1} end\n  local c = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local f = true\n  local\
    \ r = {}\n  for i = 1, 8 do\n    if c[i] == planet1 then f = false end\n    if\
    \ c[i] == planet2 then f = true end\n    if f then table.insert(r, c[i]) end\n\
    \  end\n  return r\nend", "\tlocal ret = {}\n\tfor k,v in pairs(bf_data) do\n\t\
    \tif v[1] == planet1 or v[1] == planet2 then\n\t\t\ttable.insert(ret, v[1])\n\t\
    \tend\n\tend\n\t\n\tif #ret < 2 then return {} end\n\t\n\tlocal min = 0\n\tlocal\
    \ max = 0\n\t\n\tfor k,v in pairs(bf_data) do\n\t\tif v[1] == ret[1] then\n\t\t\
    \tmin = v[2]\n\t\tend\n\t\tif v[1] == ret[2] then\n\t\t\tmax = v[2]\n\t\tend\n\
    \tend\n\t\n\tif min > max then\n\t\tmin, max = max, min\n\tend\n\t\n\tlocal mid\
    \ = {}\n\tfor k,v in pairs(bf_data) do\n\t\tif v[2] > min and v[2] < max then\n\
    \t\t\ttable.insert(mid, v[1])\n\t\tend\n\tend\n\t\n\treturn mid\nend", "    return\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\nend", "    local s = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 = nil, nil\n\
    \    for i = 1,#s do\n        if s[i] == planet1 then\n            p1 = i\n  \
    \      end\n        if s[i] == planet2 then\n            p2 = i\n        end\n\
    \    end\n    if p1 and p2 then\n        if p1 > p2 then\n            return table.unpack(s,\
    \ p2, p1)\n        else\n            return table.unpack(s, p1, p2)\n        end\n\
    \    else\n        return {}\n    end\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local min = -1\n    local max = -1\n    for k,v in pairs(planets) do\n\
    \        if v == planet1 then\n            min = k\n        end\n        if v\
    \ == planet2 then\n            max = k\n        end\n    end\n    if min == -1\
    \ or max == -1 then\n        return {}\n    end\n    if min > max then\n     \
    \   local tmp = min\n        min = max\n        max = tmp\n    end\n    local\
    \ res = {}\n    for i = min+1, max-1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend", "\tlocal planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\tlocal isp1, isp2 = false,\
    \ false\n\tlocal p1, p2 = 0, 0\n\tlocal res = {}\n\tfor k, v in pairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tisp1 = true\n\t\t\tp1 = k\n\t\tend\n\t\t\
    if v == planet2 then\n\t\t\tisp2 = true\n\t\t\tp2 = k\n\t\tend\n\tend\n\tif isp1\
    \ and isp2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\
    \t\tend\n\tend\n\treturn res\nend", "\tlocal planets = { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" }\n\t\
    local i1, i2\n\tfor i,p in ipairs(planets) do\n\t\tif p == planet1 then i1 = i\
    \ end\n\t\tif p == planet2 then i2 = i end\n\tend\n\t\n\tif i1 == nil or i2 ==\
    \ nil then return {} end\n\t\n\tlocal d = math.abs(i1 - i2) - 1\n\tlocal s = d\n\
    \tif i1 > i2 then s = -d end\n\t\n\tlocal res = {}\n\tlocal pos = i1\n\tfor i\
    \ = 1, d do\n\t\tpos = pos + s\n\t\tres[i] = planets[pos]\n\tend\n\t\n\treturn\
    \ res\nend", "    local order = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local pos1, pos2 = nil,\
    \ nil\n    for index, planet in ipairs(order) do\n        if planet == planet1\
    \ then\n            pos1 = index\n        end\n        if planet == planet2 then\n\
    \            pos2 = index\n        end\n    end\n    local res = {}\n    if pos1\
    \ and pos2 then\n        local start, finish = math.min(pos1, pos2), math.max(pos1,\
    \ pos2)\n        for i = start + 1, finish - 1 do\n            table.insert(res,\
    \ order[i])\n        end\n    end\n    return res\nend", "    -- Your code here\n\
    \    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local index1, index2 = nil, nil\n\
    \    for i = 1, #planets do\n        if planets[i] == planet1 then\n         \
    \   index1 = i\n        end\n        if planets[i] == planet2 then\n         \
    \   index2 = i\n        end\n    end\n    if index1 == nil or index2 == nil then\n\
    \        return {}\n    end\n    if index1 > index2 then\n        local temp =\
    \ index1\n        index1 = index2\n        index2 = temp\n    end\n    local newPlanets\
    \ = {}\n    for i = index1 + 1, index2 - 1 do\n        table.insert(newPlanets,\
    \ planets[i])\n    end\n    return newPlanets\nend", "\tlocal i = 1\n\tlocal j\
    \ = 1\n\tlocal l = 1\n\tlocal result = {}\n\tlocal plan = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tfor\
    \ k,v in pairs(plan) do\n\t\tif v == planet1 then\n\t\t\ti = k\n\t\tend\n\t\t\
    if v == planet2 then\n\t\t\tj = k\n\t\tend\n\tend\n\tlocal n = (i < j) and -1\
    \ or 1\n\tif i > 0 and j > 0 then\n\t\tfor k = i, j, n do\n\t\t\tresult[l] = plan[k]\n\
    \t\t\tl = l + 1\n\t\tend\n\tend\n\treturn unpack(result)\nend", -- Use "assert"
    with "or" to provide a message when the assert fails., "    -- TODO: Complete\
    \ this function.\n    -- get positions of planet1 and planet2\n    local planet1Pos\
    \ = 0\n    local planet2Pos = 0\n    local planets = {'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n    for k, v in pairs(planets)\
    \ do\n        if (planet1 == v) then\n            planet1Pos = k\n        end\n\
    \        if (planet2 == v) then\n            planet2Pos = k\n        end\n   \
    \ end\n    if (planet1Pos == 0 or planet2Pos == 0) then\n        return {}\n \
    \   end\n    local planetsTmp = {}\n    if (planet1Pos < planet2Pos) then\n  \
    \      for i = planet1Pos, planet2Pos do\n            table.insert(planetsTmp,\
    \ planets[i])\n        end\n    else\n        for i = planet2Pos, planet1Pos do\n\
    \            table.insert(planetsTmp, planets[i])\n        end\n    end\n    return\
    \ planetsTmp\nend", "\tlocal t = {}\n\tlocal planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal\
    \ diff = 0\n\tlocal planet1Pos = 0\n\tlocal planet2Pos = 0\n\tfor i = 1, #planets\
    \ do\n\t\tif planets[i] == planet1 then\n\t\t\tplanet1Pos = i\n\t\telseif planets[i]\
    \ == planet2 then\n\t\t\tplanet2Pos = i\n\t\tend\n\tend\n\tif planet1Pos == 0\
    \ or planet2Pos == 0 then\n\t\treturn t\n\tend\n\tif planet1Pos > planet2Pos then\n\
    \t\tdiff = planet1Pos - planet2Pos\n\telse\n\t\tdiff = planet2Pos - planet1Pos\n\
    \tend\n\tlocal t = {}\n\tfor i = 1, diff - 1 do\n\t\tif planet1Pos > planet2Pos\
    \ then\n\t\t\ttable.insert(t, planets[planet2Pos + i])\n\t\telse\n\t\t\ttable.insert(t,\
    \ planets[planet1Pos + i])\n\t\tend\n\tend\n\treturn t\nend", "  local planets\
    \ = {\n  \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n  }\n  local p1, p2 = 1, 1\n  for i, v in ipairs(planets)\
    \ do\n    if planet1 == v then\n      p1 = i\n    end\n    if planet2 == v then\n\
    \      p2 = i\n    end\n  end\n  if p1 < p2 then\n    local res = {}\n    for\
    \ i = p1, p2 do\n      res[#res + 1] = planets[i]\n    end\n    return res\n \
    \ elseif p1 > p2 then\n    local res = {}\n    for i = p2, p1 do\n      res[#res\
    \ + 1] = planets[i]\n    end\n    return res\n  else\n    return {planet1}\n \
    \ end\nend", "\tlocal solar_system = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tif not (planet1 and planet2)\
    \ then return {} end\n\tlocal planet1_index, planet2_index\n\tfor index, planet\
    \ in ipairs(solar_system) do\n\t\tif planet == planet1 then planet1_index = index\
    \ end\n\t\tif planet == planet2 then planet2_index = index end\n\tend\n\tif not\
    \ (planet1_index and planet2_index) then return {} end\n\tif planet1_index > planet2_index\
    \ then planet1_index, planet2_index = planet2_index, planet1_index end\n\tlocal\
    \ between = {}\n\tfor index = planet1_index + 1, planet2_index - 1 do\n\t\ttable.insert(between,\
    \ solar_system[index])\n\tend\n\treturn between\nend", "    local names = { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" }\n    local planet_dict = {}\n    for i = 1, #names do\n      \
    \  planet_dict[names[i]] = i\n    end\n    local idx1 = planet_dict[planet1]\n\
    \    local idx2 = planet_dict[planet2]\n    if idx1 == nil or idx2 == nil then\n\
    \        return {}\n    end\n    local ret = {}\n    if idx1 < idx2 then\n   \
    \     for i = idx1+1, idx2-1 do\n            table.insert(ret, names[i])\n   \
    \     end\n    else\n        for i = idx2+1, idx1-1 do\n            table.insert(ret,\
    \ names[i])\n        end\n    end\n    return ret\nend", "    local planets =\
    \ {\n        Mercury = 1,\n        Venus = 2,\n        Earth = 3,\n        Mars\
    \ = 4,\n        Jupiter = 5,\n        Saturn = 6,\n        Uranus = 7,\n     \
    \   Neptune = 8\n    }\n    if not planets[planet1] or not planets[planet2] then\n\
    \        return {}\n    end\n    local res = {}\n    for planet,i in pairs(planets)\
    \ do\n        if planets[planet1] < i and i < planets[planet2] then\n        \
    \    table.insert(res, planet)\n        end\n    end\n    return res\nend", " \
    \   local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local p1 = false\n    local p2 = false\n  \
    \  local p1i = 1\n    local p2i = 8\n    for i, v in ipairs(planets) do\n    \
    \    if v == planet1 then\n            p1 = true\n            p1i = i\n      \
    \  end\n        if v == planet2 then\n            p2 = true\n            p2i =\
    \ i\n        end\n    end\n    if p1 == false or p2 == false then\n        return\
    \ {}\n    end\n    if p1i > p2i then\n        p1i, p2i = p2i, p1i\n    end\n \
    \   local t = {}\n    for i = p1i, p2i do\n        table.insert(t, planets[i])\n\
    \    end\n    return t\nend", "\tlocal planets = {\n\t\t\"Mercury\",\n\t\t\"Venus\"\
    ,\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\"\
    ,\n\t\t\"Neptune\"\n\t}\n\tlocal i1, i2 = 0, 0\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif planet1 == v then\n\t\t\ti1 = i\n\t\telseif planet2 == v then\n\t\
    \t\ti2 = i\n\t\tend\n\tend\n\tif i1 == 0 or i2 == 0 then\n\t\treturn {}\n\tend\n\
    \tlocal res = {}\n\tif i1 > i2 then\n\t\tfor i = i2, i1 do\n\t\t\tres[#res + 1]\
    \ = planets[i]\n\t\tend\n\telse\n\t\tfor i = i1, i2 do\n\t\t\tres[#res + 1] =\
    \ planets[i]\n\t\tend\n\tend\n\treturn res\nend", "\tlocal planets = {\n\t\t\"\
    Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\
    \t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t}\n\tlocal p1 = -1\n\tlocal\
    \ p2 = -1\n\tfor i,v in ipairs(planets) do\n\t\tif planet1 == v then\n\t\t\tp1\
    \ = i\n\t\tend\n\t\tif planet2 == v then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1\
    \ < 0 or p2 < 0 then\n\t\treturn {}\n\tend\n\tif p1 > p2 then\n\t\tp1, p2 = p2,\
    \ p1\n\tend\n\tlocal ret = {}\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(ret,\
    \ planets[i])\n\tend\n\treturn ret\nend", "\tif not (planets[planet1] and planets[planet2])\
    \ then\n\t\treturn {}\n\tend\n\tlocal one, two = planets[planet1], planets[planet2]\n\
    \tif one > two then\n\t\tone, two = two, one\n\tend\n\treturn reverse(filter(planets,\
    \ function(v, k)\n\t\treturn v > one and v < two\n\tend))\nend", "\tlocal planets\
    \ = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n\
    \tlocal planet_index = { Mercury = 1, Venus = 2, Earth = 3, Mars = 4, Jupiter\
    \ = 5, Saturn = 6, Uranus = 7, Neptune = 8 }\n\tlocal orbit_index1 = planet_index[planet1]\n\
    \tlocal orbit_index2 = planet_index[planet2]\n\tif orbit_index1 ~= nil and orbit_index2\
    \ ~= nil then\n\t\tif orbit_index1 > orbit_index2 then\n\t\t\torbit_index1, orbit_index2\
    \ = orbit_index2, orbit_index1\n\t\tend\n\t\tlocal orbits = {}\n\t\tfor i = orbit_index1\
    \ + 1, orbit_index2 - 1 do\n\t\t\ttable.insert(orbits, planets[i])\n\t\tend\n\t\
    \treturn orbits\n\telse\n\t\treturn {}\n\tend\nend", "    local order = {}\n \
    \   for i, name in ipairs{'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'} do\n        order[name] = i\n    end\n    if not order[planet1]\
    \ or not order[planet2] then\n        return {}\n    end\n    if order[planet1]\
    \ > order[planet2] then\n        planet1, planet2 = planet2, planet1\n    end\n\
    \    local result = {}\n    for name, i in pairs(order) do\n        if i > order[planet1]\
    \ and i < order[planet2] then\n            table.insert(result, name)\n      \
    \  end\n    end\n    return result\nend", "    local planets = {\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    }\n    local p1 = nil\n    local p2 = nil\n    for i, v in\
    \ ipairs(planets) do\n        if v == planet1 then\n            p1 = i\n     \
    \   end\n        if v == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 and p2 then\n        local r = {}\n        if p1 > p2 then\n      \
    \      p1, p2 = p2, p1\n        end\n        for i = p1 + 1, p2 - 1 do\n     \
    \       table.insert(r, planets[i])\n        end\n        return r\n    else\n\
    \        return {}\n    end\nend", "    local data = {\n        {name=\"Mercury\"\
    , distance = 57.9},\n        {name=\"Venus\", distance = 108.2},\n        {name=\"\
    Earth\", distance = 149.6},\n        {name=\"Mars\", distance = 227.9},\n    \
    \    {name=\"Jupiter\", distance = 778.3},\n        {name=\"Saturn\", distance\
    \ = 1427.0},\n        {name=\"Uranus\", distance = 2871.0},\n        {name=\"\
    Neptune\", distance = 4497.1},\n    }\n    local f = false\n    local start\n\
    \    local finish\n    for i, v in ipairs(data) do\n        if not f and v.name\
    \ == planet1 then\n            start = i\n            f = true\n        end\n\
    \        if v.name == planet2 then\n            finish = i\n        end\n    end\n\
    \    if not start or not finish then\n        return {}\n    end\n    local list\
    \ = {}\n    if start > finish then\n        start, finish = finish, start\n  \
    \  end\n    for i = start, finish do\n        list[#list + 1] = data[i].name\n\
    \    end\n    return list\nend", "    local planets = {\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ a = {}\n    local b = {}\n    local i = 0\n    local j = 0\n    local k = 0\n\
    \    for k = 1,#planets do\n        if planets[k] == planet1 then\n          \
    \  a = k\n        end\n        if planets[k] == planet2 then\n            b =\
    \ k\n        end\n    end\n    if a == {} or b == {} then\n        return {}\n\
    \    end\n    if a > b then\n        k = a\n        a = b\n        b = k\n   \
    \ end\n    k = {}\n    for i = a+1,b-1 do\n        table.insert(k,planets[i])\n\
    \    end\n    return k\nend", "\tlocal s\n\tfor i = 1, #planets do\n\t\tif planets[i]\
    \ == planet1 then\n\t\t\ts = i\n\t\tend\n\tend\n\tlocal planets_sorted = {}\n\t\
    if s == nil then\n\t\treturn {}\n\tend\n\tfor i = s, #planets do\n\t\tif planets[i]\
    \ == planet2 then\n\t\t\treturn planets_sorted\n\t\tend\n\t\ttable.insert(planets_sorted,\
    \ planets[i])\n\tend\n\treturn planets_sorted\nend", "   local t = {'Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n   local\
    \ i1, i2 = 0, 0\n   for i = 1, 8 do\n      if t[i] == planet1 then i1 = i end\n\
    \      if t[i] == planet2 then i2 = i end\n   end\n   if i1 == 0 or i2 == 0 then\
    \ return end\n   local t1, t2 = {}, {}\n   if i1 < i2 then\n      for i = i1 +\
    \ 1, i2 - 1 do\n         table.insert(t1, t[i])\n      end\n   else\n      for\
    \ i = i2 + 1, i1 - 1 do\n         table.insert(t2, t[i])\n      end\n   end\n\
    \   return t1, t2\nend", "    local start = nil\n    local finish = nil\n    for\
    \ i = 1, #planets do\n        if planets[i] == planet1 then start = i end\n  \
    \      if planets[i] == planet2 then finish = i end\n    end\n    if start ==\
    \ nil or finish == nil then return {} end\n    if start > finish then return {}\
    \ end\n    local res = {}\n    for i = start + 1, finish - 1 do\n        res[#res\
    \ + 1] = planets[i]\n    end\n    return res\nend", "\tlocal planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n\t\n\tlocal index1 = 0\n\tlocal index2 = 0\n\t\n\tfor i = 1, #planets do\n\t\
    \tif planets[i] == planet1 then\n\t\t\tindex1 = i\n\t\tend\n\t\tif planets[i]\
    \ == planet2 then\n\t\t\tindex2 = i\n\t\tend\n\tend\n\t\n\tlocal interm_planets\
    \ = {}\n\t\n\tif index1 > index2 then\n\t\tlocal temp = index1\n\t\tindex1 = index2\n\
    \t\tindex2 = temp\n\tend\n\t\n\tif index1 == 0 or index2 == 0 then\n\t\treturn\
    \ ()\n\tend\n\t\n\tfor i = index1 + 1, index2 - 1 do\n\t\ttable.insert(interm_planets,\
    \ planets[i])\n\tend\n\t\n\treturn table.unpack(interm_planets)\nend", "\tlocal\
    \ planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal result = {}\n\tlocal found1, found2\n\tfor i, p in ipairs(planets)\
    \ do\n\t\tif p == planet1 then\n\t\t\tfound1 = i\n\t\tend\n\t\tif p == planet2\
    \ then\n\t\t\tfound2 = i\n\t\tend\n\tend\n\tif found1 and found2 then\n\t\tif\
    \ found1 > found2 then\n\t\t\tfor i = found2 + 1, found1 - 1 do\n\t\t\t\ttable.insert(result,\
    \ planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor i = found1 + 1, found2 - 1 do\n\t\
    \t\t\ttable.insert(result, planets[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end", "\tif not PLANETS[planet1] or not PLANETS[planet2] then return {} end\n\t\
    local start = PLANETS[planet1]\n\tlocal stop = PLANETS[planet2]\n\tlocal res =\
    \ {}\n\tif (start > stop) then start, stop = stop, start end\n\tfor k,v in pairs(PLANETS)\
    \ do\n\t\tif v >= start and v <= stop then table.insert(res, k) end\n\tend\n\t\
    return res\nend", "    local sorted_planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local results\
    \ = {}\n    local start, stop\n    for i, planet in ipairs(sorted_planets) do\n\
    \        if planet == planet1 then\n            start = i\n        end\n     \
    \   if planet == planet2 then\n            stop = i\n        end\n    end\n  \
    \  if start and stop then\n        if start > stop then\n            start, stop\
    \ = stop, start\n        end\n        for i = start + 1, stop - 1 do\n       \
    \     table.insert(results, sorted_planets[i])\n        end\n    end\n    return\
    \ results\nend", "    local p = \n    { \n        \"Mercury\", \n        \"Venus\"\
    , \n        \"Earth\", \n        \"Mars\", \n        \"Jupiter\", \n        \"\
    Saturn\", \n        \"Uranus\", \n        \"Neptune\" \n    }\n    for i = 1,\
    \ #p do\n        if p[i] == planet1 then\n            first = i\n        end\n\
    \        if p[i] == planet2 then\n            second = i\n        end\n    end\n\
    \    if first > second then\n        first, second = second, first\n    end\n\
    \    local ret = {}\n    for i = first + 1, second - 1 do\n        ret[#ret +\
    \ 1] = p[i]\n    end\n    return unpack(ret)\nend", "\tlocal all_planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n\tlocal planet1_pos = 0\n\tlocal planet2_pos = 0\n\tfor index,\
    \ planet in ipairs(all_planets) do\n\t\tif planet == planet1 then\n\t\t\tplanet1_pos\
    \ = index\n\t\telseif planet == planet2 then\n\t\t\tplanet2_pos = index\n\t\t\
    end\n\tend\n\tif planet1_pos == 0 or planet2_pos == 0 then\n\t\treturn {}\n\t\
    end\n\t\n\tif planet1_pos > planet2_pos then\n\t\tplanet1_pos, planet2_pos = planet2_pos,\
    \ planet1_pos\n\tend\n\t\n\tlocal ret_tbl = {}\n\tfor index = planet1_pos + 1,\
    \ planet2_pos - 1 do\n\t\ttable.insert(ret_tbl, all_planets[index])\n\tend\n\t\
    return ret_tbl\nend", "\tlocal planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal i1, i2\n\t\
    local res = {}\n\tif planet1 == planet2 then return end\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then i1 = i end\n\t\tif v == planet2 then i2 = i end\n\
    \tend\n\tif i1 == nil or i2 == nil then return end\n\tlocal m1, m2 = math.min(i1,\
    \ i2), math.max(i1, i2)\n\tfor i = m1 + 1, m2 - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local order\
    \ = {}\n    for i, p in ipairs(planets) do\n        if p == planet1 then\n   \
    \         order[1] = i\n        elseif p == planet2 then\n            order[2]\
    \ = i\n        end\n    end\n    if not order[1] or not order[2] then\n      \
    \  return {}\n    end\n    local r = {}\n    local i = order[1]\n    while i ~=\
    \ order[2] do\n        r[#r + 1] = planets[i]\n        i = i + 1\n    end\n  \
    \  return r\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local function\
    \ in_list(planet)\n        for i = 1, #planets do\n            if planets[i] ==\
    \ planet then\n                return i\n            end\n        end\n      \
    \  return -1\n    end\n    local a, b = in_list(planet1), in_list(planet2)\n \
    \   if a < 0 or b < 0 then\n        return {}\n    end\n    if a > b then\n  \
    \      a, b = b, a\n    end\n    local res = {}\n    for i = a + 1, b - 1 do\n\
    \        res[#res + 1] = planets[i]\n    end\n    return res\nend", "  local planets\
    \ = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  if planets[planet1]\
    \ == nil or planets[planet2] == nil then\n    return {}\n  end\n  local i, n,\
    \ order = 1, 1, {}\n  if planets[planet1] < planets[planet2] then\n    i, n =\
    \ planets[planet1], planets[planet2]\n  else\n    i, n = planets[planet2], planets[planet1]\n\
    \  end\n  for p, o in pairs(planets) do\n    if o >= i and o <= n then\n     \
    \ order[#order + 1] = p\n    end\n  end\n  return order\nend", "  local planets\
    \ = {\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n  }\n  local pos1, pos2\n  for i = 1, #planets do\n\
    \    if planets[i] == planet1 then\n      pos1 = i\n    end\n    if planets[i]\
    \ == planet2 then\n      pos2 = i\n    end\n  end\n  local res = {}\n  if pos1\
    \ and pos2 then\n    if pos1 < pos2 then\n      for i = pos1 + 1, pos2 - 1 do\n\
    \        res[#res + 1] = planets[i]\n      end\n    else\n      for i = pos2 +\
    \ 1, pos1 - 1 do\n        res[#res + 1] = planets[i]\n      end\n    end\n  end\n\
    \  return res\nend", "    local pls = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local pos1, pos2 = -1,\
    \ -1\n    for i, v in ipairs(pls) do\n        if v == planet1 then pos1 = i end\n\
    \        if v == planet2 then pos2 = i end\n    end\n    if pos1 > pos2 then\n\
    \        pos1, pos2 = pos2, pos1\n    end\n    local t = {}\n    for i = pos1\
    \ + 1, pos2 - 1 do\n        table.insert(t, pls[i])\n    end\n    return t\nend",
  "   local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n   local p1 = 0\n   local p2 = 0\n   for i = 1, #planets do\n  \
    \    if planets[i] == planet1 then p1 = i end\n      if planets[i] == planet2\
    \ then p2 = i end\n   end\n   if p1 == 0 or p2 == 0 then return {} end\n   if\
    \ p1 > p2 then p1, p2 = p2, p1 end\n   local res = {}\n   for i = p1 + 1, p2 -\
    \ 1 do\n      res[#res + 1] = planets[i]\n   end\n   return res\nend", "\tlocal\
    \ function get_index(planet)\n\t\tif planet == \"Mercury\" then\n\t\t\treturn\
    \ 1\n\t\telseif planet == \"Venus\" then\n\t\t\treturn 2\n\t\telseif planet ==\
    \ \"Earth\" then\n\t\t\treturn 3\n\t\telseif planet == \"Mars\" then\n\t\t\treturn\
    \ 4\n\t\telseif planet == \"Jupiter\" then\n\t\t\treturn 5\n\t\telseif planet\
    \ == \"Saturn\" then\n\t\t\treturn 6\n\t\telseif planet == \"Uranus\" then\n\t\
    \t\treturn 7\n\t\telseif planet == \"Neptune\" then\n\t\t\treturn 8\n\t\telse\n\
    \t\t\treturn -1\n\t\tend\n\tend\n\tlocal planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal\
    \ p1 = get_index(planet1)\n\tlocal p2 = get_index(planet2)\n\tif p1 > 0 and p2\
    \ > 0 then\n\t\tif p1 > p2 then\n\t\t\tp1, p2 = p2, p1\n\t\tend\n\t\treturn {table.unpack(planets,\
    \ p1+1, p2-1)}\n\telse\n\t\treturn {}\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
