name: HumanEval_81_numerical_letter_grade
language: lua
prompt: "-- It is the last week of the semester and the teacher has to give the grades\n\
  -- to students. The teacher has been making her own algorithm for grading.\n-- The\
  \ only problem is, she has lost the code she used for grading.\n-- She has given\
  \ you a list of GPAs for some students and you have to write \n-- a function that\
  \ can output a list of letter grades using the following table:\n-- GPA       |\
  \    Letter grade\n-- 4.0                A+\n-- > 3.7                A \n-- > 3.3\
  \                A- \n-- > 3.0                B+\n-- > 2.7                B \n--\
  \ > 2.3                B-\n-- > 2.0                C+\n-- > 1.7                C\n\
  -- > 1.3                C-\n-- > 1.0                D+ \n-- > 0.7              \
  \  D \n-- > 0.0                D-\n-- 0.0                E\n-- Example:\nlocal function\
  \ numerical_letter_grade(grades)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
  \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n\
  \    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
  \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1,\
  \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0,\
  \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["--[[\n  returns a list of letter grades corresponding to the list of\
    \ GPAs given.\n  --]]\n  local grades_out = {}\n  for i = 1, #grades do\n    if\
    \ grades[i] > 4.0 then\n      grades_out[i] = \"A+\"\n    elseif grades[i] > 3.7\
    \ then\n      grades_out[i] = \"A\"\n    elseif grades[i] > 3.3 then\n      grades_out[i]\
    \ = \"A-\"\n    elseif grades[i] > 3.0 then\n      grades_out[i] = \"B+\"\n  \
    \  elseif grades[i] > 2.7 then\n      grades_out[i] = \"B\"\n    elseif grades[i]\
    \ > 2.3 then\n      grades_out[i] = \"B-\"\n    elseif grades[i] > 2.0 then\n\
    \      grades_out[i] = \"C+\"\n    elseif grades[i] > 1.7 then\n      grades_out[i]\
    \ = \"C\"\n    elseif grades[i] > 1.3 then\n      grades_out[i] = \"C-\"\n   \
    \ elseif grades[i] > 1.0 then\n      grades_out[i] = \"D+\"\n    elseif grades[i]\
    \ > 0.7 then\n      grades_out[i] = \"D\"\n    elseif grades[i] > 0.0 then\n \
    \     grades_out[i] = \"D-\"\n    else\n      grades_out[i] = \"E\"\n    end\n\
    \  end\n  return grades_out\nend", "    -- function here\n    local new_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            new_grades[i] = \"A+\"\n        elseif grade\
    \ >= 3.7 then\n            new_grades[i] = \"A\"\n        elseif grade >= 3.3\
    \ then\n            new_grades[i] = \"A-\"\n        elseif grade >= 3.0 then\n\
    \            new_grades[i] = \"B+\"\n        elseif grade >= 2.7 then\n      \
    \      new_grades[i] = \"B\"\n        elseif grade >= 2.3 then\n            new_grades[i]\
    \ = \"B-\"\n        elseif grade >= 2.0 then\n            new_grades[i] = \"C+\"\
    \n        elseif grade >= 1.7 then\n            new_grades[i] = \"C\"\n      \
    \  elseif grade >= 1.3 then\n            new_grades[i] = \"C-\"\n        elseif\
    \ grade >= 1.0 then\n            new_grades[i] = \"D+\"\n        elseif grade\
    \ >= 0.7 then\n            new_grades[i] = \"D\"\n        elseif grade >= 0.0\
    \ then\n            new_grades[i] = \"D-\"\n        else\n            new_grades[i]\
    \ = \"E\"\n        end\n    end\n    return new_grades\nend", "    -- insert your\
    \ code here\n    return {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\nend", "    -- TODO: implement\
    \ this function\nend", "  \nend", "    local gpa = {}\n    for i = 1, #grades\
    \ do\n        if grades[i] >= 4.0 then\n            gpa[i] = \"A+\"\n        elseif\
    \ grades[i] >= 3.7 then\n            gpa[i] = \"A\"\n        elseif grades[i]\
    \ >= 3.3 then\n            gpa[i] = \"A-\"\n        elseif grades[i] >= 3.0 then\n\
    \            gpa[i] = \"B+\"\n        elseif grades[i] >= 2.7 then\n         \
    \   gpa[i] = \"B\"\n        elseif grades[i] >= 2.3 then\n            gpa[i] =\
    \ \"B-\"\n        elseif grades[i] >= 2.0 then\n            gpa[i] = \"C+\"\n\
    \        elseif grades[i] >= 1.7 then\n            gpa[i] = \"C\"\n        elseif\
    \ grades[i] >= 1.3 then\n            gpa[i] = \"C-\"\n        elseif grades[i]\
    \ >= 1.0 then\n            gpa[i] = \"D+\"\n        elseif grades[i] >= 0.7 then\n\
    \            gpa[i] = \"D\"\n        elseif grades[i] >= 0.0 then\n          \
    \  gpa[i] = \"D-\"\n        else\n            gpa[i] = \"E\"\n        end\n  \
    \  end\n    return gpa\nend", "    -- Implement this function here\n    return\
    \ {\"A+\", \"B+\", \"C+\", \"D+\", \"E\"}\nend", "  local ltr_grades = {}\n  for\
    \ _, grade in ipairs(grades) do\n    if     grade >= 4.0  then ltr_grades[#ltr_grades+1]\
    \ = 'A+'\n    elseif grade >= 3.7  then ltr_grades[#ltr_grades+1] = 'A'\n    elseif\
    \ grade >= 3.3  then ltr_grades[#ltr_grades+1] = 'A-'\n    elseif grade >= 3.0\
    \  then ltr_grades[#ltr_grades+1] = 'B+'\n    elseif grade >= 2.7  then ltr_grades[#ltr_grades+1]\
    \ = 'B'\n    elseif grade >= 2.3  then ltr_grades[#ltr_grades+1] = 'B-'\n    elseif\
    \ grade >= 2.0  then ltr_grades[#ltr_grades+1] = 'C+'\n    elseif grade >= 1.7\
    \  then ltr_grades[#ltr_grades+1] = 'C'\n    elseif grade >= 1.3  then ltr_grades[#ltr_grades+1]\
    \ = 'C-'\n    elseif grade >= 1.0  then ltr_grades[#ltr_grades+1] = 'D+'\n   \
    \ elseif grade >= 0.7  then ltr_grades[#ltr_grades+1] = 'D'\n    elseif grade\
    \ >= 0.0  then ltr_grades[#ltr_grades+1] = 'D-'\n    else                    \
    \ ltr_grades[#ltr_grades+1] = 'E'\n    end\n  end\n  return ltr_grades\nend",
  "    -- Take a list of grades and return the list of letter grades.\n    --\n  \
    \  -- Arguments:\n    --   grades - A list of numbers\n    -- Returns:\n    --\
    \   A list of letter grades\n    local letter_grades = {}\n    for i = 1, #grades\
    \ do\n        if grades[i] >= 4.0 then\n            letter_grades[i] = \"A+\"\n\
    \        elseif grades[i] >= 3.7 then\n            letter_grades[i] = \"A\"\n\
    \        elseif grades[i] >= 3.3 then\n            letter_grades[i] = \"A-\"\n\
    \        elseif grades[i] >= 3.0 then\n            letter_grades[i] = \"B+\"\n\
    \        elseif grades[i] >= 2.7 then\n            letter_grades[i] = \"B\"\n\
    \        elseif grades[i] >= 2.3 then\n            letter_grades[i] = \"B-\"\n\
    \        elseif grades[i] >= 2.0 then\n            letter_grades[i] = \"C+\"\n\
    \        elseif grades[i] >= 1.7 then\n            letter_grades[i] = \"C\"\n\
    \        elseif grades[i] >= 1.3 then\n            letter_grades[i] = \"C-\"\n\
    \        elseif grades[i] >= 1.0 then\n            letter_grades[i] = \"D+\"\n\
    \        elseif grades[i] >= 0.7 then\n            letter_grades[i] = \"D\"\n\
    \        elseif grades[i] >= 0.0 then\n            letter_grades[i] = \"D-\"\n\
    \        else\n            letter_grades[i] = \"E\"\n        end\n    end\n  \
    \  return letter_grades\nend", "\tlocal grades_and_letters = {\n\t\t{ grade =\
    \ 4.0, letter = \"A+\" },\n\t\t{ grade = 3.7, letter = \"A\" },\n\t\t{ grade =\
    \ 3.3, letter = \"A-\" },\n\t\t{ grade = 3.0, letter = \"B+\" },\n\t\t{ grade\
    \ = 2.7, letter = \"B\" },\n\t\t{ grade = 2.3, letter = \"B-\" },\n\t\t{ grade\
    \ = 2.0, letter = \"C+\" },\n\t\t{ grade = 1.7, letter = \"C\" },\n\t\t{ grade\
    \ = 1.3, letter = \"C-\" },\n\t\t{ grade = 1.0, letter = \"D+\" },\n\t\t{ grade\
    \ = 0.7, letter = \"D\" },\n\t\t{ grade = 0.0, letter = \"D-\" },\n\t\t{ grade\
    \ = 0.0, letter = \"E\" }\n\t}\n\tlocal function fn(t)\n\t\tfor i, v in ipairs(grades_and_letters)\
    \ do\n\t\t\tif t >= v.grade then\n\t\t\t\treturn v.letter\n\t\t\tend\n\t\tend\n\
    \tend\n\tlocal r = {}\n\tfor i, v in ipairs(grades) do\n\t\ttable.insert(r, fn(v))\n\
    \tend\n\treturn r\nend", "\t-- TODO: implement function\nend", "    local grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            grades[i] = \"A+\"\n        elseif grade >= 3.7\
    \ then\n            grades[i] = \"A\"\n        elseif grade >= 3.3 then\n    \
    \        grades[i] = \"A-\"\n        elseif grade >= 3.0 then\n            grades[i]\
    \ = \"B+\"\n        elseif grade >= 2.7 then\n            grades[i] = \"B\"\n\
    \        elseif grade >= 2.3 then\n            grades[i] = \"B-\"\n        elseif\
    \ grade >= 2.0 then\n            grades[i] = \"C+\"\n        elseif grade >= 1.7\
    \ then\n            grades[i] = \"C\"\n        elseif grade >= 1.3 then\n    \
    \        grades[i] = \"C-\"\n        elseif grade >= 1.0 then\n            grades[i]\
    \ = \"D+\"\n        elseif grade >= 0.7 then\n            grades[i] = \"D\"\n\
    \        elseif grade >= 0.0 then\n            grades[i] = \"D-\"\n        else\n\
    \            grades[i] = \"E\"\n        end\n    end\n    return grades\nend",
  end, "    -- put your code here\nend", "\tlocal grades = {3.5, 3.3, 1.5, 1.7, 2.0,\
    \ 2.7, 2.3, 2.7, 3.0, 3.7, 4.0}\n\tlocal letter_grades = {}\n\tfor i,v in ipairs(grades)\
    \ do\n\t\tif v > 3.7 then\n\t\t\tletter_grades[i] = \"A+\"\n\t\telseif v > 3.3\
    \ then\n\t\t\tletter_grades[i] = \"A\"\n\t\telseif v > 3.0 then\n\t\t\tletter_grades[i]\
    \ = \"A-\"\n\t\telseif v > 2.7 then\n\t\t\tletter_grades[i] = \"B+\"\n\t\telseif\
    \ v > 2.3 then\n\t\t\tletter_grades[i] = \"B\"\n\t\telseif v > 2.0 then\n\t\t\t\
    letter_grades[i] = \"B-\"\n\t\telseif v > 1.7 then\n\t\t\tletter_grades[i] = \"\
    C+\"\n\t\telseif v > 1.3 then\n\t\t\tletter_grades[i] = \"C\"\n\t\telseif v >\
    \ 1.0 then\n\t\t\tletter_grades[i] = \"C-\"\n\t\telseif v > 0.7 then\n\t\t\tletter_grades[i]\
    \ = \"D+\"\n\t\telseif v > 0.0 then\n\t\t\tletter_grades[i] = \"D\"\n\t\telseif\
    \ v > 0.0 then\n\t\t\tletter_grades[i] = \"D-\"\n\t\telseif v == 0.0 then\n\t\t\
    \tletter_grades[i] = \"E\"\n\t\tend\n\tend\n\treturn letter_grades\nend", "  \
    \  -- TODO: Write your code here\nend", "    local grades_with_letter = {}\n \
    \   for _, gpa in ipairs(grades) do\n        if gpa == 4.0 then\n            table.insert(grades_with_letter,\
    \ 'A+')\n        elseif gpa > 3.7 then\n            table.insert(grades_with_letter,\
    \ 'A')\n        elseif gpa > 3.3 then\n            table.insert(grades_with_letter,\
    \ 'A-')\n        elseif gpa > 3.0 then\n            table.insert(grades_with_letter,\
    \ 'B+')\n        elseif gpa > 2.7 then\n            table.insert(grades_with_letter,\
    \ 'B')\n        elseif gpa > 2.3 then\n            table.insert(grades_with_letter,\
    \ 'B-')\n        elseif gpa > 2.0 then\n            table.insert(grades_with_letter,\
    \ 'C+')\n        elseif gpa > 1.7 then\n            table.insert(grades_with_letter,\
    \ 'C')\n        elseif gpa > 1.3 then\n            table.insert(grades_with_letter,\
    \ 'C-')\n        elseif gpa > 1.0 then\n            table.insert(grades_with_letter,\
    \ 'D+')\n        elseif gpa > 0.7 then\n            table.insert(grades_with_letter,\
    \ 'D')\n        elseif gpa > 0.0 then\n            table.insert(grades_with_letter,\
    \ 'D-')\n        else\n            table.insert(grades_with_letter, 'E')\n   \
    \     end\n    end\n    return grades_with_letter\nend", "    for i, v in ipairs(grades)\
    \ do\n        if v >= 4.0 then\n            grades[i] = \"A+\"\n        elseif\
    \ v >= 3.7 then\n            grades[i] = \"A\"\n        elseif v >= 3.3 then\n\
    \            grades[i] = \"A-\"\n        elseif v >= 3.0 then\n            grades[i]\
    \ = \"B+\"\n        elseif v >= 2.7 then\n            grades[i] = \"B\"\n    \
    \    elseif v >= 2.3 then\n            grades[i] = \"B-\"\n        elseif v >=\
    \ 2.0 then\n            grades[i] = \"C+\"\n        elseif v >= 1.7 then\n   \
    \         grades[i] = \"C\"\n        elseif v >= 1.3 then\n            grades[i]\
    \ = \"C-\"\n        elseif v >= 1.0 then\n            grades[i] = \"D+\"\n   \
    \     elseif v >= 0.7 then\n            grades[i] = \"D\"\n        elseif v >\
    \ 0.0 then\n            grades[i] = \"D-\"\n        else\n            grades[i]\
    \ = \"E\"\n        end\n    end\n    return grades\nend", "    -- Your code here\n\
    end", "  -- Insert your code here\nend", "    -- gradeList is the list of grades\n\
    \    -- grade is a single grade\n    -- outputGrade is the final list of grades\n\
    \    local outputGrade = {}\n    -- The table of the grading scale is defined\
    \ here\n    local gradingScale = {\n        {min = 4.0, max = 4.0, grade = \"\
    A+\"},\n        {min = 3.7, max = 4.0, grade = \"A\"},\n        {min = 3.3, max\
    \ = 3.7, grade = \"A-\"},\n        {min = 3.0, max = 3.3, grade = \"B+\"},\n \
    \       {min = 2.7, max = 3.0, grade = \"B\"},\n        {min = 2.3, max = 2.7,\
    \ grade = \"B-\"},\n        {min = 2.0, max = 2.3, grade = \"C+\"},\n        {min\
    \ = 1.7, max = 2.0, grade = \"C\"},\n        {min = 1.3, max = 1.7, grade = \"\
    C-\"},\n        {min = 1.0, max = 1.3, grade = \"D+\"},\n        {min = 0.7, max\
    \ = 1.0, grade = \"D\"},\n        {min = 0.0, max = 0.7, grade = \"D-\"},\n  \
    \      {min = 0.0, max = 0.0, grade = \"E\"}\n    }\n    -- for-loop to loop through\
    \ all of the grades\n    for i = 1, #grades do\n        -- for-loop to find the\
    \ current grade in the table\n        for j = 1, #gradingScale do\n          \
    \  -- if statement to check if the grade is between the max and min grade of the\
    \ table\n            if grades[i] >= gradingScale[j].min and grades[i] <= gradingScale[j].max\
    \ then\n                -- If the grade is in the table, then it adds the grade\
    \ to the list of output grades\n                outputGrade[i] = gradingScale[j].grade\n\
    \            end\n        end\n    end\n    -- Returns the list of output grades\n\
    \    return outputGrade\nend", "    -- write your code here\nend", "    -- TODO:\
    \ Write the code.\nend", "    -- Write your code here\n    return {\"A+\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"}\nend", "\tfor i, v in ipairs(grades) do\n\t\tif v == 4.0 then\n\t\t\tgrades[i]\
    \ = \"A+\"\n\t\telseif v > 3.7 then\n\t\t\tgrades[i] = \"A\"\n\t\telseif v > 3.3\
    \ then\n\t\t\tgrades[i] = \"A-\"\n\t\telseif v > 3.0 then\n\t\t\tgrades[i] = \"\
    B+\"\n\t\telseif v > 2.7 then\n\t\t\tgrades[i] = \"B\"\n\t\telseif v > 2.3 then\n\
    \t\t\tgrades[i] = \"B-\"\n\t\telseif v > 2.0 then\n\t\t\tgrades[i] = \"C+\"\n\t\
    \telseif v > 1.7 then\n\t\t\tgrades[i] = \"C\"\n\t\telseif v > 1.3 then\n\t\t\t\
    grades[i] = \"C-\"\n\t\telseif v > 1.0 then\n\t\t\tgrades[i] = \"D+\"\n\t\telseif\
    \ v > 0.7 then\n\t\t\tgrades[i] = \"D\"\n\t\telseif v > 0.0 then\n\t\t\tgrades[i]\
    \ = \"D-\"\n\t\telse\n\t\t\tgrades[i] = \"E\"\n\t\tend\n\tend\n\treturn grades\n\
    end", "    local function grade_function(gpa)\n        if gpa >= 4.0 then\n  \
    \          return \"A+\"\n        elseif gpa >= 3.7 then\n            return \"\
    A\"\n        elseif gpa >= 3.3 then\n            return \"A-\"\n        elseif\
    \ gpa >= 3.0 then\n            return \"B+\"\n        elseif gpa >= 2.7 then\n\
    \            return \"B\"\n        elseif gpa >= 2.3 then\n            return\
    \ \"B-\"\n        elseif gpa >= 2.0 then\n            return \"C+\"\n        elseif\
    \ gpa >= 1.7 then\n            return \"C\"\n        elseif gpa >= 1.3 then\n\
    \            return \"C-\"\n        elseif gpa >= 1.0 then\n            return\
    \ \"D+\"\n        elseif gpa >= 0.7 then\n            return \"D\"\n        elseif\
    \ gpa >= 0.0 then\n            return \"D-\"\n        else\n            return\
    \ \"E\"\n        end\n    end\n    local letter_grades = {}\n    for _, grade\
    \ in ipairs(grades) do\n        table.insert(letter_grades, grade_function(grade))\n\
    \    end\n    return letter_grades\nend\nassert(table.concat(numerical_letter_grade({4.0,\
    \ 3.2, 3.7, 3.9, 3.4, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.3, 0.0, -0.1}))\
    \ == \"A+A-AB+AB-BC+BC-CD+DDE\")", "\t--[[\n\t\tlocal grades = {4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}\n\t\t\n\t\tcreate a mapping\
    \ of numbers to letters\n\t\tfor each grade in the table of grades\n\t\t\tget\
    \ the letter grade and append to a new table, return the new table\n\t--]]\n\t\
    --[[\n\t\n\t\t\n\t\t1) use a mapping table to convert number to letter\n\t\t\t\
    where the key is the GPA and the value is the letter\n\t\t2) loop through the\
    \ grades table\n\t\t\tusing the index of the grades table, \n\t\t\taccess the\
    \ map table to get the letter grade\n\t\t\treturn the table\n\t--]]\n\tlocal mapping\
    \ = {\n\t\t[4.0] = \"A+\",\n\t\t[3.7] = \"A\",\n\t\t[3.3] = \"A-\",\n\t\t[3.0]\
    \ = \"B+\",\n\t\t[2.7] = \"B\",\n\t\t[2.3] = \"B-\",\n\t\t[2.0] = \"C+\",\n\t\t\
    [1.7] = \"C\",\n\t\t[1.3] = \"C-\",\n\t\t[1.0] = \"D+\",\n\t\t[0.7] = \"D\",\n\
    \t\t[0.0] = \"D-\",\n\t\t[0.0] = \"E\"\n\t}\n\t\n\tlocal new_table = {}\n\tfor\
    \ i = 1, #grades do\n\t\tlocal letter = mapping[grades[i]]\n\t\tnew_table[i] =\
    \ letter\n\tend\n\t\n\treturn new_table\nend", "    local grades_and_letters =\
    \ {\n        [4.0] = \"A+\",\n        [3.7] = \"A\",\n        [3.3] = \"A-\",\n\
    \        [3.0] = \"B+\",\n        [2.7] = \"B\",\n        [2.3] = \"B-\",\n  \
    \      [2.0] = \"C+\",\n        [1.7] = \"C\",\n        [1.3] = \"C-\",\n    \
    \    [1.0] = \"D+\",\n        [0.7] = \"D\",\n        [0.0] = \"D-\",\n      \
    \  [-0.1] = \"E\"\n    }\n    local letters = {}\n    for _, grade in ipairs(grades)\
    \ do\n        local letter = grades_and_letters[grade]\n        if letter then\n\
    \            table.insert(letters, letter)\n        end\n    end\n    return letters\n\
    end", "    local letters = {}\n    for i = 1, #grades do\n        if grades[i]\
    \ >= 4.0 then\n            letters[i] = \"A+\"\n        elseif grades[i] >= 3.7\
    \ then\n            letters[i] = \"A\"\n        elseif grades[i] >= 3.3 then\n\
    \            letters[i] = \"A-\"\n        elseif grades[i] >= 3.0 then\n     \
    \       letters[i] = \"B+\"\n        elseif grades[i] >= 2.7 then\n          \
    \  letters[i] = \"B\"\n        elseif grades[i] >= 2.3 then\n            letters[i]\
    \ = \"B-\"\n        elseif grades[i] >= 2.0 then\n            letters[i] = \"\
    C+\"\n        elseif grades[i] >= 1.7 then\n            letters[i] = \"C\"\n \
    \       elseif grades[i] >= 1.3 then\n            letters[i] = \"C-\"\n      \
    \  elseif grades[i] >= 1.0 then\n            letters[i] = \"D+\"\n        elseif\
    \ grades[i] >= 0.7 then\n            letters[i] = \"D\"\n        elseif grades[i]\
    \ >= 0.0 then\n            letters[i] = \"D-\"\n        else\n            letters[i]\
    \ = \"E\"\n        end\n    end\n    return letters\nend", "    local list = {}\n\
    \    for i = 1, #grades do\n        local grade = grades[i]\n        if grade\
    \ >= 4.0 then\n            list[i] = \"A+\"\n        elseif grade >= 3.7 then\n\
    \            list[i] = \"A\"\n        elseif grade >= 3.3 then\n            list[i]\
    \ = \"A-\"\n        elseif grade >= 3.0 then\n            list[i] = \"B+\"\n \
    \       elseif grade >= 2.7 then\n            list[i] = \"B\"\n        elseif\
    \ grade >= 2.3 then\n            list[i] = \"B-\"\n        elseif grade >= 2.0\
    \ then\n            list[i] = \"C+\"\n        elseif grade >= 1.7 then\n     \
    \       list[i] = \"C\"\n        elseif grade >= 1.3 then\n            list[i]\
    \ = \"C-\"\n        elseif grade >= 1.0 then\n            list[i] = \"D+\"\n \
    \       elseif grade >= 0.7 then\n            list[i] = \"D\"\n        elseif\
    \ grade >= 0.0 then\n            list[i] = \"D-\"\n        else\n            list[i]\
    \ = \"E\"\n        end\n    end\n    return list\nend", "\t-- your code goes here\n\
    end", "    -- Use the following table for the algorithm:\n    local grade_table\
    \ = {\n        [4.0] = \"A+\",\n        [3.7] = \"A\",\n        [3.3] = \"A-\"\
    ,\n        [3.0] = \"B+\",\n        [2.7] = \"B\",\n        [2.3] = \"B-\",\n\
    \        [2.0] = \"C+\",\n        [1.7] = \"C\",\n        [1.3] = \"C-\",\n  \
    \      [1.0] = \"D+\",\n        [0.7] = \"D\",\n        [0.0] = \"D-\",\n    \
    \    [-1.0] = \"E\"\n    }\n    local letter_grades = {}", "  -- body\nend", " \
    \   local letter_grades = {}\n    for _, gpa in ipairs(grades) do\n        if\
    \ gpa == 4.0 then\n            table.insert(letter_grades, \"A+\")\n        elseif\
    \ gpa >= 3.7 then\n            table.insert(letter_grades, \"A\")\n        elseif\
    \ gpa >= 3.3 then\n            table.insert(letter_grades, \"A-\")\n        elseif\
    \ gpa >= 3.0 then\n            table.insert(letter_grades, \"B+\")\n        elseif\
    \ gpa >= 2.7 then\n            table.insert(letter_grades, \"B\")\n        elseif\
    \ gpa >= 2.3 then\n            table.insert(letter_grades, \"B-\")\n        elseif\
    \ gpa >= 2.0 then\n            table.insert(letter_grades, \"C+\")\n        elseif\
    \ gpa >= 1.7 then\n            table.insert(letter_grades, \"C\")\n        elseif\
    \ gpa >= 1.3 then\n            table.insert(letter_grades, \"C-\")\n        elseif\
    \ gpa >= 1.0 then\n            table.insert(letter_grades, \"D+\")\n        elseif\
    \ gpa >= 0.7 then\n            table.insert(letter_grades, \"D\")\n        elseif\
    \ gpa >= 0.0 then\n            table.insert(letter_grades, \"D-\")\n        else\n\
    \            table.insert(letter_grades, \"E\")\n        end\n    end\n    return\
    \ letter_grades\nend", "    local letter_grades = {}\n    for i, v in ipairs(grades)\
    \ do\n        if v > 4.0 then\n            letter_grades[i] = \"A+\"\n       \
    \ elseif v > 3.7 then\n            letter_grades[i] = \"A\"\n        elseif v\
    \ > 3.3 then\n            letter_grades[i] = \"A-\"\n        elseif v > 3.0 then\n\
    \            letter_grades[i] = \"B+\"\n        elseif v > 2.7 then\n        \
    \    letter_grades[i] = \"B\"\n        elseif v > 2.3 then\n            letter_grades[i]\
    \ = \"B-\"\n        elseif v > 2.0 then\n            letter_grades[i] = \"C+\"\
    \n        elseif v > 1.7 then\n            letter_grades[i] = \"C\"\n        elseif\
    \ v > 1.3 then\n            letter_grades[i] = \"C-\"\n        elseif v > 1.0\
    \ then\n            letter_grades[i] = \"D+\"\n        elseif v > 0.7 then\n \
    \           letter_grades[i] = \"D\"\n        elseif v > 0.0 then\n          \
    \  letter_grades[i] = \"D-\"\n        else\n            letter_grades[i] = \"\
    E\"\n        end\n    end\n    return letter_grades\nend", "    return nil\nend",
  "    return {}\nend", "    -- your code here\nend", "\tlocal letter_grades = {}\n\
    \tfor i = 1, #grades do\n\t\tif grades[i] == 4.0 then\n\t\t\tletter_grades[i]\
    \ = \"A+\"\n\t\telseif grades[i] > 3.7 then\n\t\t\tletter_grades[i] = \"A\"\n\t\
    \telseif grades[i] > 3.3 then\n\t\t\tletter_grades[i] = \"A-\"\n\t\telseif grades[i]\
    \ > 3.0 then\n\t\t\tletter_grades[i] = \"B+\"\n\t\telseif grades[i] > 2.7 then\n\
    \t\t\tletter_grades[i] = \"B\"\n\t\telseif grades[i] > 2.3 then\n\t\t\tletter_grades[i]\
    \ = \"B-\"\n\t\telseif grades[i] > 2.0 then\n\t\t\tletter_grades[i] = \"C+\"\n\
    \t\telseif grades[i] > 1.7 then\n\t\t\tletter_grades[i] = \"C\"\n\t\telseif grades[i]\
    \ > 1.3 then\n\t\t\tletter_grades[i] = \"C-\"\n\t\telseif grades[i] > 1.0 then\n\
    \t\t\tletter_grades[i] = \"D+\"\n\t\telseif grades[i] > 0.7 then\n\t\t\tletter_grades[i]\
    \ = \"D\"\n\t\telseif grades[i] > 0.0 then\n\t\t\tletter_grades[i] = \"D-\"\n\t\
    \telse\n\t\t\tletter_grades[i] = \"E\"\n\t\tend\n\tend\n\treturn letter_grades\n\
    end", "  return {}\nend", "    local result = {}\n    for _, grade in ipairs(grades)\
    \ do\n        if grade > 4.0 then \n            table.insert(result, \"A+\")\n\
    \        elseif grade > 3.7 then\n            table.insert(result, \"A\")\n  \
    \      elseif grade > 3.3 then\n            table.insert(result, \"A-\")\n   \
    \     elseif grade > 3.0 then\n            table.insert(result, \"B+\")\n    \
    \    elseif grade > 2.7 then\n            table.insert(result, \"B\")\n      \
    \  elseif grade > 2.3 then\n            table.insert(result, \"B-\")\n       \
    \ elseif grade > 2.0 then\n            table.insert(result, \"C+\")\n        elseif\
    \ grade > 1.7 then\n            table.insert(result, \"C\")\n        elseif grade\
    \ > 1.3 then\n            table.insert(result, \"C-\")\n        elseif grade >\
    \ 1.0 then\n            table.insert(result, \"D+\")\n        elseif grade > 0.7\
    \ then\n            table.insert(result, \"D\")\n        elseif grade > 0.0 then\n\
    \            table.insert(result, \"D-\")\n        else\n            table.insert(result,\
    \ \"E\")\n        end\n    end\n    return result\nend", "\tlocal letter_grades\
    \ = {}\n\tfor i, v in ipairs(grades) do\n\t\tif v > 4.0 then\n\t\t\ttable.insert(letter_grades,\
    \ \"A+\")\n\t\telseif v > 3.7 then\n\t\t\ttable.insert(letter_grades, \"A\")\n\
    \t\telseif v > 3.3 then\n\t\t\ttable.insert(letter_grades, \"A-\")\n\t\telseif\
    \ v > 3.0 then\n\t\t\ttable.insert(letter_grades, \"B+\")\n\t\telseif v > 2.7\
    \ then\n\t\t\ttable.insert(letter_grades, \"B\")\n\t\telseif v > 2.3 then\n\t\t\
    \ttable.insert(letter_grades, \"B-\")\n\t\telseif v > 2.0 then\n\t\t\ttable.insert(letter_grades,\
    \ \"C+\")\n\t\telseif v > 1.7 then\n\t\t\ttable.insert(letter_grades, \"C\")\n\
    \t\telseif v > 1.3 then\n\t\t\ttable.insert(letter_grades, \"C-\")\n\t\telseif\
    \ v > 1.0 then\n\t\t\ttable.insert(letter_grades, \"D+\")\n\t\telseif v > 0.7\
    \ then\n\t\t\ttable.insert(letter_grades, \"D\")\n\t\telseif v > 0.0 then\n\t\t\
    \ttable.insert(letter_grades, \"D-\")\n\t\telse\n\t\t\ttable.insert(letter_grades,\
    \ \"E\")\n\t\tend\n\tend\n\treturn letter_grades\nend", "    local grades = {}\n\
    \    for _, v in ipairs(grades) do\n        if v >= 4.0 then\n            table.insert(grades,\
    \ \"A+\")\n        elseif v > 3.7 then\n            table.insert(grades, \"A\"\
    )\n        elseif v > 3.3 then\n            table.insert(grades, \"A-\")\n   \
    \     elseif v > 3.0 then\n            table.insert(grades, \"B+\")\n        elseif\
    \ v > 2.7 then\n            table.insert(grades, \"B\")\n        elseif v > 2.3\
    \ then\n            table.insert(grades, \"B-\")\n        elseif v > 2.0 then\n\
    \            table.insert(grades, \"C+\")\n        elseif v > 1.7 then\n     \
    \       table.insert(grades, \"C\")\n        elseif v > 1.3 then\n           \
    \ table.insert(grades, \"C-\")\n        elseif v > 1.0 then\n            table.insert(grades,\
    \ \"D+\")\n        elseif v > 0.7 then\n            table.insert(grades, \"D\"\
    )\n        elseif v > 0.0 then\n            table.insert(grades, \"D-\")\n   \
    \     elseif v == 0.0 then\n            table.insert(grades, \"E\")\n        end\n\
    \    end\n    return grades\nend", "    local grades_letter = {}\n    local grades_numerical\
    \ = {0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0}\n    local letter_grade\
    \ = {'E', 'D-', 'D+', 'D', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'}\n\
    \    local str\n    local index", "    local letter = {}\n    for i = 1, #grades\
    \ do\n        if grades[i] == 4.0 then\n            letter[i] = \"A+\"\n     \
    \   elseif grades[i] > 3.7 then\n            letter[i] = \"A\"\n        elseif\
    \ grades[i] > 3.3 then\n            letter[i] = \"A-\"\n        elseif grades[i]\
    \ > 3.0 then\n            letter[i] = \"B+\"\n        elseif grades[i] > 2.7 then\n\
    \            letter[i] = \"B\"\n        elseif grades[i] > 2.3 then\n        \
    \    letter[i] = \"B-\"\n        elseif grades[i] > 2.0 then\n            letter[i]\
    \ = \"C+\"\n        elseif grades[i] > 1.7 then\n            letter[i] = \"C\"\
    \n        elseif grades[i] > 1.3 then\n            letter[i] = \"C-\"\n      \
    \  elseif grades[i] > 1.0 then\n            letter[i] = \"D+\"\n        elseif\
    \ grades[i] > 0.7 then\n            letter[i] = \"D\"\n        elseif grades[i]\
    \ > 0.0 then\n            letter[i] = \"D-\"\n        else\n            letter[i]\
    \ = \"E\"\n        end\n    end\n    return letter\nend", "    local letter_grades\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        local\
    \ letter_grade\n        if (grade > 4.0) then\n            letter_grade = \"A+\"\
    \n        elseif (grade > 3.7) then\n            letter_grade = \"A\"\n      \
    \  elseif (grade > 3.3) then\n            letter_grade = \"A-\"\n        elseif\
    \ (grade > 3.0) then\n            letter_grade = \"B+\"\n        elseif (grade\
    \ > 2.7) then\n            letter_grade = \"B\"\n        elseif (grade > 2.3)\
    \ then\n            letter_grade = \"B-\"\n        elseif (grade > 2.0) then\n\
    \            letter_grade = \"C+\"\n        elseif (grade > 1.7) then\n      \
    \      letter_grade = \"C\"\n        elseif (grade > 1.3) then\n            letter_grade\
    \ = \"C-\"\n        elseif (grade > 1.0) then\n            letter_grade = \"D+\"\
    \n        elseif (grade > 0.7) then\n            letter_grade = \"D\"\n      \
    \  elseif (grade > 0.0) then\n            letter_grade = \"D-\"\n        else\n\
    \            letter_grade = \"E\"\n        end\n        letter_grades[i] = letter_grade\n\
    \    end\n    return letter_grades\nend", "  local grade_letters = {}\n  for k,grade\
    \ in pairs(grades) do\n    if(grade > 3.7) then\n      grade_letters[k] = \"A+\"\
    \n    elseif(grade > 3.3) then\n      grade_letters[k] = \"A\"\n    elseif(grade\
    \ > 3.0) then\n      grade_letters[k] = \"A-\"\n    elseif(grade > 2.7) then\n\
    \      grade_letters[k] = \"B+\"\n    elseif(grade > 2.3) then\n      grade_letters[k]\
    \ = \"B\"\n    elseif(grade > 2.0) then\n      grade_letters[k] = \"B-\"\n   \
    \ elseif(grade > 1.7) then\n      grade_letters[k] = \"C+\"\n    elseif(grade\
    \ > 1.3) then\n      grade_letters[k] = \"C\"\n    elseif(grade > 1.0) then\n\
    \      grade_letters[k] = \"C-\"\n    elseif(grade > 0.7) then\n      grade_letters[k]\
    \ = \"D+\"\n    elseif(grade > 0.0) then\n      grade_letters[k] = \"D\"\n   \
    \ elseif(grade == 0.0) then\n      grade_letters[k] = \"D-\"\n    else\n     \
    \ grade_letters[k] = \"E\"\n    end\n  end\n  return grade_letters\nend", "  \
    \  -- your code here\nend", "\t\nend", "    local result = {}\n    for i = 1,\
    \ #grades do\n        if grades[i] >= 4.0 then\n            result[i] = \"A+\"\
    \n        elseif grades[i] >= 3.7 then\n            result[i] = \"A\"\n      \
    \  elseif grades[i] >= 3.3 then\n            result[i] = \"A-\"\n        elseif\
    \ grades[i] >= 3.0 then\n            result[i] = \"B+\"\n        elseif grades[i]\
    \ >= 2.7 then\n            result[i] = \"B\"\n        elseif grades[i] >= 2.3\
    \ then\n            result[i] = \"B-\"\n        elseif grades[i] >= 2.0 then\n\
    \            result[i] = \"C+\"\n        elseif grades[i] >= 1.7 then\n      \
    \      result[i] = \"C\"\n        elseif grades[i] >= 1.3 then\n            result[i]\
    \ = \"C-\"\n        elseif grades[i] >= 1.0 then\n            result[i] = \"D+\"\
    \n        elseif grades[i] >= 0.7 then\n            result[i] = \"D\"\n      \
    \  elseif grades[i] >= 0.0 then\n            result[i] = \"D-\"\n        else\n\
    \            result[i] = \"E\"\n        end\n    end\n    return result\nend",
  "    for i = 1,#grades do\n        if grades[i] == 4.0 then\n            grades[i]\
    \ = \"A+\"\n        elseif grades[i] > 3.7 then\n            grades[i] = \"A\"\
    \n        elseif grades[i] > 3.3 then\n            grades[i] = \"A-\"\n      \
    \  elseif grades[i] > 3.0 then\n            grades[i] = \"B+\"\n        elseif\
    \ grades[i] > 2.7 then\n            grades[i] = \"B\"\n        elseif grades[i]\
    \ > 2.3 then\n            grades[i] = \"B-\"\n        elseif grades[i] > 2.0 then\n\
    \            grades[i] = \"C+\"\n        elseif grades[i] > 1.7 then\n       \
    \     grades[i] = \"C\"\n        elseif grades[i] > 1.3 then\n            grades[i]\
    \ = \"C-\"\n        elseif grades[i] > 1.0 then\n            grades[i] = \"D+\"\
    \n        elseif grades[i] > 0.7 then\n            grades[i] = \"D\"\n       \
    \ elseif grades[i] > 0.0 then\n            grades[i] = \"D-\"\n        elseif\
    \ grades[i] == 0.0 then\n            grades[i] = \"E\"\n        end\n    end\n\
    \    return grades\nend", "    local grades_with_letters = {}\n    for _, grade\
    \ in ipairs(grades) do\n        table.insert(grades_with_letters, grade_to_letter(grade))\n\
    \    end\n    return grades_with_letters\nend", "\tfor k,v in pairs(grades) do\n\
    \t\tif (v >= 4.0) then\n\t\t\tprint(\"A+\")\n\t\telseif (v >= 3.7) then\n\t\t\t\
    print(\"A\")\n\t\telseif (v >= 3.3) then\n\t\t\tprint(\"A-\")\n\t\telseif (v >=\
    \ 3.0) then\n\t\t\tprint(\"B+\")\n\t\telseif (v >= 2.7) then\n\t\t\tprint(\"B\"\
    )\n\t\telseif (v >= 2.3) then\n\t\t\tprint(\"B-\")\n\t\telseif (v >= 2.0) then\n\
    \t\t\tprint(\"C+\")\n\t\telseif (v >= 1.7) then\n\t\t\tprint(\"C\")\n\t\telseif\
    \ (v >= 1.3) then\n\t\t\tprint(\"C-\")\n\t\telseif (v >= 1.0) then\n\t\t\tprint(\"\
    D+\")\n\t\telseif (v >= 0.7) then\n\t\t\tprint(\"D\")\n\t\telseif (v >= 0.0) then\n\
    \t\t\tprint(\"D-\")\n\t\telse\n\t\t\tprint(\"E\")\n\t\tend\n\tend\nend", "   \
    \ local grade_table = {[\"A+\"] = 4.0, [\"A\"] = 3.7, [\"A-\"] = 3.3, [\"B+\"\
    ] = 3.0,\n        [\"B\"] = 2.7, [\"B-\"] = 2.3, [\"C+\"] = 2.0, [\"C\"] = 1.7,\
    \ [\"C-\"] = 1.3,\n        [\"D+\"] = 1.0, [\"D\"] = 0.7, [\"D-\"] = 0.0, [\"\
    E\"] = 0.0}\n    local letter_grades = {}\n    for _, grade in ipairs(grades)\
    \ do\n        for letter, number in pairs(grade_table) do\n            if grade\
    \ >= number then\n                table.insert(letter_grades, letter)\n      \
    \          break\n            end\n        end\n    end\n    return letter_grades\n\
    end", "\t-- You code goes here\nend", "\nend", '    local grades_with_letters
    = {}', "    local result = {}\n    for i, v in ipairs(grades) do\n        if v\
    \ > 4.0 then\n            result[i] = \"A+\"\n        elseif v > 3.7 then\n  \
    \          result[i] = \"A\"\n        elseif v > 3.3 then\n            result[i]\
    \ = \"A-\"\n        elseif v > 3.0 then\n            result[i] = \"B+\"\n    \
    \    elseif v > 2.7 then\n            result[i] = \"B\"\n        elseif v > 2.3\
    \ then\n            result[i] = \"B-\"\n        elseif v > 2.0 then\n        \
    \    result[i] = \"C+\"\n        elseif v > 1.7 then\n            result[i] =\
    \ \"C\"\n        elseif v > 1.3 then\n            result[i] = \"C-\"\n       \
    \ elseif v > 1.0 then\n            result[i] = \"D+\"\n        elseif v > 0.7\
    \ then\n            result[i] = \"D\"\n        elseif v > 0.0 then\n         \
    \   result[i] = \"D-\"\n        else\n            result[i] = \"E\"\n        end\n\
    \    end\n    return result\nend", "    local grade_arr = {}\n    for _,grade\
    \ in ipairs(grades) do\n        local letter_grade = \"E\"\n        if grade >=\
    \ 4.0 then\n            letter_grade = \"A+\"\n        elseif grade >= 3.7 then\n\
    \            letter_grade = \"A\"\n        elseif grade >= 3.3 then\n        \
    \    letter_grade = \"A-\"\n        elseif grade >= 3.0 then\n            letter_grade\
    \ = \"B+\"\n        elseif grade >= 2.7 then\n            letter_grade = \"B\"\
    \n        elseif grade >= 2.3 then\n            letter_grade = \"B-\"\n      \
    \  elseif grade >= 2.0 then\n            letter_grade = \"C+\"\n        elseif\
    \ grade >= 1.7 then\n            letter_grade = \"C\"\n        elseif grade >=\
    \ 1.3 then\n            letter_grade = \"C-\"\n        elseif grade >= 1.0 then\n\
    \            letter_grade = \"D+\"\n        elseif grade >= 0.7 then\n       \
    \     letter_grade = \"D\"\n        elseif grade >= 0.0 then\n            letter_grade\
    \ = \"D-\"\n        end\n        table.insert(grade_arr, letter_grade)\n    end\n\
    \    return grade_arr\nend", "    local ret = {}\n    for _, g in ipairs(grades)\
    \ do\n        local val\n        if g > 4.0 then\n            val = 'A+'\n   \
    \     elseif g > 3.7 then\n            val = 'A'\n        elseif g > 3.3 then\n\
    \            val = 'A-'\n        elseif g > 3.0 then\n            val = 'B+'\n\
    \        elseif g > 2.7 then\n            val = 'B'\n        elseif g > 2.3 then\n\
    \            val = 'B-'\n        elseif g > 2.0 then\n            val = 'C+'\n\
    \        elseif g > 1.7 then\n            val = 'C'\n        elseif g > 1.3 then\n\
    \            val = 'C-'\n        elseif g > 1.0 then\n            val = 'D+'\n\
    \        elseif g > 0.7 then\n            val = 'D'\n        elseif g >= 0.0 then\n\
    \            val = 'D-'\n        elseif g < 0.0 then\n            val = 'E'\n\
    \        end\n        table.insert(ret, val)\n    end\n    return ret\nend", " \
    \ \nend", "    local ans = {}\n    for i, grade in ipairs(grades) do\n       \
    \ if grade > 3.7 then\n            ans[i] = \"A+\"\n        elseif grade > 3.3\
    \ then\n            ans[i] = \"A\"\n        elseif grade > 3.0 then\n        \
    \    ans[i] = \"A-\"\n        elseif grade > 2.7 then\n            ans[i] = \"\
    B+\"\n        elseif grade > 2.3 then\n            ans[i] = \"B\"\n        elseif\
    \ grade > 2.0 then\n            ans[i] = \"B-\"\n        elseif grade > 1.7 then\n\
    \            ans[i] = \"C+\"\n        elseif grade > 1.3 then\n            ans[i]\
    \ = \"C\"\n        elseif grade > 1.0 then\n            ans[i] = \"C-\"\n    \
    \    elseif grade > 0.7 then\n            ans[i] = \"D+\"\n        elseif grade\
    \ > 0.0 then\n            ans[i] = \"D\"\n        elseif grade > -1.0 then\n \
    \           ans[i] = \"D-\"\n        else\n            ans[i] = \"E\"\n      \
    \  end\n    end\n    return ans\nend", "  -- TODO\nend", '-- > numerical_letter_grade({3.3,
    2.7, 2.0, 4.0})', "    -- Exercise 3.3: Define a function numerical_letter_grade\
    \ that takes a list\n    -- of GPA and produce a list of letter grades.\nend",
  "\nend", "\tlocal letter_grades = {}\n\tfor i = 1, #grades do\n\t\tlocal grade =\
    \ grades[i]\n\t\t-- letter_grades[i] = 'A+' -- replace this line with your solution\n\
    \t\tif grade > 4.0 then\n\t\t\tletter_grades[i] = 'A+'\n\t\telseif grade > 3.7\
    \ then\n\t\t\tletter_grades[i] = 'A'\n\t\telseif grade > 3.3 then\n\t\t\tletter_grades[i]\
    \ = 'A-'\n\t\telseif grade > 3.0 then\n\t\t\tletter_grades[i] = 'B+'\n\t\telseif\
    \ grade > 2.7 then\n\t\t\tletter_grades[i] = 'B'\n\t\telseif grade > 2.3 then\n\
    \t\t\tletter_grades[i] = 'B-'\n\t\telseif grade > 2.0 then\n\t\t\tletter_grades[i]\
    \ = 'C+'\n\t\telseif grade > 1.7 then\n\t\t\tletter_grades[i] = 'C'\n\t\telseif\
    \ grade > 1.3 then\n\t\t\tletter_grades[i] = 'C-'\n\t\telseif grade > 1.0 then\n\
    \t\t\tletter_grades[i] = 'D+'\n\t\telseif grade > 0.7 then\n\t\t\tletter_grades[i]\
    \ = 'D'\n\t\telseif grade > 0.0 then\n\t\t\tletter_grades[i] = 'D-'\n\t\telseif\
    \ grade == 0.0 then\n\t\t\tletter_grades[i] = 'E'\n\t\tend\n\tend\n\treturn letter_grades\n\
    end", "\tlocal grade_table = {\n\t\t[\"4.0\"] = \"A+\",\n\t\t[\"3.7\"] = \"A\"\
    ,\n\t\t[\"3.3\"] = \"A-\",\n\t\t[\"3.0\"] = \"B+\",\n\t\t[\"2.7\"] = \"B\",\n\t\
    \t[\"2.3\"] = \"B-\",\n\t\t[\"2.0\"] = \"C+\",\n\t\t[\"1.7\"] = \"C\",\n\t\t[\"\
    1.3\"] = \"C-\",\n\t\t[\"1.0\"] = \"D+\",\n\t\t[\"0.7\"] = \"D\",\n\t\t[\"0.0\"\
    ] = \"D-\",\n\t\t[\"0.0\"] = \"E\"\n\t}\n\tlocal result = {}\n\tfor _, grade in\
    \ ipairs(grades) do\n\t\tfor key, value in pairs(grade_table) do\n\t\t\tif grade\
    \ >= tonumber(key) then\n\t\t\t\ttable.insert(result, value)\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn result\nend", "  -- your code here\n  return\
    \ {}\nend", "    return table.map(grades, function(gpa)\n        if gpa > 4.0\
    \ then\n            return \"A+\"\n        elseif gpa > 3.7 then\n           \
    \ return \"A\"\n        elseif gpa > 3.3 then\n            return \"A-\"\n   \
    \     elseif gpa > 3.0 then\n            return \"B+\"\n        elseif gpa > 2.7\
    \ then\n            return \"B\"\n        elseif gpa > 2.3 then\n            return\
    \ \"B-\"\n        elseif gpa > 2.0 then\n            return \"C+\"\n        elseif\
    \ gpa > 1.7 then\n            return \"C\"\n        elseif gpa > 1.3 then\n  \
    \          return \"C-\"\n        elseif gpa > 1.0 then\n            return \"\
    D+\"\n        elseif gpa > 0.7 then\n            return \"D\"\n        elseif\
    \ gpa > 0.0 then\n            return \"D-\"\n        else\n            return\
    \ \"E\"\n        end\n    end)\nend", '    local grades = {}', "  -- write your\
    \ code here\n  local grades_with_letters = {}\n  for i, grade in ipairs(grades)\
    \ do\n    if grade == 4.0 then\n      grades_with_letters[i] = \"A+\"\n    elseif\
    \ grade > 3.7 then\n      grades_with_letters[i] = \"A\"\n    elseif grade > 3.3\
    \ then\n      grades_with_letters[i] = \"A-\"\n    elseif grade > 3.0 then\n \
    \     grades_with_letters[i] = \"B+\"\n    elseif grade > 2.7 then\n      grades_with_letters[i]\
    \ = \"B\"\n    elseif grade > 2.3 then\n      grades_with_letters[i] = \"B-\"\n\
    \    elseif grade > 2.0 then\n      grades_with_letters[i] = \"C+\"\n    elseif\
    \ grade > 1.7 then\n      grades_with_letters[i] = \"C\"\n    elseif grade > 1.3\
    \ then\n      grades_with_letters[i] = \"C-\"\n    elseif grade > 1.0 then\n \
    \     grades_with_letters[i] = \"D+\"\n    elseif grade > 0.7 then\n      grades_with_letters[i]\
    \ = \"D\"\n    elseif grade > 0.0 then\n      grades_with_letters[i] = \"D-\"\n\
    \    elseif grade == 0.0 then\n      grades_with_letters[i] = \"E\"\n    end\n\
    \  end\n  return grades_with_letters\nend", "  -- your code here\n  local letter_grade\
    \ = {}\n  for i = 1, #grades do\n    if grades[i] >= 4.0 then\n      letter_grade[i]\
    \ = \"A+\"\n    elseif grades[i] >= 3.7 then\n      letter_grade[i] = \"A\"\n\
    \    elseif grades[i] >= 3.3 then\n      letter_grade[i] = \"A-\"\n    elseif\
    \ grades[i] >= 3.0 then\n      letter_grade[i] = \"B+\"\n    elseif grades[i]\
    \ >= 2.7 then\n      letter_grade[i] = \"B\"\n    elseif grades[i] >= 2.3 then\n\
    \      letter_grade[i] = \"B-\"\n    elseif grades[i] >= 2.0 then\n      letter_grade[i]\
    \ = \"C+\"\n    elseif grades[i] >= 1.7 then\n      letter_grade[i] = \"C\"\n\
    \    elseif grades[i] >= 1.3 then\n      letter_grade[i] = \"C-\"\n    elseif\
    \ grades[i] >= 1.0 then\n      letter_grade[i] = \"D+\"\n    elseif grades[i]\
    \ >= 0.7 then\n      letter_grade[i] = \"D\"\n    elseif grades[i] >= 0.0 then\n\
    \      letter_grade[i] = \"D-\"\n    else\n      letter_grade[i] = \"E\"\n   \
    \ end\n  end\n  return letter_grade\nend", "    -- use a table to store the grades\n\
    \    local letter_grade = {}\n    -- check the grades and assign corresponding\
    \ grades\n    for i, grade in ipairs(grades) do\n        if grade > 4.0 then\n\
    \            letter_grade[i] = \"A+\"\n        elseif grade > 3.7 then\n     \
    \       letter_grade[i] = \"A\"\n        elseif grade > 3.3 then\n           \
    \ letter_grade[i] = \"A-\"\n        elseif grade > 3.0 then\n            letter_grade[i]\
    \ = \"B+\"\n        elseif grade > 2.7 then\n            letter_grade[i] = \"\
    B\"\n        elseif grade > 2.3 then\n            letter_grade[i] = \"B-\"\n \
    \       elseif grade > 2.0 then\n            letter_grade[i] = \"C+\"\n      \
    \  elseif grade > 1.7 then\n            letter_grade[i] = \"C\"\n        elseif\
    \ grade > 1.3 then\n            letter_grade[i] = \"C-\"\n        elseif grade\
    \ > 1.0 then\n            letter_grade[i] = \"D+\"\n        elseif grade > 0.7\
    \ then\n            letter_grade[i] = \"D\"\n        elseif grade > 0.0 then\n\
    \            letter_grade[i] = \"D-\"\n        elseif grade == 0.0 then\n    \
    \        letter_grade[i] = \"E\"\n        end\n    end\n    return letter_grade\n\
    end", "-- code here\nend", "    -- TODO: complete this function \n    for _, x\
    \ in ipairs(grades) do\n        local grade = x.grade\n        --print(grade)\n\
    \        if grade >= 4.0 then\n            x.letter_grade = \"A+\"\n        elseif\
    \ grade >= 3.7 then\n            x.letter_grade = \"A\"\n        elseif grade\
    \ >= 3.3 then\n            x.letter_grade = \"A-\"\n        elseif grade >= 3.0\
    \ then\n            x.letter_grade = \"B+\"\n        elseif grade >= 2.7 then\n\
    \            x.letter_grade = \"B\"\n        elseif grade >= 2.3 then\n      \
    \      x.letter_grade = \"B-\"\n        elseif grade >= 2.0 then\n           \
    \ x.letter_grade = \"C+\"\n        elseif grade >= 1.7 then\n            x.letter_grade\
    \ = \"C\"\n        elseif grade >= 1.3 then\n            x.letter_grade = \"C-\"\
    \n        elseif grade >= 1.0 then\n            x.letter_grade = \"D+\"\n    \
    \    elseif grade >= 0.7 then\n            x.letter_grade = \"D\"\n        elseif\
    \ grade >= 0.0 then\n            x.letter_grade = \"D-\"\n        else\n     \
    \       x.letter_grade = \"E\"\n        end\n    end\n    return grades\nend",
  "    local out = {}\n    for i = 1, #grades do\n        if grades[i] > 4.0 then\n\
    \            table.insert(out, 'A+')\n        elseif grades[i] > 3.7 then\n  \
    \          table.insert(out, 'A')\n        elseif grades[i] > 3.3 then\n     \
    \       table.insert(out, 'A-')\n        elseif grades[i] > 3.0 then\n       \
    \     table.insert(out, 'B+')\n        elseif grades[i] > 2.7 then\n         \
    \   table.insert(out, 'B')\n        elseif grades[i] > 2.3 then\n            table.insert(out,\
    \ 'B-')\n        elseif grades[i] > 2.0 then\n            table.insert(out, 'C+')\n\
    \        elseif grades[i] > 1.7 then\n            table.insert(out, 'C')\n   \
    \     elseif grades[i] > 1.3 then\n            table.insert(out, 'C-')\n     \
    \   elseif grades[i] > 1.0 then\n            table.insert(out, 'D+')\n       \
    \ elseif grades[i] > 0.7 then\n            table.insert(out, 'D')\n        elseif\
    \ grades[i] > 0.0 then\n            table.insert(out, 'D-')\n        else\n  \
    \          table.insert(out, 'E')\n        end\n    end\n    return out\nend",
  "    return {}\nend", "    -- ...\nend", "    local new_grades = {}\n    for index,\
    \ grade in ipairs(grades) do\n        if grade >= 4.0 then\n            new_grades[index]\
    \ = \"A+\"\n        elseif grade >= 3.7 then\n            new_grades[index] =\
    \ \"A\"\n        elseif grade >= 3.3 then\n            new_grades[index] = \"\
    A-\"\n        elseif grade >= 3.0 then\n            new_grades[index] = \"B+\"\
    \n        elseif grade >= 2.7 then\n            new_grades[index] = \"B\"\n  \
    \      elseif grade >= 2.3 then\n            new_grades[index] = \"B-\"\n    \
    \    elseif grade >= 2.0 then\n            new_grades[index] = \"C+\"\n      \
    \  elseif grade >= 1.7 then\n            new_grades[index] = \"C\"\n        elseif\
    \ grade >= 1.3 then\n            new_grades[index] = \"C-\"\n        elseif grade\
    \ >= 1.0 then\n            new_grades[index] = \"D+\"\n        elseif grade >=\
    \ 0.7 then\n            new_grades[index] = \"D\"\n        elseif grade >= 0.0\
    \ then\n            new_grades[index] = \"D-\"\n        else\n            new_grades[index]\
    \ = \"E\"\n        end\n    end\n    return new_grades\nend\nprint(table.concat(numerical_letter_grade({3.9,\
    \ 3.0, 2.1, 2.8, 1.9, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.1}),\
    \ \" \"))", "    -- your code here\nend", "    local grade_letters = {\n     \
    \   [0] = \"E\",\n        [1] = \"D-\",\n        [2] = \"D\",\n        [3] = \"\
    D+\",\n        [4] = \"C-\",\n        [5] = \"C\",\n        [6] = \"C+\",\n  \
    \      [7] = \"B-\",\n        [8] = \"B\",\n        [9] = \"B+\",\n        [10]\
    \ = \"A-\",\n        [11] = \"A\",\n        [12] = \"A+\"\n    }\n    local letter_grades\
    \ = {}\n    for i, grade in ipairs(grades) do\n        -- round grade to a number\
    \ between 0 and 12\n        letter_grades[i] = grade_letters[math.floor(grade\
    \ * 4 + 0.5)]\n    end\n    return letter_grades\nend\nprint(unpack(numerical_letter_grade({2.5,\
    \ 3.8, 3.2, 3.5, 3.0, 3.9, 2.1, 1.9, 2.7, 3.1, 1.5, 3.6, 3.7, 3.0, 3.3, 3.4, 2.8,\
    \ 2.9, 1.0, 2.2, 1.7, 2.6, 2.0, 2.3, 3.8, 1.1, 1.3, 2.4, 2.1, 2.9, 1.9, 1.0, 2.7,\
    \ 1.8, 1.6, 1.5, 1.7, 2.0, 1.1, 1.2, 1.0, 2.8, 1.9, 2.6, 2.4, 1.5, 2.2, 2.3, 1.8,\
    \ 2.1, 1.7, 1.0, 1.9, 2.0, 2.1, 1.0, 2.2, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8,\
    \ 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2", "    local out = {}\n    for i,\
    \ grade in ipairs(grades) do\n        if grade >= 4.0 then\n            out[i]\
    \ = \"A+\"\n        elseif grade >= 3.7 then\n            out[i] = \"A\"\n   \
    \     elseif grade >= 3.3 then\n            out[i] = \"A-\"\n        elseif grade\
    \ >= 3.0 then\n            out[i] = \"B+\"\n        elseif grade >= 2.7 then\n\
    \            out[i] = \"B\"\n        elseif grade >= 2.3 then\n            out[i]\
    \ = \"B-\"\n        elseif grade >= 2.0 then\n            out[i] = \"C+\"\n  \
    \      elseif grade >= 1.7 then\n            out[i] = \"C\"\n        elseif grade\
    \ >= 1.3 then\n            out[i] = \"C-\"\n        elseif grade >= 1.0 then\n\
    \            out[i] = \"D+\"\n        elseif grade >= 0.7 then\n            out[i]\
    \ = \"D\"\n        elseif grade >= 0.0 then\n            out[i] = \"D-\"\n   \
    \     else\n            out[i] = \"E\"\n        end\n    end\n    return out\n\
    end", "    local letter_grades = {}\n    for i = 1, #grades do\n        local\
    \ grade = grades[i]\n        if grade >= 4.0 then\n            letter_grades[i]\
    \ = \"A+\"\n        elseif grade >= 3.7 then\n            letter_grades[i] = \"\
    A\"\n        elseif grade >= 3.3 then\n            letter_grades[i] = \"A-\"\n\
    \        elseif grade >= 3.0 then\n            letter_grades[i] = \"B+\"\n   \
    \     elseif grade >= 2.7 then\n            letter_grades[i] = \"B\"\n       \
    \ elseif grade >= 2.3 then\n            letter_grades[i] = \"B-\"\n        elseif\
    \ grade >= 2.0 then\n            letter_grades[i] = \"C+\"\n        elseif grade\
    \ >= 1.7 then\n            letter_grades[i] = \"C\"\n        elseif grade >= 1.3\
    \ then\n            letter_grades[i] = \"C-\"\n        elseif grade >= 1.0 then\n\
    \            letter_grades[i] = \"D+\"\n        elseif grade >= 0.7 then\n   \
    \         letter_grades[i] = \"D\"\n        elseif grade >= 0.0 then\n       \
    \     letter_grades[i] = \"D-\"\n        else\n            letter_grades[i] =\
    \ \"E\"\n        end\n    end\n    return letter_grades\nend", "  --...\nend",
  "  local letter_grades = {}\n  -- write your code here\n  for k,v in pairs(grades)\
    \ do\n    if v >= 4.0 then\n      letter_grades[k] = \"A+\"\n    elseif v >= 3.7\
    \ then\n      letter_grades[k] = \"A\"\n    elseif v >= 3.3 then\n      letter_grades[k]\
    \ = \"A-\"\n    elseif v >= 3.0 then\n      letter_grades[k] = \"B+\"\n    elseif\
    \ v >= 2.7 then\n      letter_grades[k] = \"B\"\n    elseif v >= 2.3 then\n  \
    \    letter_grades[k] = \"B-\"\n    elseif v >= 2.0 then\n      letter_grades[k]\
    \ = \"C+\"\n    elseif v >= 1.7 then\n      letter_grades[k] = \"C\"\n    elseif\
    \ v >= 1.3 then\n      letter_grades[k] = \"C-\"\n    elseif v >= 1.0 then\n \
    \     letter_grades[k] = \"D+\"\n    elseif v >= 0.7 then\n      letter_grades[k]\
    \ = \"D\"\n    elseif v >= 0.0 then\n      letter_grades[k] = \"D-\"\n    elseif\
    \ v == 0.0 then\n      letter_grades[k] = \"E\"\n    end\n  end\n  return letter_grades\n\
    end", "    local grades = {0.5, 0.7, 1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6,\
    \ 4.0}\n    local output = {}\n    for i = 1, #grades do\n        local grade\
    \ = grades[i]\n        if grade == 4.0 then\n            output[i] = \"A+\"\n\
    \        elseif grade >= 3.7 then\n            output[i] = \"A\"\n        elseif\
    \ grade >= 3.3 then\n            output[i] = \"A-\"\n        elseif grade >= 3.0\
    \ then\n            output[i] = \"B+\"\n        elseif grade >= 2.7 then\n   \
    \         output[i] = \"B\"\n        elseif grade >= 2.3 then\n            output[i]\
    \ = \"B-\"\n        elseif grade >= 2.0 then\n            output[i] = \"C+\"\n\
    \        elseif grade >= 1.7 then\n            output[i] = \"C\"\n        elseif\
    \ grade >= 1.3 then\n            output[i] = \"C-\"\n        elseif grade >= 1.0\
    \ then\n            output[i] = \"D+\"\n        elseif grade >= 0.7 then\n   \
    \         output[i] = \"D\"\n        elseif grade >= 0.0 then\n            output[i]\
    \ = \"D-\"\n        elseif grade == 0.0 then\n            output[i] = \"E\"\n\
    \        end\n    end\n    return output\nend\nprint(unpack(numerical_letter_grade({4.0,\
    \ 3.8, 3.4, 3.0, 2.8, 2.4, 2.0, 1.8, 1.4, 1.0, 0.8, 0.0})))", "    return {}\n\
    end", "    local function to_letter_grade(gpas)\n        if gpas == 4.0 then\n\
    \            return \"A+\"\n        elseif gpas > 3.7 then\n            return\
    \ \"A\"\n        elseif gpas > 3.3 then\n            return \"A-\"\n        elseif\
    \ gpas > 3.0 then\n            return \"B+\"\n        elseif gpas > 2.7 then\n\
    \            return \"B\"\n        elseif gpas > 2.3 then\n            return\
    \ \"B-\"\n        elseif gpas > 2.0 then\n            return \"C+\"\n        elseif\
    \ gpas > 1.7 then\n            return \"C\"\n        elseif gpas > 1.3 then\n\
    \            return \"C-\"\n        elseif gpas > 1.0 then\n            return\
    \ \"D+\"\n        elseif gpas > 0.7 then\n            return \"D\"\n        elseif\
    \ gpas > 0.0 then\n            return \"D-\"\n        else\n            return\
    \ \"E\"\n        end\n    end\n    local letter_grades = {}\n    for i = 1, #grades\
    \ do\n        table.insert(letter_grades, to_letter_grade(grades[i]))\n    end\n\
    \    return letter_grades\nend", "    -- Write your code here\n    local result\
    \ = {}\n    for i, v in ipairs(grades) do\n        --\n        if v == 4.0 then\n\
    \            result[i] = \"A+\"\n        elseif v > 3.7 then\n            result[i]\
    \ = \"A\"\n        elseif v > 3.3 then\n            result[i] = \"A-\"\n     \
    \   elseif v > 3.0 then\n            result[i] = \"B+\"\n        elseif v > 2.7\
    \ then\n            result[i] = \"B\"\n        elseif v > 2.3 then\n         \
    \   result[i] = \"B-\"\n        elseif v > 2.0 then\n            result[i] = \"\
    C+\"\n        elseif v > 1.7 then\n            result[i] = \"C\"\n        elseif\
    \ v > 1.3 then\n            result[i] = \"C-\"\n        elseif v > 1.0 then\n\
    \            result[i] = \"D+\"\n        elseif v > 0.7 then\n            result[i]\
    \ = \"D\"\n        elseif v > 0.0 then\n            result[i] = \"D-\"\n     \
    \   else\n            result[i] = \"E\"\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, grade in ipairs(grades) do\n        if\
    \ grade >= 4.0 then\n            table.insert(result, \"A+\")\n        elseif\
    \ grade >= 3.7 then\n            table.insert(result, \"A\")\n        elseif grade\
    \ >= 3.3 then\n            table.insert(result, \"A-\")\n        elseif grade\
    \ >= 3.0 then\n            table.insert(result, \"B+\")\n        elseif grade\
    \ >= 2.7 then\n            table.insert(result, \"B\")\n        elseif grade >=\
    \ 2.3 then\n            table.insert(result, \"B-\")\n        elseif grade >=\
    \ 2.0 then\n            table.insert(result, \"C+\")\n        elseif grade >=\
    \ 1.7 then\n            table.insert(result, \"C\")\n        elseif grade >= 1.3\
    \ then\n            table.insert(result, \"C-\")\n        elseif grade >= 1.0\
    \ then\n            table.insert(result, \"D+\")\n        elseif grade >= 0.7\
    \ then\n            table.insert(result, \"D\")\n        elseif grade >= 0.0 then\n\
    \            table.insert(result, \"D-\")\n        else\n            table.insert(result,\
    \ \"E\")\n        end\n    end\n    return result\nend", "    -- TODO\nend\nassert(numerical_letter_grade({4.0,\
    \ 2.0, 2.4, 2.7, 2.1, 2.6, 2.9, 3.1, 2.8, 2.2}) == {\"A+\", \"C+\", \"B-\", \"\
    B\", \"B-\", \"B\", \"B+\", \"A-\", \"B\", \"B-\"})\nassert(numerical_letter_grade({1.7,\
    \ 1.3, 1.0, 0.7, 0.0}) == {\"C\", \"C-\", \"D+\", \"D\", \"E\"})", "\tlocal grade\
    \ = {}\n\tfor i = 1, #grades do\n\t\tif grades[i] == 4.0 then grade[i] = \"A+\"\
    \n\t\telseif grades[i] > 3.7 then grade[i] = \"A\"\n\t\telseif grades[i] > 3.3\
    \ then grade[i] = \"A-\"\n\t\telseif grades[i] > 3.0 then grade[i] = \"B+\"\n\t\
    \telseif grades[i] > 2.7 then grade[i] = \"B\"\n\t\telseif grades[i] > 2.3 then\
    \ grade[i] = \"B-\"\n\t\telseif grades[i] > 2.0 then grade[i] = \"C+\"\n\t\telseif\
    \ grades[i] > 1.7 then grade[i] = \"C\"\n\t\telseif grades[i] > 1.3 then grade[i]\
    \ = \"C-\"\n\t\telseif grades[i] > 1.0 then grade[i] = \"D+\"\n\t\telseif grades[i]\
    \ > 0.7 then grade[i] = \"D\"\n\t\telseif grades[i] > 0.0 then grade[i] = \"D-\"\
    \n\t\telse grade[i] = \"E\"\n\t\tend\n\tend\n\treturn grade\nend", "    local\
    \ letter_grades = {}\n    for _, v in ipairs(grades) do\n        local v = tonumber(v)\n\
    \        if v >= 4.0 then\n            table.insert(letter_grades, \"A+\")\n \
    \       elseif v >= 3.7 then\n            table.insert(letter_grades, \"A\")\n\
    \        elseif v >= 3.3 then\n            table.insert(letter_grades, \"A-\"\
    )\n        elseif v >= 3.0 then\n            table.insert(letter_grades, \"B+\"\
    )\n        elseif v >= 2.7 then\n            table.insert(letter_grades, \"B\"\
    )\n        elseif v >= 2.3 then\n            table.insert(letter_grades, \"B-\"\
    )\n        elseif v >= 2.0 then\n            table.insert(letter_grades, \"C+\"\
    )\n        elseif v >= 1.7 then\n            table.insert(letter_grades, \"C\"\
    )\n        elseif v >= 1.3 then\n            table.insert(letter_grades, \"C-\"\
    )\n        elseif v >= 1.0 then\n            table.insert(letter_grades, \"D+\"\
    )\n        elseif v >= 0.7 then\n            table.insert(letter_grades, \"D\"\
    )\n        elseif v > 0.0 then\n            table.insert(letter_grades, \"D-\"\
    )\n        else\n            table.insert(letter_grades, \"E\")\n        end\n\
    \    end\n    return letter_grades\nend", "    local alpha_grades = {}\n    for\
    \ _, grade in ipairs(grades) do\n        if grade == 4.0 then\n            table.insert(alpha_grades,\
    \ \"A+\")\n        elseif grade > 3.7 then\n            table.insert(alpha_grades,\
    \ \"A\")\n        elseif grade > 3.3 then\n            table.insert(alpha_grades,\
    \ \"A-\")\n        elseif grade > 3.0 then\n            table.insert(alpha_grades,\
    \ \"B+\")\n        elseif grade > 2.7 then\n            table.insert(alpha_grades,\
    \ \"B\")\n        elseif grade > 2.3 then\n            table.insert(alpha_grades,\
    \ \"B-\")\n        elseif grade > 2.0 then\n            table.insert(alpha_grades,\
    \ \"C+\")\n        elseif grade > 1.7 then\n            table.insert(alpha_grades,\
    \ \"C\")\n        elseif grade > 1.3 then\n            table.insert(alpha_grades,\
    \ \"C-\")\n        elseif grade > 1.0 then\n            table.insert(alpha_grades,\
    \ \"D+\")\n        elseif grade > 0.7 then\n            table.insert(alpha_grades,\
    \ \"D\")\n        elseif grade > 0.0 then\n            table.insert(alpha_grades,\
    \ \"D-\")\n        else\n            table.insert(alpha_grades, \"E\")\n     \
    \   end\n    end\n    return alpha_grades\nend", "    -- fill your code\nend",
  "    -- student_letter_grades will be an array of length grades:size()\n    local\
    \ student_letter_grades = {}\n    for i=1,grades:size() do\n        if grades[i]\
    \ >= 4.0 then\n            student_letter_grades[i] = \"A+\"\n        elseif grades[i]\
    \ >= 3.7 then\n            student_letter_grades[i] = \"A\"\n        elseif grades[i]\
    \ >= 3.3 then\n            student_letter_grades[i] = \"A-\"\n        elseif grades[i]\
    \ >= 3.0 then\n            student_letter_grades[i] = \"B+\"\n        elseif grades[i]\
    \ >= 2.7 then\n            student_letter_grades[i] = \"B\"\n        elseif grades[i]\
    \ >= 2.3 then\n            student_letter_grades[i] = \"B-\"\n        elseif grades[i]\
    \ >= 2.0 then\n            student_letter_grades[i] = \"C+\"\n        elseif grades[i]\
    \ >= 1.7 then\n            student_letter_grades[i] = \"C\"\n        elseif grades[i]\
    \ >= 1.3 then\n            student_letter_grades[i] = \"C-\"\n        elseif grades[i]\
    \ >= 1.0 then\n            student_letter_grades[i] = \"D+\"\n        elseif grades[i]\
    \ >= 0.7 then\n            student_letter_grades[i] = \"D\"\n        elseif grades[i]\
    \ >= 0.0 then\n            student_letter_grades[i] = \"D-\"\n        else\n \
    \           student_letter_grades[i] = \"E\"\n        end\n    end\n    return\
    \ student_letter_grades\nend", "\tlocal grades = {}\n\tfor _, grade in ipairs(grades)\
    \ do\n\t\tif     grade >= 4.0 then table.insert(grades, \"A+\")\n\t\telseif grade\
    \ >= 3.7 then table.insert(grades, \"A\")\n\t\telseif grade >= 3.3 then table.insert(grades,\
    \ \"A-\")\n\t\telseif grade >= 3.0 then table.insert(grades, \"B+\")\n\t\telseif\
    \ grade >= 2.7 then table.insert(grades, \"B\")\n\t\telseif grade >= 2.3 then\
    \ table.insert(grades, \"B-\")\n\t\telseif grade >= 2.0 then table.insert(grades,\
    \ \"C+\")\n\t\telseif grade >= 1.7 then table.insert(grades, \"C\")\n\t\telseif\
    \ grade >= 1.3 then table.insert(grades, \"C-\")\n\t\telseif grade >= 1.0 then\
    \ table.insert(grades, \"D+\")\n\t\telseif grade >= 0.7 then table.insert(grades,\
    \ \"D\")\n\t\telseif grade >= 0.0 then table.insert(grades, \"D-\")\n\t\telse\
    \                     table.insert(grades, \"E\")\n\t\tend\n\tend\n\treturn grades\n\
    end", "    local grades_letters = {}\n    for k, v in pairs(grades) do\n     \
    \   if v == 4.0 then\n            grades_letters[k] = \"A+\"\n        elseif v\
    \ > 3.7 then\n            grades_letters[k] = \"A\"\n        elseif v > 3.3 then\n\
    \            grades_letters[k] = \"A-\"\n        elseif v > 3.0 then\n       \
    \     grades_letters[k] = \"B+\"\n        elseif v > 2.7 then\n            grades_letters[k]\
    \ = \"B\"\n        elseif v > 2.3 then\n            grades_letters[k] = \"B-\"\
    \n        elseif v > 2.0 then\n            grades_letters[k] = \"C+\"\n      \
    \  elseif v > 1.7 then\n            grades_letters[k] = \"C\"\n        elseif\
    \ v > 1.3 then\n            grades_letters[k] = \"C-\"\n        elseif v > 1.0\
    \ then\n            grades_letters[k] = \"D+\"\n        elseif v > 0.7 then\n\
    \            grades_letters[k] = \"D\"\n        elseif v > 0.0 then\n        \
    \    grades_letters[k] = \"D-\"\n        else\n            grades_letters[k] =\
    \ \"E\"\n        end\n    end\n    return grades_letters\nend", "\t-- ...\nend",
  "  local letter_grades = {}\n  for _, grade in ipairs(grades) do\n    if grade ==\
    \ 4.0 then\n      table.insert(letter_grades, \"A+\")\n    elseif grade > 3.7\
    \ then\n      table.insert(letter_grades, \"A\")\n    elseif grade > 3.3 then\n\
    \      table.insert(letter_grades, \"A-\")\n    elseif grade > 3.0 then\n    \
    \  table.insert(letter_grades, \"B+\")\n    elseif grade > 2.7 then\n      table.insert(letter_grades,\
    \ \"B\")\n    elseif grade > 2.3 then\n      table.insert(letter_grades, \"B-\"\
    )\n    elseif grade > 2.0 then\n      table.insert(letter_grades, \"C+\")\n  \
    \  elseif grade > 1.7 then\n      table.insert(letter_grades, \"C\")\n    elseif\
    \ grade > 1.3 then\n      table.insert(letter_grades, \"C-\")\n    elseif grade\
    \ > 1.0 then\n      table.insert(letter_grades, \"D+\")\n    elseif grade > 0.7\
    \ then\n      table.insert(letter_grades, \"D\")\n    elseif grade > 0.0 then\n\
    \      table.insert(letter_grades, \"D-\")\n    else\n      table.insert(letter_grades,\
    \ \"E\")\n    end\n  end\n  return letter_grades\nend", "  -- Your code goes here!\n\
    end\nassert(numerical_letter_grade({4.0, 3.2, 3.7, 3.9, 3.1, 3.3, 3.0, 3.3, 3.3,\
    \ 2.1, 2.3, 1.3, 0.9, 1.1, 1.3, 1.3, 0.7, 0.3, 0.0})\n == {\"A+\", \"A-\", \"\
    A\", \"A\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"B-\", \"B-\", \"C-\", \"\
    D+\", \"D+\", \"C-\", \"C-\", \"D\", \"D-\", \"E\"})", "  local function grade_letter(num)\n\
    \    if num >= 4.0 then\n      return \"A+\"\n    elseif num >= 3.7 then\n   \
    \   return \"A\"\n    elseif num >= 3.3 then\n      return \"A-\"\n    elseif\
    \ num >= 3.0 then\n      return \"B+\"\n    elseif num >= 2.7 then\n      return\
    \ \"B\"\n    elseif num >= 2.3 then\n      return \"B-\"\n    elseif num >= 2.0\
    \ then\n      return \"C+\"\n    elseif num >= 1.7 then\n      return \"C\"\n\
    \    elseif num >= 1.3 then\n      return \"C-\"\n    elseif num >= 1.0 then\n\
    \      return \"D+\"\n    elseif num >= 0.7 then\n      return \"D\"\n    elseif\
    \ num >= 0.0 then\n      return \"D-\"\n    else\n      return \"E\"\n    end\n\
    \  end\n  local final = {}\n  for num, grade in pairs(grades) do\n    final[num]\
    \ = grade_letter(grade)\n  end\n  return final\nend", "    -- TODO: write code\
    \ here\n    -- end\nend", "    -- Write your code here\nend\nassert(numerical_letter_grade({\
    \ 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0 }) == { 'A+', 'A',\
    \ 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E' })\nassert(numerical_letter_grade({\
    \ 3.8, 3.6, 3.4, 3.2, 3.0, 2.8, 2.6, 2.4, 2.2, 2.0, 1.8, 1.6, 1.4, 1.2, 1.0, 0.8,\
    \ 0.6, 0.4, 0.2, 0.0 }) == { 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E' })", "    return {}\n\
    end", "    -- fill this\nend", "    local letter_grades = {}\n    for i = 1, #grades\
    \ do\n        local grade = grades[i]\n        if grade >= 4.0 then\n        \
    \    letter_grades[i] = \"A+\"\n        elseif grade >= 3.7 then\n           \
    \ letter_grades[i] = \"A\"\n        elseif grade >= 3.3 then\n            letter_grades[i]\
    \ = \"A-\"\n        elseif grade >= 3.0 then\n            letter_grades[i] = \"\
    B+\"\n        elseif grade >= 2.7 then\n            letter_grades[i] = \"B\"\n\
    \        elseif grade >= 2.3 then\n            letter_grades[i] = \"B-\"\n   \
    \     elseif grade >= 2.0 then\n            letter_grades[i] = \"C+\"\n      \
    \  elseif grade >= 1.7 then\n            letter_grades[i] = \"C\"\n        elseif\
    \ grade >= 1.3 then\n            letter_grades[i] = \"C-\"\n        elseif grade\
    \ >= 1.0 then\n            letter_grades[i] = \"D+\"\n        elseif grade >=\
    \ 0.7 then\n            letter_grades[i] = \"D\"\n        elseif grade >= 0.0\
    \ then\n            letter_grades[i] = \"D-\"\n        else\n            letter_grades[i]\
    \ = \"E\"\n        end\n    end\n    return letter_grades\nend", "    -- ...\n\
    end\nprint(table.concat(numerical_letter_grade({4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}), \", \"))", "    local letter_grades = {}\n\
    \    for i = 1, #grades do\n        if grades[i] == 4.0 then\n            letter_grades[i]\
    \ = \"A+\"\n        elseif grades[i] > 3.7 then\n            letter_grades[i]\
    \ = \"A\"\n        elseif grades[i] > 3.3 then\n            letter_grades[i] =\
    \ \"A-\"\n        elseif grades[i] > 3.0 then\n            letter_grades[i] =\
    \ \"B+\"\n        elseif grades[i] > 2.7 then\n            letter_grades[i] =\
    \ \"B\"\n        elseif grades[i] > 2.3 then\n            letter_grades[i] = \"\
    B-\"\n        elseif grades[i] > 2.0 then\n            letter_grades[i] = \"C+\"\
    \n        elseif grades[i] > 1.7 then\n            letter_grades[i] = \"C\"\n\
    \        elseif grades[i] > 1.3 then\n            letter_grades[i] = \"C-\"\n\
    \        elseif grades[i] > 1.0 then\n            letter_grades[i] = \"D+\"\n\
    \        elseif grades[i] > 0.7 then\n            letter_grades[i] = \"D\"\n \
    \       elseif grades[i] > 0.0 then\n            letter_grades[i] = \"D-\"\n \
    \       else\n            letter_grades[i] = \"E\"\n        end\n    end\n   \
    \ return letter_grades\nend", "  local grades_to_letter = {\n    [4.0] = \"A+\"\
    ,\n    [3.7] = \"A\",\n    [3.3] = \"A-\",\n    [3.0] = \"B+\",\n    [2.7] = \"\
    B\",\n    [2.3] = \"B-\",\n    [2.0] = \"C+\",\n    [1.7] = \"C\",\n    [1.3]\
    \ = \"C-\",\n    [1.0] = \"D+\",\n    [0.7] = \"D\",\n    [0.0] = \"D-\",\n  \
    \  [0.0] = \"E\"\n  }\n  local new_grades = {}\n  for i,v in ipairs(grades) do\n\
    \    if grades_to_letter[v] then\n      new_grades[i] = grades_to_letter[v]\n\
    \    end\n  end\n  return new_grades\nend", "    -- Write your code here\n   \
    \ local function grade(val)\n        local grade = {'E', 'D-', 'D', 'D+', 'C-',\
    \ 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'}\n        local point = (val - 0.01)\
    \ * 10 % 10\n        local score = (val - 0.01) - point\n        local index =\
    \ score * 2\n        if point >= 7 then\n            index = index + 1\n     \
    \   elseif point >= 3 then\n            index = index + 0.5\n        end\n   \
    \     return grade[index]\n    end\n    local grades_l = {}\n    for i = 1, #grades\
    \ do\n        table.insert(grades_l, grade(grades[i]))\n    end\n    return grades_l\n\
    end", "\nend", "  -- your code here\nend", "  -- Your code here\nend\nprint(numerical_letter_grade({3.0,\
    \ 2.1, 1.8, 4.0})) --> {'B+', 'B-', 'C-', 'A+'}\nprint(numerical_letter_grade({0.7,\
    \ 1.0, 2.7, 3.7})) --> {'D', 'D+', 'B', 'A'}\n```", "    -- do something\nend",
  "\t-- Write your code here\n\treturn {}\nend", "    local letter_grades = {}\n \
    \   for i,v in ipairs(grades) do\n        if v == 4.0 then \n            letter_grades[i]\
    \ = \"A+\"\n        elseif v > 3.7 then\n            letter_grades[i] = \"A\"\n\
    \        elseif v > 3.3 then\n            letter_grades[i] = \"A-\"\n        elseif\
    \ v > 3.0 then\n            letter_grades[i] = \"B+\"\n        elseif v > 2.7\
    \ then\n            letter_grades[i] = \"B\"\n        elseif v > 2.3 then\n  \
    \          letter_grades[i] = \"B-\"\n        elseif v > 2.0 then\n          \
    \  letter_grades[i] = \"C+\"\n        elseif v > 1.7 then\n            letter_grades[i]\
    \ = \"C\"\n        elseif v > 1.3 then\n            letter_grades[i] = \"C-\"\n\
    \        elseif v > 1.0 then\n            letter_grades[i] = \"D+\"\n        elseif\
    \ v > 0.7 then\n            letter_grades[i] = \"D\"\n        elseif v > 0.0 then\n\
    \            letter_grades[i] = \"D-\"\n        elseif v == 0.0 then\n       \
    \     letter_grades[i] = \"E\"\n        end\n    end\n    return letter_grades\n\
    end", "  for x = 1, #grades do\n    if grades[x] >= 4.0 then\n      grades[x]\
    \ = \"A+\"\n    elseif grades[x] >= 3.7 then\n      grades[x] = \"A\"\n    elseif\
    \ grades[x] >= 3.3 then\n      grades[x] = \"A-\"\n    elseif grades[x] >= 3.0\
    \ then\n      grades[x] = \"B+\"\n    elseif grades[x] >= 2.7 then\n      grades[x]\
    \ = \"B\"\n    elseif grades[x] >= 2.3 then\n      grades[x] = \"B-\"\n    elseif\
    \ grades[x] >= 2.0 then\n      grades[x] = \"C+\"\n    elseif grades[x] >= 1.7\
    \ then\n      grades[x] = \"C\"\n    elseif grades[x] >= 1.3 then\n      grades[x]\
    \ = \"C-\"\n    elseif grades[x] >= 1.0 then\n      grades[x] = \"D+\"\n    elseif\
    \ grades[x] >= 0.7 then\n      grades[x] = \"D\"\n    elseif grades[x] >= 0.0\
    \ then\n      grades[x] = \"D-\"\n    else\n      grades[x] = \"E\"\n    end\n\
    \  end\n  return grades\nend\nnumerical_letter_grade({4.0, 3.9, 3.8, 3.7, 3.6,\
    \ 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0,\
    \ 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4,\
    \ 0.3, 0.2, 0.1, 0.0})\nnumerical_letter_grade({4.0, 2.5, 2.0, 1.5,", "    --\
    \ Write your code here\nend", "    --[[\n        grades is a table that looks\
    \ like {3.7, 2.3, 1.7, 4.0}", end, "  \n  local letters = {}\n  for i,grade in\
    \ ipairs(grades) do\n    if grade > 3.7 then\n      letters[i] = \"A+\"\n    elseif\
    \ grade > 3.3 then\n      letters[i] = \"A\"\n    elseif grade > 3.0 then\n  \
    \    letters[i] = \"A-\"\n    elseif grade > 2.7 then\n      letters[i] = \"B+\"\
    \n    elseif grade > 2.3 then\n      letters[i] = \"B\"\n    elseif grade > 2.0\
    \ then\n      letters[i] = \"B-\"\n    elseif grade > 1.7 then\n      letters[i]\
    \ = \"C+\"\n    elseif grade > 1.3 then\n      letters[i] = \"C\"\n    elseif\
    \ grade > 1.0 then\n      letters[i] = \"C-\"\n    elseif grade > 0.7 then\n \
    \     letters[i] = \"D+\"\n    elseif grade > 0.0 then\n      letters[i] = \"\
    D\"\n    elseif grade == 0.0 then\n      letters[i] = \"D-\"\n    else\n     \
    \ letters[i] = \"E\"\n    end\n  end\n  return letters\nend", "  -- Your code\
    \ here\nend", "    -- TODO: Implement\nend", '-- >> print(numerical_letter_grade({4.0,
    3.8, 3.4, 3.0, 2.8, 2.4, 2.0, 1.8, 1.4, 1.0, 0.8, 0.4, 0.0}))', "    -- Your code\
    \ here\nend", "    local grades_out = {}\n    for i = 1, #grades do\n        local\
    \ gpa = grades[i]\n        local grade\n        if gpa >= 4.0 then\n         \
    \   grade = \"A+\"\n        elseif gpa >= 3.7 then\n            grade = \"A\"\n\
    \        elseif gpa >= 3.3 then\n            grade = \"A-\"\n        elseif gpa\
    \ >= 3.0 then\n            grade = \"B+\"\n        elseif gpa >= 2.7 then\n  \
    \          grade = \"B\"\n        elseif gpa >= 2.3 then\n            grade =\
    \ \"B-\"\n        elseif gpa >= 2.0 then\n            grade = \"C+\"\n       \
    \ elseif gpa >= 1.7 then\n            grade = \"C\"\n        elseif gpa >= 1.3\
    \ then\n            grade = \"C-\"\n        elseif gpa >= 1.0 then\n         \
    \   grade = \"D+\"\n        elseif gpa >= 0.7 then\n            grade = \"D\"\n\
    \        elseif gpa >= 0.0 then\n            grade = \"D-\"\n        else\n  \
    \          grade = \"E\"\n        end\n        grades_out[i] = grade\n    end\n\
    \    return grades_out\nend\nprint(numerical_letter_grade({4.0, 4.0, 3.5, 3.5,\
    \ 3.5, 3.0, 3.0, 3.0, 2.5, 2.5, 2.5, 2.0, 2.0, 2.0, 1.5, 1.5, 1.5, 1.0, 1.0, 1.0,\
    \ 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, -0.5, -0.5, -0.5, -1.0, -1.0, -1.0, -1.5, -1.5,\
    \ -1.5, -2.0, -2.0, -2.0, -2.5, -2.5, -2.5, -3.0, -3.0, -3.0, -3.5, -3.5, -3.5,\
    \ -4.0, -4", "   -- Function code goes here\nend", "\t--[[\n\t\tAssume that grades\
    \ is a list of GPAs. The function should output a list of\n\t\tletter grades corresponding\
    \ to the GPA's.\n\t]]\n\t-- YOUR CODE HERE\n\tlocal letter_grades = {}\n\tfor\
    \ index, value in ipairs(grades) do\n\t\tif value >= 4.0 then\n\t\t\tletter_grades[index]\
    \ = \"A+\"\n\t\telseif value >= 3.7 then\n\t\t\tletter_grades[index] = \"A\"\n\
    \t\telseif value >= 3.3 then\n\t\t\tletter_grades[index] = \"A-\"\n\t\telseif\
    \ value >= 3.0 then\n\t\t\tletter_grades[index] = \"B+\"\n\t\telseif value >=\
    \ 2.7 then\n\t\t\tletter_grades[index] = \"B\"\n\t\telseif value >= 2.3 then\n\
    \t\t\tletter_grades[index] = \"B-\"\n\t\telseif value >= 2.0 then\n\t\t\tletter_grades[index]\
    \ = \"C+\"\n\t\telseif value >= 1.7 then\n\t\t\tletter_grades[index] = \"C\"\n\
    \t\telseif value >= 1.3 then\n\t\t\tletter_grades[index] = \"C-\"\n\t\telseif\
    \ value >= 1.0 then\n\t\t\tletter_grades[index] = \"D+\"\n\t\telseif value >=\
    \ 0.7 then\n\t\t\tletter_grades[index] = \"D\"\n\t\telseif value >= 0.0 then\n\
    \t\t\tletter_grades[index] = \"D-\"\n\t\telse\n\t\t\tletter_grades[index] = \"\
    E\"\n\t\tend\n\tend\n\treturn letter_grades\nend", "  -- Write your code here\
    \ ...\nend", "  local letter_grades = {}\n  for i,v in ipairs(grades) do\n   \
    \ if v >= 4.0 then letter_grades[i] = \"A+\"\n    elseif v >= 3.7 then letter_grades[i]\
    \ = \"A\"\n    elseif v >= 3.3 then letter_grades[i] = \"A-\"\n    elseif v >=\
    \ 3.0 then letter_grades[i] = \"B+\"\n    elseif v >= 2.7 then letter_grades[i]\
    \ = \"B\"\n    elseif v >= 2.3 then letter_grades[i] = \"B-\"\n    elseif v >=\
    \ 2.0 then letter_grades[i] = \"C+\"\n    elseif v >= 1.7 then letter_grades[i]\
    \ = \"C\"\n    elseif v >= 1.3 then letter_grades[i] = \"C-\"\n    elseif v >=\
    \ 1.0 then letter_grades[i] = \"D+\"\n    elseif v >= 0.7 then letter_grades[i]\
    \ = \"D\"\n    elseif v >= 0.0 then letter_grades[i] = \"D-\"\n    else letter_grades[i]\
    \ = \"E\"\n    end\n  end\n  return letter_grades\nend\nassert(type(numerical_letter_grade)\
    \ == \"function\")", "    -- Code here\n    return grades\nend", "\treturn {}\n\
    end", "    local lut = {[4.0] = \"A+\",\n        [3.7] = \"A\",\n        [3.3]\
    \ = \"A-\",\n        [3.0] = \"B+\",\n        [2.7] = \"B\",\n        [2.3] =\
    \ \"B-\",\n        [2.0] = \"C+\",\n        [1.7] = \"C\",\n        [1.3] = \"\
    C-\",\n        [1.0] = \"D+\",\n        [0.7] = \"D\",\n        [0.0] = \"D-\"\
    ,\n        [-1.0] = \"E\"\n    }\n    local letter_grades = {}\n    for i, grade\
    \ in ipairs(grades) do\n        for k, v in pairs(lut) do\n            if grade\
    \ >= k then\n                letter_grades[i] = v\n                break\n   \
    \         end\n        end\n    end\n    return letter_grades\nend", "    local\
    \ grade_table = {}\n    for i, v in ipairs(grades) do\n        if v >= 4.0 then\n\
    \            grade_table[i] = \"A+\"\n        elseif v > 3.7 then\n          \
    \  grade_table[i] = \"A\"\n        elseif v > 3.3 then\n            grade_table[i]\
    \ = \"A-\"\n        elseif v > 3.0 then\n            grade_table[i] = \"B+\"\n\
    \        elseif v > 2.7 then\n            grade_table[i] = \"B\"\n        elseif\
    \ v > 2.3 then\n            grade_table[i] = \"B-\"\n        elseif v > 2.0 then\n\
    \            grade_table[i] = \"C+\"\n        elseif v > 1.7 then\n          \
    \  grade_table[i] = \"C\"\n        elseif v > 1.3 then\n            grade_table[i]\
    \ = \"C-\"\n        elseif v > 1.0 then\n            grade_table[i] = \"D+\"\n\
    \        elseif v > 0.7 then\n            grade_table[i] = \"D\"\n        elseif\
    \ v > 0.0 then\n            grade_table[i] = \"D-\"\n        else\n          \
    \  grade_table[i] = \"E\"\n        end\n    end\n    return grade_table\nend",
  "    -- Your code here\nend", "\tlocal result = {}\n\t-- Your code goes here\n\t\
    \n\t-- 0 - use a table to represent the GPA to letter grade mapping\n\tlocal mapping\
    \ = { [4.0] = \"A+\", [3.7] = \"A\", [3.3] = \"A-\", [3.0] = \"B+\", [2.7] = \"\
    B\", [2.3] = \"B-\", [2.0] = \"C+\", [1.7] = \"C\", [1.3] = \"C-\", [1.0] = \"\
    D+\", [0.7] = \"D\", [0.0] = \"D-\", [-1.0] = \"E\" }\n\t\n\t-- 1 - loop over\
    \ the list of grades\n\tfor i = 1, #grades do\n\t\tlocal gpa = grades[i]\n\t\t\
    -- 2 - initialize letter grade to \"E\"\n\t\tlocal letter = \"E\"\n\t\t-- 3 -\
    \ find the letter grade corresponding to the gpa\n\t\t-- 3.1 - loop over the list\
    \ of mappings in the table and use the matching GPA\n\t\tfor gpas, letters in\
    \ pairs(mapping) do\n\t\t\tif gpa >= gpas then\n\t\t\t\tletter = letters\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\t\t-- 4 - push the letter grade to the list of\
    \ letter grades\n\t\tresult[#result + 1] = letter\n\tend\n\t\n\treturn result\n\
    end", "    -- Your code here. \nend", "\nend", "  -- Your code here\nend", "\t\
    return grades\nend", "-- Use the table at the top for letter grades (A+, A, ...)\n\
    \    -- your code goes here.\n    local result = {}\n    for i = 1, #grades do\n\
    \        if grades[i] >= 4.0 then\n            result[i] = \"A+\"\n        elseif\
    \ grades[i] >= 3.7 then\n            result[i] = \"A\"\n        elseif grades[i]\
    \ >= 3.3 then\n            result[i] = \"A-\"\n        elseif grades[i] >= 3.0\
    \ then\n            result[i] = \"B+\"\n        elseif grades[i] >= 2.7 then\n\
    \            result[i] = \"B\"\n        elseif grades[i] >= 2.3 then\n       \
    \     result[i] = \"B-\"\n        elseif grades[i] >= 2.0 then\n            result[i]\
    \ = \"C+\"\n        elseif grades[i] >= 1.7 then\n            result[i] = \"C\"\
    \n        elseif grades[i] >= 1.3 then\n            result[i] = \"C-\"\n     \
    \   elseif grades[i] >= 1.0 then\n            result[i] = \"D+\"\n        elseif\
    \ grades[i] >= 0.7 then\n            result[i] = \"D\"\n        elseif grades[i]\
    \ >= 0.0 then\n            result[i] = \"D-\"\n        elseif grades[i] == 0.0\
    \ then\n            result[i] = \"E\"\n        end\n    end\n    return result\n\
    end", "  local grades_map = {\n    [4.0] = \"A+\",\n    [3.7] = \"A\",\n    [3.3]\
    \ = \"A-\",\n    [3.0] = \"B+\",\n    [2.7] = \"B\",\n    [2.3] = \"B-\",\n  \
    \  [2.0] = \"C+\",\n    [1.7] = \"C\",\n    [1.3] = \"C-\",\n    [1.0] = \"D+\"\
    ,\n    [0.7] = \"D\",\n    [0.0] = \"D-\",\n    [-1.0] = \"E\"\n  }\n  local letter_grades\
    \ = {}\n  for i = 1, #grades do\n    local grade = grades[i]\n    for k, v in\
    \ pairs(grades_map) do\n      if grade >= k then\n        letter_grades[i] = v\n\
    \        break\n      end\n    end\n  end\n  return letter_grades\nend", "   \
    \ local grades_to_letter = {[4.0] = \"A+\", [3.7] = \"A\", [3.3] = \"A-\", [3.0]\
    \ = \"B+\", [2.7] = \"B\", [2.3] = \"B-\", [2.0] = \"C+\", [1.7] = \"C\", [1.3]\
    \ = \"C-\", [1.0] = \"D+\", [0.7] = \"D\", [0.0] = \"D-\", [-1.0] = \"E\"}\n \
    \   local results = {}\n    for _, grade in ipairs(grades) do\n        local letter\
    \ = grades_to_letter[grade]\n        if letter == nil then\n            local\
    \ d = 0.3\n            for n, l in pairs(grades_to_letter) do\n              \
    \  if n-d <= grade and grade < n then\n                    letter = l\n      \
    \              break\n                end\n            end\n        end\n    \
    \    results[#results+1] = letter\n    end\n    return results\nend", "\t-- TODO:\
    \ your code goes here\n\tlocal letter_grades = {}\n\tfor i = 1, #grades do\n\t\
    \tif grades[i] >= 4.0 then\n\t\t\tletter_grades[i] = \"A+\"\n\t\telseif grades[i]\
    \ > 3.7 then\n\t\t\tletter_grades[i] = \"A\"\n\t\telseif grades[i] > 3.3 then\n\
    \t\t\tletter_grades[i] = \"A-\"\n\t\telseif grades[i] > 3.0 then\n\t\t\tletter_grades[i]\
    \ = \"B+\"\n\t\telseif grades[i] > 2.7 then\n\t\t\tletter_grades[i] = \"B\"\n\t\
    \telseif grades[i] > 2.3 then\n\t\t\tletter_grades[i] = \"B-\"\n\t\telseif grades[i]\
    \ > 2.0 then\n\t\t\tletter_grades[i] = \"C+\"\n\t\telseif grades[i] > 1.7 then\n\
    \t\t\tletter_grades[i] = \"C\"\n\t\telseif grades[i] > 1.3 then\n\t\t\tletter_grades[i]\
    \ = \"C-\"\n\t\telseif grades[i] > 1.0 then\n\t\t\tletter_grades[i] = \"D+\"\n\
    \t\telseif grades[i] > 0.7 then\n\t\t\tletter_grades[i] = \"D\"\n\t\telseif grades[i]\
    \ > 0.0 then\n\t\t\tletter_grades[i] = \"D-\"\n\t\telse\n\t\t\tletter_grades[i]\
    \ = \"E\"\n\t\tend\n\tend\n\treturn letter_grades\nend", "\t-- YOUR CODE HERE\n\
    end", "    return {}\nend", "    -- Your code here\nend\nprint(table.concat(numerical_letter_grade({3.7,\
    \ 2.3, 1.7, 4.0, 2.7, 1.3, 2.0, 2.3, 2.7, 1.7, 1.0, 4.0, 0.7, 3.7, 3.3, 3.0, 1.3,\
    \ 0.0, 2.0, 1.0, 0.7, 0.0, 1.7, 1.3, 1.0, 0.7, 0.0}), \" \"))", "   local letter_grades\
    \ = {}\n   -- Write your code here.\n   for grade in grades do\n      -- Use the\
    \ following code to insert the grade into letter_grades\n      table.insert(letter_grades,\
    \ \"A+\")\n   end\n   return letter_grades\nend", "\tlocal map = {\n\t\t[4.0]\
    \ = \"A+\",\n\t\t[3.7] = \"A\",\n\t\t[3.3] = \"A-\",\n\t\t[3.0] = \"B+\",\n\t\t\
    [2.7] = \"B\",\n\t\t[2.3] = \"B-\",\n\t\t[2.0] = \"C+\",\n\t\t[1.7] = \"C\",\n\
    \t\t[1.3] = \"C-\",\n\t\t[1.0] = \"D+\",\n\t\t[0.7] = \"D\",\n\t\t[0.0] = \"D-\"\
    ,\n\t\t[-1.0] = \"E\"\n\t}\n\treturn function(gpa)\n\t\tfor k, v in pairs(map)\
    \ do\n\t\t\tif gpa >= k then\n\t\t\t\treturn v\n\t\t\tend\n\t\tend\n\tend\nend",
  "  if (grades == nil) then\n    return nil\n  end\n  \n  local sum = 0\n  local\
    \ count = 0\n  for i = 1, #grades do\n    if (grades[i] == nil) then\n      return\
    \ nil\n    end\n    sum = sum + grades[i]\n    count = count + 1\n  end\n  --\
    \ Calculate Average\n  local average = sum / count\n  local letterGrade = \"\"\
    \n  if (average >= 4.0) then\n    letterGrade = \"A+\"\n  elseif (average >= 3.7)\
    \ then\n    letterGrade = \"A\"\n  elseif (average >= 3.3) then\n    letterGrade\
    \ = \"A-\"\n  elseif (average >= 3.0) then\n    letterGrade = \"B+\"\n  elseif\
    \ (average >= 2.7) then\n    letterGrade = \"B\"\n  elseif (average >= 2.3) then\n\
    \    letterGrade = \"B-\"\n  elseif (average >= 2.0) then\n    letterGrade = \"\
    C+\"\n  elseif (average >= 1.7) then\n    letterGrade = \"C\"\n  elseif (average\
    \ >= 1.3) then\n    letterGrade = \"C-\"\n  elseif (average >= 1.0) then\n   \
    \ letterGrade = \"D+\"\n  elseif (average >= 0.7) then\n    letterGrade = \"D\"\
    \n  elseif (average >= 0.0) then\n    letterGrade = \"D-\"\n  elseif (average\
    \ >= 0.0) then\n    letterGrade = \"E\"\n  end\n  return letterGrade\nend", " \
    \   -- write your code here\nend", "    -- TODO:\n    -- 1. Write a function that\
    \ takes a list of GPAs and outputs a list of\n    --    letter grades\n    --\
    \ 2. One way to do this is to start with an empty table and use\n    --    a for\
    \ loop to iterate over the given grades, then use an if-elseif\n    --    chain\
    \ to determine the letter grade\n    -- 3. Use table.insert() to add the result\
    \ letter grade to the empty table\n    -- 4. Return the result table", "    --grades\
    \ is a list of numerical grades\n    --returns a list of letter grades\n    local\
    \ grade_letters = {}\n    for i, g in ipairs(grades) do\n        if g > 3.7 then\n\
    \            grade_letters[i] = \"A+\"\n        elseif g > 3.3 then\n        \
    \    grade_letters[i] = \"A\"\n        elseif g > 3.0 then\n            grade_letters[i]\
    \ = \"A-\"\n        elseif g > 2.7 then\n            grade_letters[i] = \"B+\"\
    \n        elseif g > 2.3 then\n            grade_letters[i] = \"B\"\n        elseif\
    \ g > 2.0 then\n            grade_letters[i] = \"B-\"\n        elseif g > 1.7\
    \ then\n            grade_letters[i] = \"C+\"\n        elseif g > 1.3 then\n \
    \           grade_letters[i] = \"C\"\n        elseif g > 1.0 then\n          \
    \  grade_letters[i] = \"C-\"\n        elseif g > 0.7 then\n            grade_letters[i]\
    \ = \"D+\"\n        elseif g > 0.0 then\n            grade_letters[i] = \"D\"\n\
    \        elseif g == 0.0 then\n            grade_letters[i] = \"D-\"\n       \
    \ else\n            grade_letters[i] = \"E\"\n        end\n    end\n    return\
    \ grade_letters\nend", "    --TODO: Write your function here\n    for i, grade\
    \ in ipairs(grades) do\n        -- TODO: Write your if conditionals here\n   \
    \     if grade > 3.7 then\n            grades[i] = \"A+\"\n        elseif grade\
    \ > 3.3 then\n            grades[i] = \"A\"\n        elseif grade > 3.0 then\n\
    \            grades[i] = \"A-\"\n        elseif grade > 2.7 then\n           \
    \ grades[i] = \"B+\"\n        elseif grade > 2.3 then\n            grades[i] =\
    \ \"B\"\n        elseif grade > 2.0 then\n            grades[i] = \"B-\"\n   \
    \     elseif grade > 1.7 then\n            grades[i] = \"C+\"\n        elseif\
    \ grade > 1.3 then\n            grades[i] = \"C\"\n        elseif grade > 1.0\
    \ then\n            grades[i] = \"C-\"\n        elseif grade > 0.7 then\n    \
    \        grades[i] = \"D+\"\n        elseif grade > 0.0 then\n            grades[i]\
    \ = \"D\"\n        else\n            grades[i] = \"E\"\n        end\n    end\n\
    end", "    local letter_grades = {}\n    for _, gpa in ipairs(grades) do\n   \
    \     if gpa >= 4.0 then\n            table.insert(letter_grades, \"A+\")\n  \
    \      elseif gpa >= 3.7 then\n            table.insert(letter_grades, \"A\")\n\
    \        elseif gpa >= 3.3 then\n            table.insert(letter_grades, \"A-\"\
    )\n        elseif gpa >= 3.0 then\n            table.insert(letter_grades, \"\
    B+\")\n        elseif gpa >= 2.7 then\n            table.insert(letter_grades,\
    \ \"B\")\n        elseif gpa >= 2.3 then\n            table.insert(letter_grades,\
    \ \"B-\")\n        elseif gpa >= 2.0 then\n            table.insert(letter_grades,\
    \ \"C+\")\n        elseif gpa >= 1.7 then\n            table.insert(letter_grades,\
    \ \"C\")\n        elseif gpa >= 1.3 then\n            table.insert(letter_grades,\
    \ \"C-\")\n        elseif gpa >= 1.0 then\n            table.insert(letter_grades,\
    \ \"D+\")\n        elseif gpa >= 0.7 then\n            table.insert(letter_grades,\
    \ \"D\")\n        elseif gpa >= 0.0 then\n            table.insert(letter_grades,\
    \ \"D-\")\n        elseif gpa >= 0.0 then\n            table.insert(letter_grades,\
    \ \"E\")\n        end\n    end\n    return letter_grades\nend", "    local grade_map\
    \ = {\n        ['A+'] = 4.0,\n        ['A'] = 3.7,\n        ['A-'] = 3.3,\n  \
    \      ['B+'] = 3.0,\n        ['B'] = 2.7,\n        ['B-'] = 2.3,\n        ['C+']\
    \ = 2.0,\n        ['C'] = 1.7,\n        ['C-'] = 1.3,\n        ['D+'] = 1.0,\n\
    \        ['D'] = 0.7,\n        ['D-'] = 0.0,\n        ['E'] = 0.0\n    }\n   \
    \ local letters = {}\n    for _, gpa in ipairs(grades) do\n        for grade,\
    \ number in pairs(grade_map) do\n            if gpa >= number then\n         \
    \       table.insert(letters, grade)\n                break\n            end\n\
    \        end\n    end\n    return letters\nend", "    local dict = {\n       \
    \ [4.0] = \"A+\",\n        [3.7] = \"A\",\n        [3.3] = \"A-\",\n        [3.0]\
    \ = \"B+\",\n        [2.7] = \"B\",\n        [2.3] = \"B-\",\n        [2.0] =\
    \ \"C+\",\n        [1.7] = \"C\",\n        [1.3] = \"C-\",\n        [1.0] = \"\
    D+\",\n        [0.7] = \"D\",\n        [0.0] = \"D-\",\n        [-1.0] = \"E\"\
    \n    }\n    local answer = {}\n    for _,g in ipairs(grades) do\n        for\
    \ key,value in pairs(dict) do\n            if g < key then break end\n       \
    \     table.insert(answer, value)\n        end\n    end\n    return answer\nend",
  "    -- Assume that the parameter 'grades' is a list of numbers.\n    -- Return\
    \ a list of letters.\n    grades_lst = {}\n    grades_lst = grades\n    grades_lst\
    \ = grades_lst:gsub('[%a%p%c%s]','')\n    grades_lst = grades_lst:split('\\n')\n\
    \    for i, j in ipairs(grades_lst) do\n        grade = tonumber(j)\n        if\
    \ grade >= 4.0 then\n            letter_grade = 'A+'\n        elseif grade >=\
    \ 3.7 then\n            letter_grade = 'A'\n        elseif grade >= 3.3 then\n\
    \            letter_grade = 'A-'\n        elseif grade >= 3.0 then\n         \
    \   letter_grade = 'B+'\n        elseif grade >= 2.7 then\n            letter_grade\
    \ = 'B'\n        elseif grade >= 2.3 then\n            letter_grade = 'B-'\n \
    \       elseif grade >= 2.0 then\n            letter_grade = 'C+'\n        elseif\
    \ grade >= 1.7 then\n            letter_grade = 'C'\n        elseif grade >= 1.3\
    \ then\n            letter_grade = 'C-'\n        elseif grade >= 1.0 then\n  \
    \          letter_grade = 'D+'\n        elseif grade >= 0.7 then\n           \
    \ letter_grade = 'D'\n        elseif grade >= 0.0 then\n            letter_grade\
    \ = 'D-'\n        elseif grade >= 0.0 then\n            letter_grade = 'E'\n \
    \       end\n        print(j, letter_grade)\n    end\nend", "    -- Write your\
    \ code here!\nend", "    grades = {}\n    if grades.GPA >= 4.0 then\n        return\
    \ \"A+\"\n    elseif grades.GPA >= 3.7 then\n        return \"A\"\n    elseif\
    \ grades.GPA >= 3.3 then\n        return \"A-\"\n    elseif grades.GPA >= 3.0\
    \ then\n        return \"B+\"\n    elseif grades.GPA >= 2.7 then\n        return\
    \ \"B\"\n    elseif grades.GPA >= 2.3 then\n        return \"B-\"\n    elseif\
    \ grades.GPA >= 2.0 then\n        return \"C+\"\n    elseif grades.GPA >= 1.7\
    \ then\n        return \"C\"\n    elseif grades.GPA >= 1.3 then\n        return\
    \ \"C-\"\n    elseif grades.GPA >= 1.0 then\n        return \"D+\"\n    elseif\
    \ grades.GPA >= 0.7 then\n        return \"D\"\n    elseif grades.GPA >= 0.0 then\n\
    \        return \"D-\"\n    else\n        return \"E\"\n    end\nend", "    --\
    \ your code here\n    local grades_out = {}\n    for _, grade in ipairs(grades)\
    \ do\n        table.insert(grades_out, (function(grade)\n            if grade\
    \ == 4.0 then\n                return \"A+\"\n            elseif grade > 3.7 then\n\
    \                return \"A\"\n            elseif grade > 3.3 then\n         \
    \       return \"A-\"\n            elseif grade > 3.0 then\n                return\
    \ \"B+\"\n            elseif grade > 2.7 then\n                return \"B\"\n\
    \            elseif grade > 2.3 then\n                return \"B-\"\n        \
    \    elseif grade > 2.0 then\n                return \"C+\"\n            elseif\
    \ grade > 1.7 then\n                return \"C\"\n            elseif grade > 1.3\
    \ then\n                return \"C-\"\n            elseif grade > 1.0 then\n \
    \               return \"D+\"\n            elseif grade > 0.7 then\n         \
    \       return \"D\"\n            elseif grade > 0.0 then\n                return\
    \ \"D-\"\n            else\n                return \"E\"\n            end\n  \
    \      end)(grade))\n    end\n    return grades_out\nend", "  -- your code here\n\
    end", '-- grades = {4.0, 3.8, 3.5, 3.2, 2.9, 2.6, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7,
    0.0}', "    local letters = { 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-',\
    \ 'D+', 'D', 'D-', 'E' }\n    local numbers = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0 }\n    local grade_table = {}\n    for i =\
    \ 1, #numbers do\n        grade_table[numbers[i]] = letters[i]\n    end\n    local\
    \ new_grades = {}\n    for k, v in pairs(grades) do\n        local letter = 'E'\n\
    \        for num, grade in pairs(grade_table) do\n            if v >= num then\n\
    \                letter = grade\n                break\n            end\n    \
    \    end\n        new_grades[k] = letter\n    end\n    return new_grades\nend",
  "    -- your code here\n    local new_grades = {}\n    for i = 1, #grades do\n \
    \       if grades[i] >= 4.0 then\n            new_grades[i] = \"A+\"\n       \
    \ elseif grades[i] >= 3.7 then\n            new_grades[i] = \"A\"\n        elseif\
    \ grades[i] >= 3.3 then\n            new_grades[i] = \"A-\"\n        elseif grades[i]\
    \ >= 3.0 then\n            new_grades[i] = \"B+\"\n        elseif grades[i] >=\
    \ 2.7 then\n            new_grades[i] = \"B\"\n        elseif grades[i] >= 2.3\
    \ then\n            new_grades[i] = \"B-\"\n        elseif grades[i] >= 2.0 then\n\
    \            new_grades[i] = \"C+\"\n        elseif grades[i] >= 1.7 then\n  \
    \          new_grades[i] = \"C\"\n        elseif grades[i] >= 1.3 then\n     \
    \       new_grades[i] = \"C-\"\n        elseif grades[i] >= 1.0 then\n       \
    \     new_grades[i] = \"D+\"\n        elseif grades[i] >= 0.7 then\n         \
    \   new_grades[i] = \"D\"\n        elseif grades[i] >= 0.0 then\n            new_grades[i]\
    \ = \"D-\"\n        elseif grades[i] >= 0.0 then\n            new_grades[i] =\
    \ \"E\"\n        end\n    end\n    return new_grades\nend", "\nend", "    local\
    \ letter_grades = {}\n    for _, gpa in ipairs(grades) do\n        if gpa > 4.0\
    \ then\n            letter_grades[#letter_grades + 1] = \"A+\"\n        elseif\
    \ gpa > 3.7 then\n            letter_grades[#letter_grades + 1] = \"A\"\n    \
    \    elseif gpa > 3.3 then\n            letter_grades[#letter_grades + 1] = \"\
    A-\"\n        elseif gpa > 3.0 then\n            letter_grades[#letter_grades\
    \ + 1] = \"B+\"\n        elseif gpa > 2.7 then\n            letter_grades[#letter_grades\
    \ + 1] = \"B\"\n        elseif gpa > 2.3 then\n            letter_grades[#letter_grades\
    \ + 1] = \"B-\"\n        elseif gpa > 2.0 then\n            letter_grades[#letter_grades\
    \ + 1] = \"C+\"\n        elseif gpa > 1.7 then\n            letter_grades[#letter_grades\
    \ + 1] = \"C\"\n        elseif gpa > 1.3 then\n            letter_grades[#letter_grades\
    \ + 1] = \"C-\"\n        elseif gpa > 1.0 then\n            letter_grades[#letter_grades\
    \ + 1] = \"D+\"\n        elseif gpa > 0.7 then\n            letter_grades[#letter_grades\
    \ + 1] = \"D\"\n        elseif gpa > 0.0 then\n            letter_grades[#letter_grades\
    \ + 1] = \"D-\"\n        else\n            letter_grades[#letter_grades + 1] =\
    \ \"E\"\n        end\n    end\n    return letter_grades\nend", "    local grades\
    \ = \n        { \n            [\"A+\"] = 4.0,\n            [\"A\"] = 3.7,\n  \
    \          [\"A-\"] = 3.3,\n            [\"B+\"] = 3.0,\n            [\"B\"] =\
    \ 2.7,\n            [\"B-\"] = 2.3,\n            [\"C+\"] = 2.0,\n           \
    \ [\"C\"] = 1.7,\n            [\"C-\"] = 1.3,\n            [\"D+\"] = 1.0,\n \
    \           [\"D\"] = 0.7,\n            [\"D-\"] = 0.0,\n            [\"E\"] =\
    \ 0.0,\n        }\n    -- Write your function here\n    local function letter_grade(grades)\n\
    \    if grades > grades[\"A+\"] then\n        return \"A+\"\n    elseif grades\
    \ > grades[\"A\"] then\n        return \"A\"\n    elseif grades > grades[\"A-\"\
    ] then\n        return \"A-\"\n    elseif grades > grades[\"B+\"] then\n     \
    \   return \"B+\"\n    elseif grades > grades[\"B\"] then\n        return \"B\"\
    \n    elseif grades > grades[\"B-\"] then\n        return \"B-\"\n    elseif grades\
    \ > grades[\"C+\"] then\n        return \"C+\"\n    elseif grades > grades[\"\
    C\"] then\n        return \"C\"\n    elseif grades > grades[\"C-\"] then\n   \
    \     return \"C-\"\n    elseif grades > grades[\"D+\"] then\n        return \"\
    D+\"\n    elseif grades > grades[\"D\"] then\n        return \"D\"\n    elseif\
    \ grades > grades[\"D-\"] then\n        return \"D-\"\n    elseif grades > grades[\"\
    E\"] then\n        return \"E\"\n    end\nend\nend", "--[[\n    Given a list of\
    \ grades:\n    >numerical_letter_grade({4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0})\n\
    \    {'A+','A','A-','B+','B','B-','C+','C','C-','D+','D','E'}\n    --]]\n    if\
    \ not grades then\n        return nil\n    end\n    local grades_map = {'A+','A','A-','B+','B','B-','C+','C','C-','D+','D','E'}\n\
    \    local score_map = {4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0}\n   \
    \ local result = {}\n    for index,value in ipairs(grades) do\n        local pos\
    \ = 1\n        for score,_ in ipairs(score_map) do\n            if value >= score_map[score]\
    \ then\n                pos = score\n                break\n            end\n\
    \        end\n        table.insert(result,grades_map[pos])\n    end\n    return\
    \ result\nend", '', "    --...\nend", "    -- TODO: return the list of letter\
    \ grades\nend\nnumerical_letter_grade({4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7, 0.0})", "    local grades_letters = {}\n    for _, grade in ipairs(grades)\
    \ do\n        local grade_letter\n        if grade >= 4.0 then\n            grade_letter\
    \ = \"A+\"\n        elseif grade >= 3.7 then\n            grade_letter = \"A\"\
    \n        elseif grade >= 3.3 then\n            grade_letter = \"A-\"\n      \
    \  elseif grade >= 3.0 then\n            grade_letter = \"B+\"\n        elseif\
    \ grade >= 2.7 then\n            grade_letter = \"B\"\n        elseif grade >=\
    \ 2.3 then\n            grade_letter = \"B-\"\n        elseif grade >= 2.0 then\n\
    \            grade_letter = \"C+\"\n        elseif grade >= 1.7 then\n       \
    \     grade_letter = \"C\"\n        elseif grade >= 1.3 then\n            grade_letter\
    \ = \"C-\"\n        elseif grade >= 1.0 then\n            grade_letter = \"D+\"\
    \n        elseif grade >= 0.7 then\n            grade_letter = \"D\"\n       \
    \ elseif grade >= 0.0 then\n            grade_letter = \"D-\"\n        else\n\
    \            grade_letter = \"E\"\n        end\n        table.insert(grades_letters,\
    \ grade_letter)\n    end\n    return grades_letters\nend", "    local letters\
    \ = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n        if\
    \ grade >= 4.0 then\n            letters[i] = \"A+\"\n        elseif grade >=\
    \ 3.7 then\n            letters[i] = \"A\"\n        elseif grade >= 3.3 then\n\
    \            letters[i] = \"A-\"\n        elseif grade >= 3.0 then\n         \
    \   letters[i] = \"B+\"\n        elseif grade >= 2.7 then\n            letters[i]\
    \ = \"B\"\n        elseif grade >= 2.3 then\n            letters[i] = \"B-\"\n\
    \        elseif grade >= 2.0 then\n            letters[i] = \"C+\"\n        elseif\
    \ grade >= 1.7 then\n            letters[i] = \"C\"\n        elseif grade >= 1.3\
    \ then\n            letters[i] = \"C-\"\n        elseif grade >= 1.0 then\n  \
    \          letters[i] = \"D+\"\n        elseif grade >= 0.7 then\n           \
    \ letters[i] = \"D\"\n        elseif grade >= 0.0 then\n            letters[i]\
    \ = \"D-\"\n        else\n            letters[i] = \"E\"\n        end\n    end\n\
    \    return letters\nend\nassert(numerical_letter_grade({ 4.0, 4.0, 2.0, 2.0,\
    \ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0 }) == { \"A+\", \"A+\", \"C+\", \"C+\", \"C+\"\
    , \"C+\", \"C+\", \"C+\", \"C+\", \"C+\" })\nassert(numerical_letter_grade({ 4.0,\
    \ 3.9, 3.9, 3.9, 3.9, 3.9, 3.9, 3.9, 3.9, 3.9 }) == { \"A+\", \"A\", \"A\", \"\
    A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"A\" })\nassert(numerical_letter_grade({\
    \ 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3", "    --[[\n        The parameter grades\
    \ is a table of numbers.\n        Your function should return a table of letter\
    \ grades.\n    ]]\n    local letters = {}\n    for i, grade in ipairs(grades)\
    \ do\n        if grade >= 4.0 then letters[i] = \"A+\" \n        elseif grade\
    \ >= 3.7 then letters[i] = \"A\" \n        elseif grade >= 3.3 then letters[i]\
    \ = \"A-\" \n        elseif grade >= 3.0 then letters[i] = \"B+\" \n        elseif\
    \ grade >= 2.7 then letters[i] = \"B\" \n        elseif grade >= 2.3 then letters[i]\
    \ = \"B-\" \n        elseif grade >= 2.0 then letters[i] = \"C+\" \n        elseif\
    \ grade >= 1.7 then letters[i] = \"C\" \n        elseif grade >= 1.3 then letters[i]\
    \ = \"C-\" \n        elseif grade >= 1.0 then letters[i] = \"D+\" \n        elseif\
    \ grade >= 0.7 then letters[i] = \"D\" \n        elseif grade >= 0.0 then letters[i]\
    \ = \"D-\" \n        else letters[i] = \"E\" \n        end\n    end\n    return\
    \ letters\nend", "    --[[ \n        YOUR CODE HERE\n    ]]\n    return {}\nend",
  "--[[\n    >>> numerical_letter_grade([3.0, 2.3, 2.7, 1.3, 3.3, 3.7, 4.0])\n   \
    \ ['B+', 'B-', 'B', 'C-', 'A-', 'A', 'A+']", "    return nil\nend", "    local\
    \ letter_grades = {}\n    for i = 1, #grades do\n        local grade = grades[i]\n\
    \        local letter_grade\n        if grade >= 4.0 then\n            letter_grade\
    \ = \"A+\"\n        elseif grade >= 3.7 then\n            letter_grade = \"A\"\
    \n        elseif grade >= 3.3 then\n            letter_grade = \"A-\"\n      \
    \  elseif grade >= 3.0 then\n            letter_grade = \"B+\"\n        elseif\
    \ grade >= 2.7 then\n            letter_grade = \"B\"\n        elseif grade >=\
    \ 2.3 then\n            letter_grade = \"B-\"\n        elseif grade >= 2.0 then\n\
    \            letter_grade = \"C+\"\n        elseif grade >= 1.7 then\n       \
    \     letter_grade = \"C\"\n        elseif grade >= 1.3 then\n            letter_grade\
    \ = \"C-\"\n        elseif grade >= 1.0 then\n            letter_grade = \"D+\"\
    \n        elseif grade >= 0.7 then\n            letter_grade = \"D\"\n       \
    \ elseif grade >= 0.0 then\n            letter_grade = \"D-\"\n        else\n\
    \            letter_grade = \"E\"\n        end\n        letter_grades[i] = letter_grade\n\
    \    end\n    return letter_grades\nend\nprint(numerical_letter_grade({4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0}))", "    return -- List\
    \ of letter grades\nend", "    --TODO: Implement the function\n    --TODO: Implement\
    \ the function\n    local function grade(gpa)\n        local letterGrades = {\n\
    \            Aplus = 4.0,\n            A = 3.7,\n            Aminus = 3.3,\n \
    \           Bplus = 3.0,\n            B = 2.7,\n            Bminus = 2.3,\n  \
    \          Cplus = 2.0,\n            C = 1.7,\n            Cminus = 1.3,\n   \
    \         Dplus = 1.0,\n            D = 0.7,\n            Dminus = 0.0,\n    \
    \        E = 0.0\n        }\n        for letter,number in pairs(letterGrades)\
    \ do\n            if gpa >= number then\n                return letter\n     \
    \       end\n        end\n    end\n    local gradesIn = {}\n    for i = 1,#grades\
    \ do\n        table.insert(gradesIn, grade(grades[i]))\n    end\n    return gradesIn\n\
    end", "    --[[\n        Write your code here\n    ]]\nend", "    -- write your\
    \ code here\nend", "    -- your code here\n    local letter = {}\n    for i =\
    \ 1, #grades do\n        if grades[i] > 4.0 then\n            table.insert(letter,\
    \ \"A+\")\n        elseif grades[i] > 3.7 then\n            table.insert(letter,\
    \ \"A\")\n        elseif grades[i] > 3.3 then\n            table.insert(letter,\
    \ \"A-\")\n        elseif grades[i] > 3.0 then\n            table.insert(letter,\
    \ \"B+\")\n        elseif grades[i] > 2.7 then\n            table.insert(letter,\
    \ \"B\")\n        elseif grades[i] > 2.3 then\n            table.insert(letter,\
    \ \"B-\")\n        elseif grades[i] > 2.0 then\n            table.insert(letter,\
    \ \"C+\")\n        elseif grades[i] > 1.7 then\n            table.insert(letter,\
    \ \"C\")\n        elseif grades[i] > 1.3 then\n            table.insert(letter,\
    \ \"C-\")\n        elseif grades[i] > 1.0 then\n            table.insert(letter,\
    \ \"D+\")\n        elseif grades[i] > 0.7 then\n            table.insert(letter,\
    \ \"D\")\n        elseif grades[i] > 0.0 then\n            table.insert(letter,\
    \ \"D-\")\n        else\n            table.insert(letter, \"E\")\n        end\n\
    \    end\n    return letter\nend", "    -- grades is a list of numbers\n    --\
    \ return a list of letter grades\n    -- based on the table from above\n    local\
    \ letter = {}\n    for i = 1, #grades do\n        if grades[i] >= 4.0 then\n \
    \           letter[i] = \"A+\"\n        elseif grades[i] >= 3.7 then\n       \
    \     letter[i] = \"A\"\n        elseif grades[i] >= 3.3 then\n            letter[i]\
    \ = \"A-\"\n        elseif grades[i] >= 3.0 then\n            letter[i] = \"B+\"\
    \n        elseif grades[i] >= 2.7 then\n            letter[i] = \"B\"\n      \
    \  elseif grades[i] >= 2.3 then\n            letter[i] = \"B-\"\n        elseif\
    \ grades[i] >= 2.0 then\n            letter[i] = \"C+\"\n        elseif grades[i]\
    \ >= 1.7 then\n            letter[i] = \"C\"\n        elseif grades[i] >= 1.3\
    \ then\n            letter[i] = \"C-\"\n        elseif grades[i] >= 1.0 then\n\
    \            letter[i] = \"D+\"\n        elseif grades[i] >= 0.7 then\n      \
    \      letter[i] = \"D\"\n        elseif grades[i] >= 0.0 then\n            letter[i]\
    \ = \"D-\"\n        else\n            letter[i] = \"E\"\n        end\n    end\n\
    \    return letter\nend", "\t-- your code here\nend", "  -- your code here\n \
    \ local chars = {}\n  for i, v in ipairs(grades) do\n    local ch = 'E'\n    if\
    \ v < 0.7 then ch = 'D-'\n    elseif v < 1.0 then ch = 'D+'\n    elseif v < 1.3\
    \ then ch = 'C-'\n    elseif v < 1.7 then ch = 'C'\n    elseif v < 2.0 then ch\
    \ = 'C+'\n    elseif v < 2.3 then ch = 'B-'\n    elseif v < 2.7 then ch = 'B'\n\
    \    elseif v < 3.0 then ch = 'B+'\n    elseif v < 3.3 then ch = 'A-'\n    elseif\
    \ v < 3.7 then ch = 'A'\n    elseif v <= 4.0 then ch = 'A+'\n    end\n    chars[i]\
    \ = ch\n  end\n  return chars\nend", "    -- YOUR CODE HERE\nend", "\nend", " \
    \   -- your code here\nend", "    return {}\nend\nassert(numerical_letter_grade({3.2,\
    \ 3.4, 3.6, 3.8, 4.0}) == {\"A-\", \"A-\", \"A\", \"A+\", \"A+\"})", "    return\
    \ {\n        [4.0] = \"A+\",\n        [3.7] = \"A\",\n        [3.3] = \"A-\",\n\
    \        [3.0] = \"B+\",\n        [2.7] = \"B\",\n        [2.3] = \"B-\",\n  \
    \      [2.0] = \"C+\",\n        [1.7] = \"C\",\n        [1.3] = \"C-\",\n    \
    \    [1.0] = \"D+\",\n        [0.7] = \"D\",\n        [0.0] = \"D-\",\n      \
    \  [-1.0] = \"E\"\n    }\nend", "    -- The variable grades is a list of numerical\
    \ grades\n    -- Output a list of letter grades \n    -- <your solution>\nend",
  "    local letter_grades = {}\n    -- your code here\n    for i = 1, #grades do\n\
    \        if grades[i] == 4.0 then\n            table.insert(letter_grades, \"\
    A+\")\n        elseif grades[i] > 3.7 then\n            table.insert(letter_grades,\
    \ \"A\")\n        elseif grades[i] > 3.3 then\n            table.insert(letter_grades,\
    \ \"A-\")\n        elseif grades[i] > 3.0 then\n            table.insert(letter_grades,\
    \ \"B+\")\n        elseif grades[i] > 2.7 then\n            table.insert(letter_grades,\
    \ \"B\")\n        elseif grades[i] > 2.3 then\n            table.insert(letter_grades,\
    \ \"B-\")\n        elseif grades[i] > 2.0 then\n            table.insert(letter_grades,\
    \ \"C+\")\n        elseif grades[i] > 1.7 then\n            table.insert(letter_grades,\
    \ \"C\")\n        elseif grades[i] > 1.3 then\n            table.insert(letter_grades,\
    \ \"C-\")\n        elseif grades[i] > 1.0 then\n            table.insert(letter_grades,\
    \ \"D+\")\n        elseif grades[i] > 0.7 then\n            table.insert(letter_grades,\
    \ \"D\")\n        elseif grades[i] > 0.0 then\n            table.insert(letter_grades,\
    \ \"D-\")\n        else\n            table.insert(letter_grades, \"E\")\n    \
    \    end\n    end\n    return letter_grades\nend", "    local grades_table = {}\n\
    \    for i, grade in ipairs(grades) do\n        if grade >= 4.0 then\n       \
    \     grades_table[i] = \"A+\"\n        elseif grade > 3.7 then\n            grades_table[i]\
    \ = \"A\"\n        elseif grade > 3.3 then\n            grades_table[i] = \"A-\"\
    \n        elseif grade > 3.0 then\n            grades_table[i] = \"B+\"\n    \
    \    elseif grade > 2.7 then\n            grades_table[i] = \"B\"\n        elseif\
    \ grade > 2.3 then\n            grades_table[i] = \"B-\"\n        elseif grade\
    \ > 2.0 then\n            grades_table[i] = \"C+\"\n        elseif grade > 1.7\
    \ then\n            grades_table[i] = \"C\"\n        elseif grade > 1.3 then\n\
    \            grades_table[i] = \"C-\"\n        elseif grade > 1.0 then\n     \
    \       grades_table[i] = \"D+\"\n        elseif grade > 0.7 then\n          \
    \  grades_table[i] = \"D\"\n        elseif grade > 0.0 then\n            grades_table[i]\
    \ = \"D-\"\n        else\n            grades_table[i] = \"E\"\n        end\n \
    \   end\n    return grades_table\nend", end, "    local grades = {3.5, 3.2, 3.1,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0}\n    for i, x in ipairs(grades)\
    \ do\n        if x >= 4.0 then\n            print(\"Grade: \" .. \"A+\")\n   \
    \     elseif x >= 3.7 then\n            print(\"Grade: \" .. \"A\")\n        elseif\
    \ x >= 3.3 then\n            print(\"Grade: \" .. \"A-\")\n        elseif x >=\
    \ 3.0 then\n            print(\"Grade: \" .. \"B+\")\n        elseif x >= 2.7\
    \ then\n            print(\"Grade: \" .. \"B\")\n        elseif x >= 2.3 then\n\
    \            print(\"Grade: \" .. \"B-\")\n        elseif x >= 2.0 then\n    \
    \        print(\"Grade: \" .. \"C+\")\n        elseif x >= 1.7 then\n        \
    \    print(\"Grade: \" .. \"C\")\n        elseif x >= 1.3 then\n            print(\"\
    Grade: \" .. \"C-\")\n        elseif x >= 1.0 then\n            print(\"Grade:\
    \ \" .. \"D+\")\n        elseif x >= 0.7 then\n            print(\"Grade: \" ..\
    \ \"D\")\n        elseif x >= 0.0 then\n            print(\"Grade: \" .. \"D-\"\
    )\n        elseif x == 0.0 then\n            print(\"Grade: \" .. \"E\")\n   \
    \     end\n    end\nend\nnumerical_letter_grade()", "  -- Your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
