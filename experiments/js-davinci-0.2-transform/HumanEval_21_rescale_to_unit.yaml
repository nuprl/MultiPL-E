name: HumanEval_21_rescale_to_unit
language: js
prompt: "//Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n \
  \ assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
completions: ["    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n    return rescaled;\n}\n",
  "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    return numbers.map(function(n){\n\
    \        return (n - min) / range;\n    });\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max\
    \ - min;\n    return numbers.map(function(n){\n        return (n - min) / range;\n\
    \    });\n}\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    return numbers.map(function(n){\n\
    \        return (n - min) / range;\n    });\n}\n", "    var min = Math.min.apply(null,\
    \ numbers);\n    var max = Math.max.apply(null, numbers);\n    var new_numbers\
    \ = [];\n    for (var i = 0; i < numbers.length; i++){\n        new_numbers.push((numbers[i]\
    \ - min) / (max - min));\n    }\n    return new_numbers;\n}\n", "    var min =\
    \ Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n\
    \    var range = max - min;\n    return numbers.map(function(n){\n        return\
    \ (n - min) / range;\n    });\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n  \
    \  var rescaled = [];\n    for (var i = 0; i < numbers.length; i++){\n       \
    \ rescaled.push((numbers[i] - min) / range);\n    }\n    return rescaled;\n}\n",
  "    var max = Math.max.apply(null, numbers);\n    var min = Math.min.apply(null,\
    \ numbers);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n\
    \        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n    return rescaled;\n}\n",
  "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    return numbers.map(function(n){\n\
    \        return (n - min) / range;\n    });\n}\n", "\tvar min = Math.min.apply(null,\
    \ numbers);\n\tvar max = Math.max.apply(null, numbers);\n\tvar range = max - min;\n\
    \tvar rescaled = numbers.map(function(n){\n\t\treturn (n - min) / range;\n\t});\n\
    \treturn rescaled;\n}\n", "    var min = Math.min.apply(null, numbers);\n    var\
    \ max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return\
    \ numbers.map(function(number){\n        return (number - min) / range;\n    });\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var range = max - min;\n    var rescaled = numbers.map(function(number){\n\
    \        return (number - min) / range;\n    });\n    return rescaled;\n}\n",
  "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n\
    \        result.push((numbers[i] - min) / (max - min));\n    }\n    return result;\n\
    }\n", "    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null,\
    \ numbers);\n    var diff = max - min;\n    var rescaled = numbers.map(function(n){\n\
    \        return (n - min) / diff;\n    });\n    return rescaled;\n}\n", "    var\
    \ min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n\
    \    var range = max - min;\n    return numbers.map(function(n){ return (n - min)\
    \ / range; });\n}\n", "    var min = Math.min.apply(null, numbers);\n    var max\
    \ = Math.max.apply(null, numbers);\n    var result = [];\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max - min));\n\
    \    }\n    return result;\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n  \
    \  var rescaled = numbers.map(function(n){\n        return (n - min) / range;\n\
    \    });\n    return rescaled;\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n  \
    \  var rescaled = numbers.map(function(n){\n        return (n - min) / range;\n\
    \    });\n    return rescaled;\n}\n", "    var min = Math.min.apply(null, numbers);\n\
    \    var max = Math.max.apply(null, numbers);\n    var result = [];\n    for (var\
    \ i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / (max\
    \ - min));\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
