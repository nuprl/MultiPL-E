language: js
name: HumanEval_67_fruit_distribution
results:
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpgh1ejo1i.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgh1ejo1i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpdk2629p1.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdk2629p1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = n -\
    \ (parseInt(arr[0]) + parseInt(arr[3]));\n    return num;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // write your code here\n    // return the number\
    \ of mango fruits\n    let arr = s.split(\" \");\n    let sum = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n          \
    \  sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] == \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var fruits = s.split(\" \");\n    var total =\
    \ Number(fruits[0]) + Number(fruits[3]);\n    return n - total;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' and ').map(x => parseInt(x.split('\
    \ ')[0]));\n    return n - a - o;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp4le0b5r9.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4le0b5r9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
