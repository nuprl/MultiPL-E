language: js
name: HumanEval_67_fruit_distribution
results:
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpgh1ejo1i.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgh1ejo1i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpdk2629p1.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdk2629p1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = n -\
    \ (parseInt(arr[0]) + parseInt(arr[3]));\n    return num;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // write your code here\n    // return the number\
    \ of mango fruits\n    let arr = s.split(\" \");\n    let sum = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n          \
    \  sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] == \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var fruits = s.split(\" \");\n    var total =\
    \ Number(fruits[0]) + Number(fruits[3]);\n    return n - total;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' and ').map(x => parseInt(x.split('\
    \ ')[0]));\n    return n - a - o;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp4le0b5r9.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4le0b5r9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    var num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let total = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - total;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // your code here\n    let arr = s.split(\" \"\
    );\n    let num = parseInt(arr[0]) + parseInt(arr[3]);\n    return n - num;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apple = parseInt(arr[0]);\n\
    \    var orange = parseInt(arr[3]);\n    var mango = n - apple - orange;\n   \
    \ return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp4le0b5r9.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4le0b5r9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar s = s.split(\" \");\n\tvar apples = parseInt(s[0]);\n\
    \tvar oranges = parseInt(s[3]);\n\tvar mango = n - apples - oranges;\n\treturn\
    \ mango;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    return n - (apple + orange);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let x = s.split(\" \");\n    let a = x[0];\n\
    \    let b = x[2];\n    let c = x[4];\n    let d = x[6];\n    let e = x[8];\n\
    \    let f = x[10];\n    let g = x[12];\n    let h = x[14];\n    let i = x[16];\n\
    \    let j = x[18];\n    let k = x[20];\n    let l = x[22];\n    let m = x[24];\n\
    \    let o = x[26];\n    let p = x[28];\n    let q = x[30];\n    let r = x[32];\n\
    \    let s = x[34];\n    let t = x[36];\n    let u = x[38];\n    let v = x[40];\n\
    \    let w = x[42];\n    let y = x[44];\n    let z = x[46];\n    let aa = x[48];\n\
    \    let bb = x[50];\n    let cc = x[52];\n    let dd = x[54];\n    let ee = x[56];\n\
    \    let ff = x[58];\n    let gg = x[60];\n    let hh = x[62];\n    let ii = x[64];\n\
    \    let jj = x[66];\n    let kk = x[68];\n    let ll = x[70];\n    let mm = x[72];\n\
    \    let oo = x[74];\n    let pp = x[76];\n    let qq = x[78];\n    let rr = x[80];\n\
    \    let ss = x[82];\n    let tt = x[84];\n    let uu = x[86];\n    let vv = x[88];\n\
    \    let ww = x[90];\n    let yy = x[92];\n    let zz = x[94];\n    let aaa =\
    \ x[96];\n    let bbb = x[98];\n    let ccc = x[100];\n    let ddd = x[102];\n\
    \    let eee = x[104];\n    let\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptz816o49.js:34\n    let s = x[34];\n        ^\n\nSyntaxError: Identifier\
    \ 's' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apple = arr[0];\n\
    \    var orange = arr[3];\n    var total = apple + orange;\n    var mango = n\
    \ - total;\n    return mango;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-37\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmptfet4_84.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptfet4_84.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -37,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpn82fybhl.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82fybhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }else if(arr[i] == \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' and ').map(x => x.split('\
    \ ')[0]);\n    return n - parseInt(a) - parseInt(o);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            num += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ){\n            num += parseInt(arr[i-1]);\n        }\n    }\n    return n - num;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    var mango = n - (apples + oranges);\n\
    \    return mango;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp60ko48wp.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp60ko48wp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // write your code here\n    var arr = s.split(\"\
    \ \");\n    var num = parseInt(arr[0]) + parseInt(arr[3]);\n    return n - num;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmppdvtyhyk.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppdvtyhyk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let total = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            total += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"\
    oranges\"){\n            total += parseInt(arr[i-1]);\n        }\n    }\n    return\
    \ n - total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += Number(arr[i-1]);\n        }\n        else if(arr[i] == \"\
    oranges\"){\n            sum += Number(arr[i-1]);\n        }\n    }\n    return\
    \ n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let s_arr = s.split(\" \");\n    let apples =\
    \ parseInt(s_arr[0]);\n    let oranges = parseInt(s_arr[2]);\n    let mangoes\
    \ = n - apples - oranges;\n    return mangoes;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp_4s800qq.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_4s800qq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp60ko48wp.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp60ko48wp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    var mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    var mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    let mango = n - (apples + oranges);\n\
    \    return mango;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmplto176pw.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplto176pw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpn82fybhl.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82fybhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[2]);\n    return n - (apple + orange);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpbe7c4hyh.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbe7c4hyh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]*1\
    \ + arr[2]*1;\n    return n - num;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpdyt35afo.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdyt35afo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    return n - (apple + orange);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            num += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ){\n            num += parseInt(arr[i-1]);\n        }\n    }\n    return n - num;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpgp_fctmi.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgp_fctmi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mangoes = n - apples - oranges;\n\
    \    return mangoes;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    if(arr[1] == \"apples\"){\n        num = n - arr[0] - arr[4];\n    }\n  \
    \  else{\n        num = n - arr[0] - arr[2];\n    }\n    return num;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmppi1gp1x7.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppi1gp1x7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]*1\
    \ + arr[2]*1;\n    return n - num;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpdyt35afo.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdyt35afo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let apples = parseInt(s.split(\" \")[0]);\n \
    \   let oranges = parseInt(s.split(\" \")[3]);\n    return n - (apples + oranges);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apple = parseInt(arr[0]);\n\
    \    var orange = parseInt(arr[2]);\n    return n - apple - orange;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpb3ihe6rw.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb3ihe6rw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_of_apples\
    \ = parseInt(arr[0]);\n    let num_of_oranges = parseInt(arr[3]);\n    return\
    \ n - num_of_apples - num_of_oranges;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let apples = s.split(\" \")[0];\n    let oranges\
    \ = s.split(\" \")[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mangoes = n - apples - oranges;\n\
    \    return mangoes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - (apples + oranges);\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp4le0b5r9.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4le0b5r9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' and ').map(x => x.split('\
    \ ')[0]);\n    return n - (a * 1 + o * 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    return n - (apple + orange);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = s.split(\" \");\n    let apple = parseInt(a[0]);\n\
    \    let orange = parseInt(a[3]);\n    let mango = n - (apple + orange);\n   \
    \ return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            num += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ){\n            num += parseInt(arr[i-1]);\n        }\n    }\n    return n - num;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            num += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ){\n            num += parseInt(arr[i-1]);\n        }\n    }\n    return n - num;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpn82fybhl.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82fybhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mangoes = n - (apples + oranges);\n\
    \    return mangoes;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let num = s.split(\" \");\n    let apple = parseInt(num[0]);\n\
    \    let orange = parseInt(num[3]);\n    return n - (apple + orange);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(\" and \").map(x => x.split(\"\
    \ \")[0]);\n    return n - (Number(a) + Number(o));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    return n - apple - orange;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[2]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpp7yvb8pb.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp7yvb8pb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mangoes = n - apples - oranges;\n\
    \    return mangoes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    return n -\
    \ num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apples = parseInt(s.split(\" \")[0]);\n \
    \   var oranges = parseInt(s.split(\" \")[3]);\n    return n - (apples + oranges);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        if(arr[i] === \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var a = parseInt(arr[0]);\n\
    \    var o = parseInt(arr[2]);\n    return n - (a + o);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpsk5tnzeq.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsk5tnzeq.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpn82fybhl.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82fybhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }else if(arr[i] == \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += Number(arr[i-1]);\n        }\n        else if(arr[i] == \"\
    oranges\"){\n            sum += Number(arr[i-1]);\n        }\n    }\n    return\
    \ n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = Number(arr[0]);\n\
    \    let oranges = Number(arr[3]);\n    return n - apples - oranges;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let numOfApples\
    \ = parseInt(arr[0]);\n    let numOfOranges = parseInt(arr[3]);\n    return n\
    \ - (numOfApples + numOfOranges);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpgh1ejo1i.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgh1ejo1i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = arr[0]\
    \ + arr[2];\n    return n - num;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmppdvtyhyk.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppdvtyhyk.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    let mango = n - (apple + orange);\n \
    \   return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mangoes = n - apples - oranges;\n\
    \    return mangoes;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            num += parseInt(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ){\n            num += parseInt(arr[i-1]);\n        }\n    }\n    return n - num;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += Number(arr[i-1]);\n        }\n        else if(arr[i] == \"\
    oranges\"){\n            sum += Number(arr[i-1]);\n        }\n    }\n    return\
    \ n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_of_apples\
    \ = parseInt(arr[0]);\n    var num_of_oranges = parseInt(arr[3]);\n    return\
    \ n - num_of_apples - num_of_oranges;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    var num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let s1 = s.split(\" \");\n    let num = s1[0]\
    \ + s1[2];\n    return n - num;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmphes27i69.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphes27i69.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let num_apples\
    \ = parseInt(arr[0]);\n    let num_oranges = parseInt(arr[3]);\n    let num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - (apples + oranges);\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apple = parseInt(arr[0]);\n\
    \    let orange = parseInt(arr[3]);\n    let mango = n - apple - orange;\n   \
    \ return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[2]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpn82fybhl.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn82fybhl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' and ').map(x => x.split('\
    \ ')[0]);\n    return n - (a * 1 + o * 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num_apples\
    \ = parseInt(arr[0]);\n    var num_oranges = parseInt(arr[3]);\n    var num_mangoes\
    \ = n - num_apples - num_oranges;\n    return num_mangoes;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    return n - (apples + oranges);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - apples - oranges;\n\
    \    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }else if(arr[i] == \"oranges\"\
    ){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n    return n - sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747742
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apple = parseInt(arr[0]);\n\
    \    var orange = parseInt(arr[3]);\n    var mango = n - (apple + orange);\n \
    \   return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = parseInt(arr[0]);\n\
    \    let oranges = parseInt(arr[3]);\n    let mango = n - apples - oranges;\n\
    \    return mango;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[3]);\n    return n - apples - oranges;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = parseInt(arr[0]);\n\
    \    var oranges = parseInt(arr[2]);\n    var mangoes = n - apples - oranges;\n\
    \    return mangoes;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmphxhbdk41.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphxhbdk41.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var num = parseInt(arr[0])\
    \ + parseInt(arr[3]);\n    return n - num;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747743
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n\
    \            sum += parseInt(arr[i-1]);\n        }\n        else if(arr[i] ==\
    \ \"oranges\"){\n            sum += parseInt(arr[i-1]);\n        }\n    }\n  \
    \  return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = s.split(\" \");\n    let b = a[0];\n\
    \    let c = a[2];\n    let d = a[4];\n    let e = b.split(\"\");\n    let f =\
    \ c.split(\"\");\n    let g = d.split(\"\");\n    let h = e[0];\n    let i = f[0];\n\
    \    let j = g[0];\n    let k = parseInt(h);\n    let l = parseInt(i);\n    let\
    \ m = parseInt(j);\n    let o = k + l + m;\n    let p = n - o;\n    return p;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpjaxob207.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjaxob207.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747743
