name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let evenArr = arr.filter(x => x % 2 === 0);\n    if(evenArr.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evenArr);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "  let evens\
    \ = arr.filter(num => num % 2 === 0);\n  let min = Math.min(...evens);\n  let\
    \ index = arr.indexOf(min);\n  return evens.length === 0 ? [] : [min, index];\n\
    }\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr\
    \ ? acc : curr);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0)\n  if (evens.length\
    \ === 0) return []\n  let smallest = evens.reduce((a, b) => a < b ? a : b)\n \
    \ let index = arr.indexOf(smallest)\n  return [smallest, index]\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n  \
    \  let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n\
    \    }\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    if (evens.length === 0){\n        return\
    \ [];\n    }\n    let smallest = evens[0];\n    let index = 0;\n    for (let i\
    \ = 0; i < evens.length; i++){\n        if (evens[i] < smallest){\n          \
    \  smallest = evens[i];\n            index = i;\n        }\n    }\n    return\
    \ [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    if(arr.length ===\
    \ 0){\n        return [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if\
    \ (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    let index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0){\n        return [];\n    }\n    let smallestEven = evens.reduce((a, b) =>\
    \ a < b ? a : b);\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return evens.length === 0 ? [] : [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n\
    \        return [];\n    }\n    let smallest = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    return [smallest, arr.indexOf(smallest)];\n}\n", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return evens.length === 0 ? [] : [smallestEven, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallestEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallestEven);\n    return evens.length > 0 ? [smallestEven,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(num =>\
    \ num % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    return [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0){\n        return [];\n    }\n    let smallest = evens.reduce((a,b)\
    \ => Math.min(a,b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    if (evens.length\
    \ === 0) return [];\n    return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    if(arr.length ===\
    \ 0) return [];\n    let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr\
    \ ? acc : curr);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(num => num % 2 === 0);\n    if(evens.length === 0) return [];\n \
    \   let smallest = evens.reduce((a,b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    if(arr.length == 0){\n        return\
    \ [];\n    }\n    let evens = arr.filter(x => x % 2 == 0);\n    if(evens.length\
    \ == 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "  if(arr.length\
    \ === 0){\n    return [];\n  }\n  let evens = arr.filter(num => num % 2 === 0);\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens\
    \ = arr.filter(e => e % 2 === 0);\n    let smallest = evens.sort((a, b) => a -\
    \ b)[0];\n    if (smallest === undefined) {\n        return [];\n    }\n    let\
    \ index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let even = arr.filter(x => x % 2 === 0);\n    if(even.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(num => num % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n  \
    \  let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evenArr\
    \ = arr.filter(num => num % 2 === 0);\n    let smallestEven = Math.min(...evenArr);\n\
    \    let smallestEvenIndex = arr.indexOf(smallestEven);\n    return evenArr.length\
    \ > 0 ? [smallestEven, smallestEvenIndex] : [];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    let min = Math.min(...evens);\n    if (evens.length\
    \ === 0){\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n}\n",
  "    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  if(arr.length === 0){\n    return [];\n  }\n\
    \  var evens = arr.filter(function(x){\n    return x % 2 === 0;\n  });\n  if(evens.length\
    \ === 0){\n    return [];\n  }\n  var min = evens[0];\n  for(var i = 1; i < evens.length;\
    \ i++){\n    if(evens[i] < min){\n      min = evens[i];\n    }\n  }\n  var index\
    \ = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n    if(evenArr.length === 0){\n        return [];\n    }\n\
    \    let minEven = Math.min(...evenArr);\n    let minEvenIndex = arr.indexOf(minEven);\n\
    \    return [minEven, minEvenIndex];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    return min === Infinity\
    \ ? [] : [min, index];\n}\n", "    let evens = [];\n    let evensIndex = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evens.push(arr[i]);\n            evensIndex.push(i);\n        }\n  \
    \  }\n    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens[0];\n    let smallestEvenIndex = evensIndex[0];\n    for(let i = 0;\
    \ i < evens.length; i++){\n        if(evens[i] < smallestEven){\n            smallestEven\
    \ = evens[i];\n            smallestEvenIndex = evensIndex[i];\n        }\n   \
    \ }\n    return [smallestEven, smallestEvenIndex];\n}", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = evens.length > 0 ? Math.min(...evens) : null;\n\
    \    let index = arr.indexOf(min);\n    return min === null ? [] : [min, index];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evenArr = [];\n    let evenIndex = [];\n    let\
    \ result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            evenArr.push(arr[i]);\n            evenIndex.push(i);\n\
    \        }\n    }\n    if(evenArr.length === 0){\n        return [];\n    }\n\
    \    let min = Math.min(...evenArr);\n    let minIndex = evenIndex[evenArr.indexOf(min)];\n\
    \    result.push(min, minIndex);\n    return result;\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    if (min === Infinity)\
    \ {\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evenArr = arr.filter(x => x % 2 === 0);\n    if(evenArr.length === 0){\n\
    \        return [];\n    }\n    let min = Math.min(...evenArr);\n    let minIndex\
    \ = arr.indexOf(min);\n    return [min, minIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallestEven = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a,b) => a < b ? a : b);\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(e => e % 2 === 0);\n    let smallest = evens.length > 0 ? evens.reduce((a,\
    \ b) => Math.min(a, b)) : 0;\n    let index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    if (evens.length\
    \ === 0) {\n        return [];\n    } else {\n        return [min, index];\n \
    \   }\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  \
    \  let evens = arr.filter(x => x % 2 === 0);\n    let minEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(minEven);\n    return evens.length === 0 ? [] : [minEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let smallest = evens.reduce((a, b) => Math.min(a, b));\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    if(arr.length === 0){\n        return [];\n\
    \    }\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n        }\n    }\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallest = evens[0];\n\
    \    let index = 0;\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < smallest){\n            smallest = evens[i];\n            index = i;\n   \
    \     }\n    }\n    return [smallest, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return min ? [min, index] : [];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let\
    \ smallest = evens.reduce((a,b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let even = arr.filter(x => x % 2 ===\
    \ 0);\n    if(even.length === 0) return [];\n    let min = Math.min(...even);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let smallest = evens.reduce((a,b) => a < b ? a : b);\n    let\
    \ index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallest\
    \ = evens.length > 0 ? evens.reduce((a,b) => a < b ? a : b) : null;\n    let index\
    \ = smallest ? arr.indexOf(smallest) : null;\n    return smallest ? [smallest,\
    \ index] : [];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n   \
    \ let minEven = Math.min(...evens);\n    let minEvenIndex = arr.indexOf(minEven);\n\
    \    return evens.length ? [minEven, minEvenIndex] : [];\n}\n", "    let evens\
    \ = arr.filter(e => e % 2 === 0);\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) {\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return min === Infinity ? [] : [min, index];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallestEven\
    \ = evens.reduce((acc, curr) => {\n        if(curr < acc) return curr;\n     \
    \   return acc;\n    });\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,b) =>\
    \ Math.min(a,b));\n  let index = arr.indexOf(smallest);\n  return [smallest, index];\n\
    }\n", "    let evenArr = arr.filter(x => x % 2 === 0);\n    let minEven = Math.min(...evenArr);\n\
    \    let index = arr.indexOf(minEven);\n    return evenArr.length === 0 ? [] :\
    \ [minEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  if (evens.length === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let minEven = Math.min(...evens);\n   \
    \ let index = arr.indexOf(minEven);\n    return evens.length === 0 ? [] : [minEven,\
    \ index];\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0){\n   \
    \     return [];\n    }\n    let smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    var evens = arr.filter(function(x){\n        return x %\
    \ 2 === 0;\n    });\n    if(evens.length === 0){\n        return [];\n    }\n\
    \    var smallestEven = evens.reduce(function(a, b){\n        return Math.min(a,\
    \ b);\n    });\n    var index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return evens.length\
    \ > 0 ? [smallestEven, index] : [];\n}\n", "  if(arr.length === 0){\n    return\
    \ [];\n  }\n  let evens = arr.filter(num => num % 2 === 0);\n  let smallest =\
    \ evens.sort((a, b) => a - b)[0];\n  let index = arr.indexOf(smallest);\n  return\
    \ [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x =>\
    \ x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "  let evens = arr.filter(x => x %\
    \ 2 === 0);\n  let min = Math.min(...evens);\n  if (evens.length === 0) {\n  \
    \  return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    let smallest = evens.reduce((acc, x) => acc\
    \ < x ? acc : x);\n    let index = arr.indexOf(smallest);\n    return index ===\
    \ -1 ? [] : [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "  let evens = arr.filter(num => num\
    \ % 2 === 0);\n  let smallestEven = evens.length > 0 ? Math.min(...evens) : null;\n\
    \  let index = arr.indexOf(smallestEven);\n  return smallestEven === null ? []\
    \ : [smallestEven, index];\n}\n", "  let smallestEven = null;\n  let smallestEvenIndex\
    \ = null;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n\
    \      if(smallestEven === null){\n        smallestEven = arr[i];\n        smallestEvenIndex\
    \ = i;\n      }\n      if(arr[i] < smallestEven){\n        smallestEven = arr[i];\n\
    \        smallestEvenIndex = i;\n      }\n    }\n  }\n  if(smallestEven === null){\n\
    \    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n", "  let\
    \ evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n  let\
    \ index = arr.indexOf(min);\n  return evens.length === 0 ? [] : [min, index];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let smallest = evens.length\
    \ ? evens.reduce((a, b) => Math.min(a, b)) : null;\n  return smallest ? [smallest,\
    \ arr.indexOf(smallest)] : [];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ > 0 ? [min, index] : [];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if(evens.length === 0) return [];\n  let min = Math.min(...evens);\n  let index\
    \ = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    if(arr.length === 0){\n        return\
    \ [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evenArr\
    \ = arr.filter(num => num % 2 === 0);\n    if(evenArr.length === 0){\n       \
    \ return [];\n    }\n    let smallestEven = evenArr.reduce((a, b) => {\n     \
    \   return Math.min(a, b);\n    });\n    let smallestEvenIndex = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "   \
    \ let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallestEven = evens.length\
    \ > 0 ? evens.reduce((a, b) => a < b ? a : b) : null;\n    let smallestEvenIndex\
    \ = smallestEven ? arr.indexOf(smallestEven) : null;\n    return smallestEvenIndex\
    \ !== null ? [smallestEven, smallestEvenIndex] : [];\n}\n", "    let evenArr =\
    \ [];\n    let indexArr = [];\n    let evenIndexArr = [];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evenArr.push(arr[i]);\n            indexArr.push(i);\n        }\n  \
    \  }\n    if(evenArr.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = Math.min(...evenArr);\n    for(let i = 0; i < evenArr.length; i++){\n    \
    \    if(evenArr[i] === smallestEven){\n            evenIndexArr.push(indexArr[i]);\n\
    \        }\n    }\n    let smallestIndex = Math.min(...evenIndexArr);\n    result.push(smallestEven);\n\
    \    result.push(smallestIndex);\n    return result;\n}", "    let evens = arr.filter(num\
    \ => num % 2 === 0)\n    let smallestEven = Math.min(...evens)\n    let index\
    \ = arr.indexOf(smallestEven)\n    return evens.length === 0 ? [] : [smallestEven,\
    \ index]\n}\n", "  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i]\
    \ < smallestEven) {\n      smallestEven = arr[i];\n      smallestEvenIndex = i;\n\
    \    }\n  }\n  if (smallestEven === Infinity) {\n    return [];\n  }\n  return\
    \ [smallestEven, smallestEvenIndex];\n}\n", "  let evens = arr.filter(x => x %\
    \ 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "  let evens = arr.filter(num => num % 2\
    \ === 0);\n  if(evens.length === 0) return [];\n  let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "    let evens = [];\n    let evenIndex = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evenIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let smallest = evens[0];\n    let smallestIndex\
    \ = evenIndex[0];\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < smallest){\n            smallest = evens[i];\n            smallestIndex =\
    \ evenIndex[i];\n        }\n    }\n    return [smallest, smallestIndex];\n}\n",
  "    let evens = arr.filter(n => n % 2 === 0)\n    let min = Math.min(...evens)\n\
    \    let index = arr.indexOf(min)\n    return evens.length === 0 ? [] : [min,\
    \ index]\n}\n", "    let even = [];\n    let index = [];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n            index.push(i);\n        }\n    }\n \
    \   if(even.length === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n\
    \    let minIndex = index[even.indexOf(min)];\n    result.push(min);\n    result.push(minIndex);\n\
    \    return result;\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let smallest = evens.reduce((acc,\
    \ num) => num < acc ? num : acc);\n    return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0)\n    let min = evens.length ? Math.min(...evens)\
    \ : null\n    return min ? [min, arr.indexOf(min)] : []\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    if (evens.length === 0) {\n        return [];\n\
    \    } else {\n        return [min, index];\n    }\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "  let\
    \ evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n  if\
    \ (min === Infinity) {\n    return [];\n  }\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let smallestEven = Infinity;\n    let smallestEvenIndex\
    \ = Infinity;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0 && arr[i] < smallestEven){\n            smallestEven = arr[i];\n     \
    \       smallestEvenIndex = i;\n        }\n    }\n    if(smallestEven === Infinity){\n\
    \        return [];\n    }\n    return [smallestEven, smallestEvenIndex];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    let smallestEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallestEven);\n    return evens.length === 0 ? []\
    \ : [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0)\n\
    \    if (evens.length === 0) return []\n    let smallest = evens.reduce((a, b)\
    \ => a < b ? a : b)\n    let index = arr.indexOf(smallest)\n    return [smallest,\
    \ index]\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = [];\n    let evensIndex = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n    \
    \        evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = evens[0];\n    let smallestEvenIndex\
    \ = evensIndex[0];\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < smallestEven){\n            smallestEven = evens[i];\n            smallestEvenIndex\
    \ = evensIndex[i];\n        }\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr ? acc\
    \ : curr);\n    let index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven\
    \ = evens.sort((a, b) => a - b)[0];\n    let index = arr.indexOf(smallestEven);\n\
    \    return evens.length === 0 ? [] : [smallestEven, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallestEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n  \
    \  let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \   let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    let smallest = evens.reduce((a, b) => a < b ?\
    \ a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length === 0)\
    \ return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr ? acc\
    \ : curr);\n    let smallestIndex = arr.indexOf(smallest);\n    return [smallest,\
    \ smallestIndex];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n\
    \    let smallestEven = evens.length > 0 ? evens.sort((a, b) => a - b)[0] : null;\n\
    \    let index = arr.indexOf(smallestEven);\n    return smallestEven === null\
    \ ? [] : [smallestEven, index];\n}", "    let evens = arr.filter(num => num %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    if(evens.length ===\
    \ 0){\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0){\n\
    \    return [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(e => e % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    if (min === Infinity) return [];\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let index =\
    \ arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "  let\
    \ evens = arr.filter(x => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return smallestEven ? [smallestEven,\
    \ index] : [];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n   \
    \ if(evens.length === 0){\n        return [];\n    }\n    let smallest = evens.reduce((acc,\
    \ curr) => {\n        if(curr < acc){\n            return curr;\n        }\n \
    \       return acc;\n    });\n    let index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    let even = [];\n    let index = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(even[i] < min){\n            min =\
    \ even[i];\n            minIndex = i;\n        }\n    }\n    return [min, index[minIndex]];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let\
    \ index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "    var\
    \ evens = arr.filter(function(num){\n        return num % 2 === 0;\n    });\n\
    \    var smallestEven = evens.sort(function(a, b){\n        return a - b;\n  \
    \  })[0];\n    var index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(n => n % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallestEven\
    \ = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n    if (evens.length\
    \ === 0) {\n        return [];\n    } else {\n        return [smallestEven, index];\n\
    \    }\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(function(num){\n        return num % 2 === 0;\n    });\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce(function(a, b){\n        return Math.min(a, b);\n    });\n  \
    \  let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "  let evens = arr.filter(num => num % 2 === 0);\n  if (evens.length ===\
    \ 0) return [];\n  let smallestEven = evens.reduce((a, b) => a < b ? a : b);\n\
    \  return [smallestEven, arr.indexOf(smallestEven)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    if(min === Infinity){\n\
    \        return [];\n    }\n    return [min, arr.indexOf(min)];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n  return\
    \ [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(num => num % 2 ===\
    \ 0);\n    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n\
    \    return evens.length === 0 ? [] : [minEven, index];\n}\n", "  let evens =\
    \ arr.filter(x => x % 2 === 0);\n  let smallestEven = evens.sort((a, b) => a -\
    \ b)[0];\n  let smallestEvenIndex = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) {\n        return [];\n    }\n    let smallestEven\
    \ = evens.reduce((acc, curr) => {\n        return acc < curr ? acc : curr;\n \
    \   });\n    return [smallestEven, arr.indexOf(smallestEven)];\n}\n", "    let\
    \ evens = arr.filter(n => n % 2 === 0);\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    if(min === Infinity){\n        return [];\n    }\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evenArr = [];\n    let evenIndex = [];\n\
    \    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenArr.push(arr[i]);\n            evenIndex.push(i);\n\
    \        }\n    }\n    if(evenArr.length === 0){\n        return result;\n   \
    \ }\n    let smallestEven = Math.min(...evenArr);\n    let smallestEvenIndex =\
    \ evenIndex[evenArr.indexOf(smallestEven)];\n    result.push(smallestEven);\n\
    \    result.push(smallestEvenIndex);\n    return result;\n}\n", "  let evens =\
    \ arr.filter(num => num % 2 === 0);\n  if(evens.length === 0) return [];\n  let\
    \ smallest = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "  if(arr.length === 0){\n    return [];\n\
    \  }\n  let smallestEven = Infinity;\n  let smallestEvenIndex = Infinity;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n\
    \      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if(smallestEven\
    \ === Infinity){\n    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven\
    \ = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n    return\
    \ evens.length === 0 ? [] : [smallestEven, index];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    let smallestEven = evens.length > 0 ? evens.sort((a,\
    \ b) => a - b)[0] : null;\n    let smallestEvenIndex = smallestEven ? arr.indexOf(smallestEven)\
    \ : null;\n    return smallestEvenIndex !== null ? [smallestEven, smallestEvenIndex]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let smallestEven\
    \ = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let even = [];\n    let index = [];\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n      \
    \      even.push(arr[i]);\n            index.push(i);\n        }\n    }\n    if(even.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...even);\n    let\
    \ minIndex = index[even.indexOf(min)];\n    return [min, minIndex];\n}\n", " \
    \ let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n",
  "    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven = Math.min(...evens);\n\
    \    let index = arr.indexOf(smallestEven);\n    return evens.length === 0 ? []\
    \ : [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    let smallestEven = evens.length > 0\
    \ ? evens.sort((a, b) => a - b)[0] : null;\n    let index = arr.indexOf(smallestEven);\n\
    \    return smallestEven ? [smallestEven, index] : [];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let\
    \ smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(e => e % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length > 0 ? [min, index] : [];\n}\n", "  if(arr.length === 0){\n\
    \    return [];\n  }\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index =\
    \ arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    if(arr.length === 0) return [];\n\
    \    let evens = arr.filter(n => n % 2 === 0);\n    if(evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a,b) => Math.min(a,b));\n    let index\
    \ = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", "  let evens\
    \ = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a, b) => a < b ? a : b);\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    if(min === Infinity){\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(even[i] < min){\n            min =\
    \ even[i];\n            minIndex = i;\n        }\n    }\n    return [min, index[minIndex]];\n\
    }", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    let min\
    \ = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallest\
    \ = evens.reduce((a,b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "  let evens = arr.filter(x => x % 2 ===\
    \ 0);\n  if(evens.length === 0){\n    return [];\n  }\n  let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n  return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   let evenArr = arr.filter(num => num % 2 === 0);\n    let minEven = Math.min(...evenArr);\n\
    \    let minEvenIndex = arr.indexOf(minEven);\n    return evenArr.length === 0\
    \ ? [] : [minEven, minEvenIndex];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0)\n    let min = Math.min(...evens)\n    if (min === Infinity) return\
    \ []\n    let index = arr.indexOf(min)\n    return [min, index]\n}\n", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
