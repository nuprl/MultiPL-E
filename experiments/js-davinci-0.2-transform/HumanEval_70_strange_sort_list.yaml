name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    var result = [];\n    var min = Math.min.apply(null, lst);\n  \
    \  var max = Math.max.apply(null, lst);\n    var minIndex = lst.indexOf(min);\n\
    \    var maxIndex = lst.indexOf(max);\n    var minIndexes = [];\n    var maxIndexes\
    \ = [];\n    var minIndexes = lst.map(function(item, index){\n        if(item\
    \ === min){\n            return index;\n        }\n    });\n    var maxIndexes\
    \ = lst.map(function(item, index){\n        if(item === max){\n            return\
    \ index;\n        }\n    });\n    var minIndexes = minIndexes.filter(function(item){\n\
    \        return item !== undefined;\n    });\n    var maxIndexes = maxIndexes.filter(function(item){\n\
    \        return item !== undefined;\n    });\n    var minIndexes = minIndexes.reverse();\n\
    \    var maxIndexes = maxIndexes.reverse();\n    var minIndexesLength = minIndexes.length;\n\
    \    var maxIndexesLength = maxIndexes.length;\n    var minIndexesLengthHalf =\
    \ Math.floor(minIndexesLength/2);\n    var maxIndexesLengthHalf = Math.floor(maxIndexesLength/2);\n\
    \    var minIndexesLengthHalf = minIndexesLength%2 === 0 ? minIndexesLengthHalf\
    \ : minIndexesLengthHalf+1;\n    var maxIndexesLengthHalf = maxIndexesLength%2\
    \ === 0 ? maxIndexesLengthHalf : maxIndexesLengthHalf+1;\n    var minIndexesFirstHalf\
    \ = minIndexes.slice(0, minIndexesLengthHalf);\n    var minIndexesSecondHalf =\
    \ minIndexes.slice(minIndexesLengthHalf);\n    var maxIndexesFirstHalf = maxIndexes.slice(0,\
    \ maxIndexesLengthHalf);\n    var maxIndexesSecondHalf = maxIndexes.slice(maxIndexesLengthHalf);\n\
    \    var minIndexesFirstHalfLength = minIndexesFirstHalf.length;\n    var minIndexesSecondHalfLength\
    \ = minIndexesSecondHalf.length;\n    var maxIndexesFirstHalfLength = maxIndexesFirstHalf.length;",
  "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(lst.length\
    \ > 0){\n        if(i % 2 == 0){\n            new_lst.push(min);\n           \
    \ lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n    \
    \    }\n        else{\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if (lst.length == 0) {\n        return [];\n \
    \   }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var lst_copy\
    \ = lst.slice();\n    lst_copy.splice(min_index, 1);\n    lst_copy.splice(max_index\
    \ - 1, 1);\n    new_lst.push(min);\n    new_lst.push(max);\n    new_lst = new_lst.concat(strange_sort_list(lst_copy));\n\
    \    return new_lst;\n}\n", "    var new_lst = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var i = 0;\n    while (lst.length\
    \ > 0){\n        if (i % 2 == 0){\n            new_lst.push(min);\n          \
    \  lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null, lst);\n\
    \        }\n        else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return new_lst;\n}\n", "    if(lst.length === 0){\n        return\
    \ [];\n    }\n    var min = lst[0];\n    var max = lst[0];\n    var min_index\
    \ = 0;\n    var max_index = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] < min){\n            min = lst[i];\n            min_index = i;\n\
    \        }\n        if(lst[i] > max){\n            max = lst[i];\n           \
    \ max_index = i;\n        }\n    }\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n    var\
    \ max = Math.max(...lst);\n    var new_lst = [];\n    new_lst.push(min);\n   \
    \ new_lst.push(max);\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ != min && lst[i] != max){\n            new_lst.push(lst[i]);\n        }\n  \
    \  }\n    return new_lst;\n}\n", "    if (lst.length === 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var index = 0;\n    while (lst.length > 0){\n\
    \        if (index % 2 === 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else {\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        index++;\n \
    \   }\n    return result;\n}\n", "    if(lst.length == 0) return [];\n    var\
    \ min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var new_lst =\
    \ [];\n    var i = 0;\n    while(lst.length > 0){\n        if(i % 2 == 0){\n \
    \           new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min(...lst);\n        }\n        else{\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var result = [];\n    var i = 0;\n    while\
    \ (lst.length > 0){\n        if (i % 2 == 0){\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        else{\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var lst_sorted = lst.sort(function(a, b){return a-b});\n    var lst_strange\
    \ = [];\n    var lst_strange_index = 0;\n    var lst_sorted_index = 0;\n    var\
    \ lst_sorted_length = lst_sorted.length;\n    while (lst_sorted_index < lst_sorted_length)\
    \ {\n        lst_strange[lst_strange_index] = lst_sorted[lst_sorted_index];\n\
    \        lst_strange_index += 2;\n        lst_sorted_index += 1;\n    }\n    lst_sorted_index\
    \ = lst_sorted_length - 1;\n    lst_strange_index = 1;\n    while (lst_sorted_index\
    \ >= 0) {\n        lst_strange[lst_strange_index] = lst_sorted[lst_sorted_index];\n\
    \        lst_strange_index += 2;\n        lst_sorted_index -= 1;\n    }\n    return\
    \ lst_strange;\n}\n", "    if (lst.length === 0) return [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let lst1 = lst.filter(x => x !== min);\n\
    \    let lst2 = lst.filter(x => x !== max);\n    return [min, max, ...strange_sort_list(lst1),\
    \ ...strange_sort_list(lst2)];\n}\n", "    if(lst.length == 0) return [];\n  \
    \  var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var new_lst\
    \ = [];\n    var i = 0;\n    while(i < lst.length){\n        new_lst.push(min);\n\
    \        new_lst.push(max);\n        i++;\n    }\n    return new_lst;\n}\n", " \
    \   var sorted = lst.sort(function(a, b){return a-b});\n    var result = [];\n\
    \    var i = 0;\n    var j = sorted.length - 1;\n    while (i <= j){\n       \
    \ result.push(sorted[i]);\n        if (i != j){\n            result.push(sorted[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return result;\n}\n", "   \
    \ if(lst.length === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var minIndex = lst.indexOf(min);\n    var\
    \ maxIndex = lst.indexOf(max);\n    var newLst = [];\n    newLst.push(min);\n\
    \    newLst.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex,\
    \ 1);\n    return newLst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) return [];\n    var min = Math.min.apply(null, lst);\n   \
    \ var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (lst.length > 0){\n        if (i % 2 == 0){\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length === 0){\n        return [];\n\
    \    }\n    var min = lst[0];\n    var max = lst[0];\n    var min_index = 0;\n\
    \    var max_index = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n            min_index = i;\n        }\n\
    \        if(lst[i] > max){\n            max = lst[i];\n            max_index =\
    \ i;\n        }\n    }\n    var new_list = [];\n    new_list.push(min);\n    lst.splice(min_index,\
    \ 1);\n    while(lst.length > 0){\n        var min = lst[0];\n        var min_index\
    \ = 0;\n        var max = lst[0];\n        var max_index = 0;\n        for(var\
    \ i = 0; i < lst.length; i++){\n            if(lst[i] < min){\n              \
    \  min = lst[i];\n                min_index = i;\n            }\n            if(lst[i]\
    \ > max){\n                max = lst[i];\n                max_index = i;\n   \
    \         }\n        }\n        if(new_list.length % 2 === 0){\n            new_list.push(max);\n\
    \            lst.splice(max_index, 1);\n        }\n        else{\n           \
    \ new_list.push(min);\n            lst.splice(min_index, 1);\n        }\n    }\n\
    \    return new_list;\n}\n", "    if(lst.length == 0){\n        return lst;\n\
    \    }\n    lst.sort(function(a, b){return a-b});\n    var new_lst = [];\n   \
    \ var i = 0;\n    while(lst.length > 0){\n        new_lst.push(lst[i]);\n    \
    \    lst.splice(i, 1);\n        if(lst.length > 0){\n            new_lst.push(lst[lst.length\
    \ - 1]);\n            lst.splice(lst.length - 1, 1);\n        }\n    }\n    return\
    \ new_lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
