name: HumanEval_100_make_a_pile
language: js
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_a_pile;\n  assert.deepEqual(candidate(3),[3, 5, 7]);\n  assert.deepEqual(candidate(4),[4,\
  \ 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5, 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6,\
  \ 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8, 10, 12, 14, 16, 18,\
  \ 20, 22]);\n}\n\ntest();"
completions: ["    let result = [];\n    let i = 1;\n    while(n > 0){\n        result.push(n);\n\
    \        if(n % 2 == 0){\n            n = n + i;\n        }else{\n           \
    \ n = n + i + 1;\n        }\n        i += 2;\n    }\n    return result;\n}\n",
  "    let result = [];\n    for(let i = 0; i < n; i++){\n        result.push(n +\
    \ i * 2);\n    }\n    return result;\n}", "    let result = [n];\n    let next\
    \ = n % 2 === 0 ? n + 2 : n + 1;\n    while(next <= n * 2){\n        result.push(next);\n\
    \        next = next % 2 === 0 ? next + 2 : next + 1;\n    }\n    return result;\n\
    }\n", "    var result = [];\n    for(var i = 0; i < n; i++){\n        if(i ==\
    \ 0){\n            result.push(n);\n        }\n        else if(result[i-1] % 2\
    \ == 0){\n            result.push(result[i-1] + 2);\n        }\n        else{\n\
    \            result.push(result[i-1] + 1);\n        }\n    }\n    return result;\n\
    }\n", "    let result = [];\n    for(let i = 0; i < n; i++){\n        if(i ===\
    \ 0){\n            result.push(n);\n        }\n        else if(result[i-1] % 2\
    \ === 0){\n            result.push(result[i-1] + 2);\n        }\n        else{\n\
    \            result.push(result[i-1] + 1);\n        }\n    }\n    return result;\n\
    }\n", "    var arr = [];\n    var i = 0;\n    while(i < n){\n        if(i ===\
    \ 0){\n            arr.push(n);\n        }else if(arr[i-1] % 2 === 0){\n     \
    \       arr.push(arr[i-1] + 2);\n        }else{\n            arr.push(arr[i-1]\
    \ + 1);\n        }\n        i++;\n    }\n    return arr;\n}", "    var result\
    \ = [];\n    var i = 1;\n    while(i <= n){\n        result.push(n);\n       \
    \ if(n % 2 == 0){\n            n += 1;\n        }\n        else{\n           \
    \ n += 2;\n        }\n        i += 1;\n    }\n    return result;\n}", "    let\
    \ result = [n];\n    while(n > 1){\n        if(n % 2 === 0){\n            n =\
    \ n / 2;\n        }else{\n            n = (n - 1) / 2;\n        }\n        result.push(n);\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    let count = n;\n\
    \    while(count > 0){\n        result.push(n);\n        if(n % 2 === 0){\n  \
    \          n += 2;\n        } else {\n            n += 1;\n        }\n       \
    \ count -= 1;\n    }\n    return result;\n}\n", "    let result = [n];\n    for(let\
    \ i = 1; i < n; i++){\n        if(result[i-1] % 2 === 0){\n            result.push(result[i-1]\
    \ + 2);\n        } else {\n            result.push(result[i-1] + 1);\n       \
    \ }\n    }\n    return result;\n}\n", "    var arr = [];\n    for(var i = 0; i\
    \ < n; i++){\n        if(i == 0){\n            arr.push(n);\n        }\n     \
    \   else if(arr[i-1] % 2 == 0){\n            arr.push(arr[i-1] + 2);\n       \
    \ }\n        else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n  \
    \  return arr;\n}\n", "    var arr = [];\n    for(var i = 0; i < n; i++){\n  \
    \      if(i == 0){\n            arr.push(n);\n        }\n        else if(arr[i-1]\
    \ % 2 == 0){\n            arr.push(arr[i-1] + 2);\n        }\n        else{\n\
    \            arr.push(arr[i-1] + 1);\n        }\n    }\n    return arr;\n}\n",
  "    var result = [];\n    result.push(n);\n    while(n > 1){\n        if(n % 2\
    \ == 0){\n            n = n - 1;\n        }\n        else{\n            n = n\
    \ - 2;\n        }\n        result.push(n);\n    }\n    return result;\n}\n", " \
    \   var arr = [];\n    for(var i = 0; i < n; i++){\n        if(i === 0){\n   \
    \         arr.push(n);\n        }else if(i % 2 === 0){\n            arr.push(arr[i-1]\
    \ + 2);\n        }else{\n            arr.push(arr[i-1] + 1);\n        }\n    }\n\
    \    return arr;\n}", "    var result = [];\n    result.push(n);\n    for(var\
    \ i = 1; i < n; i++){\n        if(n % 2 === 0){\n            result.push(n + i);\n\
    \        }\n        else{\n            result.push(n + i + 1);\n        }\n  \
    \  }\n    return result;\n}\n", "    var result = [];\n    result.push(n);\n \
    \   for(var i = 1; i < n; i++){\n        if(n % 2 == 0){\n            result.push(n\
    \ + i * 2);\n        }else{\n            result.push(n + i * 2 - 1);\n       \
    \ }\n    }\n    return result;\n}\n", "    let result = [n];\n    while(n > 1){\n\
    \        if(n % 2 === 0){\n            n = n / 2;\n        }else{\n          \
    \  n = (n * 3) + 1;\n        }\n        result.push(n);\n    }\n    return result;\n\
    }", "    var arr = [n];\n    var i = 1;\n    while(i < n){\n        if(n % 2 ==\
    \ 0){\n            arr.push(n + i);\n        }\n        else{\n            arr.push(n\
    \ + i + 1);\n        }\n        i++;\n    }\n    return arr;\n}\n", "    let result\
    \ = [n];\n    while(n > 1){\n        if(n % 2 === 0){\n            n = n / 2;\n\
    \        } else {\n            n = (n - 1) / 2;\n        }\n        result.push(n);\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    let current = n;\n\
    \    while(current > 0){\n        result.push(current);\n        if(current %\
    \ 2 === 0){\n            current = current + 1;\n        } else {\n          \
    \  current = current + 2;\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
