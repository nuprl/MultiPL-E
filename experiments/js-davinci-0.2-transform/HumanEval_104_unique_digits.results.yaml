language: js
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let unique = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i].toString().split('');\n        let count = 0;\n        for(let j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var unique_list = [];\n    for (var i = 0; i < x.length; i++){\n        if\
    \ (x[i].toString().split('').every(function(item){\n            return item %\
    \ 2 != 0;\n        })){\n            unique_list.push(x[i]);\n        }\n    }\n\
    \    return unique_list.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var even = false;\n        for (var j = 0; j < z.length; j++){\n\
    \            if (z[j] % 2 == 0){\n                even = true;\n            }\n\
    \        }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let unique = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i].toString().split('');\n        let even = false;\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(!even){\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count += 1;\n            }\n \
    \       }\n        if (count == 0){\n            y.push(x[i]);\n        }\n  \
    \  }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let isUnique\
    \ = true;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(num);\n\
    \            }\n        }\n    }\n    for(var k = 0; k < x.length; k++){\n   \
    \     if(evenDigits.indexOf(x[k].toString()) === -1){\n            uniqueDigits.push(x[k]);\n\
    \        }\n    }\n    return uniqueDigits.sort(function(a, b){return a - b});\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i] %\
    \ 2 === 0){\n            even.push(x[i]);\n        }\n    }\n    return even;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1422\n]\n\
    \nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpyakktl20.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyakktl20.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1422 ],\n\
    \  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique\
    \ = true;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var s = x[i].toString();\n\
    \        var flag = true;\n        for (var j = 0; j < s.length; j++){\n     \
    \       if (s[j] % 2 == 0){\n                flag = false;\n                break;\n\
    \            }\n        }\n        if (flag){\n            y.push(x[i]);\n   \
    \     }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var even = 0;\n        for (var j = 0; j < z.length; j++){\n   \
    \         if (z[j] % 2 == 0){\n                even += 1;\n            }\n   \
    \     }\n        if (even == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        var count = 0;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              count++;\n            }\n        }\n        if(count == 0){\n \
    \           odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let isUnique\
    \ = true;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [2,4,6,8,0];\n    var unique_digits = [];\n    for (var\
    \ i = 0; i < x.length; i++){\n        var is_unique = true;\n        var num =\
    \ x[i].toString();\n        for (var j = 0; j < num.length; j++){\n          \
    \  if (even_digits.includes(parseInt(num[j]))){\n                is_unique = false;\n\
    \            }\n        }\n        if (is_unique){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var temp\
    \ = x[i].toString().split('');\n        var flag = true;\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   flag = false;\n                break;\n            }\n        }\n        if(flag){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString();\n        var count = 0;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                count++;\n       \
    \     }\n        }\n        if(count === 0){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString();\n        let count = 0;\n        for(let j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n            \
    \    count++;\n            }\n        }\n        if(count === 0){\n          \
    \  odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
