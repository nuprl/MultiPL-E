name: HumanEval_62_derivative
language: js
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n\
  \  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["    var result = [];\n    for(var i = 1; i < xs.length; i++){\n   \
    \     result.push(xs[i] * i);\n    }\n    return result;\n}\n", "    var result\
    \ = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] *\
    \ i);\n    }\n    return result;\n}\n", "    var result = [];\n    for(var i =\
    \ 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return\
    \ result;\n}\n", "    var result = [];\n    for(var i = 1; i < xs.length; i++){\n\
    \        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "    var new_xs\
    \ = [];\n    for(var i = 1; i < xs.length; i++){\n        new_xs.push(xs[i] *\
    \ i);\n    }\n    return new_xs;\n}\n", "  var result = [];\n  for (var i = 1;\
    \ i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n",
  "    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i]\
    \ * i);\n    }\n    return result;\n}\n", "    var result = [];\n    for(var i\
    \ = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return\
    \ result;\n}\n", "  var result = [];\n  for (var i = 1; i < xs.length; i++) {\n\
    \    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "    var result = [];\n\
    \    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n  \
    \  }\n    return result;\n}\n", "  var result = [];\n  for (var i = 1; i < xs.length;\
    \ i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "  var result\
    \ = [];\n  for (var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n\
    \  }\n  return result;\n}\n", "\tvar result = [];\n\tfor(var i = 1; i < xs.length;\
    \ i++){\n\t\tresult.push(xs[i] * i);\n\t}\n\treturn result;\n}\n", "    var result\
    \ = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] *\
    \ i);\n    }\n    return result;\n}\n", "  var result = [];\n  for (var i = 1;\
    \ i < xs.length; i++) {\n    result.push(xs[i] * i);\n  }\n  return result;\n\
    }\n", "  var result = [];\n  for (var i = 1; i < xs.length; i++) {\n    result.push(xs[i]\
    \ * i);\n  }\n  return result;\n}\n", "    var result = [];\n    for(var i = 1;\
    \ i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n\
    }\n", "    var result = [];\n    for(var i = 1; i < xs.length; i++){\n       \
    \ result.push(xs[i] * i);\n    }\n    return result;\n}\n", "    var result =\
    \ [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n\
    \    }\n    return result;\n}\n", "    var result = [];\n    for(var i = 1; i\
    \ < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
