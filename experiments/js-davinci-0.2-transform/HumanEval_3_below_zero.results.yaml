language: js
name: HumanEval_3_below_zero
results:
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    var balance = 0;\n    for(var i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n     \
    \   balance += operations[i];\n        if(balance < 0){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You're given a list of deposit and withdrawal operations on a bank account\
    \ that starts with\n// zero balance. Your task is to detect if at any point the\
    \ balance of account fallls below zero, and\n// at that point function should\
    \ return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n\
    // false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n\
    \  var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance\
    \ += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = below_zero;\n  assert.deepEqual(candidate([]),false);\n\
    \  assert.deepEqual(candidate([1, 2, -3, 1, 2, -3]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, -4, 5, 6]),true);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -4]),false);\n  assert.deepEqual(candidate([1, -1, 2, -2, 5, -5, 4, -5]),true);\n\
    \  assert.deepEqual(candidate([1, -2, 2, -2, 5, -5, 4, -4]),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
