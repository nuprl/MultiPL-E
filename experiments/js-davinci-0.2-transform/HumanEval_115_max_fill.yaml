name: HumanEval_115_max_fill
language: js
prompt: "//You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n// and\
  \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
  \ the wells.\n// Output the number of times you need to lower the buckets.\n// Example\
  \ 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example\
  \ 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],\
  \ 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n//\
  \ Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n\
  // * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity\
  \ <= 10\nfunction max_fill(grid, capacity){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
  \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
  \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
  \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
  \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
completions: ["    // your code here\n}\n", "    let max_fill = 0;\n    let wells\
    \ = grid.length;\n    let well_length = grid[0].length;\n    let bucket = capacity;\n\
    \    let bucket_count = 0;\n    for(let i = 0; i < wells; i++){\n        for(let\
    \ j = 0; j < well_length; j++){\n            if(grid[i][j] === 1){\n         \
    \       bucket -= 1;\n                if(bucket === 0){\n                    bucket\
    \ = capacity;\n                    bucket_count += 1;\n                }\n   \
    \         }\n        }\n    }\n    return bucket_count;\n}\n", "    // your code\
    \ here\n}\n", "    // your code here\n}\n", "    let count = 0;\n    let wells\
    \ = [];\n    for(let i = 0; i < grid.length; i++){\n        wells.push(grid[i].reduce((acc,\
    \ curr) => acc + curr));\n    }\n    while(wells.length > 0){\n        let max\
    \ = Math.max(...wells);\n        let index = wells.indexOf(max);\n        if(max\
    \ > capacity){\n            wells[index] -= capacity;\n        } else {\n    \
    \        wells.splice(index, 1);\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                max = Math.max(max, j);\n \
    \           }\n        }\n    }\n    for(let i = 0; i < grid.length; i++){\n \
    \       for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                count += capacity;\n            }\n            if(j ==\
    \ max){\n                count -= capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n  \
    \  let col = grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n  \
    \              count++;\n            }\n        }\n        if(count > max){\n\
    \            max = count;\n        }\n        count = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    // your code here\n}\n", "    let count = 0;\n    let\
    \ max = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n    \
    \        sum += grid[i][j];\n        }\n        if(sum > max){\n            max\
    \ = sum;\n            max_index = i;\n        }\n    }\n    let bucket = capacity;\n\
    \    for(let i = 0; i < grid[max_index].length; i++){\n        if(grid[max_index][i]\
    \ === 1){\n            bucket--;\n            if(bucket === 0){\n            \
    \    count++;\n                bucket = capacity;\n            }\n        }\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n                grid[i][j] = 0;\n       \
    \         if(i > 0 && grid[i-1][j] === 1){\n                    grid[i-1][j] =\
    \ 0;\n                }\n                if(j > 0 && grid[i][j-1] === 1){\n  \
    \                  grid[i][j-1] = 0;\n                }\n                if(i\
    \ < grid.length - 1 && grid[i+1][j] === 1){\n                    grid[i+1][j]\
    \ = 0;\n                }\n                if(j < grid[i].length - 1 && grid[i][j+1]\
    \ === 1){\n                    grid[i][j+1] = 0;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n\
    \                count++;\n                let bucket = capacity;\n          \
    \      while(bucket > 0){\n                    if(i - 1 >= 0 && grid[i - 1][j]\
    \ === 1){\n                        grid[i - 1][j] = 0;\n                     \
    \   bucket--;\n                    }\n                    if(i + 1 < grid.length\
    \ && grid[i + 1][j] === 1){\n                        grid[i + 1][j] = 0;\n   \
    \                     bucket--;\n                    }\n                    if(j\
    \ - 1 >= 0 && grid[i][j - 1] === 1){\n                        grid[i][j - 1] =\
    \ 0;\n                        bucket--;\n                    }\n             \
    \       if(j + 1 < grid[i].length && grid[i][j + 1] === 1){\n                \
    \        grid[i][j + 1] = 0;\n                        bucket--;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let result = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n                if(bucket\
    \ > 0){\n                    bucket--;\n                    grid[i][j] = 0;\n\
    \                }else{\n                    bucket = capacity;\n            \
    \        result++;\n                    j--;\n                }\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n        \
    \        count++;\n                for(let k = i; k < grid.length; k++){\n   \
    \                 if(grid[k][j] === 1){\n                        grid[k][j] =\
    \ 0;\n                        count++;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\n", "  let count =\
    \ 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length;\
    \ j++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 0;\n        count++;\n\
    \        if (i > 0) {\n          grid[i - 1][j] = 0;\n        }\n        if (i\
    \ < grid.length - 1) {\n          grid[i + 1][j] = 0;\n        }\n        if (j\
    \ > 0) {\n          grid[i][j - 1] = 0;\n        }\n        if (j < grid[i].length\
    \ - 1) {\n          grid[i][j + 1] = 0;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n    let length\
    \ = grid[0].length;\n    let buckets = [];\n    for(let i = 0; i < wells; i++){\n\
    \        buckets.push(0);\n    }\n    for(let i = 0; i < length; i++){\n     \
    \   for(let j = 0; j < wells; j++){\n            if(grid[j][i] === 1){\n     \
    \           buckets[j]++;\n                if(buckets[j] > capacity){\n      \
    \              count++;\n                    buckets[j] = 0;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    let max_index = 0;\n    let max_row = 0;\n    let\
    \ max_col = 0;\n    let max_row_index = 0;\n    let max_col_index = 0;\n    let\
    \ max_row_count = 0;\n    let max_col_count = 0;\n    let max_row_index_count\
    \ = 0;\n    let max_col_index_count = 0;\n    let max_row_index_count_2 = 0;\n\
    \    let max_col_index_count_2 = 0;\n    let max_row_index_count_3 = 0;\n    let\
    \ max_col_index_count_3 = 0;\n    let max_row_index_count_4 = 0;\n    let max_col_index_count_4\
    \ = 0;\n    let max_row_index_count_5 = 0;\n    let max_col_index_count_5 = 0;\n\
    \    let max_row_index_count_6 = 0;\n    let max_col_index_count_6 = 0;\n    let\
    \ max_row_index_count_7 = 0;\n    let max_col_index_count_7 = 0;\n    let max_row_index_count_8\
    \ = 0;\n    let max_col_index_count_8 = 0;\n    let max_row_index_count_9 = 0;\n\
    \    let max_col_index_count_9 = 0;\n    let max_row_index_count_10 = 0;\n   \
    \ let max_col_index_count_10 = 0;\n    let max_row_index_count_11 = 0;\n    let\
    \ max_col_index_count_11 = 0;\n    let max_row_index_count_12 = 0;\n    let max_col_index_count_12\
    \ = 0;\n    let max_row_index_count_13 = 0;\n    let max_col_index_count_13 =\
    \ 0;\n    let max_row_index_count_14 = 0;\n    let max_col_index_count_14 = 0;\n\
    \    let max_row_index_count_", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let bucket = capacity;\n    for(let i = 0;\
    \ i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                if(bucket > 0){\n                    bucket--;\n  \
    \                  grid[i][j] = 0;\n                }else{\n                 \
    \   bucket = capacity;\n                    count++;\n                    bucket--;\n\
    \                    grid[i][j] = 0;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\n", "    let total = 0;\n    let bucket = capacity;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                if(bucket === 0){\n\
    \                    bucket = capacity;\n                    total++;\n      \
    \          }\n                bucket--;\n            }\n        }\n    }\n   \
    \ return total;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    let row = grid.length;\n    let col = grid[0].length;\n    let count\
    \ = 0;\n    let i = 0;\n    let j = 0;\n    while(i < row){\n        if(grid[i][j]\
    \ == 1){\n            grid[i][j] = 0;\n            count++;\n            if(j\
    \ == col - 1){\n                i++;\n                j = 0;\n            }\n\
    \            else{\n                j++;\n            }\n        }\n        else{\n\
    \            if(j == col - 1){\n                i++;\n                j = 0;\n\
    \            }\n            else{\n                j++;\n            }\n     \
    \   }\n    }\n    return count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n\
    \    let width = grid[0].length;\n    let buckets = [];\n    for(let i = 0; i\
    \ < wells; i++){\n        buckets.push(0);\n    }\n    for(let i = 0; i < wells;\
    \ i++){\n        for(let j = 0; j < width; j++){\n            if(grid[i][j] ===\
    \ 1){\n                buckets[i]++;\n            }\n        }\n    }\n    while(buckets.some(bucket\
    \ => bucket > 0)){\n        for(let i = 0; i < wells; i++){\n            if(buckets[i]\
    \ > 0){\n                buckets[i] -= capacity;\n                if(buckets[i]\
    \ < 0){\n                    buckets[i] = 0;\n                }\n            }\n\
    \        }\n        count++;\n    }\n    return count;\n}\n", "    // your code\
    \ here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let total = 0;\n    let row = grid.length;\n   \
    \ let col = grid[0].length;\n    let count = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  total = max * capacity;\n    return total;\n}\n", "    let count = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                grid[i][j] = 0;\n \
    \               count++;\n                if(i > 0 && grid[i-1][j] == 1){\n  \
    \                  grid[i-1][j] = 0;\n                    count++;\n         \
    \       }\n                if(j > 0 && grid[i][j-1] == 1){\n                 \
    \   grid[i][j-1] = 0;\n                    count++;\n                }\n     \
    \           if(i < grid.length - 1 && grid[i+1][j] == 1){\n                  \
    \  grid[i+1][j] = 0;\n                    count++;\n                }\n      \
    \          if(j < grid[i].length - 1 && grid[i][j+1] == 1){\n                \
    \    grid[i][j+1] = 0;\n                    count++;\n                }\n    \
    \        }\n        }\n    }\n    return count;\n}\n", "  let count = 0;\n  let\
    \ wells = grid.length;\n  let length = grid[0].length;\n  for(let i = 0; i < wells;\
    \ i++){\n    for(let j = 0; j < length; j++){\n      if(grid[i][j] === 1){\n \
    \       count += capacity;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return\
    \ count;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let col =\
    \ grid[0].length;\n    let max = 0;\n    let max_row = 0;\n    let max_col = 0;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] > max){\n                max = grid[i][j];\n        \
    \        max_row = i;\n                max_col = j;\n            }\n        }\n\
    \    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n\
    \            if(grid[i][j] < max){\n                count += max - grid[i][j];\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n            max_index = i;\n        }\n \
    \       count = 0;\n    }\n    return max_index * capacity;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          grid[i][j] = 0;\n                count++;\n                let bucket\
    \ = capacity;\n                while(bucket > 0){\n                    if(i >\
    \ 0 && grid[i-1][j] === 1){\n                        grid[i-1][j] = 0;\n     \
    \                   bucket--;\n                    }\n                    if(i\
    \ < grid.length - 1 && grid[i+1][j] === 1){\n                        grid[i+1][j]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(j > 0 && grid[i][j-1] === 1){\n                        grid[i][j-1]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(j < grid[i].length - 1 && grid[i][j+1] === 1){\n                \
    \        grid[i][j+1] = 0;\n                        bucket--;\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row;\
    \ i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n\
    \                max = Math.max(max, j);\n            }\n        }\n    }\n  \
    \  for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n    \
    \        if(grid[i][j] == 1){\n                count += capacity;\n          \
    \  }\n            if(j == max){\n                count += capacity;\n        \
    \    }\n        }\n    }\n    return count;\n}\n", "    // your code here\n}\n",
  "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                max = Math.max(max, j);\n            }\n        }\n   \
    \ }\n    for(let i = 0; i < grid.length; i++){\n        let bucket = capacity;\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                if(bucket > 0){\n                    bucket--;\n      \
    \              grid[i][j] = 0;\n                }\n                else{\n   \
    \                 count++;\n                    bucket = capacity - 1;\n     \
    \               grid[i][j] = 0;\n                }\n            }\n        }\n\
    \        if(bucket < capacity){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                let bucket = capacity;\n                while(bucket\
    \ > 0){\n                    grid[i][j] = 0;\n                    bucket--;\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    // your code\
    \ here\n    let sum = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          sum += capacity;\n            }\n        }\n    }\n    return sum;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                count++;\n                grid[i][j]\
    \ = 0;\n                if(i > 0 && grid[i-1][j] === 1){\n                   \
    \ grid[i-1][j] = 0;\n                }\n                if(j > 0 && grid[i][j-1]\
    \ === 1){\n                    grid[i][j-1] = 0;\n                }\n        \
    \        if(i < grid.length - 1 && grid[i+1][j] === 1){\n                    grid[i+1][j]\
    \ = 0;\n                }\n                if(j < grid[i].length - 1 && grid[i][j+1]\
    \ === 1){\n                    grid[i][j+1] = 0;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let\
    \ max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  count++;\n            }\n        }\n        if(count > max){\n            max\
    \ = count;\n        }\n        count = 0;\n    }\n    return max * capacity;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count++;\n                let row = i;\n                while(row\
    \ >= 0){\n                    if(grid[row][j] === 1){\n                      \
    \  grid[row][j] = 0;\n                    }\n                    row--;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    let max = 0;\n    let max_index = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n \
    \           if(grid[i][j] === 1){\n                count++;\n            }\n \
    \       }\n        if(count > max){\n            max = count;\n            max_index\
    \ = i;\n        }\n        count = 0;\n    }\n    return max * capacity;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                max = Math.max(max, j);\n            }\n        }\n\
    \    }\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += capacity;\n            }\n            if(j === max){\n                count\
    \ -= capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          grid[i][j] = 0;\n                count++;\n                if(i + 1\
    \ < grid.length && grid[i + 1][j] === 1){\n                    grid[i + 1][j]\
    \ = 0;\n                    count++;\n                }\n                if(j\
    \ + 1 < grid[i].length && grid[i][j + 1] === 1){\n                    grid[i][j\
    \ + 1] = 0;\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let row =\
    \ grid.length;\n    let col = grid[0].length;\n    let water = 0;\n    for(let\
    \ i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                water += 1;\n            }\n        }\n    }\n    if(water\
    \ === 0){\n        return 0;\n    }\n    let bucket = capacity;\n    let bucket_count\
    \ = 0;\n    while(bucket_count < water){\n        for(let i = 0; i < row; i++){\n\
    \            for(let j = 0; j < col; j++){\n                if(grid[i][j] ===\
    \ 1){\n                    grid[i][j] = 0;\n                    bucket_count +=\
    \ 1;\n                    bucket -= 1;\n                    if(bucket === 0){\n\
    \                        count += 1;\n                        bucket = capacity;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    // your code here\n}\n", "    let count = 0;\n \
    \   for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n\
    \                count++;\n                let bucket = capacity;\n          \
    \      while(bucket > 0){\n                    if(i - 1 >= 0 && grid[i - 1][j]\
    \ === 1){\n                        grid[i - 1][j] = 0;\n                     \
    \   bucket--;\n                    }\n                    if(i + 1 < grid.length\
    \ && grid[i + 1][j] === 1){\n                        grid[i + 1][j] = 0;\n   \
    \                     bucket--;\n                    }\n                    if(j\
    \ - 1 >= 0 && grid[i][j - 1] === 1){\n                        grid[i][j - 1] =\
    \ 0;\n                        bucket--;\n                    }\n             \
    \       if(j + 1 < grid[i].length && grid[i][j + 1] === 1){\n                \
    \        grid[i][j + 1] = 0;\n                        bucket--;\n            \
    \        }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let bucket = capacity;\n    let count = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                if(bucket === 0){\n           \
    \         bucket = capacity;\n                    count++;\n                }\n\
    \                bucket--;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ let row = grid[i];\n        let row_count = 0;\n        for(let j = 0; j < row.length;\
    \ j++){\n            if(row[j] === 1){\n                row_count++;\n       \
    \     }\n        }\n        if(row_count > 0){\n            count += Math.ceil(row_count\
    \ / capacity);\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    let count = 0;\n    let max = 0;\n    let max_row = 0;\n    let max_col\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max){\n                max\
    \ = grid[i][j];\n                max_row = i;\n                max_col = j;\n\
    \            }\n        }\n    }\n    let max_well = grid[max_row][max_col];\n\
    \    let max_well_row = max_row;\n    let max_well_col = max_col;\n    let max_well_count\
    \ = 0;\n    while(max_well > 0){\n        max_well_count++;\n        max_well\
    \ -= capacity;\n    }\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(i === max_well_row && j ===\
    \ max_well_col){\n                count += max_well_count;\n            }\n  \
    \          else{\n                let well = grid[i][j];\n                let\
    \ well_count = 0;\n                while(well > 0){\n                    well_count++;\n\
    \                    well -= capacity;\n                }\n                count\
    \ += well_count;\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let wells = [];\n    for(let i = 0; i < row; i++){\n        wells.push([]);\n\
    \        for(let j = 0; j < col; j++){\n            wells[i].push(0);\n      \
    \  }\n    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col;\
    \ j++){\n            if(grid[i][j] === 1){\n                wells[i][j] = capacity;\n\
    \            }\n        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(wells[i][j] > 0){\n                count++;\n\
    \                let bucket = wells[i][j];\n                wells[i][j] = 0;\n\
    \                let k = i;\n                while(k < row && bucket > 0){\n \
    \                   if(wells[k][j] > 0){\n                        let diff = bucket\
    \ - wells[k][j];\n                        if(diff > 0){\n                    \
    \        bucket = diff;\n                            wells[k][j] = 0;\n      \
    \                  }\n                        else{\n                        \
    \    wells[k][j] = Math.abs(diff);\n                            bucket = 0;\n\
    \                        }\n                    }\n                    k++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "  let count = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let\
    \ max = 0;\n  for(let i = 0; i < row; i++){\n    for(let j = 0; j < col; j++){\n\
    \      if(grid[i][j] > max){\n        max = grid[i][j];\n      }\n    }\n  }\n\
    \  for(let i = 0; i < row; i++){\n    for(let j = 0; j < col; j++){\n      if(grid[i][j]\
    \ < max){\n        grid[i][j] = max;\n        count++;\n      }\n    }\n  }\n\
    \  return count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let sum = 0;\n    \
    \    for(let j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n\
    \        }\n        if(sum > max){\n            max = sum;\n            max_index\
    \ = i;\n        }\n    }\n    for(let i = 0; i < grid.length; i++){\n        if(i\
    \ != max_index){\n            for(let j = 0; j < grid[i].length; j++){\n     \
    \           if(grid[i][j] == 1){\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let temp = [];\n    for(let i = 0; i < row; i++){\n        temp.push(0);\n\
    \    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n\
    \            if(grid[i][j] === 1){\n                if(temp[j] === 0){\n     \
    \               count++;\n                    temp[j] = capacity;\n          \
    \      }\n                temp[j]--;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    // your code here\n    let count = 0;\n    let max = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count++;\n       \
    \     }\n        }\n        if(count > max){\n            max = count;\n     \
    \   }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        for(let j = 0; j < row.length; j++){\n            if(row[j] === 1){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    // your code here\n}\n", "    // your code here\n}\n", " \
    \   let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max = 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] == 1){\n                max = Math.max(max,\
    \ j);\n            }\n        }\n    }\n    for(let i = 0; i < row; i++){\n  \
    \      for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n     \
    \           count += 1;\n            }\n            if(j == max){\n          \
    \      count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    let\
    \ max_index = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        count++;\n            }\n        }\n        if(count > max){\n      \
    \      max = count;\n            max_index = i;\n        }\n        count = 0;\n\
    \    }\n    let max_bucket = Math.floor(max / capacity);\n    if(max % capacity\
    \ !== 0){\n        max_bucket++;\n    }\n    return max_bucket;\n}\n", "    let\
    \ count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n  \
    \      for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max){\n            max = count;\n        }\n        count = 0;\n    }\n    return\
    \ max * capacity;\n}", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n                grid[i][j] = 0;\n       \
    \         if(i + 1 < grid.length){\n                    grid[i + 1][j] = 0;\n\
    \                }\n                if(j + 1 < grid[i].length){\n            \
    \        grid[i][j + 1] = 0;\n                }\n            }\n        }\n  \
    \  }\n    return count;\n}\n", "    let total = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let max = 0;\n    let count = 0;\n    for(let\
    \ i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            total\
    \ += grid[i][j];\n        }\n        if(total > max){\n            max = total;\n\
    \        }\n        total = 0;\n    }\n    if(max > capacity){\n        count\
    \ = max - capacity;\n    }\n    return count;\n}\n", "    let count = 0;\n   \
    \ let max_row = 0;\n    let max_col = 0;\n    let max_row_count = 0;\n    let\
    \ max_col_count = 0;\n    let max_row_index = 0;\n    let max_col_index = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count++;\n       \
    \     }\n        }\n        if(count > max_row){\n            max_row = count;\n\
    \            max_row_index = i;\n        }\n        count = 0;\n    }\n    for(let\
    \ i = 0; i < grid[0].length; i++){\n        for(let j = 0; j < grid.length; j++){\n\
    \            if(grid[j][i] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max_col){\n            max_col = count;\n     \
    \       max_col_index = i;\n        }\n        count = 0;\n    }\n    for(let\
    \ i = 0; i < grid.length; i++){\n        if(grid[i][max_col_index] === 1){\n \
    \           max_col_count++;\n        }\n    }\n    for(let i = 0; i < grid[0].length;\
    \ i++){\n        if(grid[max_row_index][i] === 1){\n            max_row_count++;\n\
    \        }\n    }\n    if(max_row_count > max_col_count){\n        return max_row_count\
    \ * capacity;\n    }\n    else{\n        return max_col_count * capacity;\n  \
    \  }\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n \
    \       for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n   \
    \ let col = grid[0].length;\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n                grid[i][j]\
    \ = 0;\n                count++;\n                for(let k = i; k < row; k++){\n\
    \                    for(let l = j; l < col; l++){\n                        if(grid[k][l]\
    \ == 1){\n                            grid[k][l] = 0;\n                      \
    \      count++;\n                        }\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let wells = grid.length;\n    let units = grid[0].length;\n    let\
    \ buckets = [];\n    for(let i = 0; i < wells; i++){\n        buckets.push(0);\n\
    \    }\n    for(let i = 0; i < units; i++){\n        for(let j = 0; j < wells;\
    \ j++){\n            if(grid[j][i] === 1){\n                buckets[j]++;\n  \
    \              if(buckets[j] === capacity){\n                    buckets[j] =\
    \ 0;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n", "    let times = 0;\n    let max_fill = 0;\n\
    \    let max_fill_index = 0;\n    let max_fill_row = 0;\n    let max_fill_col\
    \ = 0;\n    let max_fill_row_index = 0;\n    let max_fill_col_index = 0;\n   \
    \ let max_fill_row_index_2 = 0;\n    let max_fill_col_index_2 = 0;\n    let max_fill_row_index_3\
    \ = 0;\n    let max_fill_col_index_3 = 0;\n    let max_fill_row_index_4 = 0;\n\
    \    let max_fill_col_index_4 = 0;\n    let max_fill_row_index_5 = 0;\n    let\
    \ max_fill_col_index_5 = 0;\n    let max_fill_row_index_6 = 0;\n    let max_fill_col_index_6\
    \ = 0;\n    let max_fill_row_index_7 = 0;\n    let max_fill_col_index_7 = 0;\n\
    \    let max_fill_row_index_8 = 0;\n    let max_fill_col_index_8 = 0;\n    let\
    \ max_fill_row_index_9 = 0;\n    let max_fill_col_index_9 = 0;\n    let max_fill_row_index_10\
    \ = 0;\n    let max_fill_col_index_10 = 0;\n    let max_fill_row_index_11 = 0;\n\
    \    let max_fill_col_index_11 = 0;\n    let max_fill_row_index_12 = 0;\n    let\
    \ max_fill_col_index_12 = 0;\n    let max_fill_row_index_13 = 0;\n    let max_fill_col_index_13\
    \ = 0;\n    let max_fill_row_index_14 = 0;\n    let max_fill_col_index_14 = 0;\n\
    \    let max_fill_row_index_15 = 0;\n    let max_fill_col_index_15 = 0;\n    let\
    \ max_fill_row_index_16 = 0;\n   ", "    let count = 0;\n    let wells = [];\n\
    \    for(let i = 0; i < grid.length; i++){\n        wells.push(grid[i].reduce((a,\
    \ b) => a + b));\n    }\n    while(wells.length > 0){\n        let max = wells.reduce((a,\
    \ b) => Math.max(a, b));\n        if(max > capacity){\n            count += capacity;\n\
    \            for(let i = 0; i < wells.length; i++){\n                wells[i]\
    \ -= capacity;\n            }\n        } else {\n            count += max;\n \
    \           for(let i = 0; i < wells.length; i++){\n                wells[i] -=\
    \ max;\n            }\n        }\n        wells = wells.filter(x => x > 0);\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let i = 0;\n    let j = 0;\n    let temp =\
    \ 0;\n    while(i < row){\n        j = 0;\n        while(j < col){\n         \
    \   if(grid[i][j] === 1){\n                temp = capacity;\n                while(temp\
    \ > 0){\n                    if(i === 0){\n                        grid[i][j]\
    \ = 0;\n                        count++;\n                        temp--;\n  \
    \                  }\n                    else if(grid[i-1][j] === 0){\n     \
    \                   grid[i][j] = 0;\n                        count++;\n      \
    \                  temp--;\n                    }\n                    else{\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            j++;\n        }\n        i++;\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    let max_index = 0;\n    let max_row\
    \ = 0;\n    let max_col = 0;\n    let max_row_index = 0;\n    let max_col_index\
    \ = 0;\n    let row_count = 0;\n    let col_count = 0;\n    let row_index = 0;\n\
    \    let col_index = 0;\n    let row_sum = 0;\n    let col_sum = 0;\n    let row_max\
    \ = 0;\n    let col_max = 0;\n    let row_max_index = 0;\n    let col_max_index\
    \ = 0;\n    let row_max_row = 0;\n    let row_max_col = 0;\n    let col_max_row\
    \ = 0;\n    let col_max_col = 0;\n    let row_max_row_index = 0;\n    let row_max_col_index\
    \ = 0;\n    let col_max_row_index = 0;\n    let col_max_col_index = 0;\n    let\
    \ row_max_row_count = 0;\n    let row_max_col_count = 0;\n    let col_max_row_count\
    \ = 0;\n    let col_max_col_count = 0;\n    let row_max_row_sum = 0;\n    let\
    \ row_max_col_sum = 0;\n    let col_max_row_sum = 0;\n    let col_max_col_sum\
    \ = 0;\n    let row_max_row_max = 0;\n    let row_max_col_max = 0;\n    let col_max_row_max\
    \ = 0;\n    let col_max_col_max = 0;\n    let row_max_row_max_index = 0;\n   \
    \ let row_max_col_max_index = 0;\n    let col_max_row_max_index = 0;\n    let\
    \ col_max_col_max_index = 0;\n    let row_max_row_max_row = 0;\n    let row_max_col_max_row\
    \ = 0;\n    let col_max_row_max_row =", "    let num_of_buckets = 0;\n    let\
    \ row_length = grid[0].length;\n    let col_length = grid.length;\n    let row_index\
    \ = 0;\n    let col_index = 0;\n    let row_sum = 0;\n    let col_sum = 0;\n \
    \   let row_buckets = 0;\n    let col_buckets = 0;\n    let row_remainder = 0;\n\
    \    let col_remainder = 0;\n    let row_bucket_count = 0;\n    let col_bucket_count\
    \ = 0;\n    let row_bucket_remainder = 0;\n    let col_bucket_remainder = 0;\n\
    \    let row_bucket_count_remainder = 0;\n    let col_bucket_count_remainder =\
    \ 0;\n    let row_bucket_count_remainder_buckets = 0;\n    let col_bucket_count_remainder_buckets\
    \ = 0;\n    let row_bucket_count_remainder_buckets_remainder = 0;\n    let col_bucket_count_remainder_buckets_remainder\
    \ = 0;\n    let row_bucket_count_remainder_buckets_remainder_buckets = 0;\n  \
    \  let col_bucket_count_remainder_buckets_remainder_buckets = 0;\n    let row_bucket_count_remainder_buckets_remainder_buckets_remainder\
    \ = 0;\n    let col_bucket_count_remainder_buckets_remainder_buckets_remainder\
    \ = 0;\n    let row_bucket_count_remainder_buckets_remainder_buckets_remainder_buckets\
    \ = 0;\n    let col_bucket_count_remainder_buckets_remainder_buckets_remainder_buckets\
    \ = 0;\n    let row_bucket_count_remainder_buckets_remainder_buckets_remainder_buckets_remainder\
    \ = 0;\n    let col_bucket_count_remainder_buck", "    // your code here\n   \
    \ let count = 0;\n    let max = 0;\n    let row = grid.length;\n    let col =\
    \ grid[0].length;\n    let bucket = capacity;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n  \
    \              if(bucket === 0){\n                    count++;\n             \
    \       bucket = capacity;\n                }\n                bucket--;\n   \
    \         }\n        }\n        if(bucket !== capacity){\n            count++;\n\
    \            bucket = capacity;\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                grid[i][j] = 0;\n           \
    \     count++;\n                let bucket = capacity;\n                while(bucket\
    \ > 0){\n                    if(i > 0 && grid[i-1][j] == 1){\n               \
    \         grid[i-1][j] = 0;\n                        bucket--;\n             \
    \       }\n                    if(i < row-1 && grid[i+1][j] == 1){\n         \
    \               grid[i+1][j] = 0;\n                        bucket--;\n       \
    \             }\n                    if(j > 0 && grid[i][j-1] == 1){\n       \
    \                 grid[i][j-1] = 0;\n                        bucket--;\n     \
    \               }\n                    if(j < col-1 && grid[i][j+1] == 1){\n \
    \                       grid[i][j+1] = 0;\n                        bucket--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n   \
    \ let col = grid[0].length;\n    let wells = [];\n    for(let i = 0; i < row;\
    \ i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j] ===\
    \ 1){\n                wells.push([i, j]);\n            }\n        }\n    }\n\
    \    let max = 0;\n    while(wells.length > 0){\n        let bucket = capacity;\n\
    \        let well = wells.shift();\n        let i = well[0];\n        let j =\
    \ well[1];\n        if(grid[i][j] === 1){\n            grid[i][j] = 0;\n     \
    \       bucket--;\n        }\n        if(bucket > 0){\n            if(i > 0 &&\
    \ grid[i-1][j] === 1){\n                grid[i-1][j] = 0;\n                bucket--;\n\
    \            }\n            if(bucket > 0){\n                if(i < row-1 && grid[i+1][j]\
    \ === 1){\n                    grid[i+1][j] = 0;\n                    bucket--;\n\
    \                }\n                if(bucket > 0){\n                    if(j\
    \ > 0 && grid[i][j-1] === 1){\n                        grid[i][j-1] = 0;\n   \
    \                     bucket--;\n                    }\n                    if(bucket\
    \ > 0){\n                        if(j < col-1 && grid[i][j+1] === 1){\n      \
    \                      grid[i][j+1] = 0;\n                            bucket--;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        count++;\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let\
    \ bucket = capacity;\n    for(let i = 0; i < row; i++){\n        for(let j = 0;\
    \ j < col; j++){\n            if(grid[i][j] === 1){\n                if(bucket\
    \ > 0){\n                    bucket--;\n                    grid[i][j] = 0;\n\
    \                }\n                else{\n                    bucket = capacity;\n\
    \                    count++;\n                    j--;\n                }\n \
    \           }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n        if(count > max){\n     \
    \       max = count;\n        }\n        count = 0;\n    }\n    return max * capacity;\n\
    }\n", "    // your code here\n    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    let max_index_2 = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max){\n            max = count;\n            max_index = i;\n        }\n   \
    \     count = 0;\n    }\n    for(let i = 0; i < grid[max_index].length; i++){\n\
    \        if(grid[max_index][i] === 1){\n            count++;\n        }\n    }\n\
    \    if(count > max){\n        max = count;\n        max_index_2 = max_index;\n\
    \    }\n    return max * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count++;\n       \
    \     }\n        }\n        if(count > max){\n            max = count;\n     \
    \   }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         max += 1;\n            }\n        }\n    }\n    while(max > 0){\n  \
    \      for(let i = 0; i < grid.length; i++){\n            for(let j = 0; j < grid[i].length;\
    \ j++){\n                if(grid[i][j] == 1){\n                    grid[i][j]\
    \ = 0;\n                    max -= 1;\n                    count += 1;\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}\n", "   \
    \ let num_of_drops = 0;\n    let num_of_wells = grid.length;\n    let num_of_units\
    \ = grid[0].length;\n    let num_of_buckets = num_of_wells;\n    let buckets =\
    \ [];\n    for(let i = 0; i < num_of_buckets; i++){\n        buckets.push(capacity);\n\
    \    }\n    while(true){\n        let num_of_full_buckets = 0;\n        for(let\
    \ i = 0; i < num_of_buckets; i++){\n            if(buckets[i] === capacity){\n\
    \                num_of_full_buckets++;\n            }\n        }\n        if(num_of_full_buckets\
    \ === num_of_buckets){\n            break;\n        }\n        for(let i = 0;\
    \ i < num_of_buckets; i++){\n            if(buckets[i] === capacity){\n      \
    \          buckets[i] = 0;\n                num_of_drops++;\n            }\n \
    \           for(let j = 0; j < num_of_units; j++){\n                if(grid[i][j]\
    \ === 1){\n                    buckets[i]++;\n                    grid[i][j] =\
    \ 0;\n                }\n            }\n        }\n    }\n    return num_of_drops;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max * capacity;\n}\n", "    // your code here\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    let rows = grid.length;\n    let cols = grid[0].length;\n\
    \    let buckets = [];\n    for(let i = 0; i < rows; i++){\n        buckets.push(0);\n\
    \    }\n    for(let i = 0; i < cols; i++){\n        for(let j = 0; j < rows; j++){\n\
    \            if(grid[j][i] === 1){\n                buckets[j]++;\n          \
    \  }\n        }\n        let max = Math.max(...buckets);\n        if(max > capacity){\n\
    \            count += max - capacity;\n            for(let j = 0; j < rows; j++){\n\
    \                buckets[j] = capacity;\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let\
    \ col = grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n   \
    \             max = Math.max(max, j);\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n            if(j\
    \ == max){\n                count += capacity;\n            }\n        }\n   \
    \ }\n    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let sum = 0;\n    for(let i = 0; i < row;\
    \ i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n\
    \                sum += 1;\n            }\n        }\n    }\n    count = Math.ceil(sum\
    \ / capacity);\n    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let wells = [];\n    for(let i = 0; i < row;\
    \ i++){\n        wells.push([]);\n        for(let j = 0; j < col; j++){\n    \
    \        wells[i].push(grid[i][j]);\n        }\n    }\n    for(let i = 0; i <\
    \ row; i++){\n        for(let j = 0; j < col; j++){\n            if(wells[i][j]\
    \ === 1){\n                count++;\n                let bucket = capacity;\n\
    \                let k = i;\n                while(bucket > 0 && k < row){\n \
    \                   if(wells[k][j] === 1){\n                        wells[k][j]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         k++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                count++;\n            }\n     \
    \   }\n        if(count > max){\n            max = count;\n        }\n       \
    \ count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n \
    \   for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let total = row\
    \ * col;\n    let sum = 0;\n    let bucket = capacity;\n    let i = 0;\n    let\
    \ j = 0;\n    while(sum < total){\n        if(grid[i][j] === 1){\n           \
    \ if(bucket === 0){\n                bucket = capacity;\n                count++;\n\
    \            }\n            bucket--;\n            sum++;\n        }\n       \
    \ if(j === col - 1){\n            i++;\n            j = 0;\n        } else {\n\
    \            j++;\n        }\n    }\n    return count;\n}\n\nmodule.exports =\
    \ max_fill;", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                count += capacity;\n        \
    \        grid[i][j] = 0;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ let row = grid[i];\n        let rowSum = row.reduce((a, b) => a + b, 0);\n \
    \       if(rowSum > capacity){\n            count += capacity;\n        } else\
    \ {\n            count += rowSum;\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    let bucket = capacity;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                if(bucket > 0){\n                    bucket--;\n   \
    \                 grid[i][j] = 0;\n                }\n                else{\n\
    \                    bucket = capacity;\n                    count++;\n      \
    \              bucket--;\n                    grid[i][j] = 0;\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\n", "    var count\
    \ = 0;\n    var wells = grid.length;\n    var well_length = grid[0].length;\n\
    \    var buckets = [];\n    for(var i = 0; i < wells; i++){\n        buckets.push(0);\n\
    \    }\n    for(var i = 0; i < well_length; i++){\n        for(var j = 0; j <\
    \ wells; j++){\n            if(grid[j][i] == 1){\n                buckets[j]++;\n\
    \                if(buckets[j] > capacity){\n                    count++;\n  \
    \                  buckets[j] = 1;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n", "    // your code here\n}\n", "    let count\
    \ = 0;\n    let buckets = [];\n    for(let i = 0; i < grid.length; i++){\n   \
    \     buckets.push(0);\n    }\n    for(let i = 0; i < grid.length; i++){\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                buckets[i] += 1;\n            }\n        }\n    }\n   \
    \ for(let i = 0; i < buckets.length; i++){\n        if(buckets[i] > capacity){\n\
    \            count += buckets[i] - capacity;\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                let\
    \ bucket = capacity;\n                while(bucket > 0){\n                   \
    \ if(i > 0 && grid[i-1][j] === 1){\n                        grid[i-1][j] = 0;\n\
    \                        bucket--;\n                    }\n                  \
    \  if(i < grid.length - 1 && grid[i+1][j] === 1){\n                        grid[i+1][j]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(j > 0 && grid[i][j-1] === 1){\n                        grid[i][j-1]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(j < grid[i].length - 1 && grid[i][j+1] === 1){\n                \
    \        grid[i][j+1] = 0;\n                        bucket--;\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    var total = 0;\n    var max = 0;\n    var count = 0;\n    for(var i\
    \ = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                total += 1;\n            }\n\
    \        }\n        if(total > max){\n            max = total;\n        }\n  \
    \      total = 0;\n    }\n    count = max * capacity;\n    return count;\n}\n",
  "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max = 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] == 1){\n                count++;\n \
    \           }\n        }\n        if(count > max){\n            max = count;\n\
    \        }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "   \
    \ let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        grid[i][j] = 0;\n                count++;\n                let bucket\
    \ = capacity;\n                while(bucket > 0){\n                    if(i -\
    \ 1 >= 0 && grid[i - 1][j] === 1){\n                        grid[i - 1][j] = 0;\n\
    \                        bucket--;\n                    }\n                  \
    \  if(i + 1 < grid.length && grid[i + 1][j] === 1){\n                        grid[i\
    \ + 1][j] = 0;\n                        bucket--;\n                    }\n   \
    \                 if(j - 1 >= 0 && grid[i][j - 1] === 1){\n                  \
    \      grid[i][j - 1] = 0;\n                        bucket--;\n              \
    \      }\n                    if(j + 1 < grid[i].length && grid[i][j + 1] ===\
    \ 1){\n                        grid[i][j + 1] = 0;\n                        bucket--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n\
    \    let well_length = grid[0].length;\n    let buckets = [];\n    for(let i =\
    \ 0; i < wells; i++){\n        buckets.push(0);\n    }\n    for(let i = 0; i <\
    \ well_length; i++){\n        for(let j = 0; j < wells; j++){\n            if(grid[j][i]\
    \ === 1){\n                buckets[j]++;\n                if(buckets[j] > capacity){\n\
    \                    buckets[j] = capacity;\n                }\n            }\n\
    \        }\n        count += buckets.reduce((a, b) => a + b);\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index = 0;\n\
    \    let max_row = 0;\n    let max_col = 0;\n    let row_count = 0;\n    let col_count\
    \ = 0;\n    let row_index = 0;\n    let col_index = 0;\n    let row_max = 0;\n\
    \    let col_max = 0;\n    let row_max_index = 0;\n    let col_max_index = 0;\n\
    \    let row_max_row = 0;\n    let row_max_col = 0;\n    let col_max_row = 0;\n\
    \    let col_max_col = 0;\n    let row_max_count = 0;\n    let col_max_count =\
    \ 0;\n    let row_max_row_count = 0;\n    let row_max_col_count = 0;\n    let\
    \ col_max_row_count = 0;\n    let col_max_col_count = 0;\n    let row_max_row_index\
    \ = 0;\n    let row_max_col_index = 0;\n    let col_max_row_index = 0;\n    let\
    \ col_max_col_index = 0;\n    let row_max_row_max = 0;\n    let row_max_col_max\
    \ = 0;\n    let col_max_row_max = 0;\n    let col_max_col_max = 0;\n    let row_max_row_max_index\
    \ = 0;\n    let row_max_col_max_index = 0;\n    let col_max_row_max_index = 0;\n\
    \    let col_max_col_max_index = 0;\n    let row_max_row_max_row = 0;\n    let\
    \ row_max_col_max_row = 0;\n    let col_max_row_max_row = 0;\n    let col_max_col_max_row\
    \ = 0;\n    let row_max_row_max_col = 0;\n    let row_max_col_max_col = 0;\n \
    \   let col_max_row_max_col = 0;\n    let col_max_col", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let max_row =\
    \ 0;\n    let max_col = 0;\n    let max_row_count = 0;\n    let max_col_count\
    \ = 0;\n    for(let i = 0; i < row; i++){\n        let row_count = 0;\n      \
    \  for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n         \
    \       row_count++;\n            }\n        }\n        if(row_count > max_row_count){\n\
    \            max_row_count = row_count;\n            max_row = i;\n        }\n\
    \    }\n    for(let i = 0; i < col; i++){\n        let col_count = 0;\n      \
    \  for(let j = 0; j < row; j++){\n            if(grid[j][i] == 1){\n         \
    \       col_count++;\n            }\n        }\n        if(col_count > max_col_count){\n\
    \            max_col_count = col_count;\n            max_col = i;\n        }\n\
    \    }\n    if(max_row_count > max_col_count){\n        for(let i = 0; i < row;\
    \ i++){\n            if(i != max_row){\n                for(let j = 0; j < col;\
    \ j++){\n                    if(grid[i][j] == 1){\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   else{\n        for(let i = 0; i < col; i++){\n            if(i != max_col){\n\
    \                for(let j = 0; j < row; j++){\n                    if(grid[j][i]\
    \ == 1){\n                        count++;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n   \
    \ let col = grid[0].length;\n    let max = 0;\n    let max_index = 0;\n    let\
    \ max_col = 0;\n    let max_row = 0;\n    let max_row_index = 0;\n    let max_col_index\
    \ = 0;\n    let max_row_count = 0;\n    let max_col_count = 0;\n    let max_row_col_count\
    \ = 0;\n    let max_row_col_index = 0;\n    let max_row_col = 0;\n    let max_row_col_row\
    \ = 0;\n    let max_row_col_col = 0;\n    let max_row_col_row_index = 0;\n   \
    \ let max_row_col_col_index = 0;\n    let max_row_col_row_count = 0;\n    let\
    \ max_row_col_col_count = 0;\n    let max_row_col_row_col_count = 0;\n    let\
    \ max_row_col_row_col_index = 0;\n    let max_row_col_row_col = 0;\n    let max_row_col_row_col_row\
    \ = 0;\n    let max_row_col_row_col_col = 0;\n    let max_row_col_row_col_row_index\
    \ = 0;\n    let max_row_col_row_col_col_index = 0;\n    let max_row_col_row_col_row_count\
    \ = 0;\n    let max_row_col_row_col_col_count = 0;\n    let max_row_col_row_col_row_col_count\
    \ = 0;\n    let max_row_col_row_col_row_col_index = 0;\n    let max_row_col_row_col_row_col\
    \ = 0;\n    let max_row_col_row_col_row_col_row = 0;\n    let max_row_col_row_col_row_col_col\
    \ = 0;\n    let max_row_col_row_col_row_col_row_index = 0", "    let count = 0;\n\
    \    let max = 0;\n    let max_index = 0;\n    let max_row = 0;\n    let max_col\
    \ = 0;\n    let max_row_index = 0;\n    let max_col_index = 0;\n    let max_row_count\
    \ = 0;\n    let max_col_count = 0;\n    let max_row_count_index = 0;\n    let\
    \ max_col_count_index = 0;\n    let max_row_count_index_2 = 0;\n    let max_col_count_index_2\
    \ = 0;\n    let max_row_count_2 = 0;\n    let max_col_count_2 = 0;\n    let max_row_count_3\
    \ = 0;\n    let max_col_count_3 = 0;\n    let max_row_count_index_3 = 0;\n   \
    \ let max_col_count_index_3 = 0;\n    let max_row_count_index_4 = 0;\n    let\
    \ max_col_count_index_4 = 0;\n    let max_row_count_4 = 0;\n    let max_col_count_4\
    \ = 0;\n    let max_row_count_5 = 0;\n    let max_col_count_5 = 0;\n    let max_row_count_index_5\
    \ = 0;\n    let max_col_count_index_5 = 0;\n    let max_row_count_index_6 = 0;\n\
    \    let max_col_count_index_6 = 0;\n    let max_row_count_6 = 0;\n    let max_col_count_6\
    \ = 0;\n    let max_row_count_7 = 0;\n    let max_col_count_7 = 0;\n    let max_row_count_index_7\
    \ = 0;\n    let max_col_count_index_7 = 0;\n    let max_row_count_index_8 = 0;\n\
    \    let max_col_count_index_8 = 0;\n    let max_row_count_8 = 0;\n    let max_col_count_8\
    \ = 0;\n    let max_row_count_", "    let result = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        let row = grid[i];\n        let sum = row.reduce((a,b)\
    \ => a + b, 0);\n        if(sum > capacity){\n            result += capacity;\n\
    \        } else {\n            result += sum;\n        }\n    }\n    return result;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                max = Math.max(max, j);\n            }\n        }\n\
    \    }\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                count\
    \ += capacity;\n            }\n            if(j == max){\n                count\
    \ -= capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          grid[i][j] = 0;\n                count++;\n                if(i > 0\
    \ && grid[i-1][j] === 1){\n                    grid[i-1][j] = 0;\n           \
    \         count++;\n                }\n                if(j > 0 && grid[i][j-1]\
    \ === 1){\n                    grid[i][j-1] = 0;\n                    count++;\n\
    \                }\n                if(i < grid.length - 1 && grid[i+1][j] ===\
    \ 1){\n                    grid[i+1][j] = 0;\n                    count++;\n \
    \               }\n                if(j < grid[i].length - 1 && grid[i][j+1] ===\
    \ 1){\n                    grid[i][j+1] = 0;\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    let wells = grid.map(row => row.reduce((a, b) => a + b));\n\
    \    let max = Math.max(...wells);\n    while (max > 0) {\n        wells = wells.map(well\
    \ => well - capacity);\n        wells = wells.map(well => well < 0 ? 0 : well);\n\
    \        max = Math.max(...wells);\n        count++;\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let wells = [];\n    for(let i = 0; i < row; i++){\n        for(let j = 0;\
    \ j < col; j++){\n            if(grid[i][j] === 1){\n                wells.push([i,\
    \ j]);\n            }\n        }\n    }\n    while(wells.length > 0){\n      \
    \  let bucket = capacity;\n        let new_wells = [];\n        for(let i = 0;\
    \ i < wells.length; i++){\n            let well = wells[i];\n            if(bucket\
    \ > 0){\n                bucket -= 1;\n                grid[well[0]][well[1]]\
    \ = 0;\n            }else{\n                new_wells.push(well);\n          \
    \  }\n        }\n        wells = new_wells;\n        count += 1;\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += 1;\n            }\n        }\n    }\n    return\
    \ count * capacity;\n}\n", "    let result = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                result += capacity;\n            }\n        }\n   \
    \ }\n    return result;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row = grid[i];\n        for(let j = 0; j < row.length; j++){\n\
    \            if(row[j] === 1){\n                count += capacity;\n         \
    \   }\n        }\n    }\n    return count;\n}\n", "    let max_fill = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}\n", "    let count =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let bucket = capacity;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                if(bucket > 0){\n           \
    \         bucket--;\n                    grid[i][j] = 0;\n                }\n\
    \                else{\n                    bucket = capacity;\n             \
    \       count++;\n                    bucket--;\n                    grid[i][j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n                if(bucket\
    \ >= 1){\n                    bucket -= 1;\n                    grid[i][j] = 0;\n\
    \                }else{\n                    bucket = capacity;\n            \
    \        count += 1;\n                    bucket -= 1;\n                    grid[i][j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                max = Math.max(max, j);\n     \
    \       }\n        }\n    }\n    for(let i = 0; i < grid.length; i++){\n     \
    \   for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count += capacity;\n            }\n            if(j === max){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let fillCount\
    \ = 0;\n    let maxFill = 0;\n    let maxFillRow = [];\n    let maxFillCol = [];\n\
    \    let maxFillRowIndex = 0;\n    let maxFillColIndex = 0;\n    let maxFillRowCount\
    \ = 0;\n    let maxFillColCount = 0;\n    let maxFillRowCountIndex = 0;\n    let\
    \ maxFillColCountIndex = 0;\n    let maxFillRowCountMax = 0;\n    let maxFillColCountMax\
    \ = 0;\n    let maxFillRowCountMaxIndex = 0;\n    let maxFillColCountMaxIndex\
    \ = 0;\n    let maxFillRowCountMaxIndex2 = 0;\n    let maxFillColCountMaxIndex2\
    \ = 0;\n    let maxFillRowCountMaxIndex3 = 0;\n    let maxFillColCountMaxIndex3\
    \ = 0;\n    let maxFillRowCountMaxIndex4 = 0;\n    let maxFillColCountMaxIndex4\
    \ = 0;\n    let maxFillRowCountMaxIndex5 = 0;\n    let maxFillColCountMaxIndex5\
    \ = 0;\n    let maxFillRowCountMaxIndex6 = 0;\n    let maxFillColCountMaxIndex6\
    \ = 0;\n    let maxFillRowCountMaxIndex7 = 0;\n    let maxFillColCountMaxIndex7\
    \ = 0;\n    let maxFillRowCountMaxIndex8 = 0;\n    let maxFillColCountMaxIndex8\
    \ = 0;\n    let maxFillRowCountMaxIndex9 = 0;\n    let maxFillColCountMaxIndex9\
    \ = 0;\n    let maxFillRowCountMaxIndex10 = 0;\n    let maxFillColCountMaxIndex10\
    \ = 0;\n    let maxFillRowCountMaxIndex11 = 0;\n    let maxFillColCountMaxIndex11\
    \ = 0;\n    let maxFillRowCountMaxIndex12 = 0;\n    let maxFillColCountMaxIndex12\
    \ = 0;\n    let maxFillRowCountMaxIndex13 = 0;\n    let maxFillColCountMaxIndex13\
    \ = 0;\n    let maxFillRowCountMaxIndex14 = 0;\n    let maxFillColCountMaxIndex14\
    \ = 0;\n    let maxFillRowCountMaxIndex15 = 0;\n    let maxFillColCountMaxIndex15\
    \ = 0;\n    let maxFillRowCountMax", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let wells = [];\n    for(let i = 0; i < row;\
    \ i++){\n        wells.push([]);\n        for(let j = 0; j < col; j++){\n    \
    \        wells[i].push(0);\n        }\n    }\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n   \
    \             wells[i][j] = 1;\n                count++;\n            }\n    \
    \    }\n    }\n    while(count > 0){\n        for(let i = 0; i < row; i++){\n\
    \            for(let j = 0; j < col; j++){\n                if(wells[i][j] ==\
    \ 1){\n                    wells[i][j] = 0;\n                    count--;\n  \
    \                  if(i > 0 && wells[i-1][j] == 0){\n                        wells[i-1][j]\
    \ = 1;\n                        count++;\n                    }\n            \
    \        if(i < row-1 && wells[i+1][j] == 0){\n                        wells[i+1][j]\
    \ = 1;\n                        count++;\n                    }\n            \
    \        if(j > 0 && wells[i][j-1] == 0){\n                        wells[i][j-1]\
    \ = 1;\n                        count++;\n                    }\n            \
    \        if(j < col-1 && wells[i][j+1] == 0){\n                        wells[i][j+1]\
    \ = 1;\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return capacity;\n}\n", "    // your\
    \ code here\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                if(max < capacity){\n       \
    \             max++;\n                }else{\n                    max = 1;\n \
    \                   count++;\n                }\n            }\n        }\n  \
    \  }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let total = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                total += 1;\n            }\n\
    \        }\n    }\n    while(total > 0){\n        for(let i = 0; i < grid.length;\
    \ i++){\n            for(let j = 0; j < grid[i].length; j++){\n              \
    \  if(grid[i][j] === 1){\n                    grid[i][j] = 0;\n              \
    \      total -= 1;\n                    count += 1;\n                }\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n\
    \                count++;\n                if(i - 1 >= 0 && grid[i - 1][j] ===\
    \ 1){\n                    grid[i - 1][j] = 0;\n                    count++;\n\
    \                }\n                if(i + 1 < grid.length && grid[i + 1][j] ===\
    \ 1){\n                    grid[i + 1][j] = 0;\n                    count++;\n\
    \                }\n                if(j - 1 >= 0 && grid[i][j - 1] === 1){\n\
    \                    grid[i][j - 1] = 0;\n                    count++;\n     \
    \           }\n                if(j + 1 < grid[i].length && grid[i][j + 1] ===\
    \ 1){\n                    grid[i][j + 1] = 0;\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                let bucket = capacity;\n\
    \                while(bucket > 0){\n                    if(grid[i][j] === 1){\n\
    \                        grid[i][j] = 0;\n                        bucket--;\n\
    \                    }\n                    if(j === grid[i].length - 1){\n  \
    \                      j = -1;\n                        i++;\n               \
    \     }\n                    if(i === grid.length){\n                        i\
    \ = 0;\n                    }\n                }\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let max = 0;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                count++;\n            }\n   \
    \     }\n        if(count > max){\n            max = count;\n        }\n     \
    \   count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n     \
    \   let sum = 0;\n        for(let j = 0; j < row.length; j++){\n            sum\
    \ += row[j];\n        }\n        if(sum > capacity){\n            count += sum\
    \ - capacity;\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let col =\
    \ grid[0].length;\n    let sum = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ row; i++){\n        for(let j = 0; j < col; j++){\n            sum += grid[i][j];\n\
    \        }\n        if(sum > max){\n            max = sum;\n        }\n      \
    \  sum = 0;\n    }\n    count = max * capacity;\n    return count;\n}\n", "  \
    \  let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          grid[i][j] = 0;\n                count++;\n                if(i > 0\
    \ && grid[i-1][j] === 1){\n                    grid[i-1][j] = 0;\n           \
    \         count++;\n                }\n                if(j > 0 && grid[i][j-1]\
    \ === 1){\n                    grid[i][j-1] = 0;\n                    count++;\n\
    \                }\n                if(i < grid.length - 1 && grid[i+1][j] ===\
    \ 1){\n                    grid[i+1][j] = 0;\n                    count++;\n \
    \               }\n                if(j < grid[i].length - 1 && grid[i][j+1] ===\
    \ 1){\n                    grid[i][j+1] = 0;\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let row = grid[i];\n        let row_count = 0;\n\
    \        for(let j = 0; j < row.length; j++){\n            if(row[j] === 1){\n\
    \                row_count++;\n            }\n        }\n        count += Math.ceil(row_count\
    \ / capacity);\n    }\n    return count;\n}\n", "    let count = 0;\n    let max\
    \ = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length; i++){\n  \
    \      for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max){\n            max = count;\n            max_index = i;\n        }\n   \
    \     count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += 1;\n            }\n        }\n        if(count > max){\n \
    \           max = count;\n        }\n        count = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n \
    \           if(grid[i][j] === 1){\n                max += 1;\n            }\n\
    \        }\n    }\n    let bucket = 0;\n    while(bucket < max){\n        for(let\
    \ i = 0; i < grid.length; i++){\n            for(let j = 0; j < grid[i].length;\
    \ j++){\n                if(grid[i][j] === 1){\n                    grid[i][j]\
    \ = 0;\n                    bucket += 1;\n                }\n            }\n \
    \       }\n        count += 1;\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max = Math.max(max, j);\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n            if(j === max){\n                count -= capacity;\n  \
    \          }\n        }\n    }\n    return count;\n}\n", "    var count = 0;\n\
    \    var max = 0;\n    for(var i = 0; i < grid.length; i++){\n        for(var\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         count++;\n            }\n        }\n        if(count > max){\n     \
    \       max = count;\n        }\n        count = 0;\n    }\n    return max * capacity;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let row = grid[i];\n        let row_count = 0;\n\
    \        for(let j = 0; j < row.length; j++){\n            if(row[j] === 1){\n\
    \                row_count++;\n            }\n        }\n        count += Math.ceil(row_count\
    \ / capacity);\n    }\n    return count;\n}\n", "    let count = 0;\n    let max\
    \ = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length; i++){\n  \
    \      for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max){\n            max = count;\n            max_index = i;\n        }\n   \
    \     count = 0;\n    }\n    let max_fill = max * capacity;\n    let total = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                total++;\n        \
    \    }\n        }\n    }\n    return max_fill - total;\n}\n", "    let count =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let bucket = capacity;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] === 1){\n                if(bucket > 0){\n          \
    \          bucket--;\n                    grid[i][j] = 0;\n                }\n\
    \                else{\n                    bucket = capacity;\n             \
    \       count++;\n                    bucket--;\n                    grid[i][j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                j++;\n\
    \                while(j < grid[i].length && grid[i][j] === 1){\n            \
    \        grid[i][j] = 0;\n                    j++;\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max = Math.max(max, j);\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n            if(j === max){\n                count -= capacity;\n  \
    \          }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            sum += grid[i][j];\n        }\n        if(sum > max){\n         \
    \   max = sum;\n            max_index = i;\n        }\n    }\n    for(let i =\
    \ 0; i < grid.length; i++){\n        if(i != max_index){\n            for(let\
    \ j = 0; j < grid[i].length; j++){\n                if(grid[i][j] == 1){\n   \
    \                 grid[i][j] = 0;\n                    count++;\n            \
    \    }\n            }\n        }\n    }\n    for(let i = 0; i < grid[max_index].length;\
    \ i++){\n        if(grid[max_index][i] == 1){\n            grid[max_index][i]\
    \ = 0;\n            count++;\n        }\n    }\n    return count;\n}\n", "   \
    \ let count = 0;\n    let max = 0;\n    let row = 0;\n    let col = 0;\n    let\
    \ max_row = 0;\n    let max_col = 0;\n    let max_count = 0;\n    let max_max\
    \ = 0;\n    let max_row_count = 0;\n    let max_col_count = 0;\n    let max_max_count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                count++;\n\
    \            }\n        }\n        if(count > max){\n            max = count;\n\
    \            max_row = i;\n        }\n        count = 0;\n    }\n    for(let i\
    \ = 0; i < grid[0].length; i++){\n        for(let j = 0; j < grid.length; j++){\n\
    \            if(grid[j][i] == 1){\n                count++;\n            }\n \
    \       }\n        if(count > max){\n            max = count;\n            max_col\
    \ = i;\n        }\n        count = 0;\n    }\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max_count){\n            max_count = count;\n            max_row_count = i;\n\
    \        }\n        count = 0;\n    }\n    for(let i = 0; i < grid[0].length;\
    \ i++){\n        for(let j = 0; j < grid.length; j++){\n            if(grid[j][i]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max_count){\n            max_count = count;\n            max_col_count = i;\n\
    \        }\n        count = 0;\n    }\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        let bucket = capacity;\n        for(let j\
    \ = 0; j < row.length; j++){\n            let well = row[j];\n            if(well\
    \ === 1){\n                if(bucket === 0){\n                    count++;\n \
    \                   bucket = capacity;\n                }\n                bucket--;\n\
    \            }\n        }\n        if(bucket !== capacity){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let row =\
    \ grid.length;\n    let col = grid[0].length;\n    let buckets = new Array(row).fill(0);\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] === 1){\n                buckets[i] += 1;\n         \
    \   }\n        }\n    }\n    buckets.sort((a, b) => a - b);\n    let max = buckets[buckets.length\
    \ - 1];\n    let min = buckets[0];\n    if(max === 0){\n        return 0;\n  \
    \  }\n    while(max > min){\n        for(let i = 0; i < buckets.length; i++){\n\
    \            buckets[i] -= capacity;\n            if(buckets[i] < min){\n    \
    \            buckets[i] = min;\n            }\n        }\n        count += 1;\n\
    \        buckets.sort((a, b) => a - b);\n        max = buckets[buckets.length\
    \ - 1];\n        min = buckets[0];\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                count++;\n            }\n   \
    \     }\n        if(count > max){\n            max = count;\n        }\n     \
    \   count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                let bucket = capacity;\n                while(bucket >\
    \ 0){\n                    if(grid[i][j] === 1){\n                        grid[i][j]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(j === grid[i].length - 1){\n                        j = 0;\n    \
    \                    i++;\n                    } else {\n                    \
    \    j++;\n                    }\n                }\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let wells = grid.length;\n    let length = grid[0].length;\n    let buckets\
    \ = [];\n    for(let i = 0; i < wells; i++){\n        buckets.push(0);\n    }\n\
    \    let max = 0;\n    while(true){\n        let max_index = 0;\n        for(let\
    \ i = 0; i < wells; i++){\n            if(buckets[i] < capacity){\n          \
    \      buckets[i]++;\n                count++;\n            }\n            if(buckets[i]\
    \ > max){\n                max = buckets[i];\n                max_index = i;\n\
    \            }\n        }\n        if(max === capacity){\n            buckets[max_index]\
    \ = 0;\n            max = 0;\n        }\n        if(count === wells * capacity){\n\
    \            break;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let bucket = capacity;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                if(bucket === 0){\n                    bucket = capacity;\n\
    \                    count++;\n                }\n                bucket--;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let max = 0;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] > max){\n                max = grid[i][j];\n        \
    \    }\n        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let j\
    \ = 0; j < col; j++){\n            if(grid[i][j] < max){\n                grid[i][j]\
    \ = max;\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let total = 0;\n    let row = grid.length;\n    let col =\
    \ grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row; i++){\n     \
    \   for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n        \
    \        total += 1;\n            }\n        }\n        if(total > max){\n   \
    \         max = total;\n        }\n        total = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    // your code here\n}", "    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n        \
    \        count++;\n                let bucket = capacity;\n                while(bucket\
    \ > 0){\n                    if(i > 0 && grid[i-1][j] === 1){\n              \
    \          grid[i-1][j] = 0;\n                        bucket--;\n            \
    \        }\n                    if(i < grid.length - 1 && grid[i+1][j] === 1){\n\
    \                        grid[i+1][j] = 0;\n                        bucket--;\n\
    \                    }\n                    if(j > 0 && grid[i][j-1] === 1){\n\
    \                        grid[i][j-1] = 0;\n                        bucket--;\n\
    \                    }\n                    if(j < grid[i].length - 1 && grid[i][j+1]\
    \ === 1){\n                        grid[i][j+1] = 0;\n                       \
    \ bucket--;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n", "    // your code here\n}\n", "    let total\
    \ = 0;\n    let max = 0;\n    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            total +=\
    \ grid[i][j];\n        }\n        if(total > max){\n            max = total;\n\
    \        }\n        total = 0;\n    }\n    count = max / capacity;\n    if(max\
    \ % capacity != 0){\n        count++;\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   count += capacity;\n            }\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max = 0;\n    let max_row = 0;\n    let max_col = 0;\n    for(let i =\
    \ 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ > max){\n                max = grid[i][j];\n                max_row = i;\n \
    \               max_col = j;\n            }\n        }\n    }\n    for(let i =\
    \ 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n  \
    \  let col = grid[0].length;\n    let bucket = capacity;\n    for(let i = 0; i\
    \ < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                if(bucket > 0){\n                    bucket--;\n   \
    \                 grid[i][j] = 0;\n                }else{\n                  \
    \  count++;\n                    bucket = capacity - 1;\n                    grid[i][j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ count = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        sum += Math.ceil(count\
    \ / capacity);\n    }\n    return sum;\n}\n", "    let count = 0;\n    let row\
    \ = grid.length;\n    let col = grid[0].length;\n    let wells = [];\n    for(let\
    \ i = 0; i < row; i++){\n        wells.push([]);\n        for(let j = 0; j < col;\
    \ j++){\n            wells[i].push(0);\n        }\n    }\n    for(let i = 0; i\
    \ < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                wells[i][j] = capacity;\n                count++;\n\
    \            }\n        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(wells[i][j] > 0){\n                if(i\
    \ > 0 && wells[i-1][j] === 0){\n                    wells[i-1][j] = capacity;\n\
    \                    count++;\n                }\n                if(i < row-1\
    \ && wells[i+1][j] === 0){\n                    wells[i+1][j] = capacity;\n  \
    \                  count++;\n                }\n                if(j > 0 && wells[i][j-1]\
    \ === 0){\n                    wells[i][j-1] = capacity;\n                   \
    \ count++;\n                }\n                if(j < col-1 && wells[i][j+1] ===\
    \ 0){\n                    wells[i][j+1] = capacity;\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    // your code here\n}\n", "    let count = 0;\n    let max_row = 0;\n    let\
    \ max_col = 0;\n    let max_val = 0;\n    let max_index = 0;\n    let max_row_index\
    \ = 0;\n    let max_col_index = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max_val){\n                max_val = grid[i][j];\n                max_index\
    \ = j;\n                max_row_index = i;\n            }\n        }\n       \
    \ if(max_val > max_row){\n            max_row = max_val;\n            max_col_index\
    \ = max_index;\n        }\n        max_val = 0;\n    }\n    for(let i = 0; i <\
    \ grid[max_row_index].length; i++){\n        if(grid[max_row_index][i] > max_col){\n\
    \            max_col = grid[max_row_index][i];\n        }\n    }\n    count +=\
    \ (max_row_index + 1) * capacity;\n    count += (max_col_index + 1) * capacity;\n\
    \    count += (max_row + max_col) * capacity;\n    return count;\n}\n", "    //\
    \ your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                grid[i][j] = 0;\n                count++;\n       \
    \         for(let k = i; k < grid.length; k++){\n                    if(grid[k][j]\
    \ === 1){\n                        grid[k][j] = 0;\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    // your code here\n    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n  \
    \  let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        count++;\n            }\n        }\n        if(count > max){\n      \
    \      max = count;\n        }\n        count = 0;\n    }\n    return max * capacity;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    let max = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n        if(count > max){\n            max = count;\n      \
    \  }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "  let total\
    \ = 0;\n  let row = grid.length;\n  let col = grid[0].length;\n  let max = 0;\n\
    \  for(let i = 0; i < row; i++){\n    for(let j = 0; j < col; j++){\n      if(grid[i][j]\
    \ === 1){\n        total += 1;\n      }\n    }\n    if(total > max){\n      max\
    \ = total;\n    }\n    total = 0;\n  }\n  return max * capacity;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
