language: js
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var num = number;\n    var romanNumeral = {\n    \
    \    M: 1000,\n        CM: 900,\n        D: 500,\n        CD: 400,\n        C:\
    \ 100,\n        XC: 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n   \
    \     IX: 9,\n        V: 5,\n        IV: 4,\n        I: 1\n    };\n    for (var\
    \ key in romanNumeral) {\n        while (num >= romanNumeral[key]) {\n       \
    \     roman += key;\n            num -= romanNumeral[key];\n        }\n    }\n\
    \    return roman.toLowerCase();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"M\", \"CM\", \"D\", \"CD\",\
    \ \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman.toLowerCase();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var result = \"\";\n    var roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var decimal\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var i =\
    \ 0; i < decimal.length; i++) {\n        while (number % decimal[i] < number)\
    \ {\n            result += roman[i];\n            number -= decimal[i];\n    \
    \    }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    //your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'xix'\n    at test (/tmp/tmpqgqljn_f.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqgqljn_f.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'xix',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var num = number;\n    var romanNumeral = [\"M\",\
    \ \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"];\n    var numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    for (var i = 0; i < numbers.length; i++) {\n        while (num\
    \ >= numbers[i]) {\n            roman += romanNumeral[i];\n            num -=\
    \ numbers[i];\n        }\n    }\n    return roman.toLowerCase();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = int_to_mini_roman;\n\
    \  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"\
    clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"\
    cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"\
    i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"\
    xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"\
    xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"\
    cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"\
    m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \  var roman = \"\";\n  var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n  var numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  for (var i = 0;\
    \ i < numbers.length; i++) {\n    while (number >= numbers[i]) {\n      roman\
    \ += romanNumeral[i];\n      number -= numbers[i];\n    }\n  }\n  return roman;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"xix\");\n  assert.deepEqual(candidate(152),\"\
    clii\");\n  assert.deepEqual(candidate(251),\"ccli\");\n  assert.deepEqual(candidate(426),\"\
    cdxxvi\");\n  assert.deepEqual(candidate(500),\"d\");\n  assert.deepEqual(candidate(1),\"\
    i\");\n  assert.deepEqual(candidate(4),\"iv\");\n  assert.deepEqual(candidate(43),\"\
    xliii\");\n  assert.deepEqual(candidate(90),\"xc\");\n  assert.deepEqual(candidate(94),\"\
    xciv\");\n  assert.deepEqual(candidate(532),\"dxxxii\");\n  assert.deepEqual(candidate(900),\"\
    cm\");\n  assert.deepEqual(candidate(994),\"cmxciv\");\n  assert.deepEqual(candidate(1000),\"\
    m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
    // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"\
    clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n\
    \    var roman = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var\
    \ numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var\
    \ i = 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n\
    \            roman += romanNumeral[i];\n            number -= numbers[i];\n  \
    \      }\n    }\n    return roman;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
    xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
    ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
    d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
    iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
    xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
    dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
    cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
