language: js
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    let primes = [2, 3, 5, 7, 11, 13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = num.split('');\n    let count = 0;\n\
    \    for(let i = 0; i < hex.length; i++){\n        if(primes.includes(parseInt(hex[i],\
    \ 16))){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ \"0123456789ABCDEF\";\n    let primes = \"2357BDF\";\n    let count = 0;\n \
    \   for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp1bvvudgr.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1bvvudgr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let prime\
    \ = [2,3,5,7,11,13];\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(prime.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(parseInt(num[i], 16))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = \"0123456789ABCDEF\";\n    let primes = [2,3,5,7,11,13];\n\
    \    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let primes = [2,3,5,7,11,13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] == 2 || hex[num[i]]\
    \ == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]]\
    \ == 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '2': true,\n        '3': true,\n        '5':\
    \ true,\n        '7': true,\n        'B': true,\n        'D': true\n    }\n  \
    \  for(let i = 0; i < num.length; i++){\n        if(hex[num[i]]){\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        let n = hex[num[i]];\n    \
    \    if(n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        'A': 10,\n        'B': 11,\n\
    \        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        let digit\
    \ = num[i];\n        if (hex[digit]) {\n            digit = hex[digit];\n    \
    \    }\n        if (primes.includes(Number(digit))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let arr = num.split('');\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] === '2' || arr[i] === '3' || arr[i] === '5' || arr[i] === '7'\
    \ || arr[i] === 'B' || arr[i] === 'D'){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    var primes =\
    \ [2, 3, 5, 7, 11, 13];\n    var count = 0;\n    for (var i = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(hex[num[i]]) != -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] == 2 || hex[num[i]]\
    \ == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]]\
    \ == 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '2': true,\n        '3': true,\n        '5':\
    \ true,\n        '7': true,\n        'B': true,\n        'D': true\n    }\n  \
    \  for(let i = 0; i < num.length; i++){\n        if(hex[num[i]]){\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n\tvar primes\
    \ = [2,3,5,7,11,13];\n\tvar count = 0;\n\tfor(var i = 0; i < num.length; i++){\n\
    \t\tif(primes.indexOf(parseInt(num[i],16)) != -1){\n\t\t\tcount++;\n\t\t}\n\t\
    }\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['2','3','5','7','B','D'];\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex.includes(num[i])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let primes = [2,3,5,7,11,13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5 || hex[num[i]] ==\
    \ 7 || hex[num[i]] == 11 || hex[num[i]] == 13){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(num[i] in hex){\n            if(hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n                count++;\n            }\n  \
    \      }\n        else{\n            if(num[i] === '2' || num[i] === '3' || num[i]\
    \ === '5' || num[i] === '7'){\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let arr = num.split('');\n\
    \    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(hex[arr[i]]\
    \ === 2 || hex[arr[i]] === 3 || hex[arr[i]] === 5 || hex[arr[i]] === 7 || hex[arr[i]]\
    \ === 11 || hex[arr[i]] === 13){\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n\tlet hex = {\n\
    \t\t'0': 0,\n\t\t'1': 1,\n\t\t'2': 2,\n\t\t'3': 3,\n\t\t'4': 4,\n\t\t'5': 5,\n\
    \t\t'6': 6,\n\t\t'7': 7,\n\t\t'8': 8,\n\t\t'9': 9,\n\t\t'A': 10,\n\t\t'B': 11,\n\
    \t\t'C': 12,\n\t\t'D': 13,\n\t\t'E': 14,\n\t\t'F': 15\n\t}\n\tlet count = 0;\n\
    \tfor(let i = 0; i < num.length; i++){\n\t\tif(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var primes\
    \ = [2,3,5,7,11,13];\n    var count = 0;\n    for(var i = 0; i < num.length; i++){\n\
    \        if(primes.indexOf(parseInt(num[i], 16)) != -1){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        'A': 10,\n        'B': 11,\n\
    \        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex[num[i]]\
    \ || Number(num[i]))){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    let nums = num.split(\"\");\n    for(let i = 0;\
    \ i < nums.length; i++){\n        if(hex[nums[i]] == 2 || hex[nums[i]] == 3 ||\
    \ hex[nums[i]] == 5 || hex[nums[i]] == 7 || hex[nums[i]] == 11 || hex[nums[i]]\
    \ == 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        let digit = hex[num[i]];\n\
    \        if(digit === 2 || digit === 3 || digit === 5 || digit === 7 || digit\
    \ === 11 || digit === 13){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    var count = 0;\n    for(var i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(hex[num[i]]){\n            if(hex[num[i]]\
    \ == 11 || hex[num[i]] == 13){\n                count++;\n            }\n    \
    \    }\n        else if(num[i] == 2 || num[i] == 3 || num[i] == 5 || num[i] ==\
    \ 7){\n            count++;\n        }\n    }\n    return count;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['2','3','5','7','B','D'];\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex.includes(num[i])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\":\
    \ 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\":\
    \ 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\":\
    \ 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"\
    E\": 14,\n        \"F\": 15\n    }\n    for(let i = 0; i < num.length; i++){\n\
    \        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5 ||\
    \ hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(parseInt(num[i], 16))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(num[i] in hex){\n            if(hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n                count++;\n            }\n  \
    \      }\n        else if(num[i] % 2 !== 0 && num[i] !== '0' && num[i] !== '1'){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5fbdljpv.js:52:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5fbdljpv.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ \"0123456789ABCDEF\";\n    let primes = [2, 3, 5, 7, 11, 13];\n    let count\
    \ = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    };\n    let counter = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \    let primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i <\
    \ num.length; i++){\n        if(primes.includes(hex[num[i]])){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let count = 0;\n    for(let i\
    \ = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\"\
    : 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    for(let\
    \ i = 0; i < num.length; i++){\n        if(num[i] in hex){\n            if(hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n                count++;\n            }\n  \
    \      }\n        else{\n            if(num[i] === \"2\" || num[i] === \"3\" ||\
    \ num[i] === \"5\" || num[i] === \"7\"){\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\"\
    , \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes = [2, 3, 5, 7, 11, 13, 17];\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes\
    \ = [2, 3, 5, 7, 11, 13];\n  let count = 0;\n  for(let i = 0; i < num.length;\
    \ i++){\n    if(primes.includes(parseInt(num[i], 16))){\n      count++;\n    }\n\
    \  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(parseInt(num[i], 16))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let arr = num.split('');\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] === '2' || arr[i] === '3' || arr[i] === '5' || arr[i] === '7'\
    \ || arr[i] === 'B' || arr[i] === 'D'){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var count\
    \ = 0;\n    var hex = {\n        '0':0,\n        '1':1,\n        '2':2,\n    \
    \    '3':3,\n        '4':4,\n        '5':5,\n        '6':6,\n        '7':7,\n\
    \        '8':8,\n        '9':9,\n        'A':10,\n        'B':11,\n        'C':12,\n\
    \        'D':13,\n        'E':14,\n        'F':15\n    }\n    for(var i = 0; i\
    \ < num.length; i++){\n        if(hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]]\
    \ == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997];\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(parseInt(num[i], 16))){\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hex =\
    \ \"0123456789ABCDEF\";\n    var primes = \"2357BDF\";\n    var count = 0;\n \
    \   for(var i = 0; i < num.length; i++){\n        if(primes.indexOf(num[i]) >\
    \ -1){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n6\n    at test (/tmp/tmp0n9v5l97.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0n9v5l97.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        0: 0,\n        1: 1,\n        2: 2,\n       \
    \ 3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8:\
    \ 8,\n        9: 9,\n        A: 10,\n        B: 11,\n        C: 12,\n        D:\
    \ 13,\n        E: 14,\n        F: 15\n    }\n    let primes = [2, 3, 5, 7, 11,\
    \ 13];\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex[num[i]])){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let hex = {\n\
    \    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n\
    \    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'A': 10,\n    'B': 11,\n\
    \    'C': 12,\n    'D': 13,\n    'E': 14,\n    'F': 15\n  }\n  let count = 0;\n\
    \  for(let i = 0; i < num.length; i++){\n    if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var count\
    \ = 0;\n    var hex = ['2','3','5','7','B','D'];\n    for(var i = 0; i < num.length;\
    \ i++){\n        if(hex.indexOf(num[i]) != -1){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = num.split('');\n    let count = 0;\n\
    \    for(let i = 0; i < hex.length; i++){\n        if(primes.includes(parseInt(hex[i],\
    \ 16))){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let count = 0;\n    for(let i\
    \ = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n\
    \        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n \
    \       A: 10,\n        B: 11,\n        C: 12,\n        D: 13,\n        E: 14,\n\
    \        F: 15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    var primes =\
    \ [2, 3, 5, 7, 11, 13];\n    var count = 0;\n    for (var i = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(hex[num[i]]) > -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]]){\n\
    \            if(primes.includes(hex[num[i]])){\n                count++;\n   \
    \         }\n        } else {\n            if(primes.includes(parseInt(num[i]))){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n    var primes =\
    \ [2, 3, 5, 7, 11, 13];\n    var count = 0;\n    for (var i = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(hex[num[i]]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15};\n\
    \    let primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i <\
    \ num.length; i++){\n        if(primes.includes(hex[num[i]])){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let primes = [2, 3, 5, 7, 11, 13];\n    let hex = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    for(let\
    \ i = 0; i < num.length; i++){\n        let index = hex.indexOf(num[i]);\n   \
    \     if(primes.includes(index)){\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    let primes = [2, 3, 5, 7, 11, 13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n\
    \    let prime = [2,3,5,7,11,13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(prime.includes(hex.indexOf(num[i]))){\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let arr =\
    \ num.split('');\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] === '2' || arr[i] === '3' || arr[i] === '5' || arr[i] === '7'\
    \ || arr[i] === 'B' || arr[i] === 'D'){\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n\
    \        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n\
    \        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n\
    \        'F':15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let count = 0;\n    for(let i\
    \ = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        \"0\": 0,\n        \"1\":\
    \ 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\":\
    \ 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\":\
    \ 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\"\
    : 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let count = 0;\n    for(let\
    \ i = 0; i < num.length; i++){\n        if(primes.includes(hex[num[i]])){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] % 2 != 0 && hex[num[i]] % 3 != 0 && hex[num[i]] % 5 != 0 && hex[num[i]]\
    \ % 7 != 0 && hex[num[i]] % 11 != 0 && hex[num[i]] % 13 != 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpnd40y0xu.js:55:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnd40y0xu.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(num[i] in hex){\n            if(hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n                count++;\n            }\n  \
    \      }\n        else if(num[i] === '2' || num[i] === '3' || num[i] === '5' ||\
    \ num[i] === '7'){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\":0,\n        \"1\":1,\n        \"2\":2,\n        \"3\":3,\n\
    \        \"4\":4,\n        \"5\":5,\n        \"6\":6,\n        \"7\":7,\n    \
    \    \"8\":8,\n        \"9\":9,\n        \"A\":10,\n        \"B\":11,\n      \
    \  \"C\":12,\n        \"D\":13,\n        \"E\":14,\n        \"F\":15\n    }\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]]\
    \ === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    let primes = [2, 3, 5, 7, 11, 13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = \"0123456789ABCDEF\";\n    let primes = [2,3,5,7,11,13];\n\
    \    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n       \
    \ if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(isPrime(hex[num[i]])){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_er4g3oo.js:43\n        if(isPrime(hex[num[i]])){\n        ^\n\n\
    ReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp_er4g3oo.js:43:9)\n\
    \    at test (/tmp/tmp_er4g3oo.js:55:20)\n    at Object.<anonymous> (/tmp/tmp_er4g3oo.js:63:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let count = 0;\n    let arr = num.split(\"\");\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(hex[arr[i]] === 2 || hex[arr[i]] === 3 ||\
    \ hex[arr[i]] === 5 || hex[arr[i]] === 7 || hex[arr[i]] === 11 || hex[arr[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        'A': 10,\n        'B': 11,\n\
    \        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n\
    \    let count = 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex[num[i]]\
    \ || Number(num[i]))){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    let primes = [2, 3, 5, 7, 11, 13];\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] == 2 || hex[num[i]]\
    \ == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]]\
    \ == 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n\
    \        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n\
    \        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n\
    \        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n\
    \    }\n    let primes = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]])) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    let arr = num.split('');\n    for(let i = 0; i < arr.length; i++){\n    \
    \    if(hex[arr[i]] === 2 || hex[arr[i]] === 3 || hex[arr[i]] === 5 || hex[arr[i]]\
    \ === 7 || hex[arr[i]] === 11 || hex[arr[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    let arr = num.split('');\n    for(let i = 0; i < arr.length; i++){\n    \
    \    if(hex[arr[i]] === 2 || hex[arr[i]] === 3 || hex[arr[i]] === 5 || hex[arr[i]]\
    \ === 7 || hex[arr[i]] === 11 || hex[arr[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748795
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\":\
    \ 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\":\
    \ 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\":\
    \ 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"\
    E\": 14,\n        \"F\": 15\n    }\n    for(let i = 0; i < num.length; i++){\n\
    \        if(hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]]\
    \ === 7 || hex[num[i]] === 11 || hex[num[i]] === 13){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = '0123456789ABCDEF';\n    let count =\
    \ 0;\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n \
    \       '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7':\
    \ 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n \
    \       'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748796
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    let\
    \ primes = [2,3,5,7,11,13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex.indexOf(num[i]))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let primes =\
    \ [2, 3, 5, 7, 11, 13]\n    let count = 0\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(hex[num[i]])){\n            count++\n    \
    \    }\n    }\n    return count\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = ['2','3','5','7','B','D'];\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(hex.includes(num[i])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let hex = {\n        '0': 0,\n        '1': 1,\n\
    \        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6':\
    \ 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n  \
    \      'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n      \
    \  'F': 15\n    }\n    let count = 0;\n    for(let i = 0; i < num.length; i++){\n\
    \        if(primes.includes(hex[num[i]])){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count\
    \ = 0;\n    let hex = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    for(let i = 0;\
    \ i < num.length; i++){\n        if(hex[num[i]]){\n            if(hex[num[i]]\
    \ === 11 || hex[num[i]] === 13){\n                count++;\n            }\n  \
    \      }\n        else if(num[i] === '2' || num[i] === '3' || num[i] === '5' ||\
    \ num[i] === '7'){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var primes\
    \ = [2,3,5,7,11,13];\n    var count = 0;\n    for(var i = 0; i < num.length; i++){\n\
    \        if(primes.indexOf(parseInt(num[i], 16)) !== -1){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748834
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let hex =\
    \ {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n    \
    \    '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8':\
    \ 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n\
    \        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < num.length; i++){\n        if(hex[num[i]] === 2 || hex[num[i]]\
    \ === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]]\
    \ === 13){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"\
    1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\"\
    )\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for(let i = 0; i < num.length;\
    \ i++){\n        if(primes.includes(parseInt(num[i], 16))){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
