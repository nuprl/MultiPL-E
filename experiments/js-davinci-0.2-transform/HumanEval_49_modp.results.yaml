language: js
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  else if(n == 1){\n    return n;\n  }\n  else{\n    return (modp(n-1,\
    \ p) * n) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp2d48vsn5.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2d48vsn5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n==0){\n     \
    \   return 1;\n    }\n    if(n%2==0){\n        return modp(n/2, p)**2 % p;\n \
    \   }\n    else{\n        return modp(n-1, p)*2 % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return modp(n-1,\
    \ p) * modp(n+1, p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2566doeq.js:13\n  if(n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp2566doeq.js:13:3)\n    at modp (/tmp/tmp2566doeq.js:19:10)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpzwauxax4.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwauxax4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}else{\n\t\t\
    return modp(n-1, p) * modp(n, p) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpckf17cc8.js:13\n\tif(n == 0) return 1;\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpckf17cc8.js:13:2)\n    at modp\
    \ (/tmp/tmpckf17cc8.js:17:10)\n    at modp (/tmp/tmpckf17cc8.js:17:25)\n    at\
    \ modp (/tmp/tmpckf17cc8.js:17:25)\n    at modp (/tmp/tmpckf17cc8.js:17:25)\n\
    \    at modp (/tmp/tmpckf17cc8.js:17:25)\n    at modp (/tmp/tmpckf17cc8.js:17:25)\n\
    \    at modp (/tmp/tmpckf17cc8.js:17:25)\n    at modp (/tmp/tmpckf17cc8.js:17:25)\n\
    \    at modp (/tmp/tmpckf17cc8.js:17:25)\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ n * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmhm27erm.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhm27erm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n == 3) return 8;\n\tif(n\
    \ == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6) return 64;\n\tif(n ==\
    \ 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9) return 512;\n\tif(n ==\
    \ 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n == 12) return 4096;\n\t\
    if(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\tif(n == 15) return 32768;\n\
    \tif(n == 16) return 65536;\n\tif(n == 17) return 131072;\n\tif(n == 18) return\
    \ 262144;\n\tif(n == 19) return 524288;\n\tif(n == 20) return 1048576;\n\tif(n\
    \ == 21) return 2097152;\n\tif(n == 22) return 4194304;\n\tif(n == 23) return\
    \ 8388608;\n\tif(n == 24) return 16777216;\n\tif(n == 25) return 33554432;\n\t\
    if(n == 26) return 67108864;\n\tif(n == 27) return 134217728;\n\tif(n == 28) return\
    \ 268435456;\n\tif(n == 29) return 536870912;\n\tif(n == 30) return 1073741824;\n\
    \tif(n == 31) return 2147483648;\n\tif(n == 32) return 4294967296;\n\tif(n ==\
    \ 33) return 8589934592;\n\tif(n == 34) return 17179869184;\n\tif(n == 35) return\
    \ 34359738368;\n\tif(n == 36) return 68719476736;\n\tif(n == 37) return 137438953472;\n\
    \tif(n == 38) return 274877906944;\n\tif(n == 39) return 549\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp_jkjjmp.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1_x1q67n.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1_x1q67n.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  var b = n;\n    while (p > 0) {\n        if ((p & 1) == 1)\n            res\
    \ = (res * b) % 101;\n        p >>= 1;\n        b = (b * b) % 101;\n    }\n  \
    \  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n41\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpzq9o9r5b.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzq9o9r5b.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 41,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ while(n > 0){\n    if(n % 2 == 1){\n      result = (result * 2) % p;\n    }\n\
    \    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpsm_44rvm.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsm_44rvm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeqq_ajuq.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpeqq_ajuq.js:13:5)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpv0hf2b0f.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv0hf2b0f.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    while\
    \ (n > 0){\n        if (n % 2 == 1){\n            r = (r * 2) % p;\n        }\n\
    \        n = Math.floor(n / 2);\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpncj1vdwa.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpncj1vdwa.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    return modp(n-1, p) * modp(1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdvm_edjo.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpdvm_edjo.js:13:5)\n    at modp (/tmp/tmpdvm_edjo.js:19:12)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (2*modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (n*modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp3by1bna1.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3by1bna1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) ** 2)\
    \ % p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9wm1qe45.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp9wm1qe45.js:13:5)\n    at modp (/tmp/tmp9wm1qe45.js:17:17)\n\
    \    at modp (/tmp/tmp9wm1qe45.js:20:32)\n    at modp (/tmp/tmp9wm1qe45.js:17:17)\n\
    \    at modp (/tmp/tmp9wm1qe45.js:20:32)\n    at modp (/tmp/tmp9wm1qe45.js:17:17)\n\
    \    at modp (/tmp/tmp9wm1qe45.js:20:32)\n    at modp (/tmp/tmp9wm1qe45.js:17:17)\n\
    \    at modp (/tmp/tmp9wm1qe45.js:20:32)\n    at modp (/tmp/tmp9wm1qe45.js:17:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (2*modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    } else if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    } else {\n        return (n % p) * modp(n-1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp8zthn6mr.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8zthn6mr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\twhile(n\
    \ > 0){\n\t\tif(n & 1){\n\t\t\tres = (res * n) % p;\n\t\t}\n\t\tn = n >> 1;\n\t\
    \tn = (n * n) % p;\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749295
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return n * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpjh49ggxt.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjh49ggxt.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\twhile(n\
    \ > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\t\t}\n\t\tn = Math.floor(n\
    \ / 2);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpiq2j_ry5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiq2j_ry5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}\n\telse{\n\
    \t\treturn modp(n/2, p) * modp(n/2, p) * 2 % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749295
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpzwauxax4.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwauxax4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n == 1){\n    return 2;\n  }\n  if(n % 2 == 0){\n    return modp(n/2,\
    \ p)**2 % p;\n  }\n  else{\n    return 2 * modp(n-1, p) % p;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\treturn\
    \ (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n == 3) return 8;\n\tif(n\
    \ == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6) return 64;\n\tif(n ==\
    \ 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9) return 512;\n\tif(n ==\
    \ 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n == 12) return 4096;\n\t\
    if(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\tif(n == 15) return 32768;\n\
    \tif(n == 16) return 65536;\n\tif(n == 17) return 131072;\n\tif(n == 18) return\
    \ 262144;\n\tif(n == 19) return 524288;\n\tif(n == 20) return 1048576;\n\tif(n\
    \ == 21) return 2097152;\n\tif(n == 22) return 4194304;\n\tif(n == 23) return\
    \ 8388608;\n\tif(n == 24) return 16777216;\n\tif(n == 25) return 33554432;\n\t\
    if(n == 26) return 67108864;\n\tif(n == 27) return 134217728;\n\tif(n == 28) return\
    \ 268435456;\n\tif(n == 29) return 536870912;\n\tif(n == 30) return 1073741824;\n\
    \tif(n == 31) return 2147483648;\n\tif(n == 32) return 4294967296;\n\tif(n ==\
    \ 33) return 8589934592;\n\tif(n == 34) return 17179869184;\n\tif(n == 35) return\
    \ 34359738368;\n\tif(n == 36) return 68719476736;\n\tif(n == 37) return 137438953472;\n\
    \tif(n == 38) return 274877906944;\n\tif(n == 39) return 549\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp_jkjjmp.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n%2 == 0) return modp(n/2, p)**2 % p;\n\telse return\
    \ 2*modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        var x = modp(n/2, p);\n \
    \       return (x * x) % p;\n    }\n    else{\n        var x = modp((n-1)/2, p);\n\
    \        return (x * x * n) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcpr915go.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcpr915go.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0){\n    \
    \    return modp(n + p, p);\n    }\n    if(n == 0){\n        return 1;\n    }\n\
    \    if(n % 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    return modp(n-1,\
    \ p) * n % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp93tz288e.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp93tz288e.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (modp(n/2, p) * modp(n/2, p) * 2)\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2kxp7sm7.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp2kxp7sm7.js:13:5)\n    at modp (/tmp/tmp2kxp7sm7.js:17:16)\n\
    \    at modp (/tmp/tmp2kxp7sm7.js:20:32)\n    at modp (/tmp/tmp2kxp7sm7.js:17:16)\n\
    \    at modp (/tmp/tmp2kxp7sm7.js:20:32)\n    at modp (/tmp/tmp2kxp7sm7.js:17:16)\n\
    \    at modp (/tmp/tmp2kxp7sm7.js:20:32)\n    at modp (/tmp/tmp2kxp7sm7.js:17:16)\n\
    \    at modp (/tmp/tmp2kxp7sm7.js:20:32)\n    at modp (/tmp/tmp2kxp7sm7.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n == 1){\n    return 2;\n  }\n  if(n % 2 == 0){\n    return Math.pow(modp(n/2,\
    \ p), 2) % p;\n  }\n  else{\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return (modp(n-1, p) * modp(n+1, p)) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgujsgo_6.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpgujsgo_6.js:13:5)\n    at modp (/tmp/tmpgujsgo_6.js:17:16)\n\
    \    at modp (/tmp/tmpgujsgo_6.js:19:28)\n    at modp (/tmp/tmpgujsgo_6.js:17:16)\n\
    \    at modp (/tmp/tmpgujsgo_6.js:19:28)\n    at modp (/tmp/tmpgujsgo_6.js:17:16)\n\
    \    at modp (/tmp/tmpgujsgo_6.js:19:28)\n    at modp (/tmp/tmpgujsgo_6.js:17:16)\n\
    \    at modp (/tmp/tmpgujsgo_6.js:19:28)\n    at modp (/tmp/tmpgujsgo_6.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn\
    \ (t*t) % p;\n\t}\n\telse{\n\t\tvar t = modp(n-1, p);\n\t\treturn (2*t) % p;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ (modp(n-1, p) * 2) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  return modp(n-1, p) * modp(n, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzr3hnt75.js:13\n  if(n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpzr3hnt75.js:13:3)\n    at modp (/tmp/tmpzr3hnt75.js:19:10)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    return modp(n-1, p) * modp(1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdvm_edjo.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpdvm_edjo.js:13:5)\n    at modp (/tmp/tmpdvm_edjo.js:19:12)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \    at modp (/tmp/tmpdvm_edjo.js:19:27)\n    at modp (/tmp/tmpdvm_edjo.js:19:27)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    return (modp(n/2, p) * modp(n/2, p) * 2) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpm5murjyu.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpm5murjyu.js:13:5)\n    at modp (/tmp/tmpm5murjyu.js:19:13)\n\
    \    at modp (/tmp/tmpm5murjyu.js:19:28)\n    at modp (/tmp/tmpm5murjyu.js:19:28)\n\
    \    at modp (/tmp/tmpm5murjyu.js:19:28)\n    at modp (/tmp/tmpm5murjyu.js:19:28)\n\
    \    at modp (/tmp/tmpm5murjyu.js:19:28)\n    at modp (/tmp/tmpm5murjyu.js:19:28)\n\
    \    at modp (/tmp/tmpm5murjyu.js:19:28)\n    at modp (/tmp/tmpm5murjyu.js:19:28)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n75\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxux4j0nw.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxux4j0nw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 75,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n==0) return 1;\n\
    \tif(n%2==0){\n\t\treturn modp(n/2, p)**2 % p;\n\t}\n\telse{\n\t\treturn (modp(n-1,\
    \ p) * modp(n+1, p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpitetpoly.js:13\n\tif(n==0) return 1;\n\t^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmpitetpoly.js:13:2)\n    at modp\
    \ (/tmp/tmpitetpoly.js:15:10)\n    at modp (/tmp/tmpitetpoly.js:18:26)\n    at\
    \ modp (/tmp/tmpitetpoly.js:15:10)\n    at modp (/tmp/tmpitetpoly.js:18:26)\n\
    \    at modp (/tmp/tmpitetpoly.js:15:10)\n    at modp (/tmp/tmpitetpoly.js:18:26)\n\
    \    at modp (/tmp/tmpitetpoly.js:15:10)\n    at modp (/tmp/tmpitetpoly.js:18:26)\n\
    \    at modp (/tmp/tmpitetpoly.js:15:10)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        var x = modp(n/2, p);\n \
    \       return (x * x) % p;\n    }\n    else{\n        var x = modp((n-1)/2, p);\n\
    \        return (x * x * n) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcpr915go.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcpr915go.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var i = 0;\n    while (i < n){\n        result = (result * 2) % p;\n    \
    \    i = i + 1;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (2 * modp(n/2, p) * modp(n/2, p))\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n75\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp99cyjdd5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp99cyjdd5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 75,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0){\n    \
    \    return modp(-n, p);\n    }\n    if(n == 0){\n        return 1;\n    }\n \
    \   if(n % 2 == 0){\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tvar\
    \ b = n;\n\twhile(b > 0){\n\t\tif(b % 2 == 1){\n\t\t\tres = (res * n) % p;\n\t\
    \t}\n\t\tb = Math.floor(b / 2);\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_7v2rgf8.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_7v2rgf8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n == 3) return 8;\n\tif(n\
    \ == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6) return 64;\n\tif(n ==\
    \ 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9) return 512;\n\tif(n ==\
    \ 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n == 12) return 4096;\n\t\
    if(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\tif(n == 15) return 32768;\n\
    \tif(n == 16) return 65536;\n\tif(n == 17) return 131072;\n\tif(n == 18) return\
    \ 262144;\n\tif(n == 19) return 524288;\n\tif(n == 20) return 1048576;\n\tif(n\
    \ == 21) return 2097152;\n\tif(n == 22) return 4194304;\n\tif(n == 23) return\
    \ 8388608;\n\tif(n == 24) return 16777216;\n\tif(n == 25) return 33554432;\n\t\
    if(n == 26) return 67108864;\n\tif(n == 27) return 134217728;\n\tif(n == 28) return\
    \ 268435456;\n\tif(n == 29) return 536870912;\n\tif(n == 30) return 1073741824;\n\
    \tif(n == 31) return 2147483648;\n\tif(n == 32) return 4294967296;\n\tif(n ==\
    \ 33) return 8589934592;\n\tif(n == 34) return 17179869184;\n\tif(n == 35) return\
    \ 34359738368;\n\tif(n == 36) return 68719476736;\n\tif(n == 37) return 137438953472;\n\
    \tif(n == 38) return 274877906944;\n\tif(n == 39) return 549\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp_jkjjmp.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return Math.pow(modp(n/2, p), 2) % p;\n  }\n\
    \  else{\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeqq_ajuq.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpeqq_ajuq.js:13:5)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \    at modp (/tmp/tmpeqq_ajuq.js:20:31)\n    at modp (/tmp/tmpeqq_ajuq.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n % 2 == 0){\n        return modp(n/2, p)\
    \ * modp(n/2, p) % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n,\
    \ p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpdupbi8x2.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpdupbi8x2.js:13:5)\n    at modp (/tmp/tmpdupbi8x2.js:20:16)\n\
    \    at modp (/tmp/tmpdupbi8x2.js:20:31)\n    at modp (/tmp/tmpdupbi8x2.js:20:31)\n\
    \    at modp (/tmp/tmpdupbi8x2.js:20:31)\n    at modp (/tmp/tmpdupbi8x2.js:20:31)\n\
    \    at modp (/tmp/tmpdupbi8x2.js:20:31)\n    at modp (/tmp/tmpdupbi8x2.js:20:31)\n\
    \    at modp (/tmp/tmpdupbi8x2.js:20:31)\n    at modp (/tmp/tmpdupbi8x2.js:20:31)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (n % p) * modp(n-1, p) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptfvajhgv.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptfvajhgv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n % 2 == 0){\n        return modp(n/2, p)\
    \ * modp(n/2, p) % p;\n    }\n    else{\n        return 2 * modp(n-1, p) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc72xhika.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpc72xhika.js:13:5)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n === 1) return n;\n  if (n % 2 === 0) return modp(n/2, p)**2 % p;\n\
    \  return modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4rt2ls49.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4rt2ls49.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (n % p) * modp(n-1, p) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptfvajhgv.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptfvajhgv.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return n;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n\
    \    return (x*x) % p;\n  } else {\n    var x = modp((n-1)/2, p);\n    return\
    \ (x*x*n) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxcmsesa4.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxcmsesa4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2 % p;\n    }\n    if(n\
    \ % 2 == 0){\n        return modp(n / 2, p) ** 2 % p;\n    }\n    else{\n    \
    \    return 2 * modp(n - 1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\
    \t\treturn (2*modp(n-1, p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (2*modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var base = 2;\n\twhile(n > 0){\n\t\tif(n % 2 == 1){\n\t\t\tresult = (result *\
    \ base) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tbase = (base * base) % p;\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc72xhika.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpc72xhika.js:13:5)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (2*modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) return modp(n/2, p)**2 % p;\n  return modp(n-1, p) * modp(n,\
    \ p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplo1i1i4r.js:13\n  if (n == 0) return 1;\n  ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmplo1i1i4r.js:13:3)\n    at modp\
    \ (/tmp/tmplo1i1i4r.js:15:10)\n    at modp (/tmp/tmplo1i1i4r.js:15:25)\n    at\
    \ modp (/tmp/tmplo1i1i4r.js:15:25)\n    at modp (/tmp/tmplo1i1i4r.js:15:25)\n\
    \    at modp (/tmp/tmplo1i1i4r.js:15:25)\n    at modp (/tmp/tmplo1i1i4r.js:15:25)\n\
    \    at modp (/tmp/tmplo1i1i4r.js:15:25)\n    at modp (/tmp/tmplo1i1i4r.js:15:25)\n\
    \    at modp (/tmp/tmplo1i1i4r.js:15:25)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return 2;\n  if (n % 2 == 0) {\n    return (modp(n/2, p) *\
    \ modp(n/2, p)) % p;\n  } else {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n75\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp99cyjdd5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp99cyjdd5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 75,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return modp(n-1,\
    \ p) * modp(n+1, p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2566doeq.js:13\n  if(n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp2566doeq.js:13:3)\n    at modp (/tmp/tmp2566doeq.js:19:10)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \    at modp (/tmp/tmp2566doeq.js:17:12)\n    at modp (/tmp/tmp2566doeq.js:19:25)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n / 2, p) ** 2 % p;\n    }\n    else{\n      \
    \  return modp(n - 1, p) * 2 % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\treturn (2 * modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n < 0){\n    \
    \    return modp(n + p, p);\n    }\n    if(n == 0){\n        return 1;\n    }\n\
    \    if(n == 1){\n        return n;\n    }\n    if(n % 2 == 0){\n        return\
    \ modp(n/2, p)**2 % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n,\
    \ p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1zrc8tdn.js:12\nfunction modp(n, p){\n             ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at modp (/tmp/tmp1zrc8tdn.js:12:14)\n\
    \    at modp (/tmp/tmp1zrc8tdn.js:23:16)\n    at modp (/tmp/tmp1zrc8tdn.js:26:16)\n\
    \    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n\
    \    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n\
    \    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n\
    \    at modp (/tmp/tmp1zrc8tdn.js:26:31)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n%2 == 0){\n        return modp(n/2, p)**2 % p;\n\
    \    }\n    else{\n        return modp(n-1, p)*2 % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    else if(n % 2 === 0){\n        return modp(n/2, p)\
    \ ** 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n==0){\n     \
    \   return 1;\n    }\n    if(n%2==0){\n        return modp(n/2, p)**2 % p;\n \
    \   }\n    else{\n        return 2*modp(n-1, p) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n, p)) %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7rzbzfg1.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp7rzbzfg1.js:13:5)\n    at modp (/tmp/tmp7rzbzfg1.js:20:17)\n\
    \    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n\
    \    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n\
    \    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n\
    \    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n    at modp (/tmp/tmp7rzbzfg1.js:20:32)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n / 2, p) ** 2) % p;\n    }\n    else{\n    \
    \    return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p))\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5wvp700q.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp5wvp700q.js:13:5)\n    at modp (/tmp/tmp5wvp700q.js:17:25)\n\
    \    at modp (/tmp/tmp5wvp700q.js:20:32)\n    at modp (/tmp/tmp5wvp700q.js:17:25)\n\
    \    at modp (/tmp/tmp5wvp700q.js:20:32)\n    at modp (/tmp/tmp5wvp700q.js:17:25)\n\
    \    at modp (/tmp/tmp5wvp700q.js:20:32)\n    at modp (/tmp/tmp5wvp700q.js:17:25)\n\
    \    at modp (/tmp/tmp5wvp700q.js:20:32)\n    at modp (/tmp/tmp5wvp700q.js:17:25)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ var x = n % p;\n  while (n > 0){\n    if (n % 2 == 1){\n      result = (result\
    \ * x) % p;\n    }\n    n = Math.floor(n / 2);\n    x = (x * x) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp7csm929i.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7csm929i.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp1kt7ycrg.js:13\n    if(n === 0){\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmp1kt7ycrg.js:13:5)\n    at modp\
    \ (/tmp/tmp1kt7ycrg.js:17:16)\n    at modp (/tmp/tmp1kt7ycrg.js:19:27)\n    at\
    \ modp (/tmp/tmp1kt7ycrg.js:17:16)\n    at modp (/tmp/tmp1kt7ycrg.js:19:27)\n\
    \    at modp (/tmp/tmp1kt7ycrg.js:17:16)\n    at modp (/tmp/tmp1kt7ycrg.js:19:27)\n\
    \    at modp (/tmp/tmp1kt7ycrg.js:17:16)\n    at modp (/tmp/tmp1kt7ycrg.js:19:27)\n\
    \    at modp (/tmp/tmp1kt7ycrg.js:17:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else{\n        return (2 * modp(n - 1, p)) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  else{\n    return modp(n/2, p) * modp(n/2, p) * 2 % p;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  else{\n    return modp(n/2, p) * modp(n/2, p) * 2 % p;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\telse{\n\t\treturn 2 * modp(n-1, p) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  return modp(n-1, p) * modp(n, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzr3hnt75.js:13\n  if(n == 0){\n  ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpzr3hnt75.js:13:3)\n    at modp (/tmp/tmpzr3hnt75.js:19:10)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \    at modp (/tmp/tmpzr3hnt75.js:19:25)\n    at modp (/tmp/tmpzr3hnt75.js:19:25)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else\
    \ if(n % 2 == 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n    else{\n\
    \        return (n % p) * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpn8qn2w5z.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn8qn2w5z.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\twhile(n\
    \ > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\t\t}\n\t\tn = Math.floor(n\
    \ / 2);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpiq2j_ry5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiq2j_ry5.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    return modp(n-1, p) * modp(n, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4ipx9kvv.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp4ipx9kvv.js:13:5)\n    at modp (/tmp/tmp4ipx9kvv.js:19:12)\n\
    \    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n\
    \    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n\
    \    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n\
    \    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n    at modp (/tmp/tmp4ipx9kvv.js:19:27)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  else{\n    return modp(n/2, p) * modp(n/2, p) * 2 % p;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659749296
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n==0){\n     \
    \   return 1;\n    }\n    if(n%2==0){\n        return (modp(n/2, p)**2)%p;\n \
    \   }\n    else{\n        return (modp(n-1, p)*2)%p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    while\
    \ (n > 0){\n        if (n % 2 == 1){\n            r = (r * 2) % p;\n        }\n\
    \        n = Math.floor(n / 2);\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpncj1vdwa.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpncj1vdwa.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2 % p;\n    }\n    var\
    \ half = modp(n/2, p);\n    if(n % 2 == 0){\n        return (half * half) % p;\n\
    \    }\n    else{\n        return (half * half * 2) % p;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n34\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqbd5wiyg.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqbd5wiyg.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 34,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    var r = modp(Math.floor(n/2), p);\n    if(n % 2 ==\
    \ 0){\n        return (r*r) % p;\n    }\n    else{\n        return (2*r*r) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n-1, p) * 2 % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpooe_zudb.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpooe_zudb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tvar\
    \ a = 2;\n\tvar b = n;\n\twhile (b > 0){\n\t\tif (b % 2 == 1){\n\t\t\tres = (res\
    \ * a) % p;\n\t\t}\n\t\ta = (a * a) % p;\n\t\tb = Math.floor(b / 2);\n\t}\n\t\
    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++){\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n;\n\tif(n % 2 === 0){\n\t\treturn Math.pow(modp(n/2,\
    \ p), 2) % p;\n\t}\n\telse{\n\t\treturn (n % p) * modp(n-1, p) % p;\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n94\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1l3infxi.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1l3infxi.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 94,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else{\n\
    \        return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpn2zsa0us.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn2zsa0us.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2 % p;\n    }\n    if(n\
    \ % 2 == 0){\n        return modp(n/2, p) * modp(n/2, p) % p;\n    }\n    else{\n\
    \        return modp(n-1, p) * modp(1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749292
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpc72xhika.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpc72xhika.js:13:5)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \    at modp (/tmp/tmpc72xhika.js:19:27)\n    at modp (/tmp/tmpc72xhika.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjpcv3s2p.js:13\n    if(n == 0){\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpjpcv3s2p.js:13:5)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \    at modp (/tmp/tmpjpcv3s2p.js:20:31)\n    at modp (/tmp/tmpjpcv3s2p.js:17:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n == 1){\n    return 2 % p;\n  }\n  if(n % 2 == 0){\n    var x\
    \ = modp(n/2, p);\n    return (x * x) % p;\n  }\n  else{\n    var x = modp((n-1)/2,\
    \ p);\n    return (2 * x * x) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r) % p;\n\t}\n\telse{\n\
    \t\tvar r = modp((n-1)/2, p);\n\t\treturn (2*r*r) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    return modp(n/2, p) * modp(n/2, p) % p;\n  } else\
    \ {\n    return modp(n-1, p) * 2 % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
