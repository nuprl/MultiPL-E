language: js
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(e){\n\
    \        return e + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(e){\n\
    \        return e + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var incr = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        incr.push(l[i] + 1);\n    }\n    return\
    \ incr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_list = [];\n  \
    \  for(var i = 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n    }\n\
    \    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
