name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    var i = 2;\n    while (i <= n){\n        if (n % i == 0){\n   \
    \         n /= i;\n        }\n        else{\n            i++;\n        }\n   \
    \ }\n    return i;\n}\n", "    var i = 2;\n    while (i <= n){\n        if (n\
    \ % i == 0){\n            n /= i;\n        }\n        else{\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n    while (i <=\
    \ n){\n        if (n % i == 0){\n            n /= i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    var i\
    \ = 2;\n    while (i <= n){\n        if (n % i == 0){\n            n /= i;\n \
    \       }\n        else{\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    var i = 2;\n    while (i <= n){\n        if (n % i == 0){\n       \
    \     n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n\
    \    return i;\n}\n", "    var i = 2;\n    while (i <= n){\n        if (n % i\
    \ == 0){\n            n /= i;\n        }\n        else{\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n", "    var i = 2;\n    while (i <= n){\n \
    \       if (n % i == 0){\n            n /= i;\n        }\n        else{\n    \
    \        i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n  \
    \  while (i <= n){\n        if (n % i == 0){\n            n /= i;\n        }\n\
    \        else{\n            i++;\n        }\n    }\n    return i;\n}\n", "\tvar\
    \ i = 2;\n\twhile(i <= n){\n\t\tif(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n", "    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n    while\
    \ (i <= n){\n        if (n % i == 0){\n            n /= i;\n        }\n      \
    \  else{\n            i++;\n        }\n    }\n    return i;\n}\n", "  var i =\
    \ 2;\n  while (i <= n){\n    if (n % i == 0){\n      n /= i;\n    }\n    else{\n\
    \      i++;\n    }\n  }\n  return i;\n}\n", "    let i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return i;\n}\n", "  var i = 2;\n  while (i\
    \ <= n){\n    if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n\
    \    }\n  }\n  return i;\n}\n", "    var i = 2;\n    while (i <= n){\n       \
    \ if (n % i == 0){\n            n /= i;\n        }\n        else{\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    var i = 2;\n    while (i\
    \ <= n){\n        if (n % i == 0){\n            n /= i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "  var factors = [];\n\
    \  var i = 2;\n  while (n > 1){\n    if (n % i == 0){\n      factors.push(i);\n\
    \      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n  return factors[factors.length\
    \ - 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
