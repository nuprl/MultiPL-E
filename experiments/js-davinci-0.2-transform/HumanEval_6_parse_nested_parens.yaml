name: HumanEval_6_parse_nested_parens
language: js
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
  \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
completions: ["  var paren_array = paren_string.split(\" \");\n  var result = [];\n\
    \  for(var i = 0; i < paren_array.length; i++){\n    var paren_count = 0;\n  \
    \  var max_paren_count = 0;\n    for(var j = 0; j < paren_array[i].length; j++){\n\
    \      if(paren_array[i][j] == \"(\"){\n        paren_count++;\n        if(paren_count\
    \ > max_paren_count){\n          max_paren_count = paren_count;\n        }\n \
    \     }\n      else if(paren_array[i][j] == \")\"){\n        paren_count--;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_depth = 0;\n   \
    \     var depth = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == \"(\"){\n                depth++;\n                if(depth\
    \ > max_depth){\n                    max_depth = depth;\n                }\n \
    \           }\n            else if(paren[j] == \")\"){\n                depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for(let\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ===\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_list = paren_string.split(\"\
    \ \");\n    var paren_depth = [];\n    for (var i = 0; i < paren_list.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for (var j = 0; j < paren_list[i].length; j++){\n            if (paren_list[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if (paren_list[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        paren_depth.push(max_paren_count);\n\
    \    }\n    return paren_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(' ');\n    var paren_count\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++){\n        var paren_count_temp\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                paren_count_temp++;\n      \
    \      }\n        }\n        paren_count.push(paren_count_temp);\n    }\n    return\
    \ paren_count;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let\
    \ result = [];\n    for(let i = 0; i < paren_array.length; i++){\n        let\
    \ paren_count = 0;\n        let max_paren_count = 0;\n        for(let j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] === \"(\"){\n\
    \                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(paren[j] ==\
    \ \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for(let\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ===\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_nested_parens_helper(paren_array[i]));\n    }\n   \
    \ return result;\n}\n", "\tvar paren_array = paren_string.split(\" \");\n\tvar\
    \ result = [];\n\tfor(var i = 0; i < paren_array.length; i++){\n\t\tresult.push(paren_array[i].split(\"\
    \").reduce(function(acc, curr){\n\t\t\tif(curr === \"(\"){\n\t\t\t\treturn acc\
    \ + 1;\n\t\t\t}else if(curr === \")\"){\n\t\t\t\treturn acc - 1;\n\t\t\t}\n\t\t\
    }, 0));\n\t}\n\treturn result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var count =\
    \ 0;\n        var max = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                count++;\n\
    \                if(count > max){\n                    max = count;\n        \
    \        }\n            }\n            else if(paren_array[i][j] == \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var paren_count = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count_temp = 0;\n        var paren_temp = paren_array[i];\n\
    \        for(var j = 0; j < paren_temp.length; j++){\n            if(paren_temp[j]\
    \ === \"(\"){\n                paren_count_temp++;\n            }\n        }\n\
    \        paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        result.push(parse_single_paren(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_nested_parens_helper(paren_array[i]));\n    }\n   \
    \ return result;\n}\n", "    var paren_array = paren_string.split(\" \");\n  \
    \  var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n      \
    \  var paren_count = 0;\n        var max_paren_count = 0;\n        for(var j =\
    \ 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let result\
    \ = [];\n    for(let i = 0; i < paren_array.length; i++){\n        let paren_count\
    \ = 0;\n        let max_paren_count = 0;\n        for(let j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] === \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                paren_count--;\n            }\n        }\n    \
    \    result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n       \
    \ var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    // your code here\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for (var i = 0; i <\
    \ paren_array.length; i++) {\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] == \"(\") {\n                paren_count++;\n       \
    \         if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ == \")\") {\n                paren_count--;\n            }\n        }\n    \
    \    result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n       \
    \ var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var parens = paren_string.split(\" \");\n\
    \    var result = [];\n    for(var i = 0; i < parens.length; i++){\n        var\
    \ paren = parens[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(paren[j] ==\
    \ \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }else if(paren_array[i][j] == \")\"){\n          \
    \      paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n\
    \        var count = 0;\n        var max_count = 0;\n        for(var j = 0; j\
    \ < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n    \
    \            count++;\n                if(count > max_count){\n              \
    \      max_count = count;\n                }\n            }\n            else\
    \ if(paren_group[j] == \")\"){\n                count--;\n            }\n    \
    \    }\n        result.push(max_count);\n    }\n    return result;\n}\n", "  \
    \  let paren_array = paren_string.split(\" \");\n    let result = [];\n    for(let\
    \ i = 0; i < paren_array.length; i++){\n        let paren = paren_array[i];\n\
    \        let max = 0;\n        let count = 0;\n        for(let j = 0; j < paren.length;\
    \ j++){\n            if(paren[j] === \"(\"){\n                count++;\n     \
    \           if(count > max){\n                    max = count;\n             \
    \   }\n            }\n            else if(paren[j] === \")\"){\n             \
    \   count--;\n            }\n        }\n        result.push(max);\n    }\n   \
    \ return result;\n}\n", "    var paren_array = paren_string.split(\" \");\n  \
    \  var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n      \
    \  result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n}\n",
  "    let result = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let\
    \ i = 0; i < paren_groups.length; i++){\n        let current_group = paren_groups[i];\n\
    \        let current_level = 0;\n        let max_level = 0;\n        for(let j\
    \ = 0; j < current_group.length; j++){\n            if(current_group[j] === \"\
    (\"){\n                current_level++;\n                if(current_level > max_level){\n\
    \                    max_level = current_level;\n                }\n         \
    \   }\n            else if(current_group[j] === \")\"){\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_arr\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_arr.length;\
    \ i++){\n        var paren = paren_arr[i];\n        var max = 0;\n        var\
    \ count = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var max = 0;\n        var count\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var parens\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var max = 0;\n        var count\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }else if(paren[j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "  let paren_array\
    \ = paren_string.split(' ');\n  let result = [];\n  for(let i = 0; i < paren_array.length;\
    \ i++){\n    let count = 0;\n    let max = 0;\n    for(let j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] === '('){\n        count++;\n        if(count\
    \ > max){\n          max = count;\n        }\n      }\n      if(paren_array[i][j]\
    \ === ')'){\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var paren_count = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max_count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                count++;\n                if(count > max_count){\n    \
    \                max_count = count;\n                }\n            }\n      \
    \      else if(paren_array[i][j] == \")\"){\n                count--;\n      \
    \      }\n        }\n        paren_count.push(max_count);\n    }\n    return paren_count;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let parens\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < parens.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < parens[i].length; j++){\n            if(parens[i][j] === \"(\"){\n     \
    \           count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(parens[i][j]\
    \ === \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var max_depth\
    \ = 0;\n    var max_depth_array = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_depth = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_depth++;\n\
    \            }\n            else if(paren_array[i][j] == \")\"){\n           \
    \     paren_depth--;\n            }\n        }\n        max_depth_array.push(paren_depth);\n\
    \    }\n    return max_depth_array;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var count = 0;\n        var\
    \ max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n           \
    \ if(paren_group[j] == \"(\"){\n                count++;\n                if(count\
    \ > max){\n                    max = count;\n                }\n            }\n\
    \            else if(paren_group[j] == \")\"){\n                count--;\n   \
    \         }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "  var paren_array = paren_string.split(\" \");\n  var result = [];\n  for(var\
    \ i = 0; i < paren_array.length; i++){\n    var paren_count = 0;\n    var max_paren_count\
    \ = 0;\n    for(var j = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j]\
    \ == \"(\"){\n        paren_count++;\n        if(paren_count > max_paren_count){\n\
    \          max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       var paren = paren_array[i];\n        var count = 0;\n        var max =\
    \ 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "  var paren_array\
    \ = paren_string.split(\" \");\n  var paren_count = [];\n  for (var i = 0; i <\
    \ paren_array.length; i++){\n    var paren_count_temp = 0;\n    for (var j = 0;\
    \ j < paren_array[i].length; j++){\n      if (paren_array[i][j] == \"(\"){\n \
    \       paren_count_temp++;\n      }\n    }\n    paren_count.push(paren_count_temp);\n\
    \  }\n  return paren_count;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_stack = [];\n        let paren_count = 0;\n       \
    \ for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_stack.push(paren_array[i][j]);\n        \
    \        paren_count++;\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                paren_stack.pop();\n            }\n        }\n\
    \        result.push(paren_count);\n    }\n    return result;\n}\n", "    var\
    \ paren_array = paren_string.split(' ');\n    var result = [];\n    for(var i\
    \ = 0; i < paren_array.length; i++){\n        result.push(count_nested_parens(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var parens\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for(var i = 0;\
    \ i < parens.length; i++){\n        max_nesting.push(get_max_nesting(parens[i]));\n\
    \    }\n    return max_nesting;\n}\n", "    let result = [];\n    let paren_groups\
    \ = paren_string.split(\" \");\n    for(let i = 0; i < paren_groups.length; i++){\n\
    \        let paren_group = paren_groups[i];\n        let max_level = 0;\n    \
    \    let level = 0;\n        for(let j = 0; j < paren_group.length; j++){\n  \
    \          if(paren_group[j] === \"(\"){\n                level++;\n         \
    \       if(level > max_level){\n                    max_level = level;\n     \
    \           }\n            }\n            else if(paren_group[j] === \")\"){\n\
    \                level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n", "    let paren_groups = paren_string.split(\"\
    \ \");\n    let paren_levels = [];\n    for (let i = 0; i < paren_groups.length;\
    \ i++){\n        let paren_group = paren_groups[i];\n        let paren_level =\
    \ 0;\n        let max_paren_level = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++){\n            if (paren_group[j] === \"(\"){\n                paren_level++;\n\
    \                if (paren_level > max_paren_level){\n                    max_paren_level\
    \ = paren_level;\n                }\n            }\n            else if (paren_group[j]\
    \ === \")\"){\n                paren_level--;\n            }\n        }\n    \
    \    paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n       \
    \ var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_group = paren_array[i];\n        var count = 0;\n        var\
    \ max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n           \
    \ if(paren_group[j] == \"(\"){\n                count++;\n                if(count\
    \ > max){\n                    max = count;\n                }\n            }\n\
    \            else if(paren_group[j] == \")\"){\n                count--;\n   \
    \         }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_level = 0;\n\
    \        var current_level = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                current_level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_nested_parens_helper(paren_array[i]));\n    }\n   \
    \ return result;\n}\n", "    var paren_array = paren_string.split(\" \");\n  \
    \  var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n      \
    \  var paren_count = 0;\n        var max_paren_count = 0;\n        for(var j =\
    \ 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let result\
    \ = [];\n    for(let i = 0; i < paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var parens = paren_string.split(' ');\n\
    \    var result = [];\n    for(var i = 0; i < parens.length; i++){\n        var\
    \ paren = parens[i];\n        var max_depth = 0;\n        var depth = 0;\n   \
    \     for(var j = 0; j < paren.length; j++){\n            if(paren[j] == '('){\n\
    \                depth++;\n                if(depth > max_depth){\n          \
    \          max_depth = depth;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                depth--;\n            }\n        }\n \
    \       result.push(max_depth);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max_count = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == '('){\n                count++;\n                if(count\
    \ > max_count){\n                    max_count = count;\n                }\n \
    \           }\n            else if(paren[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n", "    let paren_arr = paren_string.split(\" \");\n    let paren_levels\
    \ = [];\n    for(let i = 0; i < paren_arr.length; i++){\n        let paren = paren_arr[i];\n\
    \        let paren_level = 0;\n        let max_level = 0;\n        for(let j =\
    \ 0; j < paren.length; j++){\n            if(paren[j] === \"(\"){\n          \
    \      paren_level++;\n                if(paren_level > max_level){\n        \
    \            max_level = paren_level;\n                }\n            }\n    \
    \        else if(paren[j] === \")\"){\n                paren_level--;\n      \
    \      }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n", "    var parens = paren_string.split(\" \");\n    var max_depth\
    \ = 0;\n    var max_depth_list = [];\n    for(var i = 0; i < parens.length; i++){\n\
    \        var paren = parens[i];\n        var depth = 0;\n        for(var j = 0;\
    \ j < paren.length; j++){\n            if(paren[j] == \"(\"){\n              \
    \  depth++;\n            }\n            else if(paren[j] == \")\"){\n        \
    \        depth--;\n            }\n        }\n        max_depth_list.push(depth);\n\
    \    }\n    return max_depth_list;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let max_depth\
    \ = 0;\n    let depth = 0;\n    let max_depth_array = [];\n    for(let i = 0;\
    \ i < paren_array.length; i++){\n        for(let j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] === \"(\"){\n                depth++;\n\
    \            }\n            else if(paren_array[i][j] === \")\"){\n          \
    \      depth--;\n            }\n            if(depth > max_depth){\n         \
    \       max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var count = 0;\n  \
    \      var max = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] == \"(\"){\n                count++;\n     \
    \           if(count > max){\n                    max = count;\n             \
    \   }\n            }\n            else if(paren_array[i][j] == \")\"){\n     \
    \           count--;\n            }\n        }\n        result.push(max);\n  \
    \  }\n    return result;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    let paren_array = paren_string.split(\" \");\n    let max_nested_parens\
    \ = [];\n    for(let i = 0; i < paren_array.length; i++){\n        let paren_count\
    \ = 0;\n        let max_paren_count = 0;\n        for(let j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] === \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                paren_count--;\n            }\n        }\n    \
    \    max_nested_parens.push(max_paren_count);\n    }\n    return max_nested_parens;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren = paren_array[i];\n\
    \        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length;\
    \ j++){\n            if(paren[j] == \"(\"){\n                count++;\n      \
    \          if(count > max){\n                    max = count;\n              \
    \  }\n            }\n            else if(paren[j] == \")\"){\n               \
    \ count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let result\
    \ = [];\n    for(let i = 0; i < paren_array.length; i++){\n        let paren_group\
    \ = paren_array[i];\n        let count = 0;\n        let max_count = 0;\n    \
    \    for(let j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ === \"(\"){\n                count++;\n                if(count > max_count){\n\
    \                    max_count = count;\n                }\n            }\n  \
    \          else if(paren_group[j] === \")\"){\n                count--;\n    \
    \        }\n        }\n        result.push(max_count);\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(paren[j] ==\
    \ \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_count = 0;\n        for(var j =\
    \ 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                paren_count++;\n                if(paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count += 1;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                paren_count -= 1;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "  var paren_array = paren_string.split(\" \"\
    );\n  var result = [];\n  for(var i = 0; i < paren_array.length; i++){\n    result.push(get_nested_parens(paren_array[i]));\n\
    \  }\n  return result;\n}\n", "    let result = [];\n    let paren_groups = paren_string.split(\"\
    \ \");\n    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting = 0;\n        let current_nesting\
    \ = 0;\n        for(let j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ === \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > max_nesting){\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            else if(paren_group[j] === \")\"){\n\
    \                current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var result = [];\n    var paren_array = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }else if(paren[j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var max_depth = 0;\n    var depth = 0;\n    var max_depth_array =\
    \ [];\n    for (var i = 0; i < paren_array.length; i++){\n        for (var j =\
    \ 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j] == \"\
    (\"){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == \")\"){\n                depth--;\n            }\n            if (depth >\
    \ max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        max_depth_array.push(max_depth);\n        max_depth = 0;\n        depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let count = 0;\n        let max = 0;\n        for(let j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] === \"(\"){\n                count++;\n\
    \                if(count > max){\n                    max = count;\n        \
    \        }\n            }\n            else if(paren_array[i][j] === \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let current_paren = paren_array[i];\n        let count = 0;\n       \
    \ let max_count = 0;\n        for(let j = 0; j < current_paren.length; j++){\n\
    \            if(current_paren[j] === \"(\"){\n                count++;\n     \
    \           if(count > max_count){\n                    max_count = count;\n \
    \               }\n            }\n            else if(current_paren[j] === \"\
    )\"){\n                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var max_nesting = 0;\n        var current_nesting =\
    \ 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                current_nesting++;\n                if(current_nesting\
    \ > max_nesting){\n                    max_nesting = current_nesting;\n      \
    \          }\n            }\n            else if(paren[j] == \")\"){\n       \
    \         current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n", "  var parens = paren_string.split(' ');\n \
    \ var max_depth = 0;\n  var depths = [];\n  for (var i = 0; i < parens.length;\
    \ i++){\n    var paren = parens[i];\n    var depth = 0;\n    for (var j = 0; j\
    \ < paren.length; j++){\n      if (paren[j] == '('){\n        depth++;\n     \
    \ } else if (paren[j] == ')'){\n        depth--;\n      }\n    }\n    depths.push(depth);\n\
    \  }\n  return depths;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       var paren_group = paren_array[i];\n        var count = 0;\n        var\
    \ max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n     \
    \       if(paren_group[j] == \"(\"){\n                count++;\n             \
    \   if(count > max_count){\n                    max_count = count;\n         \
    \       }\n            }\n            else if(paren_group[j] == \")\"){\n    \
    \            count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var count = 0;\n        var max_count = 0;\n      \
    \  for(var j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n\
    \                count++;\n                if(count > max_count){\n          \
    \          max_count = count;\n                }\n            }\n            else\
    \ if(paren[j] == \")\"){\n                count--;\n            }\n        }\n\
    \        result.push(max_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(paren[j] ==\
    \ \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        var max_count = 0;\n        for (var j\
    \ = 0; j < paren_group.length; j++){\n            if (paren_group[j] == \"(\"\
    ){\n                paren_count += 1;\n                if (paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if (paren_group[j] == \")\"){\n                paren_count\
    \ -= 1;\n            }\n        }\n        max_nesting.push(max_count);\n    }\n\
    \    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\" \"\
    );\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n \
    \       var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren = paren_array[i];\n        var max_level = 0;\n        var\
    \ level = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                level++;\n                if(level > max_level){\n\
    \                    max_level = level;\n                }\n            }\n  \
    \          else if(paren[j] == \")\"){\n                level--;\n           \
    \ }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n",
  "    let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group =\
    \ paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for(let j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ === \"(\"){\n                current_nesting_level++;\n            }\n     \
    \       else if(paren_group[j] === \")\"){\n                current_nesting_level--;\n\
    \            }\n            if(current_nesting_level > max_nesting_level){\n \
    \               max_nesting_level = current_nesting_level;\n            }\n  \
    \      }\n        max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n\
    }\n", "    let result = [];\n    let paren_groups = paren_string.split(\" \");\n\
    \    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group =\
    \ paren_groups[i];\n        let max_depth = 0;\n        let depth = 0;\n     \
    \   for(let j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ === \"(\"){\n                depth++;\n                if(depth > max_depth){\n\
    \                    max_depth = depth;\n                }\n            }else\
    \ if(paren_group[j] === \")\"){\n                depth--;\n            }\n   \
    \     }\n        result.push(max_depth);\n    }\n    return result;\n}\n", " \
    \   var parens = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < parens.length; i++){\n        var paren = parens[i];\n        var\
    \ count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length; j++){\n\
    \            if(paren[j] == \"(\"){\n                count++;\n              \
    \  if(count > max){\n                    max = count;\n                }\n   \
    \         }\n            else if(paren[j] == \")\"){\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        result.push(get_max_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(' ');\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == '('){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var parens\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let paren = paren_array[i];\n        let count = 0;\n        let max\
    \ = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === \"(\"){\n                count++;\n                if(count > max){\n  \
    \                  max = count;\n                }\n            }\n          \
    \  else if(paren[j] === \")\"){\n                count--;\n            }\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n", "    var\
    \ paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_string = paren_array[i];\n\
    \        var count = 0;\n        var max_count = 0;\n        for(var j = 0; j\
    \ < paren_string.length; j++){\n            if(paren_string[j] == \"(\"){\n  \
    \              count++;\n                if(count > max_count){\n            \
    \        max_count = count;\n                }\n            }\n            else\
    \ if(paren_string[j] == \")\"){\n                count--;\n            }\n   \
    \     }\n        result.push(max_count);\n    }\n    return result;\n}\n", " \
    \   var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        result.push(parse_parens(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var output = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        output.push(max_paren_count);\n    }\n    return\
    \ output;\n}\n", "  var paren_array = paren_string.split(\" \");\n  var result\
    \ = [];\n  for(var i = 0; i < paren_array.length; i++){\n    var paren_group =\
    \ paren_array[i];\n    var count = 0;\n    var max_count = 0;\n    for(var j =\
    \ 0; j < paren_group.length; j++){\n      if(paren_group[j] == \"(\"){\n     \
    \   count++;\n        if(count > max_count){\n          max_count = count;\n \
    \       }\n      }\n      else if(paren_group[j] == \")\"){\n        count--;\n\
    \      }\n    }\n    result.push(max_count);\n  }\n  return result;\n}\n", " \
    \   var paren_groups = paren_string.split(\" \");\n    var max_nesting = [];\n\
    \    for (var i = 0; i < paren_groups.length; i++){\n        var paren_group =\
    \ paren_groups[i];\n        var nesting = 0;\n        var max_nesting_for_group\
    \ = 0;\n        for (var j = 0; j < paren_group.length; j++){\n            if\
    \ (paren_group[j] == \"(\"){\n                nesting += 1;\n            }\n \
    \           else if (paren_group[j] == \")\"){\n                nesting -= 1;\n\
    \            }\n            if (nesting > max_nesting_for_group){\n          \
    \      max_nesting_for_group = nesting;\n            }\n        }\n        max_nesting.push(max_nesting_for_group);\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split('\
    \ ');\n    var max_nesting = [];\n    for (var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_count = 0;\n        for\
    \ (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if (paren_count >\
    \ max_count){\n                    max_count = paren_count;\n                }\n\
    \            }\n            else if (paren_array[i][j] == ')'){\n            \
    \    paren_count--;\n            }\n        }\n        max_nesting.push(max_count);\n\
    \    }\n    return max_nesting;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var max_count = 0;\n        var count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                count++;\n                if(count > max_count){\n    \
    \                max_count = count;\n                }\n            }\n      \
    \      else if(paren_array[i][j] == \")\"){\n                count--;\n      \
    \      }\n        }\n        result.push(max_count);\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n", "    var paren_arr\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_arr.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_arr[i].length; j++){\n            if(paren_arr[i][j] == \"(\"){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_arr[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        result.push(get_max_nesting(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "  var paren_array = paren_string.split(\" \"\
    );\n  var result = [];\n  for(var i = 0; i < paren_array.length; i++){\n    var\
    \ paren_count = 0;\n    var max_paren_count = 0;\n    for(var j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] == \"(\"){\n        paren_count++;\n     \
    \   if(paren_count > max_paren_count){\n          max_paren_count = paren_count;\n\
    \        }\n      }\n      else if(paren_array[i][j] == \")\"){\n        paren_count--;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n\
    \        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                count++;\n\
    \                if(count > max){\n                    max = count;\n        \
    \        }\n            }\n            else if(paren_group[j] == \")\"){\n   \
    \             count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var paren_count = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        paren_count.push(max);\n\
    \    }\n    return paren_count;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_nested_parens_helper(paren_array[i]));\n    }\n   \
    \ return result;\n}\n", "    var paren_array = paren_string.split(\" \");\n  \
    \  var max_depth = 0;\n    var depth = 0;\n    var max_depth_array = [];\n   \
    \ for (var i = 0; i < paren_array.length; i++){\n        for (var j = 0; j < paren_array[i].length;\
    \ j++){\n            if (paren_array[i][j] == \"(\"){\n                depth++;\n\
    \            }\n            else if (paren_array[i][j] == \")\"){\n          \
    \      depth--;\n            }\n            if (depth > max_depth){\n        \
    \        max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_nested_parens_helper(paren_array[i]));\n    }\n   \
    \ return result;\n}\n", "    var paren_array = paren_string.split(\" \");\n  \
    \  var output = [];\n    for(var i = 0; i < paren_array.length; i++){\n      \
    \  var paren_group = paren_array[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren_group[j] == \")\"){\n                count--;\n            }\n\
    \        }\n        output.push(max);\n    }\n    return output;\n}\n", "    let\
    \ result = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let\
    \ i = 0; i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_depth = 0;\n        let current_depth = 0;\n        for(let j\
    \ = 0; j < paren_group.length; j++){\n            if(paren_group[j] === \"(\"\
    ){\n                current_depth++;\n                if(current_depth > max_depth){\n\
    \                    max_depth = current_depth;\n                }\n         \
    \   }\n            else if(paren_group[j] === \")\"){\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var max_nesting_level = 0;\n        var current_nesting_level = 0;\n\
    \        for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j]\
    \ == \"(\"){\n                current_nesting_level++;\n                if (current_nesting_level\
    \ > max_nesting_level){\n                    max_nesting_level = current_nesting_level;\n\
    \                }\n            }\n            else if (paren_group[j] == \")\"\
    ){\n                current_nesting_level--;\n            }\n        }\n     \
    \   max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var count =\
    \ 0;\n        var max = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                count++;\n\
    \                if(count > max){\n                    max = count;\n        \
    \        }\n            }\n            else if(paren_array[i][j] == \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var max_levels\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var level = 0;\n        var max_level = 0;\n    \
    \    for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j]\
    \ == \"(\"){\n                level++;\n                if (level > max_level){\n\
    \                    max_level = level;\n                }\n            }\n  \
    \          else if (paren_group[j] == \")\"){\n                level--;\n    \
    \        }\n        }\n        max_levels.push(max_level);\n    }\n    return\
    \ max_levels;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var\
    \ result = [];\n    for(var i = 0; i < paren_array.length; i++){\n        result.push(find_max_nested_parens(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        result.push(get_nested_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    let result = [];\n    let paren_array = paren_string.split(\" \");\n\
    \    for(let i = 0; i < paren_array.length; i++){\n        let temp = paren_array[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for(let j = 0; j\
    \ < temp.length; j++){\n            if(temp[j] === \"(\"){\n                count++;\n\
    \                if(count > max_count){\n                    max_count = count;\n\
    \                }\n            }\n            else if(temp[j] === \")\"){\n \
    \               count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(get_nested_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n\
    \        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        result.push(parse_parens(paren_array[i]));\n    }\n    return result;\n\
    }\n", "    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for(var i = 0; i < paren_array.length; i++){\n        var paren = paren_array[i];\n\
    \        var count = 0;\n        var max = 0;\n        for(var j = 0; j < paren.length;\
    \ j++){\n            if(paren[j] == \"(\"){\n                count++;\n      \
    \          if(count > max){\n                    max = count;\n              \
    \  }\n            }\n            else if(paren[j] == \")\"){\n               \
    \ count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "  var paren_array = paren_string.split(\" \");\n  var result\
    \ = [];\n  for(var i = 0; i < paren_array.length; i++){\n    var paren_count =\
    \ 0;\n    var max_paren_count = 0;\n    for(var j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] == \"(\"){\n        paren_count++;\n     \
    \   if(paren_count > max_paren_count){\n          max_paren_count = paren_count;\n\
    \        }\n      }\n      else if(paren_array[i][j] == \")\"){\n        paren_count--;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n",
  "    var paren_array = paren_string.split(' ');\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n       \
    \ var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == '('){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var paren_depth = [];\n    for (var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if (paren_array[i][j] == \"\
    )\"){\n                paren_count--;\n            }\n        }\n        paren_depth.push(max_paren_count);\n\
    \    }\n    return paren_depth;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
