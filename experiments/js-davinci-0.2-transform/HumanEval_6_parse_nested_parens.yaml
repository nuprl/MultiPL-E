name: HumanEval_6_parse_nested_parens
language: js
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
  \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
completions: ["  var paren_array = paren_string.split(\" \");\n  var result = [];\n\
    \  for(var i = 0; i < paren_array.length; i++){\n    var paren_count = 0;\n  \
    \  var max_paren_count = 0;\n    for(var j = 0; j < paren_array[i].length; j++){\n\
    \      if(paren_array[i][j] == \"(\"){\n        paren_count++;\n        if(paren_count\
    \ > max_paren_count){\n          max_paren_count = paren_count;\n        }\n \
    \     }\n      else if(paren_array[i][j] == \")\"){\n        paren_count--;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n",
  "    var paren_array = paren_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_depth = 0;\n   \
    \     var depth = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == \"(\"){\n                depth++;\n                if(depth\
    \ > max_depth){\n                    max_depth = depth;\n                }\n \
    \           }\n            else if(paren[j] == \")\"){\n                depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_group\
    \ = paren_array[i];\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_count\
    \ = 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_array[i].length;\
    \ j++){\n            if(paren_array[i][j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n", "    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for(let\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ===\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_list = paren_string.split(\"\
    \ \");\n    var paren_depth = [];\n    for (var i = 0; i < paren_list.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for (var j = 0; j < paren_list[i].length; j++){\n            if (paren_list[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if (paren_list[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        paren_depth.push(max_paren_count);\n\
    \    }\n    return paren_depth;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(' ');\n    var paren_count\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++){\n        var paren_count_temp\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                paren_count_temp++;\n      \
    \      }\n        }\n        paren_count.push(paren_count_temp);\n    }\n    return\
    \ paren_count;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let\
    \ result = [];\n    for(let i = 0; i < paren_array.length; i++){\n        let\
    \ paren_count = 0;\n        let max_paren_count = 0;\n        for(let j = 0; j\
    \ < paren_array[i].length; j++){\n            if(paren_array[i][j] === \"(\"){\n\
    \                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    var paren_array = paren_string.split(\"\
    \ \");\n    var result = [];\n    for(var i = 0; i < paren_array.length; i++){\n\
    \        var paren_count = 0;\n        var max_paren_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren =\
    \ paren_array[i];\n        var count = 0;\n        var max = 0;\n        for(var\
    \ j = 0; j < paren.length; j++){\n            if(paren[j] == \"(\"){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(paren[j] ==\
    \ \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for(let\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ===\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] === \")\"){\n               \
    \ paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
