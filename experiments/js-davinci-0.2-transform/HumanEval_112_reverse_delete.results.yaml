language: js
name: HumanEval_112_reverse_delete
results:
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let res = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [res, res === res.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            result.push(arr[i]);\n\
    \        }\n    }\n    let result2 = result.join('');\n    let result3 = result2.split('').reverse().join('');\n\
    \    if(result2 === result3){\n        return [result2, true];\n    }else{\n \
    \       return [result2, false];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    for(let i = 0; i < arr.length; i++){\n        for(let j\
    \ = 0; j < arr2.length; j++){\n            if(arr[i] === arr2[j]){\n         \
    \       arr.splice(i, 1);\n                i--;\n            }\n        }\n  \
    \  }\n    let str = arr.join('');\n    let arr3 = str.split('');\n    let arr4\
    \ = arr3.reverse();\n    let str2 = arr4.join('');\n    if(str === str2){\n  \
    \      return [str, true];\n    }else{\n        return [str, false];\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let str = s.split('');\n    let arr\
    \ = c.split('');\n    let result = [];\n    for(let i = 0; i < str.length; i++){\n\
    \        if(arr.indexOf(str[i]) === -1){\n            result.push(str[i]);\n \
    \       }\n    }\n    let res = result.join('');\n    let check = true;\n    for(let\
    \ i = 0; i < res.length; i++){\n        if(res[i] !== res[res.length - 1 - i]){\n\
    \            check = false;\n        }\n    }\n    return [res, check];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let newS = s.split('').filter(el\
    \ => !c.includes(el)).join('');\n    let newArr = newS.split('');\n    let newArr2\
    \ = newArr.reverse();\n    let newS2 = newArr2.join('');\n    let result = newS\
    \ === newS2 ? true : false;\n    return [newS, result];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let\
    \ i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    let check = result === result.split('').reverse().join('');\n\
    \    return [result, check];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) == -1){\n            arr3.push(arr[i]);\n   \
    \     }\n    }\n    let arr4 = arr3.join('');\n    let arr5 = arr4.split('');\n\
    \    let arr6 = arr5.reverse();\n    let arr7 = arr6.join('');\n    if(arr4 ==\
    \ arr7){\n        return [arr4, true];\n    }\n    else{\n        return [arr4,\
    \ false];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
    , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            arr3.push(arr[i]);\n  \
    \      }\n    }\n    let str = arr3.join('');\n    let str2 = arr3.reverse().join('');\n\
    \    if(str === str2){\n        return [str, true];\n    }else{\n        return\
    \ [str, false];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let sArr = s.split('');\n    let\
    \ cArr = c.split('');\n    let result = [];\n    for(let i = 0; i < sArr.length;\
    \ i++){\n        if(!cArr.includes(sArr[i])){\n            result.push(sArr[i]);\n\
    \        }\n    }\n    let resultStr = result.join('');\n    let resultArr = resultStr.split('');\n\
    \    let reverseArr = resultArr.reverse();\n    let reverseStr = reverseArr.join('');\n\
    \    let answer = [];\n    if(resultStr === reverseStr){\n        answer.push(resultStr,\
    \ true);\n    } else {\n        answer.push(resultStr, false);\n    }\n    return\
    \ answer;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"\
    ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(function(item){\n\
    \        return c.indexOf(item) === -1;\n    }).join('');\n    return [result,\
    \ result === result.split('').reverse().join('')];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let res = s.split('').filter(e=>!c.includes(e)).join('');\n\
    \    return [res, res.split('').reverse().join('')===res];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n\
    \  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"\
    abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"\
    dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n \
    \ assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
    , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
    \", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    for(let i = 0; i < arr.length; i++){\n        for(let j\
    \ = 0; j < arr2.length; j++){\n            if(arr[i] === arr2[j]){\n         \
    \       arr.splice(i, 1);\n                i--;\n            }\n        }\n  \
    \  }\n    let str = arr.join('');\n    let check = true;\n    for(let i = 0; i\
    \ < str.length; i++){\n        if(str[i] !== str[str.length - 1 - i]){\n     \
    \       check = false;\n        }\n    }\n    return [str, check];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n\
    \  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"\
    abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"\
    dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n \
    \ assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
    , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
    \", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result === result.split('').reverse().join('');\n\
    \    return [result, check];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let palindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, palindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result.split('').reverse().join('')\
    \ === result];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
    , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let palindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, palindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let i = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let res = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [res, res === res.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(el\
    \ => !c.includes(el)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    let palindrome = true;\n    for (let i = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            palindrome = false;\n            break;\n        }\n\
    \    }\n    return [result, palindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let\
    \ i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            arr3.push(arr[i]);\n  \
    \      }\n    }\n    let str = arr3.join('');\n    let arr4 = str.split('');\n\
    \    let arr5 = arr4.reverse();\n    let str2 = arr5.join('');\n    if(str ===\
    \ str2){\n        return [str, true];\n    }else{\n        return [str, false];\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"\
    ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s;\n    for (let i =\
    \ 0; i < c.length; i++) {\n        result = result.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let res = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [res, res === res.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    let newArr2 = newArr.join('');\n    let newArr3 = newArr2.split('');\n\
    \    let newArr4 = newArr3.reverse();\n    let newArr5 = newArr4.join('');\n \
    \   if(newArr2 === newArr5){\n        return [newArr2, true];\n    } else {\n\
    \        return [newArr2, false];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    let str = newArr.join('');\n    let str2 = newArr.reverse().join('');\n\
    \    if(str === str2){\n        return [str, true];\n    }else{\n        return\
    \ [str, false];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let res = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [res, res === res.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    let arr4 = [];\n    for(let i = 0; i\
    \ < arr.length; i++){\n        for(let j = 0; j < arr2.length; j++){\n       \
    \     if(arr[i] === arr2[j]){\n                arr3.push(arr[i]);\n          \
    \  }\n        }\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr3.indexOf(arr[i])\
    \ === -1){\n            arr4.push(arr[i]);\n        }\n    }\n    let str = arr4.join('');\n\
    \    let str2 = str.split('').reverse().join('');\n    if(str === str2){\n   \
    \     return [str, true];\n    }else{\n        return [str, false];\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let palindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, palindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            result.push(arr[i]);\n\
    \        }\n    }\n    let result2 = result.join('');\n    let result3 = result2.split('').reverse().join('');\n\
    \    let result4 = result3 === result2 ? true : false;\n    return [result2, result4];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            result.push(arr[i]);\n\
    \        }\n    }\n    let str = result.join('');\n    let str2 = str.split('').reverse().join('');\n\
    \    let check = str === str2;\n    return [str, check];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    for (let i = 0; i < c.length; i++)\
    \ {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return [s,\
    \ s === s.split('').reverse().join('')];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let i = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        for(let j = 0; j < arr2.length; j++){\n            if(arr[i] === arr2[j]){\n\
    \                arr.splice(i, 1);\n                i--;\n            }\n    \
    \    }\n    }\n    for(let i = 0; i < arr.length; i++){\n        arr3.push(arr[i]);\n\
    \    }\n    let str = arr3.join('');\n    let str2 = arr3.reverse().join('');\n\
    \    if(str === str2){\n        return [str, true];\n    }else{\n        return\
    \ [str, false];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 1
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n  let result = [];\n  let resultStr =\
    \ '';\n  let isPalindrome = false;\n  for (let i = 0; i < s.length; i++) {\n \
    \   if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  resultStr\
    \ = result.join('');\n  for (let i = 0; i < resultStr.length; i++) {\n    if (resultStr[i]\
    \ === resultStr[resultStr.length - 1 - i]) {\n      isPalindrome = true;\n   \
    \ } else {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return [resultStr,\
    \ isPalindrome];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
    , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '',\n  false\n\
    ]\n\nshould loosely deep-equal\n\n[\n  '',\n  true\n]\n    at test (/tmp/tmprhkhewx_.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmprhkhewx_.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', false\
    \ ],\n  expected: [ '', true ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let sArr = s.split('');\n    let\
    \ cArr = c.split('');\n    let result = sArr.filter(function(item){\n        return\
    \ cArr.indexOf(item) === -1;\n    });\n    let resultStr = result.join('');\n\
    \    let resultArr = [];\n    resultArr.push(resultStr);\n    if(resultStr ===\
    \ resultStr.split('').reverse().join('')){\n        resultArr.push(true);\n  \
    \  }else{\n        resultArr.push(false);\n    }\n    return resultArr;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = reverse_delete;\n\
    \  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"\
    abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"\
    dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n \
    \ assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
    , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
    \", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let s_arr = s.split('');\n    let\
    \ c_arr = c.split('');\n    for(let i = 0; i < s_arr.length; i++){\n        for(let\
    \ j = 0; j < c_arr.length; j++){\n            if(s_arr[i] === c_arr[j]){\n   \
    \             s_arr.splice(i, 1);\n                i--;\n                break;\n\
    \            }\n        }\n    }\n    let s_str = s_arr.join('');\n    let s_rev\
    \ = s_arr.reverse().join('');\n    if(s_str === s_rev){\n        return [s_str,\
    \ true];\n    }\n    return [s_str, false];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let arr3 = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        for(let j = 0; j < arr2.length; j++){\n            if(arr[i] === arr2[j]){\n\
    \                arr3.push(arr[i]);\n            }\n        }\n    }\n    let\
    \ arr4 = arr.filter(function(item){\n        return !arr3.includes(item);\n  \
    \  });\n    let arr5 = arr4.join('');\n    let arr6 = arr5.split('');\n    let\
    \ arr7 = arr6.reverse();\n    let arr8 = arr7.join('');\n    if(arr5 === arr8){\n\
    \        return [arr5, true];\n    }else{\n        return [arr5, false];\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let result = '';\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            result += arr[i];\n   \
    \     }\n    }\n    let result2 = result.split('').reverse().join('');\n    if(result\
    \ === result2){\n        return [result, true];\n    }\n    return [result, false];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let newS = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    let isPalindrome = newS === newS.split('').reverse().join('');\n\
    \    return [newS, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(char\
    \ => !c.includes(char)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let str = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [str, str === str.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let i = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(item\
    \ => c.indexOf(item) === -1).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let palindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, palindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let arr = s.split('');\n    let arr2\
    \ = c.split('');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr2.indexOf(arr[i]) === -1){\n            result.push(arr[i]);\n\
    \        }\n    }\n    let result2 = result.join('');\n    let result3 = result2.split('').reverse().join('');\n\
    \    if(result2 === result3){\n        return [result2, true];\n    }else{\n \
    \       return [result2, false];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let str = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    let res = str.split('').reverse().join('') ===\
    \ str;\n    return [str, res];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result.split('').reverse().join('')\
    \ === result];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
    , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
    acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
    , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n\
    \  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let result2 = result.split('').reverse().join('');\n\
    \    if(result === result2){\n        return [result, true];\n    }else{\n   \
    \     return [result, false];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) == -1) {\n          \
    \  result += s[i];\n        }\n    }\n    let isPalindrome = true;\n    for (let\
    \ i = 0; i < result.length / 2; i++) {\n        if (result[i] != result[result.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ }\n    }\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let str = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    let bool = str === str.split('').reverse().join('');\n\
    \    return [str, bool];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let isPalindrome = result.split('').reverse().join('')\
    \ === result;\n    return [result, isPalindrome];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let check = result.split('').reverse().join('')\
    \ === result;\n    return [result, check];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let str = s.split('').filter(x =>\
    \ !c.includes(x)).join('');\n    return [str, str === str.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(item\
    \ => !c.includes(item)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n       \
    \     result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"\
    abcde\", \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\",\
    \ \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\
    ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\"\
    , false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"\
    abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\"\
    , \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"\
    ),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\",\
    \ true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747248
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(e\
    \ => !c.includes(e)).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747249
- exit_code: 0
  program: "//Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\n// >>> reverse_delete(\"abcde\",\
    \ \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"\
    acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\",\
    \ true]\nfunction reverse_delete(s, c){\n    let result = '';\n    for (let i\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\"\
    , false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n\
    \  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"\
    dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\
    \", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\"\
    , true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\",\
    \ true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n\
    \  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
