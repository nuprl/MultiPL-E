name: HumanEval_76_is_simple_power
language: js
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2,\
  \ 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3,\
  \ 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5,\
  \ 3)\n// false\nfunction is_simple_power(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
  \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
  \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
  \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
  \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
  \ 12),true);\n}\n\ntest();"
completions: ["    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}", "    return x == n**Math.round(Math.log(x)/Math.log(n));\n\
    }\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }", "    if(x===1){\n        return true;\n    }\n    if(x===n){\n        return\
    \ true;\n    }\n    if(x%n===0){\n        return is_simple_power(x/n, n);\n  \
    \  }\n    return false;\n}\n", "    var result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    let power = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(power);\n}\n", "    return (x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))));\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1){\n        return true;\n  \
    \  }\n    if(x === n){\n        return true;\n    }\n    if(x % n === 0){\n  \
    \      return is_simple_power(x/n, n);\n    }\n    return false;\n}\n", "    let\
    \ result = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n", " \
    \ let power = Math.log(x) / Math.log(n);\n  return power % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
