language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_depth = 0;\n   \
    \     var depth = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == \"(\"){\n                depth++;\n                if(depth\
    \ > max_depth){\n                    max_depth = depth;\n                }\n \
    \           }\n            else if(paren[j] == \")\"){\n                depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var paren_count =\
    \ 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_list\
    \ = paren_string.split(\" \");\n    var paren_depth = [];\n    for (var i = 0;\
    \ i < paren_list.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for (var j = 0; j < paren_list[i].length; j++){\n            if\
    \ (paren_list[i][j] == \"(\"){\n                paren_count++;\n             \
    \   if (paren_count > max_paren_count){\n                    max_paren_count =\
    \ paren_count;\n                }\n            }\n            else if (paren_list[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   paren_depth.push(max_paren_count);\n    }\n    return paren_depth;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var paren_count = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count_temp = 0;\n        for\
    \ (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                paren_count_temp++;\n            }\n        }\n  \
    \      paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpuq92ku8m.js:26:10)\n    at Object.<anonymous> (/tmp/tmpuq92ku8m.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_array\
    \ = paren_string.split(\" \");\n\tvar result = [];\n\tfor(var i = 0; i < paren_array.length;\
    \ i++){\n\t\tresult.push(paren_array[i].split(\"\").reduce(function(acc, curr){\n\
    \t\t\tif(curr === \"(\"){\n\t\t\t\treturn acc + 1;\n\t\t\t}else if(curr === \"\
    )\"){\n\t\t\t\treturn acc - 1;\n\t\t\t}\n\t\t}, 0));\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpo_s9ce1g.js:26:10)\n    at Object.<anonymous> (/tmp/tmpo_s9ce1g.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count_temp = 0;\n        var\
    \ paren_temp = paren_array[i];\n        for(var j = 0; j < paren_temp.length;\
    \ j++){\n            if(paren_temp[j] === \"(\"){\n                paren_count_temp++;\n\
    \            }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp0p7xr3ze.js:27:10)\n    at Object.<anonymous> (/tmp/tmp0p7xr3ze.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_single_paren(paren_array[i]));\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplk2opuo3.js:10\n        result.push(parse_single_paren(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_single_paren is not defined\n    at\
    \ parse_nested_parens (/tmp/tmplk2opuo3.js:10:16)\n    at test (/tmp/tmplk2opuo3.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmplk2opuo3.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // your code\
    \ here\n    var paren_array = paren_string.split(\" \");\n    var result = [];\n\
    \    for (var i = 0; i < paren_array.length; i++) {\n        var paren_count =\
    \ 0;\n        var max_paren_count = 0;\n        for (var j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] == \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ == \")\") {\n                paren_count--;\n            }\n        }\n    \
    \    result.push(max_paren_count);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }else if(paren_array[i][j] == \")\"){\n          \
    \      paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl9ucilip.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpl9ucilip.js:10:16)\n    at test (/tmp/tmpl9ucilip.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9ucilip.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                count++;\n        \
    \        if(count > max_count){\n                    max_count = count;\n    \
    \            }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let max = 0;\n        let\
    \ count = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === \"(\"){\n                count++;\n                if(count > max){\n  \
    \                  max = count;\n                }\n            }\n          \
    \  else if(paren[j] === \")\"){\n                count--;\n            }\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let current_group = paren_groups[i];\n\
    \        let current_level = 0;\n        let max_level = 0;\n        for(let j\
    \ = 0; j < current_group.length; j++){\n            if(current_group[j] === \"\
    (\"){\n                current_level++;\n                if(current_level > max_level){\n\
    \                    max_level = current_level;\n                }\n         \
    \   }\n            else if(current_group[j] === \")\"){\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_arr.length;\
    \ i++){\n        var paren = paren_arr[i];\n        var max = 0;\n        var\
    \ count = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max = 0;\n        var\
    \ count = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var max = 0;\n        var count\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }else if(paren[j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let paren_array\
    \ = paren_string.split(' ');\n  let result = [];\n  for(let i = 0; i < paren_array.length;\
    \ i++){\n    let count = 0;\n    let max = 0;\n    for(let j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] === '('){\n        count++;\n        if(count\
    \ > max){\n          max = count;\n        }\n      }\n      if(paren_array[i][j]\
    \ === ')'){\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var count = 0;\n        var max_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                count++;\n                if(count > max_count){\n\
    \                    max_count = count;\n                }\n            }\n  \
    \          else if(paren_array[i][j] == \")\"){\n                count--;\n  \
    \          }\n        }\n        paren_count.push(max_count);\n    }\n    return\
    \ paren_count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let parens\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < parens.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < parens[i].length; j++){\n            if(parens[i][j] === \"(\"){\n     \
    \           count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            }\n            else if(parens[i][j]\
    \ === \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var max_depth_array\
    \ = [];\n    for(var i = 0; i < paren_array.length; i++){\n        var paren_depth\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_depth++;\n            }\n            else\
    \ if(paren_array[i][j] == \")\"){\n                paren_depth--;\n          \
    \  }\n        }\n        max_depth_array.push(paren_depth);\n    }\n    return\
    \ max_depth_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp2y0po9dh.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2y0po9dh.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var paren_count = [];\n  for (var i = 0; i <\
    \ paren_array.length; i++){\n    var paren_count_temp = 0;\n    for (var j = 0;\
    \ j < paren_array[i].length; j++){\n      if (paren_array[i][j] == \"(\"){\n \
    \       paren_count_temp++;\n      }\n    }\n    paren_count.push(paren_count_temp);\n\
    \  }\n  return paren_count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpuzeflg25.js:26:10)\n    at Object.<anonymous> (/tmp/tmpuzeflg25.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_stack = [];\n        let paren_count = 0;\n       \
    \ for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_stack.push(paren_array[i][j]);\n        \
    \        paren_count++;\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                paren_stack.pop();\n            }\n        }\n\
    \        result.push(paren_count);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpil7tho7c.js:31:10)\n    at Object.<anonymous> (/tmp/tmpil7tho7c.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(count_nested_parens(paren_array[i]));\n    }\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp67r9z8p1.js:10\n        result.push(count_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: count_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp67r9z8p1.js:10:16)\n    at test (/tmp/tmp67r9z8p1.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp67r9z8p1.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for(var i = 0;\
    \ i < parens.length; i++){\n        max_nesting.push(get_max_nesting(parens[i]));\n\
    \    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpz2ffkefo.js:10\n        max_nesting.push(get_max_nesting(parens[i]));\n\
    \                    ^\n\nReferenceError: get_max_nesting is not defined\n   \
    \ at parse_nested_parens (/tmp/tmpz2ffkefo.js:10:21)\n    at test (/tmp/tmpz2ffkefo.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpz2ffkefo.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for(let j = 0; j\
    \ < paren_group.length; j++){\n            if(paren_group[j] === \"(\"){\n   \
    \             level++;\n                if(level > max_level){\n             \
    \       max_level = level;\n                }\n            }\n            else\
    \ if(paren_group[j] === \")\"){\n                level--;\n            }\n   \
    \     }\n        result.push(max_level);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups\
    \ = paren_string.split(\" \");\n    let paren_levels = [];\n    for (let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let paren_level = 0;\n        let max_paren_level = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++){\n            if (paren_group[j] === \"\
    (\"){\n                paren_level++;\n                if (paren_level > max_paren_level){\n\
    \                    max_paren_level = paren_level;\n                }\n     \
    \       }\n            else if (paren_group[j] === \")\"){\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_paren_level);\n    }\n\
    \    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_level = 0;\n\
    \        var current_level = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                current_level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpuyt_vffm.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpuyt_vffm.js:10:16)\n    at test (/tmp/tmpuyt_vffm.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpuyt_vffm.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var max_depth = 0;\n        var\
    \ depth = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                depth++;\n                if(depth > max_depth){\n\
    \                    max_depth = depth;\n                }\n            }\n  \
    \          else if(paren[j] == ')'){\n                depth--;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max_count = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == '('){\n                count++;\n                if(count\
    \ > max_count){\n                    max_count = count;\n                }\n \
    \           }\n            else if(paren[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_arr\
    \ = paren_string.split(\" \");\n    let paren_levels = [];\n    for(let i = 0;\
    \ i < paren_arr.length; i++){\n        let paren = paren_arr[i];\n        let\
    \ paren_level = 0;\n        let max_level = 0;\n        for(let j = 0; j < paren.length;\
    \ j++){\n            if(paren[j] === \"(\"){\n                paren_level++;\n\
    \                if(paren_level > max_level){\n                    max_level =\
    \ paren_level;\n                }\n            }\n            else if(paren[j]\
    \ === \")\"){\n                paren_level--;\n            }\n        }\n    \
    \    paren_levels.push(max_level);\n    }\n    return paren_levels;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var max_depth_list\
    \ = [];\n    for(var i = 0; i < parens.length; i++){\n        var paren = parens[i];\n\
    \        var depth = 0;\n        for(var j = 0; j < paren.length; j++){\n    \
    \        if(paren[j] == \"(\"){\n                depth++;\n            }\n   \
    \         else if(paren[j] == \")\"){\n                depth--;\n            }\n\
    \        }\n        max_depth_list.push(depth);\n    }\n    return max_depth_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmppjr8ese8.js:31:10)\n    at Object.<anonymous> (/tmp/tmppjr8ese8.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let max_depth = 0;\n    let depth = 0;\n \
    \   let max_depth_array = [];\n    for(let i = 0; i < paren_array.length; i++){\n\
    \        for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                depth++;\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                depth--;\n            }\n            if(depth >\
    \ max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        max_depth_array.push(max_depth);\n        max_depth = 0;\n        depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let max_nested_parens = [];\n    for(let i\
    \ = 0; i < paren_array.length; i++){\n        let paren_count = 0;\n        let\
    \ max_paren_count = 0;\n        for(let j = 0; j < paren_array[i].length; j++){\n\
    \            if(paren_array[i][j] === \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                paren_count--;\n            }\n        }\n    \
    \    max_nested_parens.push(max_paren_count);\n    }\n    return max_nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_group = paren_array[i];\n        let count = 0;\n \
    \       let max_count = 0;\n        for(let j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] === \"(\"){\n                count++;\n       \
    \         if(count > max_count){\n                    max_count = count;\n   \
    \             }\n            }\n            else if(paren_group[j] === \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_count = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count++;\n                if(paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if(paren_array[i][j] == \")\"){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var paren_count =\
    \ 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count\
    \ += 1;\n                if(paren_count > max_paren_count){\n                \
    \    max_paren_count = paren_count;\n                }\n            }\n      \
    \      else if(paren_group[j] == \")\"){\n                paren_count -= 1;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    result.push(get_nested_parens(paren_array[i]));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp13o4j7l3.js:10\n    result.push(get_nested_parens(paren_array[i]));\n\
    \           ^\n\nReferenceError: get_nested_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp13o4j7l3.js:10:12)\n    at test (/tmp/tmp13o4j7l3.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp13o4j7l3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for(let\
    \ j = 0; j < paren_group.length; j++){\n            if(paren_group[j] === \"(\"\
    ){\n                current_nesting++;\n                if(current_nesting > max_nesting){\n\
    \                    max_nesting = current_nesting;\n                }\n     \
    \       }\n            else if(paren_group[j] === \")\"){\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var paren_array = paren_string.split(\" \");\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }else if(paren[j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var depth = 0;\n \
    \   var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == \"(\"){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == \")\"){\n                depth--;\n            }\n            if (depth >\
    \ max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        max_depth_array.push(max_depth);\n        max_depth = 0;\n        depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let current_paren = paren_array[i];\n        let count = 0;\n\
    \        let max_count = 0;\n        for(let j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] === \"(\"){\n                count++;\n\
    \                if(count > max_count){\n                    max_count = count;\n\
    \                }\n            }\n            else if(current_paren[j] === \"\
    )\"){\n                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_nesting = 0;\n \
    \       var current_nesting = 0;\n        for(var j = 0; j < paren.length; j++){\n\
    \            if(paren[j] == \"(\"){\n                current_nesting++;\n    \
    \            if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren[j]\
    \ == \")\"){\n                current_nesting--;\n            }\n        }\n \
    \       result.push(max_nesting);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var parens\
    \ = paren_string.split(' ');\n  var max_depth = 0;\n  var depths = [];\n  for\
    \ (var i = 0; i < parens.length; i++){\n    var paren = parens[i];\n    var depth\
    \ = 0;\n    for (var j = 0; j < paren.length; j++){\n      if (paren[j] == '('){\n\
    \        depth++;\n      } else if (paren[j] == ')'){\n        depth--;\n    \
    \  }\n    }\n    depths.push(depth);\n  }\n  return depths;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp76mm21ix.js:30:10)\n    at Object.<anonymous> (/tmp/tmp76mm21ix.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == \"(\"){\n                count++;\n        \
    \        if(count > max_count){\n                    max_count = count;\n    \
    \            }\n            }\n            else if(paren_group[j] == \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max_count = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == \"(\"){\n                count++;\n                if(count\
    \ > max_count){\n                    max_count = count;\n                }\n \
    \           }\n            else if(paren[j] == \")\"){\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgr7x3guh.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpgr7x3guh.js:10:16)\n    at test (/tmp/tmpgr7x3guh.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpgr7x3guh.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_count = 0;\n        var max_count = 0;\n        for (var j\
    \ = 0; j < paren_group.length; j++){\n            if (paren_group[j] == \"(\"\
    ){\n                paren_count += 1;\n                if (paren_count > max_count){\n\
    \                    max_count = paren_count;\n                }\n           \
    \ }\n            else if (paren_group[j] == \")\"){\n                paren_count\
    \ -= 1;\n            }\n        }\n        max_nesting.push(max_count);\n    }\n\
    \    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_level = 0;\n   \
    \     var level = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == \"(\"){\n                level++;\n                if(level\
    \ > max_level){\n                    max_level = level;\n                }\n \
    \           }\n            else if(paren[j] == \")\"){\n                level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups\
    \ = paren_string.split(\" \");\n    let max_nesting = [];\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_nesting_level = 0;\n        let current_nesting_level = 0;\n\
    \        for(let j = 0; j < paren_group.length; j++){\n            if(paren_group[j]\
    \ === \"(\"){\n                current_nesting_level++;\n            }\n     \
    \       else if(paren_group[j] === \")\"){\n                current_nesting_level--;\n\
    \            }\n            if(current_nesting_level > max_nesting_level){\n \
    \               max_nesting_level = current_nesting_level;\n            }\n  \
    \      }\n        max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_depth = 0;\n        let depth = 0;\n        for(let j = 0; j\
    \ < paren_group.length; j++){\n            if(paren_group[j] === \"(\"){\n   \
    \             depth++;\n                if(depth > max_depth){\n             \
    \       max_depth = depth;\n                }\n            }else if(paren_group[j]\
    \ === \")\"){\n                depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_max_nested_parens(paren_array[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsr60om82.js:10\n        result.push(get_max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_max_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmpsr60om82.js:10:16)\n    at test (/tmp/tmpsr60om82.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpsr60om82.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === \"(\"){\n                count++;\n                if(count > max){\n  \
    \                  max = count;\n                }\n            }\n          \
    \  else if(paren[j] === \")\"){\n                count--;\n            }\n   \
    \     }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_string = paren_array[i];\n        var count = 0;\n\
    \        var max_count = 0;\n        for(var j = 0; j < paren_string.length; j++){\n\
    \            if(paren_string[j] == \"(\"){\n                count++;\n       \
    \         if(count > max_count){\n                    max_count = count;\n   \
    \             }\n            }\n            else if(paren_string[j] == \")\"){\n\
    \                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var output = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        output.push(max_paren_count);\n\
    \    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_group = paren_array[i];\n    var count = 0;\n    var max_count\
    \ = 0;\n    for(var j = 0; j < paren_group.length; j++){\n      if(paren_group[j]\
    \ == \"(\"){\n        count++;\n        if(count > max_count){\n          max_count\
    \ = count;\n        }\n      }\n      else if(paren_group[j] == \")\"){\n    \
    \    count--;\n      }\n    }\n    result.push(max_count);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var nesting = 0;\n        var max_nesting_for_group = 0;\n        for\
    \ (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j] ==\
    \ \"(\"){\n                nesting += 1;\n            }\n            else if (paren_group[j]\
    \ == \")\"){\n                nesting -= 1;\n            }\n            if (nesting\
    \ > max_nesting_for_group){\n                max_nesting_for_group = nesting;\n\
    \            }\n        }\n        max_nesting.push(max_nesting_for_group);\n\
    \    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_nesting = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count = 0;\n        var max_count\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                paren_count++;\n           \
    \     if (paren_count > max_count){\n                    max_count = paren_count;\n\
    \                }\n            }\n            else if (paren_array[i][j] == ')'){\n\
    \                paren_count--;\n            }\n        }\n        max_nesting.push(max_count);\n\
    \    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var max_count = 0;\n        var count = 0;\n        for(var j\
    \ = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"\
    (\"){\n                count++;\n                if(count > max_count){\n    \
    \                max_count = count;\n                }\n            }\n      \
    \      else if(paren_array[i][j] == \")\"){\n                count--;\n      \
    \      }\n        }\n        result.push(max_count);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_arr.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_arr[i].length; j++){\n            if(paren_arr[i][j] == \"(\"){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_arr[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_max_nesting(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3ku16i8d.js:10\n        result.push(get_max_nesting(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_max_nesting is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp3ku16i8d.js:10:16)\n    at test (/tmp/tmp3ku16i8d.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ku16i8d.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var count = 0;\n        var max = 0;\n\
    \        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren_array[i][j] == \")\"){\n                count--;\n           \
    \ }\n        }\n        paren_count.push(max);\n    }\n    return paren_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var depth = 0;\n \
    \   var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == \"(\"){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == \")\"){\n                depth--;\n            }\n            if (depth >\
    \ max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        max_depth_array.push(max_depth);\n        max_depth = 0;\n        depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpuyt_vffm.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpuyt_vffm.js:10:16)\n    at test (/tmp/tmpuyt_vffm.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpuyt_vffm.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var output = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        output.push(max);\n    }\n    return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n\
    \        let max_depth = 0;\n        let current_depth = 0;\n        for(let j\
    \ = 0; j < paren_group.length; j++){\n            if(paren_group[j] === \"(\"\
    ){\n                current_depth++;\n                if(current_depth > max_depth){\n\
    \                    max_depth = current_depth;\n                }\n         \
    \   }\n            else if(paren_group[j] === \")\"){\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(\" \");\n    var max_nesting = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var max_nesting_level = 0;\n        var current_nesting_level = 0;\n\
    \        for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j]\
    \ == \"(\"){\n                current_nesting_level++;\n                if (current_nesting_level\
    \ > max_nesting_level){\n                    max_nesting_level = current_nesting_level;\n\
    \                }\n            }\n            else if (paren_group[j] == \")\"\
    ){\n                current_nesting_level--;\n            }\n        }\n     \
    \   max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqo5sjrfi.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqo5sjrfi.js:10:16)\n    at test (/tmp/tmpqo5sjrfi.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqo5sjrfi.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == \"(\"\
    ){\n                count++;\n                if(count > max){\n             \
    \       max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var max_levels = [];\n    for (var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n \
    \       var level = 0;\n        var max_level = 0;\n        for (var j = 0; j\
    \ < paren_group.length; j++){\n            if (paren_group[j] == \"(\"){\n   \
    \             level++;\n                if (level > max_level){\n            \
    \        max_level = level;\n                }\n            }\n            else\
    \ if (paren_group[j] == \")\"){\n                level--;\n            }\n   \
    \     }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(find_max_nested_parens(paren_array[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfshmxptq.js:10\n        result.push(find_max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: find_max_nested_parens is not defined\n \
    \   at parse_nested_parens (/tmp/tmpfshmxptq.js:10:16)\n    at test (/tmp/tmpfshmxptq.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfshmxptq.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_887euf5.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp_887euf5.js:10:16)\n    at test (/tmp/tmp_887euf5.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_887euf5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_array = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_array.length; i++){\n        let temp = paren_array[i];\n        let\
    \ count = 0;\n        let max_count = 0;\n        for(let j = 0; j < temp.length;\
    \ j++){\n            if(temp[j] === \"(\"){\n                count++;\n      \
    \          if(count > max_count){\n                    max_count = count;\n  \
    \              }\n            }\n            else if(temp[j] === \")\"){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgr7x3guh.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpgr7x3guh.js:10:16)\n    at test (/tmp/tmpgr7x3guh.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpgr7x3guh.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === \"(\"){\n                paren_count++;\n                if(paren_count\
    \ > max_paren_count){\n                    max_paren_count = paren_count;\n  \
    \              }\n            }\n            else if(paren_array[i][j] === \"\
    )\"){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe57po5vv.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpe57po5vv.js:10:16)\n    at test (/tmp/tmpe57po5vv.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe57po5vv.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_depth = [];\n    for (var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == \"(\"){\n                paren_count++;\n         \
    \       if (paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if (paren_array[i][j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   paren_depth.push(max_paren_count);\n    }\n    return paren_depth;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748301
