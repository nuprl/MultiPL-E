language: js
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else if(arr[i] === 0){\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] === 0) prod = 0;\n\
    \        else if (arr[i] > 0) prod *= 1;\n        else if (arr[i] < 0) prod *=\
    \ -1;\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var product\
    \ = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i];\n            product *= 1;\n        }\n        else\
    \ if(arr[i] < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n\
    \        }\n        else{\n            product *= 0;\n        }\n    }\n    return\
    \ sum * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    var sum = 0;\n    var prod = 1;\n    for (var i\
    \ = 0; i < arr.length; i++){\n        if (arr[i] == 0) continue;\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpmv5328pn.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmv5328pn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    var sum = 0;\n    var prod = 1;\n    for (var i\
    \ = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i\
    \ = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n       \
    \ else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpxff4lt4z.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxff4lt4z.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n\
    \            prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *=\
    \ 1;\n        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= arr[i]\
    \ / Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp9moefewn.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9moefewn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    var\
    \ sum = 0;\n    var product = 1;\n    if (arr.length == 0){\n        return undefined;\n\
    \    }\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] > 0){\n\
    \            product *= 1;\n        }\n        else if (arr[i] < 0){\n       \
    \     product *= -1;\n        }\n        else {\n            product *= 0;\n \
    \       }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] > 0) prod *= 1;\n\
    \        else if (arr[i] < 0) prod *= -1;\n    }\n    return sum * prod;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp1e06wji8.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1e06wji8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let product\
    \ = 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        if(arr[i] !== 0){\n            product *= Math.sign(arr[i]);\n      \
    \  }\n    }\n    return sum * product;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpnfmksg95.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnfmksg95.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n\
    \            continue;\n        }\n        prod *= Math.sign(arr[i]);\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptebz8rbs.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptebz8rbs.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n           \
    \ prod *= -1;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpn6op68to.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6op68to.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    var\
    \ sum = 0;\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] > 0){\n            sum += arr[i];\n            prod *= 1;\n   \
    \     }\n        else if(arr[i] < 0){\n            sum += arr[i] * -1;\n     \
    \       prod *= -1;\n        }\n        else{\n            sum += 0;\n       \
    \     prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\nundefined\n    at test (/tmp/tmp7r8r790_.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7r8r790_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == 0) {\n\
    \            continue;\n        }\n        prod *= Math.sign(arr[i]);\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpilkha5z5.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpilkha5z5.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if(arr.length\
    \ === 0){\n    return undefined;\n  }\n  var sum = 0;\n  var prod = 1;\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      sum += arr[i];\n  \
    \    prod *= 1;\n    }\n    else if(arr[i] < 0){\n      sum += arr[i] * -1;\n\
    \      prod *= -1;\n    }\n    else{\n      prod *= 0;\n    }\n  }\n  return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] !== 0){\n            sum +=\
    \ Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n        }\n    }\n\
    \    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmptxrbx1ij.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptxrbx1ij.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) {\n            prod *=\
    \ 1;\n            sum += arr[i];\n        } else if (arr[i] < 0) {\n         \
    \   prod *= -1;\n            sum += arr[i] * -1;\n        } else {\n         \
    \   prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else\
    \ if (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] == 0){\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else\
    \ if (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        var num = arr[i];\n\
    \        if (num > 0) {\n            sum += num;\n            prod *= 1;\n   \
    \     } else if (num < 0) {\n            sum += -num;\n            prod *= -1;\n\
    \        } else {\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        if (arr[i]\
    \ !== 0) prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpce8bnihw.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpce8bnihw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var product = 1;\n    var sum\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          product *= 1;\n            sum += arr[i];\n        }else if(arr[i]\
    \ < 0){\n            product *= -1;\n            sum += arr[i] * -1;\n       \
    \ }else{\n            product *= 0;\n        }\n    }\n    return sum * product;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == 0) {\n\
    \            continue;\n        }\n        prod *= Math.sign(arr[i]);\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprb2rqnqy.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprb2rqnqy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) {\n            prod *=\
    \ 1;\n            sum += arr[i];\n        }\n        else if (arr[i] < 0) {\n\
    \            prod *= -1;\n            sum += arr[i] * -1;\n        }\n       \
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var product\
    \ = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i];\n            product *= 1;\n        }\n        else\
    \ if(arr[i] < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n\
    \        }\n        else{\n            product *= 0;\n        }\n    }\n    return\
    \ sum * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] > 0) prod *= 1;\n\
    \        else if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr1sksfa1.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr1sksfa1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    var sum = 0;\n    var prod = 1;\n    for (var i\
    \ = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let product\
    \ = 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        if(arr[i] === 0){\n            product = 0;\n        }\n        else\
    \ if(arr[i] > 0){\n            product *= 1;\n        }\n        else{\n     \
    \       product *= -1;\n        }\n    }\n    return sum * product;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n    \
    \    } else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7x0vlhk4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7x0vlhk4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpr1sksfa1.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr1sksfa1.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else\
    \ if (arr[i] === 0) prod *= 0;\n        sum += Math.abs(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    var\
    \ sum = 0;\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n\
    \        }\n        else if(arr[i] > 0){\n            sum += arr[i];\n       \
    \     prod *= 1;\n        }\n        else{\n            sum += 0;\n          \
    \  prod *= 0;\n        }\n    }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\nundefined\n    at test (/tmp/tmp7ddgxpf8.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7ddgxpf8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var product\
    \ = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i];\n            product *= 1;\n        }\n        else\
    \ if(arr[i] < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n\
    \        }\n        else{\n            product *= 0;\n        }\n    }\n    return\
    \ sum * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] === 0){\n            prod\
    \ *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7x0vlhk4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7x0vlhk4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    var prod = 1;\n    var sum = 0;\n    for (var\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n        \
    \    continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpipwmgpo4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpipwmgpo4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n            sum += arr[i];\n        }\n        else if(arr[i]\
    \ < 0){\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else\
    \ if (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var product\
    \ = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n  \
    \          product *= -1;\n        }\n        else if(arr[i] > 0){\n         \
    \   product *= 1;\n        }\n        else{\n            product *= 0;\n     \
    \   }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    var sum = 0;\n    var prod = 1;\n    for (var i\
    \ = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        if(arr[i] < 0){\n            prod *=\
    \ -1;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpd404ofk2.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd404ofk2.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let i\
    \ = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *=\
    \ 1;\n        }\n        else{\n            prod *= 0;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    let\
    \ sum = 0;\n    let product = 1;\n    if(arr.length === 0){\n        return undefined;\n\
    \    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n  \
    \          sum += arr[i];\n            product *= 1;\n        }else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            product *= -1;\n  \
    \      }else{\n            product *= 0;\n        }\n    }\n    return sum * product;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }else if(arr[i] < 0){\n\
    \            sum += arr[i] * -1;\n            prod *= -1;\n        }else{\n  \
    \          prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\tif(arr.length\
    \ == 0){\n\t\treturn undefined;\n\t}\n\tvar sum = 0;\n\tvar prod = 1;\n\tfor(var\
    \ i = 0; i < arr.length; i++){\n\t\tif(arr[i] > 0){\n\t\t\tsum += arr[i];\n\t\t\
    \tprod *= 1;\n\t\t}\n\t\telse if(arr[i] < 0){\n\t\t\tsum += arr[i] * -1;\n\t\t\
    \tprod *= -1;\n\t\t}\n\t\telse{\n\t\t\tprod *= 0;\n\t\t}\n\t}\n\treturn sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    var\
    \ sum = 0;\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] > 0){\n            sum += arr[i];\n            prod *= 1;\n   \
    \     }\n        else if(arr[i] < 0){\n            sum += arr[i] * -1;\n     \
    \       prod *= -1;\n        }\n        else{\n            sum += 0;\n       \
    \     prod *= 0;\n        }\n    }\n    return sum * prod;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\nundefined\n    at test (/tmp/tmpw3qbwu7_.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3qbwu7_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod\
    \ *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n      \
    \  sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length===0){\n\
    \        return undefined;\n    }\n    let prod=1;\n    let sum=0;\n    for(let\
    \ i=0;i<arr.length;i++){\n        if(arr[i]>0){\n            prod*=1;\n      \
    \      sum+=arr[i];\n        }\n        else if(arr[i]<0){\n            prod*=-1;\n\
    \            sum+=arr[i];\n        }\n        else{\n            prod*=0;\n  \
    \          sum+=arr[i];\n        }\n    }\n    return sum*prod;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n-9\n    at test (/tmp/tmpazutxy3_.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpazutxy3_.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ -9,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] === 0){\n            prod\
    \ *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum *\
    \ prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return undefined;\n    var sum = 0;\n    var prod = 1;\n    for (var i\
    \ = 0; i < arr.length; i++){\n        if (arr[i] == 0) continue;\n        sum\
    \ += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpmv5328pn.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmv5328pn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] === 0){\n            prod\
    \ *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum *\
    \ prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n    \
    \        prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod\
    \ *= 1;\n        }\n        else{\n            prod *= 0;\n        }\n       \
    \ sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        prod *= 1;\n        }else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else\
    \ if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    var\
    \ sum = 0;\n    var prod = 1;\n    if (arr.length == 0){\n        return undefined;\n\
    \    }\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] > 0){\n\
    \            sum += arr[i];\n            prod *= 1;\n        }\n        else if\
    \ (arr[i] < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n\
    \        }\n        else{\n            sum += 0;\n            prod *= 0;\n   \
    \     }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n  \
    \          continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7x0vlhk4.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7x0vlhk4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *=\
    \ 1;\n        }\n        else{\n            prod *= 0;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return undefined;\n    }\n    var prod = 1;\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n        \
    \    continue;\n        }\n        prod *= Math.sign(arr[i]);\n        sum +=\
    \ Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp4d4zre31.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4d4zre31.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747897
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n    \
    \        sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n\
    \            sum += arr[i];\n            prod *= 1;\n        } else if (arr[i]\
    \ < 0) {\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\
    \ else {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747896
- exit_code: 0
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return undefined;\n    }\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
    // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return undefined;\n    let sum = 0;\n    let prod = 1;\n    for (let\
    \ i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n     \
    \   else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmprqk_3mq1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqk_3mq1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747896
