name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["    let max = -1;\n    let count = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > max){\n            for(let j = 0; j < lst.length;\
    \ j++){\n                if(lst[i] == lst[j]){\n                    count++;\n\
    \                }\n            }\n            if(count >= lst[i]){\n        \
    \        max = lst[i];\n            }\n            count = 0;\n        }\n   \
    \ }\n    return max;\n}\n", "    // your code here\n}\n", "    var max = -1;\n\
    \    for(var i = 0; i < lst.length; i++){\n        var count = 0;\n        for(var\
    \ j = 0; j < lst.length; j++){\n            if(lst[i] == lst[j]){\n          \
    \      count++;\n            }\n        }\n        if(count >= lst[i] && lst[i]\
    \ > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n",
  "    let max = Math.max(...lst);\n    let freq = {};\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(freq[lst[i]]){\n            freq[lst[i]] += 1;\n        }else{\n\
    \            freq[lst[i]] = 1;\n        }\n    }\n    for(let i = max; i > 0;\
    \ i--){\n        if(freq[i] >= i){\n            return i;\n        }\n    }\n\
    \    return -1;\n}\n", "    let max = -1;\n    let freq = 0;\n    let count =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n  \
    \          max = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == max){\n            count++;\n        }\n    }\n\
    \    if(count >= max){\n        return max;\n    }\n    else{\n        return\
    \ -1;\n    }\n}\n", "    let max = -1;\n    let freq = {};\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(freq[lst[i]]){\n            freq[lst[i]]++;\n\
    \        } else {\n            freq[lst[i]] = 1;\n        }\n    }\n    for(let\
    \ key in freq){\n        if(freq[key] >= key && key > max){\n            max =\
    \ key;\n        }\n    }\n    return max;\n}", "    let max = -1;\n    let count\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n\
    \            max = lst[i];\n        }\n    }\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] === max){\n            count++;\n        }\n    }\n\
    \    if(count >= max){\n        return max;\n    }\n    return -1;\n}\n", "  \
    \  let max = Math.max(...lst);\n    let count = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] === max){\n            count++;\n        }\n    }\n\
    \    if(count >= max){\n        return max;\n    }\n    return -1;\n}\n", "  \
    \  let max = -1;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] == max){\n            count++;\n\
    \        }\n    }\n    if(count >= max){\n        return max;\n    }\n    else{\n\
    \        return -1;\n    }\n}\n", "    let count = 0;\n    let max = 0;\n    let\
    \ maxCount = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j =\
    \ 0; j < lst.length; j++){\n            if(lst[i] === lst[j]){\n             \
    \   count++;\n            }\n        }\n        if(count >= lst[i] && count >\
    \ maxCount){\n            max = lst[i];\n            maxCount = count;\n     \
    \   }\n        count = 0;\n    }\n    if(maxCount === 0){\n        return -1;\n\
    \    }\n    return max;\n}\n", "  let max = 0;\n  let count = 0;\n  for(let i\
    \ = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n   \
    \ }\n  }\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] === max){\n  \
    \    count++;\n    }\n  }\n  if(count >= max){\n    return max;\n  }\n  return\
    \ -1;\n}\n", "    let max = -1;\n    let freq = {};\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(freq[lst[i]] === undefined){\n            freq[lst[i]] = 1;\n\
    \        }\n        else{\n            freq[lst[i]] += 1;\n        }\n    }\n\
    \    for(let key in freq){\n        if(freq[key] >= key && key > max){\n     \
    \       max = key;\n        }\n    }\n    return max;\n}\n", "    let freq = {};\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n       \
    \     freq[lst[i]]++;\n        }\n        else{\n            freq[lst[i]] = 1;\n\
    \        }\n    }\n    let max = -1;\n    for(let key in freq){\n        if(freq[key]\
    \ >= key && key > max){\n            max = key;\n        }\n    }\n    return\
    \ max;\n}", "    let result = -1;\n    let count = 0;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        for(let j = 0; j < lst.length; j++){\n          \
    \  if(lst[i] === lst[j]){\n                count++;\n            }\n        }\n\
    \        if(count >= lst[i] && lst[i] > result){\n            result = lst[i];\n\
    \        }\n        count = 0;\n    }\n    return result;\n}\n", "  let obj =\
    \ {};\n  for(let i = 0; i < lst.length; i++){\n    if(obj[lst[i]]){\n      obj[lst[i]]++;\n\
    \    } else {\n      obj[lst[i]] = 1;\n    }\n  }\n  let max = -1;\n  for(let\
    \ key in obj){\n    if(obj[key] >= key && key > max){\n      max = key;\n    }\n\
    \  }\n  return max;\n}\n", "    let max = -1;\n    let count = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst.length; j++){\n\
    \            if(lst[i] === lst[j]){\n                count++;\n            }\n\
    \        }\n        if(count >= lst[i] && lst[i] > max){\n            max = lst[i];\n\
    \        }\n        count = 0;\n    }\n    return max;\n}\n", "    let obj = {};\n\
    \    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(!obj[lst[i]]){\n\
    \            obj[lst[i]] = 1;\n        }else{\n            obj[lst[i]]++;\n  \
    \      }\n    }\n    for(let key in obj){\n        if(obj[key] >= key && key >\
    \ max){\n            max = key;\n        }\n    }\n    return max;\n}", "    let\
    \ freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(freq[lst[i]]){\n\
    \            freq[lst[i]] += 1;\n        }\n        else{\n            freq[lst[i]]\
    \ = 1;\n        }\n    }\n    let max = -1;\n    for(let key in freq){\n     \
    \   if(freq[key] >= key && key > max){\n            max = key;\n        }\n  \
    \  }\n    return max;\n}\n", "    var max = Math.max(...lst);\n    var count =\
    \ 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == max){\n \
    \           count++;\n        }\n    }\n    if(count >= max){\n        return\
    \ max;\n    }\n    else{\n        return -1;\n    }\n}\n", "    var count = 0;\n\
    \    var max = 0;\n    for(var i = 0; i < lst.length; i++){\n        for(var j\
    \ = 0; j < lst.length; j++){\n            if(lst[i] == lst[j]){\n            \
    \    count++;\n            }\n        }\n        if(count >= lst[i] && lst[i]\
    \ > max){\n            max = lst[i];\n        }\n        count = 0;\n    }\n \
    \   if(max == 0){\n        return -1;\n    }\n    return max;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
