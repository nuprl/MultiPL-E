name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n\
  // >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\"\
  )\n// false\nfunction simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let result = (xNum * nDen) * (nNum * xDen);\n    if(result % (xDen * nDen)\
    \ === 0){\n        return true;\n    }\n    return false;\n}", "    let xArr =\
    \ x.split('/');\n    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n\
    \    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let\
    \ nDen = parseInt(nArr[1]);\n    let xNumDen = xNum * nDen;\n    let nNumDen =\
    \ nNum * xDen;\n    if(xNumDen === nNumDen){\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "    let xArr = x.split('/');\n    let\
    \ nArr = n.split('/');\n    let xNum = xArr[0];\n    let xDen = xArr[1];\n   \
    \ let nNum = nArr[0];\n    let nDen = nArr[1];\n    let xNumInt = parseInt(xNum);\n\
    \    let xDenInt = parseInt(xDen);\n    let nNumInt = parseInt(nNum);\n    let\
    \ nDenInt = parseInt(nDen);\n    let xNumDen = xNumInt / xDenInt;\n    let nNumDen\
    \ = nNumInt / nDenInt;\n    let xN = xNumDen * nNumDen;\n    if(xN % 1 === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let x_num = x.split('/')[0];\n    let x_den = x.split('/')[1];\n    let n_num\
    \ = n.split('/')[0];\n    let n_den = n.split('/')[1];\n    let x_num_n = x_num\
    \ * n_num;\n    let x_den_n = x_den * n_den;\n    if(x_num_n % x_den_n === 0){\n\
    \        return true;\n    }\n    return false;\n}", "  var x_numerator = parseInt(x.split('/')[0]);\n\
    \  var x_denominator = parseInt(x.split('/')[1]);\n  var n_numerator = parseInt(n.split('/')[0]);\n\
    \  var n_denominator = parseInt(n.split('/')[1]);\n  var x_n_numerator = x_numerator\
    \ * n_numerator;\n  var x_n_denominator = x_denominator * n_denominator;\n  var\
    \ x_n_numerator_factors = getFactors(x_n_numerator);\n  var x_n_denominator_factors\
    \ = getFactors(x_n_denominator);\n  var common_factors = [];\n  for (var i = 0;\
    \ i < x_n_numerator_factors.length; i++) {\n    for (var j = 0; j < x_n_denominator_factors.length;\
    \ j++) {\n      if (x_n_numerator_factors[i] === x_n_denominator_factors[j]) {\n\
    \        common_factors.push(x_n_numerator_factors[i]);\n      }\n    }\n  }\n\
    \  var x_n_numerator_reduced = x_n_numerator;\n  var x_n_denominator_reduced =\
    \ x_n_denominator;\n  for (var k = 0; k < common_factors.length; k++) {\n    x_n_numerator_reduced\
    \ = x_n_numerator_reduced / common_factors[k];\n    x_n_denominator_reduced =\
    \ x_n_denominator_reduced / common_factors[k];\n  }\n  if (x_n_numerator_reduced\
    \ === x_n_denominator_reduced) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n    if (xNumN ===\
    \ nNumX) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let\
    \ nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN = parseInt(xNum)\
    \ * parseInt(nDen);\n    let nNumX = parseInt(nNum) * parseInt(xDen);\n    if(xNumN\
    \ === nNumX){\n        return true;\n    }\n    return false;\n}\n", "  var xArr\
    \ = x.split('/');\n  var nArr = n.split('/');\n  var xNum = xArr[0] * nArr[1];\n\
    \  var nNum = nArr[0] * xArr[1];\n  if (xNum === nNum) {\n    return true;\n \
    \ } else {\n    return false;\n  }\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xNumeratorN = xNumerator * nDenominator;\n\
    \    let nNumeratorX = nNumerator * xDenominator;\n    if (xNumeratorN === nNumeratorX)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xProduct = xNum * nNum;\n    let nProduct = xDen * nDen;\n    return\
    \ xProduct % nProduct === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if (result % (xDenominator\
    \ * nDenominator) === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }", "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n\
    \  var nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n\
    \  var xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  var xNumerator\
    \ = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xMultiplied = xNumerator * nDenominator;\n  var nMultiplied = nNumerator\
    \ * xDenominator;\n  if (xMultiplied === nMultiplied) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xNumeratorTimesNumerator = xNumerator * nNumerator;\n    let xDenominatorTimesDenominator\
    \ = xDenominator * nDenominator;\n    let xNumeratorTimesDenominator = xNumerator\
    \ * nDenominator;\n    let xDenominatorTimesNumerator = xDenominator * nNumerator;\n\
    \    if (xNumeratorTimesNumerator === xDenominatorTimesDenominator || xNumeratorTimesDenominator\
    \ === xDenominatorTimesNumerator) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xMultiplied = xNumerator\
    \ * nDenominator;\n  let nMultiplied = nNumerator * xDenominator;\n  return xMultiplied\
    \ === nMultiplied;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let\
    \ nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let xNumN\
    \ = xNum * nDen;\n    let nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n   \
    \     return true;\n    }\n    return false;\n}\n", "  var xNum = x.split('/')[0];\n\
    \  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n  var nDen = n.split('/')[1];\n\
    \  var xNumN = xNum * nDen;\n  var nNumX = nNum * xDen;\n  if (xNumN === nNumX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNum\
    \ = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n  \
    \  let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xProduct = xNum * nNum;\n    let nProduct = xDen * nDen;\n    return\
    \ xProduct % nProduct === 0;\n}\n", "    let xNumerator = x.split('/')[0];\n \
    \   let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let product = (xNumerator * nNumerator)\
    \ / (xDenominator * nDenominator);\n    return product % 1 === 0;\n}\n", "  let\
    \ xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n\
    \  let nDen = n.split('/')[1];\n  let xNumN = xNum * nDen;\n  let nNumX = nNum\
    \ * xDen;\n  if (xNumN === nNumX) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if(xNumeratorTimesnDenominator === xDenominatorTimesnNumerator){\n\
    \    return true;\n  }\n  return false;\n}\n", "    var xNumerator = parseInt(x.split(\"\
    /\")[0]);\n    var xDenominator = parseInt(x.split(\"/\")[1]);\n    var nNumerator\
    \ = parseInt(n.split(\"/\")[0]);\n    var nDenominator = parseInt(n.split(\"/\"\
    )[1]);\n    var xProduct = xNumerator * nDenominator;\n    var nProduct = nNumerator\
    \ * xDenominator;\n    return xProduct === nProduct;\n}\n", "    var x_numerator\
    \ = parseInt(x.split(\"/\")[0]);\n    var x_denominator = parseInt(x.split(\"\
    /\")[1]);\n    var n_numerator = parseInt(n.split(\"/\")[0]);\n    var n_denominator\
    \ = parseInt(n.split(\"/\")[1]);\n    var result = (x_numerator * n_numerator)\
    \ / (x_denominator * n_denominator);\n    return Number.isInteger(result);\n}\n",
  "    let xNumerator = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let xN = xNumerator * nDenominator;\n    let nD = nNumerator * xDenominator;\n\
    \    if(xN === nD){\n        return true;\n    }\n    return false;\n}", "  let\
    \ xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return Number.isInteger(product);\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xMultiplied = xNumerator\
    \ * nDenominator;\n  let nMultiplied = nNumerator * xDenominator;\n  return xMultiplied\
    \ === nMultiplied;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n \
    \   let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  let xNumerator = Number(x.split('/')[0]);\n  let xDenominator = Number(x.split('/')[1]);\n\
    \  let nNumerator = Number(n.split('/')[0]);\n  let nDenominator = Number(n.split('/')[1]);\n\
    \  let productNumerator = xNumerator * nNumerator;\n  let productDenominator =\
    \ xDenominator * nDenominator;\n  let product = productNumerator / productDenominator;\n\
    \  if (product % 1 === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    let x_numerator = parseInt(x.split('/')[0]);\n    let x_denominator\
    \ = parseInt(x.split('/')[1]);\n    let n_numerator = parseInt(n.split('/')[0]);\n\
    \    let n_denominator = parseInt(n.split('/')[1]);\n    let result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    return Number.isInteger(result);\n\
    }\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var product = xNumerator * nNumerator;\n  var denominator = xDenominator *\
    \ nDenominator;\n  if (product % denominator === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  var x = x.split('/');\n  var n = n.split('/');\n\
    \  var xNum = x[0];\n  var xDen = x[1];\n  var nNum = n[0];\n  var nDen = n[1];\n\
    \  var xNumN = xNum * nDen;\n  var nNumX = nNum * xDen;\n  if (xNumN === nNumX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xProduct = xNumerator * nDenominator;\n    let nProduct = nNumerator\
    \ * xDenominator;\n    let xProductDenominator = xDenominator * nDenominator;\n\
    \    let nProductDenominator = xDenominator * nDenominator;\n    if (xProduct\
    \ % xProductDenominator === 0 && nProduct % nProductDenominator === 0) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    var\
    \ xNumerator = parseInt(x.split(\"/\")[0]);\n    var xDenominator = parseInt(x.split(\"\
    /\")[1]);\n    var nNumerator = parseInt(n.split(\"/\")[0]);\n    var nDenominator\
    \ = parseInt(n.split(\"/\")[1]);\n    var xNumeratorTimesnDenominator = xNumerator\
    \ * nDenominator;\n    var xDenominatorTimesnNumerator = xDenominator * nNumerator;\n\
    \    var xNumeratorTimesnNumerator = xNumerator * nNumerator;\n    var xDenominatorTimesnDenominator\
    \ = xDenominator * nDenominator;\n    if(xNumeratorTimesnDenominator === xDenominatorTimesnNumerator){\n\
    \        return true;\n    }\n    else if(xNumeratorTimesnNumerator === xDenominatorTimesnDenominator){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}", " \
    \ let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xProduct = xNumerator * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n\
    \  return xProduct === nProduct;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n\
    \    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    if(xNum * nDen * nNum * xDen %\
    \ (xDen * nDen) === 0){\n        return true;\n    }\n    return false;\n}\n",
  "    var xArr = x.split('/');\n    var nArr = n.split('/');\n    var xNum = xArr[0];\n\
    \    var xDen = xArr[1];\n    var nNum = nArr[0];\n    var nDen = nArr[1];\n \
    \   var xNumN = parseInt(xNum);\n    var xDenN = parseInt(xDen);\n    var nNumN\
    \ = parseInt(nNum);\n    var nDenN = parseInt(nDen);\n    var xNumN2 = xNumN *\
    \ nDenN;\n    var xDenN2 = xDenN * nNumN;\n    var xNumN3 = xNumN2 / xDenN2;\n\
    \    var xNumN4 = xNumN3.toString();\n    var xNumN5 = xNumN4.split('.');\n  \
    \  if (xNumN5[1] === undefined){\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}", "  let xNumerator = parseInt(x.split('/')[0]);\n \
    \ let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n  let xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n  if(xNumeratorTimesNumerator % xDenominatorTimesDenominator\
    \ === 0){\n    return true;\n  }\n  return false;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var productNumerator = xNumerator\
    \ * nNumerator;\n  var productDenominator = xDenominator * nDenominator;\n  var\
    \ product = productNumerator / productDenominator;\n  return product % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    let x_numerator = parseInt(x.split('/')[0]);\n    let x_denominator\
    \ = parseInt(x.split('/')[1]);\n    let n_numerator = parseInt(n.split('/')[0]);\n\
    \    let n_denominator = parseInt(n.split('/')[1]);\n    let result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    return Number.isInteger(result);\n\
    }\n", "  var x = x.split('/');\n  var n = n.split('/');\n  var xNum = x[0];\n\
    \  var xDen = x[1];\n  var nNum = n[0];\n  var nDen = n[1];\n  var xNumN = xNum\
    \ * nDen;\n  var nNumX = nNum * xDen;\n  if (xNumN === nNumX) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    var x_numerator\
    \ = parseInt(x.split(\"/\")[0]);\n    var x_denominator = parseInt(x.split(\"\
    /\")[1]);\n    var n_numerator = parseInt(n.split(\"/\")[0]);\n    var n_denominator\
    \ = parseInt(n.split(\"/\")[1]);\n    var result = (x_numerator * n_numerator)\
    \ / (x_denominator * n_denominator);\n    return result % 1 === 0;\n}\n", "  let\
    \ xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n \
    \ if (result % 1 === 0) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}\n", "  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n\
    \  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n\
    \  let xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = xArr[0];\n    let xDen = xArr[1];\n    let nNum\
    \ = nArr[0];\n    let nDen = nArr[1];\n    let xNumN = xNum * nDen;\n    let nNumX\
    \ = nNum * xDen;\n    if(xNumN === nNumX){\n        return true;\n    } else {\n\
    \        return false;\n    }\n}", "  let xNumerator = Number(x.split('/')[0]);\n\
    \  let xDenominator = Number(x.split('/')[1]);\n  let nNumerator = Number(n.split('/')[0]);\n\
    \  let nDenominator = Number(n.split('/')[1]);\n  let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    var xArr\
    \ = x.split('/');\n    var nArr = n.split('/');\n    var xNum = parseInt(xArr[0]);\n\
    \    var xDen = parseInt(xArr[1]);\n    var nNum = parseInt(nArr[0]);\n    var\
    \ nDen = parseInt(nArr[1]);\n    var xNumN = xNum * nDen;\n    var nNumX = nNum\
    \ * xDen;\n    if(xNumN === nNumX){\n        return true;\n    }\n    return false;\n\
    }\n", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let\
    \ nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumDen =\
    \ xNum * nDen;\n    let nNumDen = nNum * xDen;\n    if(xNumDen % nNumDen === 0){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ var x_numerator = x.split(\"/\")[0];\n    var x_denominator = x.split(\"/\"\
    )[1];\n    var n_numerator = n.split(\"/\")[0];\n    var n_denominator = n.split(\"\
    /\")[1];\n    var x_numerator_n_denominator = x_numerator * n_denominator;\n \
    \   var n_numerator_x_denominator = n_numerator * x_denominator;\n    if (x_numerator_n_denominator\
    \ % n_numerator_x_denominator == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n    let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n    if(xNumeratorTimesnDenominator % xDenominatorTimesnNumerator\
    \ === 0){\n        return true;\n    }\n    return false;\n}\n", "    let xNumerator\
    \ = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    if (xMultiplied % nMultiplied === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let xNumerator\
    \ = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n    let nNumerator\
    \ = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n    let xNumeratorInt\
    \ = parseInt(xNumerator);\n    let xDenominatorInt = parseInt(xDenominator);\n\
    \    let nNumeratorInt = parseInt(nNumerator);\n    let nDenominatorInt = parseInt(nDenominator);\n\
    \    let xNumeratorFloat = parseFloat(xNumerator);\n    let xDenominatorFloat\
    \ = parseFloat(xDenominator);\n    let nNumeratorFloat = parseFloat(nNumerator);\n\
    \    let nDenominatorFloat = parseFloat(nDenominator);\n    let xFloat = xNumeratorFloat\
    \ / xDenominatorFloat;\n    let nFloat = nNumeratorFloat / nDenominatorFloat;\n\
    \    let xnFloat = xFloat * nFloat;\n    let xnInt = xNumeratorInt * nNumeratorInt;\n\
    \    let xnDenominator = xDenominatorInt * nDenominatorInt;\n    if (xnFloat %\
    \ 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n\
    \    let nDen = parseInt(nArr[1]);\n    let xNumDen = xNum * nDen;\n    let nNumDen\
    \ = nNum * xDen;\n    if (xNumDen === nNumDen) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  let xMultiplied = xNumerator * nNumerator;\n\
    \  let nMultiplied = xDenominator * nDenominator;\n  if(xMultiplied % nMultiplied\
    \ === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let\
    \ xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n\
    \  let nNum = nArr[0] * xArr[1];\n  return xNum % nNum === 0;\n}\n", "  let xArr\
    \ = x.split('/');\n  let nArr = n.split('/');\n  let xNumerator = parseInt(xArr[0]);\n\
    \  let xDenominator = parseInt(xArr[1]);\n  let nNumerator = parseInt(nArr[0]);\n\
    \  let nDenominator = parseInt(nArr[1]);\n  let xProduct = xNumerator * nDenominator;\n\
    \  let nProduct = nNumerator * xDenominator;\n  if (xProduct === nProduct) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "  var x_num = parseInt(x.split('/')[0]);\n\
    \  var x_den = parseInt(x.split('/')[1]);\n  var n_num = parseInt(n.split('/')[0]);\n\
    \  var n_den = parseInt(n.split('/')[1]);\n  var result = (x_num * n_num) / (x_den\
    \ * n_den);\n  return result % 1 === 0;\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xMultiplied = xNumerator * nNumerator;\n\
    \    let nMultiplied = xDenominator * nDenominator;\n    if(xMultiplied % nMultiplied\
    \ === 0){\n        return true;\n    }\n    return false;\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xProduct = xNumerator * nDenominator;\n    let nProduct = nNumerator\
    \ * xDenominator;\n    if(xProduct % nProduct === 0){\n        return true;\n\
    \    }\n    return false;\n}", "    let xNum = parseInt(x.split('/')[0]);\n  \
    \  let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    let xnNum = xNum * nNum;\n   \
    \ let xnDen = xDen * nDen;\n    let xn = xnNum / xnDen;\n    if(xn % 1 === 0){\n\
    \        return true;\n    }\n    return false;\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n    let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n    return xNumeratorTimesnDenominator % xDenominatorTimesnNumerator\
    \ === 0;\n}", "    var x_num = parseInt(x.split(\"/\")[0]);\n    var x_den = parseInt(x.split(\"\
    /\")[1]);\n    var n_num = parseInt(n.split(\"/\")[0]);\n    var n_den = parseInt(n.split(\"\
    /\")[1]);\n    var result = x_num * n_num / (x_den * n_den);\n    return result\
    \ % 1 === 0;\n}\n", "    var xArr = x.split('/');\n    var nArr = n.split('/');\n\
    \    var xNum = parseInt(xArr[0]);\n    var xDen = parseInt(xArr[1]);\n    var\
    \ nNum = parseInt(nArr[0]);\n    var nDen = parseInt(nArr[1]);\n    var xNumN\
    \ = xNum * nDen;\n    var nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n\
    \  var xDen = parseInt(xArr[1]);\n  var nNum = parseInt(nArr[0]);\n  var nDen\
    \ = parseInt(nArr[1]);\n  var xNumN = xNum * nDen;\n  var nNumX = nNum * xDen;\n\
    \  if (xNumN === nNumX) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n  var xNum\
    \ = xArr[0];\n  var xDen = xArr[1];\n  var nNum = nArr[0];\n  var nDen = nArr[1];\n\
    \  var xNumN = parseInt(xNum);\n  var xDenN = parseInt(xDen);\n  var nNumN = parseInt(nNum);\n\
    \  var nDenN = parseInt(nDen);\n  var xNumNn = xNumN * nDenN;\n  var xDenNn =\
    \ xDenN * nNumN;\n  var xNumNnStr = xNumNn.toString();\n  var xDenNnStr = xDenNn.toString();\n\
    \  var xNumNnStrArr = xNumNnStr.split('');\n  var xDenNnStrArr = xDenNnStr.split('');\n\
    \  var xNumNnStrArrLen = xNumNnStrArr.length;\n  var xDenNnStrArrLen = xDenNnStrArr.length;\n\
    \  var xNumNnStrArrLenMinusOne = xNumNnStrArrLen - 1;\n  var xDenNnStrArrLenMinusOne\
    \ = xDenNnStrArrLen - 1;\n  var xNumNnStrArrLast = xNumNnStrArr[xNumNnStrArrLenMinusOne];\n\
    \  var xDenNnStrArrLast = xDenNnStrArr[xDenNnStrArrLenMinusOne];\n  var xNumNnStrArrLastN\
    \ = parseInt(xNumNnStrArrLast);\n  var xDenNnStrArrLastN = parseInt(xDenNnStrArrLast);\n\
    \  var xNumNnStrArrLastNMinusOne = xNumNnStrArrLastN - 1;\n  var xDenNnStrArrLastNMinusOne\
    \ = xDenNnStrArrLastN - 1;\n  var xNumNnStrArrLastN", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}\n", "    var xNumerator = parseInt(x.split(\"\
    /\")[0]);\n    var xDenominator = parseInt(x.split(\"/\")[1]);\n    var nNumerator\
    \ = parseInt(n.split(\"/\")[0]);\n    var nDenominator = parseInt(n.split(\"/\"\
    )[1]);\n    var xMultiplied = xNumerator * nDenominator;\n    var nMultiplied\
    \ = nNumerator * xDenominator;\n    return xMultiplied === nMultiplied;\n}\n",
  "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    if(result % 1 === 0){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let x_num = parseInt(x.split('/')[0]);\n    let x_den\
    \ = parseInt(x.split('/')[1]);\n    let n_num = parseInt(n.split('/')[0]);\n \
    \   let n_den = parseInt(n.split('/')[1]);\n    let result = x_num * n_num / (x_den\
    \ * n_den);\n    return result % 1 === 0;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n\
    \    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    let xMult = xNum * nDen;\n   \
    \ let nMult = nNum * xDen;\n    if(xMult === nMult){\n        return true;\n \
    \   }\n    return false;\n}\n", "    var x_num = parseInt(x.split(\"/\")[0]);\n\
    \    var x_den = parseInt(x.split(\"/\")[1]);\n    var n_num = parseInt(n.split(\"\
    /\")[0]);\n    var n_den = parseInt(n.split(\"/\")[1]);\n    var result = (x_num\
    \ * n_num) / (x_den * n_den);\n    return result % 1 === 0;\n}\n", "    let xNum\
    \ = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n  \
    \  let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xN = xNum * nDen;\n    let nX = nNum * xDen;\n    if(xN === nX){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    var xNumerator = parseInt(x.split(\"\
    /\")[0]);\n    var xDenominator = parseInt(x.split(\"/\")[1]);\n    var nNumerator\
    \ = parseInt(n.split(\"/\")[0]);\n    var nDenominator = parseInt(n.split(\"/\"\
    )[1]);\n    var xMultiplied = xNumerator * nDenominator;\n    var nMultiplied\
    \ = nNumerator * xDenominator;\n    if (xMultiplied === nMultiplied) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}", "  let xNum\
    \ = x.split('/')[0];\n  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n\
    \  let nDen = n.split('/')[1];\n  let xNumN = xNum * nDen;\n  let xDenN = xDen\
    \ * nNum;\n  if (xNumN % xDenN === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}\n", "    var x_numerator = parseInt(x.split(\"\
    /\")[0]);\n    var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator\
    \ = parseInt(n.split(\"/\")[0]);\n    var n_denominator = parseInt(n.split(\"\
    /\")[1]);\n    var result = x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    return result % 1 === 0;\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    let xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    let xNumeratorTimesDenominator = xNumerator * nDenominator;\n\
    \    let xDenominatorTimesNumerator = xDenominator * nNumerator;\n    if (xNumeratorTimesNumerator\
    \ % xDenominatorTimesDenominator === 0 || xNumeratorTimesDenominator % xDenominatorTimesNumerator\
    \ === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    return xProduct\
    \ === nProduct;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) === 0){\n        return true;\n    }\n    return false;\n}\n",
  "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n  var\
    \ nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n  var\
    \ xNumerator = parseInt(xNumerator);\n  var xDenominator = parseInt(xDenominator);\n\
    \  var nNumerator = parseInt(nNumerator);\n  var nDenominator = parseInt(nDenominator);\n\
    \  var xNumerator = xNumerator * nDenominator;\n  var xDenominator = xDenominator\
    \ * nNumerator;\n  var xNumerator = xNumerator.toString();\n  var xDenominator\
    \ = xDenominator.toString();\n  var xNumerator = parseInt(xNumerator);\n  var\
    \ xDenominator = parseInt(xDenominator);\n  var xNumerator = xNumerator / xDenominator;\n\
    \  var xNumerator = xNumerator.toString();\n  var xNumerator = parseInt(xNumerator);\n\
    \  if (xNumerator % 1 === 0){\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator\
    \ = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xArr =\
    \ x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n\
    \  let nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n}\n", "  var xNumerator\
    \ = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xMultiplied = xNumerator * nDenominator;\n  var nMultiplied = nNumerator\
    \ * xDenominator;\n  if (xMultiplied === nMultiplied) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n", "    let xArr = x.split('/');\n    let\
    \ nArr = n.split('/');\n    let xNum = xArr[0];\n    let xDen = xArr[1];\n   \
    \ let nNum = nArr[0];\n    let nDen = nArr[1];\n    let xNumInt = parseInt(xNum);\n\
    \    let xDenInt = parseInt(xDen);\n    let nNumInt = parseInt(nNum);\n    let\
    \ nDenInt = parseInt(nDen);\n    let xNumDen = xNumInt / xDenInt;\n    let nNumDen\
    \ = nNumInt / nDenInt;\n    let xnNumDen = xNumDen * nNumDen;\n    let xnNumDenInt\
    \ = parseInt(xnNumDen);\n    if (xnNumDen === xnNumDenInt){\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}", "  var x = x.split('/');\n\
    \  var n = n.split('/');\n  var xNum = x[0];\n  var xDen = x[1];\n  var nNum =\
    \ n[0];\n  var nDen = n[1];\n  var xNumN = xNum * nDen;\n  var nNumX = nNum *\
    \ xDen;\n  if (xNumN === nNumX) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum\
    \ = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  if(xNum === nNum){\n\
    \    return true;\n  }\n  return false;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let product = (xNumerator\
    \ * nNumerator) / (xDenominator * nDenominator);\n  return product % 1 === 0;\n\
    }\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return product % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    if (xProduct\
    \ % nProduct === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "  //your code here\n  var xNumerator = x.split('/')[0];\n  var xDenominator\
    \ = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n  var nDenominator\
    \ = n.split('/')[1];\n  var xNumeratorTimesNumerator = xNumerator * nNumerator;\n\
    \  var xDenominatorTimesDenominator = xDenominator * nDenominator;\n  var xNumeratorTimesNumeratorDividedByXDenominatorTimesDenominator\
    \ = xNumeratorTimesNumerator / xDenominatorTimesDenominator;\n  if (xNumeratorTimesNumeratorDividedByXDenominatorTimesDenominator\
    \ % 1 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", " \
    \   var xArr = x.split('/');\n    var nArr = n.split('/');\n    var xNum = xArr[0];\n\
    \    var xDen = xArr[1];\n    var nNum = nArr[0];\n    var nDen = nArr[1];\n \
    \   var xNumN = parseInt(xNum);\n    var xDenN = parseInt(xDen);\n    var nNumN\
    \ = parseInt(nNum);\n    var nDenN = parseInt(nDen);\n    var xNumDen = xNumN\
    \ / xDenN;\n    var nNumDen = nNumN / nDenN;\n    var xnNumDen = xNumDen * nNumDen;\n\
    \    var xnNumDenR = xnNumDen.toFixed(0);\n    if (xnNumDenR == xnNumDen){\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n", "    let\
    \ xNumerator = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    if (xMultiplied === nMultiplied) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if (result % (xDenominator\
    \ * nDenominator) === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen\
    \ = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n  \
    \  let nDen = parseInt(n.split('/')[1]);\n    return (xNum * nDen) % (xDen * nNum)\
    \ === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if (result % (xDenominator\
    \ * nDenominator) === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n\
    \  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n  let xNumN = parseInt(xNum)\
    \ * parseInt(nDen);\n  let nNumX = parseInt(nNum) * parseInt(xDen);\n  if(xNumN\
    \ === nNumX){\n    return true;\n  } else {\n    return false;\n  }\n}\n", " \
    \ var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  return xNumeratorTimesnDenominator === xDenominatorTimesnNumerator;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    let xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    let xNumeratorTimesDenominator = xNumerator * nDenominator;\n\
    \    let xDenominatorTimesNumerator = xDenominator * nNumerator;\n    if(xNumeratorTimesNumerator\
    \ % xDenominatorTimesDenominator === 0){\n        return true;\n    } else if(xNumeratorTimesDenominator\
    \ % xDenominatorTimesNumerator === 0){\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n\
    \    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    let xMult = xNum * nDen;\n   \
    \ let nMult = nNum * xDen;\n    return xMult === nMult;\n}\n", "    let xArr =\
    \ x.split('/');\n    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n\
    \    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let\
    \ nDen = parseInt(nArr[1]);\n    let xNumNew = xNum * nDen;\n    let xDenNew =\
    \ xDen * nNum;\n    if (xNumNew % xDenNew === 0){\n        return true;\n    }\n\
    \    return false;\n}\n", "  var x_num = parseInt(x.split('/')[0]);\n  var x_den\
    \ = parseInt(x.split('/')[1]);\n  var n_num = parseInt(n.split('/')[0]);\n  var\
    \ n_den = parseInt(n.split('/')[1]);\n  var x_num_n = x_num * n_den;\n  var x_den_n\
    \ = x_den * n_num;\n  if (x_num_n % x_den_n === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorTimesNDenominator\
    \ = xNumerator * nDenominator;\n    let xDenominatorTimesNNumerator = xDenominator\
    \ * nNumerator;\n    return xNumeratorTimesNDenominator === xDenominatorTimesNNumerator;\n\
    }\n", "  var xNum = x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum\
    \ = n.split('/')[0];\n  var nDen = n.split('/')[1];\n  var xNumN = xNum * nDen;\n\
    \  var nNumX = nNum * xDen;\n  if (xNumN === nNumX) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n\
    \    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let\
    \ xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n    if (xNumN === nNumX)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = xNumerator * nDenominator * nNumerator * xDenominator;\n   \
    \ return result % 1 === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n\
    \    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let\
    \ xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n    return xNumN === nNumX;\n\
    }\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xnNum = xNum * nNum;\n    let xnDen = xDen * nDen;\n    let xn = xnNum\
    \ / xnDen;\n    return xn % 1 === 0;\n}\n", "  var xNumerator = x.split('/')[0];\n\
    \  var xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n\
    \  var nDenominator = n.split('/')[1];\n  var xNumerator = parseInt(xNumerator);\n\
    \  var xDenominator = parseInt(xDenominator);\n  var nNumerator = parseInt(nNumerator);\n\
    \  var nDenominator = parseInt(nDenominator);\n  var product = (xNumerator * nNumerator)\
    \ / (xDenominator * nDenominator);\n  if (product % 1 === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    if(xMultiplied\
    \ === nMultiplied){\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n\
    \  var nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n\
    \  var xNumeratorTimesDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesDenominator === xDenominatorTimesNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNum\
    \ = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n  \
    \  let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let result = xNum * nNum / (xDen * nDen);\n    return Number.isInteger(result);\n\
    }\n", "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n\
    \  var nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n\
    \  var xNumerator = parseInt(xNumerator);\n  var xDenominator = parseInt(xDenominator);\n\
    \  var nNumerator = parseInt(nNumerator);\n  var nDenominator = parseInt(nDenominator);\n\
    \  var xNumerator = xNumerator * nDenominator;\n  var xDenominator = xDenominator\
    \ * nNumerator;\n  var xNumerator = xNumerator.toString();\n  var xDenominator\
    \ = xDenominator.toString();\n  var xNumerator = parseInt(xNumerator);\n  var\
    \ xDenominator = parseInt(xDenominator);\n  if (xNumerator % xDenominator ===\
    \ 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  var xNumerator\
    \ = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xArr =\
    \ x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n\
    \  let nNum = nArr[0] * xArr[1];\n  return xNum % nNum === 0;\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xNumeratorTimesNumerator = xNumerator * nNumerator;\n  let xDenominatorTimesDenominator\
    \ = xDenominator * nDenominator;\n  let xNumeratorTimesDenominator = xNumerator\
    \ * nDenominator;\n  let xDenominatorTimesNumerator = xDenominator * nNumerator;\n\
    \  if (xNumeratorTimesNumerator % xDenominatorTimesDenominator === 0 || xNumeratorTimesDenominator\
    \ % xDenominatorTimesNumerator === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    if (xProduct\
    \ === nProduct) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n  \
    \  let xNum = xArr[0];\n    let xDen = xArr[1];\n    let nNum = nArr[0];\n   \
    \ let nDen = nArr[1];\n    let xNumN = parseInt(xNum);\n    let xDenN = parseInt(xDen);\n\
    \    let nNumN = parseInt(nNum);\n    let nDenN = parseInt(nDen);\n    let xNumN2\
    \ = xNumN * nDenN;\n    let xDenN2 = xDenN * nNumN;\n    if(xNumN2 % xDenN2 ===\
    \ 0){\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   let x_numerator = parseInt(x.split('/')[0]);\n    let x_denominator = parseInt(x.split('/')[1]);\n\
    \    let n_numerator = parseInt(n.split('/')[0]);\n    let n_denominator = parseInt(n.split('/')[1]);\n\
    \    let result = x_numerator * n_numerator / (x_denominator * n_denominator);\n\
    \    return result % 1 === 0;\n}\n", "  var xArr = x.split('/');\n  var nArr =\
    \ n.split('/');\n  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n\
    \  var nNum = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xMult\
    \ = xNum * nDen;\n  var nMult = nNum * xDen;\n  if (xMult === nMult) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  var xNum = x.split('/')[0];\n\
    \  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n  var nDen = n.split('/')[1];\n\
    \  var xNumN = xNum * nDen;\n  var nNumX = nNum * xDen;\n  if (xNumN === nNumX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = xNumerator * nDenominator * nNumerator * xDenominator;\n   \
    \ if(result % (xDenominator * nDenominator) === 0){\n        return true;\n  \
    \  }\n    return false;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let\
    \ nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let xMult\
    \ = xNum * nDen;\n    let nMult = nNum * xDen;\n    if(xMult === nMult){\n   \
    \     return true;\n    }\n    return false;\n}", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xNumeratorTimesDenominator\
    \ = xNumerator * nDenominator;\n  var nNumeratorTimesDenominator = nNumerator\
    \ * xDenominator;\n  if (xNumeratorTimesDenominator % nNumeratorTimesDenominator\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let\
    \ x_numerator = parseInt(x.split('/')[0]);\n  let x_denominator = parseInt(x.split('/')[1]);\n\
    \  let n_numerator = parseInt(n.split('/')[0]);\n  let n_denominator = parseInt(n.split('/')[1]);\n\
    \  let result = x_numerator * n_numerator;\n  let result_denominator = x_denominator\
    \ * n_denominator;\n  if (result % result_denominator === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  var xNumerator = x.split('/')[0];\n\
    \  var xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n\
    \  var nDenominator = n.split('/')[1];\n  var xNumeratorMultiplied = xNumerator\
    \ * nNumerator;\n  var xDenominatorMultiplied = xDenominator * nDenominator;\n\
    \  var xNumeratorMultipliedDivided = xNumeratorMultiplied / xDenominatorMultiplied;\n\
    \  if (xNumeratorMultipliedDivided % 1 === 0) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    var x_numerator = parseInt(x.split(\"/\")[0]);\n\
    \    var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"\
    /\")[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result\
    \ = x_numerator * n_numerator / (x_denominator * n_denominator);\n    return Number.isInteger(result);\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorMultiplied\
    \ = xNumerator * nDenominator;\n    let nNumeratorMultiplied = nNumerator * xDenominator;\n\
    \    return xNumeratorMultiplied === nNumeratorMultiplied;\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \    return product % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    var x_num = parseInt(x.split(\"/\")[0]);\n    var x_den = parseInt(x.split(\"\
    /\")[1]);\n    var n_num = parseInt(n.split(\"/\")[0]);\n    var n_den = parseInt(n.split(\"\
    /\")[1]);\n    var x_mult = x_num * n_den;\n    var n_mult = n_num * x_den;\n\
    \    if (x_mult % n_mult === 0){\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n  var nNum\
    \ = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xNumTimesNDen =\
    \ xNum * nDen;\n  var xDenTimesNNum = xDen * nNum;\n  if (xNumTimesNDen === xDenTimesNNum)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNum\
    \ = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n  \
    \  let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xMult = xNum * nDen;\n    let nMult = nNum * xDen;\n    return xMult\
    \ === nMult;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator\
    \ = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var result = (xNumerator *\
    \ nDenominator) * (nNumerator * xDenominator);\n  return result % 1 === 0;\n}\n",
  "  let x_numerator = x.split('/')[0];\n  let x_denominator = x.split('/')[1];\n\
    \  let n_numerator = n.split('/')[0];\n  let n_denominator = n.split('/')[1];\n\
    \  let result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\
    \  return Number.isInteger(result);\n}\n", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let xNumN = xNum * nDen;\n    let xDenN = xDen * nNum;\n\
    \    if(xNumN % xDenN === 0){\n        return true;\n    }\n    return false;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    if(result % (xDenominator *\
    \ nDenominator) === 0){\n        return true;\n    }\n    return false;\n}", " \
    \   let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xN = xNum * nDen;\n    let nX = nNum * xDen;\n    return xN === nX;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n    let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n    if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \   let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum = xArr[0];\n\
    \    let xDen = xArr[1];\n    let nNum = nArr[0];\n    let nDen = nArr[1];\n \
    \   let xMult = xNum * nDen;\n    let nMult = nNum * xDen;\n    if(xMult === nMult){\n\
    \        return true;\n    }\n    return false;\n}\n", "    let xNumerator = Number(x.split('/')[0]);\n\
    \    let xDenominator = Number(x.split('/')[1]);\n    let nNumerator = Number(n.split('/')[0]);\n\
    \    let nDenominator = Number(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    if(xMultiplied\
    \ === nMultiplied){\n        return true;\n    }\n    return false;\n}\n", " \
    \   let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    if (xMultiplied === nMultiplied) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  var x = x.split('/');\n\
    \  var n = n.split('/');\n  var x_num = x[0];\n  var x_den = x[1];\n  var n_num\
    \ = n[0];\n  var n_den = n[1];\n  var x_num_n = x_num * n_num;\n  var x_den_n\
    \ = x_den * n_den;\n  var x_num_n_den_n = x_num_n / x_den_n;\n  if (x_num_n_den_n\
    \ % 1 === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", " \
    \ var x = x.split('/');\n  var n = n.split('/');\n  var xNum = x[0];\n  var xDen\
    \ = x[1];\n  var nNum = n[0];\n  var nDen = n[1];\n  var xNumN = xNum * nDen;\n\
    \  var xDenN = xDen * nNum;\n  if (xNumN % xDenN === 0){\n    return true;\n \
    \ } else {\n    return false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    var xNumerator = parseInt(x.split(\"/\")[0]);\n    var xDenominator\
    \ = parseInt(x.split(\"/\")[1]);\n    var nNumerator = parseInt(n.split(\"/\"\
    )[0]);\n    var nDenominator = parseInt(n.split(\"/\")[1]);\n    var xProduct\
    \ = xNumerator * nDenominator;\n    var nProduct = nNumerator * xDenominator;\n\
    \    if (xProduct === nProduct) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\n", "    var x_numerator = parseInt(x.split(\"/\")[0]);\n\
    \    var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"\
    /\")[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var x_n =\
    \ x_numerator * n_denominator;\n    var n_n = n_numerator * x_denominator;\n \
    \   return x_n == n_n;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) === 0){\n        return true;\n    }\n    return false;\n}\n",
  "  var xNum = x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n\
    \  var nDen = n.split('/')[1];\n  var xNumDen = xNum * nDen;\n  var nNumDen =\
    \ nNum * xDen;\n  if (xNumDen === nNumDen) {\n    return true;\n  } else {\n \
    \   return false;\n  }\n}\n", "    let x_numerator = parseInt(x.split('/')[0]);\n\
    \    let x_denominator = parseInt(x.split('/')[1]);\n    let n_numerator = parseInt(n.split('/')[0]);\n\
    \    let n_denominator = parseInt(n.split('/')[1]);\n    let result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    return result % 1 ===\
    \ 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if (result % (xDenominator\
    \ * nDenominator) === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    var x_numerator = parseInt(x.split(\"/\")[0]);\n \
    \   var x_denominator = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"\
    /\")[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result\
    \ = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    return\
    \ result % 1 === 0;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var\
    \ xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  return xNumeratorTimesnDenominator === xDenominatorTimesnNumerator;\n\
    }\n", "    let x_numerator = parseInt(x.split('/')[0]);\n    let x_denominator\
    \ = parseInt(x.split('/')[1]);\n    let n_numerator = parseInt(n.split('/')[0]);\n\
    \    let n_denominator = parseInt(n.split('/')[1]);\n    let result = (x_numerator\
    \ * n_numerator) / (x_denominator * n_denominator);\n    if (Number.isInteger(result))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n", " \
    \ var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n \
    \ return result % 1 === 0;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xProduct = xNumerator\
    \ * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n  if (xProduct\
    \ === nProduct) {\n    return true;\n  } else {\n    return false;\n  }\n}", " \
    \   var xNumerator = parseInt(x.split(\"/\")[0]);\n    var xDenominator = parseInt(x.split(\"\
    /\")[1]);\n    var nNumerator = parseInt(n.split(\"/\")[0]);\n    var nDenominator\
    \ = parseInt(n.split(\"/\")[1]);\n    var xValue = xNumerator / xDenominator;\n\
    \    var nValue = nNumerator / nDenominator;\n    var xnValue = xValue * nValue;\n\
    \    if (xnValue % 1 === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = xArr[0];\n    let xDen = xArr[1];\n    let nNum = nArr[0];\n \
    \   let nDen = nArr[1];\n    let xNumN = xNum * nDen;\n    let xDenN = xDen *\
    \ nNum;\n    if(xNumN % xDenN === 0){\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\n", "    let xNum = x.split('/')[0];\n    let xDen\
    \ = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n\
    \    let xNumN = xNum * nDen;\n    let xDenN = xDen * nNum;\n    if(xNumN % xDenN\
    \ === 0){\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let product = (xNumerator\
    \ * nNumerator) / (xDenominator * nDenominator);\n    return Number.isInteger(product);\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) === 0){\n        return true;\n    }\n    return false;\n}",
  "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let nNum\
    \ = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN = xNum *\
    \ nDen;\n    let nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    var xArr = x.split('/');\n    var\
    \ nArr = n.split('/');\n    var xNum = xArr[0];\n    var xDen = xArr[1];\n   \
    \ var nNum = nArr[0];\n    var nDen = nArr[1];\n    var xNumInt = parseInt(xNum);\n\
    \    var xDenInt = parseInt(xDen);\n    var nNumInt = parseInt(nNum);\n    var\
    \ nDenInt = parseInt(nDen);\n    var xNumDen = xNumInt / xDenInt;\n    var nNumDen\
    \ = nNumInt / nDenInt;\n    var xNumDenN = xNumDen * nNumDen;\n    var xNumDenNStr\
    \ = xNumDenN.toString();\n    var xNumDenNStrArr = xNumDenNStr.split('.');\n \
    \   var xNumDenNStrArr0 = xNumDenNStrArr[0];\n    var xNumDenNStrArr1 = xNumDenNStrArr[1];\n\
    \    if(xNumDenNStrArr1 === undefined){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  var xNum = xArr[0] * nArr[1];\n  var nNum = nArr[0] * xArr[1];\n  return xNum\
    \ === nNum;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xMultiplied = xNumerator * nDenominator;\n  var nMultiplied = nNumerator\
    \ * xDenominator;\n  if (xMultiplied === nMultiplied) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xNumeratorTimesNumerator = xNumerator\
    \ * nNumerator;\n    let xDenominatorTimesDenominator = xDenominator * nDenominator;\n\
    \    let xNumeratorTimesDenominator = xNumerator * nDenominator;\n    let xDenominatorTimesNumerator\
    \ = xDenominator * nNumerator;\n    if (xNumeratorTimesNumerator % xDenominatorTimesDenominator\
    \ === 0 || xNumeratorTimesDenominator % xDenominatorTimesNumerator === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "  var\
    \ xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xMultiplied = xNumerator * nDenominator;\n  var nMultiplied = nNumerator\
    \ * xDenominator;\n  if (xMultiplied === nMultiplied) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\n", "    var xArr = x.split('/');\n    var\
    \ nArr = n.split('/');\n    var xNum = parseInt(xArr[0]);\n    var xDen = parseInt(xArr[1]);\n\
    \    var nNum = parseInt(nArr[0]);\n    var nDen = parseInt(nArr[1]);\n    var\
    \ xNumN = xNum * nDen;\n    var nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n\
    \        return true;\n    }\n    return false;\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n\
    \  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n\
    \  let productNumerator = xNumerator * nNumerator;\n  let productDenominator =\
    \ xDenominator * nDenominator;\n  let product = productNumerator / productDenominator;\n\
    \  if (product % 1 === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator\
    \ = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xMultiplied = xNumerator\
    \ * nDenominator;\n  let nMultiplied = nNumerator * xDenominator;\n  return xMultiplied\
    \ === nMultiplied;\n}\n", "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n\
    \  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n  let xNumN = xNum\
    \ * nDen;\n  let xDenN = xDen * nNum;\n  if (xNumN % xDenN === 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  var xNumerator = x.split('/')[0];\n\
    \  var xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n\
    \  var nDenominator = n.split('/')[1];\n  var xNumeratorTimesnDenominator = xNumerator\
    \ * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator * nNumerator;\n\
    \  if(xNumeratorTimesnDenominator === xDenominatorTimesnNumerator){\n    return\
    \ true;\n  }\n  return false;\n}\n", "    var xArray = x.split(\"/\");\n    var\
    \ nArray = n.split(\"/\");\n    var xNumerator = parseInt(xArray[0]);\n    var\
    \ xDenominator = parseInt(xArray[1]);\n    var nNumerator = parseInt(nArray[0]);\n\
    \    var nDenominator = parseInt(nArray[1]);\n    var xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    var xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    var xNumeratorTimesNumeratorDividedByXDenominatorTimesDenominator\
    \ = xNumeratorTimesNumerator / xDenominatorTimesDenominator;\n    if (xNumeratorTimesNumeratorDividedByXDenominatorTimesDenominator\
    \ % 1 === 0){\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if(xNumeratorTimesnDenominator === xDenominatorTimesnNumerator){\n\
    \    return true;\n  }\n  return false;\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0];\n    let xDen = xArr[1];\n\
    \    let nNum = nArr[0];\n    let nDen = nArr[1];\n    let xNumN = Number(xNum);\n\
    \    let xDenN = Number(xDen);\n    let nNumN = Number(nNum);\n    let nDenN =\
    \ Number(nDen);\n    let xNumNxDenN = xNumN * nDenN;\n    let xDenNnNumN = xDenN\
    \ * nNumN;\n    if(xNumNxDenN === xDenNnNumN){\n        return true;\n    }\n\
    \    return false;\n}\n", "    let x_numerator = parseInt(x.split('/')[0]);\n\
    \    let x_denominator = parseInt(x.split('/')[1]);\n    let n_numerator = parseInt(n.split('/')[0]);\n\
    \    let n_denominator = parseInt(n.split('/')[1]);\n    let result = x_numerator\
    \ * n_numerator / (x_denominator * n_denominator);\n    return Number.isInteger(result);\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let productNumerator =\
    \ xNumerator * nNumerator;\n    let productDenominator = xDenominator * nDenominator;\n\
    \    let product = productNumerator / productDenominator;\n    return Number.isInteger(product);\n\
    }\n", "  var xNum = x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum\
    \ = n.split('/')[0];\n  var nDen = n.split('/')[1];\n  var product = (xNum * nNum)\
    \ / (xDen * nDen);\n  if (product % 1 === 0) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    let xNumerator = x.split('/')[0];\n    let\
    \ xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n   \
    \ let nDenominator = n.split('/')[1];\n    let xNumeratorN = xNumerator * nDenominator;\n\
    \    let nNumeratorX = nNumerator * xDenominator;\n    if(xNumeratorN === nNumeratorX){\n\
    \        return true;\n    }\n    return false;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xNumeratorTimesNumerator\
    \ = xNumerator * nNumerator;\n    let xDenominatorTimesDenominator = xDenominator\
    \ * nDenominator;\n    let xNumeratorTimesDenominator = xNumerator * nDenominator;\n\
    \    let xDenominatorTimesNumerator = xDenominator * nNumerator;\n    let xNumeratorTimesDenominatorPlusXDenominatorTimesNumerator\
    \ = xNumeratorTimesDenominator + xDenominatorTimesNumerator;\n    if (xNumeratorTimesNumerator\
    \ === xDenominatorTimesDenominator) {\n        return true;\n    } else if (xNumeratorTimesDenominatorPlusXDenominatorTimesNumerator\
    \ === xDenominatorTimesDenominator) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}", "    let xNumerator = x.split('/')[0];\n    let\
    \ xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n   \
    \ let nDenominator = n.split('/')[1];\n    let xNumeratorN = xNumerator * nDenominator;\n\
    \    let nNumeratorX = nNumerator * xDenominator;\n    return xNumeratorN ===\
    \ nNumeratorX;\n}\n", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n\
    \    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN\
    \ = xNum * nDen;\n    let nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n   \
    \     return true;\n    }\n    return false;\n}", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0];\n    let xDen = xArr[1];\n\
    \    let nNum = nArr[0];\n    let nDen = nArr[1];\n    let xNumDen = xNum * nDen;\n\
    \    let nNumDen = nNum * xDen;\n    if(xNumDen === nNumDen){\n        return\
    \ true;\n    }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
