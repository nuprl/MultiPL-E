name: HumanEval_149_sorted_list_sum
language: js
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
  aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
  AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\"\
  , \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"\
  abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"\
  AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\"\
  , \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
completions: ["    var new_list = [];\n    for (var i = 0; i < lst.length; i++){\n\
    \        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n  \
    \      }\n    }\n    new_list.sort();\n    return new_list;\n}", "    var lst_len\
    \ = lst.length;\n    var lst_sum = 0;\n    for(var i = 0; i < lst_len; i++){\n\
    \        lst_sum += lst[i];\n    }\n    return lst_sum;\n}\n", "    var lst_len\
    \ = lst.length;\n    var new_lst = [];\n    for(var i = 0; i < lst_len; i++){\n\
    \        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n    \
    \    }\n    }\n    new_lst.sort();\n    return new_lst;\n}\n", "    var lst_len\
    \ = lst.length;\n    var lst_sum = 0;\n    for(var i = 0; i < lst_len; i++){\n\
    \        lst_sum += lst[i];\n    }\n    return lst_sum;\n}\n", "    var odd_length_lst\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length %\
    \ 2 != 0){\n            odd_length_lst.push(lst[i]);\n        }\n    }\n    odd_length_lst.sort();\n\
    \    return odd_length_lst;\n}", "    var new_lst = [];\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n\
    \        }\n    }\n    new_lst.sort(function(a, b){\n        if(a.length == b.length){\n\
    \            return a.localeCompare(b);\n        }\n        return a.length -\
    \ b.length;\n    });\n    return new_lst;\n}\n", "    var new_lst = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n        \
    \    new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}",
  "    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ % 2 == 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort(function(a,\
    \ b){\n        if(a.length == b.length){\n            return a.localeCompare(b);\n\
    \        }\n        return a.length - b.length;\n    });\n    return new_lst;\n\
    }\n", "    var new_lst = [];\n    var lst_len = lst.length;\n    for(var i = 0;\
    \ i < lst_len; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n\
    \        }\n    }\n    new_lst.sort();\n    return new_lst;\n}", "    var sum\
    \ = 0;\n    for (var i = 0; i < lst.length; i++){\n        sum += lst[i];\n  \
    \  }\n    return sum;\n}\n", "    var lst_length = lst.length;\n    var new_lst\
    \ = [];\n    var new_lst_length = 0;\n    for (var i = 0; i < lst_length; i++){\n\
    \        if (lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n   \
    \         new_lst_length++;\n        }\n    }\n    for (var i = 0; i < new_lst_length;\
    \ i++){\n        for (var j = i + 1; j < new_lst_length; j++){\n            if\
    \ (new_lst[i].length > new_lst[j].length){\n                var temp = new_lst[i];\n\
    \                new_lst[i] = new_lst[j];\n                new_lst[j] = temp;\n\
    \            }\n            else if (new_lst[i].length == new_lst[j].length){\n\
    \                if (new_lst[i] > new_lst[j]){\n                    var temp =\
    \ new_lst[i];\n                    new_lst[i] = new_lst[j];\n                \
    \    new_lst[j] = temp;\n                }\n            }\n        }\n    }\n\
    \    return new_lst;\n}", "    var lst_len = lst.length;\n    var new_lst = [];\n\
    \    for(var i = 0; i < lst_len; i++){\n        if(lst[i].length % 2 == 0){\n\
    \            new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort(function(a,\
    \ b){\n        if(a.length == b.length){\n            return a.localeCompare(b);\n\
    \        }\n        return a.length - b.length;\n    });\n    return new_lst;\n\
    }\n", "    var sorted_list = lst.sort(function(a, b){\n        return a.length\
    \ - b.length;\n    });\n    var result = [];\n    for (var i = 0; i < sorted_list.length;\
    \ i++){\n        if (sorted_list[i].length % 2 == 0){\n            result.push(sorted_list[i]);\n\
    \        }\n    }\n    return result;\n}", "    var new_list = [];\n    for (var\
    \ i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 == 0){\n       \
    \     new_list.push(lst[i]);\n        }\n    }\n    new_list.sort(function(a,\
    \ b){\n        if (a.length > b.length){\n            return 1;\n        }\n \
    \       else if (a.length < b.length){\n            return -1;\n        }\n  \
    \      else{\n            if (a > b){\n                return 1;\n           \
    \ }\n            else if (a < b){\n                return -1;\n            }\n\
    \            else{\n                return 0;\n            }\n        }\n    });\n\
    \    return new_list;\n}\n", "    var new_list = [];\n    for (var i = 0; i <\
    \ lst.length; i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n\
    \        }\n    }\n    return new_list.sort();\n}\n", "    var new_lst = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n\
    \            new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort(function(a,\
    \ b){\n        if(a.length < b.length){\n            return -1;\n        }\n \
    \       if(a.length > b.length){\n            return 1;\n        }\n        if(a.length\
    \ == b.length){\n            if(a < b){\n                return -1;\n        \
    \    }\n            if(a > b){\n                return 1;\n            }\n   \
    \     }\n    });\n    return new_lst;\n}", "    var new_lst = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n        \
    \    new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort(function(a, b){\n\
    \        if(a.length > b.length){\n            return 1;\n        }\n        else\
    \ if(a.length < b.length){\n            return -1;\n        }\n        else{\n\
    \            if(a > b){\n                return 1;\n            }\n          \
    \  else if(a < b){\n                return -1;\n            }\n            else{\n\
    \                return 0;\n            }\n        }\n    });\n    return new_lst;\n\
    }\n", "    var odd_length_lst = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i].length % 2 == 1){\n            odd_length_lst.push(lst[i]);\n\
    \        }\n    }\n    odd_length_lst.sort();\n    return odd_length_lst;\n}\n",
  "    var new_list = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length\
    \ % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    new_list.sort();\n\
    \    return new_list;\n}", "    var new_list = [];\n    for (var i = 0; i < lst.length;\
    \ i++){\n        if (lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n\
    \        }\n    }\n    new_list.sort();\n    return new_list;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
