language: js
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(function(x, y){\n        return x > y ? x\
    \ : y;\n    }, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpboq1deq5.js:7\n    return reduce(function(x, y){\n    ^\n\nReferenceError:\
    \ reduce is not defined\n    at max_element (/tmp/tmpboq1deq5.js:7:5)\n    at\
    \ test (/tmp/tmpboq1deq5.js:17:20)\n    at Object.<anonymous> (/tmp/tmpboq1deq5.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b) {\n    return Math.max(a,\
    \ b);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    let max = l[0];\n    for(let i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(l, function(a, b){\n        return a > b\
    \ ? a : b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl5c0t6v7.js:7\n    return reduce(l, function(a, b){\n    ^\n\n\
    ReferenceError: reduce is not defined\n    at max_element (/tmp/tmpl5c0t6v7.js:7:5)\n\
    \    at test (/tmp/tmpl5c0t6v7.js:17:20)\n    at Object.<anonymous> (/tmp/tmpl5c0t6v7.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(function(x, y){\n        return x > y ? x\
    \ : y;\n    }, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpboq1deq5.js:7\n    return reduce(function(x, y){\n    ^\n\nReferenceError:\
    \ reduce is not defined\n    at max_element (/tmp/tmpboq1deq5.js:7:5)\n    at\
    \ test (/tmp/tmpboq1deq5.js:17:20)\n    at Object.<anonymous> (/tmp/tmpboq1deq5.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(function(a, b){\n        return a > b ? a\
    \ : b;\n    }, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpimlhhvwp.js:7\n    return reduce(function(a, b){\n    ^\n\nReferenceError:\
    \ reduce is not defined\n    at max_element (/tmp/tmpimlhhvwp.js:7:5)\n    at\
    \ test (/tmp/tmpimlhhvwp.js:17:20)\n    at Object.<anonymous> (/tmp/tmpimlhhvwp.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b) {\n    return Math.max(a,\
    \ b);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    if(l.length == 0){\n        return null;\n    }\n    var\
    \ max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(l, function(a, b){\n        return a > b\
    \ ? a : b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl5c0t6v7.js:7\n    return reduce(l, function(a, b){\n    ^\n\n\
    ReferenceError: reduce is not defined\n    at max_element (/tmp/tmpl5c0t6v7.js:7:5)\n\
    \    at test (/tmp/tmpl5c0t6v7.js:17:20)\n    at Object.<anonymous> (/tmp/tmpl5c0t6v7.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\treturn Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  if(l.length == 0){\n    return null;\n  }\n  var max = l[0];\n\
    \  for(var i = 1; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return l.reduce(function(a, b) {\n        return Math.max(a,\
    \ b);\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    if(l.length == 0){\n        return null;\n    }\n    var\
    \ max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(function(x, y){\n        return x > y ? x\
    \ : y;\n    }, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpboq1deq5.js:7\n    return reduce(function(x, y){\n    ^\n\nReferenceError:\
    \ reduce is not defined\n    at max_element (/tmp/tmpboq1deq5.js:7:5)\n    at\
    \ test (/tmp/tmpboq1deq5.js:17:20)\n    at Object.<anonymous> (/tmp/tmpboq1deq5.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(l, function(x, y){\n        return x > y\
    \ ? x : y;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpp_m20crx.js:7\n    return reduce(l, function(x, y){\n    ^\n\n\
    ReferenceError: reduce is not defined\n    at max_element (/tmp/tmpp_m20crx.js:7:5)\n\
    \    at test (/tmp/tmpp_m20crx.js:17:20)\n    at Object.<anonymous> (/tmp/tmpp_m20crx.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b) {\n    return Math.max(a,\
    \ b);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return l.reduce(function(a, b) {\n    return Math.max(a,\
    \ b);\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(Math, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659746640
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return reduce(function(x, y){\n        return x > y ? x\
    \ : y;\n    }, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpboq1deq5.js:7\n    return reduce(function(x, y){\n    ^\n\nReferenceError:\
    \ reduce is not defined\n    at max_element (/tmp/tmpboq1deq5.js:7:5)\n    at\
    \ test (/tmp/tmpboq1deq5.js:17:20)\n    at Object.<anonymous> (/tmp/tmpboq1deq5.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n  var max = l[0];\n  for(var i = 0; i < l.length; i++){\n \
    \   if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n\tvar max = l[0];\n\tfor(var i = 1; i < l.length; i++){\n\t\
    \tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l){\n    return Math.max.apply(null, l);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
