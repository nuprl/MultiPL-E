name: HumanEval_25_factorize
language: js
prompt: "//Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
  \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
  \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
  \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
completions: ["    let factors = [];\n    let divisor = 2;\n    while (n > 2){\n \
    \       if (n % divisor == 0){\n            factors.push(divisor);\n         \
    \   n = n / divisor;\n        }\n        else{\n            divisor++;\n     \
    \   }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let i =\
    \ 2;\n    while (n > 1){\n        while (n % i === 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i++;\n    }\n    return factors;\n\
    }\n", "    let result = [];\n    let i = 2;\n    while (n > 1){\n        if (n\
    \ % i === 0){\n            result.push(i);\n            n = n / i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return result;\n}\n", "    let\
    \ factors = [];\n    let divisor = 2;\n    while (n > 2){\n        if (n % divisor\
    \ == 0){\n            factors.push(divisor);\n            n = n / divisor;\n \
    \       }\n        else{\n            divisor++;\n        }\n    }\n    return\
    \ factors;\n}\n", "    let factors = [];\n    for (let i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n /=\
    \ i;\n        }\n    }\n    return factors;\n}\n", "    let factors = [];\n  \
    \  let divisor = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n    \
    \        factors.push(divisor);\n            n = n / divisor;\n        }\n   \
    \     else{\n            divisor++;\n        }\n    }\n    return factors;\n}\n",
  "    let factors = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i\
    \ === 0) {\n            factors.push(i);\n            n /= i;\n        }\n   \
    \ }\n    return factors;\n}\n", "    let result = [];\n    for (let i = 2; i <=\
    \ n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n    \
    \        n /= i;\n        }\n    }\n    return result;\n}\n", "    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1){\n        if (n % i === 0){\n     \
    \       factors.push(i);\n            n = n / i;\n        }\n        else{\n \
    \           i++;\n        }\n    }\n    return factors;\n}\n", "    let factors\
    \ = [];\n    let divisor = 2;\n    while (n > 2){\n        if (n % divisor ==\
    \ 0){\n            factors.push(divisor);\n            n = n / divisor;\n    \
    \    } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    var factors = [];\n    var divisor = 2;\n    while (n > 2){\n     \
    \   if (n % divisor == 0){\n            factors.push(divisor);\n            n\
    \ = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return factors;\n}\n", "    let factors = [];\n    let i = 2;\n    while\
    \ (n > 1){\n        if (n % i === 0){\n            factors.push(i);\n        \
    \    n = n / i;\n        }\n        else{\n            i++;\n        }\n    }\n\
    \    return factors;\n}\n", "    var factors = [];\n    var divisor = 2;\n   \
    \ while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}", "    var factors = [];\n    var divisor\
    \ = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let divisor\
    \ = 2;\n    while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "    let factors = [];\n    let\
    \ i = 2;\n    while (n > 1){\n        if (n % i === 0){\n            factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return factors;\n}\n", "    var factors = [];\n    var divisor = 2;\n   \
    \ while (n > 2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "    let result = [];\n    let i\
    \ = 2;\n    while (n > 1){\n        if (n % i === 0){\n            result.push(i);\n\
    \            n = n / i;\n        }\n        else {\n            i++;\n       \
    \ }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
