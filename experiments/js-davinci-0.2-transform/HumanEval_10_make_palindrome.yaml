name: HumanEval_10_make_palindrome
language: js
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"\
  xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\n\
  test();"
completions: ["    var palindrome = string;\n    var palindrome_length = string.length;\n\
    \    var prefix_length = 0;\n    var prefix = \"\";\n    var suffix = \"\";\n\
    \    var suffix_length = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n\
    \    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n\
    \    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n\
    \    var aa = 0;\n    var bb = 0;\n    var cc = 0;\n    var dd = 0;\n    var ee\
    \ = 0;\n    var ff = 0;\n    var gg = 0;\n    var hh = 0;\n    var ii = 0;\n \
    \   var jj = 0;\n    var kk = 0;\n    var ll = 0;\n    var mm = 0;\n    var nn\
    \ = 0;\n    var oo = 0;\n    var pp = 0;\n    var qq = 0;\n    var rr = 0;\n \
    \   var ss = 0;\n    var tt = 0;\n    var uu = 0;\n    var vv = 0;\n    var ww\
    \ = 0;\n    var xx = 0;\n    var yy = 0;\n    var zz = 0;\n    var aaa = 0;\n\
    \    var bbb = 0;\n    var ccc = 0;\n    var ddd = 0;\n    var eee = 0;\n    var\
    \ fff = 0;\n    var ggg = 0;\n    var hhh = 0;\n    var iii = 0;\n    var jjj\
    \ = 0;\n    var kkk = 0;\n    var lll = 0;\n    var mmm = 0;\n    var nnn = 0;\n\
    \    var ooo = 0;\n    var ppp = 0;\n    var qqq =", "    var reverse = string.split(\"\
    \").reverse().join(\"\");\n    var len = string.length;\n    var i = 0;\n    while(i\
    \ < len){\n        if(string.substring(0, len - i) == reverse.substring(i)){\n\
    \            return string + reverse.substring(len - i);\n        }\n        i++;\n\
    \    }\n    return string + reverse.substring(len - i);\n}\n", "    var palindrome\
    \ = string;\n    var reverse = string.split(\"\").reverse().join(\"\");\n    var\
    \ length = string.length;\n    for(var i = length; i >= 0; i--){\n        if(string.substring(0,\
    \ i) == reverse.substring(length - i)){\n            palindrome = string.substring(0,\
    \ i) + reverse.substring(0, length - i);\n            break;\n        }\n    }\n\
    \    return palindrome;\n}\n", "    var longest_palindrome = find_longest_palindrome(string);\n\
    \    var prefix = string.substring(0, string.length - longest_palindrome.length);\n\
    \    var prefix_reversed = reverse_string(prefix);\n    return string + prefix_reversed;\n\
    }\n", "    var palindrome = string;\n    var i = 0;\n    var j = string.length\
    \ - 1;\n    while(i < j){\n        if(string[i] == string[j]){\n            i++;\n\
    \            j--;\n        } else {\n            i = 0;\n            j--;\n  \
    \      }\n    }\n    if(i == j){\n        palindrome += string.substring(0, i).split(\"\
    \").reverse().join(\"\");\n    } else {\n        palindrome += string.substring(0,\
    \ j).split(\"\").reverse().join(\"\");\n    }\n    return palindrome;\n}\n", " \
    \   var palindrome = string;\n    var reverse = string.split(\"\").reverse().join(\"\
    \");\n    var length = string.length;\n    for(var i = length; i >= 0; i--){\n\
    \        if(string.substring(0, i) == reverse.substring(length - i)){\n      \
    \      palindrome = string.substring(0, i) + reverse.substring(0, length - i);\n\
    \            break;\n        }\n    }\n    return palindrome;\n}\n", "    var\
    \ palindrome = string;\n    var reverse = string.split(\"\").reverse().join(\"\
    \");\n    for(var i = 0; i < string.length; i++){\n        if(string.substr(i)\
    \ == reverse.substr(0, string.length - i)){\n            palindrome = string +\
    \ reverse.substr(string.length - i);\n            break;\n        }\n    }\n \
    \   return palindrome;\n}\n", "    var palindrome = string;\n    var suffix =\
    \ longest_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length\
    \ - suffix.length);\n    palindrome += reverse(prefix);\n    return palindrome;\n\
    }\n", "    var palindrome = string;\n    var i = string.length;\n    while(i>0){\n\
    \        if(is_palindrome(string.substring(0,i))){\n            palindrome = string.substring(0,i)\
    \ + reverse(string.substring(i));\n            break;\n        }\n        i--;\n\
    \    }\n    return palindrome;\n}\n", "    var palindrome = string;\n    var reverse\
    \ = string.split(\"\").reverse().join(\"\");\n    var i = 0;\n    while(i < string.length){\n\
    \        if(string.substr(i) == reverse.substr(0, string.length - i)){\n     \
    \       palindrome = string.substr(0, i) + reverse;\n            break;\n    \
    \    }\n        i++;\n    }\n    return palindrome;\n}\n", "    var prefix = string.substring(0,\
    \ string.length - 1);\n    var postfix = string.substring(string.length - 1, string.length);\n\
    \    var reversed_prefix = reverse(prefix);\n    return string + reversed_prefix;\n\
    }\n", "    var palindrome = string;\n    var i = 0;\n    var j = string.length\
    \ - 1;\n    while(i < j){\n        if(string[i] == string[j]){\n            i++;\n\
    \            j--;\n        }\n        else{\n            palindrome = string.slice(0,\
    \ j) + string.slice(j+1);\n            j--;\n        }\n    }\n    return palindrome\
    \ + palindrome.split(\"\").reverse().join(\"\");\n}\n", "    var palindrome =\
    \ string;\n    var suffix = \"\";\n    var prefix = \"\";\n    var i = 0;\n  \
    \  var j = string.length - 1;\n    while(i < j){\n        if(string[i] == string[j]){\n\
    \            suffix += string[i];\n            prefix = string[j] + prefix;\n\
    \            i++;\n            j--;\n        }\n        else{\n            suffix\
    \ = \"\";\n            prefix = \"\";\n            i = 0;\n            j--;\n\
    \        }\n    }\n    palindrome += prefix;\n    return palindrome;\n}\n", " \
    \   var len = string.length;\n    var i = 0;\n    var j = len - 1;\n    var prefix\
    \ = \"\";\n    var suffix = \"\";\n    var palindrome = \"\";\n    while(i < j){\n\
    \        if(string[i] == string[j]){\n            prefix += string[i];\n     \
    \       suffix = string[j] + suffix;\n            i++;\n            j--;\n   \
    \     }\n        else{\n            prefix = prefix.slice(0, -1);\n          \
    \  suffix = suffix.slice(1);\n            j++;\n        }\n    }\n    palindrome\
    \ = string + suffix;\n    return palindrome;\n}\n", "    var palindrome = string;\n\
    \    var length = string.length;\n    for(var i = length; i >= 0; i--){\n    \
    \    if(is_palindrome(string.substring(i, length))){\n            palindrome =\
    \ string.substring(0, i) + reverse(string.substring(i, length)) + string.substring(i,\
    \ length);\n            break;\n        }\n    }\n    return palindrome;\n}\n",
  "    var palindrome = string;\n    var reverse = string.split(\"\").reverse().join(\"\
    \");\n    var length = string.length;\n    for(var i = length; i >= 0; i--){\n\
    \        if(string.substring(0, i) == reverse.substring(length - i)){\n      \
    \      palindrome = string.substring(0, i) + reverse.substring(0, length - i);\n\
    \            break;\n        }\n    }\n    return palindrome;\n}\n", "    var\
    \ palindrome = string;\n    var reverse = string.split(\"\").reverse().join(\"\
    \");\n    var j = 0;\n    for(var i = string.length-1; i >= 0; --i){\n       \
    \ if(string.substr(i) == reverse.substr(0, string.length-i)){\n            j =\
    \ i;\n            break;\n        }\n    }\n    palindrome += reverse.substr(string.length-j);\n\
    \    return palindrome;\n}\n", "    var palindrome = string;\n    var suffix =\
    \ \"\";\n    var prefix = \"\";\n    for(var i = string.length - 1; i >= 0; i--){\n\
    \        if(is_palindrome(string.substring(i))){\n            suffix = string.substring(i);\n\
    \            prefix = string.substring(0, i);\n            break;\n        }\n\
    \    }\n    palindrome += reverse(prefix);\n    return palindrome;\n}\n", "  \
    \  var palindrome = string;\n    var suffix = longest_palindrome_suffix(string);\n\
    \    var prefix = string.substring(0, string.length - suffix.length);\n    palindrome\
    \ += reverse(prefix);\n    return palindrome;\n}\n", "    var palindrome = string;\n\
    \    var reverse = string.split(\"\").reverse().join(\"\");\n    var length =\
    \ string.length;\n    for(var i = length; i >= 0; i--){\n        if(string.substring(0,\
    \ i) == reverse.substring(length - i)){\n            palindrome = string.substring(0,\
    \ i) + reverse.substring(0, length - i);\n            break;\n        }\n    }\n\
    \    return palindrome;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
