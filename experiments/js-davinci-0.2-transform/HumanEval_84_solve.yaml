name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a, b) => parseInt(a) + parseInt(b))\n\
    }\n", "  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n",
  "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n",
  "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0;\
    \ i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n", "  return\
    \ N.toString(2).split('').reduce((a,b)=>a+Number(b),0).toString();\n}", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>{return parseInt(a)+parseInt(b)},0)\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0);\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+Number(b),0)\n}", " \
    \ var binary = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n}",
  "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
