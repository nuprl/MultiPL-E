name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a, b) => parseInt(a) + parseInt(b))\n\
    }\n", "  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n",
  "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n",
  "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0;\
    \ i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n", "  return\
    \ N.toString(2).split('').reduce((a,b)=>a+Number(b),0).toString();\n}", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>{return parseInt(a)+parseInt(b)},0)\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0);\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+Number(b),0)\n}", " \
    \ var binary = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n}",
  "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n}",
  "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n", "    //..\n    let binary = N.toString(2);\n\
    \    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum +=\
    \ parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n", "    //..\n \
    \   return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  //..\n  return N.toString(2);\n}", "    let binary = N.toString(2);\n\
    \    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum +=\
    \ parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,b)=>+a\
    \ + +b,0).toString()\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>+a + +b);\n}\n", "    //..\n\
    \    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length;\
    \ i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }", "    //..\n    return N.toString(2);\n}", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "  //..\n  return N.toString(2);\n}", "    var binary = N.toString(2);\n\
    \    var sum = 0;\n    for (var i = 0; i < binary.length; i++) {\n        sum\
    \ += parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n", "  return\
    \ N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n}", "   \
    \ return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n}\n",
  "  var binary = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n",
  "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0;\
    \ i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0);\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=> parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+Number(b),0)\n}", "  \
    \  //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  //..\n  return N.toString(2).split('').reduce((a,b) => +a + +b);\n}", " \
    \ return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n}",
  "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0)\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}\n",
  "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "  //..\n  return (N >>> 0).toString(2);\n}", "    return N.toString(2).split('').reduce((a,b)=>{return\
    \ parseInt(a)+parseInt(b)},0).toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}\n",
  "  //..\n  return N.toString(2).split('').reduce((a,b) => parseInt(a) + parseInt(b));\n\
    }\n", "  //..\n  return N.toString(2).split('').reduce((a,b) => +a + +b);\n}",
  "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    //..\n    return N.toString(2);\n}", "    return N.toString(2).split('').reduce((a,b)=>a+Number(b),0).toString();\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i <\
    \ binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    //..\n    return (N >>> 0).toString(2);\n}\n", " \
    \   return N.toString(2).split('').reduce((a,b)=>+a+ +b);\n}", "  //..\n  return\
    \ N.toString(2).split('').reduce((a,b) => parseInt(a) + parseInt(b));\n}", " \
    \   let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length;\
    \ i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n\
    }\n", "    //..\n    var binary = N.toString(2);\n    var sum = 0;\n    for (var\
    \ i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>a+Number(b),0).toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+Number(b),0)\n}", "    return\
    \ N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n}\n", " \
    \   let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length;\
    \ i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n", "    //..\n    var binary = N.toString(2);\n\
    \    var sum = 0;\n    for (var i = 0; i < binary.length; i++) {\n        sum\
    \ += parseInt(binary[i]);\n    }\n    return sum.toString();\n}", "  //..\n  var\
    \ bin = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < bin.length; i++)\
    \ {\n    sum += parseInt(bin[i]);\n  }\n  return sum.toString();\n}", "  return\
    \ N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n}", "  \
    \  //..\n    return N.toString(2);\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  //..\n  let binary = N.toString(2);\n  let sum = 0;\n  for (let i = 0;\
    \ i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    //..\n    return N.toString(2);\n}\n", "  //..\n  return N.toString(2).split('').reduce((a,b)\
    \ => parseInt(a) + parseInt(b), 0).toString()\n}\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }", "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }", "    //..\n    return N.toString(2);\n}", "    //..\n    let binary = N.toString(2);\n\
    \    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum +=\
    \ parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i <\
    \ binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>a+b*1,0)\n}", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }", "    var binary = N.toString(2);\n    var sum = 0;\n    for (var i = 0; i\
    \ < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>{return\
    \ parseInt(a)+parseInt(b)},0).toString()\n}", "    return N.toString(2).split('').reduce((a,b)=>+a+\
    \ +b);\n}\n", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}", "  //..\n  return N.toString(2).split('').reduce((a,b)\
    \ => parseInt(a) + parseInt(b))\n}", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>+a + +b);\n}", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n", "  return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>+a + +b)\n}\n", "    //..\n    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>{\n        return parseInt(a)+parseInt(b);\n\
    \    })\n}", "    //..\n    return N.toString(2);\n}", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i <\
    \ binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>+a+\
    \ +b);\n}\n", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n", "    //..\n    //..\n    //..\n    //..\n \
    \   //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n    //..\n\
    \    //..\n    //..\n    //..\n    //..", "    let num = N.toString(2);\n    let\
    \ sum = 0;\n    for(let i = 0; i < num.length; i++){\n        sum += parseInt(num[i]);\n\
    \    }\n    return sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,\
    \ b) => a + parseInt(b), 0);\n}\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+b*1,0)\n}\n", "    //..\n\
    \    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}\n", "  //..\n\
    \  return N.toString(2).split('').reduce((a,b) => parseInt(a) + parseInt(b), 0);\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>Number(a)+Number(b),0)\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    \  }", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>+a + +b);\n}\n", "    //..\n\
    \    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length;\
    \ i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>{return parseInt(a)+parseInt(b)})\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }\n", "    //..\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let\
    \ i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}",
  "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n",
  "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n}\n",
  "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i <\
    \ binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+b*1,0)\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n}\n", "   \
    \ let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length;\
    \ i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n\
    }\n", "    // convert N to binary\n    let binary = N.toString(2);\n    // split\
    \ binary into an array of strings\n    let binaryArray = binary.split('');\n \
    \   // convert each string to a number\n    let binaryArrayNumbers = binaryArray.map(Number);\n\
    \    // sum the numbers\n    let sum = binaryArrayNumbers.reduce((a, b) => a +\
    \ b, 0);\n    // return the sum\n    return sum.toString();\n}\n", "    return\
    \ N.toString(2).split('').reduce((a,b)=>+a + +b)\n}\n", "    //..\n    let binary\
    \ = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n\
    \        sum += parseInt(binary[i]);\n    }\n    return sum.toString();\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+Number(b),0).toString()\n\
    }", "  return N.toString(2).split('').reduce((a, b) => parseInt(a) + parseInt(b),\
    \ 0).toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=> parseInt(a)+parseInt(b));\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }", "  //..\n  return N.toString(2);\n}", "    return N.toString(2).split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n}\n", "    return N.toString(2).split('').reduce((a,b)=>+a\
    \ + +b);\n}\n", "    return N.toString(2).split('').reduce((a,b)=>+a+ +b);\n}",
  "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "  return N.toString(2).split('').reduce((a, b) => parseInt(a) + parseInt(b));\n\
    }\n", "    return N.toString(2).split('').reduce((a,b)=>+a+ +b);\n}", "    //..\n\
    \    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString();\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>+a + +b)\n}", "    return\
    \ N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0)\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b),0).toString()\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "    //..\n    return N.toString(2);\n}\n", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    }\n", "    var binary = N.toString(2);\n    var sum = 0;\n    for (var i = 0;\
    \ i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i\
    \ < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return\
    \ sum.toString();\n}\n", "    return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }\n", "  //..\n  var binary = N.toString(2);\n  var sum = 0;\n  for (var i = 0;\
    \ i < binary.length; i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n\
    }", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString()\n\
    }", "    //..\n    var binary = N.toString(2);\n    var sum = 0;\n    for (var\
    \ i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n\
    \    return sum.toString();\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
