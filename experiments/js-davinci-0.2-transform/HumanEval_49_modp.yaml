name: HumanEval_49_modp
language: js
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  if(n == 0){\n    return 1;\n  }\n  else if(n == 1){\n    return n;\n\
    \  }\n  else{\n    return (modp(n-1, p) * n) % p;\n  }\n}\n", "    if(n==0){\n\
    \        return 1;\n    }\n    if(n%2==0){\n        return modp(n/2, p)**2 % p;\n\
    \    }\n    else{\n        return modp(n-1, p)*2 % p;\n    }\n}\n", "\tif(n ==\
    \ 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\t\
    return (2*x*x) % p;\n\t}\n}\n", "    if(n == 0){\n        return 1;\n    }\n \
    \   if(n % 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n \
    \       return modp(n-1, p) * 2 % p;\n    }\n}\n", "    if(n == 0){\n        return\
    \ 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2 % p;\n    }\n\
    \    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n", "    if(n == 0){\n\
    \        return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n\
    \ % 2 == 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n", "  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return modp(n-1,\
    \ p) * modp(n+1, p) % p;\n}\n", "\tif(n == 0) return 1;\n\tif(n == 1) return n;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n) % p;\n\t}\n}\n", "\tif(n ==\
    \ 0) return 1;\n\tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2,\
    \ p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\t\
    return (2*x*x) % p;\n\t}\n}\n", "\tif(n == 0) return 1;\n\tif(n % 2 == 0){\n\t\
    \treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}else{\n\t\treturn modp(n-1, p) *\
    \ modp(n, p) % p;\n\t}\n}\n", "  if(n === 0){\n    return 1;\n  }\n  if(n % 2\
    \ === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return n * modp(n-1, p) %\
    \ p;\n}\n", "    if(n == 0){\n        return 1;\n    }\n    if(n % 2 == 0){\n\
    \        return modp(n/2, p) * modp(n/2, p) % p;\n    }\n    else{\n        return\
    \ modp(n/2, p) * modp(n/2, p) * 2 % p;\n    }\n}\n", "    if(n == 0){\n      \
    \  return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n % 2 ==\
    \ 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n \
    \       return (2 * modp(n-1, p)) % p;\n    }\n}\n", "\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n == 2) return 4;\n\tif(n == 3) return 8;\n\tif(n\
    \ == 4) return 16;\n\tif(n == 5) return 32;\n\tif(n == 6) return 64;\n\tif(n ==\
    \ 7) return 128;\n\tif(n == 8) return 256;\n\tif(n == 9) return 512;\n\tif(n ==\
    \ 10) return 1024;\n\tif(n == 11) return 2048;\n\tif(n == 12) return 4096;\n\t\
    if(n == 13) return 8192;\n\tif(n == 14) return 16384;\n\tif(n == 15) return 32768;\n\
    \tif(n == 16) return 65536;\n\tif(n == 17) return 131072;\n\tif(n == 18) return\
    \ 262144;\n\tif(n == 19) return 524288;\n\tif(n == 20) return 1048576;\n\tif(n\
    \ == 21) return 2097152;\n\tif(n == 22) return 4194304;\n\tif(n == 23) return\
    \ 8388608;\n\tif(n == 24) return 16777216;\n\tif(n == 25) return 33554432;\n\t\
    if(n == 26) return 67108864;\n\tif(n == 27) return 134217728;\n\tif(n == 28) return\
    \ 268435456;\n\tif(n == 29) return 536870912;\n\tif(n == 30) return 1073741824;\n\
    \tif(n == 31) return 2147483648;\n\tif(n == 32) return 4294967296;\n\tif(n ==\
    \ 33) return 8589934592;\n\tif(n == 34) return 17179869184;\n\tif(n == 35) return\
    \ 34359738368;\n\tif(n == 36) return 68719476736;\n\tif(n == 37) return 137438953472;\n\
    \tif(n == 38) return 274877906944;\n\tif(n == 39) return 549", "    var result\
    \ = 1;\n    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n\
    \    }\n    return result;\n}\n", "    if(n === 0){\n        return 1;\n    }\n\
    \    if(n % 2 === 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n\
    \    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n}\n", "    var res\
    \ = 1;\n    while (n > 0){\n        if (n % 2 == 1){\n            res = (res *\
    \ 2) % p;\n        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n  \
    \          res = (res * res) % p;\n        }\n    }\n    return res;\n}\n", " \
    \   var res = 1;\n    var b = n;\n    while (p > 0) {\n        if ((p & 1) ==\
    \ 1)\n            res = (res * b) % 101;\n        p >>= 1;\n        b = (b * b)\
    \ % 101;\n    }\n    return res;\n}\n", "    if(n == 0){\n        return 1;\n\
    \    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2 % p;\n    }\n  \
    \  return modp(n-1, p) * 2 % p;\n}\n", "  var result = 1;\n  while(n > 0){\n \
    \   if(n % 2 == 1){\n      result = (result * 2) % p;\n    }\n    n = Math.floor(n\
    \ / 2);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
