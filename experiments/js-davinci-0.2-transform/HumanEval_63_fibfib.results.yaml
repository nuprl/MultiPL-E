language: js
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n < 2){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  var result = 0;\n  if(n == 0){\n    return 0;\n  }\n  if(n ==\
    \ 1){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n  }\n  if(n > 2){\n \
    \   result = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n       \
    \ return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0) return 0;\n  if(n == 1) return 0;\n  if(n == 2) return\
    \ 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\
    \t}\n\tif(n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0) return 0;\n\tif(n == 1) return 0;\n\tif(n == 2) return\
    \ 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n       \
    \ return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    if(n==2){\n       \
    \ return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n <= 1){\n        return 0;\n    }\n    if(n == 2){\n   \
    \     return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\telse if(n == 1){\n\t\treturn\
    \ 0;\n\t}\n\telse if(n == 2){\n\t\treturn 1;\n\t}\n\telse{\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n < 2){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n < 2){\n        return 0;\n    }\n    if(n == 2){\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    if(n==2){\n       \
    \ return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0) return 0;\n  if(n == 1) return 0;\n  if(n == 2) return\
    \ 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n <= 1){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\
    \t}\n\tif(n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n < 3){\n        return n - 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n4\n    at test (/tmp/tmp1yb_eixw.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1yb_eixw.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\
    \t}\n\tif(n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\
    \t}\n\tif(n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n == 0){\n    return 0;\n  }\n  if(n == 1){\n    return 0;\n\
    \  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0) return 0;\n\tif(n == 1) return 0;\n\tif(n == 2) return\
    \ 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n==0){\n        return 0;\n    }\n    if(n==1){\n       \
    \ return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n ===\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  if(n === 3) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n<=1){\n        return 0;\n    }\n    if(n==2){\n       \
    \ return 1;\n    }\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    var a = 0;\n    var b = 0;\n    var c = 1;\n    var d = 0;\n\
    \    for(var i = 3; i <= n; i++){\n        d = a + b + c;\n        a = b;\n  \
    \      b = c;\n        c = d;\n    }\n    return d;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 1
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tvar a = 0;\n\tvar b = 0;\n\tvar c = 1;\n\tvar d = 0;\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\
    \t}\n\treturn d;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpdmfw8d1l.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdmfw8d1l.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n \
    \       return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n < 2){\n        return 0;\n    }\n    if(n == 2){\n    \
    \    return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n   \
    \     return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n ==\
    \ 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n\tif(n == 0){\n\t\treturn 0;\n\t}\n\tif(n == 1){\n\t\treturn 0;\n\
    \t}\n\tif(n == 2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749165
- exit_code: 0
  program: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
    \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
    \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
    // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
    \ fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n\
    \  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
