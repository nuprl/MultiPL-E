name: HumanEval_116_sort_array
language: js
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
  // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
  \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1,\
  \ 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["    let arr1 = arr.map(function(a){\n        return a.toString(2).split('').filter(function(b){\n\
    \            return b == 1;\n        }).length;\n    });\n    let arr2 = arr.map(function(a){\n\
    \        return a.toString(2).split('').filter(function(b){\n            return\
    \ b == 1;\n        }).length;\n    });\n    let arr3 = arr.map(function(a){\n\
    \        return a.toString(2).split('').filter(function(b){\n            return\
    \ b == 1;\n        }).length;\n    });\n    for(let i = 0; i < arr.length; i++){\n\
    \        for(let j = 0; j < arr.length; j++){\n            if(arr1[i] < arr1[j]){\n\
    \                let temp = arr1[i];\n                arr1[i] = arr1[j];\n   \
    \             arr1[j] = temp;\n            }\n        }\n    }\n    for(let i\
    \ = 0; i < arr.length; i++){\n        for(let j = 0; j < arr.length; j++){\n \
    \           if(arr2[i] == arr2[j] && arr[i] < arr[j]){\n                let temp\
    \ = arr2[i];\n                arr2[i] = arr2[j];\n                arr2[j] = temp;\n\
    \            }\n        }\n    }\n    for(let i = 0; i < arr.length; i++){\n \
    \       for(let j = 0; j < arr.length; j++){\n            if(arr3[i] == arr3[j]\
    \ && arr[i] == arr[j] && arr1[i] == arr1[j] && arr[i] < arr[j]){\n           \
    \     let temp = arr3[i];\n                arr3[i] = arr3[j];\n              \
    \  arr3[j] = temp;\n            }\n        }\n    }\n    return arr;\n}", "  \
    \  let sorted = arr.sort((a, b) => {\n        let aBinary = a.toString(2);\n \
    \       let bBinary = b.toString(2);\n        let aOnes = aBinary.match(/1/g)\
    \ ? aBinary.match(/1/g).length : 0;\n        let bOnes = bBinary.match(/1/g) ?\
    \ bBinary.match(/1/g).length : 0;\n        if (aOnes === bOnes) {\n          \
    \  return a - b;\n        } else {\n            return aOnes - bOnes;\n      \
    \  }\n    });\n    return sorted;\n}\n", "    return arr.sort((a, b) => {\n  \
    \      if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) ===\
    \ null) {\n            return a - b;\n        } else if (a.toString(2).match(/1/g)\
    \ === null) {\n            return -1;\n        } else if (b.toString(2).match(/1/g)\
    \ === null) {\n            return 1;\n        } else if (a.toString(2).match(/1/g).length\
    \ === b.toString(2).match(/1/g).length) {\n            return a - b;\n       \
    \ } else {\n            return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;\n\
    \        }\n    });\n}\n", "    return arr.sort((a, b) => {\n        let aBin\
    \ = a.toString(2);\n        let bBin = b.toString(2);\n        let aOnes = aBin.split('').filter(x\
    \ => x === '1').length;\n        let bOnes = bBin.split('').filter(x => x ===\
    \ '1').length;\n        if (aOnes === bOnes) {\n            return a - b;\n  \
    \      }\n        return aOnes - bOnes;\n    });\n}\n", "    return arr.sort((a,\
    \ b) => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n", "    let arr1 = arr.map(function(x){\n        return x.toString(2);\n\
    \    });\n    arr1.sort(function(a,b){\n        if(a.match(/1/g) === null && b.match(/1/g)\
    \ === null){\n            return a - b;\n        }\n        if(a.match(/1/g) ===\
    \ null){\n            return -1;\n        }\n        if(b.match(/1/g) === null){\n\
    \            return 1;\n        }\n        if(a.match(/1/g).length === b.match(/1/g).length){\n\
    \            return a - b;\n        }\n        return a.match(/1/g).length - b.match(/1/g).length;\n\
    \    });\n    return arr1.map(function(x){\n        return parseInt(x,2);\n  \
    \  });\n}\n", "    return arr.sort((a, b) => {\n        let aBin = a.toString(2).split('').filter(x\
    \ => x === '1').length;\n        let bBin = b.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        if (aBin === bBin) {\n            return a - b;\n\
    \        }\n        return aBin - bBin;\n    });\n}\n", "    let arr1 = arr.map(x\
    \ => x.toString(2).split('').filter(y => y === '1').length);\n    let arr2 = arr.map(x\
    \ => x.toString(2).split('').filter(y => y === '1').length);\n    arr1.sort((a,\
    \ b) => a - b);\n    arr2.sort((a, b) => b - a);\n    let arr3 = [];\n    for\
    \ (let i = 0; i < arr1.length; i++) {\n        arr3.push(arr[arr2.indexOf(arr1[i])]);\n\
    \    }\n    return arr3;\n}\n", "    let ones = [];\n    let zeros = [];\n   \
    \ for(let i = 0; i < arr.length; i++){\n        let binary = arr[i].toString(2);\n\
    \        let count = 0;\n        for(let j = 0; j < binary.length; j++){\n   \
    \         if(binary[j] === '1'){\n                count++;\n            }\n  \
    \      }\n        if(count === 0){\n            zeros.push(arr[i]);\n        }\n\
    \        else{\n            ones.push([arr[i], count]);\n        }\n    }\n  \
    \  ones.sort(function(a, b){\n        if(a[1] === b[1]){\n            return a[0]\
    \ - b[0];\n        }\n        else{\n            return a[1] - b[1];\n       \
    \ }\n    });\n    for(let i = 0; i < ones.length; i++){\n        zeros.push(ones[i][0]);\n\
    \    }\n    return zeros;\n}\n", "    return arr.sort((a, b) => {\n        let\
    \ aBin = a.toString(2);\n        let bBin = b.toString(2);\n        let aOnes\
    \ = aBin.split('').filter(e => e === '1').length;\n        let bOnes = bBin.split('').filter(e\
    \ => e === '1').length;\n        if (aOnes === bOnes) {\n            return a\
    \ - b;\n        } else {\n            return aOnes - bOnes;\n        }\n    });\n\
    }\n", "    return arr.sort((a, b) => {\n        let aOnes = a.toString(2).split('').filter(x\
    \ => x === '1').length;\n        let bOnes = b.toString(2).split('').filter(x\
    \ => x === '1').length;\n        if (aOnes === bOnes) {\n            return a\
    \ - b;\n        }\n        return aOnes - bOnes;\n    });\n}\n", "  return arr.sort((a,\
    \ b) => {\n    const aBin = a.toString(2);\n    const bBin = b.toString(2);\n\
    \    const aOnes = aBin.split('').filter(x => x === '1').length;\n    const bOnes\
    \ = bBin.split('').filter(x => x === '1').length;\n    if (aOnes === bOnes) {\n\
    \      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n}\n", "    return\
    \ arr.sort((a, b) => {\n        let aBin = a.toString(2);\n        let bBin =\
    \ b.toString(2);\n        let aOnes = aBin.match(/1/g) ? aBin.match(/1/g).length\
    \ : 0;\n        let bOnes = bBin.match(/1/g) ? bBin.match(/1/g).length : 0;\n\
    \        if (aOnes === bOnes) {\n            return a - b;\n        } else {\n\
    \            return aOnes - bOnes;\n        }\n    });\n}\n", "    return arr.sort((a,\
    \ b) => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n", "    return arr.sort((a, b) => {\n        const a1 = a.toString(2).split('').filter(x\
    \ => x === '1').length;\n        const b1 = b.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        return a1 - b1 || a - b;\n    });\n}\n", "    return\
    \ arr.sort((a, b) => {\n        let aOnes = a.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        let bOnes = b.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        if (aOnes === bOnes) return a - b;\n        return\
    \ aOnes - bOnes;\n    });\n}\n", "    return arr.sort((a, b) => {\n        let\
    \ aOnes = a.toString(2).split('').filter(x => x === '1').length;\n        let\
    \ bOnes = b.toString(2).split('').filter(x => x === '1').length;\n        if (aOnes\
    \ === bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n", "    return arr.sort((a, b) => {\n        let a1 = a.toString(2).split('').filter(x\
    \ => x === '1').length;\n        let b1 = b.toString(2).split('').filter(x =>\
    \ x === '1').length;\n        if (a1 === b1) {\n            return a - b;\n  \
    \      }\n        return a1 - b1;\n    });\n}\n", "    return arr.sort((a, b)\
    \ => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(num => num === '1').length;\n     \
    \   let bOnes = bBin.split('').filter(num => num === '1').length;\n        if\
    \ (aOnes === bOnes) {\n            return a - b;\n        } else {\n         \
    \   return aOnes - bOnes;\n        }\n    });\n}\n", "    return arr.sort((a,\
    \ b) => {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n\
    \        let aOnes = aBin.split('').filter(x => x === '1').length;\n        let\
    \ bOnes = bBin.split('').filter(x => x === '1').length;\n        if (aOnes ===\
    \ bOnes) {\n            return a - b;\n        }\n        return aOnes - bOnes;\n\
    \    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
