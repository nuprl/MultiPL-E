name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["    var fib = fibonacci(n);\n    var prime = prime_number(n);\n   \
    \ var prime_fib = [];\n    for(var i = 0; i < fib.length; i++){\n        for(var\
    \ j = 0; j < prime.length; j++){\n            if(fib[i] == prime[j]){\n      \
    \          prime_fib.push(fib[i]);\n            }\n        }\n    }\n    return\
    \ prime_fib[n-1];\n}\n", "    let i = 2;\n    let fib = 1;\n    let fib_prev =\
    \ 1;\n    let fib_next = 2;\n    while (i < n){\n        fib_prev = fib;\n   \
    \     fib = fib_next;\n        fib_next = fib_prev + fib;\n        if (is_prime(fib)){\n\
    \            i++;\n        }\n    }\n    return fib;\n}\n", "    var fib = fibonacci(n);\n\
    \    var prime = prime_numbers(fib);\n    return prime[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var prime = prime_number(n);\n    var i = 0;\n    var j\
    \ = 0;\n    var result = 0;\n    while(i < n){\n        if(fib[i] == prime[j]){\n\
    \            result = fib[i];\n            i++;\n            j++;\n        }\n\
    \        else if(fib[i] < prime[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return result;\n}\n", "    var fib =\
    \ fibonacci(n);\n    var prime = prime_number(n);\n    var prime_fib = [];\n \
    \   for(var i = 0; i < fib.length; i++){\n        for(var j = 0; j < prime.length;\
    \ j++){\n            if(fib[i] == prime[j]){\n                prime_fib.push(fib[i]);\n\
    \            }\n        }\n    }\n    return prime_fib[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var prime = prime_numbers(n);\n    var prime_fib = [];\n\
    \    for(var i = 0; i < fib.length; i++){\n        for(var j = 0; j < prime.length;\
    \ j++){\n            if(fib[i] == prime[j]){\n                prime_fib.push(fib[i]);\n\
    \            }\n        }\n    }\n    return prime_fib[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var prime = prime_number(n);\n    var i = 0;\n    var j\
    \ = 0;\n    var result = [];\n    while(i < fib.length && j < prime.length){\n\
    \        if(fib[i] == prime[j]){\n            result.push(fib[i]);\n         \
    \   i++;\n            j++;\n        }\n        else if(fib[i] < prime[j]){\n \
    \           i++;\n        }\n        else{\n            j++;\n        }\n    }\n\
    \    return result[n-1];\n}\n", "    var fib_nums = [2,3];\n    var prime_fib_nums\
    \ = [2,3];\n    var i = 2;\n    while(prime_fib_nums.length < n){\n        fib_nums.push(fib_nums[i-1]\
    \ + fib_nums[i-2]);\n        if(is_prime(fib_nums[i])){\n            prime_fib_nums.push(fib_nums[i]);\n\
    \        }\n        i++;\n    }\n    return prime_fib_nums[n-1];\n}\n", "    var\
    \ fib = fibonacci(n);\n    var prime = prime_number(n);\n    var i = 0;\n    var\
    \ j = 0;\n    var prime_fib = [];\n    while(i < fib.length && j < prime.length){\n\
    \        if(fib[i] == prime[j]){\n            prime_fib.push(fib[i]);\n      \
    \      i++;\n            j++;\n        }\n        else if(fib[i] < prime[j]){\n\
    \            i++;\n        }\n        else{\n            j++;\n        }\n   \
    \ }\n    return prime_fib[n-1];\n}\n", "    var fib = fibonacci(n);\n    var prime\
    \ = is_prime(fib);\n    if(prime == true){\n        return fib;\n    }\n    else{\n\
    \        return prime_fib(n+1);\n    }\n}\n", "    var fib = fibonacci(n);\n \
    \   var prime = prime_number(n);\n    var i = 0;\n    var j = 0;\n    var result\
    \ = 0;\n    while(i < n){\n        if(fib[i] == prime[j]){\n            result\
    \ = fib[i];\n            i++;\n            j++;\n        }\n        else if(fib[i]\
    \ < prime[j]){\n            i++;\n        }\n        else{\n            j++;\n\
    \        }\n    }\n    return result;\n}\n", "    var fib = fibonacci(n);\n  \
    \  var prime = prime_number(n);\n    var i = 0;\n    var j = 0;\n    while(i<fib.length\
    \ && j<prime.length){\n        if(fib[i] == prime[j]){\n            return fib[i];\n\
    \        }\n        else if(fib[i] < prime[j]){\n            i++;\n        }\n\
    \        else{\n            j++;\n        }\n    }\n}\n", "    var fib = fibonacci(n);\n\
    \    var prime = prime_number(n);\n    var prime_fib = [];\n    for(var i = 0;\
    \ i < fib.length; i++){\n        for(var j = 0; j < prime.length; j++){\n    \
    \        if(fib[i] == prime[j]){\n                prime_fib.push(fib[i]);\n  \
    \          }\n        }\n    }\n    return prime_fib[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var prime = prime_number(n);\n    var result = [];\n  \
    \  for(var i = 0; i < fib.length; i++){\n        for(var j = 0; j < prime.length;\
    \ j++){\n            if(fib[i] == prime[j]){\n                result.push(fib[i]);\n\
    \            }\n        }\n    }\n    return result[n-1];\n}\n", "    var fib\
    \ = [2,3,5,13,89];\n    var i = 0;\n    while(i < n){\n        fib.push(fib[i]\
    \ + fib[i+1]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var prime = prime_number(n);\n    var i = 0;\n    var j\
    \ = 0;\n    var result = 0;\n    while(i < n){\n        if(fib[i] == prime[j]){\n\
    \            result = fib[i];\n            i++;\n            j++;\n        }\n\
    \        else if(fib[i] < prime[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return result;\n}\n", "    var fib =\
    \ fibonacci(n);\n    var i = 0;\n    while(!is_prime(fib)){\n        fib = fibonacci(n+i);\n\
    \        i++;\n    }\n    return fib;\n}\n", "    var fib = [2,3,5,13,89];\n \
    \   if(n<=fib.length){\n        return fib[n-1];\n    }\n    else{\n        var\
    \ i = fib.length;\n        while(i<n){\n            var a = fib[i-1];\n      \
    \      var b = fib[i-2];\n            var c = a+b;\n            while(!is_prime(c)){\n\
    \                c = c+b;\n            }\n            fib.push(c);\n         \
    \   i++;\n        }\n        return fib[n-1];\n    }\n}\n", "    var fib = fibonacci(n);\n\
    \    var prime = prime_number(n);\n    var result = [];\n    for(var i = 0; i\
    \ < fib.length; i++){\n        for(var j = 0; j < prime.length; j++){\n      \
    \      if(fib[i] == prime[j]){\n                result.push(fib[i]);\n       \
    \     }\n        }\n    }\n    return result[n-1];\n}\n", "    var fib = fibonacci(n);\n\
    \    var prime = prime_number(n);\n    var result = [];\n    for(var i = 0; i\
    \ < fib.length; i++){\n        for(var j = 0; j < prime.length; j++){\n      \
    \      if(fib[i] == prime[j]){\n                result.push(fib[i]);\n       \
    \     }\n        }\n    }\n    return result[n-1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
