name: HumanEval_132_is_nested
language: js
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
  []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
  [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
  [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
  ]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == \"[\"){\n            stack.push(string[i]);\n       \
    \ }\n        else if(string[i] == \"]\"){\n            if(stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   var stack = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == \"]\"){\n            if(stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n \
    \   else{\n        return false;\n    }\n}", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "    var count = 0;\n    for(var i = 0; i <\
    \ string.length; i++){\n        if(string[i] == \"[\"){\n            count++;\n\
    \        }\n        else if(string[i] == \"]\"){\n            count--;\n     \
    \   }\n        if(count < 0){\n            return false;\n        }\n    }\n \
    \   return count > 0 ? false : true;\n}", "    let stack = [];\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let stack = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === \"]\"){\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\n", "  var stack = [];\n  for(var i = 0; i < string.length; i++){\n   \
    \ if(string[i] === '['){\n      stack.push(string[i]);\n    }\n    else if(string[i]\
    \ === ']'){\n      if(stack.length === 0){\n        return false;\n      }\n \
    \     else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length ===\
    \ 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "    var count = 0;\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n         \
    \   count++;\n        }\n        else if(string[i] == \"]\"){\n            count--;\n\
    \        }\n        if(count < 0){\n            return false;\n        }\n   \
    \ }\n    return count == 0;\n}", "    let stack = [];\n    for(let i = 0; i <\
    \ string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === \"]\"){\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}", "    var count = 0;\n    for(var i = 0; i < string.length; i++){\n  \
    \      if(string[i] == \"[\"){\n            count++;\n        }\n        else\
    \ if(string[i] == \"]\"){\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n",
  "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            stack.push(string[i]);\n        }\n        else{\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "    let stack = [];\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === \"]\"){\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n \
    \       if(string[i] === \"[\"){\n            stack.push(string[i]);\n       \
    \ }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length === 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}", " \
    \   var open = 0;\n    var close = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == \"[\"){\n            open++;\n        }\n        if(string[i]\
    \ == \"]\"){\n            close++;\n        }\n        if(close > open){\n   \
    \         return false;\n        }\n    }\n    if(open == close){\n        return\
    \ true;\n    }\n    return false;\n}", "    let stack = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === \"]\"){\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            else{\n \
    \               stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}", "    let count = 0;\n    for(let i = 0; i < string.length; i++){\n  \
    \      if(string[i] === \"[\"){\n            count++;\n        }\n        if(string[i]\
    \ === \"]\"){\n            count--;\n        }\n        if(count < 0){\n     \
    \       return false;\n        }\n    }\n    return count === 0;\n}\n", "    var\
    \ count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === \"[\"){\n            count++;\n        }\n        if(string[i] === \"]\"\
    ){\n            count--;\n        }\n        if(count < 0){\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] ===\
    \ \"]\"){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length === 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "    var stack = [];\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n         \
    \   stack.push(string[i]);\n        }\n        else if(string[i] == \"]\"){\n\
    \            if(stack.length == 0){\n                return false;\n         \
    \   }\n            else{\n                stack.pop();\n            }\n      \
    \  }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
