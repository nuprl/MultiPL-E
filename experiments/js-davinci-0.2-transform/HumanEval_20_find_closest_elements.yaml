name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["    var closest = [numbers[0], numbers[1]];\n    var closest_diff =\
    \ Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n           \
    \ var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
    \ {\n                closest_diff = diff;\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   var closest = [numbers[0], numbers[1]];\n    var closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff){\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    var closest_elements\
    \ = [];\n    var closest_difference = Math.abs(numbers[0] - numbers[1]);\n   \
    \ for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length;\
    \ j++){\n            var difference = Math.abs(numbers[i] - numbers[j]);\n   \
    \         if (difference < closest_difference){\n                closest_difference\
    \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    var\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    var min_pair = [numbers[0], numbers[1]];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j\
    \ < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) <\
    \ min){\n                min = Math.abs(numbers[i] - numbers[j]);\n          \
    \      min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return min_pair;\n}\n", "    var closest = [];\n    var closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff){\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    var closest = [];\n    var\
    \ diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            if\
    \ (Math.abs(numbers[i] - numbers[j]) < diff){\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    var closest = [];\n\
    \    var closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n\
    \            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < closest_diff){\n                closest_diff = diff;\n                closest\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n\
    }\n", "    var closest = [];\n    var min = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j\
    \ < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) <\
    \ min){\n                min = Math.abs(numbers[i] - numbers[j]);\n          \
    \      closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    var closest = [numbers[0], numbers[1]];\n   \
    \ var closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i\
    \ < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n\
    \            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < closest_diff){\n                closest = [numbers[i], numbers[j]];\n    \
    \            closest_diff = diff;\n            }\n        }\n    }\n    return\
    \ closest;\n}\n", "    var closest = [];\n    var min = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = 0; j < numbers.length; j++){\n            if (i != j){\n               \
    \ if (Math.abs(numbers[i] - numbers[j]) < min){\n                    min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                    closest = [numbers[i], numbers[j]];\n  \
    \              }\n            }\n        }\n    }\n    return closest;\n}\n",
  "    var closest = [numbers[0], numbers[1]];\n    var closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff){\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    var min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    var closest = [numbers[0], numbers[1]];\n    for (var i\
    \ = 0; i < numbers.length - 1; i++){\n        if (Math.abs(numbers[i] - numbers[i\
    \ + 1]) < min){\n            min = Math.abs(numbers[i] - numbers[i + 1]);\n  \
    \          closest = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return\
    \ closest;\n}\n", "    var closest = [];\n    var smallest = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < smallest){\n                smallest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    var closest = [numbers[0], numbers[1]];\n\
    \    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            if\
    \ (Math.abs(numbers[i] - numbers[j]) < diff){\n                closest = [numbers[i],\
    \ numbers[j]];\n                diff = Math.abs(numbers[i] - numbers[j]);\n  \
    \          }\n        }\n    }\n    return closest;\n}\n", "    var closest =\
    \ [];\n    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n\
    \            if (Math.abs(numbers[i] - numbers[j]) < diff){\n                diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   var closest = [];\n    var diff = Math.abs(numbers[0] - numbers[1]);\n   \
    \ for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length;\
    \ j++){\n            if (Math.abs(numbers[i] - numbers[j]) < diff){\n        \
    \        diff = Math.abs(numbers[i] - numbers[j]);\n                closest =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n\
    }\n", "    var min = Math.abs(numbers[0] - numbers[1]);\n    var min_index = [0,\
    \ 1];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i +\
    \ 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min){\n                min = Math.abs(numbers[i] - numbers[j]);\n        \
    \        min_index = [i, j];\n            }\n        }\n    }\n    return [numbers[min_index[0]],\
    \ numbers[min_index[1]]];\n}\n", "    var closest = [];\n    var min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (var i = 0; i < numbers.length; i++){\n        for (var\
    \ j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min){\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    var closest = [numbers[0], numbers[1]];\n\
    \    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            if\
    \ (Math.abs(numbers[i] - numbers[j]) < diff){\n                closest = [numbers[i],\
    \ numbers[j]];\n                diff = Math.abs(numbers[i] - numbers[j]);\n  \
    \          }\n        }\n    }\n    return closest;\n}\n", "    var closest =\
    \ [];\n    var diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0;\
    \ i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n\
    \            if (Math.abs(numbers[i] - numbers[j]) < diff){\n                diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
