language: js
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1) return array;\n  if((array[0] + array[array.length - 1]) % 2 === 0) {\n\
    \    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a,\
    \ b) => a - b);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort(function(a, b){return b - a});\n    } else {\n    \
    \    return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array.length > 1) {\n        if ((array[0] + array[array.length - 1])\
    \ % 2 === 0) {\n            return array.sort(function(a, b) {\n             \
    \   return b - a;\n            });\n        } else {\n            return array.sort(function(a,\
    \ b) {\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if (array.length === 0 || array.length\
    \ === 1) {\n    return array;\n  }\n  if ((array[0] + array[array.length - 1])\
    \ % 2 === 0) {\n    return array.sort(function(a, b) {\n      return b - a;\n\
    \    });\n  } else {\n    return array.sort(function(a, b) {\n      return a -\
    \ b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){\n                return\
    \ b - a;\n            });\n        }\n        else{\n            return array.sort(function(a,\
    \ b){\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a,\
    \ b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort((a, b) => b - a);\n    } else {\n        return array.sort((a,\
    \ b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){\n                return\
    \ b - a;\n            });\n        }else{\n            return array.sort(function(a,\
    \ b){\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){\n                return\
    \ b - a;\n            });\n        }\n        else{\n            return array.sort(function(a,\
    \ b){\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length % 2 === 0){\n        return array.sort(function(a, b){\n \
    \           return b - a;\n        });\n    }\n    if(array.length % 2 !== 0){\n\
    \        return array.sort(function(a, b){\n            return a - b;\n      \
    \  });\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpdugof_k9.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdugof_k9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array[0] + array[array.length - 1] % 2 === 0) {\n        return array.sort(function(a,\
    \ b) {\n            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpojid_qij.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpojid_qij.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) return array;\n\
    \    if (array.length === 1) return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 === 0) {\n        return array.sort(function(a, b) {\n            return\
    \ b - a;\n        });\n    } else {\n        return array.sort(function(a, b)\
    \ {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmp1y6zpp0f.js:37:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1y6zpp0f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  if((array[0] + array[array.length - 1]) %\
    \ 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n    });\n\
    \  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            array.sort(function(a, b){return b - a});\n            return\
    \ array;\n        }\n        else{\n            array.sort(function(a, b){return\
    \ a - b});\n            return array;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0 || array.length\
    \ === 1) {\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a;});\n   \
    \     }\n        else{\n            return array.sort(function(a, b){return a\
    \ - b;});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    else{\n        if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n            return array.sort(function(a, b){return b - a});\n\
    \        }\n        else{\n            return array.sort(function(a, b){return\
    \ a - b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort((a, b) => b - a);\n        }\n       \
    \ else{\n            return array.sort((a, b) => a - b);\n        }\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    else if(array.length === 1){\n        return array;\n   \
    \ }\n    else{\n        if((array[0] + array[array.length - 1]) % 2 === 0){\n\
    \            return array.sort(function(a, b){return b - a});\n        }\n   \
    \     else{\n            return array.sort(function(a, b){return a - b});\n  \
    \      }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort(function(a, b){return b - a});\n    } else {\n    \
    \    return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) {\n    return\
    \ array;\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  if (array[0]\
    \ + array[array.length - 1] % 2 === 0) {\n    return array.sort(function(a, b)\
    \ {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a,\
    \ b) {\n      return a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmp8hota6kb.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8hota6kb.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n  \
    \  return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1)\n        return array;\n    if((array[0] + array[array.length - 1]) %\
    \ 2 == 0)\n        return array.sort(function(a, b){return b - a});\n    else\n\
    \        return array.sort(function(a, b){return a - b});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) =>\
    \ b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length % 2 === 0){\n        return array.sort(function(a, b){return\
    \ b - a});\n    }\n    else{\n        return array.sort(function(a, b){return\
    \ a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpph6rx1zh.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph6rx1zh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpwxygb937.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxygb937.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) return\
    \ array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return array;\n\
    \  }\n  if(array.length === 1){\n    return array;\n  }\n  if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n    return array.sort(function(a, b){return b - a});\n  }\n\
    \  else{\n    return array.sort(function(a, b){return a - b});\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0 || array.length\
    \ === 1) {\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n        return array.sort(function(a, b) {\n           \
    \ return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    else if(array.length == 1){\n        return array;\n    }\n\
    \    else if((array[0] + array[array.length - 1]) % 2 == 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    else{\n        return array.sort(function(a,\
    \ b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        return array.sort(function(a,\
    \ b) {\n            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }else{\n        return array.sort(function(a, b){\n\
    \            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length == 0){\n    return array;\n\
    \  }\n  if(array.length == 1){\n    return array;\n  }\n  if(array.length == 2){\n\
    \    if(array[0] > array[1]){\n      return [array[1], array[0]];\n    }\n   \
    \ else{\n      return array;\n    }\n  }\n  if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n    return array.sort(function(a, b){return b - a});\n  }\n\
    \  else{\n    return array.sort(function(a, b){return a - b});\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0 || array.length\
    \ === 1) {\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    var sum = array[0] + array[array.length - 1];\n   \
    \ if(sum % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }else{\n        return array.sort(function(a, b){return a - b});\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort((a, b) => b - a);\n        }\n      \
    \  if((array[0] + array[array.length - 1]) % 2 !== 0){\n            return array.sort((a,\
    \ b) => a - b);\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  var sum = array[0] + array[array.length\
    \ - 1];\n  if (sum % 2 === 0) {\n    return array.sort(function(a, b) {\n    \
    \  return b - a;\n    });\n  } else {\n    return array.sort(function(a, b) {\n\
    \      return a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length === 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        return array;\n    }\n    let sum\
    \ = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        array.sort((a,\
    \ b) => b - a);\n    }\n    else{\n        array.sort((a, b) => a - b);\n    }\n\
    \    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1) return array;\n  if((array[0] + array[array.length - 1]) % 2 === 0) {\n\
    \    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a,\
    \ b) => a - b);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length == 0) {\n        return\
    \ array;\n    }\n    if (array.length == 1) {\n        return array;\n    }\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0) {\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    else {\n        return array.sort(function(a,\
    \ b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpm2003ygl.js:38:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpm2003ygl.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    } else\
    \ {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }else{\n        return array.sort(function(a, b){\n\
    \            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array.length % 2 === 0) {\n        return array.sort(function(a, b) {\n\
    \            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpk684dd9x.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk684dd9x.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length % 2 === 0){\n        return array.sort(function(a, b){return\
    \ b - a});\n    }\n    else{\n        return array.sort(function(a, b){return\
    \ a - b});\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpmw_1_l8m.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmw_1_l8m.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  var sum = array[0] + array[array.length -\
    \ 1];\n  if(sum % 2 === 0){\n    return array.sort(function(a, b){\n      return\
    \ b - a;\n    });\n  } else {\n    return array.sort(function(a, b){\n      return\
    \ a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length === 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        return array;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) =>\
    \ b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort((a, b) => b - a);\n        }\n      \
    \  else{\n            return array.sort((a, b) => a - b);\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    else if(array.length == 1){\n        return array;\n    }\n\
    \    else{\n        var sum = array[0] + array[array.length - 1];\n        if(sum\
    \ % 2 == 0){\n            return array.sort(function(a, b){return b - a});\n \
    \       }\n        else{\n            return array.sort(function(a, b){return\
    \ a - b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if(array[0] + array[array.length - 1] % 2 == 0) {\n\
    \        return array.sort(function(a, b){\n            return b - a;\n      \
    \  });\n    } else {\n        return array.sort(function(a, b){\n            return\
    \ a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpzgx49v2h.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpzgx49v2h.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){\n            return b - a;\n        });\n\
    \    }\n    else{\n        return array.sort(function(a, b){\n            return\
    \ a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){return b - a;});\n\
    \    }\n    return array.sort(function(a, b){return a - b;});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0 || array.length\
    \ === 1) {\n        return array;\n    }\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 === 0) {\n        return array.sort(function(a, b) {\n           \
    \ return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort(function(a, b) {\n\
    \            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) {\n    return\
    \ array;\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  if (array[0]\
    \ + array[array.length - 1] % 2 === 0) {\n    return array.sort(function(a, b)\
    \ {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a,\
    \ b) {\n      return a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmp8hota6kb.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8hota6kb.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort(function(a, b) {\n\
    \            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort(function(a, b){\n  \
    \          return b - a;\n        });\n    }\n    else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length == 0 || array.length\
    \ == 1) {\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 == 0) {\n        array.sort(function(a, b){return b-a});\n\
    \    } else {\n        array.sort(function(a, b){return a-b});\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }else{\n        return array.sort(function(a, b){return a - b});\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n  \
    \  return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort(function(a, b){return\
    \ b - a});\n    }else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n  \
    \  if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n  \
    \  return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length === 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        return array;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) =>\
    \ b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  if((array[0] + array[array.length - 1]) %\
    \ 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n    });\n\
    \  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort(function(a, b){return\
    \ b - a});\n    }\n    else{\n        return array.sort(function(a, b){return\
    \ a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array[0] + array[array.length - 1] % 2 === 0) {\n        return array.sort(function(a,\
    \ b) {\n            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpojid_qij.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpojid_qij.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return array;\n\
    \  }\n  if(array.length === 1){\n    return array;\n  }\n  if(array[0] + array[array.length\
    \ - 1] % 2 === 0){\n    return array.sort(function(a, b){return b - a});\n  }\n\
    \  return array.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmpyqot4bof.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpyqot4bof.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ [];\n    }\n    if (array.length === 1) {\n        return array;\n    }\n  \
    \  if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        return array.sort(function(a,\
    \ b) {\n            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return\
    \ b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort(function(a, b){\n  \
    \          return b - a;\n        });\n    }else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort(function(a, b){return b - a});\n    } else {\n    \
    \    return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array.length > 1) {\n        if ((array[0] + array[array.length - 1])\
    \ % 2 === 0) {\n            return array.sort(function(a, b) {\n             \
    \   return b - a;\n            });\n        } else {\n            return array.sort(function(a,\
    \ b) {\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort((a, b) => b - a);\n    }\n    else{\n\
    \        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => a - b);\n    } else {\n        return\
    \ array.sort((a, b) => b - a);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmplo9rtp8h.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplo9rtp8h.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) return\
    \ array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if (array.length > 1) {\n        if ((array[0] + array[array.length - 1])\
    \ % 2 === 0) {\n            return array.sort(function(a, b) {\n             \
    \   return b - a;\n            });\n        } else {\n            return array.sort(function(a,\
    \ b) {\n                return a - b;\n            });\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort(function(a, b){return b - a});\n    } else {\n    \
    \    return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        if((array[0] + array[array.length - 1]) % 2 !== 0){\n        \
    \    return array.sort(function(a, b){return a - b});\n        }\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) {\n    return\
    \ array;\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  if (array[0]\
    \ + array[array.length - 1] % 2 === 0) {\n    return array.sort(function(a, b)\
    \ {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a,\
    \ b) {\n      return a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmp8hota6kb.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8hota6kb.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        if((array[0] + array[array.length - 1]) % 2 !== 0){\n        \
    \    return array.sort(function(a, b){return a - b});\n        }\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        array.sort((a, b) => b - a);\n    } else\
    \ {\n        array.sort((a, b) => a - b);\n    }\n    return array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n\
    \        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length === 0) {\n        return\
    \ array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n\
    \    if ((array[0] + array[array.length - 1]) % 2 === 0) {\n        return array.sort(function(a,\
    \ b) {\n            return b - a;\n        });\n    } else {\n        return array.sort(function(a,\
    \ b) {\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return\
    \ array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if (array.length == 0) {\n        return\
    \ array;\n    }\n    else if (array.length == 1) {\n        return array;\n  \
    \  }\n    else if ((array[0] + array[array.length - 1]) % 2 == 0) {\n        return\
    \ array.sort(function(a, b){return b - a});\n    }\n    else {\n        return\
    \ array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length == 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 == 0){\n  \
    \      return array.sort(function(a, b){return b - a});\n    }\n    else{\n  \
    \      return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  if((array[0] + array[array.length - 1]) %\
    \ 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n    });\n\
    \  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    else{\n        if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n            return array.sort(function(a, b){return b - a});\n\
    \        }\n        else{\n            return array.sort(function(a, b){return\
    \ a - b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    var sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0){\n        return array.sort(function(a, b){\n  \
    \          return b - a;\n        });\n    }\n    else{\n        return array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    return array.sort(function(a, b){return a - b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    else{\n        return array.sort(function(a, b){return a - b});\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    else{\n        return array.sort(function(a,\
    \ b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    return array.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    let sortedArray = array.sort((a, b) => a - b);\n    if (sum % 2 ===\
    \ 0) {\n        return sortedArray.reverse();\n    } else {\n        return sortedArray;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if (sum % 2 === 0) {\n        return array.sort((a, b) => b - a);\n\
    \    } else {\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    } else {\n        return\
    \ array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) {\n    return\
    \ array;\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  if (array[0]\
    \ + array[array.length - 1] % 2 === 0) {\n    return array.sort(function(a, b)\
    \ {\n      return b - a;\n    });\n  } else {\n    return array.sort(function(a,\
    \ b) {\n      return a - b;\n    });\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  6,\n  5,\n\
    \  4,\n  3,\n  2,\n  1,\n  0\n]\n    at test (/tmp/tmp8hota6kb.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8hota6kb.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    else{\n        return array.sort(function(a,\
    \ b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return array;\n\
    \  }\n  if(array.length === 1){\n    return array;\n  }\n  if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n\
    \    });\n  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  if((array[0] + array[array.length - 1]) %\
    \ 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n    });\n\
    \  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) {\n\
    \        return array.sort(function(a, b){\n            return b - a;\n      \
    \  });\n    } else {\n        return array.sort(function(a, b){\n            return\
    \ a - b;\n        });\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    return array.sort(function(a, b){return a - b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0)\
    \ {\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ == 0){\n            return array.sort(function(a, b){return b - a});\n     \
    \   }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }else{\n\
    \        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    return array.sort(function(a, b){return a - b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0 || array.length\
    \ === 1){\n    return array;\n  }\n  if((array[0] + array[array.length - 1]) %\
    \ 2 === 0){\n    return array.sort(function(a, b){return b - a});\n  }\n  return\
    \ array.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0 || array.length\
    \ == 1){\n        return array;\n    }\n    if((array[0] + array[array.length\
    \ - 1]) % 2 == 0){\n        return array.sort(function(a, b){return b - a});\n\
    \    }\n    return array.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length == 0){\n        return\
    \ array;\n    }\n    if(array.length == 1){\n        return array;\n    }\n  \
    \  if((array[0] + array[array.length - 1]) % 2 == 0){\n        return array.sort(function(a,\
    \ b){return b - a});\n    }\n    else{\n        return array.sort(function(a,\
    \ b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0]\
    \ + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) =>\
    \ b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n  if(array.length === 0){\n    return array;\n\
    \  }\n  if(array.length === 1){\n    return array;\n  }\n  if((array[0] + array[array.length\
    \ - 1]) % 2 === 0){\n    return array.sort(function(a, b){\n      return b - a;\n\
    \    });\n  }\n  return array.sort(function(a, b){\n    return a - b;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length === 2){\n        if(array[0] > array[1]){\n            return\
    \ [array[1], array[0]];\n        }\n        else{\n            return array;\n\
    \        }\n    }\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n \
    \       return array.sort(function(a, b){return b - a});\n    }\n    else{\n \
    \       return array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    else if(array.length === 1){\n        return array;\n   \
    \ }\n    else if((array[0] + array[array.length - 1]) % 2 === 0){\n        return\
    \ array.sort(function(a, b){return b - a});\n    }\n    else{\n        return\
    \ array.sort(function(a, b){return a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }else{\n        return array.sort((a, b) => a - b);\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 1
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length % 2 === 0){\n        return array.sort(function(a, b){return\
    \ b - a});\n    }\n    else{\n        return array.sort(function(a, b){return\
    \ a - b});\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n    at test (/tmp/tmpph6rx1zh.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph6rx1zh.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0 || array.length\
    \ === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n\
    \    }\n    return array.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return\
    \ array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n \
    \   if(array.length > 1){\n        if((array[0] + array[array.length - 1]) % 2\
    \ === 0){\n            return array.sort(function(a, b){return b - a});\n    \
    \    }\n        else{\n            return array.sort(function(a, b){return a -\
    \ b});\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749352
- exit_code: 0
  program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n\
    // >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0,\
    \ 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2,\
    \ 1, 0]\nfunction sort_array(array){\n    if(array.length===0){\n        return\
    \ array;\n    }\n    if(array.length===1){\n        return array;\n    }\n   \
    \ if((array[0]+array[array.length-1])%2===0){\n        return array.sort(function(a,b){return\
    \ b-a});\n    }\n    else{\n        return array.sort(function(a,b){return a-b});\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749353
