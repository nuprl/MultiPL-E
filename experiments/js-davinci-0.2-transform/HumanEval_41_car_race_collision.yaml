name: HumanEval_41_car_race_collision
language: js
prompt: "//Imagine a road that's a perfectly straight infinitely long line.\n// n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n//\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  // each other.  All cars move in the same speed.  Two cars are said to collide\n\
  // when a car that's moving left to right hits a car that's moving right to left.\n\
  // However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n// in their trajectory as if they did not collide.\n// This function outputs\
  \ the number of such collisions.\nfunction car_race_collision(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n\
  \  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n\
  }\n\ntest();"
completions: ["    var left = [];\n    var right = [];\n    var collisions = 0;\n\
    \    for(var i = 0; i < n; i++){\n        left.push(i);\n        right.push(i);\n\
    \    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n\
    \            if(left[i] == right[j]){\n                collisions++;\n       \
    \     }\n        }\n    }\n    return collisions;\n}\n", "\t//TODO: Implement\
    \ this function\n\treturn 0;\n}\n", "    //TODO: implement this function\n   \
    \ return 0;\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    // TODO: implement\
    \ this function\n    return 0;\n}\n", "    //TODO: implement this function\n \
    \   return 0;\n}\n", "    var count = 0;\n    for(var i = 0; i < n; i++){\n  \
    \      for(var j = 0; j < n; j++){\n            if(i < j){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "  //TODO: implement\
    \ this function\n}\n", "  var count = 0;\n  for(var i = 0; i < n; i++){\n    for(var\
    \ j = 0; j < n; j++){\n      if(i < j){\n        count++;\n      }\n    }\n  }\n\
    \  return count;\n}\n", "    //TODO: implement this function\n    return 0;\n\
    }\n", "  var left_to_right = [];\n  var right_to_left = [];\n  var collisions\
    \ = 0;\n  for(var i = 0; i < n; i++){\n    left_to_right.push(i);\n    right_to_left.push(i);\n\
    \  }\n  while(left_to_right.length > 0 && right_to_left.length > 0){\n    if(left_to_right[0]\
    \ === right_to_left[0]){\n      collisions++;\n      left_to_right.shift();\n\
    \      right_to_left.shift();\n    }\n    else if(left_to_right[0] < right_to_left[0]){\n\
    \      left_to_right.shift();\n    }\n    else{\n      right_to_left.shift();\n\
    \    }\n  }\n  return collisions;\n}\n", "  return n*(n-1)/2;\n}\n", "    //TODO:\
    \ implement this function\n    return 0;\n}\n", "  var count = 0;\n  for(var i\
    \ = 0; i < n; i++){\n    for(var j = 0; j < n; j++){\n      if(i < j){\n     \
    \   count++;\n      }\n    }\n  }\n  return count;\n}\n", "    //TODO: Implement\
    \ this function\n    return 0;\n}\n", "  //TODO: Implement this function.\n  return\
    \ 0;\n}\n", "    return n*(n-1);\n}\n", "    var collisions = 0;\n    var left_to_right\
    \ = [];\n    var right_to_left = [];\n    for(var i = 0; i < n; i++){\n      \
    \  left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(var\
    \ i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            if(left_to_right[i]\
    \ === right_to_left[j]){\n                collisions++;\n            }\n     \
    \   }\n    }\n    return collisions;\n}\n", "    var collisions = 0;\n    var\
    \ left_to_right = [];\n    var right_to_left = [];\n    for(var i = 0; i < n;\
    \ i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n\
    \    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n      \
    \      if(left_to_right[i] == right_to_left[j]){\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}\n", "    return n*(n-1)/2;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
