name: HumanEval_83_starts_one_ends
language: js
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(2),18);\n\
  \  assert.deepEqual(candidate(3),180);\n  assert.deepEqual(candidate(4),1800);\n\
  \  assert.deepEqual(candidate(5),18000);\n}\n\ntest();"
completions: ["    var count = 0;\n    for(var i = 1; i <= n; i++){\n        count\
    \ += Math.pow(10, i-1);\n    }\n    return count;\n}\n", "    if(n == 1){\n  \
    \      return 2;\n    }\n    if(n == 2){\n        return 3;\n    }\n    return\
    \ starts_one_ends(n-1) + starts_one_ends(n-2);\n}\n", "    if(n==1){\n       \
    \ return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    return starts_one_ends(n-1)+starts_one_ends(n-2);\n\
    }", "    if(n==1){\n        return 2;\n    }\n    if(n==2){\n        return 3;\n\
    \    }\n    return starts_one_ends(n-1)+starts_one_ends(n-2);\n}", "    if(n==1){\n\
    \        return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    return\
    \ starts_one_ends(n-1)+starts_one_ends(n-2);\n}", "    if(n==1){\n        return\
    \ 2;\n    }\n    if(n==2){\n        return 4;\n    }\n    if(n==3){\n        return\
    \ 8;\n    }\n    if(n==4){\n        return 16;\n    }\n    if(n==5){\n       \
    \ return 32;\n    }\n    if(n==6){\n        return 64;\n    }\n    if(n==7){\n\
    \        return 128;\n    }\n    if(n==8){\n        return 256;\n    }\n    if(n==9){\n\
    \        return 512;\n    }\n    if(n==10){\n        return 1024;\n    }\n   \
    \ if(n==11){\n        return 2048;\n    }\n    if(n==12){\n        return 4096;\n\
    \    }\n    if(n==13){\n        return 8192;\n    }\n    if(n==14){\n        return\
    \ 16384;\n    }\n    if(n==15){\n        return 32768;\n    }\n    if(n==16){\n\
    \        return 65536;\n    }\n    if(n==17){\n        return 131072;\n    }\n\
    \    if(n==18){\n        return 262144;\n    }\n    if(n==19){\n        return\
    \ 524288;\n    }\n    if(n==20){\n        return 1048576;\n    }\n    if(n==21){\n\
    \        return 2097152;\n    }\n    if(n==22){\n        return 4194304;\n   \
    \ }\n    if(n==23){\n        return 8388608;\n    }\n    if(n==24){\n        return\
    \ 16777216;\n    }\n    if(n==25){\n        return 33554432;\n    }\n    if(n==26){\n\
    \        return 67108864;\n    }\n    if(n==27){\n        return 134217728;\n\
    \    }\n    if(n==28){\n        return 268435456;\n    }\n    if(n==29){\n   \
    \     return 536870912;\n    }\n    if(n==30){\n        return 107374", "    if(n==1){\n\
    \        return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    return\
    \ starts_one_ends(n-1)+starts_one_ends(n-2);\n}", "    if(n==1){\n        return\
    \ 2;\n    }\n    else if(n==2){\n        return 3;\n    }\n    else{\n       \
    \ return starts_one_ends(n-1)+starts_one_ends(n-2);\n    }\n}", "    if(n == 1){\n\
    \        return 2;\n    }\n    if(n == 2){\n        return 3;\n    }\n    return\
    \ starts_one_ends(n-1) + starts_one_ends(n-2);\n}\n", "    if(n==1){\n       \
    \ return 2;\n    }\n    else if(n==2){\n        return 4;\n    }\n    else{\n\
    \        return starts_one_ends(n-1)+starts_one_ends(n-2);\n    }\n}", "    if(n\
    \ == 1){\n        return 2;\n    }\n    else if(n == 2){\n        return 3;\n\
    \    }\n    else{\n        return starts_one_ends(n-1) + starts_one_ends(n-2);\n\
    \    }\n}\n", "    if(n === 1){\n        return 10;\n    }\n    if(n === 2){\n\
    \        return 55;\n    }\n    return (starts_one_ends(n-1) + starts_one_ends(n-2))\
    \ * 9;\n}\n", "    if(n == 1){\n        return 2;\n    }\n    if(n == 2){\n  \
    \      return 3;\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2);\n\
    }\n", "    if(n==1){\n        return 10;\n    }\n    else{\n        return 9*Math.pow(10,n-1);\n\
    \    }\n}\n", "    if(n == 1){\n        return 2;\n    }\n    if(n == 2){\n  \
    \      return 3;\n    }\n    return starts_one_ends(n-1) + starts_one_ends(n-2);\n\
    }\n", "    if(n==1){\n        return 1;\n    }\n    if(n==2){\n        return\
    \ 10;\n    }\n    return 9*Math.pow(10,n-2);\n}", "    if(n == 1){\n        return\
    \ 2;\n    }\n    if(n == 2){\n        return 3;\n    }\n    return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2);\n}\n", "    if(n==1){\n        return 2;\n    }\n  \
    \  if(n==2){\n        return 3;\n    }\n    return starts_one_ends(n-1)+starts_one_ends(n-2);\n\
    }", "    if(n==1){\n        return 2;\n    }\n    else if(n==2){\n        return\
    \ 4;\n    }\n    else{\n        return starts_one_ends(n-1)+starts_one_ends(n-2);\n\
    \    }\n}\n", "  if(n==1){\n    return 2;\n  }\n  if(n==2){\n    return 3;\n \
    \ }\n  return starts_one_ends(n-1)+starts_one_ends(n-2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
