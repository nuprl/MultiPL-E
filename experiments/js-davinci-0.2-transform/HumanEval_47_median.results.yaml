language: js
name: HumanEval_47_median
results:
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var half = Math.floor(sorted.length/2);\n\
    \    if(sorted.length % 2)\n        return sorted[half];\n    else\n        return\
    \ (sorted[half-1] + sorted[half]) / 2.0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var mid = Math.floor(sorted.length/2);\n\
    \    if (sorted.length % 2 == 0){\n        return (sorted[mid-1] + sorted[mid])/2;\n\
    \    }\n    else{\n        return sorted[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort();\n    var len = sorted.length;\n    var mid = Math.floor(len/2);\n\
    \    if (len % 2 == 0){\n        return (sorted[mid] + sorted[mid-1])/2;\n   \
    \ }\n    else{\n        return sorted[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp49el1uzt.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp49el1uzt.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var len = l.length;\n    var mid = Math.floor(len/2);\n    if(len % 2 ==\
    \ 0){\n        return (l[mid] + l[mid-1])/2;\n    }\n    else{\n        return\
    \ l[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmput33qdf3.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmput33qdf3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2-1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var m = Math.floor(l.length/2);\n    if (l.length % 2 == 0){\n        return\
    \ (l[m-1] + l[m])/2;\n    }\n    else{\n        return l[m];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp2ice8vp6.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ice8vp6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2-1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2 - 1] + sorted[len/2])/2;\n\
    \    }\n    else{\n        return sorted[(len-1)/2];\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var length = sorted.length;\n\
    \    if (length % 2 == 0){\n        return (sorted[length/2-1] + sorted[length/2])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(length/2)];\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var length = sorted.length;\n\
    \    if (length % 2 == 0){\n        return (sorted[length/2 - 1] + sorted[length/2])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(length/2)];\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var mid = Math.floor(sorted.length/2);\n\
    \    if (sorted.length % 2 == 0){\n        return (sorted[mid] + sorted[mid-1])/2;\n\
    \    }\n    else{\n        return sorted[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 === 0){\n        return (sorted[len/2] + sorted[len/2 - 1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var l = l.sort(function(a,b){return a-b});\n    var mid = Math.floor(l.length/2);\n\
    \    if(l.length % 2 == 0){\n        return (l[mid-1] + l[mid])/2;\n    }\n  \
    \  else{\n        return l[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    l.sort(function(a, b){return a-b});\n    var mid = Math.floor(l.length/2);\n\
    \    if (l.length % 2 == 0){\n        return (l[mid] + l[mid-1])/2;\n    }\n \
    \   else{\n        return l[mid];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var m = Math.floor(l.length/2);\n    if (l.length % 2 == 0){\n        return\
    \ (l[m-1] + l[m])/2;\n    }\n    else{\n        return l[m];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp2ice8vp6.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ice8vp6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2-1] + sorted[len/2])/2;\n\
    \    }\n    else{\n        return sorted[(len-1)/2];\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2 - 1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var l = l.sort();\n    var len = l.length;\n    if (len % 2 == 0){\n    \
    \    return (l[len/2] + l[len/2 - 1])/2;\n    }\n    else{\n        return l[(len-1)/2];\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n510\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmplsh5256b.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplsh5256b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2 - 1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4,\
    \ 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n\
    \    var sorted = l.sort(function(a,b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2-1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
