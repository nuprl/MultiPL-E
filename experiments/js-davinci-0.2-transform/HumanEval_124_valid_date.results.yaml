language: js
name: HumanEval_124_valid_date
results:
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = Number(date_arr[0]);\n    var day = Number(date_arr[1]);\n\
    \    var year = Number(date_arr[2]);\n    if(date_arr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(year < 0){\n        return false;\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if (date_arr.length != 3){\n        return false;\n    }\n\
    \    if (month < 1 || month > 12){\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if (month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if (day > 30){\n            return false;\n \
    \       }\n    }\n    if (year.length != 4){\n        return false;\n    }\n \
    \   return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ogpu9kd.js:53:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ogpu9kd.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(year < 0){\n        return false;\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = dateArr[0];\n    var day = dateArr[1];\n    var year =\
    \ dateArr[2];\n    if(dateArr.length != 3){\n        return false;\n    }\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if((month == 4 || month == 6 || month == 9\
    \ || month == 11) && day > 30){\n        return false;\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_array = date.split(\"-\");\n    var\
    \ month = date_array[0];\n    var day = date_array[1];\n    var year = date_array[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year < 1){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    let month\
    \ = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year =\
    \ parseInt(dateArr[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day > 29) {\n            return false;\n        }\n  \
    \  }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n \
    \       if (day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    let month\
    \ = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n    let year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if (date_arr.length != 3) {\n        return false;\n    }\n    var\
    \ month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var\
    \ year = parseInt(date_arr[2]);\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n \
    \           return false;\n        }\n    } else if (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \  } else {\n        if (day < 1 || day > 30) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    let dateArr = date.split(\"-\");\n    if(dateArr.length\
    \ != 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    if(year.length !==\
    \ 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date = date.split(\"\
    -\");\n    var month = date[0];\n    var day = date[1];\n    var year = date[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11 && day > 30){\n        return false;\n    }\n    if(year < 1){\n\
    \        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpix32crmj.js:48:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpix32crmj.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (month < 1 || month > 12) {\n \
    \       return false;\n    }\n    if (month == 2) {\n        if (year % 4 == 0\
    \ && year % 100 != 0 || year % 400 == 0) {\n            if (day < 1 || day > 29)\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if (day < 1 || day > 28) {\n                return false;\n            }\n\
    \        }\n    } else if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    } else {\n        if (day\
    \ < 1 || day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz_bne7pr.js:59:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz_bne7pr.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (month == 2){\n        if (day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11){\n        if (day <\
    \ 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (day < 1 || day > 31){\n        return false;\n    }\n    if (month\
    \ == 2){\n        if (day > 29){\n            return false;\n        }\n    }\n\
    \    if (month == 4 || month == 6 || month == 9 || month == 11){\n        if (day\
    \ > 30){\n            return false;\n        }\n    }\n    if (year < 0){\n  \
    \      return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    if(date_array.length != 3){\n        return false;\n \
    \   }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if((month == 4 || month == 6 || month\
    \ == 9 || month == 11) && day > 30){\n        return false;\n    }\n    if(year\
    \ < 1){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 1 || month === 3 || month === 5 || month === 7\
    \ || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n \
    \           return false;\n        }\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpywth7eah.js:46:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpywth7eah.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[2] < 1) return false;\n    if(dateArr[0] === 2 && dateArr[1] >\
    \ 29) return false;\n    if(dateArr[0] === 4 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 6 && dateArr[1] > 30) return false;\n    if(dateArr[0]\
    \ === 9 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 11 && dateArr[1]\
    \ > 30) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdgzvat57.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdgzvat57.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    if(date_array.length != 3){\n        return false;\n    }\n    var\
    \ month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n \
    \   var year = parseInt(date_array[2]);\n    if(month < 1 || month > 12){\n  \
    \      return false;\n    }\n    if(month == 2){\n        if(day < 1 || day >\
    \ 29){\n            return false;\n        }\n    }\n    else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12){\n        if(day < 1 || day > 31){\n            return false;\n     \
    \   }\n    }\n    else{\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3){\n        return false;\n    }\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(year < 1){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 1){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let date_arr_int = date_arr.map(x => parseInt(x));\n    let months\
    \ = [1, 3, 5, 7, 8, 10, 12];\n    let months_30 = [4, 6, 9, 11];\n    let months_31\
    \ = [1, 3, 5, 7, 8, 10, 12];\n    let months_30_days = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30];\n    let months_31_days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n \
    \   let months_29_days = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\n    let month = date_arr_int[0];\n\
    \    let day = date_arr_int[1];\n    let year = date_arr_int[2];\n    let days\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n    let years = [2000, 2001, 2002,\
    \ 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,\
    \ 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,\
    \ 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: SyntaxError
  stderr: "/tmp/tmp2q_ezv0r.js:32\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    let arr = date.split(\"-\");\n    let month\
    \ = parseInt(arr[0]);\n    let day = parseInt(arr[1]);\n    let year = parseInt(arr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[0] === 2 && dateArr[1] > 29) return false;\n    if(dateArr[0]\
    \ === 4 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 6 && dateArr[1]\
    \ > 30) return false;\n    if(dateArr[0] === 9 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 11 && dateArr[1] > 30) return false;\n    if(dateArr[2]\
    \ < 1) return false;\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4xhhhnex.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4xhhhnex.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    var is_valid = false;\n    if(date_arr.length\
    \ == 3){\n        if(month >= 1 && month <= 12){\n            if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12){\n                if(day >= 1 && day <= 31){\n                    is_valid\
    \ = true;\n                }\n            }\n            else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11){\n                if(day >= 1 && day\
    \ <= 30){\n                    is_valid = true;\n                }\n         \
    \   }\n            else if(month == 2){\n                if(day >= 1 && day <=\
    \ 29){\n                    is_valid = true;\n                }\n            }\n\
    \        }\n    }\n    return is_valid;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (month == 2){\n        if (day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if (day < 1 || day > 30){\n            return false;\n        }\n   \
    \ }\n    if (year < 1){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6znv91cu.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6znv91cu.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    var is_valid = false;\n    if(date_arr.length\
    \ == 3){\n        if(month >= 1 && month <= 12){\n            if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12){\n                if(day >= 1 && day <= 31){\n                    is_valid\
    \ = true;\n                }\n            }\n            else if(month == 4 ||\
    \ month == 6 || month == 9 || month == 11){\n                if(day >= 1 && day\
    \ <= 30){\n                    is_valid = true;\n                }\n         \
    \   }\n            else if(month == 2){\n                if(day >= 1 && day <=\
    \ 29){\n                    is_valid = true;\n                }\n            }\n\
    \        }\n    }\n    return is_valid;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2 && day > 29){\n        return false;\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month\
    \ == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return\
    \ false;\n    }\n    if(year < 0){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8qpz09zw.js:52:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8qpz09zw.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_arr = date.split(\"-\");\n    var\
    \ month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var\
    \ year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    else if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    else{\n        if(day < 1 || day > 30){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3) return false;\n    let month = dateArr[0];\n   \
    \ let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12) return false;\n    if(day < 1 || day > 31) return false;\n    if(month\
    \ === '02' && day > 29) return false;\n    if(month === '04' && day > 30) return\
    \ false;\n    if(month === '06' && day > 30) return false;\n    if(month === '09'\
    \ && day > 30) return false;\n    if(month === '11' && day > 30) return false;\n\
    \    if(year.length !== 4) return false;\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n    \
    \    return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0i3d717r.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0i3d717r.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(month>12 || month<1 || day<1 || day>31 || year<1){\n\
    \        return false;\n    }\n    if(month == 2 && day>29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day>30){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length==0){\n\
    \        return false;\n    }\n    var date_arr = date.split(\"-\");\n    var\
    \ month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var\
    \ year = parseInt(date_arr[2]);\n    if(month<1 || month>12){\n        return\
    \ false;\n    }\n    if(month==1 || month==3 || month==5 || month==7 || month==8\
    \ || month==10 || month==12){\n        if(day<1 || day>31){\n            return\
    \ false;\n        }\n    }\n    if(month==4 || month==6 || month==9 || month==11){\n\
    \        if(day<1 || day>30){\n            return false;\n        }\n    }\n \
    \   if(month==2){\n        if(day<1 || day>29){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n        \
    \    return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3) return false;\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month === 2 && day > 29) return false;\n    if(month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = date_arr[0];\n    let day = date_arr[1];\n    let year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcu0s9lbr.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcu0s9lbr.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf97tmji2.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf97tmji2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = Number(dateArr[0]);\n    let day = Number(dateArr[1]);\n    let\
    \ year = Number(dateArr[2]);\n    if(dateArr.length !== 3){\n        return false;\n\
    \    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3) return false;\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2){\n        if(day > 29) return false;\n    }\n   \
    \ if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day >\
    \ 30) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    let month31 = [1,3,5,7,8,10,12];\n\
    \    let month30 = [4,6,9,11];\n    if(month31.includes(month)){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else if(month30.includes(month)){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    else if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else{\n        return false;\n    }\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(year < 1){\n     \
    \   return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"\
    -\");\n    if(date_array.length != 3){\n        return false;\n    }\n    let\
    \ month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n \
    \   let year = parseInt(date_array[2]);\n    if(month < 1 || month > 12){\n  \
    \      return false;\n    }\n    if(month == 2){\n        if(day < 1 || day >\
    \ 29){\n            return false;\n        }\n    }\n    else if(month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12){\n        if(day < 1 || day > 31){\n            return false;\n     \
    \   }\n    }\n    else{\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if (date_arr.length != 3){\n        return false;\n    }\n\
    \    if (month < 1 || month > 12){\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if (month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if (day > 30){\n            return false;\n \
    \       }\n    }\n    if (year < 1){\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length != 3){\n        return false;\n    }\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n       \
    \ return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day > 30){\n            return false;\n        }\n    }\n    if(year <\
    \ 1){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n  \
    \      return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    else if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    else{\n        if(day < 1 || day > 30){\n            return false;\n    \
    \    }\n    }\n    if(year < 1){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = Number(dateArr[0]);\n    let day = Number(dateArr[1]);\n    let\
    \ year = Number(dateArr[2]);\n    if(dateArr.length !== 3){\n        return false;\n\
    \    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day >\
    \ 29){\n        return false;\n    }\n    if(month === 4 || month === 6 || month\
    \ === 9 || month === 11){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    if(year < 1){\n        return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    if(year < 0){\n  \
    \      return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n    \
    \    return false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(month === 1 || month === 3 ||\
    \ month === 5 || month === 7 || month === 8 || month === 10 || month === 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb2iclgjz.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpb2iclgjz.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(month === '01' || month\
    \ === '03' || month === '05' || month === '07' || month === '08' || month ===\
    \ '10' || month === '12'){\n        if(day < 1 || day > 31){\n            return\
    \ false;\n        }\n    }\n    if(month === '04' || month === '06' || month ===\
    \ '09' || month === '11'){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month === '02'){\n        if(day < 1 || day\
    \ > 29){\n            return false;\n        }\n    }\n    if(year.length !==\
    \ 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n  \
    \      return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    var date_arr = date.split(\"-\");\n    var\
    \ month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var\
    \ year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n    \
    \        return false;\n        }\n    }\n    if(month === 1 || month === 3 ||\
    \ month === 5 || month === 7 || month === 8 || month === 10 || month === 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    if(year\
    \ < 0){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpywth7eah.js:46:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpywth7eah.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpif0ipf9x.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpif0ipf9x.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    var month_days = [31,28,31,30,31,30,31,31,30,31,30,31];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > month_days[month-1]){\n        return false;\n    }\n    if(year\
    \ < 0){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(date_arr.length !== 3){\n     \
    \   return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 1 || month === 3 || month === 5 ||\
    \ month === 7 || month === 8 || month === 10 || month === 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    if(date_array.length != 3){\n        return false;\n    }\n    var\
    \ month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n \
    \   var year = parseInt(date_array[2]);\n    if(month < 1 || month > 12){\n  \
    \      return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day > 29){\n            return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if (date_array.length != 3) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if (month == 2) {\n        if (day > 29) {\n            return false;\n \
    \       }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (year < 1) {\n        return false;\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_regex = /^(0[1-9]|1\\\
    d|2\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$/;\n    if(date_regex.test(date)){\n\
    \        var date_array = date.split(\"-\");\n        var day = parseInt(date_array[0]);\n\
    \        var month = parseInt(date_array[1]);\n        var year = parseInt(date_array[2]);\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    \
    \    if(month < 1 || month > 12){\n            return false;\n        }\n    \
    \    if(month == 2){\n            if(day > 29){\n                return false;\n\
    \            }\n        }\n        if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n            if(day > 30){\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    return false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpddhgptqd.js:52:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpddhgptqd.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let day = dateArr[0];\n    let month = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(day < 1 || day > 31 || month < 1 || month > 12 || year < 1){\n       \
    \ return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpllojfvki.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpllojfvki.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var date_month = date_arr[0];\n    var date_day = date_arr[1];\n  \
    \  var date_year = date_arr[2];\n    if (date_arr.length != 3){\n        return\
    \ false;\n    }\n    if (date_month < 1 || date_month > 12){\n        return false;\n\
    \    }\n    if (date_month == 1 || date_month == 3 || date_month == 5 || date_month\
    \ == 7 || date_month == 8 || date_month == 10 || date_month == 12){\n        if\
    \ (date_day < 1 || date_day > 31){\n            return false;\n        }\n   \
    \ }\n    if (date_month == 4 || date_month == 6 || date_month == 9 || date_month\
    \ == 11){\n        if (date_day < 1 || date_day > 30){\n            return false;\n\
    \        }\n    }\n    if (date_month == 2){\n        if (date_day < 1 || date_day\
    \ > 29){\n            return false;\n        }\n    }\n    if (date_year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    if(date_array.length != 3){\n        return false;\n \
    \   }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day > 30){\n            return false;\n  \
    \      }\n    }\n    if(year.length != 4){\n        return false;\n    }\n   \
    \ return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12 || day\
    \ < 1 || day > 31 || year < 1){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day > 29){\n            return false;\n        }\n    }\n  \
    \  if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpejstr52h.js:50:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpejstr52h.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length === 3 && month.length === 2 && day.length === 2 && year.length\
    \ === 4){\n        if(month >= 1 && month <= 12){\n            if(month === '01'\
    \ || month === '03' || month === '05' || month === '07' || month === '08' || month\
    \ === '10' || month === '12'){\n                if(day >= 1 && day <= 31){\n \
    \                   return true;\n                }\n            }\n         \
    \   else if(month === '04' || month === '06' || month === '09' || month === '11'){\n\
    \                if(day >= 1 && day <= 30){\n                    return true;\n\
    \                }\n            }\n            else if(month === '02'){\n    \
    \            if(day >= 1 && day <= 29){\n                    return true;\n  \
    \              }\n            }\n        }\n    }\n    return false;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n    \
    \    return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ === 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n\
    \            return false;\n        }\n    }\n    if(year < 0){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6e_l3kka.js:53:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6e_l3kka.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n  \
    \      return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"\
    -\");\n    let month = date_array[0];\n    let day = date_array[1];\n    let year\
    \ = date_array[2];\n    if(date_array.length !== 3){\n        return false;\n\
    \    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month === \"02\" &&\
    \ day > 29){\n        return false;\n    }\n    if(month === \"04\" && day > 30){\n\
    \        return false;\n    }\n    if(month === \"06\" && day > 30){\n       \
    \ return false;\n    }\n    if(month === \"09\" && day > 30){\n        return\
    \ false;\n    }\n    if(month === \"11\" && day > 30){\n        return false;\n\
    \    }\n    if(year.length !== 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if (dateArr.length !== 3){\n      \
    \  return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (day < 1 || day > 31){\n        return false;\n    }\n    if (month\
    \ === 2 && day > 29){\n        return false;\n    }\n    if (month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if (day > 30){\n           \
    \ return false;\n        }\n    }\n    if (year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvuuo0nq3.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvuuo0nq3.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n      \
    \  if(day > 29){\n            return false;\n        }\n    }\n    if(month ===\
    \ 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year.length != 4){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year < 1000 || year > 9999){\n        return false;\n    }\n  \
    \  return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    let month\
    \ = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n    let year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (month == 2){\n        if (day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if (day < 1 || day > 30){\n            return false;\n        }\n   \
    \ }\n    if (year < 1){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n      \
    \      return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    var dateArr = date.split(\"-\");\n    var month\
    \ = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n    var year =\
    \ parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    let dateArr = date.split('-');\n    let month\
    \ = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year =\
    \ parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 1 || month === 3 || month === 5 ||\
    \ month === 7 || month === 8 || month === 10 || month === 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(year < 1){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year.length != 4){\n        return false;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpif0ipf9x.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpif0ipf9x.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0)\
    \ return false;\n    var dateArr = date.split(\"-\");\n    if(dateArr.length !=\
    \ 3) return false;\n    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2){\n        if(day < 1 || day > 29) return false;\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return\
    \ false;\n    }\n    else{\n        if(day < 1 || day > 30) return false;\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(date_arr.length !== 3){\n     \
    \   return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    if(date_array.length != 3){\n        return false;\n \
    \   }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day > 30){\n            return false;\n  \
    \      }\n    }\n    if(year < 1){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_regex = /^(0[1-9]|1\\\
    d|2\\d|3[01])-(0[1-9]|1[0-2])-(19|20)\\d{2}$/;\n    return date_regex.test(date);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqh3z7vxp.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqh3z7vxp.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = Number(dateArr[0]);\n    let day = Number(dateArr[1]);\n    let\
    \ year = Number(dateArr[2]);\n    if(dateArr.length !== 3){\n        return false;\n\
    \    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let arr = date.split('-');\n\
    \    let month = parseInt(arr[0]);\n    let day = parseInt(arr[1]);\n    let year\
    \ = parseInt(arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }else if(month === 1 || month === 3 || month === 5 ||\
    \ month === 7 || month === 8 || month === 10 || month === 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }else{\n      \
    \  if(day < 1 || day > 30){\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppoch0ros.js:52:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppoch0ros.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(month === 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    if(year\
    \ < 1){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12 || day < 1 || day > 31 || year < 1){\n       \
    \ return false;\n    }\n    if(month === 2){\n        if(day > 29){\n        \
    \    return false;\n        }\n    }\n    if(month === 4 || month === 6 || month\
    \ === 9 || month === 11){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length\
    \ !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month > 12 || month < 1){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day > 29 || day <\
    \ 1){\n            return false;\n        }\n    }\n    if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day > 31 || day < 1){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30 || day < 1){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpby92efaj.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpby92efaj.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 1){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    let dateArr = date.split('-');\n    let month\
    \ = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year =\
    \ parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 1 || month === 3 || month === 5 ||\
    \ month === 7 || month === 8 || month === 10 || month === 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    var month_array = [1,3,5,7,8,10,12];\n    var month_array2\
    \ = [4,6,9,11];\n    if(date.length == 0){\n        return false;\n    }\n   \
    \ if(month_array.includes(month)){\n        if(day < 1 || day > 31){\n       \
    \     return false;\n        }\n    }\n    if(month_array2.includes(month)){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(month < 1 || month > 12){\n        return false;\n \
    \   }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmnn1lfk6.js:58:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmnn1lfk6.js:74:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length\
    \ !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length === 0){\n\
    \        return false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length\
    \ !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0)\
    \ return false;\n    var date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3) return false;\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2){\n        if(day < 1 || day > 29) return false;\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return\
    \ false;\n    }\n    else{\n        if(day < 1 || day > 30) return false;\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (month < 1 || month > 12){\n  \
    \      return false;\n    }\n    if (day < 1 || day > 31){\n        return false;\n\
    \    }\n    if (month == 2 && day > 29){\n        return false;\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11){\n        if (day >\
    \ 30){\n            return false;\n        }\n    }\n    if (year < 1){\n    \
    \    return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxlfl6m5_.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxlfl6m5_.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month === 2 && day > 29){\n\
    \        return false;\n    }\n    if(month === 4 || month === 6 || month ===\
    \ 9 || month === 11){\n        if(day > 30){\n            return false;\n    \
    \    }\n    }\n    if(year < 0){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (month == 2){\n        if (day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if (day < 1 || day > 30){\n            return false;\n        }\n   \
    \ }\n    if (year < 1){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz3g39pka.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz3g39pka.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    var is_valid = true;\n    if(date_arr.length\
    \ != 3){\n        is_valid = false;\n    }\n    if(month < 1 || month > 12){\n\
    \        is_valid = false;\n    }\n    if(month == 2){\n        if(day < 1 ||\
    \ day > 29){\n            is_valid = false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12){\n        if(day < 1 || day > 31){\n            is_valid = false;\n\
    \        }\n    }\n    else{\n        if(day < 1 || day > 30){\n            is_valid\
    \ = false;\n        }\n    }\n    return is_valid;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    let dateArr = date.split(\"-\");\n    let month\
    \ = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month\
    \ > 12 || month < 1){\n        return false;\n    }\n    if(day > 31 || day <\
    \ 1){\n        return false;\n    }\n    if(month == 2 && day > 29){\n       \
    \ return false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n\
    \    if(year.length != 4){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if (date_arr.length != 3){\n     \
    \   return false;\n    }\n    if (month < 1 || month > 12){\n        return false;\n\
    \    }\n    if (month == 2){\n        if (day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if (day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11){\n        if (day <\
    \ 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArray = date.split(\"\
    -\");\n    var month = dateArray[0];\n    var day = dateArray[1];\n    var year\
    \ = dateArray[2];\n    if(dateArray.length != 3){\n        return false;\n   \
    \ }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(year < 0){\n        return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_arr = date.split(\"-\");\n    if(date_arr.length\
    \ != 3){\n        return false;\n    }\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2){\n       \
    \ if(day > 29){\n            return false;\n        }\n    }\n    if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3 || date_array[0].length\
    \ != 2 || date_array[1].length != 2 || date_array[2].length != 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6znv91cu.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6znv91cu.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 1 || month === 3 || month === 5 || month === 7\
    \ || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = dateArr[0];\n    var day = dateArr[1];\n    var year =\
    \ dateArr[2];\n    if(dateArr.length !== 3){\n        return false;\n    }\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ \"02\"){\n        if(day < 1 || day > 29){\n            return false;\n    \
    \    }\n    }\n    if(month === \"01\" || month === \"03\" || month === \"05\"\
    \ || month === \"07\" || month === \"08\" || month === \"10\" || month === \"\
    12\"){\n        if(day < 1 || day > 31){\n            return false;\n        }\n\
    \    }\n    if(month === \"04\" || month === \"06\" || month === \"09\" || month\
    \ === \"11\"){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(year < 1){\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(month === 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    if(year\
    \ < 1){\n        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0)\
    \ return false;\n    let [month, day, year] = date.split('-');\n    if(month <\
    \ 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month == 2 && day > 29) return false;\n    if(month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if(day > 30) return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n  \
    \      return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n\
    \    if(month == 2){\n        if(day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    if(year\
    \ < 1){\n        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(date_arr.length !== 3){\n     \
    \   return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_array = date.split(\"-\");\n    if(date_array.length\
    \ != 3){\n        return false;\n    }\n    var month = parseInt(date_array[0]);\n\
    \    var day = parseInt(date_array[1]);\n    var year = parseInt(date_array[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month > 12 || month < 1){\n   \
    \     return false;\n    }\n    if(day > 31 || day < 1){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    if(year < 0){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt0mbufup.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt0mbufup.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(date_arr.length !== 3){\n     \
    \   return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    var date_array = date.split(\"-\");\n    if(date_array.length\
    \ != 3){\n        return false;\n    }\n    var month = date_array[0];\n    var\
    \ day = date_array[1];\n    var year = date_array[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n       \
    \ return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcu0s9lbr.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcu0s9lbr.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf97tmji2.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf97tmji2.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    if(year < 0){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmps5potxmi.js:53:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps5potxmi.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0){\n\
    \        return false;\n    }\n    let dateArr = date.split(\"-\");\n    if(dateArr.length\
    \ != 3){\n        return false;\n    }\n    let month = Number(dateArr[0]);\n\
    \    let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month == 2){\n        if(day > 29){\n  \
    \          return false;\n        }\n    }\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    if(year < 1000 || year > 9999){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    if(month == 4 || month == 6 ||\
    \ month == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0)\n\
    \        return false;\n    var arr = date.split(\"-\");\n    if(arr.length !=\
    \ 3)\n        return false;\n    if(arr[0] < 1 || arr[0] > 12)\n        return\
    \ false;\n    if(arr[0] == 1 || arr[0] == 3 || arr[0] == 5 || arr[0] == 7 || arr[0]\
    \ == 8 || arr[0] == 10 || arr[0] == 12){\n        if(arr[1] < 1 || arr[1] > 31)\n\
    \            return false;\n    }\n    else if(arr[0] == 4 || arr[0] == 6 || arr[0]\
    \ == 9 || arr[0] == 11){\n        if(arr[1] < 1 || arr[1] > 30)\n            return\
    \ false;\n    }\n    else if(arr[0] == 2){\n        if(arr[1] < 1 || arr[1] >\
    \ 29)\n            return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let day = dateArr[0];\n    let month = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    return true;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwm59ice9.js:49:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwm59ice9.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"\
    -\");\n    let month = date_arr[0];\n    let day = date_arr[1];\n    let year\
    \ = date_arr[2];\n    if(month < 1 || month > 12){\n        return false;\n  \
    \  }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year.length != 4){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2 && day > 29){\n        return false;\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    if(date_array.length != 3){\n        return false;\n \
    \   }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day\
    \ < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 29){\n        return false;\n    }\n    if((month == 4 || month == 6 || month\
    \ == 9 || month == 11) && day > 30){\n        return false;\n    }\n    if(year\
    \ < 1){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    else if(month == 1 || month == 3 || month == 5\
    \ || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    else{\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month === 2){\n      \
    \  if(day > 29){\n            return false;\n        }\n    }\n    if(month ===\
    \ 4 || month === 6 || month === 9 || month === 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n\
    \    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n  \
    \      return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12){\n    \
    \    return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi6zpjlga.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpi6zpjlga.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = dateArr[0];\n    var day = dateArr[1];\n    var year =\
    \ dateArr[2];\n    if(dateArr.length !== 3){\n        return false;\n    }\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ \"01\" || month === \"03\" || month === \"05\" || month === \"07\" || month\
    \ === \"08\" || month === \"10\" || month === \"12\"){\n        if(day < 1 ||\
    \ day > 31){\n            return false;\n        }\n    }\n    if(month === \"\
    04\" || month === \"06\" || month === \"09\" || month === \"11\"){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    if(month\
    \ === \"02\"){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(year.length !== 4){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    let month =\
    \ dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if (date_arr.length != 3) {\n        return false;\n    }\n    var\
    \ month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var\
    \ year = parseInt(date_arr[2]);\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)\
    \ {\n        return false;\n    }\n    if (month == 2 && day > 29) {\n       \
    \ return false;\n    }\n    if (year < 1000 || year > 9999) {\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3 || month >\
    \ 12 || month < 1 || year < 1){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day > 29 || day < 1){\n            return false;\n        }\n\
    \    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30 || day < 1){\n            return false;\n        }\n    }\n\
    \    else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day > 31 || day < 1){\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n  var date_arr = date.split(\"\
    -\");\n  var month = parseInt(date_arr[0]);\n  var day = parseInt(date_arr[1]);\n\
    \  var year = parseInt(date_arr[2]);\n  if(date_arr.length != 3){\n    return\
    \ false;\n  }\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day\
    \ < 1 || day > 31){\n    return false;\n  }\n  if(month == 2){\n    if(day > 29){\n\
    \      return false;\n    }\n  }\n  if(month == 4 || month == 6 || month == 9\
    \ || month == 11){\n    if(day > 30){\n      return false;\n    }\n  }\n  if(year\
    \ < 1){\n    return false;\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = date_arr[0];\n    var day = date_arr[1];\n    var year\
    \ = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n\
    \    if(month > 12 || month < 1){\n        return false;\n    }\n    if(day >\
    \ 31 || day < 1){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    if(month>12 || month<1){\n        return false;\n    }\n\
    \    if(day<1 || day>31){\n        return false;\n    }\n    if(month==2 && day>29){\n\
    \        return false;\n    }\n    if(month==4 || month==6 || month==9 || month==11){\n\
    \        if(day>30){\n            return false;\n        }\n    }\n    if(year.length!=4){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749290
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var dateArr = date.split(\"\
    -\");\n    var month = dateArr[0];\n    var day = dateArr[1];\n    var year =\
    \ dateArr[2];\n    if(month < 1 || month > 12){\n        return false;\n    }\n\
    \    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2\
    \ && day > 29){\n        return false;\n    }\n    if(month == 4 || month == 6\
    \ || month == 9 || month == 11){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    if(year.length != 4){\n        return false;\n    }\n \
    \   return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"\
    -\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year\
    \ = date_array[2];\n    var month_array = [1,3,5,7,8,10,12];\n    var month_array_2\
    \ = [4,6,9,11];\n    if(date.length == 0){\n        return false;\n    }\n   \
    \ if(month_array.includes(month)){\n        if(day < 1 || day > 31){\n       \
    \     return false;\n        }\n    }\n    if(month_array_2.includes(month)){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(month < 1 || month > 12){\n        return false;\n \
    \   }\n    if(date.length != 10){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpouol28nh.js:62:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpouol28nh.js:75:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if (dateArr.length !== 3) return false;\n\
    \    if (month < 1 || month > 12) return false;\n    if (month === 2) {\n    \
    \    if (day < 1 || day > 29) return false;\n    } else if (month === 4 || month\
    \ === 6 || month === 9 || month === 11) {\n        if (day < 1 || day > 30) return\
    \ false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n\
    \    if (year < 1) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }else if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }else{\n        if(day < 1\
    \ || day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    if(date_arr.length != 3){\n        return false;\n    }\n    var month\
    \ = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n    var year\
    \ = parseInt(date_arr[2]);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    let dateArr = date.split('-');\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_arr = date.split(\"\
    -\");\n    var month = parseInt(date_arr[0]);\n    var day = parseInt(date_arr[1]);\n\
    \    var year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n      \
    \  return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
- exit_code: 0
  program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date.length == 0)\
    \ return false;\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3) return false;\n    let month = dateArr[0];\n    let day = dateArr[1];\n \
    \   let year = dateArr[2];\n    if(month < 1 || month > 12) return false;\n  \
    \  if(day < 1 || day > 31) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n   \
    \     if(day > 30) return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749291
