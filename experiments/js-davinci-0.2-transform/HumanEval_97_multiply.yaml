name: HumanEval_97_multiply
language: js
prompt: "//Complete the function that takes two integers and returns \n// the product\
  \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n//\
  \ >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
  \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = multiply;\n  assert.deepEqual(candidate(148, 412),16);\n  assert.deepEqual(candidate(19,\
  \ 28),72);\n  assert.deepEqual(candidate(2020, 1851),0);\n  assert.deepEqual(candidate(14,\
  \ -15),20);\n  assert.deepEqual(candidate(76, 67),42);\n  assert.deepEqual(candidate(17,\
  \ 27),49);\n  assert.deepEqual(candidate(0, 1),0);\n  assert.deepEqual(candidate(0,\
  \ 0),0);\n}\n\ntest();"
completions: ["    return (a%10) * (b%10);\n}\n", "    return (a%10) * (b%10);\n}\n",
  "  return (a%10)*(b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return\
    \ (a % 10) * (b % 10);\n}\n", "    let a1 = a.toString().split('').pop();\n  \
    \  let b1 = b.toString().split('').pop();\n    return a1 * b1;\n}", "    return\
    \ (a % 10) * (b % 10);\n}", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a%10)*(b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return Math.abs(a%10\
    \ * b%10);\n}\n", "  return (a % 10) * (b % 10);\n}\n", "  return (a % 10) * (b\
    \ % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10) * (b%10);\n}\n", " \
    \   return (a%10)*(b%10);\n}\n", "  return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    let a1 = a % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}", " \
    \   return (a % 10) * (b % 10);\n}\n", "    return (a%10) * (b%10);\n}\n", " \
    \   return (a%10) * (b%10);\n}\n", "  return (a%10)*(b%10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "  let product = (a % 10) * (b % 10);\n  return\
    \ product;\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10)\
    \ * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "  return (a % 10) * (b % 10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n",
  "    return (a % 10) * (b % 10);\n}\n", "    return (a%10) * (b%10);\n}\n", "  \
    \  return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n",
  "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n",
  "    return (a%10) * (b%10);\n}", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "  return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    let\
    \ result = 0;\n    let aStr = a.toString();\n    let bStr = b.toString();\n  \
    \  let aLast = aStr.slice(-1);\n    let bLast = bStr.slice(-1);\n    result =\
    \ parseInt(aLast) * parseInt(bLast);\n    return result;\n}", "    return (a%10)\
    \ * (b%10);\n}\n", "  return (a%10)*(b%10);\n}\n", "    return (a % 10) * (b %\
    \ 10);\n}\n", "    return (a%10) * (b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "  return (a%10)*(b%10);\n}\n",
  "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    let a1\
    \ = a % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}\n", "    return (a %\
    \ 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)\
    \ * (b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  \
    \  return (a % 10) * (b % 10);\n}", "  return (a%10)*(b%10);\n}\n", "  return\
    \ (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  return (a%10)*(b%10);\n\
    }\n", "    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "    return (a %\
    \ 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    let product =\
    \ (a % 10) * (b % 10);\n    return product;\n}", "    return (a % 10) * (b % 10);\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  \
    \  let a1 = a % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}", "    return\
    \ (a%10)*(b%10);\n}\n", "    return (a%10) * (b%10);\n}\n", "    return (a % 10)\
    \ * (b % 10);\n}\n", "    return (a%10) * (b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n",
  "    return (a%10)*(b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    let\
    \ a1 = a % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a%10)*(b%10);\n}", "  return Math.abs(a % 10) * Math.abs(b\
    \ % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a % 10) * (b %\
    \ 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a*b)%10;\n}\n", " \
    \   return (a%10)*(b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return\
    \ (a % 10) * (b % 10);\n}\n", "    return Math.abs(a % 10) * Math.abs(b % 10);\n\
    }\n", "  return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n",
  "    return (a % 10) * (b % 10);\n}\n", "    let a1 = a % 10;\n    let b1 = b %\
    \ 10;\n    return a1 * b1;\n}\n", "    return (a%10)*(b%10);\n}\n", "  return\
    \ (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a % 10)\
    \ * (b % 10);\n}", "    return (a%10) * (b%10);\n}\n", "    return (a % 10) *\
    \ (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)\
    \ * (b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    let aLastDigit\
    \ = a % 10;\n    let bLastDigit = b % 10;\n    return aLastDigit * bLastDigit;\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}", "    let\
    \ a1 = a % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}\n", "    return (a\
    \ % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a % 10)\
    \ * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n",
  "    return (a % 10) * (b % 10);\n}\n", "  return (a % 10) * (b % 10);\n}\n", " \
    \   let a1 = a.toString().split('').pop();\n    let b1 = b.toString().split('').pop();\n\
    \    return a1 * b1;\n}", "    return (a%10)*(b%10);\n}\n", "    return (a%10)\
    \ * (b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10)\
    \ * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}", "    return (a % 10) * (b\
    \ % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  return (a % 10) * (b % 10);\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "  return (a % 10) * (b % 10);\n}\n",
  "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n",
  "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return\
    \ (a%10) * (b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "  return\
    \ (a % 10) * (b % 10);\n}\n", "  return (a%10)*(b%10);\n}\n", "    let a1 = a\
    \ % 10;\n    let b1 = b % 10;\n    return a1 * b1;\n}", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n",
  "    return (a%10) * (b%10);\n}", "    return (a%10)*(b%10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a\
    \ % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "  return (a % 10)\
    \ * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    let result = (a % 10) * (b\
    \ % 10);\n    return result;\n}", "    return (a%10)*(b%10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n\
    }\n", "    return (a%10) * (b%10);\n}\n", "    return (a % 10) * (b % 10);\n}\n",
  "  return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}", "  \
    \  let a1 = a.toString().split('').pop();\n    let b1 = b.toString().split('').pop();\n\
    \    return a1 * b1;\n}", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return\
    \ (a%10)*(b%10);\n}\n", "    return (a%10)*(b%10);\n}\n", "  return (a % 10) *\
    \ (b % 10);\n}\n", "  return (a % 10) * (b % 10);\n}", "    let a1 = a % 10;\n\
    \    let b1 = b % 10;\n    return a1 * b1;\n}\n", "    return (a % 10) * (b %\
    \ 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a % 10) * (b\
    \ % 10);\n}\n", "    return (a % 10) * (b % 10);\n}\n", "    return (a%10)*(b%10);\n\
    }\n", "    return (a%10)*(b%10);\n}\n", "  return (a % 10) * (b % 10);\n}\n",
  "    return (a%10)*(b%10);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
