name: HumanEval_60_sum_to_n
language: rkt
prompt: "#lang racket\n\n;; sum_to_n is a function that sums numbers from 1 to n.\n\
  ;; >>> sum_to_n(30)\n;; 465\n;; >>> sum_to_n(100)\n;; 5050\n;; >>> sum_to_n(5)\n\
  ;; 15\n;; >>> sum_to_n(10)\n;; 55\n;; >>> sum_to_n(1)\n;; 1\n(define (sum_to_n n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal?\
  \ (candidate 11) 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate\
  \ 100) 5050)\n))\n\n(test-humaneval)"
completions: ["  (define (calculate_sum n i)\n    (if (= i n)\n        n\n       \
    \ (+ i (calculate_sum n (+ i 1)))))\n  (calculate_sum n 1))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond ((= n 1) 1)\n        (else\
    \ (+ n (sum_to_n (- n 1))))))\n\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n\
    \ (- n 1))))))\n", "  (define (helper sum count)\n    (if (&gt; count n)\n   \
    \     sum\n        (helper (+ sum count) (+ count 1))))\n  (helper 0 1))\n", " \
    \ (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (sum-interval\
    \ 1 n))\n", "  (define (helper i sum)\n    (if (= i n)\n        sum\n        (helper\
    \ (+ i 1) (+ sum i))))\n  (helper 1 0))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n\
    \ (- n 1)))]))\n", "  (define (sum_to_n-iter n sum)\n    (if (= n 0)\n       \
    \ sum\n        (sum_to_n-iter (- n 1) (+ n sum))))\n  (sum_to_n-iter n 0))\n",
  "  (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1 (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (let loop ((i 1)\
    \ (sum 0))\n    (if (= i (add1 n))\n        sum\n        (loop (add1 i) (+ sum\
    \ i)))))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n",
  "  (letrec ((sum_to_n_iter (lambda (n acc)\n                            (if (= n\
    \ 0)\n                                acc\n                                (sum_to_n_iter\
    \ (- n 1) (+ acc n))))))\n    (sum_to_n_iter n 0)))\n", "  (+ (* n (+ n 1)) (/\
    \ (* n (+ n 1)) 2)))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (for/sum ([i (in-range n)]) i))\n", "  (cond [(= n 1) 1]\n        [else (+ n\
    \ (sum_to_n (- n 1)))]))\n", "  (define (helper n acc)\n    (if (= n 0)\n    \
    \    acc\n        (helper (- n 1) (+ acc n))))\n  (helper n 0))\n\n", "  (define\
    \ (iter sum i)\n    (if (= i (add1 n))\n        sum\n        (iter (+ sum i) (add1\
    \ i))))\n  (iter 0 1))\n", "  (if (zero? n) 0 (+ n (sum_to_n (- n 1)))))\n", " \
    \ (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (\n    if\n    (= n 1)\n    1\n    (+ n (sum_to_n\
    \ (- n 1)))\n  )\n)\n", "  (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (local [(define (sum_to_n-it n m)\n             (cond [(= n 0) m]\n         \
    \          [else (sum_to_n-it (- n 1) (+ n m))]))]\n    (sum_to_n-it n 0)))\n",
  "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (define (sum-iter-to-n\
    \ i acc)\n    (if (= i n)\n        acc\n        (sum-iter-to-n (+ i 1) (+ acc\
    \ i))))\n  (sum-iter-to-n 1 0))\n", "  (define (sum_to_n-helper n s)\n    (if\
    \ (= n 0)\n        s\n        (sum_to_n-helper (- n 1) (+ s n))))\n  (sum_to_n-helper\
    \ n 0))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (<= n 1)\n      n\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (iter\
    \ sum i)\n    (if (< i n)\n        (iter (+ sum i) (+ i 1))\n        sum))\n \
    \ (iter 0 1))\n```\n\n```racket\n#lang racket\n", "  (if (= n 1)\n      1\n  \
    \    (+ n (sum_to_n (- n 1)))))\n\n", "  (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n\
    ```\n\n```racket\n#lang racket\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n```\n\nRunning the above code should print the following:\n\n```\n\
    > (display (sum_to_n 10))\n55\n```\n\n## Additional Resources\n\n* [Racket Documentation](https://docs.racket-lang.org/)\n\
    * [Racket Guide](https://docs.racket-lang.org/guide/index.html)\n* [Racket Syntax](https://docs.racket-lang.org/guide/intro.html#%28part._.Introduction%29)\n\
    * [Stack Overflow](https://stackoverflow.com/questions/tagged/racket)\n* [Tutorials\
    \ Point](https://www.tutorialspoint.com/racket/)\n* [Racket Crash Course](https://oncomouse.github.io/racket-crash-course/)\n\
    * [Racket Tutorial](https://racket-tutorial.com/)\n* [Racket Rosetta Code](https://rosettacode.org/wiki/Category:Racket)\n\
    * [Racket Language Wiki](https://github.com/racket/racket/wiki)\n* [Racket Language\
    \ Chat](https://gitter.im/racket/racket)\n* [Reddit](https://www.reddit.com/r/racket/)\n\
    * [Wikipedia](https://en.wikipedia.org/wiki/Racket_(programming_language))\n*\
    \ [Racket Users](https://groups.google.com/forum/#!forum/racket-users)\n* [Racket\
    \ Beginners](https://groups.google.com/forum/#!forum/racket-beginners)\n* [Racket\
    \ Dev](https://groups.google.com/forum/#!forum/racket-dev)\n* [Racket PLT](https://groups.google.com/forum/#!forum/plt-scheme)\n\
    * [Racket PLT-Dev](https://groups.google.com/forum/#!forum/plt-dev)\n* [Racket\
    \ PLT-List](https://groups.google.com/forum/#!forum/plt-list)\n* [Racket PLT-Scheme",
  "  (sum-of-integers 1 n))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n\
    \ 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1)\
    \ (+ acc n))))\n  (helper n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n", "  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-iter\
    \ total i)\n    (if (= i n)\n        total\n        (sum_to_n-iter (+ total i)\
    \ (+ i 1))))\n  (sum_to_n-iter 0 1))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n",
  "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n```\n\nThis program\
    \ would return:\n\n```racket\n> (sum_to_n 30)\n465\n```\n\n*Fibonacci numbers*\
    \ are made by adding the previous two numbers in the sequence together, starting\
    \ with 1 and 1. For example, the first few Fibonacci numbers are:\n\n```\n1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n```\n\nWrite a program that returns\
    \ a list of Fibonacci numbers using a recursive function.\n\n```racket\n#lang\
    \ racket\n", "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (if (and\
    \ (not (zero? n)) (> n 0))\n      (+ n (sum_to_n (- n 1)))\n      0))", "  (cond\n\
    \    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond\n    [(=\
    \ n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define (sum_to_n-iter\
    \ sum i)\n    (if (= i (+ n 1))\n        sum\n        (sum_to_n-iter (+ sum i)\
    \ (+ i 1))))\n  (sum_to_n-iter 0 1))\n", "  (define (iter s i)\n    (if (= i n)\n\
    \      s\n      (iter (+ s i) (+ i 1))))\n  (iter 0 1))\n", "  (let loop ((x 1)\
    \ (acc 0))\n    (if (= x (add1 n))\n        acc\n        (loop (add1 x) (+ acc\
    \ x)))))\n", "  (sum_to_n-recur n 0))\n", "  (if (= n 1)\n      1\n      (+ n\
    \ (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n\
    \ 1)))))\n", "  (sum1 n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (for/sum ([i (in-range 1 (+ n 1))])\n           i))\n", " \
    \ (cond\n    [(<= n 1) n]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define\
    \ (sum_iter cur acc)\n    (if (= cur 1)\n        acc\n        (sum_iter (- cur\
    \ 1) (+ acc cur))))\n  (sum_iter n 0))\n", "  (if (= n 1)\n      1\n      (+ n\
    \ (sum_to_n (- n 1)))))\n", "  (if (<= n 1)\n      n\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (+ n (sum_to_n (- n 1))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (let loop ((acc 0) (x 1))\n    (if (<= x n)\n        (loop\
    \ (+ acc x) (+ x 1))\n        acc)))\n", "  (cond [(= n 1) 1]\n        [else (+\
    \ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (letrec ([sum (lambda (n)\n                  (if (zero? n)\n               \
    \       0\n                      (+ n (sum (- n 1)))))])\n    (sum n)))\n```\n\
    \n```\n#lang racket\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (-\
    \ n 1)))]))\n", "  (+ n (* n (- n 1)) (/ n 2)))\n", "  (cond\n    ((= n 1)\n \
    \    1)\n    (else\n     (+ n (sum_to_n (- n 1))))))\n", "  (cond\n    [(= n 1)\
    \ 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define (sum_to_n-iter n-i\
    \ acc)\n    (if (= n-i 0)\n        acc\n        (sum_to_n-iter (- n-i 1) (+ acc\
    \ n-i))))\n  (sum_to_n-iter n 0))\n", "  (if (zero? n)\n      0\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n```\n\n```racket\n#lang racket\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n```\n#lang racket\n", "  (if\
    \ (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n    \
    \  1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n_acc m acc)\n\
    \    (if (= m 0)\n        acc\n        (sum_to_n_acc (- m 1) (+ acc m))))\n  (sum_to_n_acc\
    \ n 0))\n```\n\n### Base\n\n```racket\n#lang racket\n", "  (if (= n 1)\n     \
    \ 1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (+ n\n     (* n (- n 1))))\n", "  (if (<= n 1)\n\
    \      n\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1 (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (sum_to_n-iter 0 n))\n",
  "  (define (sum_to_n_inner n current)\n    (if (= n 0)\n        current\n      \
    \  (sum_to_n_inner (- n 1) (+ current n))))\n  (sum_to_n_inner n 0))\n", "  (define\
    \ (sum_to_n-iter p)\n    (if (= p n)\n        p\n        (+ p (sum_to_n-iter (+\
    \ p 1)))))\n  (sum_to_n-iter 1))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-helper\
    \ n current-sum)\n    (if (= n 0)\n      current-sum\n      (sum_to_n-helper (-\
    \ n 1) (+ current-sum n))))\n  (sum_to_n-helper n 0))\n", "  (cond\n    [(= n\
    \ 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond [(zero? n) 1]\n  \
    \      [else (+ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (define (iter i)\n    (if (= i n)\n        0\n        (+ i (iter\
    \ (add1 i)))))\n  (iter 1))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n\
    \ (- n 1))))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (summation\
    \ count)\n    (if (= count n)\n        count\n        (+ count (summation (+ count\
    \ 1)))))\n  (summation 1))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n\
    \ (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (helper\
    \ accum n)\n    (if (= n 0)\n        accum\n        (helper (+ accum n) (- n 1))))\n\
    \  (helper 0 n))\n", "  (+ n (-sum_to_n n)))\n", "  (cond ((= n 1) 1)\n      \
    \  (else (+ n (sum_to_n (- n 1))))))\n", "  (define (iter n s)\n    (if (= n 0)\n\
    \        s\n        (iter (- n 1) (+ s n))))\n  (iter n 0))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum n sum)\n    (if\
    \ (= n 0)\n        sum\n        (sum (- n 1) (+ sum n))))\n  (sum n 0))\n", " \
    \ (define (sum_to_n_iter x sum)\n    (if (&lt; x n)\n        (sum_to_n_iter (+\
    \ x 1) (+ sum x))\n        sum))\n  (sum_to_n_iter 1 0))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n   \
    \ [else (+ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n```\n\n```scheme\n#lang racket\n", "  (if (= n 1)\n      1\n  \
    \    (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1\n    (+ n (sum_to_n (- n\
    \ 1)))))\n", "  (sum_to_n-it n 1 0))\n", "  (cond\n    [(zero? n) 0]\n    [else\
    \ (+ n (sum_to_n (- n 1)))]))\n", "  (define (iter running_sum i)\n    (if (=\
    \ i n)\n        running_sum\n        (iter (+ running_sum i) (+ i 1))))\n  (iter\
    \ 0 1))\n\n", "  (let sum_next ((acc 0) (n n))\n    (if (= n 0)\n        acc\n\
    \        (sum_next (+ acc n) (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else\
    \ (+ n (sum_to_n (- n 1)))]))\n", "  (sum_to_n_tr n 1 0))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n\
    \ (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (let ((i 1)\n        (sum 0))\n    (while (<= i n)\n      (set! sum (+ sum i))\n\
    \      (set! i (+ i 1)))\n    sum))\n", "  (cond [(= n 1) 1]\n        [else (+\
    \ n (sum_to_n (- n 1)))]))", "  (define (sum_to_n_from_i n i)\n    (if (= i n)\n\
    \      i\n      (+ i (sum_to_n_from_i n (+ i 1)))))\n  (sum_to_n_from_i n 1))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(<=\
    \ n 1) n]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n\
    \      (+ n (sum_to_n (- n 1)))))\n```\n\n```racket\n#lang racket\n", "  (define\
    \ (sum_to_n-iter n i res)\n    (if (= i n)\n        (+ res n)\n        (sum_to_n-iter\
    \ n (+ i 1) (+ res i))))\n  (sum_to_n-iter n 1 0))\n", "  (cond\n    ((= n 1)\
    \ 1)\n    (else (+ n (sum_to_n (- n 1))))))\n", "  (if (= n 1)\n      1\n    \
    \  (+ n (sum_to_n (- n 1)))))\n", "  (if (<= n 1)\n      n\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (sum n 1 n))\n", "  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n## 3. C\n\n```C\n// A\
    \ function that sums numbers from 1 to n.\nint sum_to_n(int n){\n  if (n == 1)\n\
    \    return 1;\n  else\n    return n + sum_to_n(n - 1);\n}\n```\n\n## 4. Prolog\n\
    \n```prolog\nsum_to_n(1, 1).\nsum_to_n(N, S) :-\n  N > 1,\n  N1 is N - 1,\n  sum_to_n(N1,\
    \ S1),\n  S is S1 + N.\n```\n\n## 5. Python\n\n```python\n# A function that sums\
    \ numbers from 1 to n.\ndef sum_to_n(n):\n  if n == 1:\n    return 1\n  else:\n\
    \    return n + sum_to_n(n - 1)\n```\n\n## 6. Scala\n\n```scala\n// A function\
    \ that sums numbers from 1 to n.\ndef sum_to_n(n: Int): Int = {\n  if (n == 1)\n\
    \    1\n  else\n    n + sum_to_n(n - 1)\n}\n```\n\n## 7. Common Lisp\n\n```lisp",
  "  (define (helper i)\n    (if (= i n) i\n        (+ i (helper (+ i 1)))))\n  (helper\
    \ 1))\n", "  (define (sum n acc)\n    (if (eq? n 0)\n        acc\n        (sum\
    \ (- n 1) (+ acc n))))\n  (sum n 0))\n```\n\n```racket\n#lang racket\n", "  (if\
    \ (= n 1) 1\n    (+ n (sum_to_n (- n 1)))))\n", "  (if (<= n 1)\n      n\n   \
    \   (+ n (sum_to_n (- n 1)))))\n```\n\n```", "  (if (= n 1) 1 (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (define (sum_to_n_iter n acc)\n    (if (= n 0)\n        acc\n\
    \        (sum_to_n_iter (- n 1) (+ acc n))))\n  (sum_to_n_iter n 0))\n", "  (if\
    \ (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n    \
    \  1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else\
    \ (+ n (sum_to_n (- n 1)))]))\n", "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n\
    \ (- n 1)))]))", "  (define (helper i sum)\n    (if (= i n)\n        sum\n   \
    \     (helper (+ i 1) (+ sum i))))\n  (helper 1 0))\n", "  (if (= n 1)\n     \
    \ 1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (sum_to_n_helper n 1 0))\n", "  (define (iter\
    \ i sum)\n    (if (= i (add1 n))\n        sum\n        (iter (add1 i) (add1 sum\
    \ i))))\n  (iter 1 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n\
    \ 1)))))\n\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (\n   if (zero? n)\n       0\n\
    \       (+ n (sum_to_n (- n 1)))\n   )\n  )\n", "  (if (= n 1)\n      1\n    \
    \  (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_aux n accum)\n    (if (&lt;=\
    \ n 0)\n        accum\n        (sum_aux (- n 1) (+ accum n))))\n  (sum_aux n 0))\n",
  "  (define (sum_to_n_helper sum n)\n    (if (= n 0)\n        sum\n        (sum_to_n_helper\
    \ (+ sum n) (- n 1))))\n  (sum_to_n_helper 0 n))\n", "  (cond ((= n 1) 1)\n  \
    \      (else (+ n (sum_to_n (- n 1))))))\n", "  (cond [(= n 1) 1]\n        [else\
    \ (+ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond ((=\
    \ n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n", "  (let loop ((i 1) (s\
    \ 0))\n    (if (= i (add1 n))\n        s\n        (loop (add1 i) (+ s i)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (summation\
    \ cnt tot)\n    (if (= cnt n)\n        tot\n        (summation (+ cnt 1) (+ tot\
    \ cnt))))\n  (summation 1 0))\n", "  (+ n (* n (- n 1))))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-aux n result)\n\
    \    (if (= n 0)\n        result\n        (sum_to_n-aux (- n 1) (+ n result))))\n\
    \  (sum_to_n-aux n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n\
    ```racket\n#lang racket\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n\
    \ 1)))))\n", "  (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (cond\n    ((= n 1) 1)\n    (else (+ n (sum_to_n (- n 1))))))\n", "  (if (=\
    \ n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n\
    \      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
