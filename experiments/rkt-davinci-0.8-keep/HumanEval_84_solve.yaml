name: HumanEval_84_solve
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer N, return the total sum of its\
  \ digits in binary.\n;; Example\n;; For N = 1000, the sum of digits will be 1 the\
  \ output should be \"1\".\n;; For N = 150, the sum of digits will be 6 the output\
  \ should be \"110\".\n;; For N = 147, the sum of digits will be 12 the output should\
  \ be \"1100\".\n;; Variables:\n;; @N integer\n;; Constraints: 0 \u2264 N \u2264\
  \ 10000.\n;; Output:\n;; a string of binary number\n(define (solve N)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate 1000) \"1\")\n    (check-equal? (candidate 150) \"\
  110\")\n    (check-equal? (candidate 147) \"1100\")\n    (check-equal? (candidate\
  \ 333) \"1001\")\n    (check-equal? (candidate 963) \"10010\")\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
