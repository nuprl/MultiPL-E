language: rkt
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map string\n       (lambda (ch)\n         (if (char-alphabetic?\
    \ ch)\n             (if (char-lower-case? ch)\n                 (char-upcase ch)\n\
    \                 (char-downcase ch))\n             ch))))\n```\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppbb8n5lr.rkt:17:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map \n   (lambda (char) \n     (cond \n      \
    \ [(char-lower-case? char) (char-upcase char)]\n       [(char-upper-case? char)\
    \ (char-downcase char)]\n       [else char]))\n   string))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc6dt1iub.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpc6dt1iub.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (letrec ([chars (string->list string)]\n           [flip\
    \ (lambda (char)\n                   (cond [(char-upper-case? char) (char-downcase\
    \ char)]\n                         [(char-lower-case? char) (char-upcase char)]\n\
    \                         [else char]))])\n    (list->string (map flip chars))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append (map (\u03BB (x) (if (char-lower-case?\
    \ x) (char-upcase x) (char-downcase x))) string)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6l3kzjj.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6l3kzjj.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc6l3kzjj.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append\n   (map\n    (\u03BB (x)\n      (cond\n\
    \        [(char-lower-case? x) (char-upcase x)]\n        [(char-upper-case? x)\
    \ (char-downcase x)]\n        [else x]))\n    string)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvka5hs_t.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvka5hs_t.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvka5hs_t.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (\u03BB (x)\n         (cond [(char-lower-case? x)\
    \ (char-upcase x)]\n               [(char-upper-case? x) (char-downcase x)]\n\
    \               [else x]))\n       string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmnwa3tc.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmnwa3tc.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgmnwa3tc.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (s i)\n                     (string-upcase (string-downcase s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4ksrofa.rkt:17:4\n\
    \n...tmp/tmpn4ksrofa.rkt:8:19: arity mismatch;\n the expected number of arguments\
    \ does not match the given number\n  expected: 2\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4ksrofa.rkt:18:4\n\
    \n...tmp/tmpn4ksrofa.rkt:8:19: arity mismatch;\n the expected number of arguments\
    \ does not match the given number\n  expected: 2\n  given: 1\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append (string-map (lambda (c) (if (char-lower-case?\
    \ c) (char-upcase c) (char-downcase c))) string)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjeth5dsq.rkt:7:18: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjeth5dsq.rkt:7:18\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (\u03BB (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3nyqd2c.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3nyqd2c.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps3nyqd2c.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n```\n\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk1iopns4.rkt:15:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw3615ktm.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw3615ktm.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ib9_ho4.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ib9_ho4.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ib9_ho4.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map\n    (\u03BB (c)\n      (if (char-ci&lt;=?\
    \ #\\a c #\\z)\n          (char-upcase c)\n          (char-downcase c)))\n   \
    \ (string-&gt;list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc4lqlr6_.rkt:13:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 15\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append\n         (map (lambda (char)\n \
    \               (cond\n                  [(char-lower-case? char) (char-upcase\
    \ char)]\n                  [(char-upper-case? char) (char-downcase char)]\n \
    \                 [else                     char]))\n              string)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tar6y5h.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tar6y5h.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tar6y5h.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf3njx59a.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpf3njx59a.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (match)\n                     (string-upcase (string-downcase match)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp281sztpo.rkt:17:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp281sztpo.rkt:18:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase/downcase string))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpol080url.rkt:7:3: string-upcase/downcase: unbound identifier\n\
    \  in: string-upcase/downcase\n  location...:\n   /tmp/tmpol080url.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x)\n                (if (char-ci&gt;=?\
    \ x #\\a)\n                    (char-upcase x)\n                    (char-downcase\
    \ x)))\n              string))\n</code>\n<code>#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuaxu3_bn.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 12\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip-char char)\n    (if (char-lower-case? char)\n\
    \        (char-upcase char)\n        (char-downcase char)))\n  (map flip-char\
    \ string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizo0oev2.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizo0oev2.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizo0oev2.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (cond\n                      [(char-lower-case?\
    \ c) (char-upcase c)]\n                      [(char-upper-case? c) (char-downcase\
    \ c)]\n                      [else c]))\n              string))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7cv6oo_n.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7cv6oo_n.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp69zrbpfb.rkt:16:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp69zrbpfb.rkt:17:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp69zrbpfb.rkt:18:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (x) (if (char-alphabetic? x)\n          \
    \             (char-downcase x)\n                       (char-upcase x)))\n  \
    \     string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp577mgpw2.rkt:17:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp577mgpw2.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp577mgpw2.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([i (in-list string)])\n    (cond ((char-alphabetic?\
    \ i)\n           (cond [(char-lower-case? i) (char-upcase i)]\n              \
    \   [(char-upper-case? i) (char-downcase i)]))\n          (else i))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1urbpaj.rkt:18:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1urbpaj.rkt:19:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1urbpaj.rkt:20:4\n\
    \nin-list: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append\n         (map (lambda (c)\n    \
    \            (if (char-alphabetic? c)\n                    (if (char-lower-case?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c))\n                    c))\n              string)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz5ii7ens.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz5ii7ens.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz5ii7ens.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip-char c)\n    (cond [(char-numeric? c) c]\n\
    \          [(char-alphabetic? c) (char-upcase c)]\n          [else (char-downcase\
    \ c)]))\n  (list->string (map flip-char (string->list string))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvz80edxe.rkt:19:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvz80edxe.rkt:20:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char) (if (char-upper-case? char)\
    \ (char-downcase char) (char-upcase char))) string))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2pf0u8ov.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2pf0u8ov.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_k6q3v62.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_k6q3v62.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbuiiovxr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbuiiovxr.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upper-case (string-lower-case string)))\n</code>\n\
    Error:\n<code>flip_case.rkt:5:10: string-upper-case: expects argument of type\
    \ &lt;string&gt;; given #&lt;string-ci&gt;\n</code>\nWhat does this error message\
    \ mean?\n\n\nA:\n\n<code>string-lower-case</code> returns a case-insensitive string.\
    \  So it's not a string, and can't be passed to <code>string-upper-case</code>.\n\
    You need to convert it back to a string with <code>string-ci-&gt;string</code>.\n\
    There's not enough context to say why <code>string-lower-case</code> is returning\
    \ case-insensitive strings instead of the normal strings.  However, if you're\
    \ working with strings in a case-insensitive manner, you may want to consider\
    \ working with case-insensitive strings throughout, in which case you would just\
    \ use <code>string-upcase</code> instead of <code>string-upper-case</code>.\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcihm4s1w.rkt:17:87: unquote: not in quasiquote\n  in: (unquote\
    \ and)\n  location...:\n   /tmp/tmpcihm4s1w.rkt:17:87\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/wrap-modbeg.rkt:46:4\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map #(\\string char-downcase (char-upcase char))\
    \ string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdei155b7.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdei155b7.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (helper string result)\n    (if (= 0 (string-length\
    \ string))\n        result\n        (if (char-ci=? (string-ref string 0) (string-ref\
    \ string 0))\n            (helper (substring string 1) (string-append result (string-downcase\
    \ (string-ref string 0))))\n            (helper (substring string 1) (string-append\
    \ result (string-upcase (string-ref string 0)))))))\n  (helper string \"\"))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3jticrbk.rkt:21:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3jticrbk.rkt:22:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\T\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-translate string #\\a #\\A)\n  (string-translate\
    \ string #\\A #\\a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp38qnmj3m.rkt:7:3: string-translate: unbound identifier\n  in: string-translate\n\
    \  location...:\n   /tmp/tmp38qnmj3m.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x) (if (char-numeric? x) x (if (char-lower-case?\
    \ x) (char-upcase x) (char-downcase x)))) string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp5f1r86j.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp5f1r86j.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-ci&gt;=? c #\\a) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpye2phx1s.rkt:7:30: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 9\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([str (string->list string)]\n             [result\
    \ '()])\n    (cond [(empty? str) (list->string (reverse result))]\n          [(char-lower-case?\
    \ (car str))\n           (loop (cdr str) (cons (char-upcase (car str)) result))]\n\
    \          [(char-upper-case? (car str))\n           (loop (cdr str) (cons (char-downcase\
    \ (car str)) result))]\n          [else (loop (cdr str) (cons (car str) result))])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (char)\n\t (cond [(char-alphabetic? char)\n\
    \t\t(cond [(char-lower-case? char)\n\t\t       (char-upcase char)]\n\t\t     \
    \ [(char-upper-case? char)\n\t\t       (char-downcase char)])]\n\t       [else\
    \ char]))\n       string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1dw8ohk.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1dw8ohk.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf1dw8ohk.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (cond\n       [(char-lower-case?\
    \ c) (char-upcase c)]\n       [(char-upper-case? c) (char-downcase c)]\n     \
    \  [else c]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprp6o88he.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprp6o88he.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (s) (if (char-upcase? s) (char-downcase\
    \ s) (char-upcase s))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa6s6lsc7.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa6s6lsc7.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([char (in-string string)])\n    (if (char-numeric?\
    \ char)\n        char\n        (if (char-lower-case? char)\n            (char-upcase\
    \ char)\n            (char-downcase char)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkcnykfzu.rkt:19:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkcnykfzu.rkt:20:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkcnykfzu.rkt:21:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map (lambda (x)\n          (if (char-lower-case?\
    \ x)\n              (char-upcase x)\n              (char-downcase x)))\n     \
    \   string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkuj5kl9_.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkuj5kl9_.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkuj5kl9_.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-alphabetic?\
    \ char)\n         (if (char-lower-case? char)\n             (char-upcase char)\n\
    \             (char-downcase char))\n         char))\n   string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqz52220x.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqz52220x.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (curryr string-downcase string-upcase) string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppmi8eb1t.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppmi8eb1t.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj29blz94.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj29blz94.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-upcase?\
    \ char)\n         (char-downcase char)\n         (char-upcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplegyy1m2.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmplegyy1m2.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([f (flipcase-proc)])\n    (for/list ([c (in-string\
    \ string)])\n      (f c))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj6zaq4oa.rkt:7:12: flipcase-proc: unbound identifier\n  in: flipcase-proc\n\
    \  location...:\n   /tmp/tmpj6zaq4oa.rkt:7:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append\n         (map (lambda (char)\n \
    \               (if (char-alphabetic? char)\n                    (if (char-ci&lt;=?\
    \ char #\\a)\n                        (char-upcase char)\n                   \
    \     (char-downcase char))\n                    char))\n              string)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1voauck2.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 16\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprb_zjrmr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprb_zjrmr.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x)\n                (or (char-downcase\
    \ x)\n                    (char-upcase x)))\n              string))\n\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvpcsye7p.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpvpcsye7p.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define new-string \"\")\n  (for ([char (in-string string)])\n\
    \    (cond\n      [(char-lower-case? char) (string-append new-string (string-upcase\
    \ (string char)))]\n      [(char-upper-case? char) (string-append new-string (string-downcase\
    \ (string char)))]\n      [else (string-append new-string (string char))]))\n\
    \  new-string)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk8yuvcz.rkt:21:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk8yuvcz.rkt:22:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"These violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (compose string-upcase string-downcase) string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mszr18u.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mszr18u.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mszr18u.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([str-vec (string->vector string)])\n    (vector-map\n\
    \     (lambda (x)\n       (if (char-alphabetic? x)\n           (if (char-lower-case?\
    \ x)\n               (char-upcase x)\n               (char-downcase x))\n    \
    \       x))\n     str-vec)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5u31kg_u.rkt:7:18: string->vector: unbound identifier\n  in: string->vector\n\
    \  location...:\n   /tmp/tmp5u31kg_u.rkt:7:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (\u03BB (c)\n     (cond\n       [(char-lower-case?\
    \ c) (char-upcase c)]\n       [(char-upper-case? c) (char-downcase c)]\n     \
    \  [else c]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpye09pqjc.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpye09pqjc.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4wvlk9t_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4wvlk9t_.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append\n   (map\n    (lambda (ch)\n      (if (char-ci&gt;=?\
    \ ch #\\a)\n          (char-upcase ch)\n          (char-downcase ch)))\n    string)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzeaquit3.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append \n   (string-map\n    (lambda (c)\n   \
    \   (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n  \
    \  (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9kxn0_rk.rkt:8:4: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9kxn0_rk.rkt:8:4\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map\n   (lambda (char)\n     (if (char-lower-case? char)\n\
    \         (char-upcase char)\n         (char-downcase char)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhk5_a_8.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhk5_a_8.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhk5_a_8.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (cond\n    [(empty? string) string]\n    [(char-alphabetic?\
    \ (first string))\n     (if (char-lower-case? (first string))\n         (cons\
    \ (char-upcase (first string)) (flip_case (rest string)))\n         (cons (char-downcase\
    \ (first string)) (flip_case (rest string))))]\n    [else (cons (first string)\
    \ (flip_case (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw53df63q.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw53df63q.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw53df63q.rkt:22:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"These\
    \ violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map char-upcase string))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl6f538y9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpl6f538y9.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map char-upcase/downcase string))\n```\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyhsevu59.rkt:11:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (character)\n     (if (char-upcase?\
    \ character)\n         (char-downcase character)\n         (char-upcase character)))\n\
    \   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0y1dwb7m.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0y1dwb7m.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (build-string (string-length string) (lambda (i)\n   \
    \                                      (if (or (char-alphabetic? (string-ref string\
    \ i))\n                                                 (char-numeric? (string-ref\
    \ string i)))\n                                             (if (char-lower-case?\
    \ (string-ref string i))\n                                                 (char-upcase\
    \ (string-ref string i))\n                                                 (char-downcase\
    \ (string-ref string i)))\n                                             (string-ref\
    \ string i)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (char)\n           \
    \                   (cond\n                                [(char-downcase? char)\
    \ (char-upcase char)]\n                                [(char-upcase? char) (char-downcase\
    \ char)]\n                                [else char]))\n                    \
    \        string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp69zw120t.rkt:9:34: char-downcase?: unbound identifier\n  in: char-downcase?\n\
    \  location...:\n   /tmp/tmp69zw120t.rkt:9:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (build-string (string-length string)\n    (lambda (i)\n\
    \      (if (char-lower-case? (string-ref string i))\n          (char-upcase (string-ref\
    \ string i))\n          (char-downcase (string-ref string i))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmper81g6bu.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmper81g6bu.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (ch)\n                (cond [(char-lower-case?\
    \ ch) (char-upcase ch)]\n                      [(char-upper-case? ch) (char-downcase\
    \ ch)]\n                      [else (char-downcase ch)]))\n              string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbppfra1d.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbppfra1d.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-alphabetic?\
    \ char)\n                    (if (char-lower-case? char)\n                   \
    \     (char-upcase char)\n                        (char-downcase char))\n    \
    \                char))\n              string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp333adgyh.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp333adgyh.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map (lambda (c)\n          (if (char-downcase?\
    \ c)\n              (char-upcase c)\n              (char-downcase c)))\n     \
    \   string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpushhhx61.rkt:9:15: char-downcase?: unbound identifier\n  in: char-downcase?\n\
    \  location...:\n   /tmp/tmpushhhx61.rkt:9:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (if (char-upcase? c) (char-downcase\
    \ c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbcni_8el.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbcni_8el.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([string string]\n             [currpos 0]\n\
    \             [result '()])\n    (if (eq? currpos (string-length string))\n  \
    \      (list->string (reverse result))\n        (loop (string-drop string (add1\
    \ currpos))\n              (add1 currpos)\n              (cons (if (char-lower-case?\
    \ (string-ref string currpos))\n                      (char-upcase (string-ref\
    \ string currpos))\n                      (char-downcase (string-ref string currpos)))\n\
    \                    result)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpasexmcmg.rkt:12:15: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpasexmcmg.rkt:12:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([len (string-length string)])\n    (for/list ([i\
    \ (in-range len)])\n      (let ([char (string-ref string i)])\n        (cond\n\
    \          [(char-alphabetic? char)\n           (if (char-lower-case? char)\n\
    \               (char-upcase char)\n               (char-downcase char))]\n  \
    \        [else char])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07jcitg2.rkt:22:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07jcitg2.rkt:23:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07jcitg2.rkt:24:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (c) (if (char-upcase?\
    \ c) (char-downcase c) (char-upcase c))) string)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp89k0cu90.rkt:7:45: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp89k0cu90.rkt:7:45\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n\
    \             (if (char-lower-case? c)\n                 (char-upcase c)\n   \
    \              (char-downcase c))\n             c))\n       string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpwrzso9.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpwrzso9.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpwrzso9.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map\n    (\u03BB (s)\n      (cond\n\
    \        [(string-foldcase (string-downcase s)) (string-upcase s)]\n        [(string-foldcase\
    \ (string-upcase s)) (string-downcase s)]\n        [else s]))\n    (string-split\
    \ string)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppyuqnma3.rkt:22:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppyuqnma3.rkt:23:4

    actual:     "THESEVIOLENTDELIGHTSHAVEVIOLENTENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join (map (\u03BB (c)\n                      (if\
    \ (char-upper-case? c)\n                          (char-downcase c)\n        \
    \                  (char-upcase c)))\n                    (string->list string))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuxmeeqfi.rkt:19:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    h #\\E #\\L #\\L #\\O #\\!)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuxmeeqfi.rkt:20:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\t #\\H #\\E\
    \ #\\S #\\E #\\space #\\V #\\I #\\O #\\L #\\E #\\N #\\T #\\space #\\D #\\E #\\\
    L #\\I #\\G #\\H #\\T #\\S #\\space #\\H #\\A #\\V #\\E #\\space #\\V #\\I #\\\
    O #\\L #\\E #\\N #\\T #\\space #\\E #\\N #\\D #\\S)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-upcase? c) (char-downcase\
    \ c) (char-upcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyfk1jb_7.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpyfk1jb_7.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map char-upcase string))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvqy3t7jt.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpvqy3t7jt.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-upper-case?\
    \ c)\n                    (char-downcase c)\n                    (char-upcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb2ivibv8.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpb2ivibv8.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (ch)\n     (if (char-ci&gt;=?\
    \ ch #\\a)\n         (char-upcase ch)\n         (char-downcase ch)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfu4qkcay.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 14\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (u_to_l char)\n    (integer->char (- (char-&gt;integer\
    \ char) 32)))\n  (define (l_to_u char)\n    (integer-&gt;char (+ (char-&gt;integer\
    \ char) 32)))\n  (map (lambda (char)\n         (if (char-upcase? char)\n     \
    \        (u_to_l char)\n             (l_to_u char)))\n       string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1xpxxe7r.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 17\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppf3qx0xs.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppf3qx0xs.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (\u03BB (x) (if (char-alphabetic? x)\n          \
    \        (if (char-uppercase? x)\n                      (char-downcase x)\n  \
    \                    (char-upcase x))\n                  x))\n       string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgp_2n28v.rkt:8:23: char-uppercase?: unbound identifier\n  in: char-uppercase?\n\
    \  location...:\n   /tmp/tmpgp_2n28v.rkt:8:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([i 0] [result ''])\n    (if (= i (string-length\
    \ string))\n        (list->string result)\n        (let ([c (string-ref string\
    \ i)])\n          (loop (+ i 1)\n                (append result\n            \
    \            (if (char-lower-case? c)\n                            (string-upcase\
    \ (string c))\n                            (string-downcase (string c)))))))))\n\
    ```\n\n---\n\n## `insert_dashes`\n\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu4gb6r_o.rkt:7:29: read-syntax: unexpected `]`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (if (char-ci&gt;=? c #\\a) (char-upcase\
    \ c) (char-downcase c))) string))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphi_l3_bz.rkt:7:25: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 8\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([ch (in-string string)])\n    (cond\n     \
    \ [(char-lower-case? ch) (char-upcase ch)]\n      [(char-upper-case? ch) (char-downcase\
    \ ch)]\n      [else ch])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxl8mvw85.rkt:18:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxl8mvw85.rkt:19:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxl8mvw85.rkt:20:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (cond [(string=? string \"\") \"\"]\n        [(char-lower-case?\
    \ (string-ref string 0)) (string-append (string-upper-case (string-ref string\
    \ 0)) (flip_case (substring string 1)))]\n        [(char-upper-case? (string-ref\
    \ string 0)) (string-append (string-lower-case (string-ref string 0)) (flip_case\
    \ (substring string 1)))]\n        [else (string-append (string-ref string 0)\
    \ (flip_case (substring string 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjrrdf3yp.rkt:8:66: string-upper-case: unbound identifier\n  in:\
    \ string-upper-case\n  location...:\n   /tmp/tmpjrrdf3yp.rkt:8:66\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([char (in-string string)])\n    (if (char-alphabetic?\
    \ char)\n        (if (char-lower-case? char)\n            (char-upcase char)\n\
    \            (char-downcase char))\n        char)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpap33jm19.rkt:19:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpap33jm19.rkt:20:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpap33jm19.rkt:21:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([i 0] [new-string (make-string (string-length\
    \ string))])\n    (if (= i (string-length string))\n        new-string\n     \
    \   (let ([c (string-ref string i)])\n          (cond [(char-upper-case? c)\n\
    \                 (string-set! new-string i (char-downcase c))]\n            \
    \    [(char-lower-case? c)\n                 (string-set! new-string i (char-upcase\
    \ c))])\n          (loop (+ i 1) new-string)))))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqd2le6qw.rkt:22:4

    actual:     "hELLO\u0000"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqd2le6qw.rkt:23:4

    actual:     "tHESE\u0000VIOLENT\u0000DELIGHTS\u0000HAVE\u0000VIOLENT\u0000ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upper-case (string-lower-case string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp80_kb_7t.rkt:7:3: string-upper-case: unbound identifier\n  in:\
    \ string-upper-case\n  location...:\n   /tmp/tmp80_kb_7t.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (string-&gt;list (string-map flip-char string)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_ef6hx1.rkt:13:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (cond\n       [(char-upcase?\
    \ c) (char-downcase c)]\n       [(char-downcase? c) (char-upcase c)]\n       [else\
    \ c]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpryxf_1ex.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpryxf_1ex.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvy6m074f.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvy6m074f.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/string ([ch (in-string string)])\n    (cond\n   \
    \   [(char-lower-case? ch) (char-upcase ch)]\n      [(char-upper-case? ch) (char-downcase\
    \ ch)]\n      [else ch])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprz80p6fv.rkt:7:3: for/string: unbound identifier\n  in: for/string\n\
    \  location...:\n   /tmp/tmprz80p6fv.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-flip-case string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5t_qn2wx.rkt:7:3: string-flip-case: unbound identifier\n  in: string-flip-case\n\
    \  location...:\n   /tmp/tmp5t_qn2wx.rkt:7:3\n"
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (flip_case' string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (cond\n       [(char-lower-case?\
    \ char) (char-upcase char)]\n       [(char-upper-case? char) (char-downcase char)]\n\
    \       [else char]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpva97x4p5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpva97x4p5.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (\u03BB (char)\n         (if (char-lower-case? char)\n\
    \             (char-upcase char)\n             (char-downcase char)))\n      \
    \ string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtp10w3k.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtp10w3k.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprtp10w3k.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-downcase string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2hvxv4nf.rkt:15:4

    actual:     "hello!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2hvxv4nf.rkt:16:4

    actual:     "these violent delights have violent ends"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (cond ((char-lower-case?\
    \ char) (char-upcase char))\n                      ((char-upper-case? char) (char-downcase\
    \ char))\n                      (else char)))\n              string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx9srjxs_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpx9srjxs_.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (\u03BB (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpokwrhspv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpokwrhspv.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip_case-iter flipped-string s)\n    (cond ((null?\
    \ s) flipped-string)\n          ((char-lower-case? (car s))\n           (flip_case-iter\
    \ (string-append flipped-string (string-upcase (car s))) (cdr s)))\n         \
    \ ((char-upper-case? (car s))\n           (flip_case-iter (string-append flipped-string\
    \ (string-downcase (car s))) (cdr s)))\n          (else (flip_case-iter (string-append\
    \ flipped-string (car s)) (cdr s)))))\n  (flip_case-iter \"\" string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_wzyq4s.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_wzyq4s.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa_wzyq4s.rkt:23:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([string string]\n             [output '()])\n\
    \    (if (empty? string)\n        (reverse output)\n        (let ([first (first\
    \ string)])\n          (if (char-alphabetic? first)\n              (if (char-upper-case?\
    \ first)\n                  (loop (rest string) (cons (char-downcase first) output))\n\
    \                  (loop (rest string) (cons (char-upcase first) output)))\n \
    \             (loop (rest string) (cons first output)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34sgm8pj.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp34sgm8pj.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp34sgm8pj.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"These\
    \ violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-fold (\u03BB (char case)\n                 (cond\
    \ ((eq? case 'up) (string-downcase char))\n                       ((eq? case 'down)\
    \ (string-upcase char))\n                       (else char)))\n              \
    \ \"\"\n               string\n               'up))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpepa6xgam.rkt:7:3: string-fold: unbound identifier\n  in: string-fold\n\
    \  location...:\n   /tmp/tmpepa6xgam.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map\n   (lambda (ch)\n     (cond ((char-lower-case? ch)\
    \ (char-upcase ch))\n           ((char-upper-case? ch) (char-downcase ch))\n \
    \          (else ch)))\n   string))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5ch4tfec.rkt:13:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp5ch4tfec.rkt:13:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (compose symbol->string string-downcase) string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9ajrxyjd.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9ajrxyjd.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-&gt;list string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsa7uzzoe.rkt:7:2: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 9\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" (lambda (match) (string-upcase\
    \ match)) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8uvnbgt.rkt:14:4\n\
    \nregexp-replace*: contract violation\n  expected: (or/c bytes? string?)\n  given:\
    \ #<procedure:...tmp/tmpg8uvnbgt.rkt:7:30>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8uvnbgt.rkt:15:4\n\nregexp-replace*:\
    \ contract violation\n  expected: (or/c bytes? string?)\n  given: #<procedure:...tmp/tmpg8uvnbgt.rkt:7:30>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg8uvnbgt.rkt:16:4\n\nregexp-replace*: contract violation\n\
    \  expected: (or/c bytes? string?)\n  given: #<procedure:...tmp/tmpg8uvnbgt.rkt:7:30>\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (if (eq? (string-length string) 0)\n      \"\"\n     \
    \ (string-append (if (char-lower-case? (string-ref string 0))\n              \
    \          (string-upcase (string-ref string 0))\n                        (string-downcase\
    \ (string-ref string 0)))\n                     (flip_case (substring string 1\
    \ (string-length string))))))\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphssswfs_.rkt:19:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphssswfs_.rkt:20:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\T\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([ch (in-string string)])\n    (if (char-upper-case?\
    \ ch)\n        (char-downcase ch)\n        (char-upcase ch))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw4kyhio5.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw4kyhio5.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw4kyhio5.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map string (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxfxlx9f.rkt:17:4\n\
    \nmap: contract violation\n  expected: procedure?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxfxlx9f.rkt:18:4\n\
    \nmap: contract violation\n  expected: procedure?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxfxlx9f.rkt:19:4\n\
    \nmap: contract violation\n  expected: procedure?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (\u03BB (ch)\n     (if (char-lower-case?\
    \ ch)\n         (char-upcase ch)\n         (char-downcase ch)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp533ay_tr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp533ay_tr.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map\n    (lambda (char)\n      (cond\n\
    \        [(char-lower-case? char) (char-upcase char)]\n        [(char-upper-case?\
    \ char) (char-downcase char)]\n        [else char]))\n    (string->list string))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtm6f79q.rkt:22:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    h #\\E #\\L #\\L #\\O #\\!)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmtm6f79q.rkt:23:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\t #\\H #\\E\
    \ #\\S #\\E #\\space #\\V #\\I #\\O #\\L #\\E #\\N #\\T #\\space #\\D #\\E #\\\
    L #\\I #\\G #\\H #\\T #\\S #\\space #\\H #\\A #\\V #\\E #\\space #\\V #\\I #\\\
    O #\\L #\\E #\\N #\\T #\\space #\\E #\\N #\\D #\\S)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (character)\n      \
    \                        (cond\n                                [(char-downcase?\
    \ character) (char-upcase character)]\n                                [(char-upcase?\
    \ character) (char-downcase character)]\n                                [else\
    \ character]))\n                            (string->list string))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2m6abic7.rkt:9:34: char-downcase?: unbound identifier\n  in: char-downcase?\n\
    \  location...:\n   /tmp/tmp2m6abic7.rkt:9:34\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append (map (lambda (char)\n                 \
    \       (if (char-lower-case? char)\n                            (char-upcase\
    \ char)\n                            (char-downcase char)))\n                \
    \      string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ch63gdl.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ch63gdl.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ch63gdl.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (cond\n       ((char-lower-case?\
    \ char) (char-upcase char))\n       ((char-upper-case? char) (char-downcase char))\n\
    \       (else char)))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppywqgamr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppywqgamr.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x)\n                (if (char-numeric?\
    \ x)\n                    x\n                    (if (char-upcase? x)\n      \
    \                  (char-downcase x)\n                        (char-upcase x))))\n\
    \              string))\n```\n\n```\n#lang racket\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4slj6jsx.rkt:17:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map char-upcase (regexp-replace* #rx\".\" string (\u03BB\
    \ (str) (if (char-lower-case? (string-ref str 0)) (char-upcase (string-ref str\
    \ 0)) (char-downcase (string-ref str 0)))))))\n```\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpegpo_uav.rkt:11:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join\n   (map\n    (\u03BB (char)\n      (cond\n\
    \        [(char-lower-case? char) (char-upcase char)]\n        [(char-upper-case?\
    \ char) (char-downcase char)]\n        [else (error 'flip_case \"Unexpected character:\
    \ \" char)]))\n    (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwy306m51.rkt:22:4


    error: format string requires 0 arguments, given 1; arguments were: #\!

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpwy306m51.rkt:23:4


    error: format string requires 0 arguments, given 1; arguments were: #\space

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbug1ji1w.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbug1ji1w.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define char-in-range (lambda (char start end)\n     \
    \                     (and (&gt;= char start)\n                              \
    \ (&lt;= char end))))\n  (define (flip-char char)\n    (cond ((char-in-range char\
    \ #\\a #\\z) (- char #\\a #\\A))\n          ((char-in-range char #\\A #\\Z) (+\
    \ char #\\a #\\A))\n          (else char)))\n  (string-&gt;list (apply string\
    \ (map flip-char (string-&gt;list string)))))\n</code>\nI did try using <code>char-upcase</code>\
    \ and <code>char-downcase</code> (is this not correct?):\n<code>#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphlgcjmez.rkt:14:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 15\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns7rdqdi.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpns7rdqdi.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (cond\n       [(char-lower-case?\
    \ c) (char-upcase c)]\n       [(char-upper-case? c) (char-downcase c)]\n     \
    \  [else c]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzjccr2al.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzjccr2al.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([ch (in-string string)])\n    (if (char-alphabetic?\
    \ ch)\n        (if (char-uppercase? ch)\n            (char-downcase ch)\n    \
    \        (char-upcase ch))\n        ch)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp93gw8rf6.rkt:9:13: char-uppercase?: unbound identifier\n  in: char-uppercase?\n\
    \  location...:\n   /tmp/tmp93gw8rf6.rkt:9:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (ch) (if (char-lower-case? ch) (char-upcase\
    \ ch) (char-downcase ch))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp97f4yghz.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp97f4yghz.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (curry string-upcase string-downcase) string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcb5dyt0.rkt:14:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #<procedure:string-downcase>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjcb5dyt0.rkt:15:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #<procedure:string-downcase>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcb5dyt0.rkt:16:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #<procedure:string-downcase>\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3jb0wlco.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3jb0wlco.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3jb0wlco.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([new-string \"\"])\n    (for ([char (in-string string)])\n\
    \      (cond\n        [(char-upcase? char) (string-append new-string (string-downcase\
    \ char))]\n        [(char-lowercase? char) (string-append new-string (string-upcase\
    \ char))]\n        [else (string-append new-string char)]))\n    new-string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_ytnp0c1.rkt:10:10: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp_ytnp0c1.rkt:10:10\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/string ([c (in-string string)])\n    (if (char-upper-case?\
    \ c)\n        (char-downcase c)\n        (char-upcase c))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp598q4xev.rkt:7:3: for/string: unbound identifier\n  in: for/string\n\
    \  location...:\n   /tmp/tmp598q4xev.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string (\u03BB (x) (string-upcase\
    \ x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7lqo093.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7lqo093.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map #(if (char-lower-case? %) (char-upcase %)\
    \ (char-downcase %)) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb8k3g67m.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpb8k3g67m.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (char)\n                (cond\n  \
    \                [(char-lower-case? char) (char-upcase char)]\n              \
    \    [(char-upper-case? char) (char-downcase char)]\n                  [else char]))\n\
    \              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n \
    \   (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgkawq5hd.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgkawq5hd.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip-char ch)\n    (if (char-lower-case? ch)\n\
    \        (char-upcase ch)\n        (char-downcase ch)))\n  (define (flip-chars\
    \ str)\n    (if (empty? str)\n        \"\"\n        (string-append (flip-char\
    \ (first str)) (flip-chars (rest str)))))\n  (flip-chars string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa9zm9qq8.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa9zm9qq8.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa9zm9qq8.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"These\
    \ violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (m) (string-upcase (string-downcase (car m))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplszbj9nr.rkt:16:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"e\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplszbj9nr.rkt:17:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"h\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map #(if (char-lower-case? %) (char-upcase %)\
    \ (char-downcase %)) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnr4h6q20.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpnr4h6q20.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string (\u03BB (s) (string-upcase\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ccdw82b.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4ccdw82b.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (swap-char c)\n    (if (char-upcase? c)\n    \
    \    (char-downcase c)\n        (char-upcase c)))\n  (string-map swap-char string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8n147dcd.rkt:8:9: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp8n147dcd.rkt:8:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (char)\n           \
    \                   (cond ((char-alphabetic? char)\n                         \
    \            (if (char-ci&gt;=? char #\\a)\n                                 \
    \        (char-downcase char)\n                                         (char-upcase\
    \ char)))\n                                    (else char)))\n               \
    \             string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n \
    \   (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7_0558qs.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 15\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (cond [(empty? string) '()]\n        [else (cons (if (char-lower-case?\
    \ (first string))\n                        (char-upcase (first string))\n    \
    \                    (char-downcase (first string)))\n                    (flip_case\
    \ (rest string)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps4qu6kmq.rkt:18:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps4qu6kmq.rkt:19:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4qu6kmq.rkt:20:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"These\
    \ violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-fold (\u03BB (char acc) (string-append acc (if\
    \ (char-lower-case? char) (char-upcase char) (char-downcase char)))) \"\" string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppkuyxf9v.rkt:7:3: string-fold: unbound identifier\n  in: string-fold\n\
    \  location...:\n   /tmp/tmppkuyxf9v.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n```\n\n<br\
    \ />\n\n###### `middle_chars`\n\n###### `#lang racket`\n\n```racket\n#lang racket\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1vygl7g.rkt:12:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (x) (if (char-upper-case? x) (char-downcase\
    \ x) (char-upcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphyjzsayf.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphyjzsayf.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphyjzsayf.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-alphabetic? c)\n   \
    \                           (if (char-lower-case? c)\n                       \
    \           (char-upcase c)\n                                  (char-downcase\
    \ c))\n                              c))\n              string))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpytu92wyq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpytu92wyq.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/string ([x (in-string string)])\n    (match (char-upcase\
    \ x)\n      [(char-upcase x) (char-downcase x)]\n      [(char-downcase x) (char-upcase\
    \ x)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqig9otgj.rkt:7:3: for/string: unbound identifier\n  in: for/string\n\
    \  location...:\n   /tmp/tmpqig9otgj.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (cond ((char-lower-case?\
    \ char) (char-upcase char))\n           ((char-upper-case? char) (char-downcase\
    \ char))\n           (else char)))\n   string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyvf4slme.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpyvf4slme.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (match)\n                     (string-upcase (string-downcase match)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp51rk6891.rkt:17:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp51rk6891.rkt:18:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (x)\n     (if (char-lower-case?\
    \ x)\n         (char-upcase x)\n         (char-downcase x)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppec40i56.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppec40i56.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (match)\n                     (string-upcase (regexp-match-substring\
    \ match 0)))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw12yhnvy.rkt:9:37: regexp-match-substring: unbound identifier\n\
    \  in: regexp-match-substring\n  location...:\n   /tmp/tmpw12yhnvy.rkt:9:37\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4xqxwfiq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4xqxwfiq.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (if (empty? string)\n      empty\n      (string-append\
    \ (if (char-lower-case? (first string))\n                        (string-upcase\
    \ (string (first string)))\n                        (string-downcase (string (first\
    \ string))))\n                    (flip_case (rest string)))))\n```\n\n### Test\
    \ Cases\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp83vgt8lx.rkt:15:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpue6mym0y.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpue6mym0y.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpue6mym0y.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (cond [(string-empty? string) string]\n        [else (let\
    \ ([char (string-ref string 0)])\n                 (string (if (char-alphabetic?\
    \ char)\n                             (char-flip-case char)\n                \
    \             char)\n                         (flip_case (string-drop string 1))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp87qe9scx.rkt:7:10: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp87qe9scx.rkt:7:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip-case-helper string new-string)\n    (if\
    \ (empty? string)\n        new-string\n        (begin\n          (if (or (char-alphabetic?\
    \ (first string)) (char-numeric? (first string)))\n              (if (char-upper-case?\
    \ (first string))\n                  (flip-case-helper (rest string) (string-append\
    \ new-string (string-append (string-downcase (first string)) \"\")))\n       \
    \           (flip-case-helper (rest string) (string-append new-string (string-append\
    \ (string-upcase (first string)) \"\"))))\n              (flip-case-helper (rest\
    \ string) (string-append new-string (string-append (first string) \"\")))))))\n\
    \  (flip-case-helper string \"\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzslqmfxc.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzslqmfxc.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello!\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzslqmfxc.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"These\
    \ violent delights have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjuwt589g.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjuwt589g.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (is_lower char)\n    (and (<= #\\a char) (<= char\
    \ #\\z)))\n  (define (flip_case char)\n    (cond ((is_lower char) (- char #\\\
    a #\\A))\n          (((is_lower (- char #\\a #\\A)) #t) (+ char #\\a #\\A))\n\
    \          (else char)))\n  (apply string-append (map flip_case (string->list\
    \ string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuu81t1v9.rkt:21:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuu81t1v9.rkt:22:4\n\
    \n<=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (x)\n                (if (char-ci&gt;=?\
    \ x #\\a)\n                    (char-upcase x)\n                    (char-downcase\
    \ x)))\n              string))\n</code>\nCan anyone tell me how I can use <code>characterp</code>\
    \ to replace <code>char-ci&gt;=?</code> ?\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkygofrwn.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 12\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-upcase? c)\n\
    \         (char-downcase c)\n         (char-upcase c)))\n   string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuq40ijpv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuq40ijpv.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map\n   (lambda (char)\n     (if (char-lower-case? char)\n\
    \         (char-upcase char)\n         (char-downcase char)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7opstyl2.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7opstyl2.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7opstyl2.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp50xs_92a.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp50xs_92a.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv2lgcxpk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv2lgcxpk.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (character)\n      \
    \                        (if (char-lower-case? character)\n                  \
    \                (char-upcase character)\n                                  (char-downcase\
    \ character)))\n                            string)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp24mojik0.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp24mojik0.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp24mojik0.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (ch)\n     (if (char-alphabetic?\
    \ ch)\n         (if (char-lower-case? ch)\n             (char-upcase ch)\n   \
    \          (char-downcase ch))\n         ch))\n   string))\n\n\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa7_4pbmb.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa7_4pbmb.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n```\n\n```racket\n\
    #lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm9ki9kew.rkt:11:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-translate string \n                    (string-&gt;list\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n                    (string-&gt;list \"abcdefghijklmnopqrstuvwxyz\"\
    )))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpptwlyocd.rkt:9:20: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 11\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" (lambda (match) (string-upcase\
    \ match)) string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyid04x9_.rkt:14:4\n\
    \nregexp-replace*: contract violation\n  expected: (or/c bytes? string?)\n  given:\
    \ #<procedure:...tmp/tmpyid04x9_.rkt:7:30>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyid04x9_.rkt:15:4\n\nregexp-replace*:\
    \ contract violation\n  expected: (or/c bytes? string?)\n  given: #<procedure:...tmp/tmpyid04x9_.rkt:7:30>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyid04x9_.rkt:16:4\n\nregexp-replace*: contract violation\n\
    \  expected: (or/c bytes? string?)\n  given: #<procedure:...tmp/tmpyid04x9_.rkt:7:30>\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([char (in-string string)])\n    (if (char-lower-case?\
    \ char)\n        (char-upcase char)\n        (char-downcase char))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh0omrei.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh0omrei.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh0omrei.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([index 0] [result '()])\n    (if (equal? index\
    \ (string-length string))\n        (list->string (reverse result))\n        (if\
    \ (char-lower-case? (string-ref string index))\n            (loop (+ index 1)\
    \ (cons (char-upcase (string-ref string index)) result))\n            (loop (+\
    \ index 1) (cons (char-lower-case (string-ref string index)) result))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmenqqhuq.rkt:12:37: char-lower-case: unbound identifier\n  in:\
    \ char-lower-case\n  location...:\n   /tmp/tmpmenqqhuq.rkt:12:37\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map char-upcase? string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxe56vzh2.rkt:7:7: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpxe56vzh2.rkt:7:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprdx1wgne.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprdx1wgne.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (cond\n       [(char-lower-case?\
    \ c) (char-upcase c)]\n       [(char-upper-case? c) (char-downcase c)]\n     \
    \  [else c]))\n   string))\n```\n\n- **Challenge 5**: Count the number of lowercase,\
    \ uppercase, and other characters in a string.\n\n```#lang racket\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg794_bpf.rkt:18:3: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpowgd2ah3.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpowgd2ah3.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (regexp-replace* #rx\"[a-z]\" string\n               \
    \    (lambda (s) (string-upcase s))\n                   #:replace-global? #t))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbr1s7o4g.rkt:16:4\n\
    \napplication: procedure does not accept keyword arguments\n  procedure: regexp-replace*\n\
    \  arguments...:\n   #rx\"[a-z]\"\n   \"\"\n   #<procedure:...tmp/tmpbr1s7o4g.rkt:8:19>\n\
    \   #:replace-global? #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbr1s7o4g.rkt:17:4\n\napplication:\
    \ procedure does not accept keyword arguments\n  procedure: regexp-replace*\n\
    \  arguments...:\n   #rx\"[a-z]\"\n   \"Hello!\"\n   #<procedure:...tmp/tmpbr1s7o4g.rkt:8:19>\n\
    \   #:replace-global? #t\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbr1s7o4g.rkt:18:4\n\napplication:\
    \ procedure does not accept keyword arguments\n  procedure: regexp-replace*\n\
    \  arguments...:\n   #rx\"[a-z]\"\n   \"These violent delights have violent ends\"\
    \n   #<procedure:...tmp/tmpbr1s7o4g.rkt:8:19>\n   #:replace-global? #t\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [else c])))\n```\n\n```\n>>> (flip_case \"Hello\"\
    )\n'hELLO'\n```\n\n### is_palindrome\n```racket\n#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8wkpgzcx.rkt:21:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define length (string-length string))\n  (define output\
    \ (make-string length))\n  (for ([i (in-range length)])\n    (if (char-lower-case?\
    \ (string-ref string i))\n        (string-set! output i (char-upcase (string-ref\
    \ string i)))\n        (string-set! output i (char-downcase (string-ref string\
    \ i)))))\n  output)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([result (string-map (lambda (x)\n              \
    \                (if (char-lower-case? x)\n                                  (char-upcase\
    \ x)\n                                  (char-downcase x)))\n                \
    \            string)])\n    result))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3v6pyva6.rkt:7:17: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp3v6pyva6.rkt:7:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-join (map (lambda (char)\n                   \
    \   (if (char-upper-case? char)\n                          (char-downcase char)\n\
    \                          (char-upcase char))) string)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbr1k6id.rkt:17:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbr1k6id.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxbr1k6id.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n```\n\n```#lang racket\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe61obeo1.rkt:14:3: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (c)\n              \
    \                (cond\n                                [(char-downcase? c) (char-upcase\
    \ c)]\n                                [(char-upcase? c) (char-downcase c)]\n\
    \                                [else c]))\n                            (string->list\
    \ string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjh0ep6yj.rkt:9:34: char-downcase?: unbound identifier\n  in: char-downcase?\n\
    \  location...:\n   /tmp/tmpjh0ep6yj.rkt:9:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-append (map (\u03BB (c) (if (char-lower-case?\
    \ c) (char-upcase c) (char-downcase c))) string)))\n```\n\n## Environment Setup\n\
    \nSee [here](../../README.md) for instructions on how to setup an Racket environment\
    \ on your local machine.\n\n## Run Tests\n\n```\nraco test flip-case.rkt\n```\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpas2ss5kz.rkt:10:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ((result (string-new (string-length string))))\n\
    \    (for ([i (in-range (string-length string))])\n      (string-set! result i\n\
    \                   (if (char-alphabetic? (string-ref string i))\n           \
    \            (if (char-upper-case? (string-ref string i))\n                  \
    \         (char-downcase (string-ref string i))\n                           (char-upcase\
    \ (string-ref string i)))\n                       (string-ref string i))))\n \
    \   result))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwmvy5vai.rkt:7:17: string-new: unbound identifier\n  in: string-new\n\
    \  location...:\n   /tmp/tmpwmvy5vai.rkt:7:17\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (if (char-upper-case?\
    \ c)\n        (char-downcase c)\n        (char-upcase c))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzmi3n6o.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzmi3n6o.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzmi3n6o.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ffgyymk.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ffgyymk.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map\n   (lambda (character)\n     (if (char-lower-case?\
    \ character)\n         (char-upcase character)\n         (char-downcase character)))\n\
    \   string))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n  \
    \  (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1znb5ck_.rkt:13:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp1znb5ck_.rkt:13:0\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (or (= c #\\A) (=\
    \ c #\\a))\n         (if (char-ci=? c #\\A) #\\a #\\A)\n         c))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgtoi3ap2.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgtoi3ap2.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (ch)\n                (if (char-lower-case?\
    \ ch)\n                    (char-upcase ch)\n                    (char-downcase\
    \ ch)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnzweav73.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpnzweav73.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2_767_x3.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2_767_x3.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpezy2emnr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpezy2emnr.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x)\n                (cond [(char-lower-case?\
    \ x) (char-upcase x)]\n                      [(char-upper-case? x) (char-downcase\
    \ x)]\n                      [else x]))\n              string))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1tth4gcz.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1tth4gcz.rkt:7:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let loop ([lst (string->list string)]\n             [flipped\
    \ (list)])\n    (if (null? lst)\n        (list->string flipped)\n        (loop\
    \ (cdr lst)\n              (cons (if (char-upcase? (car lst))\n              \
    \          (char-downcase (car lst))\n                        (char-upcase (car\
    \ lst)))\n                    flipped)))))\n```\n\n```racket\n#lang racket\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzmmm8xrr.rkt:19:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (define (flip char)\n    (if (char-numeric? char)\n  \
    \      char\n        (if (char-alphabetic? char)\n            (if (char-lower-case?\
    \ char)\n                (char-upcase char)\n                (char-downcase char))\n\
    \            char)))\n  (string-&gt;list string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd7q47jkp.rkt:15:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 17\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let* ([choices '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\\
    h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\\
    x #\\y #\\z)]\n         [map-table (make-hash)])\n    (for ([i choices])\n   \
    \   (hash-set! map-table i (char-upcase i))\n      (hash-set! map-table (char-upcase\
    \ i) i))\n    (string-map\n     (lambda (c)\n       (hash-ref map-table c #f))\n\
    \     string)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp6cdosit.rkt:12:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp6cdosit.rkt:12:5\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwh9_qw2v.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwh9_qw2v.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbun1yv5g.rkt:15:4

    actual:     "HELLO!"

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbun1yv5g.rkt:16:4

    actual:     "THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map symbol->string\n       (map char-upcase/downcase\n\
    \            (string->list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgy0xjoym.rkt:8:12: char-upcase/downcase: unbound identifier\n \
    \ in: char-upcase/downcase\n  location...:\n   /tmp/tmpgy0xjoym.rkt:8:12\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (list->string (map (\u03BB (c)\n                     \
    \  (if (char-lower-case? c)\n                           (char-upcase c)\n    \
    \                       (char-downcase c)))\n                     (string->list\
    \ string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map char-upcase/downcase string))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpduaiuwn5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpduaiuwn5.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (apply string-append (map (lambda (char) (if (char-lower-case?\
    \ char) (char-upcase char) (char-downcase char))) string)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8z7q29n5.rkt:14:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8z7q29n5.rkt:15:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8z7q29n5.rkt:16:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([x (in-string string)])\n    (if (char-alphabetic?\
    \ x)\n        (if (char-lower-case? x)\n            (char-upcase x)\n        \
    \    (char-downcase x))\n        x)))\n```\n\n```racket\n#lang racket\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt76417w8.rkt:16:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase/ci string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgaqi60mz.rkt:7:3: string-upcase/ci: unbound identifier\n  in: string-upcase/ci\n\
    \  location...:\n   /tmp/tmpgaqi60mz.rkt:7:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (let ([s (string->list string)])\n    (map (\u03BB (x)\
    \ (if (char-numeric? x) x\n                   (if (char-numeric? (char-downcase\
    \ x))\n                       (char-upcase x)\n                       (char-downcase\
    \ x))))\n         s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n \
    \   (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5uyswg_2.rkt:19:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5uyswg_2.rkt:20:4\nactual:\
    \     '(#\\h #\\e #\\l #\\l #\\o #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5uyswg_2.rkt:21:4\n\
    actual:\n  '(#\\t\n  #\\h\n  #\\e\n  #\\s\n  #\\e\n  #\\space\n  #\\v\n  #\\i\n\
    \  #\\o\n  #\\l\n  #\\e\n  #\\n\n  #\\t\n  #\\space\n  #\\d\n  #\\e\n  #\\l\n\
    \  #\\i\n  #\\g\n  #\\h\n  #\\t\n  #\\s\n  #\\space\n  #\\h\n  #\\a\n  #\\v\n\
    \  #\\e\n  #\\space\n  #\\v\n  #\\i\n  #\\o\n  #\\l\n  #\\e\n  #\\n\n  #\\t\n\
    \  #\\space\n  #\\e\n  #\\n\n  #\\d\n  #\\s)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (if (= (string-length string) 0)\n      \"\"\n      (begin\
    \ (if (char-alphabetic? (string-ref string 0))\n               (if (char-lower-case?\
    \ (string-ref string 0))\n                   (make-string 1 (char-upcase (string-ref\
    \ string 0)))\n                   (make-string 1 (char-downcase (string-ref string\
    \ 0))))\n               (string-ref string 0))\n             (flip_case (substring\
    \ string 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent\
    \ delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptzaqc0d_.rkt:22:4

    actual:     ""

    expected:   "hELLO!"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptzaqc0d_.rkt:23:4

    actual:     ""

    expected:   "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm2i6noiz.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpm2i6noiz.rkt:7:3\n"
  stdout: ''
