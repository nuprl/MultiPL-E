name: HumanEval_7_filter_by_substring
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that contain\
  \ given substring\n;; >>> filter_by_substring([], 'a')\n;; []\n;; >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n;; ['abc', 'bacd', 'array']\n(define (filter_by_substring\
  \ strings substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
  \ \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
  xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
  prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (string) (substring? substring string)) strings))\n",
  "  (filter (lambda (str) (string-contains? str substring)) strings))\n", "  (filter\
    \ (lambda (x) (equal? (regexp-match #rx substring x) #t)) strings))\n", "  (match\
    \ strings\n    [(list) '()]\n    [(cons head tail) (if (string-contains head substring)\n\
    \                         (cons head (filter_by_substring tail substring))\n \
    \                        (filter_by_substring tail substring))]))\n", "  (filter\
    \ (lambda (string) (substring? substring string)) strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n```\n\n```racket\n#lang\
    \ racket\n", "  (define (is_substring str)\n    (string-contains? str substring))\n\
    \  (filter is_substring strings))\n", "  (define (match-substring? s)\n    (regexp-match?\
    \ #rx(substring) s))\n  (filter match-substring? strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n", "  (filter (\u03BB\
    \ (str) (substring? str substring)) strings))\n", "  (filter (\u03BB (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (s) (regexp-match? (regexp substring)\
    \ s)) strings))\n", "  (for/list ([string strings])\n    (if (string-contains\
    \ string substring)\n        string)))\n", "  (define (filter-helper strings substring)\n\
    \    (cond [(empty? strings) '()]\n          [(regexp-match? (regexp substring)\
    \ (first strings))\n           (cons (first strings) (filter-helper (rest strings)\
    \ substring))]\n          [else (filter-helper (rest strings) substring)]))\n\
    \  (filter-helper strings substring))\n", "  (for/list ([string strings])\n  \
    \  (if (string-contains string substring)\n        string)))\n```\n\n```racket\n\
    #lang racket\n", "  (filter (lambda (x) (string-contains x substring)) strings))\n",
  "  (filter (lambda (s) (substring? substring s)) strings))\n", "  (filter (lambda\
    \ (string) (contains-substring? string substring)) strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (\u03BB (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (s) (substring? substring s)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (lambda (x)\
    \ (contains-substring? x substring)) strings))\n", "  (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "  (filter (lambda (str) (substring? str substring)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n", "  (filter (\u03BB\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (str) (regexp-match?\
    \ (regexp substring) str)) strings))\n", "  (filter (lambda (string) (contains-substring?\
    \ string substring)) strings))\n", "  (filter (lambda (s) (contains? s substring))\
    \ strings))\n", "  (filter (lambda (string) (string-contains string substring))\
    \ strings))\n", "  (filter (lambda (s) (regexp-match #rx(substring) s)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (filter (\u03BB (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (string) (substring? substring\
    \ string)) strings))\n", "  (filter (\u03BB (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (s) (string-contains s substring)) strings))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (\u03BB\
    \ (a) (andmap string-contains? a substring)) strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (lambda (s)\
    \ (string-contains s substring)) strings))\n", "  (filter (lambda (s) (contains?\
    \ s substring)) strings))\n```\n\n```racket\n#lang racket\n", "  (filter (lambda\
    \ (s) (substring? substring s)) strings))\n", "  (filter (lambda (x) (regexp-match\
    \ substring x)) strings))\n", "  (filter (lambda (string) (regexp-match #rx substring\
    \ string)) strings))\n", "  (filter (\u03BB (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (s) (not (empty? (regexp-match substring s))))\
    \ strings))\n", "  (filter (lambda (string) (substring? substring string)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (define (filter\
    \ items)\n    (cond\n      [(empty? items) empty]\n      [(string-contains (first\
    \ items) substring)\n       (cons (first items) (filter (rest items)))]\n    \
    \  [else (filter (rest items))]))\n  (filter strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n```\n\n```python\n# Python\n\
    \ndef filter_by_substring(strings, substring):\n    return [str for str in strings\
    \ if substring in str]\n```\n\n```typescript\n// TypeScript\n\nfunction filterBySubstring(strings:\
    \ string[], substring: string): string[] {\n    return strings.filter(str => str.includes(substring));\n\
    }\n```\n\n### 5.3.9\n\n```racket\n#lang racket\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (string) (string-contains substring\
    \ string)) strings))\n", "  (filter (\u03BB (str) (string-contains? str substring))\
    \ strings))\n```\n\n## Using Units\n\n```racket\n#lang racket\n", "  (filter (lambda\
    \ (x) (member substring x)) strings))\n", "  (filter (lambda (str) (string-contains\
    \ str substring)) strings))\n", "  (filter (lambda (string) (string-contains string\
    \ substring)) strings))\n", "  (filter (lambda (s) (regexp-match? (regexp (string-append\
    \ \".*\" substring \".*\")) s)) strings))\n```\n\n```racket\n#lang racket\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (string) (substring? substring string)) strings))\n", "  (define (contains?\
    \ str substr)\n    (not (eq? (string-index str substr) #f)))\n  (filter (lambda\
    \ (str) (contains? str substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (filter (\u03BB (string) (string-contains string substring))\
    \ strings))\n", "  (filter (\u03BB (s) (string-contains s substring)) strings))\n",
  "  (cond [(empty? strings) '()]\n        [(string-contains (first strings) substring)\n\
    \         (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \        [else (filter_by_substring (rest strings) substring)]))\n", "  (filter\
    \ (lambda (string) (substring? substring string)) strings))\n", "  (define (is_in-string?\
    \ str)\n    (string-contains? str substring))\n  (filter is_in-string? strings))\n\
    ```\n## 04. Function composition\n\n```racket\n#lang racket\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (cond [(empty? strings)\
    \ '()]\n        [(string-contains? (first strings) substring)\n         (cons\
    \ (first strings) (filter_by_substring (rest strings) substring))]\n        [else\
    \ (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda (s)\
    \ (string-contains s substring)) strings))\n```\n\n## More Examples\n\n[test/test-examples.rkt](test/test-examples.rkt)",
  "  (cond\n    [(empty? strings) empty]\n    [(string-contains? (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (cond\n    [(equal?\
    \ (first strings) #f) '()]\n    [(string-contains (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (cond\n  \
    \  [(empty? strings) empty]\n    [(contains_substring? (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (s) (contains s substring)) strings))\n", "  (cond\n    [(empty? strings) empty]\n\
    \    [(string-contains (first strings) substring)\n     (cons (first strings)\
    \ (filter_by_substring (rest strings) substring))]\n    [else (filter_by_substring\
    \ (rest strings) substring)]))\n", "  (filter (lambda (string) (contains? string\
    \ substring)) strings))\n", "  (filter (lambda (el) (string-contains el substring))\
    \ strings))\n", "  (filter (lambda (s) (regexp-match? (regexp (string-append \"\
    .*\" substring \".*\")) s)) strings))\n", "  (filter (lambda (string) (string-contains\
    \ string substring)) strings))\n", "  (filter (lambda (str) (contains? str substring))\
    \ strings))\n```\n\n# Python\n\n```python\n#!/usr/bin/env python\n\n# Filter an\
    \ input list of strings only for ones that contain given substring\n# >>> filter_by_substring([],\
    \ 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    # ['abc', 'bacd', 'array']\ndef filter_by_substring(strings, substring):\n  return\
    \ filter(lambda str: substring in str, strings)\n```\n\n# SQL\n\n```sql\n-- Filter\
    \ a table of strings only for rows that contain given substring\n-- >>> select\
    \ * from filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a');\n-- abc\n\
    -- bacd\n-- array\ncreate or replace function filter_by_substring(strings text[],\
    \ substring text)\nreturns text[]\nas $$\n  select string\n  from strings\n  where\
    \ substring in string;\n$$ language sql;\n```\n\n# Haskell\n\n```haskell\n-- Filter\
    \ an input list of strings only for ones that contain given substring\n-- >>>\
    \ filter_by_substring [] 'a'\n-- []\n-- >>> filter_by_substring ['abc', 'bacd',\
    \ 'cde', 'array'] 'a'\n-- ['abc', 'bacd', 'array']\nfilter_by_substring :: [String]\
    \ -> String -> [String]\nfilter_by_substring strings substring = filter (\\str\
    \ -> substring `elem` str) strings\n```\n\n# C++\n\n```cpp\n#include <string>\n\
    #include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Filter an\
    \ input list of strings only for ones that contain given substring\n// >>> filter_by_substring({},\
    \ 'a')\n// {}\n// >>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"\
    }, 'a')\n// {\"abc\", \"bacd\", \"array\"}\nvector<string> filter_", "  (filter\
    \ (\u03BB (x) (string-contains x substring)) strings))\n", "  (define (f s)\n\
    \    (string-contains s substring))\n  (filter f strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (define (is_substring str)\n\
    \    (regexp-match? (rx (~any substring)) str))\n  (filter is_substring strings))\n",
  '  (filter (lambda (string) (regexp-match? (regexp substring) string)) strings))',
  "  (for/list ([str strings])\n    (if (contains-substring? str substring)\n    \
    \    str)))\n", "  (filter (\u03BB (str) (string-contains str substring)) strings))\n",
  "  (cond [(null? strings) '()]\n        [(string-contains? (car strings) substring)\n\
    \         (cons (car strings) (filter_by_substring (cdr strings) substring))]\n\
    \        [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter\
    \ (lambda (el) (string-contains el substring)) strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (lambda (string)\
    \ (and (string-contains string substring) #t)) strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n```\n\n```racket\n#lang racket\n",
  "  (for/list ([s strings] #:when (regexp-match? (regexp substring) s))\n    s))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (\u03BB\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (define (match? string)\n    (regexp-match (regexp\
    \ substring) string))\n  (filter match? strings))\n", "  (filter (lambda (x) (contains\
    \ x substring)) strings))\n", "  (filter (\u03BB (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (s) (string-contains s substring)) strings))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (lambda\
    \ (s) (substring? substring s)) strings))\n", "  (if (empty? strings)\n      '()\n\
    \      (if (contains_substring? (first strings) substring)\n          (cons (first\
    \ strings) (filter_by_substring (rest strings) substring))\n          (filter_by_substring\
    \ (rest strings) substring))))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (define (iter remaining result)\n    (cond [(empty? remaining)\
    \ result]\n          [(string-contains? (first remaining) substring)\n       \
    \    (iter (rest remaining) (append result (list (first remaining))))]\n     \
    \     [else (iter (rest remaining) result)]))\n  (iter strings '()))\n\n", " \
    \ (filter (lambda (x) (search substring x)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (for/list ([str strings])\n\
    \    (when (string-contains str substring)\n      str)))\n", "  (cond [(null?\
    \ strings) (quote ())]\n        [(string-contains? (car strings) substring) (cons\
    \ (car strings) (filter_by_substring (cdr strings) substring))]\n        [else\
    \ (filter_by_substring (cdr strings) substring)]))\n", "  (filter (\u03BB (word)\
    \ (contains? word substring)) strings))\n", "  (filter (lambda (s) (andmap (lambda\
    \ (c) (equal? c substring)) s)) strings))\n", "  (filter (lambda (string) (member\
    \ substring string)) strings))\n", "  (filter (lambda (x) (contains x substring))\
    \ strings))\n", "  (filter (lambda (x) (substring? substring x)) strings))\n",
  "  (filter (lambda (word) (string-contains word substring)) strings))\n", "  (if\
    \ (empty? strings)\n      '()\n      (if (string-contains? (first strings) substring)\n\
    \          (cons (first strings) (filter_by_substring (rest strings) substring))\n\
    \          (filter_by_substring (rest strings) substring))))\n", "  (filter (lambda\
    \ (string) (member substring string)) strings))\n", "  (filter (lambda (s) (substring?\
    \ substring s)) strings))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (string) (string-contains string substring))\
    \ strings))\n", "  (filter (\u03BB (s) (regexp-match? (regexp substring) s)) strings))\n",
  "  (filter (\u03BB (s) (substring? substring s)) strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (\u03BB (string) (string-contains string\
    \ substring)) strings))\n", "  (define (filtered-strings! s lst)\n    (if (empty?\
    \ lst) '()\n        (if (string-contains? s (first lst))\n            (cons (first\
    \ lst) (filtered-strings! s (rest lst)))\n            (filtered-strings! s (rest\
    \ lst)))))\n  (filtered-strings! substring strings))\n", "  (filter (lambda (x)\
    \ (string-contains x substring)) strings))\n", "  (filter (lambda (str) (contains?\
    \ str substring)) strings))\n", "  (filter (lambda (string) (string-contains string\
    \ substring)) strings))\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "  (define (contains-substring? string)\n    (regexp-match (string-append\
    \ \".*\" substring \".*\") string))\n  (filter contains-substring? strings))\n",
  "  (filter (lambda (elem) (string-contains elem substring)) strings))\n```\n\n```racket\n\
    #lang racket\n", "  (filter (\u03BB (str) (string-contains str substring)) strings))\n",
  "  (for/list ([string strings])\n    (when (regexp-match (regexp (string-append\
    \ \".*\" substring \".*\")) string)\n      string)))\n", "  (filter (lambda (s)\
    \ (string-contains s substring)) strings))\n", "  (filter (lambda (string) (contains?\
    \ string substring)) strings))\n", "  (filter (\u03BB (str) (str-contains str\
    \ substring)) strings))\n", "  (filter (lambda (s) (substring? substring s)) strings))\n",
  "  (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (cond\n    [(empty? strings) '()]\n    [(substring-search? (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (string) (contains? string substring)) strings))\n", "  (if (empty? strings)\n\
    \      '()\n      (if (string-contains (first strings) substring)\n          (cons\
    \ (first strings) (filter_by_substring (rest strings) substring))\n          (filter_by_substring\
    \ (rest strings) substring))))\n", "  (filter (lambda (x) (contains? x substring))\
    \ strings))\n", "  (filter (lambda (str) (regexp-match? (regexp substring) str))\
    \ strings))\n", "  (filter (lambda (str) (string-contains? str substring)) strings))\n",
  "  (if (null? strings)\n      strings\n      (if (string-contains (car strings)\
    \ substring)\n          (cons (car strings) (filter_by_substring (cdr strings)\
    \ substring))\n          (filter_by_substring (cdr strings) substring))))\n",
  "  (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter\
    \ (\u03BB (s) (string-contains? s substring)) strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (str) (string-contains str substring))\
    \ strings))\n```\n\n### New Feature: Adding characters to a string\n\nAdding a\
    \ new character to a string is simple enough, but the `string-append` doesn't\
    \ add a character, it only adds strings. So, you will need to change your function\
    \ to add the character in an \"intermediate string\" that it builds into a final\
    \ string.\n\n```racket\n#lang racket\n", "  (filter (lambda (string) (regexp-match?\
    \ (regexp (string-append \".*\" substring \".*\")) string)) strings))\n", "  (filter\
    \ (\u03BB (string) (string-contains string substring)) strings))\n```\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(null? strings) '()]\n    [(string-contains? (car\
    \ strings) substring)\n     (cons (car strings) (filter_by_substring (cdr strings)\
    \ substring))]\n    [else (filter_by_substring (cdr strings) substring)]))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n```\n\nFrom-scratch\
    \ implementations of the standard library's `array-map` and `array-filter` functions.\n\
    \n```racket\n#lang racket\n", "  (filter (\u03BB (string) (string-contains string\
    \ substring)) strings))\n", "  (filter (lambda (s) (contains? s substring)) strings))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (s) (string-contains?\
    \ s substring)) strings))\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "  (filter (lambda (str) (string-contains str substring)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (define (contains_substring?\
    \ string)\n    (and (not (empty? string))\n         (or (equal? (first string)\
    \ substring)\n             (contains_substring? (rest string)))))\n  (cond ((empty?\
    \ strings) empty)\n        ((contains_substring? (first strings))\n         (cons\
    \ (first strings) (filter_by_substring (rest strings) substring)))\n        (else\
    \ (filter_by_substring (rest strings) substring))))\n", "  (filter (lambda (s)\
    \ (regexp-match substring s)) strings))\n", "  (if (null? strings)\n      '()\n\
    \      (let ((str (car strings)))\n        (if (string-contains str substring)\n\
    \            (cons str (filter_by_substring (cdr strings) substring))\n      \
    \      (filter_by_substring (cdr strings) substring)))))\n```\n\n```racket\n#lang\
    \ racket\n", '  (filter (lambda (str) (string-contains? str substring)) strings))',
  "  (cond [(string? strings) (if (string-contains strings substring)\n          \
    \                     strings\n                               '())]\n        [(and\
    \ (list? strings) (not (empty? strings)))\n         (append (filter_by_substring\
    \ (car strings) substring)\n                 (filter_by_substring (cdr strings)\
    \ substring))]\n        [else '()]))\n", "  (cond\n    [(empty? strings) empty]\n\
    \    [(contains? (first strings) substring)\n     (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]\n    [else (filter_by_substring (rest strings) substring)]))\n",
  "  (filter (\u03BB (str) (andmap (\u03BB (char) (equal? (string-contains str char)\
    \ #t)) substring)) strings))\n", "  (filter (\u03BB (s) (contains? s substring))\
    \ strings))\n", "  (filter (lambda (s) (substring? substring s)) strings))\n",
  "  (filter (\u03BB (string) (string-contains string substring)) strings))\n", " \
    \ (filter (lambda (string) (not (string-contains string substring))) strings))\n",
  "  (cond [(null? strings) '()]\n        [(string-contains (car strings) substring)\n\
    \         (cons (car strings) (filter_by_substring (cdr strings) substring))]\n\
    \        [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter\
    \ (\u03BB (string) (regexp-match? (regexp substring) string)) strings))\n", " \
    \ (cond [(empty? strings) '()]\n        [(string-contains? (first strings) substring)\n\
    \         (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \        [else (filter_by_substring (rest strings) substring)]))\n```\n\n```racket\n\
    #lang racket\n", "  (filter (\u03BB (s) (substring? substring s)) strings))\n\
    ```\n\n```racket\n#lang racket\n", "  (filter (lambda (s) (substring? substring\
    \ s)) strings))\n", "  (define (filter_by_substring-iter remaining-strings matching-strings)\n\
    \    (cond\n      [(empty? remaining-strings) matching-strings]\n      [(string-contains?\
    \ (first remaining-strings) substring)\n       (filter_by_substring-iter (rest\
    \ remaining-strings)\n                                 (append matching-strings\n\
    \                                         (list (first remaining-strings))))]\n\
    \      [else (filter_by_substring-iter (rest remaining-strings) matching-strings)]))\n\
    \  (filter_by_substring-iter strings '()))\n", "  (filter (\u03BB (s) (string-contains\
    \ s substring)) strings))\n```\n\n## Plain Text (`#lang plain-text`)\n\nPlain\
    \ text files are supported and usable.\n\n## Standard Libraries\n\nThese libraries\
    \ are automatically imported into any `#lang` unless specifically excluded.\n\n\
    * `racket/base`\n* `racket/math`\n* `racket/list`\n* `racket/string`\n* `racket/file`\n\
    * `racket/date`\n* `racket/cmdline`\n* `racket/match`\n* `racket/place`\n* `racket/generic`\n\
    * `racket/contract`\n* `racket/unsafe/ops`\n* `racket/unsafe/extflonum`\n* `racket/unsafe/inline`\n\
    * `racket/unsafe/misc`\n* `racket/unsafe/struct`\n* `racket/unsafe/unit`\n* `racket/unsafe/unsafe-include`\n\
    * `racket/unsafe/unsafe-struct`\n* `racket/unsafe/unsafe-struct-define`\n* `racket/unsafe/unsafe-vector`\n\
    * `racket/unsafe/unsafe-vector-define`\n* `racket/unsafe/vector`\n* `racket/unsafe/vector-define`\n\
    * `racket/unsafe/vector-lib`\n* `racket/unsafe/vector-ref`\n* `racket/unsafe/vector-set!`\n\
    * `racket/unsafe/with-syntax`\n* `racket/unsafe/with-syntax*`\n* `racket/unsafe/wrapped-include`\n\
    * `racket/unsafe/wrapped-struct`\n* `racket/unsafe/wrapped-struct-define`\n* `racket/unsafe/wrapped-vector`\n\
    * `racket/unsafe/wrapped-vector-define`\n* `racket/unsafe/wrapped-vector-lib`\n\
    * `racket/unsafe/wrapped-vector-ref`\n* `racket/unsafe/wra", "  (define (contains-substring?\
    \ string substring)\n    (and (not (empty? string))\n         (or (equal? substring\
    \ (take (length substring) string))\n             (contains-substring? (drop 1\
    \ string) substring))))\n  (filter (\u03BB (s) (contains-substring? s substring))\
    \ strings))\n", "  (filter (lambda (x) (string-contains x substring)) strings))\n",
  "  (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (filter (\u03BB (string) (string-contains string substring)) strings))\n", " \
    \ (filter (lambda (s) (regexp-match substring s)) strings))\n", "  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
