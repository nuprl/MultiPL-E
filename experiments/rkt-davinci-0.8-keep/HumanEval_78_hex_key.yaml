name: HumanEval_78_hex_key
language: rkt
prompt: "#lang racket\n\n;; You have been tasked to write a function that receives\
  \ \n;; a hexadecimal number as a string and counts the number of hexadecimal \n\
  ;; digits that are primes (prime number, or a prime, is a natural number \n;; greater\
  \ than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal\
  \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume\
  \ the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are\
  \ always uppercase.\n;; Examples:\n;; For num = \"AB\" the output should be 1.\n\
  ;; For num = \"1077E\" the output should be 2.\n;; For num = \"ABED1A33\" the output\
  \ should be 4.\n;; For num = \"123456789ABCDEF0\" the output should be 6.\n;; For\
  \ num = \"2020\" the output should be 2.\n(define (hex_key num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hex_key))\n\
  \    (check-equal? (candidate \"AB\") 1)\n    (check-equal? (candidate \"1077E\"\
  ) 2)\n    (check-equal? (candidate \"ABED1A33\") 4)\n    (check-equal? (candidate\
  \ \"2020\") 2)\n    (check-equal? (candidate \"123456789ABCDEF0\") 6)\n    (check-equal?\
  \ (candidate \"112233445566778899AABBCCDDEEFF00\") 12)\n))\n\n(test-humaneval)"
completions: ["  (cond ((equal? num \"A\") 10)\n        ((equal? num \"B\") 11)\n\
    \        ((equal? num \"C\") 12)\n        ((equal? num \"D\") 13)\n        ((equal?\
    \ num \"E\") 14)\n        ((equal? num \"F\") 15)\n        (else (string->number\
    \ num))))\n", "  (cond\n    [(equal? num #\\A) 10]\n    [(equal? num #\\B) 11]\n\
    \    [(equal? num #\\C) 12]\n    [(equal? num #\\D) 13]\n    [(equal? num #\\\
    E) 14]\n    [(equal? num #\\F) 15]\n    [else (- (char->integer num) (char->integer\
    \ #\\0))]))\n", "  (let ((hex-syms '(2 3 5 7 11 13)))\n    (cond\n      [(equal?\
    \ num \"\") 0]\n      [(member (string->number (string-downcase num) 16) hex-syms)\
    \ 1]\n      [else (hex_key (substring num 1))])))\n", "  (cond\n    ((string=?\
    \ num \"A\") 11)\n    ((string=? num \"B\") 12)\n    ((string=? num \"C\") 13)\n\
    \    ((string=? num \"D\") 14)\n    ((string=? num \"E\") 15)\n    ((string=?\
    \ num \"F\") 16)\n    (else (string->number num))))\n", "  (cond\n    [(= num\
    \ 'A) 10]\n    [(= num 'B) 11]\n    [(= num 'C) 12]\n    [(= num 'D) 13]\n   \
    \ [(= num 'E) 14]\n    [(= num 'F) 15]\n    [else (string->number (string num))]))\n",
  "  (cond\n    [(equal? num \"A\") 11]\n    [(equal? num \"B\") 12]\n    [(equal?\
    \ num \"C\") 13]\n    [(equal? num \"D\") 14]\n    [(equal? num \"E\") 15]\n \
    \   [(equal? num \"F\") 16]\n    [else (string->number num)]))\n", "  (match num\n\
    \    ('\"AB\" 1)\n    ('\"1077E\" 2)\n    ('\"ABED1A33\" 4)\n    ('\"123456789ABCDEF0\"\
    \ 6)\n    ('\"2020\" 2)))\n", "  (cond ((equal? num \"0\") 0)\n        ((equal?\
    \ num \"1\") 1)\n        ((equal? num \"2\") 2)\n        ((equal? num \"3\") 3)\n\
    \        ((equal? num \"4\") 4)\n        ((equal? num \"5\") 5)\n        ((equal?\
    \ num \"6\") 6)\n        ((equal? num \"7\") 7)\n        ((equal? num \"8\") 8)\n\
    \        ((equal? num \"9\") 9)\n        ((equal? num \"A\") 10)\n        ((equal?\
    \ num \"B\") 11)\n        ((equal? num \"C\") 12)\n        ((equal? num \"D\"\
    ) 13)\n        ((equal? num \"E\") 14)\n        ((equal? num \"F\") 15)))\n",
  "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (list->vector\
    \ (string->list num)))\n", "  (cond ((= num #\\0) 0)\n        ((= num #\\1) 1)\n\
    \        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n        ((= num #\\4) 4)\n\
    \        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n        ((= num #\\7) 7)\n\
    \        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n        ((= num #\\A) 10)\n\
    \        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n        ((= num #\\D) 13)\n\
    \        ((= num #\\E) 14)\n        ((= num #\\F) 15)))\n", "  (if (= num #\\\
    0)\n      0\n      (if (= num #\\1)\n          1\n          (if (= num #\\2)\n\
    \              2\n              (if (= num #\\3)\n                  3\n      \
    \            (if (= num #\\4)\n                      4\n                     \
    \ (if (= num #\\5)\n                          5\n                          (if\
    \ (= num #\\6)\n                              6\n                            \
    \  (if (= num #\\7)\n                                  7\n                   \
    \               (if (= num #\\8)\n                                      8\n  \
    \                                    (if (= num #\\9)\n                      \
    \                    9\n                                          (if (= num #\\\
    A)\n                                              10\n                       \
    \                       (if (= num #\\B)\n                                   \
    \               11\n                                                  (if (= num\
    \ #\\C)\n                                                      12\n          \
    \                                            (if (= num #\\D)\n              \
    \                                            13\n                            \
    \                              (if (= num #\\E)\n                            \
    \                                  14\n                                      \
    \                        (if (= num #\\F)\n                                  \
    \                                15\n                                        \
    \                          #f)))))))))))))))))))", "  (cond ((>= num 0)  (+ num\
    \ 48))\n        ((= num 10)  65)\n        ((= num 11)  66)\n        ((= num 12)\
    \  67)\n        ((= num 13)  68)\n        ((= num 14)  69)\n        ((= num 15)\
    \  70)))", "  (cond ((string=? num \"A\") 11)\n        ((string=? num \"B\") 12)\n\
    \        ((string=? num \"C\") 13)\n        ((string=? num \"D\") 14)\n      \
    \  ((string=? num \"E\") 15)\n        ((string=? num \"F\") 16)\n        (else\
    \ num)))\n", "  (cond\n    [(equal? num \"2\") 2]\n    [(equal? num \"3\") 3]\n\
    \    [(equal? num \"5\") 5]\n    [(equal? num \"7\") 7]\n    [(equal? num \"B\"\
    ) 11]\n    [(equal? num \"D\") 13]\n    [else 0]))\n", "    (cond [(equal? num\
    \ '0) 0]\n          [(equal? num '1) 1]\n          [(equal? num '2) 2]\n     \
    \     [(equal? num '3) 3]\n          [(equal? num '4) 4]\n          [(equal? num\
    \ '5) 5]\n          [(equal? num '6) 6]\n          [(equal? num '7) 7]\n     \
    \     [(equal? num '8) 8]\n          [(equal? num '9) 9]\n          [(equal? num\
    \ 'A) 10]\n          [(equal? num 'B) 11]\n          [(equal? num 'C) 12]\n  \
    \        [(equal? num 'D) 13]\n          [(equal? num 'E) 14]\n          [(equal?\
    \ num 'F) 15]\n          ))\n", "  (cond [(string=? num \"A\") 10]\n        [(string=?\
    \ num \"B\") 11]\n        [(string=? num \"C\") 12]\n        [(string=? num \"\
    D\") 13]\n        [(string=? num \"E\") 14]\n        [(string=? num \"F\") 15]\n\
    \        [else (string-&gt;number num)]))\n", "  (case num\n    ['0 0]\n    ['1\
    \ 1]\n    ['2 2]\n    ['3 3]\n    ['4 4]\n    ['5 5]\n    ['6 6]\n    ['7 7]\n\
    \    ['8 8]\n    ['9 9]\n    ['A 10]\n    ['B 11]\n    ['C 12]\n    ['D 13]\n\
    \    ['E 14]\n    ['F 15]))\n", "  (match num\n    [(: \"A\" \"B\" \"C\" \"D\"\
    \ \"E\" \"F\") \"hex\"]\n    [_ \"dec\"]))\n", "  (let ((numbers (string->list\
    \ num)))\n    (count (lambda (number) (or (member number '(2 3 5 7 11 13)) false))\
    \ numbers)))", "  (let \n    ([ord (string->number num 16)])\n    (if (member\
    \ ord '(2 3 5 7 11 13))\n      1\n      0)))\n", "  (if (or (= num #\\2) (= num\
    \ #\\3) (= num #\\5) (= num #\\7)\n          (= num #\\B) (= num #\\D))\n    \
    \  1\n      0))\n", "  (cond\n    [(equal? num \"0\") 0]\n    [(equal? num \"\
    1\") 1]\n    [(equal? num \"2\") 2]\n    [(equal? num \"3\") 3]\n    [(equal?\
    \ num \"4\") 4]\n    [(equal? num \"5\") 5]\n    [(equal? num \"6\") 6]\n    [(equal?\
    \ num \"7\") 7]\n    [(equal? num \"8\") 8]\n    [(equal? num \"9\") 9]\n    [(equal?\
    \ num \"A\") 10]\n    [(equal? num \"B\") 11]\n    [(equal? num \"C\") 12]\n \
    \   [(equal? num \"D\") 13]\n    [(equal? num \"E\") 14]\n    [(equal? num \"\
    F\") 15]\n    [(equal? num \"\") 0]\n    [else (error \"Unknown input\")]))\n",
  "  (cond\n    [(= num #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n   \
    \ [(= num #\\3) 3]\n    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\\
    6) 6]\n    [(= num #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(=\
    \ num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\\
    D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else -1]))\n", "  (cond\n\
    \    ((equal? (string-length num) 1) (string->number (string-append \"#x\" num)))\n\
    \    (else (string->number (string-append \"#x\" (substring num 0 1))))))\n",
  "  (if (= num #\\A)\n      10\n      (if (= num #\\B)\n          11\n          (if\
    \ (= num #\\C)\n              12\n              (if (= num #\\D)\n           \
    \       13\n                  (if (= num #\\E)\n                      14\n   \
    \                   (if (= num #\\F)\n                          15\n         \
    \                 0)))))))\n", "  (define (compare-to-hex-digit char)\n    (cond\
    \ ((eq? char #\\2) #t)\n          ((eq? char #\\3) #t)\n          ((eq? char #\\\
    5) #t)\n          ((eq? char #\\7) #t)\n          ((eq? char #\\B) #t)\n     \
    \     ((eq? char #\\D) #t)\n          (else #f)))\n  (define (loop chars n)\n\
    \    (if (null? chars)\n        n\n        (if (compare-to-hex-digit (car chars))\n\
    \            (loop (cdr chars) (+ n 1))\n            (loop (cdr chars) n))))\n\
    \  (loop (string->list num) 0))\n", "  (char->integer (string-ref num 0)))\n",
  "  (cond\n    ((= num 10) 'A)\n    ((= num 11) 'B)\n    ((= num 12) 'C)\n    ((=\
    \ num 13) 'D)\n    ((= num 14) 'E)\n    ((= num 15) 'F)\n    (else num)))\n",
  "  (if (zero? num)\n      \"\"\n      (if (= num 1)\n          \"1\"\n         \
    \ (hex_key (- num 1)))))\n", "  (cond\n    [(= num #\\0) 0]\n    [(= num #\\1)\
    \ 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n    [(= num #\\4) 4]\n    [(=\
    \ num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num #\\7) 7]\n    [(= num #\\8)\
    \ 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n   \
    \ [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(= num\
    \ #\\F) 15]\n    [else #f]))\n", "  (cond ((= num #\\0) 0)\n        ((= num #\\\
    1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n        ((= num #\\\
    4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n        ((= num #\\\
    7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n        ((= num #\\\
    A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n        ((= num\
    \ #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))\n", "  (cond\n\
    \    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (cond\n\
    \    [(= num #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num\
    \ #\\3) 3]\n    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n\
    \    [(= num #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num\
    \ #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n\
    \    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else 0]))\n", "  (cond\n \
    \   [(> num '9')\n     (cond\n       [(eq? num 'A') '10]\n       [(eq? num 'B')\
    \ '11]\n       [(eq? num 'C') '12]\n       [(eq? num 'D') '13]\n       [(eq? num\
    \ 'E') '14]\n       [(eq? num 'F') '15])]\n    [else num]))\n", "  (cond\n   \
    \ [(string=? num \"0\") 0]\n    [(string=? num \"1\") 1]\n    [(string=? num \"\
    2\") 2]\n    [(string=? num \"3\") 3]\n    [(string=? num \"4\") 4]\n    [(string=?\
    \ num \"5\") 5]\n    [(string=? num \"6\") 6]\n    [(string=? num \"7\") 7]\n\
    \    [(string=? num \"8\") 8]\n    [(string=? num \"9\") 9]\n    [(string=? num\
    \ \"A\") 10]\n    [(string=? num \"B\") 11]\n    [(string=? num \"C\") 12]\n \
    \   [(string=? num \"D\") 13]\n    [(string=? num \"E\") 14]\n    [(string=? num\
    \ \"F\") 15]\n    [else \"??\"]))\n", "  (cond [(= num 0) 0]\n        [(= num\
    \ 1) 1]\n        [(= num 2) 2]\n        [(= num 3) 3]\n        [(= num 4) 4]\n\
    \        [(= num 5) 5]\n        [(= num 6) 6]\n        [(= num 7) 7]\n       \
    \ [(= num 8) 8]\n        [(= num 9) 9]\n        [(= num 10) 11]\n        [(= num\
    \ 11) 13]\n        [(= num 12) 17]\n        [(= num 13) 19]\n        [(= num 14)\
    \ 23]\n        [(= num 15) 29]))\n", "  (cond\n    [(empty? num) 0]\n    [(member\
    \ (string->number (substring num 0 1) 16) (list 2 3 5 7 11 13))\n     (+ 1 (hex_key\
    \ (substring num 1)))]\n    [else (hex_key (substring num 1))]))\n", "  (define\
    \ (remove-chars st chars)\n    (string-filter (\u03BB (c) (not (member c chars)))\
    \ st))\n  (define (hex_key_helper s)\n    (cond ((empty? s) empty)\n         \
    \ ((eq? (string-ref s 0) #\\2) (cons (string-ref s 0) (hex_key_helper (rest s))))\n\
    \          ((eq? (string-ref s 0) #\\3) (cons (string-ref s 0) (hex_key_helper\
    \ (rest s))))\n          ((eq? (string-ref s 0) #\\5) (cons (string-ref s 0) (hex_key_helper\
    \ (rest s))))\n          ((eq? (string-ref s 0) #\\7) (cons (string-ref s 0) (hex_key_helper\
    \ (rest s))))\n          ((eq? (string-ref s 0) #\\B) (cons (string-ref s 0) (hex_key_helper\
    \ (rest s))))\n          ((eq? (string-ref s 0) #\\D) (cons (string-ref s 0) (hex_key_helper\
    \ (rest s))))\n          (else (hex_key_helper (rest s)))))\n  (length (remove-chars\
    \ (hex_key_helper num) '())))", "  (cond\n    [(or (= num \"2\") (= num \"3\"\
    ) (= num \"5\") (= num \"7\") (= num \"B\") (= num \"D\")) 1]\n    [else 0]))\n",
  "  (if (string=? num \"\")\n      0\n      (if (string=? num \"2\")\n          1\n\
    \          (if (string=? num \"3\")\n              1\n              (if (string=?\
    \ num \"5\")\n                  1\n                  (if (string=? num \"7\")\n\
    \                      1\n                      (if (string=? num \"B\")\n   \
    \                       1\n                          (if (string=? num \"D\")\n\
    \                              1\n                              0)))))))))\n",
  "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (cond\
    \ [(= num #\\0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n     \
    \   [(= num #\\3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n   \
    \     [(= num #\\6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n \
    \       [(= num #\\9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n\
    \        [(= num #\\C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n\
    \        [(= num #\\F) 15]\n        [(= num #\\G) 16]\n        [(= num #\\H) 17]\n\
    \        [(= num #\\I) 18]\n        [(= num #\\J) 19]\n        [(= num #\\K) 20]\n\
    \        [(= num #\\L) 21]\n        [(= num #\\M) 22]\n        [(= num #\\N) 23]\n\
    \        [(= num #\\O) 24]\n        [(= num #\\P) 25]\n        [(= num #\\Q) 26]\n\
    \        [(= num #\\R) 27]\n        [(= num #\\S) 28]\n        [(= num #\\T) 29]\n\
    \        [(= num #\\U) 30]\n        [(= num #\\V) 31]\n        [(= num #\\W) 32]\n\
    \        [(= num #\\X) 33]\n        [(= num #\\Y) 34]\n        [(= num #\\Z) 35]))",
  "  (if (symbol=? (string-ref num 0) '0)\n      #f\n      (let ([t (string->number\
    \ num 16)])\n        (cond [(member t '(1)) #f]\n              [(even? t) #f]\n\
    \              [(member t '(3 5 7 11 13)) #t]\n              [(even? (remainder\
    \ t 2)) #f]\n              [(member (remainder t 5) '(0 3)) #f]\n            \
    \  [(member (remainder t 7) '(1 2 3 6)) #f]\n              [(member (remainder\
    \ t 11) '(0 2 3 4 5 6 7 8 9 10)) #f]\n              [(member (remainder t 13)\
    \ '(0 1 3 4 5 6 7 8 9 10 11 12)) #f]\n              [else #t])))))\n", "  (cond\n\
    \    [(empty? num) empty]\n    [(number? (string->number (string-append \"0x\"\
    \ (substring num 0 1))))\n     (cons (string->number (string-append \"0x\" (substring\
    \ num 0 1)))\n           (hex_key (substring num 1)))]\n    [else (hex_key (substring\
    \ num 1))]))\n", "  (cond\n    [(equal? num \"A\") 10]\n    [(equal? num \"B\"\
    ) 11]\n    [(equal? num \"C\") 12]\n    [(equal? num \"D\") 13]\n    [(equal?\
    \ num \"E\") 14]\n    [(equal? num \"F\") 15]\n    [else (string->number num)]))\n",
  "  (cond\n    [(= num #\\0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n   \
    \ [(= num #\\3) 3]\n    [(= num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\\
    6) 6]\n    [(= num #\\7) 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(=\
    \ num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\\
    D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else 0]))\n", "  (if\
    \ (member num '(#\\A #\\B #\\C #\\D #\\E #\\F))\n      (+ 10 (char->integer (char-downcase\
    \ num)))\n      (char->integer num)))\n", "  (cond ((= num #\\0) 0)\n        ((=\
    \ num #\\1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n        ((=\
    \ num #\\4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n        ((=\
    \ num #\\7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n        ((=\
    \ num #\\A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n      \
    \  ((= num #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))",
  "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (cond\
    \ [(= num #\\0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n     \
    \   [(= num #\\3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n   \
    \     [(= num #\\6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n \
    \       [(= num #\\9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n\
    \        [(= num #\\C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n\
    \        [(= num #\\F) 15]\n        [else 0]))\n", "  (let ([num (string->number\
    \ num 16)])\n    (cond [(= num 2) 2]\n          [(= num 3) 3]\n          [(= num\
    \ 5) 5]\n          [(= num 7) 7]\n          [(= num 11) 11]\n          [(= num\
    \ 13) 13]\n          [else num])))\n", "  (cond [(string=? num \"0\") 0]\n   \
    \     [(string=? num \"1\") 1]\n        [(string=? num \"2\") 2]\n        [(string=?\
    \ num \"3\") 3]\n        [(string=? num \"4\") 4]\n        [(string=? num \"5\"\
    ) 5]\n        [(string=? num \"6\") 6]\n        [(string=? num \"7\") 7]\n   \
    \     [(string=? num \"8\") 8]\n        [(string=? num \"9\") 9]\n        [(string=?\
    \ num \"A\") 10]\n        [(string=? num \"B\") 11]\n        [(string=? num \"\
    C\") 12]\n        [(string=? num \"D\") 13]\n        [(string=? num \"E\") 14]\n\
    \        [(string=? num \"F\") 15]\n        [(string=? num \"10\") 16]\n     \
    \   [(string=? num \"11\") 17]\n        [(string=? num \"12\") 18]\n        [(string=?\
    \ num \"13\") 19]\n        [(string=? num \"14\") 20]\n        [(string=? num\
    \ \"15\") 21]\n        [(string=? num \"16\") 22]\n        [(string=? num \"17\"\
    ) 23]\n        [(string=? num \"18\") 24]\n        [(string=? num \"19\") 25]\n\
    \        [(string=? num \"1A\") 26]\n        [(string=? num \"1B\") 27]\n    \
    \    [(string=? num \"1C\") 28]\n        [(string=? num \"1D\") 29]\n        [(string=?\
    \ num \"1E\") 30]\n        [(string=? num \"1F\") 31]\n        [(string=? num\
    \ \"20\") 32]\n        [(string=? num \"21\") 33]\n        [(string=? num \"22\"\
    ) 34]\n        [(string=? num \"23\") 35]\n        [(string=? num \"24\") 36]\n\
    \        [(string=? num \"25\") 37]\n        [(string=? num \"26\") 38]\n    \
    \    [(string=? num \"27\") 39]\n        [(string=? num \"28\") 40]\n        [(string=?\
    \ num \"29\") 41]", "  (cond [(string=? \"A\" num) 10]\n        [(string=? \"\
    B\" num) 11]\n        [(string=? \"C\" num) 12]\n        [(string=? \"D\" num)\
    \ 13]\n        [(string=? \"E\" num) 14]\n        [(string=? \"F\" num) 15]\n\
    \        [else (string-&gt;number num)]))\n", "  (cond\n    [(member? num '(0\
    \ 1 2 3 4 5 6 7 8 9)) num]\n    [(equal? num \"A\") 10]\n    [(equal? num \"B\"\
    ) 11]\n    [(equal? num \"C\") 12]\n    [(equal? num \"D\") 13]\n    [(equal?\
    \ num \"E\") 14]\n    [(equal? num \"F\") 15]\n    [else -1]))\n", "  (cond\n\
    \    [(string=? \"A\" num) 11]\n    [(string=? \"B\" num) 12]\n    [(string=?\
    \ \"C\" num) 13]\n    [(string=? \"D\" num) 14]\n    [(string=? \"E\" num) 15]\n\
    \    [(string=? \"F\" num) 16]\n    [else (string->number num)]))\n", "  (cond\n\
    \    [(eq? (string-length num) 1) (string->number (string num) 16)]\n    [else\
    \ (number->string (string->number (string-append \"0x\" num) 16))]))\n", "  (cond\n\
    \    [(equal? num \"0\") (exact->inexact 0)]\n    [(equal? num \"1\") (exact->inexact\
    \ 1)]\n    [(equal? num \"2\") (exact->inexact 2)]\n    [(equal? num \"3\") (exact->inexact\
    \ 3)]\n    [(equal? num \"4\") (exact->inexact 4)]\n    [(equal? num \"5\") (exact->inexact\
    \ 5)]\n    [(equal? num \"6\") (exact->inexact 6)]\n    [(equal? num \"7\") (exact->inexact\
    \ 7)]\n    [(equal? num \"8\") (exact->inexact 8)]\n    [(equal? num \"9\") (exact->inexact\
    \ 9)]\n    [(equal? num \"A\") (exact->inexact 10)]\n    [(equal? num \"B\") (exact->inexact\
    \ 11)]\n    [(equal? num \"C\") (exact->inexact 12)]\n    [(equal? num \"D\")\
    \ (exact->inexact 13)]\n    [(equal? num \"E\") (exact->inexact 14)]\n    [(equal?\
    \ num \"F\") (exact->inexact 15)]\n    [(equal? num \"G\") (exact->inexact 16)]\n\
    \    [(equal? num \"H\") (exact->inexact 17)]\n    [(equal? num \"I\") (exact->inexact\
    \ 18)]\n    [(equal? num \"J\") (exact->inexact 19)]\n    [(equal? num \"K\")\
    \ (exact->inexact 20)]\n    [(equal? num \"L\") (exact->inexact 21)]\n    [(equal?\
    \ num \"M\") (exact->inexact 22)]\n    [(equal? num \"N\") (exact->inexact 23)]\n\
    \    [(equal? num \"O\") (exact->inexact 24)]\n    [(equal? num \"P\") (exact->inexact\
    \ 25)]\n    [(equal? num \"Q\") (exact->inexact 26)]\n    [(equal? num \"R\")\
    \ (exact->inexact 27)]\n    [(equal", "  (cond [(or (= num #\\0) (= num #\\1)\
    \ (= num #\\2) (= num #\\3) (= num #\\4) (= num #\\5)\n             (= num #\\\
    6) (= num #\\7) (= num #\\8) (= num #\\9))\n         (string->number (string num))]\n\
    \        [(or (= num #\\A) (= num #\\B) (= num #\\C) (= num #\\D) (= num #\\E)\
    \ (= num #\\F))\n         (string->number (string num))]\n        [else\n    \
    \     (error \"not a hexadecimal character\")]))\n", "  (list->string (list->vector\
    \ (map string->number (string->list num)))))\n", "  (match num\n    ['() #f]\n\
    \    [('#\\0 . r) (hex_key r)]\n    [('#\\1 . r) (hex_key r)]\n    [('#\\2 . r)\
    \ (hex_key r)]\n    [('#\\3 . r) (hex_key r)]\n    [('#\\4 . r) (hex_key r)]\n\
    \    [('#\\5 . r) (hex_key r)]\n    [('#\\6 . r) (hex_key r)]\n    [('#\\7 . r)\
    \ (hex_key r)]\n    [('#\\8 . r) (hex_key r)]\n    [('#\\9 . r) (hex_key r)]\n\
    \    [('#\\A . r) (hex_key r)]\n    [('#\\B . r) (hex_key r)]\n    [('#\\C . r)\
    \ (hex_key r)]\n    [('#\\D . r) (hex_key r)]\n    [('#\\E . r) (hex_key r)]\n\
    \    [('#\\F . r) (hex_key r)]\n    [else (hex_key (cdr num))]))\n", "  (cond\
    \ ((= num #\\0) 0)\n        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n     \
    \   ((= num #\\3) 3)\n        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n   \
    \     ((= num #\\6) 6)\n        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n \
    \       ((= num #\\9) 9)\n        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n\
    \        ((= num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n\
    \        ((= num #\\F) 15)))", "  (cond\n    ((string=? num \"0\") 0)\n    ((string=?\
    \ num \"1\") 1)\n    ((string=? num \"2\") 2)\n    ((string=? num \"3\") 3)\n\
    \    ((string=? num \"4\") 4)\n    ((string=? num \"5\") 5)\n    ((string=? num\
    \ \"6\") 6)\n    ((string=? num \"7\") 7)\n    ((string=? num \"8\") 8)\n    ((string=?\
    \ num \"9\") 9)\n    ((string=? num \"A\") 10)\n    ((string=? num \"B\") 11)\n\
    \    ((string=? num \"C\") 12)\n    ((string=? num \"D\") 13)\n    ((string=?\
    \ num \"E\") 14)\n    ((string=? num \"F\") 15)\n    (else (error \"What is that?!!\"\
    ))))\n", "  (hash '() (map (lambda (x) (hash-set! x 'is-prime true)) \n      \
    \           '(3 5 7 11 13))))", "  (cond [(string=? num \"A\") 11]\n        [(string=?\
    \ num \"B\") 12]\n        [(string=? num \"C\") 13]\n        [(string=? num \"\
    D\") 14]\n        [(string=? num \"E\") 15]\n        [(string=? num \"F\") 16]\n\
    \        [else (string->number num)]))", "  (cond\n    ((equal? num \"0\") 0)\n\
    \    ((equal? num \"1\") 1)\n    ((equal? num \"2\") 2)\n    ((equal? num \"3\"\
    ) 3)\n    ((equal? num \"4\") 4)\n    ((equal? num \"5\") 5)\n    ((equal? num\
    \ \"6\") 6)\n    ((equal? num \"7\") 7)\n    ((equal? num \"8\") 8)\n    ((equal?\
    \ num \"9\") 9)\n    ((equal? num \"A\") 10)\n    ((equal? num \"B\") 11)\n  \
    \  ((equal? num \"C\") 12)\n    ((equal? num \"D\") 13)\n    ((equal? num \"E\"\
    ) 14)\n    ((equal? num \"F\") 15)\n    ((equal? num \"\")  0)\n    (else    \
    \         0)))", "  (cond [(string=? num \"0\") 0]\n        [(string=? num \"\
    1\") 1]\n        [(string=? num \"2\") 2]\n        [(string=? num \"3\") 3]\n\
    \        [(string=? num \"4\") 4]\n        [(string=? num \"5\") 5]\n        [(string=?\
    \ num \"6\") 6]\n        [(string=? num \"7\") 7]\n        [(string=? num \"8\"\
    ) 8]\n        [(string=? num \"9\") 9]\n        [(string=? num \"A\") 10]\n  \
    \      [(string=? num \"B\") 11]\n        [(string=? num \"C\") 12]\n        [(string=?\
    \ num \"D\") 13]\n        [(string=? num \"E\") 14]\n        [(string=? num \"\
    F\") 15]\n        [(string=? num \"10\") 16]\n        [(string=? num \"11\") 17]\n\
    \        [(string=? num \"12\") 18]\n        [(string=? num \"13\") 19]\n    \
    \    [(string=? num \"14\") 20]\n        [(string=? num \"15\") 21]\n        [(string=?\
    \ num \"16\") 22]\n        [(string=? num \"17\") 23]\n        [(string=? num\
    \ \"18\") 24]\n        [(string=? num \"19\") 25]\n        [(string=? num \"1A\"\
    ) 26]\n        [(string=? num \"1B\") 27]\n        [(string=? num \"1C\") 28]\n\
    \        [(string=? num \"1D\") 29]\n        [(string=? num \"1E\") 30]\n    \
    \    [(string=? num \"1F\") 31]\n        [(string=? num \"20\") 32]\n        [(string=?\
    \ num \"21\") 33]\n        [(string=? num \"22\") 34]\n        [(string=? num\
    \ \"23\") 35]\n        [(string=? num \"24\") 36]\n        [(string=? num \"25\"\
    ) 37]\n        [(string=? num \"26\") 38]\n        [(string=? num \"27\") 39]\n\
    \        [(string=? num \"28\") 40]\n        [(string=? num \"29\") 41]", "  (cond\n\
    \    [(eq? num #\\A) 10]\n    [(eq? num #\\B) 11]\n    [(eq? num #\\C) 12]\n \
    \   [(eq? num #\\D) 13]\n    [(eq? num #\\E) 14]\n    [(eq? num #\\F) 15]\n  \
    \  [else (string->number (string num))]))\n", "  (match num\n    ['0 (list 0 '0)]\n\
    \    ['1 (list 1 '1)]\n    ['2 (list 2 '2)]\n    ['3 (list 3 '3)]\n    ['4 (list\
    \ 4 '4)]\n    ['5 (list 5 '5)]\n    ['6 (list 6 '6)]\n    ['7 (list 7 '7)]\n \
    \   ['8 (list 8 '8)]\n    ['9 (list 9 '9)]\n    ['A (list 10 'a)]\n    ['B (list\
    \ 11 'b)]\n    ['C (list 12 'c)]\n    ['D (list 13 'd)]\n    ['E (list 14 'e)]\n\
    \    ['F (list 15 'f)]\n    [_  'else]))", "  (cond\n    [(string=? \"0\" num)\
    \ 0]\n    [(string=? \"1\" num) 1]\n    [(string=? \"2\" num) 2]\n    [(string=?\
    \ \"3\" num) 3]\n    [(string=? \"4\" num) 4]\n    [(string=? \"5\" num) 5]\n\
    \    [(string=? \"6\" num) 6]\n    [(string=? \"7\" num) 7]\n    [(string=? \"\
    8\" num) 8]\n    [(string=? \"9\" num) 9]\n    [(string=? \"A\" num) 10]\n   \
    \ [(string=? \"B\" num) 11]\n    [(string=? \"C\" num) 12]\n    [(string=? \"\
    D\" num) 13]\n    [(string=? \"E\" num) 14]\n    [(string=? \"F\" num) 15]\n \
    \   [else -1]))\n", "  (cond ((equal? num \"2\") '2)\n        ((equal? num \"\
    3\") '3)\n        ((equal? num \"5\") '5)\n        ((equal? num \"7\") '7)\n \
    \       ((equal? num \"B\") '11)\n        ((equal? num \"D\") '13)\n        (else\
    \ 1)))\n", "  (hash-table 'equal (list (list \"0\" 0)\n                      \
    \     (list \"1\" 1)\n                           (list \"2\" 2)\n            \
    \               (list \"3\" 3)\n                           (list \"4\" 4)\n  \
    \                         (list \"5\" 5)\n                           (list \"\
    6\" 6)\n                           (list \"7\" 7)\n                          \
    \ (list \"8\" 8)\n                           (list \"9\" 9)\n                \
    \           (list \"A\" 10)\n                           (list \"B\" 11)\n    \
    \                       (list \"C\" 12)\n                           (list \"D\"\
    \ 13)\n                           (list \"E\" 14)\n                          \
    \ (list \"F\" 15))))\n", "  (cond [(string=? num \"\") \"\"]\n        [(string=?\
    \ num \"0\") \"0\"]\n        [(string=? num \"1\") \"1\"]\n        [(string=?\
    \ num \"2\") \"2\"]\n        [(string=? num \"3\") \"3\"]\n        [(string=?\
    \ num \"4\") \"4\"]\n        [(string=? num \"5\") \"5\"]\n        [(string=?\
    \ num \"6\") \"6\"]\n        [(string=? num \"7\") \"7\"]\n        [(string=?\
    \ num \"8\") \"8\"]\n        [(string=? num \"9\") \"9\"]\n        [(string=?\
    \ num \"A\") \"10\"]\n        [(string=? num \"B\") \"11\"]\n        [(string=?\
    \ num \"C\") \"12\"]\n        [(string=? num \"D\") \"13\"]\n        [(string=?\
    \ num \"E\") \"14\"]\n        [(string=? num \"F\") \"15\"]\n        [else \"\
    0\"]))\n", "  (cond ((string=? num \"0\") 0)\n        ((string=? num \"1\") 1)\n\
    \        ((string=? num \"2\") 2)\n        ((string=? num \"3\") 3)\n        ((string=?\
    \ num \"4\") 4)\n        ((string=? num \"5\") 5)\n        ((string=? num \"6\"\
    ) 6)\n        ((string=? num \"7\") 7)\n        ((string=? num \"8\") 8)\n   \
    \     ((string=? num \"9\") 9)\n        ((string=? num \"A\") 10)\n        ((string=?\
    \ num \"B\") 11)\n        ((string=? num \"C\") 12)\n        ((string=? num \"\
    D\") 13)\n        ((string=? num \"E\") 14)\n        ((string=? num \"F\") 15)))\n",
  "  (cond\n    ((equal? num \"A\")  11)\n    ((equal? num \"B\")  12)\n    ((equal?\
    \ num \"C\")  13)\n    ((equal? num \"D\")  14)\n    ((equal? num \"E\")  15)\n\
    \    ((equal? num \"F\")  16)\n    (else (string->number num 10))))\n", "  (define\
    \ (is-prime n)\n    (let loop ((i 2))\n      (if (= i n) #t\n          (if (=\
    \ (remainder n i) 0) #f\n              (loop (+ i 1))))))\n  (define (char->num\
    \ c)\n    (cond\n      ((string=? c \"0\") 0)\n      ((string=? c \"1\") 1)\n\
    \      ((string=? c \"2\") 2)\n      ((string=? c \"3\") 3)\n      ((string=?\
    \ c \"4\") 4)\n      ((string=? c \"5\") 5)\n      ((string=? c \"6\") 6)\n  \
    \    ((string=? c \"7\") 7)\n      ((string=? c \"8\") 8)\n      ((string=? c\
    \ \"9\") 9)\n      ((string=? c \"A\") 10)\n      ((string=? c \"B\") 11)\n  \
    \    ((string=? c \"C\") 12)\n      ((string=? c \"D\") 13)\n      ((string=?\
    \ c \"E\") 14)\n      ((string=? c \"F\") 15)))\n  (let loop ((n (string->list\
    \ num)) (count 0))\n    (if (null? n) count\n        (let ((current (car n)))\n\
    \          (if (is-prime (char->num current))\n              (loop (cdr n) (+\
    \ count 1))\n              (loop (cdr n) count))))))", "  (if (string=? \"0\"\
    \ num)\n      0\n      (if (string=? \"1\" num)\n          1\n          (if (string=?\
    \ \"2\" num)\n              2\n              (if (string=? \"3\" num)\n      \
    \            3\n                  (if (string=? \"4\" num)\n                 \
    \     4\n                      (if (string=? \"5\" num)\n                    \
    \      5\n                          (if (string=? \"6\" num)\n               \
    \               6\n                              (if (string=? \"7\" num)\n  \
    \                                7\n                                  (if (string=?\
    \ \"8\" num)\n                                      8\n                      \
    \                (if (string=? \"9\" num)\n                                  \
    \        9\n                                          (if (string=? \"A\" num)\n\
    \                                              10\n                          \
    \                    (if (string=? \"B\" num)\n                              \
    \                    11\n                                                  (if\
    \ (string=? \"C\" num)\n                                                     \
    \ 12\n                                                      (if (string=? \"D\"\
    \ num)\n                                                          13\n       \
    \                                                   (if (string=? \"E\" num)\n\
    \                                                              14\n          \
    \                                                    (if (string=? \"F\" num)\n\
    \                                                                  15\n      \
    \                                                            #f))))))))))))))))))",
  "  (cond ((string=? num \"0\") 0)\n        ((string=? num \"1\") 1)\n        ((string=?\
    \ num \"2\") 2)\n        ((string=? num \"3\") 3)\n        ((string=? num \"4\"\
    ) 4)\n        ((string=? num \"5\") 5)\n        ((string=? num \"6\") 6)\n   \
    \     ((string=? num \"7\") 7)\n        ((string=? num \"8\") 8)\n        ((string=?\
    \ num \"9\") 9)\n        ((string=? num \"A\") 10)\n        ((string=? num \"\
    B\") 11)\n        ((string=? num \"C\") 12)\n        ((string=? num \"D\") 13)\n\
    \        ((string=? num \"E\") 14)\n        ((string=? num \"F\") 15)))\n", " \
    \ (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (cond\n\
    \    ((= num 0) 0)\n    ((= num 1) 0)\n    ((= num 2) 1)\n    ((= num 3) 1)\n\
    \    ((= num 4) 0)\n    ((= num 5) 1)\n    ((= num 6) 0)\n    ((= num 7) 1)\n\
    \    ((= num 8) 0)\n    ((= num 9) 0)\n    ((= num 10) 0)\n    ((= num 11) 1)\n\
    \    ((= num 12) 0)\n    ((= num 13) 1)\n    ((= num 14) 0)\n    ((= num 15) 0)\n\
    \    ((= num 16) 0)\n    (else 0)))\n", "  (cond\n    [(= 0 (modulo num 10)) 'zero]\n\
    \    [(= 1 (modulo num 10)) 'one]\n    [(= 2 (modulo num 10)) 'two]\n    [(= 3\
    \ (modulo num 10)) 'three]\n    [(= 4 (modulo num 10)) 'four]\n    [(= 5 (modulo\
    \ num 10)) 'five]\n    [(= 6 (modulo num 10)) 'six]\n    [(= 7 (modulo num 10))\
    \ 'seven]\n    [(= 8 (modulo num 10)) 'eight]\n    [(= 9 (modulo num 10)) 'nine]\n\
    \    [(= 10 (modulo num 10)) 'A]\n    [(= 11 (modulo num 10)) 'B]\n    [(= 12\
    \ (modulo num 10)) 'C]\n    [(= 13 (modulo num 10)) 'D]\n    [(= 14 (modulo num\
    \ 10)) 'E]\n    [(= 15 (modulo num 10)) 'F]\n    [else 0]))\n", "  (define (helper\
    \ num n i)\n    (cond\n      [(= i n) #t]\n      [(= (mod num (expt 16 i)) 0)\
    \ #f]\n      [else (helper num n (+ i 1))]))\n  (define (helper2 i)\n    (cond\n\
    \      [(> i 15) #f]\n      [(= i 2) #t]\n      [(= i 3) #t]\n      [(= i 5) #t]\n\
    \      [(= i 7) #t]\n      [(= i 11) #t]\n      [(= i 13) #t]\n      [else (helper2\
    \ (+ i 1))]))\n  (cond\n    [(empty? num) 0]\n    [(char-&gt;integer (string-&gt;number\
    \ (string (first num)) 16)) #t]\n    [(helper (char-&gt;integer (string-&gt;number\
    \ (string (first num)) 16)) (sqrt (char-&gt;integer (string-&gt;number (string\
    \ (first num)) 16))) 1) (helper2 (char-&gt;integer (string-&gt;number (string\
    \ (first num)) 16))) 1]\n    [else (+ (helper2 (char-&gt;integer (string-&gt;number\
    \ (string (first num)) 16))) (hex_key (rest num)))]))", "  (cond\n    [(string=?\
    \ num \"A\") #\\a]\n    [(string=? num \"B\") #\\b]\n    [(string=? num \"C\"\
    ) #\\c]\n    [(string=? num \"D\") #\\d]\n    [(string=? num \"E\") #\\e]\n  \
    \  [(string=? num \"F\") #\\f]\n    [else (string->number num)]))\n", "  (cond\
    \ ((equal? num \"0\") 0)\n        ((equal? num \"1\") 1)\n        ((equal? num\
    \ \"2\") 2)\n        ((equal? num \"3\") 3)\n        ((equal? num \"4\") 4)\n\
    \        ((equal? num \"5\") 5)\n        ((equal? num \"6\") 6)\n        ((equal?\
    \ num \"7\") 7)\n        ((equal? num \"8\") 8)\n        ((equal? num \"9\") 9)\n\
    \        ((equal? num \"A\") 10)\n        ((equal? num \"B\") 11)\n        ((equal?\
    \ num \"C\") 12)\n        ((equal? num \"D\") 13)\n        ((equal? num \"E\"\
    ) 14)\n        ((equal? num \"F\") 15)))\n", "  (cond ((= num #\\0) 0)\n     \
    \   ((= num #\\1) 1)\n        ((= num #\\2) 2)\n        ((= num #\\3) 3)\n   \
    \     ((= num #\\4) 4)\n        ((= num #\\5) 5)\n        ((= num #\\6) 6)\n \
    \       ((= num #\\7) 7)\n        ((= num #\\8) 8)\n        ((= num #\\9) 9)\n\
    \        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n        ((= num #\\C) 12)\n\
    \        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n        ((= num #\\F) 15)))",
  "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (let*\n\
    \      ([lst (string->list num)]\n       [hex-lst '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\\
    5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F)]\n       [hex-num-lst (range\
    \ 1 16)])\n    (for/fold ([sum 0]) ([i (in-list lst)])\n      (let*\n        \
    \  ([index (index-of i hex-lst)]\n           [index-num (if (number? index) index\
    \ 0)])\n        (if (= (prime? index-num) #t)\n            (+ sum 1)\n       \
    \     sum)))))", "  (let* ([digits (string->list num)]\n         [hex-digits (map\
    \ (\u03BB (x) (string->number (list->string x) 16)) digits)]\n         [primes\
    \ (for/list ([i (in-range 2 16)])\n                    (if (prime? i) i 0))])\n\
    \    (count (\u03BB (x) (= (list-ref primes x) x)) hex-digits)))\n", "  (cond\
    \ [(= num #\\0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n     \
    \   [(= num #\\3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n   \
    \     [(= num #\\6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n \
    \       [(= num #\\9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n\
    \        [(= num #\\C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n\
    \        [(= num #\\F) 15]\n        [else -1]))\n", "  (cond\n    [(string=? num\
    \ \"2\") #t]\n    [(string=? num \"3\") #t]\n    [(string=? num \"5\") #t]\n \
    \   [(string=? num \"7\") #t]\n    [(string=? num \"B\") #t]\n    [(string=? num\
    \ \"D\") #t]\n    [else #f]))\n", "  (cond ((string=? num \"A\") 11)\n       \
    \ ((string=? num \"B\") 12)\n        ((string=? num \"C\") 13)\n        ((string=?\
    \ num \"D\") 14)\n        ((string=? num \"E\") 15)\n        ((string=? num \"\
    F\") 16)\n        (else (string->number num))))\n", "  (cond\n    [(= num #\\\
    0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n    [(=\
    \ num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num #\\7)\
    \ 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n    [(=\
    \ num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\\
    E) 14]\n    [(= num #\\F) 15]\n    [else \"error\"]))\n", "  (cond\n    ((> num\
    \ 9) (+ 10 num))\n    (else num)))\n", "  (cond\n    [(string=? num \"\")\n  \
    \   (display \"Input is empty\")]\n    [(string=? num \"A\")\n     (display \"\
    10\")]\n    [(string=? num \"B\")\n     (display \"11\")]\n    [(string=? num\
    \ \"C\")\n     (display \"12\")]\n    [(string=? num \"D\")\n     (display \"\
    13\")]\n    [(string=? num \"E\")\n     (display \"14\")]\n    [(string=? num\
    \ \"F\")\n     (display \"15\")]\n    [else\n     (display num)]))\n", "  (cond\n\
    \    [(equal? num \"A\") 11]\n    [(equal? num \"B\") 12]\n    [(equal? num \"\
    C\") 13]\n    [(equal? num \"D\") 14]\n    [(equal? num \"E\") 15]\n    [(equal?\
    \ num \"F\") 16]\n    [else (string->number num)]))\n", "  (cond\n    [(string=?\
    \ num \"0\") 0]\n    [(string=? num \"1\") 1]\n    [(string=? num \"2\") 2]\n\
    \    [(string=? num \"3\") 3]\n    [(string=? num \"4\") 4]\n    [(string=? num\
    \ \"5\") 5]\n    [(string=? num \"6\") 6]\n    [(string=? num \"7\") 7]\n    [(string=?\
    \ num \"8\") 8]\n    [(string=? num \"9\") 9]\n    [(string=? num \"A\") 10]\n\
    \    [(string=? num \"B\") 11]\n    [(string=? num \"C\") 12]\n    [(string=?\
    \ num \"D\") 13]\n    [(string=? num \"E\") 14]\n    [(string=? num \"F\") 15]\n\
    \    [else -1]))\n", "  (define (hex-string? s)\n    (regexp-match #rx\"^[0-9A-F]+$\"\
    \ s))\n  (define (upper? s)\n    (regexp-match #rx\"^[A-Z]+$\" s))\n  (define\
    \ (possible-primes? num)\n    (regexp-match #rx\"^[2357BD]+$\" num))\n  (define\
    \ (prime? n)\n    (cond ((< n 3) (= n 2))\n          ((and (even? n) (= n 2))\
    \ #t)\n          ((and (even? n) (> n 2)) #f)\n          (else\n           (define\
    \ (iter i n)\n             (cond ((< n (* i i)) #t)\n                   ((= 0\
    \ (modulo n i)) #f)\n                   (else (iter (+ i 2) n))))\n          \
    \ (iter 3 n))))\n  (define (count-n-numbers s n)\n    (cond ((null? s) 0)\n  \
    \        ((= (string-length s) 1) (if (= n (string->number (string s) 16)) 1 0))\n\
    \          (else\n           (+ (if (= n (string->number (string (car s)) 16))\
    \ 1 0)\n              (count-n-numbers (cdr s) n)))))\n  (define (count-n-numbers-for-hex-string\
    \ s)\n    (cond ((null? s) 0)\n          ((= (string-length s) 1)\n          \
    \ (if (prime? (string->number (string s) 16)) 1 0))\n          (else\n       \
    \    (+ (if (prime? (string->number (string (car s)) 16)) 1 0)\n             \
    \ (count-n-numbers-for-hex-string (cdr s))))))\n  (define (count-primes-in-hex-string\
    \ s)\n    (cond ((not (hex-string? s)) 0)\n          ((not (upper? s)) 0)\n  \
    \        ((not (possible-primes? s)) 0)\n          (else (count-n-numbers-for-hex-string\
    \ s))))\n  (count-primes-in-hex-string num))", "  (if (string=? num \"\")\n  \
    \    0\n      (if (member (string-ref num 0) '(#\\2 #\\3 #\\5 #\\7 #\\B #\\D))\n\
    \          (+ 1 (hex_key (substring num 1)))\n          (hex_key (substring num\
    \ 1)))))\n", "  (cond\n    [(equal? num \"0\") 0]\n    [(equal? num \"1\") 1]\n\
    \    [(equal? num \"2\") 2]\n    [(equal? num \"3\") 3]\n    [(equal? num \"4\"\
    ) 4]\n    [(equal? num \"5\") 5]\n    [(equal? num \"6\") 6]\n    [(equal? num\
    \ \"7\") 7]\n    [(equal? num \"8\") 8]\n    [(equal? num \"9\") 9]\n    [(equal?\
    \ num \"A\") 10]\n    [(equal? num \"B\") 11]\n    [(equal? num \"C\") 12]\n \
    \   [(equal? num \"D\") 13]\n    [(equal? num \"E\") 14]\n    [(equal? num \"\
    F\") 15]\n    [else 'Uknown]))", "  (cond\n    [(= num 0) \"0\"]\n    [(= num\
    \ 1) \"1\"]\n    [(= num 2) \"2\"]\n    [(= num 3) \"3\"]\n    [(= num 4) \"4\"\
    ]\n    [(= num 5) \"5\"]\n    [(= num 6) \"6\"]\n    [(= num 7) \"7\"]\n    [(=\
    \ num 8) \"8\"]\n    [(= num 9) \"9\"]\n    [(= num 10) \"A\"]\n    [(= num 11)\
    \ \"B\"]\n    [(= num 12) \"C\"]\n    [(= num 13) \"D\"]\n    [(= num 14) \"E\"\
    ]\n    [(= num 15) \"F\"]\n    [else \"\"]))\n", "  (cond [(equal? num \"0\")\
    \ 0]\n        [(equal? num \"1\") 1]\n        [(equal? num \"2\") 2]\n       \
    \ [(equal? num \"3\") 3]\n        [(equal? num \"4\") 4]\n        [(equal? num\
    \ \"5\") 5]\n        [(equal? num \"6\") 6]\n        [(equal? num \"7\") 7]\n\
    \        [(equal? num \"8\") 8]\n        [(equal? num \"9\") 9]\n        [(equal?\
    \ num \"A\") 10]\n        [(equal? num \"B\") 11]\n        [(equal? num \"C\"\
    ) 12]\n        [(equal? num \"D\") 13]\n        [(equal? num \"E\") 14]\n    \
    \    [(equal? num \"F\") 15]))\n", "  (cond [(= num #\\0) 0]\n        [(= num\
    \ #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\3) 3]\n        [(= num\
    \ #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\6) 6]\n        [(= num\
    \ #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\9) 9]\n        [(= num\
    \ #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n        [(=\
    \ num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]\n      \
    \  [else (error \"Invalid hex digit\")]))", "  (define digits '(#\\0 #\\1 #\\\
    2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9 #\\A #\\B #\\C #\\D #\\E #\\F))\n  (define\
    \ primes '(2 3 5 7 11 13 17))\n  (define-struct hex-num (digits) #:transparent)\n\
    \  (define-struct hex-digit (digit) #:transparent)\n  (define hexes (make-list\
    \ 16 hex-num))\n  (define (count-primes hex-string)\n    (define (count-digits\
    \ hexes)\n      (cond [(empty? hexes) 0]\n            [(member (hex-num-digits\
    \ (first hexes)) primes) (+ 1 (count-digits (rest hexes)))]\n            [else\
    \ (count-digits (rest hexes))]))\n    (count-digits (parse-hex-digits hex-string)))\n\
    \  (define (parse-hex-digits hex-string)\n    (local [(define (parse-digits hex-string\
    \ hexes index)\n              (cond [(empty? hex-string) hexes]\n            \
    \        [else (parse-digits (rest hex-string) (update-hex-num index (hex-string->hex-digit\
    \ (first hex-string)) hexes) (+ index 1))]))]\n      (parse-digits hex-string\
    \ hexes 0)))\n  (define (update-hex-num index hex-digit hexes)\n    (set-hex-num-digits!\
    \ (list-ref hexes index) hex-digit)\n    hexes)\n  (define (hex-string->hex-digit\
    \ hex-string)\n    (make-hex-digit (list-ref digits (string->number hex-string\
    \ 16))))\n  (define (hex-digit->hex-string hex-digit)\n    (list->string (list-ref\
    \ digits (hex-digit-digit hex-digit))))\n  (count-primes num))", "  (cond\n  \
    \  [(equal? num '2) #t]\n    [(equal? num '3) #t]\n    [(equal? num '5) #t]\n\
    \    [(equal? num '7) #t]\n    [(equal? num 'B) #t]\n    [(equal? num 'D) #t]\n\
    \    [else #f]))\n", "  (let ([l (number->string num)]\n        [m (string-length\
    \ l)])\n    (substring l 1 (- m 1))))\n", "    (cond\n        [(string=? num \"\
    \") '()]\n        [(string=? num \"A\") '(10)]\n        [(string=? num \"B\")\
    \ '(11)]\n        [(string=? num \"C\") '(12)]\n        [(string=? num \"D\")\
    \ '(13)]\n        [(string=? num \"E\") '(14)]\n        [(string=? num \"F\")\
    \ '(15)]\n        [else (list (string->number num))]))\n    \n", "  (cond [(string=?\
    \ num \"0\") 0]\n        [(string=? num \"1\") 1]\n        [(string=? num \"2\"\
    ) 2]\n        [(string=? num \"3\") 3]\n        [(string=? num \"4\") 4]\n   \
    \     [(string=? num \"5\") 5]\n        [(string=? num \"6\") 6]\n        [(string=?\
    \ num \"7\") 7]\n        [(string=? num \"8\") 8]\n        [(string=? num \"9\"\
    ) 9]\n        [(string=? num \"A\") 10]\n        [(string=? num \"B\") 11]\n \
    \       [(string=? num \"C\") 12]\n        [(string=? num \"D\") 13]\n       \
    \ [(string=? num \"E\") 14]\n        [(string=? num \"F\") 15]\n        [else\
    \ -1]))", "  (cond\n    [(= num (string->number \"A\" 16)) 11]\n    [(= num (string->number\
    \ \"B\" 16)) 11]\n    [(= num (string->number \"C\" 16)) 11]\n    [(= num (string->number\
    \ \"D\" 16)) 13]\n    [(= num (string->number \"E\" 16)) 13]\n    [(= num (string->number\
    \ \"F\" 16)) 13]\n    [else num]))\n", "  (cond\n    [(string=? num \"A\") 11]\n\
    \    [(string=? num \"B\") 12]\n    [(string=? num \"C\") 13]\n    [(string=?\
    \ num \"D\") 14]\n    [(string=? num \"E\") 15]\n    [(string=? num \"F\") 16]\n\
    \    [else (string-&gt;number num)]))\n", "  (cond [(equal? num \"0\") 0]\n  \
    \      [(equal? num \"1\") 1]\n        [(equal? num \"2\") 2]\n        [(equal?\
    \ num \"3\") 3]\n        [(equal? num \"4\") 4]\n        [(equal? num \"5\") 5]\n\
    \        [(equal? num \"6\") 6]\n        [(equal? num \"7\") 7]\n        [(equal?\
    \ num \"8\") 8]\n        [(equal? num \"9\") 9]\n        [(equal? num \"A\") 10]\n\
    \        [(equal? num \"B\") 11]\n        [(equal? num \"C\") 12]\n        [(equal?\
    \ num \"D\") 13]\n        [(equal? num \"E\") 14]\n        [(equal? num \"F\"\
    ) 15]))\n", "  (case num\n    ((#\\2 #\\3 #\\5 #\\7 #\\B #\\D) num)\n    (else\
    \ '())))\n", "  (cond\n    [(string=? num \"0\")  0]\n    [(string=? num \"1\"\
    )  1]\n    [(string=? num \"2\")  2]\n    [(string=? num \"3\")  3]\n    [(string=?\
    \ num \"4\")  4]\n    [(string=? num \"5\")  5]\n    [(string=? num \"6\")  6]\n\
    \    [(string=? num \"7\")  7]\n    [(string=? num \"8\")  8]\n    [(string=?\
    \ num \"9\")  9]\n    [(string=? num \"A\")  10]\n    [(string=? num \"B\")  11]\n\
    \    [(string=? num \"C\")  12]\n    [(string=? num \"D\")  13]\n    [(string=?\
    \ num \"E\")  14]\n    [(string=? num \"F\")  15]\n    [else -1]))\n", "  (cond\
    \ ((= (string-length num) 0) 0)\n\t((= (string-ref num 0) #\\2) (add1 (hex_key\
    \ (substring num 1))))\n\t((= (string-ref num 0) #\\3) (add1 (hex_key (substring\
    \ num 1))))\n\t((= (string-ref num 0) #\\5) (add1 (hex_key (substring num 1))))\n\
    \t((= (string-ref num 0) #\\7) (add1 (hex_key (substring num 1))))\n\t((= (string-ref\
    \ num 0) #\\B) (add1 (hex_key (substring num 1))))\n\t((= (string-ref num 0) #\\\
    D) (add1 (hex_key (substring num 1))))\n\t(else (hex_key (substring num 1)))))\n",
  "  (cond\n    [(string=? num \"0\") 0]\n    [(string=? num \"1\") 1]\n    [(string=?\
    \ num \"2\") 2]\n    [(string=? num \"3\") 3]\n    [(string=? num \"4\") 4]\n\
    \    [(string=? num \"5\") 5]\n    [(string=? num \"6\") 6]\n    [(string=? num\
    \ \"7\") 7]\n    [(string=? num \"8\") 8]\n    [(string=? num \"9\") 9]\n    [(string=?\
    \ num \"A\") 10]\n    [(string=? num \"B\") 11]\n    [(string=? num \"C\") 12]\n\
    \    [(string=? num \"D\") 13]\n    [(string=? num \"E\") 14]\n    [(string=?\
    \ num \"F\") 15]\n    [else 0]))\n", "  (match num\n    [(list #\\0) 0]\n    [(list\
    \ #\\1) 1]\n    [(list #\\2) 2]\n    [(list #\\3) 3]\n    [(list #\\4) 4]\n  \
    \  [(list #\\5) 5]\n    [(list #\\6) 6]\n    [(list #\\7) 7]\n    [(list #\\8)\
    \ 8]\n    [(list #\\9) 9]\n    [(list #\\A) 10]\n    [(list #\\B) 11]\n    [(list\
    \ #\\C) 12]\n    [(list #\\D) 13]\n    [(list #\\E) 14]\n    [(list #\\F) 15]\n\
    \    [_ -1]))\n", "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num\
    \ \"B\") 12]\n    [(string=? num \"C\") 13]\n    [(string=? num \"D\") 14]\n \
    \   [(string=? num \"E\") 15]\n    [(string=? num \"F\") 16]\n    [else (string-&gt;number\
    \ num)]))\n", "  (cond\n    [(>= num 0) num]\n    [(= num #\\A) 10]\n    [(= num\
    \ #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n\
    \    [(= num #\\F) 15]\n    [else (error \"unknown key\")]))\n", "  (char->integer\
    \ (string-ref num 0)))\n", "  (cond\n    [(empty? num) empty]\n    [(= (first\
    \ num) #\\0) (cons #\\0 (hex_key (rest num)))]\n    [(= (first num) #\\1) (cons\
    \ #\\1 (hex_key (rest num)))]\n    [(= (first num) #\\2) (cons #\\2 (hex_key (rest\
    \ num)))]\n    [(= (first num) #\\3) (cons #\\3 (hex_key (rest num)))]\n    [(=\
    \ (first num) #\\4) (cons #\\4 (hex_key (rest num)))]\n    [(= (first num) #\\\
    5) (cons #\\5 (hex_key (rest num)))]\n    [(= (first num) #\\6) (cons #\\6 (hex_key\
    \ (rest num)))]\n    [(= (first num) #\\7) (cons #\\7 (hex_key (rest num)))]\n\
    \    [(= (first num) #\\8) (cons #\\8 (hex_key (rest num)))]\n    [(= (first num)\
    \ #\\9) (cons #\\9 (hex_key (rest num)))]\n    [(= (first num) #\\A) (cons #\\\
    A (hex_key (rest num)))]\n    [(= (first num) #\\B) (cons #\\B (hex_key (rest\
    \ num)))]\n    [(= (first num) #\\C) (cons #\\C (hex_key (rest num)))]\n    [(=\
    \ (first num) #\\D) (cons #\\D (hex_key (rest num)))]\n    [(= (first num) #\\\
    E) (cons #\\E (hex_key (rest num)))]\n    [(= (first num) #\\F) (cons #\\F (hex_key\
    \ (rest num)))]\n    [(= (first num) #\\a) (cons #\\a (hex_key (rest num)))]\n\
    \    [(= (first num) #\\b) (cons #\\b (hex_key (rest num)))]\n    [(= (first num)\
    \ #\\c) (cons #\\c (hex_key (rest num)))]\n    [(= (", "  (cond\n    [(= (string-length\
    \ num) 1) (key (string->number (string num) 16))]\n    [else (+ (key (string->number\
    \ (string (string-ref num 0)) 16)) (hex_key (substring num 1)))]))\n", "  (cond\n\
    \    ((= num #\\2) 2)\n    ((= num #\\3) 3)\n    ((= num #\\5) 5)\n    ((= num\
    \ #\\7) 7)\n    ((= num #\\B) 11)\n    ((= num #\\D) 13)\n    (#t 0)))\n", " \
    \ (cond ((string=? num \"0\") 0)\n        ((string=? num \"1\") 1)\n        ((string=?\
    \ num \"2\") 2)\n        ((string=? num \"3\") 3)\n        ((string=? num \"4\"\
    ) 4)\n        ((string=? num \"5\") 5)\n        ((string=? num \"6\") 6)\n   \
    \     ((string=? num \"7\") 7)\n        ((string=? num \"8\") 8)\n        ((string=?\
    \ num \"9\") 9)\n        ((string=? num \"A\") 10)\n        ((string=? num \"\
    B\") 11)\n        ((string=? num \"C\") 12)\n        ((string=? num \"D\") 13)\n\
    \        ((string=? num \"E\") 14)\n        ((string=? num \"F\") 15)))", "  (let\
    \ ([digits '()])\n    (for ([c (in-string num)])\n      (cond\n        [(char=?\
    \ c #\\0) (push 0 digits)]\n        [(char=? c #\\1) (push 1 digits)]\n      \
    \  [(char=? c #\\2) (push 2 digits)]\n        [(char=? c #\\3) (push 3 digits)]\n\
    \        [(char=? c #\\4) (push 4 digits)]\n        [(char=? c #\\5) (push 5 digits)]\n\
    \        [(char=? c #\\6) (push 6 digits)]\n        [(char=? c #\\7) (push 7 digits)]\n\
    \        [(char=? c #\\8) (push 8 digits)]\n        [(char=? c #\\9) (push 9 digits)]\n\
    \        [(char=? c #\\A) (push 10 digits)]\n        [(char=? c #\\B) (push 11\
    \ digits)]\n        [(char=? c #\\C) (push 12 digits)]\n        [(char=? c #\\\
    D) (push 13 digits)]\n        [(char=? c #\\E) (push 14 digits)]\n        [(char=?\
    \ c #\\F) (push 15 digits)]))\n    (reverse digits)))\n", "  (cond [(= num #\\\
    0) 0]\n        [(= num #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\\
    3) 3]\n        [(= num #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\\
    6) 6]\n        [(= num #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\\
    9) 9]\n        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\\
    C) 12]\n        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num\
    \ #\\F) 15]\n        [else 0]))\n", "  (cond\n    [(= num #\\0) 0]\n    [(= num\
    \ #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n    [(= num #\\4) 4]\n\
    \    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num #\\7) 7]\n    [(= num\
    \ #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n\
    \    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(=\
    \ num #\\F) 15]\n    [else 0]))\n", "  (cond\n    [(equal? num #\\0) 0]\n    [(equal?\
    \ num #\\1) 1]\n    [(equal? num #\\2) 2]\n    [(equal? num #\\3) 3]\n    [(equal?\
    \ num #\\4) 4]\n    [(equal? num #\\5) 5]\n    [(equal? num #\\6) 6]\n    [(equal?\
    \ num #\\7) 7]\n    [(equal? num #\\8) 8]\n    [(equal? num #\\9) 9]\n    [(equal?\
    \ num #\\A) 10]\n    [(equal? num #\\B) 11]\n    [(equal? num #\\C) 12]\n    [(equal?\
    \ num #\\D) 13]\n    [(equal? num #\\E) 14]\n    [(equal? num #\\F) 15]\n    [else\
    \ (error \"not a hex number\")]))\n", "  (cond\n    [(= num 0) \"0\"]\n    [(=\
    \ num 1) \"1\"]\n    [(= num 2) \"2\"]\n    [(= num 3) \"3\"]\n    [(= num 4)\
    \ \"4\"]\n    [(= num 5) \"5\"]\n    [(= num 6) \"6\"]\n    [(= num 7) \"7\"]\n\
    \    [(= num 8) \"8\"]\n    [(= num 9) \"9\"]\n    [(= num 10) \"A\"]\n    [(=\
    \ num 11) \"B\"]\n    [(= num 12) \"C\"]\n    [(= num 13) \"D\"]\n    [(= num\
    \ 14) \"E\"]\n    [(= num 15) \"F\"]\n    [else (display \"Not a Hexadecimal!\"\
    )]))\n", "  (cond\n    [(empty? num) 0]\n    [(or (= (first num) #\\2)\n     \
    \    (= (first num) #\\3)\n         (= (first num) #\\5)\n         (= (first num)\
    \ #\\7)\n         (= (first num) #\\B)\n         (= (first num) #\\D)) (add1 (hex_key\
    \ (rest num)))]\n    [else (hex_key (rest num))]))\n", "  (cond ((equal? num \"\
    A\") 11)\n        ((equal? num \"B\") 12)\n        ((equal? num \"C\") 13)\n \
    \       ((equal? num \"D\") 14)\n        ((equal? num \"E\") 15)\n        ((equal?\
    \ num \"F\") 16)\n        (else (string-&gt;number num))))\n", "  (let ([n (string->number\
    \ num 16)])\n    (match n [(>= n 2) n] [else 0])))\n", "  (cond\n    [(equal?\
    \ num \"A\") 11]\n    [(equal? num \"B\") 12]\n    [(equal? num \"C\") 13]\n \
    \   [(equal? num \"D\") 14]\n    [(equal? num \"E\") 15]\n    [(equal? num \"\
    F\") 16]\n    [else (string->number num)]))\n", "  (cond\n    ((string=? num \"\
    A\") 11)\n    ((string=? num \"B\") 12)\n    ((string=? num \"C\") 13)\n    ((string=?\
    \ num \"D\") 14)\n    ((string=? num \"E\") 15)\n    ((string=? num \"F\") 16)\n\
    \    (else (string->number num))))\n", "  (cond ((string=? num \"A\") 11)\n  \
    \      ((string=? num \"B\") 12)\n        ((string=? num \"C\") 13)\n        ((string=?\
    \ num \"D\") 14)\n        ((string=? num \"E\") 15)\n        ((string=? num \"\
    F\") 16)\n        (else (string->number num))))\n", "  (if (equal? num \"A\")\
    \ 11\n      (if (equal? num \"B\") 12\n          (if (equal? num \"C\") 13\n \
    \             (if (equal? num \"D\") 14\n                  (if (equal? num \"\
    E\") 15\n                      (if (equal? num \"F\") 16\n                   \
    \       (string->number num))))))))\n", "  (match num\n    [(\"2\") 2]\n    [(\"\
    3\") 3]\n    [(\"5\") 5]\n    [(\"7\") 7]\n    [(\"B\") 11]\n    [(\"D\") 13]\n\
    \    [else 0]))\n", "    (cond ((= num #\\0) 0)\n          ((= num #\\1) 1)\n\
    \          ((= num #\\2) 2)\n          ((= num #\\3) 3)\n          ((= num #\\\
    4) 4)\n          ((= num #\\5) 5)\n          ((= num #\\6) 6)\n          ((= num\
    \ #\\7) 7)\n          ((= num #\\8) 8)\n          ((= num #\\9) 9)\n         \
    \ ((= num #\\A) 10)\n          ((= num #\\B) 11)\n          ((= num #\\C) 12)\n\
    \          ((= num #\\D) 13)\n          ((= num #\\E) 14)\n          ((= num #\\\
    F) 15)))", "  (if (string=? num \"\")\n      0\n      (if (string=? num \"0\"\
    )\n          1\n          (if (string=? num \"1\")\n              1\n        \
    \      (if (string=? num \"2\")\n                  1\n                  (if (string=?\
    \ num \"3\")\n                      1\n                      (if (string=? num\
    \ \"4\")\n                          1\n                          (if (string=?\
    \ num \"5\")\n                              1\n                              (if\
    \ (string=? num \"6\")\n                                  1\n                \
    \                  (if (string=? num \"7\")\n                                \
    \      1\n                                      (if (string=? num \"8\")\n   \
    \                                       1\n                                  \
    \        (if (string=? num \"9\")\n                                          \
    \    1\n                                              (if (string=? num \"A\"\
    )\n                                                  1\n                     \
    \                             (if (string=? num \"B\")\n                     \
    \                                 1\n                                        \
    \              (if (string=? num \"C\")\n                                    \
    \                      1\n                                                   \
    \       (if (string=? num \"D\")\n                                           \
    \                   1\n                                                      \
    \        (if (string=? num \"E\")\n                                          \
    \                        1\n                                                 \
    \                 (if (string=? num \"F\")\n                                 \
    \                                     1\n                                    \
    \                                  0)))))))))))))))))))\n", "  (cond ((= (string-length\
    \ num) 1) (string->number (string num)))\n        ((string=? (substring num 0\
    \ 1) #\\0) (hex_key (substring num 1)))\n        (else (string->number (string\
    \ num)))))\n", "  (define (helper n acc)\n    (if (= n 0)\n        acc\n     \
    \   (helper (quotient n 16)\n                (cons (remainder n 16) acc))))\n\
    \  (reverse (helper num '())))\n", "  (cond\n    [(empty? num) 0]\n    [(in-set?\
    \ (first num) (set \"ABCDEF\")) (+ 1 (hex_key (rest num)))]\n    [else (hex_key\
    \ (rest num))]))\n", "  (regexp-match #rx\"^[0-9A-F]+$\" num))\n", "  (let ([key\
    \ (string->list num)])\n    (cond \n      [(empty? key) (error \"Number cannot\
    \ be empty!\")]\n      [(or (char=? (car key) #\\0) (char=? (car key) #\\1)) (list\
    \ (list 0 0) (list 1 1))]\n      [(= (car key) #\\A) (list (list 10 10) (list\
    \ 11 11))]\n      [(= (car key) #\\B) (list (list 11 11) (list 12 12))]\n    \
    \  [(= (car key) #\\C) (list (list 12 12) (list 13 13))]\n      [(= (car key)\
    \ #\\D) (list (list 13 13) (list 14 14))]\n      [(= (car key) #\\E) (list (list\
    \ 14 14) (list 15 15))]\n      [(= (car key) #\\F) (list (list 15 15) (list 16\
    \ 16))]\n      [else (list (list (char->integer (car key)) (char->integer (car\
    \ key))) (list (+ (char->integer (car key)) 1) (+ (char->integer (car key)) 1)))])))",
  "  (match num\n    ['0 '0]\n    ['1 '1]\n    ['2 '2]\n    ['3 '3]\n    ['4 '4]\n\
    \    ['5 '5]\n    ['6 '6]\n    ['7 '7]\n    ['8 '8]\n    ['9 '9]\n    ['A '10]\n\
    \    ['B '11]\n    ['C '12]\n    ['D '13]\n    ['E '14]\n    ['F '15]))", "  (cond\n\
    \    ((= num #\\0) 0)\n    ((= num #\\1) 1)\n    ((= num #\\2) 2)\n    ((= num\
    \ #\\3) 3)\n    ((= num #\\4) 4)\n    ((= num #\\5) 5)\n    ((= num #\\6) 6)\n\
    \    ((= num #\\7) 7)\n    ((= num #\\8) 8)\n    ((= num #\\9) 9)\n    ((= num\
    \ #\\A) 10)\n    ((= num #\\B) 11)\n    ((= num #\\C) 12)\n    ((= num #\\D) 13)\n\
    \    ((= num #\\E) 14)\n    ((= num #\\F) 15)\n    (else (error \"Input number\
    \ is out of range.\"))))\n", "  (cond\n    [(string=? num \"A\") 11]\n    [(string=?\
    \ num \"B\") 12]\n    [(string=? num \"C\") 13]\n    [(string=? num \"D\") 14]\n\
    \    [(string=? num \"E\") 15]\n    [(string=? num \"F\") 16]\n    [else (string-&gt;number\
    \ num)]))\n", "  (match num\n    ['A 11]\n    ['B 12]\n    ['C 13]\n    ['D 14]\n\
    \    ['E 15]\n    ['F 16]\n    [otherwise num]))\n", "  (cond [(char=? num #\\\
    0) 0]\n        [(char=? num #\\1) 1]\n        [(char=? num #\\2) 2]\n        [(char=?\
    \ num #\\3) 3]\n        [(char=? num #\\4) 4]\n        [(char=? num #\\5) 5]\n\
    \        [(char=? num #\\6) 6]\n        [(char=? num #\\7) 7]\n        [(char=?\
    \ num #\\8) 8]\n        [(char=? num #\\9) 9]\n        [(char=? num #\\A) 10]\n\
    \        [(char=? num #\\B) 11]\n        [(char=? num #\\C) 12]\n        [(char=?\
    \ num #\\D) 13]\n        [(char=? num #\\E) 14]\n        [(char=? num #\\F) 15]))\n",
  "  (match num\n    ['() 0]\n    [('a . rest) (+ 10 (hex_key rest))]\n    [('b .\
    \ rest) (+ 11 (hex_key rest))]\n    [('c . rest) (+ 12 (hex_key rest))]\n    [('d\
    \ . rest) (+ 13 (hex_key rest))]\n    [('e . rest) (+ 14 (hex_key rest))]\n  \
    \  [('f . rest) (+ 15 (hex_key rest))]\n    [('0 . rest) (hex_key rest)]\n   \
    \ [('1 . rest) (hex_key rest)]\n    [('2 . rest) (hex_key rest)]\n    [('3 . rest)\
    \ (hex_key rest)]\n    [('4 . rest) (hex_key rest)]\n    [('5 . rest) (hex_key\
    \ rest)]\n    [('6 . rest) (hex_key rest)]\n    [('7 . rest) (hex_key rest)]\n\
    \    [('8 . rest) (hex_key rest)]\n    [('9 . rest) (hex_key rest)]\n    [else\
    \ (error 'hex_key \"bad match\")]))\n", "  (cond ((eq? num #\\A) '10)\n      \
    \  ((eq? num #\\B) '11)\n        ((eq? num #\\C) '12)\n        ((eq? num #\\D)\
    \ '13)\n        ((eq? num #\\E) '14)\n        ((eq? num #\\F) '15)\n        (else\
    \ (char->integer num))))\n", "  (cond [(string=? num \"2\") 1]\n        [(string=?\
    \ num \"3\") 1]\n        [(string=? num \"5\") 1]\n        [(string=? num \"7\"\
    ) 1]\n        [(string=? num \"B\") 1]\n        [(string=? num \"D\") 1]\n   \
    \     [else 0]))\n", "  (hash 'A 10 'B 11 'C 12 'D 13 'E 14 'F 15))", "  (define\
    \ hex_digits '(2 3 5 7 11 13))\n  (define hex_digits_str \"2357BD\")\n  (define\
    \ num_str (number->string num))\n  (define num_str-upper (string-upcase num_str))\n\
    \  (define (hex_num str idx)\n    (if (&gt;= idx (string-length str))\n      \
    \  0\n        (if (string-contains hex_digits_str (string-ref str idx))\n    \
    \        (+ 1 (hex_num str (+ idx 1)))\n            (hex_num str (+ idx 1)))))\n\
    \  (hex_num num_str-upper 0))\n</code>\nTest code:\n<code>#lang racket\n", " \
    \ (cond\n    ((= num #\\0) 0)\n    ((= num #\\1) 1)\n    ((= num #\\2) 2)\n  \
    \  ((= num #\\3) 3)\n    ((= num #\\4) 4)\n    ((= num #\\5) 5)\n    ((= num #\\\
    6) 6)\n    ((= num #\\7) 7)\n    ((= num #\\8) 8)\n    ((= num #\\9) 9)\n    ((=\
    \ num #\\A) 10)\n    ((= num #\\B) 11)\n    ((= num #\\C) 12)\n    ((= num #\\\
    D) 13)\n    ((= num #\\E) 14)\n    ((= num #\\F) 15)\n  )\n)\n", "  (cond ((=\
    \ num #\\0) 0)\n        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n        ((=\
    \ num #\\3) 3)\n        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n        ((=\
    \ num #\\6) 6)\n        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n        ((=\
    \ num #\\9) 9)\n        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n       \
    \ ((= num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n  \
    \      ((= num #\\F) 15)))\n", "  (cond [(equal? num \"A\") 11]\n        [(equal?\
    \ num \"B\") 12]\n        [(equal? num \"C\") 13]\n        [(equal? num \"D\"\
    ) 14]\n        [(equal? num \"E\") 15]\n        [(equal? num \"F\") 16]\n    \
    \    [else (string->number num)]))", "  (if (string=? num \"\") 0\n      (if (string=?\
    \ num \"0\") 0\n          (if (string=? num \"1\") 0\n              (if (string=?\
    \ num \"2\") 1\n                  (if (string=? num \"3\") 1\n               \
    \       (if (string=? num \"4\") 0\n                          (if (string=? num\
    \ \"5\") 1\n                              (if (string=? num \"6\") 0\n       \
    \                           (if (string=? num \"7\") 1\n                     \
    \                 (if (string=? num \"8\") 0\n                               \
    \           (if (string=? num \"9\") 0\n                                     \
    \         (if (string=? num \"A\") 0\n                                       \
    \           (if (string=? num \"B\") 1\n                                     \
    \                 (if (string=? num \"C\") 0\n                               \
    \                           (if (string=? num \"D\") 1\n                     \
    \                                         (if (string=? num \"E\") 0\n       \
    \                                                           (if (string=? num\
    \ \"F\") 0\n                                                                 \
    \     0))))))))))))))))))\n", "  (cond\n    [(empty? num) 0]\n    [(in? (first\
    \ num) '(2 3 5 7 B D)) (+ 1 (hex_key (rest num)))]\n    [else (hex_key (rest num))]))\n\
    </code>\n\nSolution 2\n<code>#lang racket\n", "  (cond\n    [(equal? num '2) #t]\n\
    \    [(equal? num '3) #t]\n    [(equal? num '5) #t]\n    [(equal? num '7) #t]\n\
    \    [(equal? num 'b) #t]\n    [(equal? num 'd) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(member num '(0 1 2 3 4 5 6 7 8 9)) num]\n    [(equal? num 'A) 10]\n   \
    \ [(equal? num 'B) 11]\n    [(equal? num 'C) 12]\n    [(equal? num 'D) 13]\n \
    \   [(equal? num 'E) 14]\n    [(equal? num 'F) 15]\n    [else 0]))", "  (cond\
    \ [(or (= num 2) (= num 3) (= num 5) (= num 7) (= num 11) (= num 13)) #t]\n  \
    \      [else #f]))", "  (cond\n    [(equal? num \"A\") 11]\n    [(equal? num \"\
    B\") 12]\n    [(equal? num \"C\") 13]\n    [(equal? num \"D\") 14]\n    [(equal?\
    \ num \"E\") 15]\n    [(equal? num \"F\") 16]\n    [else (string->number num)]))\n",
  "  (cond\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n\
    \    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else\
    \ (integer->char num)]))\n", "  (cond [(equal? num #\\0) 0]\n        [(equal?\
    \ num #\\1) 1]\n        [(equal? num #\\2) 2]\n        [(equal? num #\\3) 3]\n\
    \        [(equal? num #\\4) 4]\n        [(equal? num #\\5) 5]\n        [(equal?\
    \ num #\\6) 6]\n        [(equal? num #\\7) 7]\n        [(equal? num #\\8) 8]\n\
    \        [(equal? num #\\9) 9]\n        [(equal? num #\\A) 10]\n        [(equal?\
    \ num #\\B) 11]\n        [(equal? num #\\C) 12]\n        [(equal? num #\\D) 13]\n\
    \        [(equal? num #\\E) 14]\n        [(equal? num #\\F) 15]))\n", "  (if (not\
    \ (string? num)) (error \"Not a string\"))\n  (define (hex_iter original i)\n\
    \    (if (= i (- (string-length original) 1)) 0\n      (if (char-numeric? (string-ref\
    \ original i)) (+ 1 (hex_iter original (+ i 1)))\n        (hex_iter original (+\
    \ i 1)))))\n  (hex_iter num 0))\n", "  (cond [(= num #\\0) 0]\n        [(= num\
    \ #\\1) 1]\n        [(= num #\\2) 2]\n        [(= num #\\3) 3]\n        [(= num\
    \ #\\4) 4]\n        [(= num #\\5) 5]\n        [(= num #\\6) 6]\n        [(= num\
    \ #\\7) 7]\n        [(= num #\\8) 8]\n        [(= num #\\9) 9]\n        [(= num\
    \ #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n        [(=\
    \ num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]\n      \
    \  [else (error \"Not a hex digit\")]))", "  (cond\n    [(string=? num \"A\")\
    \ 10]\n    [(string=? num \"B\") 11]\n    [(string=? num \"C\") 12]\n    [(string=?\
    \ num \"D\") 13]\n    [(string=? num \"E\") 14]\n    [(string=? num \"F\") 15]\n\
    \    [else (string-&gt;number num)]))\n", "  (cond [(string=? num \"A\") 11]\n\
    \        [(string=? num \"B\") 12]\n        [(string=? num \"C\") 13]\n      \
    \  [(string=? num \"D\") 14]\n        [(string=? num \"E\") 15]\n        [(string=?\
    \ num \"F\") 16]\n        [else (string->number num)]))\n", "  (cond\n    [(member\
    \ num '(0 1 2 3 4 5 6 7 8 9)) num]\n    [(string=? num \"A\") 10]\n    [(string=?\
    \ num \"B\") 11]\n    [(string=? num \"C\") 12]\n    [(string=? num \"D\") 13]\n\
    \    [(string=? num \"E\") 14]\n    [(string=? num \"F\") 15]\n    [else \"invalid\
    \ hex\"]))\n", "  (define nums '(A B C D E F))\n  (define vals '(10 11 12 13 14\
    \ 15))\n  (cond\n    [(and (integer? num)\n          (member num vals))\n    \
    \ (list-ref nums (- num 10))]\n    [(and (string? num)\n          (member num\
    \ nums))\n     (list-ref vals (list-index num nums))]\n    [else num]))\n", " \
    \ (cond ((= num #\\0) 0)\n        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n\
    \        ((= num #\\3) 3)\n        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n\
    \        ((= num #\\6) 6)\n        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n\
    \        ((= num #\\9) 9)\n        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n\
    \        ((= num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n\
    \        ((= num #\\F) 15)))\n", "  (cond [(string=? num \"A\")]\n        [(string=?\
    \ num \"B\")]\n        [(string=? num \"C\")]\n        [(string=? num \"D\")]\n\
    \        [(string=? num \"E\")]\n        [(string=? num \"F\")]\n        [else\
    \ (= num 0)]))\n", "  (match num\n    [\"0\" 0]\n    [\"1\" 1]\n    [\"2\" 2]\n\
    \    [\"3\" 3]\n    [\"4\" 4]\n    [\"5\" 5]\n    [\"6\" 6]\n    [\"7\" 7]\n \
    \   [\"8\" 8]\n    [\"9\" 9]\n    [\"A\" 10]\n    [\"B\" 11]\n    [\"C\" 12]\n\
    \    [\"D\" 13]\n    [\"E\" 14]\n    [\"F\" 15]))\n", "  (let* ([hex '(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"\
    E\" \"F\")]\n         [hex-decimal (map string->number hex)]\n         [primes\
    \ '(2 3 5 7 11 13)])\n    (let lp ([i 0])\n      (cond\n        [(eq? i (length\
    \ hex)) \"\"]\n        [(and (member (list-ref hex i) '((\"B\") (\"D\"))) (list-ref\
    \ hex-decimal i))\n         i]\n        [else (lp (+ i 1))]))))\n", "  (if (equal?\
    \ num \"\")\n      num\n      (let* ([new-num (substring num 1)]\n           \
    \  [current-char (substring num 0 1)])\n        (if (member current-char '(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\"))\n            (string-append current-char (hex_key\
    \ new-num))\n            (hex_key new-num)))))\n", "    (cond\n      [(equal?\
    \ num \"A\") 11]\n      [(equal? num \"B\") 12]\n      [(equal? num \"C\") 13]\n\
    \      [(equal? num \"D\") 14]\n      [(equal? num \"E\") 15]\n      [(equal?\
    \ num \"F\") 16]\n      [else (string->number num)]))\n", "\t(case num\n\t\t[(0)]\
    \ 0\n\t\t[(1)] 1\n\t\t[(2)] 2\n\t\t[(3)] 3\n\t\t[(4)] 4\n\t\t[(5)] 5\n\t\t[(6)]\
    \ 6\n\t\t[(7)] 7\n\t\t[(8)] 8\n\t\t[(9)] 9\n\t\t[(A)] 10\n\t\t[(B)] 11\n\t\t[(C)]\
    \ 12\n\t\t[(D)] 13\n\t\t[(E)] 14\n\t\t[(F)] 15))\n", "  (cond\n    [(= num #\\\
    0) 0]\n    [(= num #\\1) 1]\n    [(= num #\\2) 2]\n    [(= num #\\3) 3]\n    [(=\
    \ num #\\4) 4]\n    [(= num #\\5) 5]\n    [(= num #\\6) 6]\n    [(= num #\\7)\
    \ 7]\n    [(= num #\\8) 8]\n    [(= num #\\9) 9]\n    [(= num #\\A) 10]\n    [(=\
    \ num #\\B) 11]\n    [(= num #\\C) 12]\n    [(= num #\\D) 13]\n    [(= num #\\\
    E) 14]\n    [(= num #\\F) 15]\n    [else 0]))\n", "  (cond ((= (string-length\
    \ num) 1)\n         (if (member (string-ref num 0) '(\"2\" \"3\" \"5\" \"7\" \"\
    B\" \"D\")) 1 0))\n        ((member (string-ref num 0) '(\"2\" \"3\" \"5\" \"\
    7\" \"B\" \"D\"))\n         (+ 1 (hex_key (substring num 1))))\n        (else\
    \ (hex_key (substring num 1)))))\n", "  (if (or (equal? num \"1\") (equal? num\
    \ \"0\"))\n      1\n      (let ((decimal-num (string->number num 16)))\n     \
    \   (if (or (equal? decimal-num 11)\n                (equal? decimal-num 13))\n\
    \            1\n            (if (or (equal? decimal-num 2)\n                 \
    \   (equal? decimal-num 3)\n                    (equal? decimal-num 5)\n     \
    \               (equal? decimal-num 7))\n                1\n                0)))))\n",
  "  (cond\n    [(= num #\\A) 10]\n    [(= num #\\B) 11]\n    [(= num #\\C) 12]\n\
    \    [(= num #\\D) 13]\n    [(= num #\\E) 14]\n    [(= num #\\F) 15]\n    [else\
    \ (char->integer num)]))\n", "  (cond\n    [(string=? num \"0\") #t]\n    [(string=?\
    \ num \"1\") #t]\n    [(string=? num \"2\") #t]\n    [(string=? num \"3\") #t]\n\
    \    [(string=? num \"4\") #t]\n    [(string=? num \"5\") #t]\n    [(string=?\
    \ num \"6\") #t]\n    [(string=? num \"7\") #t]\n    [(string=? num \"8\") #t]\n\
    \    [(string=? num \"9\") #t]\n    [(string=? num \"A\") #t]\n    [(string=?\
    \ num \"B\") #t]\n    [(string=? num \"C\") #t]\n    [(string=? num \"D\") #t]\n\
    \    [(string=? num \"E\") #t]\n    [(string=? num \"F\") #t]\n    [else #f]))\n",
  "  (if (= num 0) \"\"\n      (append (number->string num) (hex_key (- num 1)))))\n",
  "  (define (helper num key)\n    (if (empty? num) key\n        (if (or (= (first\
    \ num) #\\0) (= (first num) #\\1) (= (first num) #\\2)\n                (= (first\
    \ num) #\\3) (= (first num) #\\4) (= (first num) #\\5)\n                (= (first\
    \ num) #\\6) (= (first num) #\\7) (= (first num) #\\8)\n                (= (first\
    \ num) #\\9) (= (first num) #\\A) (= (first num) #\\B)\n                (= (first\
    \ num) #\\C) (= (first num) #\\D) (= (first num) #\\E)\n                (= (first\
    \ num) #\\F)) (helper (rest num) (cons (first num) key))\n                (helper\
    \ (rest num) key)))))\n  (helper num '()))\n", "  (cond\n    ((equal? num \"A\"\
    ) 11)\n    ((equal? num \"B\") 12)\n    ((equal? num \"C\") 13)\n    ((equal?\
    \ num \"D\") 14)\n    ((equal? num \"E\") 15)\n    ((equal? num \"F\") 16)\n \
    \   (else (string->number num))))\n", "  (if (= num 0)\n      '()\n      (append\
    \ (hex_key (- num 1)) (list (- num 1)))))\n", "  (cond\n    [(equal? (string-length\
    \ num) 1) (string->number (string-append \"0\" num) 16)]\n    [else (string->number\
    \ num 16)]))", "  (cond\n    [(equal? num \"0\") 0]\n    [(equal? num \"1\") 1]\n\
    \    [(equal? num \"2\") 2]\n    [(equal? num \"3\") 3]\n    [(equal? num \"4\"\
    ) 4]\n    [(equal? num \"5\") 5]\n    [(equal? num \"6\") 6]\n    [(equal? num\
    \ \"7\") 7]\n    [(equal? num \"8\") 8]\n    [(equal? num \"9\") 9]\n    [(equal?\
    \ num \"A\") 10]\n    [(equal? num \"B\") 11]\n    [(equal? num \"C\") 12]\n \
    \   [(equal? num \"D\") 13]\n    [(equal? num \"E\") 14]\n    [(equal? num \"\
    F\") 15]\n    [else 0]))\n", "  (match num\n    ['#\\0 #\\0]\n    ['#\\1 #\\1]\n\
    \    ['#\\2 #\\2]\n    ['#\\3 #\\3]\n    ['#\\4 #\\4]\n    ['#\\5 #\\5]\n    ['#\\\
    6 #\\6]\n    ['#\\7 #\\7]\n    ['#\\8 #\\8]\n    ['#\\9 #\\9]\n    ['#\\A #\\\
    A]\n    ['#\\B #\\B]\n    ['#\\C #\\C]\n    ['#\\D #\\D]\n    ['#\\E #\\E]\n \
    \   ['#\\F #\\F]\n    [else (error 'hex_key \"~s not a valid hex digit\" num)]))\n",
  "    (match num\n        [(? string-contains \"0\") 0]\n        [(? string-contains\
    \ \"1\") 1]\n        [(? string-contains \"2\") 2]\n        [(? string-contains\
    \ \"3\") 3]\n        [(? string-contains \"4\") 4]\n        [(? string-contains\
    \ \"5\") 5]\n        [(? string-contains \"6\") 6]\n        [(? string-contains\
    \ \"7\") 7]\n        [(? string-contains \"8\") 8]\n        [(? string-contains\
    \ \"9\") 9]\n        [(? string-contains \"A\") 10]\n        [(? string-contains\
    \ \"B\") 11]\n        [(? string-contains \"C\") 12]\n        [(? string-contains\
    \ \"D\") 13]\n        [(? string-contains \"E\") 14]\n        [(? string-contains\
    \ \"F\") 15]\n        ))\n", "  (define (is-prime? n)\n    (define (helper a)\n\
    \      (if (> a (/ n 2)) #t\n          (if (= (modulo n a) 0) #f\n           \
    \   (helper (+ a 1)))))\n    (helper 2))\n  (define (helper str acc)\n    (if\
    \ (string-empty? str) acc\n        (let ([n (string->number (substring str 0 1)\
    \ 16)])\n          (if (is-prime? n) (helper (substring str 1) (+ acc 1))\n  \
    \            (helper (substring str 1) acc)))))\n  (helper num 0))\n", "  (cond\n\
    \    [(string=? num \"2\") 2]\n    [(string=? num \"3\") 3]\n    [(string=? num\
    \ \"5\") 5]\n    [(string=? num \"7\") 7]\n    [(string=? num \"B\") 11]\n   \
    \ [(string=? num \"D\") 13]\n    [else 0]))\n", "  (cond [(= num 0) 2]\n     \
    \   [(= num 1) 3]\n        [(= num 2) 5]\n        [(= num 3) 7]\n        [(= num\
    \ 4) 11]\n        [(= num 5) 13]\n        [else 1]))\n", "  (cond [(and (= num\
    \ #\\0) (= num #\\1) (= num #\\2) (= num #\\3) (= num #\\4)\n            (= num\
    \ #\\5) (= num #\\6) (= num #\\7) (= num #\\8) (= num #\\9))\n         num]\n\
    \        [(= num #\\A) 10]\n        [(= num #\\B) 11]\n        [(= num #\\C) 12]\n\
    \        [(= num #\\D) 13]\n        [(= num #\\E) 14]\n        [(= num #\\F) 15]))\n",
  "  (cond\n    [(string=? num \"A\") 11]\n    [(string=? num \"B\") 12]\n    [(string=?\
    \ num \"C\") 13]\n    [(string=? num \"D\") 14]\n    [(string=? num \"E\") 15]\n\
    \    [(string=? num \"F\") 16]\n    [else (string-&gt;number num)]))\n", "  (cond\
    \ ((equal? num \"0\") 0)\n        ((equal? num \"1\") 1)\n        ((equal? num\
    \ \"2\") 2)\n        ((equal? num \"3\") 3)\n        ((equal? num \"4\") 4)\n\
    \        ((equal? num \"5\") 5)\n        ((equal? num \"6\") 6)\n        ((equal?\
    \ num \"7\") 7)\n        ((equal? num \"8\") 8)\n        ((equal? num \"9\") 9)\n\
    \        ((equal? num \"A\") 10)\n        ((equal? num \"B\") 11)\n        ((equal?\
    \ num \"C\") 12)\n        ((equal? num \"D\") 13)\n        ((equal? num \"E\"\
    ) 14)\n        ((equal? num \"F\") 15)))", "  (cond\n    [(= (string-length num)\
    \ 1) (string->number (substring num 0 1) 16)]\n    [else (string->number (substring\
    \ num 0 1) 16)\n          (+ (* 16 (hex_key (substring num 1)))\n            \
    \ (string->number (substring num 1 1) 16))]))\n", "    (let ((str (string->list\
    \ num)))\n        (match str\n          [(list) 0]\n          [(list hd . tl)\
    \ (if (or (equal? hd #\\0)\n                                  (equal? hd #\\1)\n\
    \                                  (equal? hd #\\2)\n                        \
    \          (equal? hd #\\3)\n                                  (equal? hd #\\\
    4)\n                                  (equal? hd #\\5)\n                     \
    \             (equal? hd #\\6)\n                                  (equal? hd #\\\
    7)\n                                  (equal? hd #\\8)\n                     \
    \             (equal? hd #\\9)\n                                  (equal? hd #\\\
    A)\n                                  (equal? hd #\\B)\n                     \
    \             (equal? hd #\\C)\n                                  (equal? hd #\\\
    D)\n                                  (equal? hd #\\E)\n                     \
    \             (equal? hd #\\F))\n                              (+ (1) (hex_key\
    \ (list->string tl)))\n                              (hex_key (list->string tl))))]))",
  "  (cond\n    [(equal? num \"A\") 11]\n    [(equal? num \"B\") 12]\n    [(equal?\
    \ num \"C\") 13]\n    [(equal? num \"D\") 14]\n    [(equal? num \"E\") 15]\n \
    \   [(equal? num \"F\") 16]\n    [else (string->number num)]))\n", "  (cond ((=\
    \ num #\\0) 0)\n        ((= num #\\1) 1)\n        ((= num #\\2) 2)\n        ((=\
    \ num #\\3) 3)\n        ((= num #\\4) 4)\n        ((= num #\\5) 5)\n        ((=\
    \ num #\\6) 6)\n        ((= num #\\7) 7)\n        ((= num #\\8) 8)\n        ((=\
    \ num #\\9) 9)\n        ((= num #\\A) 10)\n        ((= num #\\B) 11)\n       \
    \ ((= num #\\C) 12)\n        ((= num #\\D) 13)\n        ((= num #\\E) 14)\n  \
    \      ((= num #\\F) 15)))\n", "  (case num\n    ((48) 0)\n    ((49) 1)\n    ((50)\
    \ 2)\n    ((51) 3)\n    ((52) 4)\n    ((53) 5)\n    ((54) 6)\n    ((55) 7)\n \
    \   ((56) 8)\n    ((57) 9)\n    ((65) 10)\n    ((66) 11)\n    ((67) 12)\n    ((68)\
    \ 13)\n    ((69) 14)\n    ((70) 15)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
